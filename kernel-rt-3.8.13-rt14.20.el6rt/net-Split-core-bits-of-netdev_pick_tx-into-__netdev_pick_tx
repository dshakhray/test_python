From a428004bacf67365a04bca9f7ed39757b2629813 Mon Sep 17 00:00:00 2001
From: Alexander Duyck <alexander.h.duyck@intel.com>
Date: Thu, 10 Jan 2013 08:56:51 +0000
Subject: [PATCH 769/858] net: Split core bits of netdev_pick_tx into
 __netdev_pick_tx

This change splits the core bits of netdev_pick_tx into a separate function.
The main idea behind this is to make this code accessible to select queue
functions when they decide to process the standard path instead of their
own custom path in their select queue routine.

Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 416186fbf8c5b4e4465a10c6ac7a45b6c47144b2)

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 include/linux/netdevice.h |  1 +
 net/core/dev.c            | 57 ++++++++++++++++++++++++++---------------------
 2 files changed, 33 insertions(+), 25 deletions(-)

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 634d1518..a932d9f 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1410,6 +1410,7 @@ static inline void netdev_for_each_tx_queue(struct net_device *dev,
 
 extern struct netdev_queue *netdev_pick_tx(struct net_device *dev,
         struct sk_buff *skb);
+extern u16 __netdev_pick_tx(struct net_device *dev, struct sk_buff *skb);
 
 /*
  * Net namespace inlines
diff --git a/net/core/dev.c b/net/core/dev.c
index 197cac2..cd239a3 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -2501,37 +2501,44 @@ static inline int get_xps_queue(struct net_device *dev, struct sk_buff *skb)
 #endif
 }
 
-struct netdev_queue *netdev_pick_tx(struct net_device *dev,
-        struct sk_buff *skb)
+u16 __netdev_pick_tx(struct net_device *dev, struct sk_buff *skb)
 {
- int queue_index;
- const struct net_device_ops *ops = dev->netdev_ops;
-
- if (dev->real_num_tx_queues == 1)
-  queue_index = 0;
- else if (ops->ndo_select_queue) {
-  queue_index = ops->ndo_select_queue(dev, skb);
-  queue_index = dev_cap_txqueue(dev, queue_index);
- } else {
-  struct sock *sk = skb->sk;
-  queue_index = sk_tx_queue_get(sk);
+ struct sock *sk = skb->sk;
+ int queue_index = sk_tx_queue_get(sk);
 
-  if (queue_index < 0 || skb->ooo_okay ||
-      queue_index >= dev->real_num_tx_queues) {
-   int old_index = queue_index;
+ if (queue_index < 0 || skb->ooo_okay ||
+     queue_index >= dev->real_num_tx_queues) {
+  int new_index = get_xps_queue(dev, skb);
+  if (new_index < 0)
+   new_index = skb_tx_hash(dev, skb);
 
-   queue_index = get_xps_queue(dev, skb);
-   if (queue_index < 0)
-    queue_index = skb_tx_hash(dev, skb);
-
-   if (queue_index != old_index && sk) {
-    struct dst_entry *dst =
+  if (queue_index != new_index && sk) {
+   struct dst_entry *dst =
         rcu_dereference_check(sk->sk_dst_cache, 1);
 
-    if (dst && skb_dst(skb) == dst)
-     sk_tx_queue_set(sk, queue_index);
-   }
+   if (dst && skb_dst(skb) == dst)
+    sk_tx_queue_set(sk, queue_index);
+
   }
+
+  queue_index = new_index;
+ }
+
+ return queue_index;
+}
+
+struct netdev_queue *netdev_pick_tx(struct net_device *dev,
+        struct sk_buff *skb)
+{
+ int queue_index = 0;
+
+ if (dev->real_num_tx_queues != 1) {
+  const struct net_device_ops *ops = dev->netdev_ops;
+  if (ops->ndo_select_queue)
+   queue_index = ops->ndo_select_queue(dev, skb);
+  else
+   queue_index = __netdev_pick_tx(dev, skb);
+  queue_index = dev_cap_txqueue(dev, queue_index);
  }
 
  skb_set_queue_mapping(skb, queue_index);
-- 
1.8.3.1