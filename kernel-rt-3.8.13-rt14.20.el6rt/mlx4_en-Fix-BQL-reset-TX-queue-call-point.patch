From a426a25a79d7b689679091c024a3ff522a8c08b5 Mon Sep 17 00:00:00 2001
From: Tom Herbert <therbert@google.com>
Date: Wed, 6 Feb 2013 07:58:41 +0000
Subject: [PATCH 519/858] mlx4_en: Fix BQL reset TX queue call point

Fix issue in Mellanox driver related to BQL.  netdev_tx_reset_queue
was not being called in certain situations where the device was
being start and stopped.  Moved netdev_tx_reset_queue from the reset
device path to mlx4_en_free_tx_buf which is where the rings are
cleaned in a reset (specifically from device being stopped).

Signed-off-by: Tom Herbert <therbert@google.com>
Acked-By: Amir Vadai <amirv@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 41b749201bbe54ce807c4287b4942e85cb0ca466)

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 drivers/net/ethernet/mellanox/mlx4/en_netdev.c | 3 ---
 drivers/net/ethernet/mellanox/mlx4/en_tx.c     | 2 ++
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index 0471b9e..e6cadc8 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@ -1668,15 +1668,12 @@ static void mlx4_en_restart(struct work_struct *work)
        watchdog_task);
  struct mlx4_en_dev *mdev = priv->mdev;
  struct net_device *dev = priv->dev;
- int i;
 
  en_dbg(DRV, priv, "Watchdog task called for port %d\n", priv->port);
 
  mutex_lock(&mdev->state_lock);
  if (priv->port_up) {
   mlx4_en_stop_port(dev, 1);
-  for (i = 0; i < priv->tx_ring_num; i++)
-   netdev_tx_reset_queue(priv->tx_ring[i].tx_queue);
   if (mlx4_en_start_port(dev))
    en_err(priv, "Failed restarting port %d\n", priv->port);
  }
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_tx.c b/drivers/net/ethernet/mellanox/mlx4/en_tx.c
index d26b94a..9a5c649 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_tx.c
@@ -294,6 +294,8 @@ int mlx4_en_free_tx_buf(struct net_device *dev, struct mlx4_en_tx_ring *ring)
   cnt++;
  }
 
+ netdev_tx_reset_queue(ring->tx_queue);
+
  if (cnt)
   en_dbg(DRV, priv, "Freed %d uncompleted tx descriptors\n", cnt);
 
-- 
1.8.3.1