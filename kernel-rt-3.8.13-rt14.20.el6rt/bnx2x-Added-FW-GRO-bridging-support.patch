From a91f57f7d052d389a05c318e60ff5df5a2c0a8ef Mon Sep 17 00:00:00 2001
From: Yuval Mintz <yuvalmin@broadcom.com>
Date: Mon, 14 Jan 2013 05:11:49 +0000
Subject: [PATCH 616/858] bnx2x: Added FW GRO bridging support

Since submit 621b4d6 the bnx2x driver support FW GRO.
However, when using the device with GRO enabled in bridging
scenarios throughput is very low, as the bridge expects all
incoming packets to be passed with CHECKSUM_PARTIAL -
a demand which is satisfied by the SW GRO implementation,
but was missed in the bnx2x driver implementation (which returned
CHECKSUM_UNNECESSARY).

Now, given that the traffic is supported by FW GRO (TCP/IP),
the bnx2x driver calculates the pseudo checksum by itself,
passing skbs with CHECKSUM_PARTIAL and giving a much better
throughput when receiving GRO traffic.

Signed-off-by: Yuval Mintz <yuvalmin@broadcom.com>
Signed-off-by: Ariel Elior <ariele@broadcom.com>
Signed-off-by: Eilon Greenstein <eilong@broadcom.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9969085e7e1db68275ddfe594eac21563427fb55)

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

Conflicts:
 drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c

Move bnx2x_shrink_eth_fp to the place it is in 3.9.4, simple
function source code move, no functional change.
---
 drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c  | 102 +++++++++++++++++------
 drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c |   2 +-
 2 files changed, 77 insertions(+), 27 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
index b81f3eb..57619dd 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
@@ -21,6 +21,7 @@
 #include <linux/if_vlan.h>
 #include <linux/interrupt.h>
 #include <linux/ip.h>
+#include <net/tcp.h>
 #include <net/ipv6.h>
 #include <net/ip6_checksum.h>
 #include <linux/prefetch.h>
@@ -85,31 +86,6 @@ static inline void bnx2x_move_fp(struct bnx2x *bp, int from, int to)
 }
 
 /**
- * bnx2x_shrink_eth_fp - guarantees fastpath structures stay intact
- *
- * @bp: driver handle
- * @delta: number of eth queues which were not allocated
- */
-static void bnx2x_shrink_eth_fp(struct bnx2x *bp, int delta)
-{
- int i, cos, old_eth_num = BNX2X_NUM_ETH_QUEUES(bp);
-
- /* Queue pointer cannot be re-set on an fp-basis, as moving pointer
-  * backward along the array could cause memory to be overriden
-  */
- for (cos = 1; cos < bp->max_cos; cos++) {
-  for (i = 0; i < old_eth_num - delta; i++) {
-   struct bnx2x_fastpath *fp = &bp->fp[i];
-   int new_idx = cos * (old_eth_num - delta) + i;
-
-   memcpy(&bp->bnx2x_txq[new_idx], fp->txdata_ptr[cos],
-          sizeof(struct bnx2x_fp_txdata));
-   fp->txdata_ptr[cos] = &bp->bnx2x_txq[new_idx];
-  }
- }
-}
-
-/**
  * bnx2x_fill_fw_str - Fill buffer with FW version string.
  *
  * @bp:        driver handle
@@ -137,6 +113,31 @@ void bnx2x_fill_fw_str(struct bnx2x *bp, char *buf, size_t buf_len)
  }
 }
 
+/**
+ * bnx2x_shrink_eth_fp - guarantees fastpath structures stay intact
+ *
+ * @bp: driver handle
+ * @delta: number of eth queues which were not allocated
+ */
+static void bnx2x_shrink_eth_fp(struct bnx2x *bp, int delta)
+{
+ int i, cos, old_eth_num = BNX2X_NUM_ETH_QUEUES(bp);
+
+ /* Queue pointer cannot be re-set on an fp-basis, as moving pointer
+  * backward along the array could cause memory to be overriden
+  */
+ for (cos = 1; cos < bp->max_cos; cos++) {
+  for (i = 0; i < old_eth_num - delta; i++) {
+   struct bnx2x_fastpath *fp = &bp->fp[i];
+   int new_idx = cos * (old_eth_num - delta) + i;
+
+   memcpy(&bp->bnx2x_txq[new_idx], fp->txdata_ptr[cos],
+          sizeof(struct bnx2x_fp_txdata));
+   fp->txdata_ptr[cos] = &bp->bnx2x_txq[new_idx];
+  }
+ }
+}
+
 int load_count[2][3] = { {0} }; /* per-path: 0-common, 1-port0, 2-port1 */
 
 /* free skb in the packet ring at pos idx
@@ -616,6 +617,55 @@ static void *bnx2x_frag_alloc(const struct bnx2x_fastpath *fp)
  return kmalloc(fp->rx_buf_size + NET_SKB_PAD, GFP_ATOMIC);
 }
 
+#ifdef CONFIG_INET
+static void bnx2x_gro_ip_csum(struct bnx2x *bp, struct sk_buff *skb)
+{
+ const struct iphdr *iph = ip_hdr(skb);
+ struct tcphdr *th;
+
+ skb_set_transport_header(skb, sizeof(struct iphdr));
+ th = tcp_hdr(skb);
+
+ th->check = ~tcp_v4_check(skb->len - skb_transport_offset(skb),
+      iph->saddr, iph->daddr, 0);
+}
+
+static void bnx2x_gro_ipv6_csum(struct bnx2x *bp, struct sk_buff *skb)
+{
+ struct ipv6hdr *iph = ipv6_hdr(skb);
+ struct tcphdr *th;
+
+ skb_set_transport_header(skb, sizeof(struct ipv6hdr));
+ th = tcp_hdr(skb);
+
+ th->check = ~tcp_v6_check(skb->len - skb_transport_offset(skb),
+      &iph->saddr, &iph->daddr, 0);
+}
+#endif
+
+static void bnx2x_gro_receive(struct bnx2x *bp, struct bnx2x_fastpath *fp,
+          struct sk_buff *skb)
+{
+#ifdef CONFIG_INET
+ if (skb_shinfo(skb)->gso_size) {
+  skb_set_network_header(skb, 0);
+  switch (be16_to_cpu(skb->protocol)) {
+  case ETH_P_IP:
+   bnx2x_gro_ip_csum(bp, skb);
+   break;
+  case ETH_P_IPV6:
+   bnx2x_gro_ipv6_csum(bp, skb);
+   break;
+  default:
+   BNX2X_ERR("FW GRO supports only IPv4/IPv6, not 0x%04x\n",
+      be16_to_cpu(skb->protocol));
+  }
+  tcp_gro_complete(skb);
+ }
+#endif
+ napi_gro_receive(&fp->napi, skb);
+}
+
 static void bnx2x_tpa_stop(struct bnx2x *bp, struct bnx2x_fastpath *fp,
       struct bnx2x_agg_info *tpa_info,
       u16 pages,
@@ -669,7 +719,7 @@ static void bnx2x_tpa_stop(struct bnx2x *bp, struct bnx2x_fastpath *fp,
       skb, cqe, cqe_idx)) {
    if (tpa_info->parsing_flags & PARSING_FLAGS_VLAN)
     __vlan_hwaccel_put_tag(skb, tpa_info->vlan_tag);
-   napi_gro_receive(&fp->napi, skb);
+   bnx2x_gro_receive(bp, fp, skb);
   } else {
    DP(NETIF_MSG_RX_STATUS,
       "Failed to allocate new pages - dropping packet!\n");
diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c
index ae0bd73..c50696b 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c
@@ -8843,7 +8843,7 @@ static void bnx2x_set_234_gates(struct bnx2x *bp, bool close)
          (!close) ? (val | HC_CONFIG_0_REG_BLOCK_DISABLE_0) :
          (val & ~(u32)HC_CONFIG_0_REG_BLOCK_DISABLE_0));
  } else {
-  /* Prevent incomming interrupts in IGU */
+  /* Prevent incoming interrupts in IGU */
   val = REG_RD(bp, IGU_REG_BLOCK_CONFIGURATION);
 
   REG_WR(bp, IGU_REG_BLOCK_CONFIGURATION,
-- 
1.8.3.1