From 4d3c7a4d0971c975259d61c6d448c518f425bf4a Mon Sep 17 00:00:00 2001
From: Sony Chacko <sony.chacko@qlogic.com>
Date: Tue, 1 Jan 2013 03:20:22 +0000
Subject: [PATCH 420/858] qlcnic: 83xx sysfs routines

Add 83xx sysfs interface routines
Update 82xx sysfs interface routines

Signed-off-by: Anirban Chakraborty <anirban.chakraborty@qlogic.com>
Signed-off-by: Sony Chacko <sony.chacko@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 319ecf121e1da3d75dd1bde32fed255532e61797)

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 drivers/net/ethernet/qlogic/qlcnic/qlcnic.h        |  11 +-
 .../net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c    |  60 +++++
 .../net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h    |   3 +
 .../net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c    |   4 +-
 drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c   |  56 ++---
 drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c  | 254 ++++++++++++++-------
 6 files changed, 266 insertions(+), 122 deletions(-)

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
index dd9be4f..6d51c24 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
@@ -1429,8 +1429,8 @@ int qlcnic_reset_context(struct qlcnic_adapter *);
 void qlcnic_diag_free_res(struct net_device *netdev, int max_sds_rings);
 int qlcnic_diag_alloc_res(struct net_device *netdev, int test);
 netdev_tx_t qlcnic_xmit_frame(struct sk_buff *skb, struct net_device *netdev);
-int qlcnic_set_max_rss(struct qlcnic_adapter *adapter, u8 data);
-int qlcnic_validate_max_rss(struct net_device *netdev, u8, u8);
+int qlcnic_set_max_rss(struct qlcnic_adapter *, u8, size_t);
+int qlcnic_validate_max_rss(u8, u8);
 void qlcnic_alloc_lb_filters_mem(struct qlcnic_adapter *adapter);
 int qlcnic_enable_msix(struct qlcnic_adapter *, u32);
 
@@ -1468,6 +1468,13 @@ void qlcnic_set_vlan_config(struct qlcnic_adapter *,
        struct qlcnic_esw_func_cfg *);
 void qlcnic_set_eswitch_port_features(struct qlcnic_adapter *,
           struct qlcnic_esw_func_cfg *);
+void __qlcnic_down(struct qlcnic_adapter *, struct net_device *);
+void qlcnic_detach(struct qlcnic_adapter *);
+void qlcnic_teardown_intr(struct qlcnic_adapter *);
+int qlcnic_attach(struct qlcnic_adapter *);
+int __qlcnic_up(struct qlcnic_adapter *, struct net_device *);
+void qlcnic_restore_indev_addr(struct net_device *, unsigned long);
+
 
 /*
  * QLOGIC Board information
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c
index b2b024c..6d4d792 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c
@@ -242,6 +242,8 @@ static struct qlcnic_hardware_ops qlcnic_83xx_hw_ops = {
  .get_func_no   = qlcnic_83xx_get_func_no,
  .api_lock   = qlcnic_83xx_cam_lock,
  .api_unlock   = qlcnic_83xx_cam_unlock,
+ .add_sysfs   = qlcnic_83xx_add_sysfs,
+ .remove_sysfs   = qlcnic_83xx_remove_sysfs,
  .process_lb_rcv_ring_diag = qlcnic_83xx_process_rcv_ring_diag,
  .create_rx_ctx   = qlcnic_83xx_create_rx_ctx,
  .create_tx_ctx   = qlcnic_83xx_create_tx_ctx,
@@ -1154,6 +1156,64 @@ out:
  return err;
 }
 
+int qlcnic_83xx_config_led(struct qlcnic_adapter *adapter, u32 state,
+      u32 beacon)
+{
+ struct qlcnic_cmd_args cmd;
+ u32 mbx_in;
+ int i, status = 0;
+
+ if (state) {
+  /* Get LED configuration */
+  qlcnic_alloc_mbx_args(&cmd, adapter,
+          QLCNIC_CMD_GET_LED_CONFIG);
+  status = qlcnic_issue_cmd(adapter, &cmd);
+  if (status) {
+   dev_err(&adapter->pdev->dev,
+    "Get led config failed.\n");
+   goto mbx_err;
+  } else {
+   for (i = 0; i < 4; i++)
+    adapter->ahw->mbox_reg[i] = cmd.rsp.arg[i+1];
+  }
+  qlcnic_free_mbx_args(&cmd);
+  /* Set LED Configuration */
+  mbx_in = (LSW(QLC_83XX_LED_CONFIG) << 16) |
+     LSW(QLC_83XX_LED_CONFIG);
+  qlcnic_alloc_mbx_args(&cmd, adapter,
+          QLCNIC_CMD_SET_LED_CONFIG);
+  cmd.req.arg[1] = mbx_in;
+  cmd.req.arg[2] = mbx_in;
+  cmd.req.arg[3] = mbx_in;
+  if (beacon)
+   cmd.req.arg[4] = QLC_83XX_ENABLE_BEACON;
+  status = qlcnic_issue_cmd(adapter, &cmd);
+  if (status) {
+   dev_err(&adapter->pdev->dev,
+    "Set led config failed.\n");
+  }
+mbx_err:
+  qlcnic_free_mbx_args(&cmd);
+  return status;
+
+ } else {
+  /* Restoring default LED configuration */
+  qlcnic_alloc_mbx_args(&cmd, adapter,
+          QLCNIC_CMD_SET_LED_CONFIG);
+  cmd.req.arg[1] = adapter->ahw->mbox_reg[0];
+  cmd.req.arg[2] = adapter->ahw->mbox_reg[1];
+  cmd.req.arg[3] = adapter->ahw->mbox_reg[2];
+  if (beacon)
+   cmd.req.arg[4] = adapter->ahw->mbox_reg[3];
+  status = qlcnic_issue_cmd(adapter, &cmd);
+  if (status)
+   dev_err(&adapter->pdev->dev,
+    "Restoring led config failed.\n");
+  qlcnic_free_mbx_args(&cmd);
+  return status;
+ }
+}
+
 void qlcnic_83xx_register_nic_idc_func(struct qlcnic_adapter *adapter,
            int enable)
 {
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h
index 51775e4..7af5a46 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h
@@ -189,6 +189,8 @@ void qlcnic_83xx_get_func_no(struct qlcnic_adapter *);
 int qlcnic_83xx_cam_lock(struct qlcnic_adapter *);
 void qlcnic_83xx_cam_unlock(struct qlcnic_adapter *);
 int qlcnic_send_ctrl_op(struct qlcnic_adapter *, struct qlcnic_cmd_args *, u32);
+void qlcnic_83xx_add_sysfs(struct qlcnic_adapter *);
+void qlcnic_83xx_remove_sysfs(struct qlcnic_adapter *);
 void qlcnic_83xx_write_crb(struct qlcnic_adapter *, char *, loff_t, size_t);
 void qlcnic_83xx_read_crb(struct qlcnic_adapter *, char *, loff_t, size_t);
 int qlcnic_83xx_rd_reg_indirect(struct qlcnic_adapter *, ulong);
@@ -209,6 +211,7 @@ int qlcnic_83xx_napi_add(struct qlcnic_adapter *, struct net_device *);
 void qlcnic_83xx_napi_del(struct qlcnic_adapter *);
 void qlcnic_83xx_napi_enable(struct qlcnic_adapter *);
 void qlcnic_83xx_napi_disable(struct qlcnic_adapter *);
+int qlcnic_83xx_config_led(struct qlcnic_adapter *, u32, u32);
 void qlcnic_ind_wr(struct qlcnic_adapter *, u32, u32);
 int qlcnic_ind_rd(struct qlcnic_adapter *, u32);
 void qlcnic_83xx_get_stats(struct qlcnic_adapter *,
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
index 064f36b..920e33d 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
@@ -529,11 +529,11 @@ static int qlcnic_set_channels(struct net_device *dev,
      channel->tx_count != channel->max_tx)
   return -EINVAL;
 
- err = qlcnic_validate_max_rss(dev, channel->max_rx, channel->rx_count);
+ err = qlcnic_validate_max_rss(channel->max_rx, channel->rx_count);
  if (err)
   return err;
 
- err = qlcnic_set_max_rss(adapter, channel->rx_count);
+ err = qlcnic_set_max_rss(adapter, channel->rx_count, 0);
  netdev_info(dev, "allocated 0x%x sds rings\n",
      adapter->max_sds_rings);
  return err;
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
index 6b0bca3..0987599 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
@@ -82,7 +82,6 @@ static irqreturn_t qlcnic_msix_intr(int irq, void *data);
 static irqreturn_t qlcnic_msix_tx_intr(int irq, void *data);
 
 static struct net_device_stats *qlcnic_get_stats(struct net_device *netdev);
-static void qlcnic_restore_indev_addr(struct net_device *dev, unsigned long);
 static int qlcnic_start_firmware(struct qlcnic_adapter *);
 
 static void qlcnic_free_lb_filters_mem(struct qlcnic_adapter *adapter);
@@ -181,6 +180,7 @@ static const struct qlcnic_board_info qlcnic_boards[] = {
 };
 
 #define NUM_SUPPORTED_BOARDS ARRAY_SIZE(qlcnic_boards)
+#define QLC_MAX_SDS_RINGS 8
 
 static const
 struct qlcnic_legacy_intr_set legacy_intr[] = QLCNIC_LEGACY_INTR_CONFIG;
@@ -450,8 +450,7 @@ int qlcnic_82xx_setup_intr(struct qlcnic_adapter *adapter, u8 num_intr)
  return 0;
 }
 
-static void
-qlcnic_teardown_intr(struct qlcnic_adapter *adapter)
+void qlcnic_teardown_intr(struct qlcnic_adapter *adapter)
 {
  if (adapter->flags & QLCNIC_MSIX_ENABLED)
   pci_disable_msix(adapter->pdev);
@@ -1243,8 +1242,7 @@ qlcnic_free_irq(struct qlcnic_adapter *adapter)
  }
 }
 
-static int
-__qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev)
+int __qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev)
 {
  int ring;
  u32 capab2;
@@ -1309,8 +1307,7 @@ static int qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev)
  return err;
 }
 
-static void
-__qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev)
+void __qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev)
 {
  if (adapter->is_up != QLCNIC_ADAPTER_UP_MAGIC)
   return;
@@ -1352,7 +1349,7 @@ qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev)
 
 }
 
-static int
+int
 qlcnic_attach(struct qlcnic_adapter *adapter)
 {
  struct net_device *netdev = adapter->netdev;
@@ -1398,8 +1395,7 @@ err_out_napi_del:
  return err;
 }
 
-static void
-qlcnic_detach(struct qlcnic_adapter *adapter)
+void qlcnic_detach(struct qlcnic_adapter *adapter)
 {
  if (adapter->is_up != QLCNIC_ADAPTER_UP_MAGIC)
   return;
@@ -2054,14 +2050,8 @@ done:
 static int qlcnic_open(struct net_device *netdev)
 {
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
- u32 state = QLCRD32(adapter, QLCNIC_CRB_DEV_STATE);
  int err;
 
- if (state == QLCNIC_DEV_FAILED || (state == QLCNIC_DEV_BADBAD)) {
-  netdev_err(netdev, "Device in FAILED state\n");
-  return -EIO;
- }
-
  netif_carrier_off(netdev);
 
  err = qlcnic_attach(adapter);
@@ -3091,33 +3081,38 @@ qlcnicvf_start_firmware(struct qlcnic_adapter *adapter)
  return err;
 }
 
-int qlcnic_validate_max_rss(struct net_device *netdev, u8 max_hw, u8 val)
+int qlcnic_validate_max_rss(u8 max_hw, u8 val)
 {
- if (!qlcnic_use_msi_x && !qlcnic_use_msi) {
-  netdev_info(netdev, "no msix or msi support, hence no rss\n");
-  return -EINVAL;
+ u32 max_allowed;
+
+ if (max_hw > QLC_MAX_SDS_RINGS) {
+  max_hw = QLC_MAX_SDS_RINGS;
+  pr_info("max rss reset to %d\n", QLC_MAX_SDS_RINGS);
  }
 
- if ((val > max_hw) || (val <  2) || !is_power_of_2(val)) {
-  netdev_info(netdev, "rss_ring valid range [2 - %x] in "
-   " powers of 2\n", max_hw);
+ max_allowed = rounddown_pow_of_two(min_t(int, max_hw,
+       num_online_cpus()));
+ if ((val > max_allowed) || (val < 2) || !is_power_of_2(val)) {
+  pr_info("rss_ring valid range [2 - %x] in powers of 2\n",
+   max_allowed);
   return -EINVAL;
  }
  return 0;
-
 }
 
-int qlcnic_set_max_rss(struct qlcnic_adapter *adapter, u8 data)
+int qlcnic_set_max_rss(struct qlcnic_adapter *adapter, u8 data, size_t len)
 {
  int err;
  struct net_device *netdev = adapter->netdev;
 
- rtnl_lock();
+ if (test_bit(__QLCNIC_RESETTING, &adapter->state))
+  return -EBUSY;
+
  netif_device_detach(netdev);
  if (netif_running(netdev))
   __qlcnic_down(adapter, netdev);
 
- if (qlcnic_83xx_check(adapter)) {
+ if (qlcnic_82xx_check(adapter)) {
   if (adapter->flags & QLCNIC_MSIX_ENABLED)
    qlcnic_83xx_config_intrpt(adapter, 0);
   qlcnic_83xx_free_mbx_intr(adapter);
@@ -3125,7 +3120,7 @@ int qlcnic_set_max_rss(struct qlcnic_adapter *adapter, u8 data)
 
  qlcnic_detach(adapter);
  qlcnic_teardown_intr(adapter);
- err = adapter->ahw->hw_ops->setup_intr(adapter, data);
+ err = qlcnic_setup_intr(adapter, data);
  if (err)
   dev_err(&adapter->pdev->dev,
    "failed setting max_rss; rss disabled\n");
@@ -3148,10 +3143,10 @@ int qlcnic_set_max_rss(struct qlcnic_adapter *adapter, u8 data)
    goto done;
   qlcnic_restore_indev_addr(netdev, NETDEV_UP);
  }
+ err = len;
  done:
  netif_device_attach(netdev);
  clear_bit(__QLCNIC_RESETTING, &adapter->state);
- rtnl_unlock();
  return err;
 }
 
@@ -3187,8 +3182,7 @@ qlcnic_config_indev_addr(struct qlcnic_adapter *adapter,
  in_dev_put(indev);
 }
 
-static void
-qlcnic_restore_indev_addr(struct net_device *netdev, unsigned long event)
+void qlcnic_restore_indev_addr(struct net_device *netdev, unsigned long event)
 {
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
  struct net_device *dev;
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c
index eeefc73..5045063 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c
@@ -3,6 +3,7 @@
 #include <linux/interrupt.h>
 
 #include "qlcnic.h"
+#include "qlcnic_hw.h"
 
 #include <linux/swab.h>
 #include <linux/dma-mapping.h>
@@ -13,6 +14,10 @@
 #include <linux/aer.h>
 #include <linux/log2.h>
 
+#include <linux/sysfs.h>
+
+#define QLC_STATUS_UNSUPPORTED_CMD -2
+
 int qlcnicvf_config_bridged_mode(struct qlcnic_adapter *adapter, u32 enable)
 {
  return -EOPNOTSUPP;
@@ -40,7 +45,7 @@ static ssize_t qlcnic_store_bridged_mode(struct device *dev,
  if (strict_strtoul(buf, 2, &new))
   goto err_out;
 
- if (!adapter->nic_ops->config_bridged_mode(adapter, !!new))
+ if (!qlcnic_config_bridged_mode(adapter, !!new))
   ret = len;
 
 err_out:
@@ -80,9 +85,7 @@ static ssize_t qlcnic_show_diag_mode(struct device *dev,
          struct device_attribute *attr, char *buf)
 {
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
-
- return sprintf(buf, "%d\n",
-         !!(adapter->flags & QLCNIC_DIAG_ENABLED));
+ return sprintf(buf, "%d\n", !!(adapter->flags & QLCNIC_DIAG_ENABLED));
 }
 
 static int qlcnic_validate_beacon(struct qlcnic_adapter *adapter, u16 beacon,
@@ -111,10 +114,11 @@ static ssize_t qlcnic_store_beacon(struct device *dev,
        const char *buf, size_t len)
 {
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
- int max_sds_rings = adapter->max_sds_rings;
+ struct qlcnic_hardware_context *ahw = adapter->ahw;
+ int err, max_sds_rings = adapter->max_sds_rings;
  u16 beacon;
  u8 b_state, b_rate;
- int err;
+ unsigned long h_beacon;
 
  if (adapter->ahw->op_mode == QLCNIC_NON_PRIV_FUNC) {
   dev_warn(dev,
@@ -122,6 +126,41 @@ static ssize_t qlcnic_store_beacon(struct device *dev,
   return -EOPNOTSUPP;
  }
 
+ if (qlcnic_83xx_check(adapter) &&
+     !test_bit(__QLCNIC_RESETTING, &adapter->state)) {
+  if (kstrtoul(buf, 2, &h_beacon))
+   return -EINVAL;
+
+  if (ahw->beacon_state == h_beacon)
+   return len;
+
+  rtnl_lock();
+  if (!ahw->beacon_state) {
+   if (test_and_set_bit(__QLCNIC_LED_ENABLE,
+          &adapter->state)) {
+    rtnl_unlock();
+    return -EBUSY;
+   }
+  }
+  if (h_beacon) {
+   err = qlcnic_83xx_config_led(adapter, 1, h_beacon);
+   if (err)
+    goto beacon_err;
+  } else {
+   err = qlcnic_83xx_config_led(adapter, 0, !h_beacon);
+   if (err)
+    goto beacon_err;
+  }
+  /* set the current beacon state */
+  ahw->beacon_state = h_beacon;
+beacon_err:
+  if (!ahw->beacon_state)
+   clear_bit(__QLCNIC_LED_ENABLE, &adapter->state);
+
+  rtnl_unlock();
+  return len;
+ }
+
  if (len != sizeof(u16))
   return QL_STATUS_INVALID_PARAM;
 
@@ -154,11 +193,10 @@ static ssize_t qlcnic_store_beacon(struct device *dev,
  }
 
  err = qlcnic_config_led(adapter, b_state, b_rate);
-
- if (!err) {
+ if (!err)
   err = len;
-  adapter->ahw->beacon_state = b_state;
- }
+ else
+  ahw->beacon_state = b_state;
 
  if (test_and_clear_bit(__QLCNIC_DIAG_RES_ALLOC, &adapter->state))
   qlcnic_diag_free_res(adapter->netdev, max_sds_rings);
@@ -207,21 +245,13 @@ static ssize_t qlcnic_sysfs_read_crb(struct file *filp, struct kobject *kobj,
 {
  struct device *dev = container_of(kobj, struct device, kobj);
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
- u32 data;
- u64 qmdata;
  int ret;
 
  ret = qlcnic_sysfs_validate_crb(adapter, offset, size);
  if (ret != 0)
   return ret;
+ qlcnic_read_crb(adapter, buf, offset, size);
 
- if (ADDR_IN_RANGE(offset, QLCNIC_PCI_CAMQM, QLCNIC_PCI_CAMQM_END)) {
-  qlcnic_pci_camqm_read_2M(adapter, offset, &qmdata);
-  memcpy(buf, &qmdata, size);
- } else {
-  data = QLCRD32(adapter, offset);
-  memcpy(buf, &data, size);
- }
  return size;
 }
 
@@ -231,21 +261,13 @@ static ssize_t qlcnic_sysfs_write_crb(struct file *filp, struct kobject *kobj,
 {
  struct device *dev = container_of(kobj, struct device, kobj);
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
- u32 data;
- u64 qmdata;
  int ret;
 
  ret = qlcnic_sysfs_validate_crb(adapter, offset, size);
  if (ret != 0)
   return ret;
 
- if (ADDR_IN_RANGE(offset, QLCNIC_PCI_CAMQM, QLCNIC_PCI_CAMQM_END)) {
-  memcpy(&qmdata, buf, size);
-  qlcnic_pci_camqm_write_2M(adapter, offset, qmdata);
- } else {
-  memcpy(&data, buf, size);
-  QLCWR32(adapter, offset, data);
- }
+ qlcnic_write_crb(adapter, buf, offset, size);
  return size;
 }
 
@@ -303,33 +325,44 @@ static ssize_t qlcnic_sysfs_write_mem(struct file *filp, struct kobject *kobj,
  return size;
 }
 
+static int qlcnic_is_valid_nic_func(struct qlcnic_adapter *adapter, u8 pci_func)
+{
+ int i;
+ for (i = 0; i < adapter->ahw->act_pci_func; i++) {
+  if (adapter->npars[i].pci_func == pci_func)
+   return i;
+ }
+
+ return -1;
+}
+
 static int validate_pm_config(struct qlcnic_adapter *adapter,
          struct qlcnic_pm_func_cfg *pm_cfg, int count)
 {
- u8 src_pci_func, s_esw_id, d_esw_id, dest_pci_func;
- int i;
+ u8 src_pci_func, s_esw_id, d_esw_id;
+ u8 dest_pci_func;
+ int i, src_index, dest_index;
 
  for (i = 0; i < count; i++) {
   src_pci_func = pm_cfg[i].pci_func;
   dest_pci_func = pm_cfg[i].dest_npar;
-  if (src_pci_func >= QLCNIC_MAX_PCI_FUNC ||
-      dest_pci_func >= QLCNIC_MAX_PCI_FUNC)
-   return QL_STATUS_INVALID_PARAM;
+  src_index = qlcnic_is_valid_nic_func(adapter, src_pci_func);
 
-  if (adapter->npars[src_pci_func].type != QLCNIC_TYPE_NIC)
+  if (src_index < 0)
    return QL_STATUS_INVALID_PARAM;
 
-  if (adapter->npars[dest_pci_func].type != QLCNIC_TYPE_NIC)
+  dest_index = qlcnic_is_valid_nic_func(adapter, dest_pci_func);
+  if (dest_index < 0)
    return QL_STATUS_INVALID_PARAM;
 
-  s_esw_id = adapter->npars[src_pci_func].phy_port;
-  d_esw_id = adapter->npars[dest_pci_func].phy_port;
+  s_esw_id = adapter->npars[src_index].phy_port;
+  d_esw_id = adapter->npars[dest_index].phy_port;
 
   if (s_esw_id != d_esw_id)
    return QL_STATUS_INVALID_PARAM;
  }
- return 0;
 
+ return 0;
 }
 
 static ssize_t qlcnic_sysfs_write_pm_config(struct file *filp,
@@ -342,7 +375,7 @@ static ssize_t qlcnic_sysfs_write_pm_config(struct file *filp,
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  struct qlcnic_pm_func_cfg *pm_cfg;
  u32 id, action, pci_func;
- int count, rem, i, ret;
+ int count, rem, i, ret, index;
 
  count = size / sizeof(struct qlcnic_pm_func_cfg);
  rem = size % sizeof(struct qlcnic_pm_func_cfg);
@@ -350,26 +383,32 @@ static ssize_t qlcnic_sysfs_write_pm_config(struct file *filp,
   return QL_STATUS_INVALID_PARAM;
 
  pm_cfg = (struct qlcnic_pm_func_cfg *)buf;
-
  ret = validate_pm_config(adapter, pm_cfg, count);
+
  if (ret)
   return ret;
  for (i = 0; i < count; i++) {
   pci_func = pm_cfg[i].pci_func;
   action = !!pm_cfg[i].action;
-  id = adapter->npars[pci_func].phy_port;
-  ret = qlcnic_config_port_mirroring(adapter, id, action,
-         pci_func);
+  index = qlcnic_is_valid_nic_func(adapter, pci_func);
+  if (index < 0)
+   return QL_STATUS_INVALID_PARAM;
+
+  id = adapter->npars[index].phy_port;
+  ret = qlcnic_config_port_mirroring(adapter, id,
+         action, pci_func);
   if (ret)
    return ret;
  }
 
  for (i = 0; i < count; i++) {
   pci_func = pm_cfg[i].pci_func;
-  id = adapter->npars[pci_func].phy_port;
-  adapter->npars[pci_func].enable_pm = !!pm_cfg[i].action;
-  adapter->npars[pci_func].dest_npar = id;
+  index = qlcnic_is_valid_nic_func(adapter, pci_func);
+  id = adapter->npars[index].phy_port;
+  adapter->npars[index].enable_pm = !!pm_cfg[i].action;
+  adapter->npars[index].dest_npar = id;
  }
+
  return size;
 }
 
@@ -383,16 +422,19 @@ static ssize_t qlcnic_sysfs_read_pm_config(struct file *filp,
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  struct qlcnic_pm_func_cfg pm_cfg[QLCNIC_MAX_PCI_FUNC];
  int i;
+ u8 pci_func;
 
  if (size != sizeof(pm_cfg))
   return QL_STATUS_INVALID_PARAM;
 
- for (i = 0; i < QLCNIC_MAX_PCI_FUNC; i++) {
-  if (adapter->npars[i].type != QLCNIC_TYPE_NIC)
-   continue;
-  pm_cfg[i].action = adapter->npars[i].enable_pm;
-  pm_cfg[i].dest_npar = 0;
-  pm_cfg[i].pci_func = i;
+ memset(&pm_cfg, 0,
+        sizeof(struct qlcnic_pm_func_cfg) * QLCNIC_MAX_PCI_FUNC);
+
+ for (i = 0; i < adapter->ahw->act_pci_func; i++) {
+  pci_func = adapter->npars[i].pci_func;
+  pm_cfg[pci_func].action = adapter->npars[i].enable_pm;
+  pm_cfg[pci_func].dest_npar = 0;
+  pm_cfg[pci_func].pci_func = i;
  }
  memcpy(buf, &pm_cfg, size);
 
@@ -404,24 +446,33 @@ static int validate_esw_config(struct qlcnic_adapter *adapter,
 {
  u32 op_mode;
  u8 pci_func;
- int i;
+ int i, ret;
 
- op_mode = readl(adapter->ahw->pci_base0 + QLCNIC_DRV_OP_MODE);
+ if (qlcnic_82xx_check(adapter))
+  op_mode = readl(adapter->ahw->pci_base0 + QLCNIC_DRV_OP_MODE);
+ else
+  op_mode = QLCRDX(adapter->ahw, QLC_83XX_DRV_OP_MODE);
 
  for (i = 0; i < count; i++) {
   pci_func = esw_cfg[i].pci_func;
   if (pci_func >= QLCNIC_MAX_PCI_FUNC)
    return QL_STATUS_INVALID_PARAM;
 
-  if (adapter->ahw->op_mode == QLCNIC_MGMT_FUNC) {
-   if (adapter->npars[pci_func].type != QLCNIC_TYPE_NIC)
+  if (adapter->ahw->op_mode == QLCNIC_MGMT_FUNC)
+   if (qlcnic_is_valid_nic_func(adapter, pci_func) < 0)
     return QL_STATUS_INVALID_PARAM;
-  }
 
   switch (esw_cfg[i].op_mode) {
   case QLCNIC_PORT_DEFAULTS:
-   if (QLC_DEV_GET_DRV(op_mode, pci_func) !=
-         QLCNIC_NON_PRIV_FUNC) {
+   if (qlcnic_82xx_check(adapter)) {
+    ret = QLC_DEV_GET_DRV(op_mode, pci_func);
+   } else {
+    ret = QLC_83XX_GET_FUNC_PRIVILEGE(op_mode,
+          pci_func);
+    esw_cfg[i].offload_flags = 0;
+   }
+
+   if (ret != QLCNIC_NON_PRIV_FUNC) {
     if (esw_cfg[i].mac_anti_spoof != 0)
      return QL_STATUS_INVALID_PARAM;
     if (esw_cfg[i].mac_override != 1)
@@ -444,6 +495,7 @@ static int validate_esw_config(struct qlcnic_adapter *adapter,
    return QL_STATUS_INVALID_PARAM;
   }
  }
+
  return 0;
 }
 
@@ -458,7 +510,8 @@ static ssize_t qlcnic_sysfs_write_esw_config(struct file *file,
  struct qlcnic_esw_func_cfg *esw_cfg;
  struct qlcnic_npar_info *npar;
  int count, rem, i, ret;
- u8 pci_func, op_mode = 0;
+ int index;
+ u8 op_mode = 0, pci_func;
 
  count = size / sizeof(struct qlcnic_esw_func_cfg);
  rem = size % sizeof(struct qlcnic_esw_func_cfg);
@@ -471,10 +524,9 @@ static ssize_t qlcnic_sysfs_write_esw_config(struct file *file,
   return ret;
 
  for (i = 0; i < count; i++) {
-  if (adapter->ahw->op_mode == QLCNIC_MGMT_FUNC) {
+  if (adapter->ahw->op_mode == QLCNIC_MGMT_FUNC)
    if (qlcnic_config_switch_port(adapter, &esw_cfg[i]))
     return QL_STATUS_INVALID_PARAM;
-  }
 
   if (adapter->ahw->pci_func != esw_cfg[i].pci_func)
    continue;
@@ -503,7 +555,8 @@ static ssize_t qlcnic_sysfs_write_esw_config(struct file *file,
 
  for (i = 0; i < count; i++) {
   pci_func = esw_cfg[i].pci_func;
-  npar = &adapter->npars[pci_func];
+  index = qlcnic_is_valid_nic_func(adapter, pci_func);
+  npar = &adapter->npars[index];
   switch (esw_cfg[i].op_mode) {
   case QLCNIC_PORT_DEFAULTS:
    npar->promisc_mode = esw_cfg[i].promisc_mode;
@@ -533,18 +586,21 @@ static ssize_t qlcnic_sysfs_read_esw_config(struct file *file,
  struct device *dev = container_of(kobj, struct device, kobj);
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  struct qlcnic_esw_func_cfg esw_cfg[QLCNIC_MAX_PCI_FUNC];
- u8 i;
+ u8 i, pci_func;
 
  if (size != sizeof(esw_cfg))
   return QL_STATUS_INVALID_PARAM;
 
- for (i = 0; i < QLCNIC_MAX_PCI_FUNC; i++) {
-  if (adapter->npars[i].type != QLCNIC_TYPE_NIC)
-   continue;
-  esw_cfg[i].pci_func = i;
-  if (qlcnic_get_eswitch_port_config(adapter, &esw_cfg[i]))
+ memset(&esw_cfg, 0,
+        sizeof(struct qlcnic_esw_func_cfg) * QLCNIC_MAX_PCI_FUNC);
+
+ for (i = 0; i < adapter->ahw->act_pci_func; i++) {
+  pci_func = adapter->npars[i].pci_func;
+  esw_cfg[pci_func].pci_func = pci_func;
+  if (qlcnic_get_eswitch_port_config(adapter, &esw_cfg[pci_func]))
    return QL_STATUS_INVALID_PARAM;
  }
+
  memcpy(buf, &esw_cfg, size);
 
  return size;
@@ -558,10 +614,7 @@ static int validate_npar_config(struct qlcnic_adapter *adapter,
 
  for (i = 0; i < count; i++) {
   pci_func = np_cfg[i].pci_func;
-  if (pci_func >= QLCNIC_MAX_PCI_FUNC)
-   return QL_STATUS_INVALID_PARAM;
-
-  if (adapter->npars[pci_func].type != QLCNIC_TYPE_NIC)
+  if (qlcnic_is_valid_nic_func(adapter, pci_func) < 0)
    return QL_STATUS_INVALID_PARAM;
 
   if (!IS_VALID_BW(np_cfg[i].min_bw) ||
@@ -581,7 +634,7 @@ static ssize_t qlcnic_sysfs_write_npar_config(struct file *file,
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  struct qlcnic_info nic_info;
  struct qlcnic_npar_func_cfg *np_cfg;
- int i, count, rem, ret;
+ int i, count, rem, ret, index;
  u8 pci_func;
 
  count = size / sizeof(struct qlcnic_npar_func_cfg);
@@ -594,8 +647,10 @@ static ssize_t qlcnic_sysfs_write_npar_config(struct file *file,
  if (ret)
   return ret;
 
- for (i = 0; i < count ; i++) {
+ for (i = 0; i < count; i++) {
   pci_func = np_cfg[i].pci_func;
+
+  memset(&nic_info, 0, sizeof(struct qlcnic_info));
   ret = qlcnic_get_nic_info(adapter, &nic_info, pci_func);
   if (ret)
    return ret;
@@ -605,12 +660,12 @@ static ssize_t qlcnic_sysfs_write_npar_config(struct file *file,
   ret = qlcnic_set_nic_info(adapter, &nic_info);
   if (ret)
    return ret;
-  adapter->npars[i].min_bw = nic_info.min_tx_bw;
-  adapter->npars[i].max_bw = nic_info.max_tx_bw;
+  index = qlcnic_is_valid_nic_func(adapter, pci_func);
+  adapter->npars[index].min_bw = nic_info.min_tx_bw;
+  adapter->npars[index].max_bw = nic_info.max_tx_bw;
  }
 
  return size;
-
 }
 
 static ssize_t qlcnic_sysfs_read_npar_config(struct file *file,
@@ -628,8 +683,12 @@ static ssize_t qlcnic_sysfs_read_npar_config(struct file *file,
  if (size != sizeof(np_cfg))
   return QL_STATUS_INVALID_PARAM;
 
+ memset(&nic_info, 0, sizeof(struct qlcnic_info));
+ memset(&np_cfg, 0,
+        sizeof(struct qlcnic_npar_func_cfg) * QLCNIC_MAX_PCI_FUNC);
+
  for (i = 0; i < QLCNIC_MAX_PCI_FUNC; i++) {
-  if (adapter->npars[i].type != QLCNIC_TYPE_NIC)
+  if (qlcnic_is_valid_nic_func(adapter, i) < 0)
    continue;
   ret = qlcnic_get_nic_info(adapter, &nic_info, i);
   if (ret)
@@ -644,6 +703,7 @@ static ssize_t qlcnic_sysfs_read_npar_config(struct file *file,
   np_cfg[i].max_tx_queues = nic_info.max_tx_ques;
   np_cfg[i].max_rx_queues = nic_info.max_rx_ques;
  }
+
  memcpy(buf, &np_cfg, size);
  return size;
 }
@@ -659,6 +719,9 @@ static ssize_t qlcnic_sysfs_get_port_stats(struct file *file,
  struct qlcnic_esw_statistics port_stats;
  int ret;
 
+ if (qlcnic_83xx_check(adapter))
+  return QLC_STATUS_UNSUPPORTED_CMD;
+
  if (size != sizeof(struct qlcnic_esw_statistics))
   return QL_STATUS_INVALID_PARAM;
 
@@ -691,6 +754,9 @@ static ssize_t qlcnic_sysfs_get_esw_stats(struct file *file,
  struct qlcnic_esw_statistics esw_stats;
  int ret;
 
+ if (qlcnic_83xx_check(adapter))
+  return QLC_STATUS_UNSUPPORTED_CMD;
+
  if (size != sizeof(struct qlcnic_esw_statistics))
   return QL_STATUS_INVALID_PARAM;
 
@@ -722,6 +788,9 @@ static ssize_t qlcnic_sysfs_clear_esw_stats(struct file *file,
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  int ret;
 
+ if (qlcnic_83xx_check(adapter))
+  return QLC_STATUS_UNSUPPORTED_CMD;
+
  if (offset >= QLCNIC_NIU_MAX_XG_PORTS)
   return QL_STATUS_INVALID_PARAM;
 
@@ -744,10 +813,14 @@ static ssize_t qlcnic_sysfs_clear_port_stats(struct file *file,
           char *buf, loff_t offset,
           size_t size)
 {
+
  struct device *dev = container_of(kobj, struct device, kobj);
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  int ret;
 
+ if (qlcnic_83xx_check(adapter))
+  return QLC_STATUS_UNSUPPORTED_CMD;
+
  if (offset >= QLCNIC_MAX_PCI_FUNC)
   return QL_STATUS_INVALID_PARAM;
 
@@ -789,7 +862,10 @@ static ssize_t qlcnic_sysfs_read_pci_config(struct file *file,
   return ret;
  }
 
- for (i = 0; i < QLCNIC_MAX_PCI_FUNC ; i++) {
+ memset(&pci_cfg, 0,
+        sizeof(struct qlcnic_pci_func_cfg) * QLCNIC_MAX_PCI_FUNC);
+
+ for (i = 0; i < QLCNIC_MAX_PCI_FUNC; i++) {
   pci_cfg[i].pci_func = pci_info[i].id;
   pci_cfg[i].func_type = pci_info[i].type;
   pci_cfg[i].port_num = pci_info[i].default_port;
@@ -797,6 +873,7 @@ static ssize_t qlcnic_sysfs_read_pci_config(struct file *file,
   pci_cfg[i].max_bw = pci_info[i].tx_max_bw;
   memcpy(&pci_cfg[i].def_mac_addr, &pci_info[i].mac, ETH_ALEN);
  }
+
  memcpy(buf, &pci_cfg, size);
  kfree(pci_info);
  return size;
@@ -897,7 +974,6 @@ void qlcnic_remove_sysfs_entries(struct qlcnic_adapter *adapter)
 void qlcnic_create_diag_entries(struct qlcnic_adapter *adapter)
 {
  struct device *dev = &adapter->pdev->dev;
- u32 state = QLCRD32(adapter, QLCNIC_CRB_DEV_STATE);
 
  if (device_create_bin_file(dev, &bin_attr_port_stats))
   dev_info(dev, "failed to create port stats sysfs entry");
@@ -911,9 +987,6 @@ void qlcnic_create_diag_entries(struct qlcnic_adapter *adapter)
  if (device_create_bin_file(dev, &bin_attr_mem))
   dev_info(dev, "failed to create mem sysfs entry\n");
 
- if (state == QLCNIC_DEV_FAILED || (state == QLCNIC_DEV_BADBAD))
-  return;
-
  if (device_create_bin_file(dev, &bin_attr_pci_config))
   dev_info(dev, "failed to create pci config sysfs entry");
  if (device_create_file(dev, &dev_attr_beacon))
@@ -936,7 +1009,6 @@ void qlcnic_create_diag_entries(struct qlcnic_adapter *adapter)
 void qlcnic_remove_diag_entries(struct qlcnic_adapter *adapter)
 {
  struct device *dev = &adapter->pdev->dev;
- u32 state = QLCRD32(adapter, QLCNIC_CRB_DEV_STATE);
 
  device_remove_bin_file(dev, &bin_attr_port_stats);
 
@@ -945,8 +1017,6 @@ void qlcnic_remove_diag_entries(struct qlcnic_adapter *adapter)
  device_remove_file(dev, &dev_attr_diag_mode);
  device_remove_bin_file(dev, &bin_attr_crb);
  device_remove_bin_file(dev, &bin_attr_mem);
- if (state == QLCNIC_DEV_FAILED || (state == QLCNIC_DEV_BADBAD))
-  return;
  device_remove_bin_file(dev, &bin_attr_pci_config);
  device_remove_file(dev, &dev_attr_beacon);
  if (!(adapter->flags & QLCNIC_ESWITCH_ENABLED))
@@ -968,3 +1038,13 @@ void qlcnic_82xx_remove_sysfs(struct qlcnic_adapter *adapter)
 {
  qlcnic_remove_diag_entries(adapter);
 }
+
+void qlcnic_83xx_add_sysfs(struct qlcnic_adapter *adapter)
+{
+ qlcnic_create_diag_entries(adapter);
+}
+
+void qlcnic_83xx_remove_sysfs(struct qlcnic_adapter *adapter)
+{
+ qlcnic_remove_diag_entries(adapter);
+}
-- 
1.8.3.1