From 1ffc5899300b1acb11048fb03257831e7375addd Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jiri@resnulli.us>
Date: Thu, 3 Jan 2013 22:49:02 +0000
Subject: [PATCH 490/858] net: remove no longer used netdev_set_bond_master()
 and netdev_set_master()

Signed-off-by: Jiri Pirko <jiri@resnulli.us>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8b98a70c28a607a02b3c3d41bc9a4c141f421052)

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 include/linux/netdevice.h |  6 +----
 net/core/dev.c            | 63 -----------------------------------------------
 2 files changed, 1 insertion(+), 68 deletions(-)

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index a2b8db6..f5a7e27 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -861,8 +861,7 @@ struct netdev_fcoe_hbainfo {
  * flow_id is a flow ID to be passed to rps_may_expire_flow() later.
  * Return the filter ID on success, or a negative error code.
  *
- * Slave management functions (for bridge, bonding, etc). User should
- * call netdev_set_master() to set dev->master properly.
+ * Slave management functions (for bridge, bonding, etc).
  * int (*ndo_add_slave)(struct net_device *dev, struct net_device *slave_dev);
  * Called to make another netdev an underling.
  *
@@ -2653,9 +2652,6 @@ extern int netdev_master_upper_dev_link(struct net_device *dev,
      struct net_device *upper_dev);
 extern void netdev_upper_dev_unlink(struct net_device *dev,
         struct net_device *upper_dev);
-extern int  netdev_set_master(struct net_device *dev, struct net_device *master);
-extern int netdev_set_bond_master(struct net_device *dev,
-      struct net_device *master);
 extern int skb_checksum_help(struct sk_buff *skb);
 extern struct sk_buff *skb_gso_segment(struct sk_buff *skb,
  netdev_features_t features);
diff --git a/net/core/dev.c b/net/core/dev.c
index 8b4360d..197cac2 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -4878,69 +4878,6 @@ void netdev_upper_dev_unlink(struct net_device *dev,
 }
 EXPORT_SYMBOL(netdev_upper_dev_unlink);
 
-/**
- * netdev_set_master - set up master pointer
- * @slave: slave device
- * @master: new master device
- *
- * Changes the master device of the slave. Pass %NULL to break the
- * bonding. The caller must hold the RTNL semaphore. On a failure
- * a negative errno code is returned. On success the reference counts
- * are adjusted and the function returns zero.
- */
-int netdev_set_master(struct net_device *slave, struct net_device *master)
-{
- struct net_device *old = slave->master;
- int err;
-
- ASSERT_RTNL();
-
- if (master) {
-  if (old)
-   return -EBUSY;
-  err = netdev_master_upper_dev_link(slave, master);
-  if (err)
-   return err;
- }
-
- slave->master = master;
-
- if (old)
-  netdev_upper_dev_unlink(slave, master);
-
- return 0;
-}
-EXPORT_SYMBOL(netdev_set_master);
-
-/**
- * netdev_set_bond_master - set up bonding master/slave pair
- * @slave: slave device
- * @master: new master device
- *
- * Changes the master device of the slave. Pass %NULL to break the
- * bonding. The caller must hold the RTNL semaphore. On a failure
- * a negative errno code is returned. On success %RTM_NEWLINK is sent
- * to the routing socket and the function returns zero.
- */
-int netdev_set_bond_master(struct net_device *slave, struct net_device *master)
-{
- int err;
-
- ASSERT_RTNL();
-
- err = netdev_set_master(slave, master);
- if (err)
-  return err;
- if (master)
-  slave->flags |= IFF_SLAVE;
- else
-  slave->flags &= ~IFF_SLAVE;
-
- rtmsg_ifinfo(RTM_NEWLINK, slave, IFF_SLAVE);
- return 0;
-}
-EXPORT_SYMBOL(netdev_set_bond_master);
-
 static void dev_change_rx_flags(struct net_device *dev, int flags)
 {
  const struct net_device_ops *ops = dev->netdev_ops;
-- 
1.8.3.1