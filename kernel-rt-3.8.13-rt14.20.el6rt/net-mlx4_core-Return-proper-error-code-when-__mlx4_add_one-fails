From a8cc240bf2b30d184ca9faa8bda51ec4461e01e5 Mon Sep 17 00:00:00 2001
From: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date: Thu, 24 Jan 2013 01:54:17 +0000
Subject: [PATCH 642/858] net/mlx4_core: Return proper error code when
 __mlx4_add_one fails

Returning 0 (success) when in fact we are aborting the load, leads to kernel
panic when unloading the module. Fix that by returning the actual error code.

Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
Signed-off-by: Amir Vadai <amirv@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f356fcbe12c1174713e83651b630330f8f0f8415)

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 drivers/net/ethernet/mellanox/mlx4/main.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx4/main.c b/drivers/net/ethernet/mellanox/mlx4/main.c
index b3e8c82..16abde2 100644
--- a/drivers/net/ethernet/mellanox/mlx4/main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/main.c
@@ -2145,7 +2145,8 @@ slave_start:
    dev->num_slaves = MLX4_MAX_NUM_SLAVES;
   else {
    dev->num_slaves = 0;
-   if (mlx4_multi_func_init(dev)) {
+   err = mlx4_multi_func_init(dev);
+   if (err) {
     mlx4_err(dev, "Failed to init slave mfunc"
       " interface, aborting.\n");
     goto err_cmd;
@@ -2169,7 +2170,8 @@ slave_start:
  /* In master functions, the communication channel must be initialized
   * after obtaining its address from fw */
  if (mlx4_is_master(dev)) {
-  if (mlx4_multi_func_init(dev)) {
+  err = mlx4_multi_func_init(dev);
+  if (err) {
    mlx4_err(dev, "Failed to init master mfunc"
      "interface, aborting.\n");
    goto err_close;
@@ -2186,6 +2188,7 @@ slave_start:
  mlx4_enable_msi_x(dev);
  if ((mlx4_is_mfunc(dev)) &&
      !(dev->flags & MLX4_FLAG_MSI_X)) {
+  err = -ENOSYS;
   mlx4_err(dev, "INTx is not supported in multi-function mode."
     " aborting.\n");
   goto err_free_eq;
-- 
1.8.3.1