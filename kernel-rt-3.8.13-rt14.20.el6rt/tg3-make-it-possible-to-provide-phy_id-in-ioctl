From ca0547f0d18e3197aea5543d9e01320515c26a61 Mon Sep 17 00:00:00 2001
From: Hauke Mehrtens <hauke@hauke-m.de>
Date: Thu, 7 Feb 2013 05:37:38 +0000
Subject: [PATCH 624/858] tg3: make it possible to provide phy_id in ioctl

In OpenWrt we currently use a switch driver which uses the ioctls to
configure the switch in the phy. We have to provide the phy_id to do
so, but without this patch this is not possible.

Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
Acked-by: Michael Chan <mchan@broadcom.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5c358045ae6b4e9ec7edcd70e6486123ca2c9c72)

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 drivers/net/ethernet/broadcom/tg3.c | 26 ++++++++++++++++++++------
 1 file changed, 20 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index 69d5077..84fed79 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -1092,7 +1092,8 @@ static void tg3_switch_clocks(struct tg3 *tp)
 
 #define PHY_BUSY_LOOPS 5000
 
-static int tg3_readphy(struct tg3 *tp, int reg, u32 *val)
+static int __tg3_readphy(struct tg3 *tp, unsigned int phy_addr, int reg,
+    u32 *val)
 {
  u32 frame_val;
  unsigned int loops;
@@ -1108,7 +1109,7 @@ static int tg3_readphy(struct tg3 *tp, int reg, u32 *val)
 
  *val = 0x0;
 
- frame_val  = ((tp->phy_addr << MI_COM_PHY_ADDR_SHIFT) &
+ frame_val  = ((phy_addr << MI_COM_PHY_ADDR_SHIFT) &
         MI_COM_PHY_ADDR_MASK);
  frame_val |= ((reg << MI_COM_REG_ADDR_SHIFT) &
         MI_COM_REG_ADDR_MASK);
@@ -1145,7 +1146,13 @@ static int tg3_readphy(struct tg3 *tp, int reg, u32 *val)
  return ret;
 }
 
-static int tg3_writephy(struct tg3 *tp, int reg, u32 val)
+static int tg3_readphy(struct tg3 *tp, int reg, u32 *val)
+{
+ return __tg3_readphy(tp, tp->phy_addr, reg, val);
+}
+
+static int __tg3_writephy(struct tg3 *tp, unsigned int phy_addr, int reg,
+     u32 val)
 {
  u32 frame_val;
  unsigned int loops;
@@ -1163,7 +1170,7 @@ static int tg3_writephy(struct tg3 *tp, int reg, u32 val)
 
  tg3_ape_lock(tp, tp->phy_ape_lock);
 
- frame_val  = ((tp->phy_addr << MI_COM_PHY_ADDR_SHIFT) &
+ frame_val  = ((phy_addr << MI_COM_PHY_ADDR_SHIFT) &
         MI_COM_PHY_ADDR_MASK);
  frame_val |= ((reg << MI_COM_REG_ADDR_SHIFT) &
         MI_COM_REG_ADDR_MASK);
@@ -1198,6 +1205,11 @@ static int tg3_writephy(struct tg3 *tp, int reg, u32 val)
  return ret;
 }
 
+static int tg3_writephy(struct tg3 *tp, int reg, u32 val)
+{
+ return __tg3_writephy(tp, tp->phy_addr, reg, val);
+}
+
 static int tg3_phy_cl45_write(struct tg3 *tp, u32 devad, u32 addr, u32 val)
 {
  int err;
@@ -12989,7 +13001,8 @@ static int tg3_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
    return -EAGAIN;
 
   spin_lock_bh(&tp->lock);
-  err = tg3_readphy(tp, data->reg_num & 0x1f, &mii_regval);
+  err = __tg3_readphy(tp, data->phy_id & 0x1f,
+        data->reg_num & 0x1f, &mii_regval);
   spin_unlock_bh(&tp->lock);
 
   data->val_out = mii_regval;
@@ -13005,7 +13018,8 @@ static int tg3_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
    return -EAGAIN;
 
   spin_lock_bh(&tp->lock);
-  err = tg3_writephy(tp, data->reg_num & 0x1f, data->val_in);
+  err = __tg3_writephy(tp, data->phy_id & 0x1f,
+         data->reg_num & 0x1f, data->val_in);
   spin_unlock_bh(&tp->lock);
 
   return err;
-- 
1.8.3.1