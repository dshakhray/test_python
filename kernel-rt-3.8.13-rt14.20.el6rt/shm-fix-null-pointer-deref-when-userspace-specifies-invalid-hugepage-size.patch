From ed26f5ba28137fdc9f9ed5b4371fa482e66e43b7 Mon Sep 17 00:00:00 2001
From: Li Zefan <lizefan@huawei.com>
Date: Thu, 9 May 2013 15:08:15 +0800
Subject: [PATCH 392/858] shm: fix null pointer deref when userspace specifies
 invalid hugepage size

commit 091d0d55b286c9340201b4ed4470be87fc568228 upstream
Dave reported an oops triggered by trinity:

  BUG: unable to handle kernel NULL pointer dereference at 0000000000000008
  IP: newseg+0x10d/0x390
  PGD cf8c1067 PUD cf8c2067 PMD 0
  Oops: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC
  CPU: 2 PID: 7636 Comm: trinity-child2 Not tainted 3.9.0+#67
  ...
  Call Trace:
    ipcget+0x182/0x380
    SyS_shmget+0x5a/0x60
    tracesys+0xdd/0xe2

This bug was introduced by commit af73e4d9506d ("hugetlbfs: fix mmap
failure in unaligned size request").

Reported-by: Dave Jones <davej@redhat.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Li Zefan <lizfan@huawei.com>
Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Acked-by: Rik van Riel <riel@redhat.com>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Cherry-picked-for: v3.8-rt
Signed-off-by: John Kacur <jkacur@redhat.com>
---
 ipc/shm.c | 8 +++++++-
 mm/mmap.c | 8 ++++++--
 2 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/ipc/shm.c b/ipc/shm.c
index 9ec2316..69881fb 100644
--- a/ipc/shm.c
+++ b/ipc/shm.c
@@ -493,7 +493,13 @@ static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
  if (shmflg & SHM_HUGETLB) {
   struct hstate *hs = hstate_sizelog((shmflg >> SHM_HUGE_SHIFT)
       & SHM_HUGE_MASK);
-  size_t hugesize = ALIGN(size, huge_page_size(hs));
+  size_t hugesize;
+
+  if (!hs) {
+   error = -EINVAL;
+   goto no_file;
+  }
+  hugesize = ALIGN(size, huge_page_size(hs));
 
   /* hugetlb_file_setup applies strict accounting */
   if (shmflg & SHM_NORESERVE)
diff --git a/mm/mmap.c b/mm/mmap.c
index e6beac4..de254aa 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1300,9 +1300,13 @@ SYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,
    len = ALIGN(len, huge_page_size(hstate_file(file)));
  } else if (flags & MAP_HUGETLB) {
   struct user_struct *user = NULL;
+  struct hstate *hs = hstate_sizelog((flags >> MAP_HUGE_SHIFT) &
+         SHM_HUGE_MASK);
 
-  len = ALIGN(len, huge_page_size(hstate_sizelog(
-   (flags >> MAP_HUGE_SHIFT) & MAP_HUGE_MASK)));
+  if (!hs)
+   return -EINVAL;
+
+  len = ALIGN(len, huge_page_size(hs));
   /*
    * VM_NORESERVE is used because the reservations will be
    * taken when vm_ops->mmap() is called
-- 
1.8.3.1