From a761ec36d5ec5d6728a9f8f772631ef840b5171a Mon Sep 17 00:00:00 2001
From: Gavin Shan <shangw@linux.vnet.ibm.com>
Date: Sun, 3 Mar 2013 21:48:46 +0000
Subject: [PATCH 805/858] benet: Wait f/w POST until timeout

While PCI card faces EEH errors, reset (usually hot reset) is
expected to recover from the EEH errors. After EEH core finishes
the reset, the driver callback (be_eeh_reset) is called and wait
the firmware to complete POST successfully. The original code would
return with error once detecting failure during POST stage. That
seems not enough.

The patch forces the driver (be_eeh_reset) to wait the firmware
completes POST until timeout, instead of returning error upon
detection POST failure immediately. Also, it would improve the
reliability of the EEH funtionality of the driver.

Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com>
Acked-by: Sathya Perla <sathya.perla@emulex.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 66d29cbc59433ba538922a9e958495156b31b83b)

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 drivers/net/ethernet/emulex/benet/be_cmds.c | 27 ++++++++++-----------------
 1 file changed, 10 insertions(+), 17 deletions(-)

diff --git a/drivers/net/ethernet/emulex/benet/be_cmds.c b/drivers/net/ethernet/emulex/benet/be_cmds.c
index 071aea7..813407f 100644
--- a/drivers/net/ethernet/emulex/benet/be_cmds.c
+++ b/drivers/net/ethernet/emulex/benet/be_cmds.c
@@ -473,7 +473,7 @@ static int be_mbox_notify_wait(struct be_adapter *adapter)
  return 0;
 }
 
-static int be_POST_stage_get(struct be_adapter *adapter, u16 *stage)
+static void be_POST_stage_get(struct be_adapter *adapter, u16 *stage)
 {
  u32 sem;
  u32 reg = skyhawk_chip(adapter) ? SLIPORT_SEMAPHORE_OFFSET_SH :
@@ -481,11 +481,6 @@ static int be_POST_stage_get(struct be_adapter *adapter, u16 *stage)
 
  pci_read_config_dword(adapter->pdev, reg, &sem);
  *stage = sem & POST_STAGE_MASK;
-
- if ((sem >> POST_ERR_SHIFT) & POST_ERR_MASK)
-  return -1;
- else
-  return 0;
 }
 
 int lancer_wait_ready(struct be_adapter *adapter)
@@ -579,19 +574,17 @@ int be_fw_wait_ready(struct be_adapter *adapter)
  }
 
  do {
-  status = be_POST_stage_get(adapter, &stage);
-  if (status) {
-   dev_err(dev, "POST error; stage=0x%x\n", stage);
-   return -1;
-  } else if (stage != POST_STAGE_ARMFW_RDY) {
-   if (msleep_interruptible(2000)) {
-    dev_err(dev, "Waiting for POST aborted\n");
-    return -EINTR;
-   }
-   timeout += 2;
-  } else {
+  be_POST_stage_get(adapter, &stage);
+  if (stage == POST_STAGE_ARMFW_RDY)
    return 0;
+
+  dev_info(dev, "Waiting for POST, %ds elapsed\n",
+    timeout);
+  if (msleep_interruptible(2000)) {
+   dev_err(dev, "Waiting for POST aborted\n");
+   return -EINTR;
   }
+  timeout += 2;
  } while (timeout < 60);
 
  dev_err(dev, "POST timeout; stage=0x%x\n", stage);
-- 
1.8.3.1