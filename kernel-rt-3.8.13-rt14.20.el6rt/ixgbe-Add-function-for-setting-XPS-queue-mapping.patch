From 93e5962461b9b3904283ecffd25c01058a1fd1d1 Mon Sep 17 00:00:00 2001
From: Alexander Duyck <alexander.h.duyck@intel.com>
Date: Sat, 12 Jan 2013 06:33:31 +0000
Subject: [PATCH 774/858] ixgbe: Add function for setting XPS queue mapping

This change adds support for ixgbe to configure the XPS queue mapping on
load.  The result of this change is that on open we will now be resetting
the number of Tx queues, and then setting the default configuration for XPS
based on if ATR is enabled or disabled.

Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
Reviewed-by: John Fastabend <john.r.fastabend@intel.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit fd786b7b4731b7aa9796cfd251238ffaab71d725)

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 drivers/net/ethernet/intel/ixgbe/ixgbe.h      |  1 +
 drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c  | 14 +++++++++-----
 drivers/net/ethernet/intel/ixgbe/ixgbe_main.c | 10 ++++++++++
 3 files changed, 20 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe.h b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
index 4a2831c..5213563 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
@@ -201,6 +201,7 @@ struct ixgbe_rx_queue_stats {
 
 enum ixgbe_ring_state_t {
  __IXGBE_TX_FDIR_INIT_DONE,
+ __IXGBE_TX_XPS_INIT_DONE,
  __IXGBE_TX_DETECT_HANG,
  __IXGBE_HANG_CHECK_ARMED,
  __IXGBE_RX_RSC_ENABLED,
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
index 9fafa38..ef5f7a6 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
@@ -771,19 +771,23 @@ static int ixgbe_alloc_q_vector(struct ixgbe_adapter *adapter,
 {
  struct ixgbe_q_vector *q_vector;
  struct ixgbe_ring *ring;
- int node = -1;
+ int node = NUMA_NO_NODE;
  int cpu = -1;
  int ring_count, size;
+ u8 tcs = netdev_get_num_tc(adapter->netdev);
 
  ring_count = txr_count + rxr_count;
  size = sizeof(struct ixgbe_q_vector) +
         (sizeof(struct ixgbe_ring) * ring_count);
 
  /* customize cpu for Flow Director mapping */
- if (adapter->flags & IXGBE_FLAG_FDIR_HASH_CAPABLE) {
-  if (cpu_online(v_idx)) {
-   cpu = v_idx;
-   node = cpu_to_node(cpu);
+ if ((tcs <= 1) && !(adapter->flags & IXGBE_FLAG_SRIOV_ENABLED)) {
+  u16 rss_i = adapter->ring_feature[RING_F_RSS].indices;
+  if (rss_i > 1 && adapter->atr_sample_rate) {
+   if (cpu_online(v_idx)) {
+    cpu = v_idx;
+    node = cpu_to_node(cpu);
+   }
   }
  }
 
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index 506fba0..87a29dd 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -2823,6 +2823,16 @@ void ixgbe_configure_tx_ring(struct ixgbe_adapter *adapter,
   ring->atr_sample_rate = 0;
  }
 
+ /* initialize XPS */
+ if (!test_and_set_bit(__IXGBE_TX_XPS_INIT_DONE, &ring->state)) {
+  struct ixgbe_q_vector *q_vector = ring->q_vector;
+
+  if (q_vector)
+   netif_set_xps_queue(adapter->netdev,
+         &q_vector->affinity_mask,
+         ring->queue_index);
+ }
+
  clear_bit(__IXGBE_HANG_CHECK_ARMED, &ring->state);
 
  /* enable queue */
-- 
1.8.3.1