From 63d074f26b97ea8238a30d5fe2c3979d4114cdde Mon Sep 17 00:00:00 2001
From: Larry Woodman <lwoodman@redhat.com>
Date: Mon, 25 Jul 2016 15:16:13 +0200
Subject: [x86] Ignore A/D bits in pte/pmd/pud_none()

Message-id: 1469459775-5464-3-git-send-email-lwoodman@redhat.com
Patchwork-id: 156485
O-Subject: [RHEL7.3 PATCH 2/4] Ignore A/D bits in pte/pmd/pud_none()
Bugzilla: 1347159
Z-Bugzilla: 1363860

commit 97e3c602ccbdd7db54e92fe05675c664c052a466
 Author: Dave Hansen <dave.hansen@linux.intel.com>
 Date:   Thu Jul 7 17:19:12 2016 -0700

    x86/mm: Ignore A/D bits in pte/pmd/pud_none()

    The erratum we are fixing here can lead to stray setting of the
    A and D bits.  That means that a pte that we cleared might
    suddenly have A/D set.  So, stop considering those bits when
    determining if a pte is pte_none().  The same goes for the
    other pmd_none() and pud_none().  pgd_none() can be skipped
    because it is not affected; we do not use PGD entries for
    anything other than pagetables on affected configurations.

    This adds a tiny amount of overhead to all pte_none() checks.
    I doubt we'll be able to measure it anywhere.

    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave@sr71.net>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Toshi Kani <toshi.kani@hp.com>
    Cc: dave.hansen@intel.com
    Cc: linux-mm@kvack.org
    Cc: mhocko@suse.com
    Link: http://lkml.kernel.org/r/20160708001912.5216F89C@viggo.jf.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

[agordeev@redhat.com: fixed up to apply on 7.2.z]
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h
index baa6c1d..ecf8628 100644
--- a/arch/x86/include/asm/pgtable.h
+++ b/arch/x86/include/asm/pgtable.h
@@ -400,7 +400,7 @@ pte_t *populate_extra_pte(unsigned long vaddr);
 
 static inline int pte_none(pte_t pte)
 {
- return !pte.pte;
+ return !(pte.pte & ~(_PAGE_KNL_ERRATUM_MASK));
 }
 
 #define __HAVE_ARCH_PTE_SAME
@@ -449,7 +449,8 @@ static inline int pmd_none(pmd_t pmd)
 {
  /* Only check low word on 32-bit platforms, since it might be
     out of sync with upper half. */
- return (unsigned long)native_pmd_val(pmd) == 0;
+ unsigned long val = native_pmd_val(pmd);
+ return (val & ~_PAGE_KNL_ERRATUM_MASK) == 0;
 }
 
 static inline unsigned long pmd_page_vaddr(pmd_t pmd)
@@ -520,7 +521,7 @@ static inline unsigned long pages_to_mb(unsigned long npg)
 #if PAGETABLE_LEVELS > 2
 static inline int pud_none(pud_t pud)
 {
- return native_pud_val(pud) == 0;
+ return (native_pud_val(pud) & ~(_PAGE_KNL_ERRATUM_MASK)) == 0;
 }
 
 static inline int pud_present(pud_t pud)
@@ -597,6 +598,12 @@ static inline int pgd_bad(pgd_t pgd)
 
 static inline int pgd_none(pgd_t pgd)
 {
+ /*
+  * There is no need to do a workaround for the KNL stray
+  * A/D bit erratum here.  PGDs only point to page tables
+  * except on 32-bit non-PAE which is not supported on
+  * KNL.
+  */
  return !native_pgd_val(pgd);
 }
 #endif /* PAGETABLE_LEVELS > 3 */
diff --git a/arch/x86/include/asm/pgtable_types.h b/arch/x86/include/asm/pgtable_types.h
index 35216ae..52ed27b 100644
--- a/arch/x86/include/asm/pgtable_types.h
+++ b/arch/x86/include/asm/pgtable_types.h
@@ -51,6 +51,12 @@
 #define _PAGE_SOFTDIRTY (_AT(pteval_t, 1) << _PAGE_BIT_SOFTDIRTY)
 #define __HAVE_ARCH_PTE_SPECIAL
 
+#if defined(CONFIG_X86_64) || defined(CONFIG_X86_PAE)
+#define _PAGE_KNL_ERRATUM_MASK (_PAGE_DIRTY | _PAGE_ACCESSED)
+#else
+#define _PAGE_KNL_ERRATUM_MASK 0
+#endif
+
 #ifdef CONFIG_KMEMCHECK
 #define _PAGE_HIDDEN (_AT(pteval_t, 1) << _PAGE_BIT_HIDDEN)
 #else
-- 
1.7.1