From 6aa0194343ee0312fe3a494e977b66ff58be13b7 Mon Sep 17 00:00:00 2001
From: Vitaly Kuznetsov <vkuznets@redhat.com>
Date: Tue, 24 May 2016 13:00:03 +0200
Subject: [hv] balloon: don't crash when memory is added in non-sorted order

Message-id: <1464094804-10721-4-git-send-email-vkuznets@redhat.com>
Patchwork-id: 147360
O-Subject: [RHEL7.3 KERNEL PATCH 3/4] Drivers: hv: balloon: don't crash when memory is added in non-sorted order
Bugzilla: 1325967
Z-Bugzilla: 1372339
RH-Acked-by: Cathy Avery <cavery@redhat.com>
RH-Acked-by: Jeremy McNicoll <jmcnicol@redhat.com>

Upstream commit 77c0c9735bc0ba5898e637a3a20d6bcb50e3f67d
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Sat Apr 30 19:21:35 2016 -0700

    Drivers: hv: balloon: don't crash when memory is added in non-sorted order

    When we iterate through all HA regions in handle_pg_range() we have an
    assumption that all these regions are sorted in the list and the
    'start_pfn >= has->end_pfn' check is enough to find the proper region.
    Unfortunately it's not the case with WS2016 where host can hot-add regions
    in a different order. We end up modifying the wrong HA region and crashing
    later on pages online. Modify the check to make sure we found the region
    we were searching for while iterating. Fix the same check in pfn_covered()
    as well.

    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/drivers/hv/hv_balloon.c b/drivers/hv/hv_balloon.c
index 8a725cd..f80a281 100644
--- a/drivers/hv/hv_balloon.c
+++ b/drivers/hv/hv_balloon.c
@@ -712,7 +712,7 @@ static bool pfn_covered(unsigned long start_pfn, unsigned long pfn_cnt)
    * If the pfn range we are dealing with is not in the current
    * "hot add block", move on.
    */
-  if ((start_pfn >= has->end_pfn))
+  if (start_pfn < has->start_pfn || start_pfn >= has->end_pfn)
    continue;
   /*
    * If the current hot add-request extends beyond
@@ -766,7 +766,7 @@ static unsigned long handle_pg_range(unsigned long pg_start,
    * If the pfn range we are dealing with is not in the current
    * "hot add block", move on.
    */
-  if ((start_pfn >= has->end_pfn))
+  if (start_pfn < has->start_pfn || start_pfn >= has->end_pfn)
    continue;
 
   old_covered_state = has->covered_end_pfn;
-- 
1.7.1