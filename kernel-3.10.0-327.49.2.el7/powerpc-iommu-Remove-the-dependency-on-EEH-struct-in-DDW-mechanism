From 95439d5509f3883f6abcf19f46ae554e32e7f79e Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Mon, 1 Aug 2016 20:33:45 +0200
Subject: [powerpc] iommu: Remove the dependency on EEH struct in DDW mechanism

Message-id: <1470083626-11697-2-git-send-email-gduarte@redhat.com>
Patchwork-id: 156323
O-Subject: [RHEL7.3 PATCH BZ 1357809 1/2] powerpc/iommu: Remove the dependency on EEH struct in DDW mechanism
Bugzilla: 1357809
Z-Bugzilla: 1371467
RH-Acked-by: David Arcari <darcari@redhat.com>
RH-Acked-by: Jeremy McNicoll <jmcnicol@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

BZ 1357809
Upstream Status: 8445a87f7092bc8336ea1305be9306f26b846d93

commit 8445a87f7092bc8336ea1305be9306f26b846d93
Author: Guilherme G. Piccoli <gpiccoli@linux.vnet.ibm.com>
Date:   Mon Apr 11 16:17:23 2016 -0300

    powerpc/iommu: Remove the dependency on EEH struct in DDW mechanism

    Commit 39baadbf36ce ("powerpc/eeh: Remove eeh information from pci_dn")
    changed the pci_dn struct by removing its EEH-related members.
    As part of this clean-up, DDW mechanism was modified to read the device
    configuration address from eeh_dev struct.

    As a consequence, now if we disable EEH mechanism on kernel command-line
    for example, the DDW mechanism will fail, generating a kernel oops by
    dereferencing a NULL pointer (which turns to be the eeh_dev pointer).

    This patch just changes the configuration address calculation on DDW
    functions to a manual calculation based on pci_dn members instead of
    using eeh_dev-based address.

    No functional changes were made. This was tested on pSeries, both
    in PHyp and qemu guest.

    Fixes: 39baadbf36ce ("powerpc/eeh: Remove eeh information from pci_dn")
    Cc: stable@vger.kernel.org # v3.4+
    Reviewed-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Guilherme G. Piccoli <gpiccoli@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/arch/powerpc/platforms/pseries/iommu.c b/arch/powerpc/platforms/pseries/iommu.c
index 3d2a179..e22fe11 100644
--- a/arch/powerpc/platforms/pseries/iommu.c
+++ b/arch/powerpc/platforms/pseries/iommu.c
@@ -914,7 +914,8 @@ machine_arch_initcall(pseries, find_existing_ddw_windows);
 static int query_ddw(struct pci_dev *dev, const u32 *ddw_avail,
    struct ddw_query_response *query)
 {
- struct eeh_dev *edev;
+ struct device_node *dn;
+ struct pci_dn *pdn;
  u32 cfg_addr;
  u64 buid;
  int ret;
@@ -925,11 +926,10 @@ static int query_ddw(struct pci_dev *dev, const u32 *ddw_avail,
   * Retrieve them from the pci device, not the node with the
   * dma-window property
   */
- edev = pci_dev_to_eeh_dev(dev);
- cfg_addr = edev->config_addr;
- if (edev->pe_config_addr)
-  cfg_addr = edev->pe_config_addr;
- buid = edev->phb->buid;
+ dn = pci_device_to_OF_node(dev);
+ pdn = PCI_DN(dn);
+ buid = pdn->phb->buid;
+ cfg_addr = (pdn->busno << 8) | pdn->devfn;
 
  ret = rtas_call(ddw_avail[0], 3, 5, (u32 *)query,
     cfg_addr, BUID_HI(buid), BUID_LO(buid));
@@ -943,7 +943,8 @@ static int create_ddw(struct pci_dev *dev, const u32 *ddw_avail,
    struct ddw_create_response *create, int page_shift,
    int window_shift)
 {
- struct eeh_dev *edev;
+ struct device_node *dn;
+ struct pci_dn *pdn;
  u32 cfg_addr;
  u64 buid;
  int ret;
@@ -954,11 +955,10 @@ static int create_ddw(struct pci_dev *dev, const u32 *ddw_avail,
   * Retrieve them from the pci device, not the node with the
   * dma-window property
   */
- edev = pci_dev_to_eeh_dev(dev);
- cfg_addr = edev->config_addr;
- if (edev->pe_config_addr)
-  cfg_addr = edev->pe_config_addr;
- buid = edev->phb->buid;
+ dn = pci_device_to_OF_node(dev);
+ pdn = PCI_DN(dn);
+ buid = pdn->phb->buid;
+ cfg_addr = (pdn->busno << 8) | pdn->devfn;
 
  do {
   /* extra outputs are LIOBN and dma-addr (hi, lo) */
-- 
1.7.1