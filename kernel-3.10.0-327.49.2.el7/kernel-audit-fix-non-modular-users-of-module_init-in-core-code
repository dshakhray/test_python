From 6f4751fdb393f0017e00e2e0cde88768fdc296f8 Mon Sep 17 00:00:00 2001
From: Baoquan He <bhe@redhat.com>
Date: Wed, 21 Oct 2015 08:45:35 +0200
Subject: [kernel] audit/fix non-modular users of module_init in core code

Message-id: <1445417136-28029-2-git-send-email-bhe@redhat.com>
Patchwork-id: 125832
O-Subject: [RHEL7.3 Patch 1/2] kernel: audit/fix non-modular users of module_init in core code
Bugzilla: 1073651
Z-Bugzilla: 1365621
RH-Acked-by: Minfei Huang <mhuang@redhat.com>
RH-Acked-by: Dave Young <dyoung@redhat.com>

Resolves: bz1073651
https://bugzilla.redhat.com/show_bug.cgi?id=1073651

Brew build:
https://brewweb.devel.redhat.com/taskinfo?taskID=9985748

Test:
Basic test passed on beaker machine.

This is back ported from upstream. There's a conflict in kernel/profile.c
since in rhel commit 8f9a392("[kernel] profile: Fix CPU hotplug callback
registration") a earlier upstream commit than this one has been back ported.

commit c96d6660dc65b0a90aea9834bfd8be1d5656da18
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Apr 3 14:48:35 2014 -0700

    kernel: audit/fix non-modular users of module_init in core code

    Code that is obj-y (always built-in) or dependent on a bool Kconfig
    (built-in or absent) can never be modular.  So using module_init as an
    alias for __initcall can be somewhat misleading.

    Fix these up now, so that we can relocate module_init from init.h into
    module.h in the future.  If we don't do this, we'd have to add module.h
    to obviously non-modular code, and that would be a worse thing.

    The audit targets the following module_init users for change:
     kernel/user.c                  obj-y
     kernel/kexec.c                 bool KEXEC (one instance per arch)
     kernel/profile.c               bool PROFILING
     kernel/hung_task.c             bool DETECT_HUNG_TASK
     kernel/sched/stats.c           bool SCHEDSTATS
     kernel/user_namespace.c        bool USER_NS

    Note that direct use of __initcall is discouraged, vs.  one of the
    priority categorized subgroups.  As __initcall gets mapped onto
    device_initcall, our use of subsys_initcall (which makes sense for these
    files) will thus change this registration from level 6-device to level
    4-subsys (i.e.  slightly earlier).  However no observable impact of that
    difference has been observed during testing.

    Also, two instances of missing ";" at EOL are fixed in kexec.

    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Eric Biederman <ebiederm@xmission.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Baoquan He <bhe@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/kernel/hung_task.c b/kernel/hung_task.c
index 1e66fb3..c0e4c60 100644
--- a/kernel/hung_task.c
+++ b/kernel/hung_task.c
@@ -235,5 +235,4 @@ static int __init hung_task_init(void)
 
  return 0;
 }
-
-module_init(hung_task_init);
+subsys_initcall(hung_task_init);
diff --git a/kernel/kexec.c b/kernel/kexec.c
index 895d6a9..ecb56cb 100644
--- a/kernel/kexec.c
+++ b/kernel/kexec.c
@@ -1621,7 +1621,7 @@ static int __init crash_notes_memory_init(void)
  }
  return 0;
 }
-module_init(crash_notes_memory_init)
+subsys_initcall(crash_notes_memory_init);
 
 
 /*
@@ -2748,7 +2748,7 @@ static int __init crash_save_vmcoreinfo_init(void)
  return 0;
 }
 
-module_init(crash_save_vmcoreinfo_init)
+subsys_initcall(crash_save_vmcoreinfo_init);
 
 /*
  * Move into place and start executing a preloaded standalone
diff --git a/kernel/profile.c b/kernel/profile.c
index 93b2a3f..cb980f0 100644
--- a/kernel/profile.c
+++ b/kernel/profile.c
@@ -614,5 +614,5 @@ out:
  cpu_notifier_register_done();
  return err;
 }
-module_init(create_proc_profile);
+subsys_initcall(create_proc_profile);
 #endif /* CONFIG_PROC_FS */
diff --git a/kernel/sched/stats.c b/kernel/sched/stats.c
index da98af3..a476bea 100644
--- a/kernel/sched/stats.c
+++ b/kernel/sched/stats.c
@@ -142,4 +142,4 @@ static int __init proc_schedstat_init(void)
  proc_create("schedstat", 0, NULL, &proc_schedstat_operations);
  return 0;
 }
-module_init(proc_schedstat_init);
+subsys_initcall(proc_schedstat_init);
diff --git a/kernel/user.c b/kernel/user.c
index e70e606..1d39b0d 100644
--- a/kernel/user.c
+++ b/kernel/user.c
@@ -225,5 +225,4 @@ static int __init uid_cache_init(void)
 
  return 0;
 }
-
-module_init(uid_cache_init);
+subsys_initcall(uid_cache_init);
diff --git a/kernel/user_namespace.c b/kernel/user_namespace.c
index 51f7680..8e37309 100644
--- a/kernel/user_namespace.c
+++ b/kernel/user_namespace.c
@@ -1017,4 +1017,4 @@ static __init int user_namespaces_init(void)
  user_ns_cachep = KMEM_CACHE(user_namespace, SLAB_PANIC);
  return 0;
 }
-module_init(user_namespaces_init);
+subsys_initcall(user_namespaces_init);
-- 
1.7.1