From 935e6634d0a3e8feb259c71520a842a3a518cd27 Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Mon, 1 Aug 2016 20:33:46 +0200
Subject: [powerpc] pseries: Fix PCI config address for DDW

Message-id: <1470083626-11697-3-git-send-email-gduarte@redhat.com>
Patchwork-id: 156324
O-Subject: [RHEL7.3 PATCH BZ 1357809 2/2] powerpc/pseries: Fix PCI config address for DDW
Bugzilla: 1357809
Z-Bugzilla: 1371467
RH-Acked-by: David Arcari <darcari@redhat.com>
RH-Acked-by: Jeremy McNicoll <jmcnicol@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

BZ 1357809
Upstream Status: 8a934efe94347eee843aeea65bdec8077a79e259

commit 8a934efe94347eee843aeea65bdec8077a79e259
Author: Gavin Shan <gwshan@linux.vnet.ibm.com>
Date:   Thu May 26 09:56:07 2016 +1000

    powerpc/pseries: Fix PCI config address for DDW

    In commit 8445a87f7092 "powerpc/iommu: Remove the dependency on EEH
    struct in DDW mechanism", the PE address was replaced with the PCI
    config address in order to remove dependency on EEH. According to PAPR
    spec, firmware (pHyp or QEMU) should accept "xxBBSSxx" format PCI config
    address, not "xxxxBBSS" provided by the patch. Note that "BB" is PCI bus
    number and "SS" is the combination of slot and function number.

    This fixes the PCI address passed to DDW RTAS calls.

    Fixes: 8445a87f7092 ("powerpc/iommu: Remove the dependency on EEH struct in DDW mechanism")
    Cc: stable@vger.kernel.org # v3.4+
    Reported-by: Guilherme G. Piccoli <gpiccoli@linux.vnet.ibm.com>
    Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Tested-by: Guilherme G. Piccoli <gpiccoli@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/arch/powerpc/platforms/pseries/iommu.c b/arch/powerpc/platforms/pseries/iommu.c
index e22fe11..fd3ecdd 100644
--- a/arch/powerpc/platforms/pseries/iommu.c
+++ b/arch/powerpc/platforms/pseries/iommu.c
@@ -929,7 +929,7 @@ static int query_ddw(struct pci_dev *dev, const u32 *ddw_avail,
  dn = pci_device_to_OF_node(dev);
  pdn = PCI_DN(dn);
  buid = pdn->phb->buid;
- cfg_addr = (pdn->busno << 8) | pdn->devfn;
+ cfg_addr = ((pdn->busno << 16) | (pdn->devfn << 8));
 
  ret = rtas_call(ddw_avail[0], 3, 5, (u32 *)query,
     cfg_addr, BUID_HI(buid), BUID_LO(buid));
@@ -958,7 +958,7 @@ static int create_ddw(struct pci_dev *dev, const u32 *ddw_avail,
  dn = pci_device_to_OF_node(dev);
  pdn = PCI_DN(dn);
  buid = pdn->phb->buid;
- cfg_addr = (pdn->busno << 8) | pdn->devfn;
+ cfg_addr = ((pdn->busno << 16) | (pdn->devfn << 8));
 
  do {
   /* extra outputs are LIOBN and dma-addr (hi, lo) */
-- 
1.7.1