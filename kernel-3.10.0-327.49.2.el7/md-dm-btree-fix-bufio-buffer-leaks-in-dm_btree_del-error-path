From 4da166d982585cb0476c8e06bfdcd03087c54921 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 11 Dec 2015 22:06:28 +0100
Subject: [md] dm-btree: fix bufio buffer leaks in dm_btree_del() error path

Message-id: <1449871588-13421-3-git-send-email-snitzer@redhat.com>
Patchwork-id: 128884
O-Subject: [RHEL7.3 PATCH 2/2] dm btree: fix bufio buffer leaks in dm_btree_del() error path
Bugzilla: 1290911
Z-Bugzilla: 1364462
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1290911

Upstream commit ed8b45a3679eb49069b094c0711b30833f27c734
Author: Joe Thornber <ejt@redhat.com>
Date:   Thu Dec 10 14:37:53 2015 +0000

    dm btree: fix bufio buffer leaks in dm_btree_del() error path

    If dm_btree_del()'s call to push_frame() fails, e.g. due to
    btree_node_validator finding invalid metadata, the dm_btree_del() error
    path must unlock all frames (which have active dm-bufio buffers) that
    were pushed onto the del_stack.

    Otherwise, dm_bufio_client_destroy() will BUG_ON() because dm-bufio
    buffers have leaked, e.g.:
      device-mapper: bufio: leaked buffer 3, hold count 1, list 0

    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org

Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/drivers/md/persistent-data/dm-btree.c b/drivers/md/persistent-data/dm-btree.c
index 40bbd51..5cb4068 100644
--- a/drivers/md/persistent-data/dm-btree.c
+++ b/drivers/md/persistent-data/dm-btree.c
@@ -255,6 +255,16 @@ static void pop_frame(struct del_stack *s)
  dm_tm_unlock(s->tm, f->b);
 }
 
+static void unlock_all_frames(struct del_stack *s)
+{
+ struct frame *f;
+
+ while (unprocessed_frames(s)) {
+  f = s->spine + s->top--;
+  dm_tm_unlock(s->tm, f->b);
+ }
+}
+
 int dm_btree_del(struct dm_btree_info *info, dm_block_t root)
 {
  int r;
@@ -311,9 +321,13 @@ int dm_btree_del(struct dm_btree_info *info, dm_block_t root)
    pop_frame(s);
   }
  }
-
 out:
+ if (r) {
+  /* cleanup all frames of del_stack */
+  unlock_all_frames(s);
+ }
  kfree(s);
+
  return r;
 }
 EXPORT_SYMBOL_GPL(dm_btree_del);
-- 
1.7.1