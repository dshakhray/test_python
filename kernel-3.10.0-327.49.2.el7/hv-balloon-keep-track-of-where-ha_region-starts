From 392258d6d5ebd65d610b1553f063bf5e8e987454 Mon Sep 17 00:00:00 2001
From: Vitaly Kuznetsov <vkuznets@redhat.com>
Date: Thu, 25 Aug 2016 20:49:14 +0200
Subject: [hv] balloon: keep track of where ha_region starts

Message-id: <1472158157-4795-2-git-send-email-vkuznets@redhat.com>
Patchwork-id: 157322
O-Subject: [RHEL7 KERNEL PATCH 1/4] Drivers: hv: balloon: keep track of where ha_region starts
Bugzilla: 1361245
Z-Bugzilla: 1373818
RH-Acked-by: Cathy Avery <cavery@redhat.com>

Upstream status: signed-off-by the subsystem maintainer, sent to Greg for merging:
  http://driverdev.linuxdriverproject.org/pipermail/driverdev-devel/2016-August/092842.html
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Aug 24 16:23:09 2016 -0700

    Drivers: hv: balloon: keep track of where ha_region starts

    Windows 2012 (non-R2) does not specify hot add region in hot add requests
    and the logic in hot_add_req() is trying to find a 128Mb-aligned region
    covering the request. It may also happen that host's requests are not 128Mb
    aligned and the created ha_region will start before the first specified
    PFN. We can't online these non-present pages but we don't remember the real
    start of the region.

    This is a regression introduced by the commit 5abbbb75d733 ("Drivers: hv:
    hv_balloon: don't lose memory when onlining order is not natural"). While
    the idea of keeping the 'moving window' was wrong (as there is no guarantee
    that hot add requests come ordered) we should still keep track of
    covered_start_pfn. This is not a revert, the logic is different.

    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>

Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/drivers/hv/hv_balloon.c b/drivers/hv/hv_balloon.c
index 16d01cb..ac3a5d8 100644
--- a/drivers/hv/hv_balloon.c
+++ b/drivers/hv/hv_balloon.c
@@ -428,13 +428,14 @@ struct dm_info_msg {
  * currently hot added. We hot add in multiples of 128M
  * chunks; it is possible that we may not be able to bring
  * online all the pages in the region. The range
- * covered_end_pfn defines the pages that can
+ * covered_start_pfn:covered_end_pfn defines the pages that can
  * be brough online.
  */
 
 struct hv_hotadd_state {
  struct list_head list;
  unsigned long start_pfn;
+ unsigned long covered_start_pfn;
  unsigned long covered_end_pfn;
  unsigned long ha_end_pfn;
  unsigned long end_pfn;
@@ -680,7 +681,8 @@ static void hv_online_page(struct page *pg)
 
  list_for_each(cur, &dm_device.ha_region_list) {
   has = list_entry(cur, struct hv_hotadd_state, list);
-  cur_start_pgp = (unsigned long)pfn_to_page(has->start_pfn);
+  cur_start_pgp = (unsigned long)
+   pfn_to_page(has->covered_start_pfn);
   cur_end_pgp = (unsigned long)pfn_to_page(has->covered_end_pfn);
 
   if (((unsigned long)pg >= cur_start_pgp) &&
@@ -852,6 +854,7 @@ static unsigned long process_hot_add(unsigned long pg_start,
   list_add_tail(&ha_region->list, &dm_device.ha_region_list);
   ha_region->start_pfn = rg_start;
   ha_region->ha_end_pfn = rg_start;
+  ha_region->covered_start_pfn = pg_start;
   ha_region->covered_end_pfn = pg_start;
   ha_region->end_pfn = rg_start + rg_size;
  }
-- 
1.7.1