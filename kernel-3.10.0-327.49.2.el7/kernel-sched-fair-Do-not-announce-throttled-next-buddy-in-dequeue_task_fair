From 33ae723a27b50769fb14820fbb401d23aa3d3822 Mon Sep 17 00:00:00 2001
From: Xunlei Pang <xlpang@redhat.com>
Date: Sat, 13 Aug 2016 08:21:07 +0200
Subject: [kernel] sched/fair: Do not announce throttled next buddy in dequeue_task_fair()

Message-id: <1471076469-25972-3-git-send-email-xlpang@redhat.com>
Patchwork-id: 156822
O-Subject: [RHEL7.3 PATCH 2/4] sched/fair: Do not announce throttled next buddy in dequeue_task_fair()
Bugzilla: 1341003
Z-Bugzilla: 1373820
RH-Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
RH-Acked-by: Jiri Olsa <jolsa@redhat.com>
RH-Acked-by: Rafael Aquini <aquini@redhat.com>

Resolves:
https://bugzilla.redhat.com/show_bug.cgi?id=1341003

This is back ported from upstream, and is 100% cleanly patched.

commit 754bd598be9bbc953bc709a9e8ed7f3188bfb9d7
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Thu Jun 16 15:57:15 2016 +0300

    sched/fair: Do not announce throttled next buddy in dequeue_task_fair()

    Hierarchy could be already throttled at this point. Throttled next
    buddy could trigger a NULL pointer dereference in pick_next_task_fair().

    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Ben Segall <bsegall@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/146608183552.21905.15924473394414832071.stgit@buzz
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

Signed-off-by: Xunlei Pang <xlpang@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 9210ffe..4ac05a3 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -3894,15 +3894,14 @@ static void dequeue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 
   /* Don't dequeue parent if it has other entities besides us */
   if (cfs_rq->load.weight) {
+   /* Avoid re-evaluating load for this entity: */
+   se = parent_entity(se);
    /*
     * Bias pick_next to pick a task from this cfs_rq, as
     * p is sleeping when it is within its sched_slice.
     */
-   if (task_sleep && parent_entity(se))
-    set_next_buddy(parent_entity(se));
-
-   /* avoid re-evaluating load for this entity */
-   se = parent_entity(se);
+   if (task_sleep && se && !throttled_hierarchy(cfs_rq))
+    set_next_buddy(se);
    break;
   }
   flags |= DEQUEUE_SLEEP;
-- 
1.7.1