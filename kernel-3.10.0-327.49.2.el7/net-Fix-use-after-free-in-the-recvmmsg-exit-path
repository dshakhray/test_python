From b85f8ef28e009dcfda7c17786d866fd084065b55 Mon Sep 17 00:00:00 2001
From: Davide Caratti <dcaratti@redhat.com>
Date: Thu, 3 Nov 2016 11:54:56 +0100
Subject: [net] Fix use after free in the recvmmsg exit path

Message-id: <d2bddb6763e3497774ebb53511da24e4cf1bfa25.1478173996.git.dcaratti@redhat.com>
Patchwork-id: 160214
O-Subject: [RHEL7.4 net] net: Fix use after free in the recvmmsg exit path
Bugzilla: 1390047
Z-Bugzilla: 1399119
CVE: CVE-2016-7117
RH-Acked-by: Eric Garver <egarver@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Paolo Abeni <pabeni@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1390047
Upstream Status: net.git commit 34b88a6
Brew:https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=12006645
CVE: CVE-2016-7117
Tested: compile-test and boot only (syzkaller not available for RHEL)
Conflicts: None

commit 34b88a68f26a75e4fded796f1a49c40f82234b7d
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Mon Mar 14 09:56:35 2016 -0300

    net: Fix use after free in the recvmmsg exit path

    The syzkaller fuzzer hit the following use-after-free:

      Call Trace:
       [<ffffffff8175ea0e>] __asan_report_load8_noabort+0x3e/0x40 mm/kasan/report.c:295
       [<ffffffff851cc31a>] __sys_recvmmsg+0x6fa/0x7f0 net/socket.c:2261
       [<     inline     >] SYSC_recvmmsg net/socket.c:2281
       [<ffffffff851cc57f>] SyS_recvmmsg+0x16f/0x180 net/socket.c:2270
       [<ffffffff86332bb6>] entry_SYSCALL_64_fastpath+0x16/0x7a
      arch/x86/entry/entry_64.S:185

    And, as Dmitry rightly assessed, that is because we can drop the
    reference and then touch it when the underlying recvmsg calls return
    some packets and then hit an error, which will make recvmmsg to set
    sock->sk->sk_err, oops, fix it.

    Reported-and-Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Kostya Serebryany <kcc@google.com>
    Cc: Sasha Levin <sasha.levin@oracle.com>
    Fixes: a2e2725541fa ("net: Introduce recvmmsg socket syscall")
    http://lkml.kernel.org/r/20160122211644.GC2470@redhat.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Davide Caratti <dcaratti@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/net/socket.c b/net/socket.c
index fb4a999..dedfb70 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -2378,31 +2378,31 @@ int __sys_recvmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen,
    break;
  }
 
-out_put:
- fput_light(sock->file, fput_needed);
-
  if (err == 0)
-  return datagrams;
+  goto out_put;
 
- if (datagrams != 0) {
+ if (datagrams == 0) {
+  datagrams = err;
+  goto out_put;
+ }
+
+ /*
+  * We may return less entries than requested (vlen) if the
+  * sock is non block and there aren't enough datagrams...
+  */
+ if (err != -EAGAIN) {
   /*
-   * We may return less entries than requested (vlen) if the
-   * sock is non block and there aren't enough datagrams...
+   * ... or  if recvmsg returns an error after we
+   * received some datagrams, where we record the
+   * error to return on the next call or if the
+   * app asks about it using getsockopt(SO_ERROR).
    */
-  if (err != -EAGAIN) {
-   /*
-    * ... or  if recvmsg returns an error after we
-    * received some datagrams, where we record the
-    * error to return on the next call or if the
-    * app asks about it using getsockopt(SO_ERROR).
-    */
-   sock->sk->sk_err = -err;
-  }
-
-  return datagrams;
+  sock->sk->sk_err = -err;
  }
+out_put:
+ fput_light(sock->file, fput_needed);
 
- return err;
+ return datagrams;
 }
 
 SYSCALL_DEFINE5(recvmmsg, int, fd, struct mmsghdr __user *, mmsg,
-- 
1.7.1