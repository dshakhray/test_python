From ad2a0c7c000828515c007102c0203781ed62d2ec Mon Sep 17 00:00:00 2001
From: Aaron Conole <aconole@redhat.com>
Date: Fri, 22 Jan 2016 15:40:54 +0100
Subject: [net] ipv6: sctp: add rcu protection around np->opt

Message-id: <1453477255-5062-3-git-send-email-aconole@redhat.com>
Patchwork-id: 132700
O-Subject: [RHEL7.3 net PATCH 2/3] ipv6: sctp: add rcu protection around np->opt
Bugzilla: 1286695
Z-Bugzilla: 1374026
RH-Acked-by: Marcelo Leitner <mleitner@redhat.com>
RH-Acked-by: Sabrina Dubroca <sdubroca@redhat.com>
RH-Acked-by: Paolo Abeni <pabeni@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1286695
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=10380778
Tested: on netdev25

Upstream commit:
commit c836a8ba93869d6a0290a6ae0047fbef09066871
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Dec 2 21:48:14 2015 -0800

    ipv6: sctp: add rcu protection around np->opt

    This patch completes the work I did in commit 45f6fad84cc3
    ("ipv6: add complete rcu protection around np->opt"), as I missed
    sctp part.

    This simply makes sure np->opt is used with proper RCU locking
    and accessors.

    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Aaron Conole <aconole@redhat.com>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/net/sctp/ipv6.c b/net/sctp/ipv6.c
index 851591b..d7774fa 100644
--- a/net/sctp/ipv6.c
+++ b/net/sctp/ipv6.c
@@ -216,6 +216,7 @@ static int sctp_v6_xmit(struct sk_buff *skb, struct sctp_transport *transport)
  struct sock *sk = skb->sk;
  struct ipv6_pinfo *np = inet6_sk(sk);
  struct flowi6 *fl6 = &transport->fl.u.ip6;
+ int res;
 
  SCTP_DEBUG_PRINTK("%s: skb:%p, len:%d, src:%pI6 dst:%pI6\n",
      __func__, skb, skb->len,
@@ -228,7 +229,10 @@ static int sctp_v6_xmit(struct sk_buff *skb, struct sctp_transport *transport)
 
  SCTP_INC_STATS(sock_net(sk), SCTP_MIB_OUTSCTPPACKS);
 
- return ip6_xmit(sk, skb, fl6, np->opt, np->tclass);
+ rcu_read_lock();
+ res = ip6_xmit(sk, skb, fl6, rcu_dereference(np->opt), np->tclass);
+ rcu_read_unlock();
+ return res;
 }
 
 /* Returns the dst cache entry for the given source and destination ip
@@ -269,7 +273,10 @@ static void sctp_v6_get_dst(struct sctp_transport *t, union sctp_addr *saddr,
   SCTP_DEBUG_PRINTK("SRC=%pI6 - ", &fl6->saddr);
  }
 
- final_p = fl6_update_dst(fl6, np->opt, &final);
+ rcu_read_lock();
+ final_p = fl6_update_dst(fl6, rcu_dereference(np->opt), &final);
+ rcu_read_unlock();
+
  dst = ip6_dst_lookup_flow(sk, fl6, final_p);
  if (!asoc || saddr)
   goto out;
@@ -326,7 +333,7 @@ static void sctp_v6_get_dst(struct sctp_transport *t, union sctp_addr *saddr,
  if (baddr) {
   fl6->saddr = baddr->v6.sin6_addr;
   fl6->fl6_sport = baddr->v6.sin6_port;
-  final_p = fl6_update_dst(fl6, np->opt, &final);
+  final_p = fl6_update_dst(fl6, rcu_dereference(np->opt), &final);
   dst = ip6_dst_lookup_flow(sk, fl6, final_p);
  }
 
-- 
1.7.1