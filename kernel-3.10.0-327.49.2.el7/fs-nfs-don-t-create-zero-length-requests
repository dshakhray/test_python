From b2c6a543b37ed41f3abacc1701fe7096281f95fb Mon Sep 17 00:00:00 2001
From: Benjamin Coddington <bcodding@redhat.com>
Date: Thu, 1 Sep 2016 15:51:20 +0200
Subject: [fs] nfs: don't create zero-length requests

Message-id: <e350ee253d8553a4d16abeefdbe5ac5f62b178b3.1472745034.git.bcodding@redhat.com>
Patchwork-id: 157526
O-Subject: [RHEL7 PATCH fs] nfs: don't create zero-length requests
Bugzilla: 1324635
Z-Bugzilla: 1378916
RH-Acked-by: Jeff Layton <jlayton@redhat.com>
RH-Acked-by: Dave Wysochanski <dwysocha@redhat.com>
RH-Acked-by: Sachin Prabhu <sprabhu@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

NFS doesn't expect requests with wb_bytes set to zero and may make
unexpected decisions about how to handle that request at the page IO layer.
Skip request creation if we won't have any wb_bytes in the request.

Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
Reviewed-by: Weston Andros Adamson <dros@primarydata.com>
Cc: stable@vger.kernel.org
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream-id: 149a4fddd0a72d526abbeac0c8deaab03559836a
Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1324635
Brew: https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=11691389
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index aa3a1f1..a6261e0 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -1215,6 +1215,9 @@ int nfs_updatepage(struct file *file, struct page *page,
  dprintk("NFS:       nfs_updatepage(%pD2 %d@%lld)\n",
   file, count, (long long)(page_file_offset(page) + offset));
 
+ if (!count)
+  goto out;
+
  if (nfs_can_extend_write(file, page, inode)) {
   count = max(count + offset, nfs_page_length(page));
   offset = 0;
@@ -1225,7 +1228,7 @@ int nfs_updatepage(struct file *file, struct page *page,
   nfs_set_pageerror(page);
  else
   __set_page_dirty_nobuffers(page);
-
+out:
  dprintk("NFS:       nfs_updatepage returns %d (isize %lld)\n",
    status, (long long)i_size_read(inode));
  return status;
-- 
1.7.1