From 121fc90b74c31ef502c8d42ce6b94f8d359efcf9 Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Tue, 20 Dec 2016 18:55:58 +0100
Subject: [netdrv] ibmveth: set correct gso_size and gso_type

Message-id: <1482260159-10727-2-git-send-email-gduarte@redhat.com>
Patchwork-id: 161732
O-Subject: [RHEL7.4 PATCH BZ 1361958 1/2] ibmveth: set correct gso_size and gso_type
Bugzilla: 1361958
Z-Bugzilla: 1411381
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

BZ 1361958
Upstream Status: 7b5967389f5a8dfb9d32843830f5e2717e20995d

commit 7b5967389f5a8dfb9d32843830f5e2717e20995d
Author: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
Date:   Thu Dec 8 16:40:03 2016 -0600

    ibmveth: set correct gso_size and gso_type

    This patch is based on an earlier one submitted
    by Jon Maxwell with the following commit message:

    "We recently encountered a bug where a few customers using ibmveth on the
    same LPAR hit an issue where a TCP session hung when large receive was
    enabled. Closer analysis revealed that the session was stuck because the
    one side was advertising a zero window repeatedly.

    We narrowed this down to the fact the ibmveth driver did not set gso_size
    which is translated by TCP into the MSS later up the stack. The MSS is
    used to calculate the TCP window size and as that was abnormally large,
    it was calculating a zero window, even although the sockets receive buffer
    was completely empty."

    We rely on the Virtual I/O Server partition in a pseries
    environment to provide the MSS through the TCP header checksum
    field. The stipulation is that users should not disable checksum
    offloading if rx packet aggregation is enabled through VIOS.

    Some firmware offerings provide the MSS in the RX buffer.
    This is signalled by a bit in the RX queue descriptor.

    Reviewed-by: Brian King <brking@linux.vnet.ibm.com>
    Reviewed-by: Pradeep Satyanarayana <pradeeps@linux.vnet.ibm.com>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Reviewed-by: Jonathan Maxwell <jmaxwell37@gmail.com>
    Reviewed-by: David Dai <zdai@us.ibm.com>
    Signed-off-by: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/drivers/net/ethernet/ibm/ibmveth.c b/drivers/net/ethernet/ibm/ibmveth.c
index 599ccd0..8f3efe6 100644
--- a/drivers/net/ethernet/ibm/ibmveth.c
+++ b/drivers/net/ethernet/ibm/ibmveth.c
@@ -59,7 +59,7 @@ static struct kobj_type ktype_veth_pool;
 
 static const char ibmveth_driver_name[] = "ibmveth";
 static const char ibmveth_driver_string[] = "IBM Power Virtual Ethernet Driver";
-#define ibmveth_driver_version "1.05"
+#define ibmveth_driver_version "1.06"
 
 MODULE_AUTHOR("Santiago Leon <santil@linux.vnet.ibm.com>");
 MODULE_DESCRIPTION("IBM Power Virtual Ethernet Driver");
@@ -138,6 +138,11 @@ static inline int ibmveth_rxq_frame_offset(struct ibmveth_adapter *adapter)
  return ibmveth_rxq_flags(adapter) & IBMVETH_RXQ_OFF_MASK;
 }
 
+static inline int ibmveth_rxq_large_packet(struct ibmveth_adapter *adapter)
+{
+ return ibmveth_rxq_flags(adapter) & IBMVETH_RXQ_LRG_PKT;
+}
+
 static inline int ibmveth_rxq_frame_length(struct ibmveth_adapter *adapter)
 {
  return be32_to_cpu(adapter->rx_queue.queue_addr[adapter->rx_queue.index].length);
@@ -1163,6 +1168,45 @@ map_failed:
  goto retry_bounce;
 }
 
+static void ibmveth_rx_mss_helper(struct sk_buff *skb, u16 mss, int lrg_pkt)
+{
+ int offset = 0;
+
+ /* only TCP packets will be aggregated */
+ if (skb->protocol == htons(ETH_P_IP)) {
+  struct iphdr *iph = (struct iphdr *)skb->data;
+
+  if (iph->protocol == IPPROTO_TCP) {
+   offset = iph->ihl * 4;
+   skb_shinfo(skb)->gso_type = SKB_GSO_TCPV4;
+  } else {
+   return;
+  }
+ } else if (skb->protocol == htons(ETH_P_IPV6)) {
+  struct ipv6hdr *iph6 = (struct ipv6hdr *)skb->data;
+
+  if (iph6->nexthdr == IPPROTO_TCP) {
+   offset = sizeof(struct ipv6hdr);
+   skb_shinfo(skb)->gso_type = SKB_GSO_TCPV6;
+  } else {
+   return;
+  }
+ } else {
+  return;
+ }
+ /* if mss is not set through Large Packet bit/mss in rx buffer,
+  * expect that the mss will be written to the tcp header checksum.
+  */
+ if (lrg_pkt) {
+  skb_shinfo(skb)->gso_size = mss;
+ } else if (offset) {
+  struct tcphdr *tcph = (struct tcphdr *)(skb->data + offset);
+
+  skb_shinfo(skb)->gso_size = ntohs(tcph->check);
+  tcph->check = 0;
+ }
+}
+
 static int ibmveth_poll(struct napi_struct *napi, int budget)
 {
  struct ibmveth_adapter *adapter =
@@ -1171,6 +1215,7 @@ static int ibmveth_poll(struct napi_struct *napi, int budget)
  int frames_processed = 0;
  unsigned long lpar_rc;
  struct iphdr *iph;
+ u16 mss = 0;
 
 restart_poll:
  while (frames_processed < budget) {
@@ -1188,9 +1233,21 @@ restart_poll:
    int length = ibmveth_rxq_frame_length(adapter);
    int offset = ibmveth_rxq_frame_offset(adapter);
    int csum_good = ibmveth_rxq_csum_good(adapter);
+   int lrg_pkt = ibmveth_rxq_large_packet(adapter);
 
    skb = ibmveth_rxq_get_buffer(adapter);
 
+   /* if the large packet bit is set in the rx queue
+    * descriptor, the mss will be written by PHYP eight
+    * bytes from the start of the rx buffer, which is
+    * skb->data at this stage
+    */
+   if (lrg_pkt) {
+    __be64 *rxmss = (__be64 *)(skb->data + 8);
+
+    mss = (u16)be64_to_cpu(*rxmss);
+   }
+
    new_skb = NULL;
    if (length < rx_copybreak)
     new_skb = netdev_alloc_skb(netdev, length);
@@ -1224,11 +1281,15 @@ restart_poll:
      if (iph->check == 0xffff) {
       iph->check = 0;
       iph->check = ip_fast_csum((unsigned char *)iph, iph->ihl);
-      adapter->rx_large_packets++;
      }
     }
    }
 
+   if (length > netdev->mtu + ETH_HLEN) {
+    ibmveth_rx_mss_helper(skb, mss, lrg_pkt);
+    adapter->rx_large_packets++;
+   }
+
    napi_gro_receive(napi, skb); /* send it up */
 
    netdev->stats.rx_packets++;
diff --git a/drivers/net/ethernet/ibm/ibmveth.h b/drivers/net/ethernet/ibm/ibmveth.h
index 88372f4..db0cb61 100644
--- a/drivers/net/ethernet/ibm/ibmveth.h
+++ b/drivers/net/ethernet/ibm/ibmveth.h
@@ -210,6 +210,7 @@ struct ibmveth_rx_q_entry {
 #define IBMVETH_RXQ_TOGGLE  0x80000000
 #define IBMVETH_RXQ_TOGGLE_SHIFT 31
 #define IBMVETH_RXQ_VALID  0x40000000
+#define IBMVETH_RXQ_LRG_PKT  0x04000000
 #define IBMVETH_RXQ_NO_CSUM  0x02000000
 #define IBMVETH_RXQ_CSUM_GOOD  0x01000000
 #define IBMVETH_RXQ_OFF_MASK  0x0000FFFF
-- 
1.7.1