From cedcbd5f9b0de7ded7e9de96ef959700ebb87cb9 Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Thu, 14 Jan 2016 16:14:49 +0100
Subject: [net] packet: missing dev_put() in packet_do_bind()

Message-id: <1452788090-32552-2-git-send-email-hannes@redhat.com>
Patchwork-id: 132138
O-Subject: [RHEL7.3 net 1/2] packet: missing dev_put() in packet_do_bind()
Bugzilla: 1298365
Z-Bugzilla: 1388615
RH-Acked-by: Paolo Abeni <pabeni@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1298365
Upstream Status: 158cd4af8dedbda0d612d448c724c715d0dda649
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=10344056

Upstream Commit:
commit 158cd4af8dedbda0d612d448c724c715d0dda649
Author: Lars Westerhoff <lars.westerhoff@newtec.eu>
Date:   Tue Jul 28 01:32:21 2015 +0300

    packet: missing dev_put() in packet_do_bind()

    When binding a PF_PACKET socket, the use count of the bound interface is
    always increased with dev_hold in dev_get_by_{index,name}.  However,
    when rebound with the same protocol and device as in the previous bind
    the use count of the interface was not decreased.  Ultimately, this
    caused the deletion of the interface to fail with the following message:

    unregister_netdevice: waiting for dummy0 to become free. Usage count = 1

    This patch moves the dev_put out of the conditional part that was only
    executed when either the protocol or device changed on a bind.

    Fixes: 902fefb82ef7 ('packet: improve socket create/bind latency in some cases')
    Signed-off-by: Lars Westerhoff <lars.westerhoff@newtec.eu>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index 3f571f6..6c8554e 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -2567,7 +2567,7 @@ static int packet_release(struct socket *sock)
 static int packet_do_bind(struct sock *sk, struct net_device *dev, __be16 proto)
 {
  struct packet_sock *po = pkt_sk(sk);
- const struct net_device *dev_curr;
+ struct net_device *dev_curr;
  __be16 proto_curr;
  bool need_rehook;
 
@@ -2591,15 +2591,13 @@ static int packet_do_bind(struct sock *sk, struct net_device *dev, __be16 proto)
 
   po->num = proto;
   po->prot_hook.type = proto;
-
-  if (po->prot_hook.dev)
-   dev_put(po->prot_hook.dev);
-
   po->prot_hook.dev = dev;
 
   po->ifindex = dev ? dev->ifindex : 0;
   packet_cached_dev_assign(po, dev);
  }
+ if (dev_curr)
+  dev_put(dev_curr);
 
  if (proto == 0 || !need_rehook)
   goto out_unlock;
-- 
1.7.1