From b8873e136469e439c07069ed4b5ec61ef4acdc8e Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Wed, 30 Nov 2016 15:35:24 +0100
Subject: [scsi] megaraid_sas: Send SYNCHRONIZE_CACHE for VD to firmware

Message-id: <1480520125-10748-4-git-send-email-thenzl@redhat.com>
Patchwork-id: 160939
O-Subject: [RHEL7.2.z e-stor PATCH 3/4] [scsi] megaraid_sas: Send SYNCHRONIZE_CACHE for VD to firmware
Bugzilla: 1380447
Z-Bugzilla: 1398178
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Maurizio Lombardi <mlombard@redhat.com>
RH-Acked-by: Jeremy McNicoll <jmcnicol@redhat.com>

Until now the megaraid_sas driver has reported successful completion on
SYNCHRONIZE_CACHE commands without sending them down to the controller.
The controller firmware has been responsible for taking care of flushing
disk caches for all drives that belong to a Virtual Disk at the time of
system reboot/shutdown.

There may have been a reason to avoid sending SYNCHRONIZE_CACHE to a VD
in the past but that no longer appears to be valid.

Older versions of MegaRaid firmware (Gen2 and Gen2.5) set the WCE bit
for Virtual Disks but the firmware does not report correct completion
status for a SYNCHRONIZE_CACHE command. As a result, we must use another
method to identify whether it is safe to send the command to the
controller. We use the canHandleSyncCache firmware flag in the scratch
pad register at offset 0xB4.

New SYNCHRONIZE_CACHE behavior:

IF 'JBOD'

 Driver sends SYNCHRONIZE_CACHE command to the firmware
 Firmware sends SYNCHRONIZE_CACHE to drive
 Firmware obtains status from drive and returns same status back to driver

ELSEIF 'VirtualDisk'

 IF firmware supports new API bit called canHandleSyncCache
  Driver sends SYNCHRONIZE_CACHE command to the firmware
  Firmware does not send SYNCHRONIZE_CACHE to drives
  Firmware returns SUCCESS
 ELSE
  Driver does not send SYNCHRONIZE_CACHE command to the firmware
  Driver return SUCCESS for that command
 ENDIF
ENDIF

[mkp: edited patch description]

Signed-off-by: Kashyap Desai <kashyap.desai@broadcom.com>
Signed-off-by: Sumit Saxena <sumit.saxena@broadcom.com>
Reviewed-by: Tomas Henzl <thenzl@redhat.com>
Reviewed-by: Hannes Reinecke <hare@suse.com>
Reviewed-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit d0fc91d67c59068ce6d42e41ce66a4c471e5bc74)
Signed-off-by: Rafael Aquini <aquini@redhat.com>
(cherry picked from commit 020196d44bc58a538d6365101753b3c0e87eb343)

 Conflicts:
 drivers/scsi/megaraid/megaraid_sas.h
 drivers/scsi/megaraid/megaraid_sas_fusion.c

scratch_pad_2 handling taken from 179ac14291a0e1cf8c2b2dfedce7c5af66696cc9
---
 drivers/scsi/megaraid/megaraid_sas.h        | 3 +++
 drivers/scsi/megaraid/megaraid_sas_base.c   | 7 ++-----
 drivers/scsi/megaraid/megaraid_sas_fusion.c | 9 +++++++++
 3 files changed, 14 insertions(+), 5 deletions(-)

Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/drivers/scsi/megaraid/megaraid_sas.h b/drivers/scsi/megaraid/megaraid_sas.h
index 8b7c678..566663b 100644
--- a/drivers/scsi/megaraid/megaraid_sas.h
+++ b/drivers/scsi/megaraid/megaraid_sas.h
@@ -1117,6 +1117,8 @@ enum MR_SCSI_CMD_TYPE {
 #define MR_MAX_REPLY_QUEUES_EXT_OFFSET          0X003FC000
 #define MR_MAX_REPLY_QUEUES_EXT_OFFSET_SHIFT    14
 #define MR_MAX_MSIX_REG_ARRAY                   16
+#define MR_CAN_HANDLE_SYNC_CACHE_OFFSET  0X01000000
+
 /*
 * register set for both 1068 and 1078 controllers
 * structure extended for 1078 registers
@@ -1782,6 +1784,7 @@ struct megasas_instance {
  u8 mask_interrupts;
  u8 is_imr;
  bool dev_handle;
+ bool fw_sync_cache_support;
 };
 struct MR_LD_VF_MAP {
  u32 size;
diff --git a/drivers/scsi/megaraid/megaraid_sas_base.c b/drivers/scsi/megaraid/megaraid_sas_base.c
index c0cf669..d1c06e0 100644
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@ -1610,11 +1610,8 @@ megasas_queue_command(struct Scsi_Host *shost, struct scsi_cmnd *scmd)
   goto out_done;
  }
 
- /*
-  * FW takes care of flush cache on its own for Virtual Disk.
-  * No need to send it down for VD. For JBOD send SYNCHRONIZE_CACHE to FW.
-  */
- if ((scmd->cmnd[0] == SYNCHRONIZE_CACHE) && MEGASAS_IS_LOGICAL(scmd)) {
+ if ((scmd->cmnd[0] == SYNCHRONIZE_CACHE) && MEGASAS_IS_LOGICAL(scmd) &&
+  (!instance->fw_sync_cache_support)) {
   scmd->result = DID_OK << 16;
   goto out_done;
  }
diff --git a/drivers/scsi/megaraid/megaraid_sas_fusion.c b/drivers/scsi/megaraid/megaraid_sas_fusion.c
index e919ce5..907fcbe 100644
--- a/drivers/scsi/megaraid/megaraid_sas_fusion.c
+++ b/drivers/scsi/megaraid/megaraid_sas_fusion.c
@@ -607,6 +607,7 @@ megasas_ioc_init_fusion(struct megasas_instance *instance)
  int i;
  struct megasas_header *frame_hdr;
  const char *sys_info;
+ u32 scratch_pad_2;
 
  fusion = instance->ctrl_context;
 
@@ -618,6 +619,14 @@ megasas_ioc_init_fusion(struct megasas_instance *instance)
   goto fail_get_cmd;
  }
 
+ scratch_pad_2 = readl
+  (&instance->reg_set->outbound_scratch_pad_2);
+
+ instance->fw_sync_cache_support = (scratch_pad_2 &
+  MR_CAN_HANDLE_SYNC_CACHE_OFFSET) ? 1 : 0;
+ dev_info(&instance->pdev->dev, "FW supports sync cache\t: %s\n",
+   instance->fw_sync_cache_support ? "Yes" : "No");
+
  IOCInitMessage =
    dma_alloc_coherent(&instance->pdev->dev,
         sizeof(struct MPI2_IOC_INIT_REQUEST),
-- 
1.7.1