From ed1404c2302929a6f7f7000e3ad8729b3711e6e3 Mon Sep 17 00:00:00 2001
From: Andrea Arcangeli <aarcange@redhat.com>
Date: Wed, 4 Nov 2015 21:56:26 +0100
Subject: [x86] mm: consolidate VM_FAULT_RETRY handling

Message-id: <1446674187-10981-3-git-send-email-aarcange@redhat.com>
Patchwork-id: 126222
O-Subject: [RHEL7.2 PATCH 2/3] x86: mm: consolidate VM_FAULT_RETRY handling
Bugzilla: 1277226
Z-Bugzilla: 1281427
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Andrew Jones <drjones@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>

From: Linus Torvalds <torvalds@linux-foundation.org>

The VM_FAULT_RETRY handling was confusing and incorrect for the case of
returning to kernel mode.  We need to handle the exception table fixup
if we return to kernel mode due to a fatal signal - it will basically
look to the kernel user mode access like the access failed due to the VM
going away from udner it.  Which is correct - the process is dying - and
avoids the whole "repeat endless kernel page faults" case.

Handling the VM_FAULT_RETRY early and in just one place also simplifies
the mmap_sem handling, since once we've taken care of VM_FAULT_RETRY we
know that we can just drop the lock.  The remaining accounting and
possible error handling is thread-local and does not need the mmap_sem.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 58cf1a9..8e82e30 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -997,7 +997,7 @@ __do_page_fault(struct pt_regs *regs, unsigned long error_code)
  struct task_struct *tsk;
  unsigned long address;
  struct mm_struct *mm;
- int fault;
+ int fault, major = 0;
  unsigned int flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_KILLABLE;
 
  tsk = current;
@@ -1175,48 +1175,50 @@ good_area:
   * the fault:
   */
  fault = handle_mm_fault(mm, vma, address, flags);
+ major |= fault & VM_FAULT_MAJOR;
 
  /*
-  * If we need to retry but a fatal signal is pending, handle the
-  * signal first. We do not need to release the mmap_sem because it
-  * would already be released in __lock_page_or_retry in mm/filemap.c.
+  * If we need to retry the mmap_sem has already been released,
+  * and if there is a fatal signal pending there is no guarantee
+  * that we made any progress. Handle this case first.
   */
- if (unlikely((fault & VM_FAULT_RETRY) && fatal_signal_pending(current)))
+ if (unlikely(fault & VM_FAULT_RETRY)) {
+  /* Retry at most once */
+  if (flags & FAULT_FLAG_ALLOW_RETRY) {
+   flags &= ~FAULT_FLAG_ALLOW_RETRY;
+   flags |= FAULT_FLAG_TRIED;
+   if (!fatal_signal_pending(tsk))
+    goto retry;
+  }
+
+  /* User mode? Just return to handle the fatal exception */
+  if (fault & FAULT_FLAG_USER)
+   return;
+
+  /* Not returning to user mode? Handle exceptions or die: */
+  no_context(regs, error_code, address, SIGBUS, BUS_ADRERR);
   return;
+ }
 
+ up_read(&mm->mmap_sem);
  if (unlikely(fault & VM_FAULT_ERROR)) {
-  up_read(&mm->mmap_sem);
   mm_fault_error(regs, error_code, address, fault);
   return;
  }
 
  /*
-  * Major/minor page fault accounting is only done on the
-  * initial attempt. If we go through a retry, it is extremely
-  * likely that the page will be found in page cache at that point.
+  * Major/minor page fault accounting. If any of the events
+  * returned VM_FAULT_MAJOR, we account it as a major fault.
   */
- if (flags & FAULT_FLAG_ALLOW_RETRY) {
-  if (fault & VM_FAULT_MAJOR) {
-   tsk->maj_flt++;
-   perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS_MAJ, 1,
-          regs, address);
-  } else {
-   tsk->min_flt++;
-   perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS_MIN, 1,
-          regs, address);
-  }
-  if (fault & VM_FAULT_RETRY) {
-   /* Clear FAULT_FLAG_ALLOW_RETRY to avoid any risk
-    * of starvation. */
-   flags &= ~FAULT_FLAG_ALLOW_RETRY;
-   flags |= FAULT_FLAG_TRIED;
-   goto retry;
-  }
+ if (major) {
+  tsk->maj_flt++;
+  perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS_MAJ, 1, regs, address);
+ } else {
+  tsk->min_flt++;
+  perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS_MIN, 1, regs, address);
  }
 
  check_v8086_mode(regs, address, tsk);
-
- up_read(&mm->mmap_sem);
 }
 
 dotraplinkage void __kprobes
-- 
1.7.1