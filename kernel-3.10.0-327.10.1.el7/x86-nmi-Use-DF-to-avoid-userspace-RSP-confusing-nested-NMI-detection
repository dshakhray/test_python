From 8a37e82f28de021fa0d43c9d7c94c76af2039f1e Mon Sep 17 00:00:00 2001
From: Mateusz Guzik <mguzik@redhat.com>
Date: Wed, 11 Nov 2015 18:43:59 +0100
Subject: [x86] nmi: Use DF to avoid userspace RSP confusing nested NMI detection

Message-id: <1447267441-24584-5-git-send-email-mguzik@redhat.com>
Patchwork-id: 126574
O-Subject: [RHEL7 PATCH 4/6] x86/nmi/64: Use DF to avoid userspace RSP confusing nested NMI detection
Bugzilla: 1259583
Z-Bugzilla: 1259582
CVE: CVE-2015-5157
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1259583
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=10092756
CVE: CVE-2015-5157
Tested: by me

Upstream from 3.12 branch:
commit 864c198bbd4e091577602ad42016ccc835af3b93
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Jul 15 10:29:38 2015 -0700

    x86/nmi/64: Use DF to avoid userspace RSP confusing nested NMI detection

    commit 810bc075f78ff2c221536eb3008eac6a492dba2d upstream.

    We have a tricky bug in the nested NMI code: if we see RSP
    pointing to the NMI stack on NMI entry from kernel mode, we
    assume that we are executing a nested NMI.

    This isn't quite true.  A malicious userspace program can point
    RSP at the NMI stack, issue SYSCALL, and arrange for an NMI to
    happen while RSP is still pointing at the NMI stack.

    Fix it with a sneaky trick.  Set DF in the region of code that
    the RSP check is intended to detect.  IRET will clear DF
    atomically.

    ( Note: other than paravirt, there's little need for all this
      complexity. We could check RIP instead of RSP. )

    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

Signed-off-by: Mateusz Guzik <mguzik@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/arch/x86/kernel/entry_64.S b/arch/x86/kernel/entry_64.S
index 5ac51e8..3f6f1cd 100644
--- a/arch/x86/kernel/entry_64.S
+++ b/arch/x86/kernel/entry_64.S
@@ -1640,10 +1640,25 @@ ENTRY(nmi)
  /*
   * Now test if the previous stack was an NMI stack.  This covers
   * the case where we interrupt an outer NMI after it clears
-  * "NMI executing" but before IRET.
+  * "NMI executing" but before IRET.  We need to be careful, though:
+  * there is one case in which RSP could point to the NMI stack
+  * despite there being no NMI active: naughty userspace controls
+  * RSP at the very beginning of the SYSCALL targets.  We can
+  * pull a fast one on naughty userspace, though: we program
+  * SYSCALL to mask DF, so userspace cannot cause DF to be set
+  * if it controls the kernel's RSP.  We set DF before we clear
+  * "NMI executing".
   */
  lea 6*8(%rsp), %rdx
  test_in_nmi rdx, 4*8(%rsp), nested_nmi, first_nmi
+
+ /* Ah, it is within the NMI stack. */
+
+ testb $(X86_EFLAGS_DF >> 8), (3*8 + 1)(%rsp)
+ jz first_nmi /* RSP was user controlled. */
+
+ /* This is a nested NMI. */
+
  CFI_REMEMBER_STATE
 
 nested_nmi:
@@ -1775,8 +1790,16 @@ nmi_restore:
  /* Pop the extra iret frame at once */
  RESTORE_ALL 6*8
 
- /* Clear "NMI executing". */
- movq $0, 5*8(%rsp)
+ /*
+  * Clear "NMI executing".  Set DF first so that we can easily
+  * distinguish the remaining code between here and IRET from
+  * the SYSCALL entry and exit paths.  On a native kernel, we
+  * could just inspect RIP, but, on paravirt kernels,
+  * INTERRUPT_RETURN can translate into a jump into a
+  * hypercall page.
+  */
+ std
+ movq $0, 5*8(%rsp)  /* clear "NMI executing" */
 
  /*
   * INTERRUPT_RETURN reads the "iret" frame and exits the NMI
-- 
1.7.1