From 0637fcf4c5153732972ea6988ff07b9caf134c84 Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Mon, 18 Jan 2016 10:53:31 +0100
Subject: [security] keys: Fix keyring ref leak in join_session_keyring()

Message-id: <20160118105331.3667.20997.stgit@warthog.procyon.org.uk>
Patchwork-id: 5281
O-Subject: [kernel team] [RHEL7 EMBARGOED PATCH] KEYS: Fix keyring ref leak in join_session_keyring()
Bugzilla: 1298036
Z-Bugzilla: 1298931
CVE: CVE-2016-0728
RH-Acked-by: Jarod Wilson <jarod@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Petr  Matousek <pmatouse@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

This fixes CVE-2016-0728.

If a thread is asked to join as a session keyring the keyring that's already
set as its session, we leak a keyring reference.

This can be tested with the following program:

 #include <stddef.h>
 #include <stdio.h>
 #include <sys/types.h>
 #include <keyutils.h>

 int main(int argc, const char *argv[])
 {
  int i = 0;
  key_serial_t serial;

  serial = keyctl(KEYCTL_JOIN_SESSION_KEYRING,
    "leaked-keyring");
  if (serial < 0) {
   perror("keyctl");
   return -1;
  }

  if (keyctl(KEYCTL_SETPERM, serial,
      KEY_POS_ALL | KEY_USR_ALL) < 0) {
   perror("keyctl");
   return -1;
  }

  for (i = 0; i < 100; i++) {
   serial = keyctl(KEYCTL_JOIN_SESSION_KEYRING,
     "leaked-keyring");
   if (serial < 0) {
    perror("keyctl");
    return -1;
   }
  }

  return 0;
 }

If, after the program has run, there something like the following line in
/proc/keys:

3f3d898f I--Q---   100 perm 3f3f0000     0     0 keyring   leaked-keyring: empty

with a usage count of 100 * the number of times the program has been run,
then the kernel is malfunctioning.  If leaked-keyring has zero usages or
has been garbage collected, then the problem is fixed.

Reported-by: Yevgeny Pats <yevgeny@perception-point.io>
Signed-off-by: David Howells <dhowells@redhat.com>
RH-bugzilla: 1298036
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/security/keys/process_keys.c b/security/keys/process_keys.c
index 0cf8a13..4e56371 100644
--- a/security/keys/process_keys.c
+++ b/security/keys/process_keys.c
@@ -793,6 +793,7 @@ long join_session_keyring(const char *name)
   ret = PTR_ERR(keyring);
   goto error2;
  } else if (keyring == new->session_keyring) {
+  key_put(keyring);
   ret = 0;
   goto error2;
  }
-- 
1.7.1