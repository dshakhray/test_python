From 40b30b9b920997a923621592528705243be5446d Mon Sep 17 00:00:00 2001
From: Mateusz Guzik <mguzik@redhat.com>
Date: Wed, 11 Nov 2015 18:43:58 +0100
Subject: [x86] nmi: Reorder nested NMI checks

Message-id: <1447267441-24584-4-git-send-email-mguzik@redhat.com>
Patchwork-id: 126573
O-Subject: [RHEL7 PATCH 3/6] x86/nmi/64: Reorder nested NMI checks
Bugzilla: 1259583
Z-Bugzilla: 1259582
CVE: CVE-2015-5157
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1259583
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=10092756
CVE: CVE-2015-5157
Tested: by me

Upstream from 3.12 branch:
commit 10c99c9766cda45d7ff6cfba80d459f054308816
Author: Andy Lutomirski <luto@kernel.org>
Date:   Wed Jul 15 10:29:37 2015 -0700

    x86/nmi/64: Reorder nested NMI checks

    commit a27507ca2d796cfa8d907de31ad730359c8a6d06 upstream.

    Check the repeat_nmi .. end_repeat_nmi special case first.  The
    next patch will rework the RSP check and, as a side effect, the
    RSP check will no longer detect repeat_nmi .. end_repeat_nmi, so
    we'll need this ordering of the checks.

    Note: this is more subtle than it appears.  The check for
    repeat_nmi .. end_repeat_nmi jumps straight out of the NMI code
    instead of adjusting the "iret" frame to force a repeat.  This
    is necessary, because the code between repeat_nmi and
    end_repeat_nmi sets "NMI executing" and then writes to the
    "iret" frame itself.  If a nested NMI comes in and modifies the
    "iret" frame while repeat_nmi is also modifying it, we'll end up
    with garbage.  The old code got this right, as does the new
    code, but the new code is a bit more explicit.

    If we were to move the check right after the "NMI executing"
    check, then we'd get it wrong and have random crashes.

    ( Because the "NMI executing" check would jump to the code that would
      modify the "iret" frame without checking if the interrupted NMI was
      currently modifying it. )

    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

Signed-off-by: Mateusz Guzik <mguzik@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/arch/x86/kernel/entry_64.S b/arch/x86/kernel/entry_64.S
index 0da69ff..5ac51e8 100644
--- a/arch/x86/kernel/entry_64.S
+++ b/arch/x86/kernel/entry_64.S
@@ -1614,7 +1614,23 @@ ENTRY(nmi)
  /*
   * Determine whether we're a nested NMI.
   *
-  * First check "NMI executing".  If it's set, then we're nested.
+  * If we interrupted kernel code between repeat_nmi and
+  * end_repeat_nmi, then we are a nested NMI.  We must not
+  * modify the "iret" frame because it's being written by
+  * the outer NMI.  That's okay; the outer NMI handler is
+  * about to about to call do_nmi anyway, so we can just
+  * resume the outer NMI.
+  */
+ movq $repeat_nmi, %rdx
+ cmpq 8(%rsp), %rdx
+ ja 1f
+ movq $end_repeat_nmi, %rdx
+ cmpq 8(%rsp), %rdx
+ ja nested_nmi_out
+1:
+
+ /*
+  * Now check "NMI executing".  If it's set, then we're nested.
   * This will not detect if we interrupted an outer NMI just
   * before IRET.
   */
@@ -1632,21 +1648,6 @@ ENTRY(nmi)
 
 nested_nmi:
  /*
-  * If we interrupted an NMI that is between repeat_nmi and
-  * end_repeat_nmi, then we must not modify the "iret" frame
-  * because it's being written by the outer NMI.  That's okay;
-  * the outer NMI handler is about to call do_nmi anyway,
-  * so we can just resume the outer NMI.
-  */
- movq $repeat_nmi, %rdx
- cmpq 8(%rsp), %rdx
- ja 1f
- movq $end_repeat_nmi, %rdx
- cmpq 8(%rsp), %rdx
- ja nested_nmi_out
-
-1:
- /*
   * Modify the "iret" frame to point to repeat_nmi, forcing another
   * iteration of NMI handling.
   */
-- 
1.7.1