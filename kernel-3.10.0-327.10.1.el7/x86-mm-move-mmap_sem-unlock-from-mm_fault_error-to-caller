From 8e9c00902c48d3886edbf29599929ac4120201fa Mon Sep 17 00:00:00 2001
From: Andrea Arcangeli <aarcange@redhat.com>
Date: Wed, 4 Nov 2015 21:56:25 +0100
Subject: [x86] mm: move mmap_sem unlock from mm_fault_error() to caller

Message-id: <1446674187-10981-2-git-send-email-aarcange@redhat.com>
Patchwork-id: 126224
O-Subject: [RHEL7.2 PATCH 1/3] x86: mm: move mmap_sem unlock from mm_fault_error() to caller
Bugzilla: 1277226
Z-Bugzilla: 1281427
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Andrew Jones <drjones@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>

From: Linus Torvalds <torvalds@linux-foundation.org>

This replaces four copies in various stages of mm_fault_error() handling
with just a single one.  It will also allow for more natural placement
of the unlocking after some further cleanup.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
Signed-off-by: Alexander Gordeev <agordeev@redhat.com>

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index a49d5a0..58cf1a9 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -815,11 +815,8 @@ do_sigbus(struct pt_regs *regs, unsigned long error_code, unsigned long address,
    unsigned int fault)
 {
  struct task_struct *tsk = current;
- struct mm_struct *mm = tsk->mm;
  int code = BUS_ADRERR;
 
- up_read(&mm->mmap_sem);
-
  /* Kernel mode? Handle exceptions or die: */
  if (!(error_code & PF_USER)) {
   no_context(regs, error_code, address, SIGBUS, BUS_ADRERR);
@@ -850,7 +847,6 @@ mm_fault_error(struct pt_regs *regs, unsigned long error_code,
         unsigned long address, unsigned int fault)
 {
  if (fatal_signal_pending(current) && !(error_code & PF_USER)) {
-  up_read(&current->mm->mmap_sem);
   no_context(regs, error_code, address, 0, 0);
   return;
  }
@@ -858,14 +854,11 @@ mm_fault_error(struct pt_regs *regs, unsigned long error_code,
  if (fault & VM_FAULT_OOM) {
   /* Kernel mode? Handle exceptions or die: */
   if (!(error_code & PF_USER)) {
-   up_read(&current->mm->mmap_sem);
    no_context(regs, error_code, address,
        SIGSEGV, SEGV_MAPERR);
    return;
   }
 
-  up_read(&current->mm->mmap_sem);
-
   /*
    * We ran out of memory, call the OOM killer, and return the
    * userspace (which will retry the fault, or kill us if we got
@@ -1192,6 +1185,7 @@ good_area:
   return;
 
  if (unlikely(fault & VM_FAULT_ERROR)) {
+  up_read(&mm->mmap_sem);
   mm_fault_error(regs, error_code, address, fault);
   return;
  }
-- 
1.7.1