From 2cf1a866ef3af037d6051dfb6ed32e82042a6de6 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:22:28 -0400
Subject: [fs] ceph: fix freeing inode vs removing session caps race
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-42-git-send-email-sweil@redhat.com>
Patchwork-id: 89578
O-Subject: [PATCH 041/303] ceph: fix freeing inode vs removing session caps race
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Yan, Zheng" <zheng.z.yan@intel.com>

remove_session_caps() uses iterate_session_caps() to remove caps,
but iterate_session_caps() skips inodes that are being deleted.
So session->s_nr_caps can be non-zero after iterate_session_caps()
return.

We can fix the issue by waiting until deletions are complete.
__wait_on_freeing_inode() is designed for the job, but it is not
exported, so we use lookup inode function to access it.

Signed-off-by: Yan, Zheng <zheng.z.yan@intel.com>
(cherry picked from commit 6f60f889470aecf747610279545c054a99aadca3)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/inode.c b/fs/ceph/inode.c
index 2f5edff..98b6e50 100644
--- a/fs/ceph/inode.c
+++ b/fs/ceph/inode.c
@@ -61,6 +61,14 @@ struct inode *ceph_get_inode(struct super_block *sb, struct ceph_vino vino)
  return inode;
 }
 
+struct inode *ceph_lookup_inode(struct super_block *sb, struct ceph_vino vino)
+{
+ struct inode *inode;
+ ino_t t = ceph_vino_to_ino(vino);
+ inode = ilookup5_nowait(sb, t, ceph_ino_compare, &vino);
+ return inode;
+}
+
 /*
  * get/constuct snapdir inode for a given directory
  */
diff --git a/fs/ceph/mds_client.c b/fs/ceph/mds_client.c
index ddff072..603786b 100644
--- a/fs/ceph/mds_client.c
+++ b/fs/ceph/mds_client.c
@@ -1031,6 +1031,37 @@ static void remove_session_caps(struct ceph_mds_session *session)
 {
  dout("remove_session_caps on %p\n", session);
  iterate_session_caps(session, remove_session_caps_cb, NULL);
+
+ spin_lock(&session->s_cap_lock);
+ if (session->s_nr_caps > 0) {
+  struct super_block *sb = session->s_mdsc->fsc->sb;
+  struct inode *inode;
+  struct ceph_cap *cap, *prev = NULL;
+  struct ceph_vino vino;
+  /*
+   * iterate_session_caps() skips inodes that are being
+   * deleted, we need to wait until deletions are complete.
+   * __wait_on_freeing_inode() is designed for the job,
+   * but it is not exported, so use lookup inode function
+   * to access it.
+   */
+  while (!list_empty(&session->s_caps)) {
+   cap = list_entry(session->s_caps.next,
+      struct ceph_cap, session_caps);
+   if (cap == prev)
+    break;
+   prev = cap;
+   vino = cap->ci->i_vino;
+   spin_unlock(&session->s_cap_lock);
+
+   inode = ceph_lookup_inode(sb, vino);
+   iput(inode);
+
+   spin_lock(&session->s_cap_lock);
+  }
+ }
+ spin_unlock(&session->s_cap_lock);
+
  BUG_ON(session->s_nr_caps > 0);
  BUG_ON(!list_empty(&session->s_cap_flushing));
  cleanup_cap_releases(session);
diff --git a/fs/ceph/super.h b/fs/ceph/super.h
index cbded57..afcd62a 100644
--- a/fs/ceph/super.h
+++ b/fs/ceph/super.h
@@ -677,6 +677,8 @@ extern void ceph_destroy_inode(struct inode *inode);
 
 extern struct inode *ceph_get_inode(struct super_block *sb,
         struct ceph_vino vino);
+extern struct inode *ceph_lookup_inode(struct super_block *sb,
+           struct ceph_vino vino);
 extern struct inode *ceph_get_snapdir(struct inode *parent);
 extern int ceph_fill_file_size(struct inode *inode, int issued,
           u32 truncate_seq, u64 truncate_size, u64 size);
-- 
1.7.1