From d5025db664a7af6e5e07a4123512a1eadd51226d Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 12:28:48 -0400
Subject: [acpi] bind: Pass struct acpi_device pointer to acpi_bind_one()

Message-id: <1411129776-21656-14-git-send-email-prarit@redhat.com>
Patchwork-id: 96377
O-Subject: [RHEL7.1 PATCH BZ 1141846 13/61] ACPI / bind: Pass struct acpi_device pointer to acpi_bind_one()
Bugzilla: 1141846
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit 24dee1fc99fd6d38fc859d7f6dda1dab21493bef
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 29 16:27:43 2013 +0100

    ACPI / bind: Pass struct acpi_device pointer to acpi_bind_one()

    There is no reason to pass an ACPI handle to acpi_bind_one() instead
    of a struct acpi_device pointer to the target device object, so
    modify that function to take a struct acpi_device pointer as its
    second argument and update all code depending on it accordingly.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Lan Tianyu <tianyu.lan@intel.com> # for USB/ACPI

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Dean Nelson <dnelson@redhat.com>
Cc: Stefan Assmann <sassmann@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/acpi_memhotplug.c b/drivers/acpi/acpi_memhotplug.c
index 383cd80..b67be85 100644
--- a/drivers/acpi/acpi_memhotplug.c
+++ b/drivers/acpi/acpi_memhotplug.c
@@ -180,14 +180,14 @@ static unsigned long acpi_meminfo_end_pfn(struct acpi_memory_info *info)
 
 static int acpi_bind_memblk(struct memory_block *mem, void *arg)
 {
- return acpi_bind_one(&mem->dev, (acpi_handle)arg);
+ return acpi_bind_one(&mem->dev, arg);
 }
 
 static int acpi_bind_memory_blocks(struct acpi_memory_info *info,
-       acpi_handle handle)
+       struct acpi_device *adev)
 {
  return walk_memory_range(acpi_meminfo_start_pfn(info),
-     acpi_meminfo_end_pfn(info), (void *)handle,
+     acpi_meminfo_end_pfn(info), adev,
      acpi_bind_memblk);
 }
 
@@ -197,8 +197,7 @@ static int acpi_unbind_memblk(struct memory_block *mem, void *arg)
  return 0;
 }
 
-static void acpi_unbind_memory_blocks(struct acpi_memory_info *info,
-          acpi_handle handle)
+static void acpi_unbind_memory_blocks(struct acpi_memory_info *info)
 {
  walk_memory_range(acpi_meminfo_start_pfn(info),
      acpi_meminfo_end_pfn(info), NULL, acpi_unbind_memblk);
@@ -242,9 +241,9 @@ static int acpi_memory_enable_device(struct acpi_memory_device *mem_device)
   if (result && result != -EEXIST)
    continue;
 
-  result = acpi_bind_memory_blocks(info, handle);
+  result = acpi_bind_memory_blocks(info, mem_device->device);
   if (result) {
-   acpi_unbind_memory_blocks(info, handle);
+   acpi_unbind_memory_blocks(info);
    return -ENODEV;
   }
 
@@ -285,7 +284,7 @@ static void acpi_memory_remove_memory(struct acpi_memory_device *mem_device)
   if (nid == NUMA_NO_NODE)
    nid = memory_add_physaddr_to_nid(info->start_addr);
 
-  acpi_unbind_memory_blocks(info, handle);
+  acpi_unbind_memory_blocks(info);
   remove_memory(nid, info->start_addr, info->length);
   list_del(&info->list);
   kfree(info);
diff --git a/drivers/acpi/acpi_processor.c b/drivers/acpi/acpi_processor.c
index 7c5c312..79f2fe8 100644
--- a/drivers/acpi/acpi_processor.c
+++ b/drivers/acpi/acpi_processor.c
@@ -400,7 +400,7 @@ static int acpi_processor_add(struct acpi_device *device,
   goto err;
  }
 
- result = acpi_bind_one(dev, pr->handle);
+ result = acpi_bind_one(dev, device);
  if (result)
   goto err;
 
diff --git a/drivers/acpi/glue.c b/drivers/acpi/glue.c
index 67d95f3..2147a1c 100644
--- a/drivers/acpi/glue.c
+++ b/drivers/acpi/glue.c
@@ -172,9 +172,8 @@ static void acpi_physnode_link_name(char *buf, unsigned int node_id)
   strcpy(buf, PHYSICAL_NODE_STRING);
 }
 
-int acpi_bind_one(struct device *dev, acpi_handle handle)
+int acpi_bind_one(struct device *dev, struct acpi_device *acpi_dev)
 {
- struct acpi_device *acpi_dev = NULL;
  struct acpi_device_physical_node *physical_node, *pn;
  char physical_node_name[PHYSICAL_NODE_NAME_SIZE];
  struct list_head *physnode_list;
@@ -182,14 +181,12 @@ int acpi_bind_one(struct device *dev, acpi_handle handle)
  int retval = -EINVAL;
 
  if (ACPI_COMPANION(dev)) {
-  if (handle) {
+  if (acpi_dev) {
    dev_warn(dev, "ACPI companion already set\n");
    return -EINVAL;
   } else {
    acpi_dev = ACPI_COMPANION(dev);
   }
- } else {
-  acpi_bus_get_device(handle, &acpi_dev);
  }
  if (!acpi_dev)
   return -EINVAL;
@@ -310,7 +307,7 @@ static int acpi_platform_notify(struct device *dev)
    ret = -ENODEV;
    goto out;
   }
-  ret = acpi_bind_one(dev, adev->handle);
+  ret = acpi_bind_one(dev, adev);
   if (ret)
    goto out;
  }
diff --git a/drivers/acpi/internal.h b/drivers/acpi/internal.h
index f315637..58ca519 100644
--- a/drivers/acpi/internal.h
+++ b/drivers/acpi/internal.h
@@ -86,7 +86,7 @@ void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
         int type, unsigned long long sta);
 void acpi_device_add_finalize(struct acpi_device *device);
 void acpi_free_pnp_ids(struct acpi_device_pnp *pnp);
-int acpi_bind_one(struct device *dev, acpi_handle handle);
+int acpi_bind_one(struct device *dev, struct acpi_device *adev);
 int acpi_unbind_one(struct device *dev);
 bool acpi_device_is_present(struct acpi_device *adev);
 
-- 
1.7.1