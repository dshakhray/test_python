From 4273e19f971ff1e13be72b9a9713f4864c1388ae Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:05:05 -0400
Subject: [powerpc] xmon: Fix printing of set of CPUs in xmon

Message-id: <1410545655-205645-77-git-send-email-dzickus@redhat.com>
Patchwork-id: 94486
O-Subject: [RHEL7 PATCH 076/626] powerpc/xmon: Fix printing of set of CPUs in xmon
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit fd3bb91287b600d8b389c159e8dd96391410087b
Author: Paul Mackerras <paulus@samba.org>
Date:   Tue Sep 3 20:16:23 2013 +1000

    powerpc/xmon: Fix printing of set of CPUs in xmon

    Commit 24ec2125f3 ("powerpc/xmon: Use cpumask iterator to avoid warning")
    replaced a loop from 0 to NR_CPUS-1 with a for_each_possible_cpu() loop,
    which means that if the last possible cpu is in xmon, we print the
    wrong value for the end of the range.  For example, if 4 cpus are
    possible, NR_CPUS is 128, and all cpus are in xmon, we print "0-7f"
    rather than "0-3".  The code also assumes that the set of possible
    cpus is contiguous, which may not necessarily be true.

    This fixes the code to check explicitly for contiguity, and to print
    the ending value correctly.

    Signed-off-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/xmon/xmon.c b/arch/powerpc/xmon/xmon.c
index 7696091..b59f44f 100644
--- a/arch/powerpc/xmon/xmon.c
+++ b/arch/powerpc/xmon/xmon.c
@@ -980,27 +980,27 @@ static void bootcmds(void)
 static int cpu_cmd(void)
 {
 #ifdef CONFIG_SMP
- unsigned long cpu;
+ unsigned long cpu, first_cpu, last_cpu;
  int timeout;
- int count;
 
  if (!scanhex(&cpu)) {
   /* print cpus waiting or in xmon */
   printf("cpus stopped:");
-  count = 0;
+  last_cpu = first_cpu = NR_CPUS;
   for_each_possible_cpu(cpu) {
    if (cpumask_test_cpu(cpu, &cpus_in_xmon)) {
-    if (count == 0)
-     printf(" %x", cpu);
-    ++count;
-   } else {
-    if (count > 1)
-     printf("-%x", cpu - 1);
-    count = 0;
+    if (cpu == last_cpu + 1) {
+     last_cpu = cpu;
+    } else {
+     if (last_cpu != first_cpu)
+      printf("-%lx", last_cpu);
+     last_cpu = first_cpu = cpu;
+     printf(" %lx", cpu);
+    }
    }
   }
-  if (count > 1)
-   printf("-%x", NR_CPUS - 1);
+  if (last_cpu != first_cpu)
+   printf("-%lx", last_cpu);
   printf("\n");
   return 0;
  }
-- 
1.7.1