From 8cdbdb098564e170dd41b63b99ae35f7fc6355cf Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:28:05 -0400
Subject: [tools] perf/symbols: Limit max callchain using max_stack on DWARF unwinding too

Message-id: <1408462094-14194-317-git-send-email-jolsa@redhat.com>
Patchwork-id: 88303
O-Subject: [PATCH RHEL7.1 BZ1131394 316/325] perf symbols: Limit max callchain using max_stack on DWARF unwinding too
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 37676af15c8d5a9689c9d1220d2a27d510cbe238
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Wed Nov 13 17:40:36 2013 -0300

description
===========
It was affecting only frame-pointer (fp) based callchain processing.

Usage example:

  perf top --call-graph dwarf,1024 --max-stack 2

Works for any tool that does callchain resolving and provides a
--max-stack option.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index 0393912..84cdb07 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -1368,7 +1368,7 @@ int machine__resolve_callchain(struct machine *machine,
 
  return unwind__get_entries(unwind_entry, &callchain_cursor, machine,
        thread, evsel->attr.sample_regs_user,
-       sample);
+       sample, max_stack);
 
 }
 
diff --git a/tools/perf/util/unwind.c b/tools/perf/util/unwind.c
index 5390d0b..0efd539 100644
--- a/tools/perf/util/unwind.c
+++ b/tools/perf/util/unwind.c
@@ -559,7 +559,7 @@ static unw_accessors_t accessors = {
 };
 
 static int get_entries(struct unwind_info *ui, unwind_entry_cb_t cb,
-         void *arg)
+         void *arg, int max_stack)
 {
  unw_addr_space_t addr_space;
  unw_cursor_t c;
@@ -575,7 +575,7 @@ static int get_entries(struct unwind_info *ui, unwind_entry_cb_t cb,
  if (ret)
   display_error(ret);
 
- while (!ret && (unw_step(&c) > 0)) {
+ while (!ret && (unw_step(&c) > 0) && max_stack--) {
   unw_word_t ip;
 
   unw_get_reg(&c, UNW_REG_IP, &ip);
@@ -588,7 +588,8 @@ static int get_entries(struct unwind_info *ui, unwind_entry_cb_t cb,
 
 int unwind__get_entries(unwind_entry_cb_t cb, void *arg,
    struct machine *machine, struct thread *thread,
-   u64 sample_uregs, struct perf_sample *data)
+   u64 sample_uregs, struct perf_sample *data,
+   int max_stack)
 {
  unw_word_t ip;
  struct unwind_info ui = {
@@ -610,5 +611,5 @@ int unwind__get_entries(unwind_entry_cb_t cb, void *arg,
  if (ret)
   return -ENOMEM;
 
- return get_entries(&ui, cb, arg);
+ return get_entries(&ui, cb, arg, max_stack);
 }
diff --git a/tools/perf/util/unwind.h b/tools/perf/util/unwind.h
index ec0c71a..d5966f4 100644
--- a/tools/perf/util/unwind.h
+++ b/tools/perf/util/unwind.h
@@ -18,7 +18,7 @@ int unwind__get_entries(unwind_entry_cb_t cb, void *arg,
    struct machine *machine,
    struct thread *thread,
    u64 sample_uregs,
-   struct perf_sample *data);
+   struct perf_sample *data, int max_stack);
 int unwind__arch_reg_id(int regnum);
 #else
 static inline int
@@ -27,7 +27,8 @@ unwind__get_entries(unwind_entry_cb_t cb __maybe_unused,
       struct machine *machine __maybe_unused,
       struct thread *thread __maybe_unused,
       u64 sample_uregs __maybe_unused,
-      struct perf_sample *data __maybe_unused)
+      struct perf_sample *data __maybe_unused,
+      int max_stack __maybe_unused)
 {
  return 0;
 }
-- 
1.7.1