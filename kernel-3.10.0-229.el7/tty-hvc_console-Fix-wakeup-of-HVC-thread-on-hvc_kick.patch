From 05f5522a5ea15f19dd7a5fcda54a2bdf133c3a20 Mon Sep 17 00:00:00 2001
From: Steve Best <sbest@redhat.com>
Date: Wed, 27 Aug 2014 20:12:56 -0400
Subject: [tty] hvc_console: Fix wakeup of HVC thread on hvc_kick()

Message-id: <20140827201255.3410.50232.sendpatchset@ibm-p7r2-01.lab.bos.redhat.com>
Patchwork-id: 89284
O-Subject: [PATCH RHEL7.1 BZ1123045 2/2] tty/hvc/hvc_console: Fix wakeup of HVC thread on hvc_kick()
Bugzilla: 1123045
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

RHBZ#:
------
https://bugzilla.redhat.com/show_bug.cgi?id=1123045

Description:
------------
Some backends call hvc_kick() to wakeup the HVC thread from its
slumber upon incoming characters. This however doesn't work
properly because it uses msleep_interruptible() which is mostly
immune to wake_up_process(). It will basically go back to sleep
until the timeout is expired (only signals can really wake it).

Replace it with a simple shedule_timeout_interruptible() instead,
which may wakeup earlier every now and then but we really don't
care in this case.

Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

RHEL Version Found:
-------------------
7.0

Upstream Status:
----------------
http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=15a2743193b099f82657ca315dd2e1091be6c1d3

----------------
Steve Best

Proposed Patch:
---------------

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/tty/hvc/hvc_console.c b/drivers/tty/hvc/hvc_console.c
index 660f9f5..f13bed9 100644
--- a/drivers/tty/hvc/hvc_console.c
+++ b/drivers/tty/hvc/hvc_console.c
@@ -756,10 +756,17 @@ static int khvcd(void *unused)
    if (poll_mask == 0)
     schedule();
    else {
+    unsigned long j_timeout;
+
     if (timeout < MAX_TIMEOUT)
      timeout += (timeout >> 6) + 1;
 
-    msleep_interruptible(timeout);
+    /*
+     * We don't use msleep_interruptible otherwise
+     * "kick" will fail to wake us up
+     */
+    j_timeout = msecs_to_jiffies(timeout) + 1;
+    schedule_timeout_interruptible(j_timeout);
    }
   }
   __set_current_state(TASK_RUNNING);
-- 
1.7.1