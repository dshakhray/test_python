From bbe8fa62b256a1b05a10ebc8058de50a83396a2c Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:22 -0400
Subject: [block] add queue flag for disabling SG merging

Message-id: <1402670238-13916-95-git-send-email-snitzer@redhat.com>
Patchwork-id: 83905
O-Subject: [RHEL7.1 PATCH 094/150] block: add queue flag for disabling SG merging
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

RHEL7 doesn't have upstream immutable biovecs so needed to hand-patch
the blk-merge.c changes.  Also needed to hand-patch the blkdev.h
change since rhel7.git commit 94d90f ("sg_io: introduce unpriv_sgio
queue flag") unfortunately never went upstream.

Upstream commit 05f1dd5315217398fc8d122bdee80f96a9f21274
Author: Jens Axboe <axboe@fb.com>
Date:   Thu May 29 09:53:32 2014 -0600

    block: add queue flag for disabling SG merging

    If devices are not SG starved, we waste a lot of time potentially
    collapsing SG segments. Enough that 1.5% of the CPU time goes
    to this, at only 400K IOPS. Add a queue flag, QUEUE_FLAG_NO_SG_MERGE,
    which just returns the number of vectors in a bio instead of looping
    over all segments and checking for collapsible ones.

    Add a BLK_MQ_F_SG_MERGE flag so that drivers can opt-in on the sg
    merging, if they so desire.

    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-merge.c b/block/blk-merge.c
index 1ffc589..c61d3bd 100644
--- a/block/blk-merge.c
+++ b/block/blk-merge.c
@@ -13,7 +13,7 @@ static unsigned int __blk_recalc_rq_segments(struct request_queue *q,
           struct bio *bio)
 {
  struct bio_vec *bv, *bvprv = NULL;
- int cluster, i, high, highprv = 1;
+ int cluster, i, high, highprv = 1, no_sg_merge;
  unsigned int seg_size, nr_phys_segs;
  struct bio *fbio, *bbio;
 
@@ -24,12 +24,21 @@ static unsigned int __blk_recalc_rq_segments(struct request_queue *q,
  cluster = blk_queue_cluster(q);
  seg_size = 0;
  nr_phys_segs = 0;
+ no_sg_merge = test_bit(QUEUE_FLAG_NO_SG_MERGE, &q->queue_flags);
+ high = 0;
  for_each_bio(bio) {
   bio_for_each_segment(bv, bio, i) {
    /*
+    * If SG merging is disabled, each bio vector is
+    * a segment
+    */
+   if (no_sg_merge)
+    goto new_segment;
+
+   /*
     * the trick here is making sure that a high page is
-    * never considered part of another segment, since that
-    * might change with the bounce page.
+    * never considered part of another segment, since
+    * that might change with the bounce page.
     */
    high = page_to_pfn(bv->bv_page) > queue_bounce_pfn(q);
    if (high || highprv)
@@ -75,11 +84,16 @@ void blk_recalc_rq_segments(struct request *rq)
 
 void blk_recount_segments(struct request_queue *q, struct bio *bio)
 {
- struct bio *nxt = bio->bi_next;
+ if (test_bit(QUEUE_FLAG_NO_SG_MERGE, &q->queue_flags))
+  bio->bi_phys_segments = bio->bi_vcnt;
+ else {
+  struct bio *nxt = bio->bi_next;
+
+  bio->bi_next = NULL;
+  bio->bi_phys_segments = __blk_recalc_rq_segments(q, bio);
+  bio->bi_next = nxt;
+ }
 
- bio->bi_next = NULL;
- bio->bi_phys_segments = __blk_recalc_rq_segments(q, bio);
- bio->bi_next = nxt;
  bio->bi_flags |= (1 << BIO_SEG_VALID);
 }
 EXPORT_SYMBOL(blk_recount_segments);
diff --git a/block/blk-mq.c b/block/blk-mq.c
index f27fe44..f98d977 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1829,6 +1829,9 @@ struct request_queue *blk_mq_init_queue(struct blk_mq_tag_set *set)
  q->mq_ops = set->ops;
  q->queue_flags |= QUEUE_FLAG_MQ_DEFAULT;
 
+ if (!(set->flags & BLK_MQ_F_SG_MERGE))
+  q->queue_flags |= 1 << QUEUE_FLAG_NO_SG_MERGE;
+
  q->sg_reserved_size = INT_MAX;
 
  INIT_WORK(&q->requeue_work, blk_mq_requeue_work);
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 013f9cb..fc1f58c 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -129,6 +129,7 @@ enum {
  BLK_MQ_F_SHOULD_MERGE = 1 << 0,
  BLK_MQ_F_SHOULD_SORT = 1 << 1,
  BLK_MQ_F_TAG_SHARED = 1 << 2,
+ BLK_MQ_F_SG_MERGE = 1 << 3,
 
  BLK_MQ_S_STOPPED = 0,
  BLK_MQ_S_TAG_ACTIVE = 1,
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 7c34678..5b59b1c 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -527,6 +527,7 @@ struct request_queue {
 #define QUEUE_FLAG_DEAD        19 /* queue tear-down finished */
 #define QUEUE_FLAG_INIT_DONE   20 /* queue is initialized */
 #define QUEUE_FLAG_UNPRIV_SGIO 21 /* SG_IO free for unprivileged users */
+#define QUEUE_FLAG_NO_SG_MERGE 22 /* don't attempt to merge SG segments*/
 
 #define QUEUE_FLAG_DEFAULT ((1 << QUEUE_FLAG_IO_STAT) |  \
      (1 << QUEUE_FLAG_STACKABLE) | \
-- 
1.7.1