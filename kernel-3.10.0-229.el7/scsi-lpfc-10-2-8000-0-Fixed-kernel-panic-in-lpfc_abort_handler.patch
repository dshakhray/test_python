From 8cfddd4ca36d1beb69d31a7ea36959de0629d134 Mon Sep 17 00:00:00 2001
From: Rob Evers <revers@redhat.com>
Date: Mon, 23 Jun 2014 21:41:55 -0400
Subject: [scsi] lpfc 10.2.8000.0: Fixed kernel panic in lpfc_abort_handler

Message-id: <1403559726-20488-14-git-send-email-revers@redhat.com>
Patchwork-id: 84432
O-Subject: [RHEL7.1 e-stor PATCH 13/24] scsi: lpfc 10.2.8000.0: Fixed kernel panic in lpfc_abort_handler
Bugzilla: 1088574
RH-Acked-by: Ewan Milne <emilne@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Dick Kennedy <rkennedy@Emulex.Com>

Submitted by James Smart James.Smart@emulex.com

Fixed kernel panic in lpfc_abort_handler

Signed-off-by: James Smart james.smart@emulex.com

http://marc.info/?l=linux-scsi&m=139663391821858&w=2
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/lpfc/lpfc_init.c b/drivers/scsi/lpfc/lpfc_init.c
index f8ec830..3a86fbf 100644
--- a/drivers/scsi/lpfc/lpfc_init.c
+++ b/drivers/scsi/lpfc/lpfc_init.c
@@ -4666,7 +4666,10 @@ lpfc_reset_hba(struct lpfc_hba *phba)
   phba->link_state = LPFC_HBA_ERROR;
   return;
  }
- lpfc_offline_prep(phba, LPFC_MBX_WAIT);
+ if (phba->sli.sli_flag & LPFC_SLI_ACTIVE)
+  lpfc_offline_prep(phba, LPFC_MBX_WAIT);
+ else
+  lpfc_offline_prep(phba, LPFC_MBX_NO_WAIT);
  lpfc_offline(phba);
  lpfc_sli_brdrestart(phba);
  lpfc_online(phba);
diff --git a/drivers/scsi/lpfc/lpfc_scsi.c b/drivers/scsi/lpfc/lpfc_scsi.c
index 4adeb21..576a060 100644
--- a/drivers/scsi/lpfc/lpfc_scsi.c
+++ b/drivers/scsi/lpfc/lpfc_scsi.c
@@ -4834,6 +4834,14 @@ lpfc_abort_handler(struct scsi_cmnd *cmnd)
 
  BUG_ON(iocb->context1 != lpfc_cmd);
 
+ /* abort issued in recovery is still in progress */
+ if (iocb->iocb_flag & LPFC_DRIVER_ABORTED) {
+  lpfc_printf_vlog(vport, KERN_WARNING, LOG_FCP,
+    "3389 SCSI Layer I/O Abort Request is pending\n");
+  spin_unlock_irqrestore(&phba->hbalock, flags);
+  goto wait_for_cmpl;
+ }
+
  abtsiocb = __lpfc_sli_get_iocbq(phba);
  if (abtsiocb == NULL) {
   ret = FAILED;
@@ -4886,12 +4894,16 @@ lpfc_abort_handler(struct scsi_cmnd *cmnd)
   lpfc_sli_handle_fast_ring_event(phba,
    &phba->sli.ring[LPFC_FCP_RING], HA_R0RE_REQ);
 
+wait_for_cmpl:
  lpfc_cmd->waitq = &waitq;
  /* Wait for abort to complete */
  wait_event_timeout(waitq,
      (lpfc_cmd->pCmd != cmnd),
       msecs_to_jiffies(2*vport->cfg_devloss_tmo*1000));
+
+ spin_lock_irqsave(shost->host_lock, flags);
  lpfc_cmd->waitq = NULL;
+ spin_unlock_irqrestore(shost->host_lock, flags);
 
  if (lpfc_cmd->pCmd == cmnd) {
   ret = FAILED;
-- 
1.7.1