From 3ef27ec874e2de3db2dd7c9995ad587f89743b64 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:52 -0400
Subject: [cpufreq] Use sizeof(*ptr) convetion for computing sizes

Message-id: <1409235879-1283-139-git-send-email-prarit@redhat.com>
Patchwork-id: 89521
O-Subject: [RHEL7.1 PATCH BZ 1134639 138/185] cpufreq: Use sizeof(*ptr) convetion for computing sizes
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit d5b73cd870e2b049ef566aec2791dbf5fd26a7ec
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Aug 6 22:53:06 2013 +0530

    cpufreq: Use sizeof(*ptr) convetion for computing sizes

    Chapter 14 of Documentation/CodingStyle says:

    The preferred form for passing a size of a struct is the following:

     p = kmalloc(sizeof(*p), ...);

    The alternative form where struct name is spelled out hurts
    readability and introduces an opportunity for a bug when the pointer
    variable type is changed but the corresponding sizeof that is passed
    to a memory allocator is not.

    This wasn't followed consistently in drivers/cpufreq, let's make it
    more consistent by always following this rule.

    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/acpi-cpufreq.c b/drivers/cpufreq/acpi-cpufreq.c
index 33de325..d5eaedb 100644
--- a/drivers/cpufreq/acpi-cpufreq.c
+++ b/drivers/cpufreq/acpi-cpufreq.c
@@ -664,7 +664,7 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
   return blacklisted;
 #endif
 
- data = kzalloc(sizeof(struct acpi_cpufreq_data), GFP_KERNEL);
+ data = kzalloc(sizeof(*data), GFP_KERNEL);
  if (!data)
   return -ENOMEM;
 
@@ -754,7 +754,7 @@ static int acpi_cpufreq_cpu_init(struct cpufreq_policy *policy)
   goto err_unreg;
  }
 
- data->freq_table = kmalloc(sizeof(struct cpufreq_frequency_table) *
+ data->freq_table = kmalloc(sizeof(*data->freq_table) *
       (perf->state_count+1), GFP_KERNEL);
  if (!data->freq_table) {
   result = -ENOMEM;
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index d5a8d01..ddd48a1 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -921,7 +921,7 @@ static void cpufreq_init_policy(struct cpufreq_policy *policy)
  struct cpufreq_policy new_policy;
  int ret = 0;
 
- memcpy(&new_policy, policy, sizeof(struct cpufreq_policy));
+ memcpy(&new_policy, policy, sizeof(*policy));
 
  /* Update governor of new_policy to the governor used before hotplug */
  gov = __find_governor(per_cpu(cpufreq_cpu_governor, policy->cpu));
@@ -2048,7 +2048,7 @@ int cpufreq_get_policy(struct cpufreq_policy *policy, unsigned int cpu)
  if (!cpu_policy)
   return -EINVAL;
 
- memcpy(policy, cpu_policy, sizeof(struct cpufreq_policy));
+ memcpy(policy, cpu_policy, sizeof(*policy));
 
  cpufreq_cpu_put(cpu_policy);
  return 0;
@@ -2068,8 +2068,7 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
  pr_debug("setting new policy for CPU %u: %u - %u kHz\n",
    new_policy->cpu, new_policy->min, new_policy->max);
 
- memcpy(&new_policy->cpuinfo, &policy->cpuinfo,
-    sizeof(struct cpufreq_cpuinfo));
+ memcpy(&new_policy->cpuinfo, &policy->cpuinfo, sizeof(policy->cpuinfo));
 
  if (new_policy->min > policy->max || new_policy->max < policy->min)
   return -EINVAL;
@@ -2173,7 +2172,7 @@ int cpufreq_update_policy(unsigned int cpu)
  down_write(&policy->rwsem);
 
  pr_debug("updating policy for CPU %u\n", cpu);
- memcpy(&new_policy, policy, sizeof(struct cpufreq_policy));
+ memcpy(&new_policy, policy, sizeof(*policy));
  new_policy.min = policy->user_policy.min;
  new_policy.max = policy->user_policy.max;
  new_policy.policy = policy->user_policy.policy;
diff --git a/drivers/cpufreq/cpufreq_conservative.c b/drivers/cpufreq/cpufreq_conservative.c
index 57ada02..25a70d0 100644
--- a/drivers/cpufreq/cpufreq_conservative.c
+++ b/drivers/cpufreq/cpufreq_conservative.c
@@ -321,7 +321,7 @@ static int cs_init(struct dbs_data *dbs_data)
 {
  struct cs_dbs_tuners *tuners;
 
- tuners = kzalloc(sizeof(struct cs_dbs_tuners), GFP_KERNEL);
+ tuners = kzalloc(sizeof(*tuners), GFP_KERNEL);
  if (!tuners) {
   pr_err("%s: kzalloc failed\n", __func__);
   return -ENOMEM;
diff --git a/drivers/cpufreq/cpufreq_ondemand.c b/drivers/cpufreq/cpufreq_ondemand.c
index d204bb8..18d4091 100644
--- a/drivers/cpufreq/cpufreq_ondemand.c
+++ b/drivers/cpufreq/cpufreq_ondemand.c
@@ -478,7 +478,7 @@ static int od_init(struct dbs_data *dbs_data)
  u64 idle_time;
  int cpu;
 
- tuners = kzalloc(sizeof(struct od_dbs_tuners), GFP_KERNEL);
+ tuners = kzalloc(sizeof(*tuners), GFP_KERNEL);
  if (!tuners) {
   pr_err("%s: kzalloc failed\n", __func__);
   return -ENOMEM;
diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index d5be180..11a2786 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -195,7 +195,7 @@ static int __cpufreq_stats_create_table(struct cpufreq_policy *policy)
 
  if (per_cpu(cpufreq_stats_table, cpu))
   return -EBUSY;
- stat = kzalloc(sizeof(struct cpufreq_stats), GFP_KERNEL);
+ stat = kzalloc(sizeof(*stat), GFP_KERNEL);
  if ((stat) == NULL)
   return -ENOMEM;
 
diff --git a/drivers/cpufreq/powernow-k8.c b/drivers/cpufreq/powernow-k8.c
index b1b4d64..770a9e1 100644
--- a/drivers/cpufreq/powernow-k8.c
+++ b/drivers/cpufreq/powernow-k8.c
@@ -623,7 +623,7 @@ static int fill_powernow_table(struct powernow_k8_data *data,
  if (check_pst_table(data, pst, maxvid))
   return -EINVAL;
 
- powernow_table = kmalloc((sizeof(struct cpufreq_frequency_table)
+ powernow_table = kmalloc((sizeof(*powernow_table)
   * (data->numps + 1)), GFP_KERNEL);
  if (!powernow_table) {
   printk(KERN_ERR PFX "powernow_table memory alloc failure\n");
@@ -793,7 +793,7 @@ static int powernow_k8_cpu_init_acpi(struct powernow_k8_data *data)
  }
 
  /* fill in data->powernow_table */
- powernow_table = kmalloc((sizeof(struct cpufreq_frequency_table)
+ powernow_table = kmalloc((sizeof(*powernow_table)
   * (data->acpi_data.state_count + 1)), GFP_KERNEL);
  if (!powernow_table) {
   pr_debug("powernow_table memory alloc failure\n");
@@ -1082,7 +1082,7 @@ static int powernowk8_cpu_init(struct cpufreq_policy *pol)
  if (rc)
   return -ENODEV;
 
- data = kzalloc(sizeof(struct powernow_k8_data), GFP_KERNEL);
+ data = kzalloc(sizeof(*data), GFP_KERNEL);
  if (!data) {
   printk(KERN_ERR PFX "unable to alloc powernow_k8_data");
   return -ENOMEM;
-- 
1.7.1