From 1105b8b3f9ceaf1bb847c4c871b042a8f7255d97 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:22 -0400
Subject: [block] blk-mq: allow drivers to hook into I_O completion

Message-id: <1402670238-13916-35-git-send-email-snitzer@redhat.com>
Patchwork-id: 83784
O-Subject: [RHEL7.1 PATCH 034/150] blk-mq: allow drivers to hook into I_O completion
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 63151a449ebaef062ffac5b302206565ff5ef62e
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Apr 16 09:44:52 2014 +0200

    blk-mq: allow drivers to hook into I/O completion

    Split out the bottom half of blk_mq_end_io so that drivers can perform
    work when they know a request has been completed, but before it has been
    freed.  This also obsoletes blk_mq_end_io_partial as drivers can now
    pass any value to blk_update_request directly.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index b59a8d0..86d66e0 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -294,20 +294,24 @@ void blk_mq_clone_flush_request(struct request *flush_rq,
   hctx->cmd_size);
 }
 
-bool blk_mq_end_io_partial(struct request *rq, int error, unsigned int nr_bytes)
+inline void __blk_mq_end_io(struct request *rq, int error)
 {
- if (blk_update_request(rq, error, blk_rq_bytes(rq)))
-  return true;
-
  blk_account_io_done(rq);
 
  if (rq->end_io)
   rq->end_io(rq, error);
  else
   blk_mq_free_request(rq);
- return false;
 }
-EXPORT_SYMBOL(blk_mq_end_io_partial);
+EXPORT_SYMBOL(__blk_mq_end_io);
+
+void blk_mq_end_io(struct request *rq, int error)
+{
+ if (blk_update_request(rq, error, blk_rq_bytes(rq)))
+  BUG();
+ __blk_mq_end_io(rq, error);
+}
+EXPORT_SYMBOL(blk_mq_end_io);
 
 static void __blk_mq_complete_request_remote(void *data)
 {
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 46463e5..7588526 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -149,13 +149,8 @@ struct blk_mq_hw_ctx *blk_mq_map_queue(struct request_queue *, const int ctx_ind
 struct blk_mq_hw_ctx *blk_mq_alloc_single_hw_queue(struct blk_mq_tag_set *, unsigned int);
 void blk_mq_free_single_hw_queue(struct blk_mq_hw_ctx *, unsigned int);
 
-bool blk_mq_end_io_partial(struct request *rq, int error,
-  unsigned int nr_bytes);
-static inline void blk_mq_end_io(struct request *rq, int error)
-{
- bool done = !blk_mq_end_io_partial(rq, error, blk_rq_bytes(rq));
- BUG_ON(!done);
-}
+void blk_mq_end_io(struct request *rq, int error);
+void __blk_mq_end_io(struct request *rq, int error);
 
 void blk_mq_complete_request(struct request *rq);
 
-- 
1.7.1