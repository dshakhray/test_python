From 128494a460e281d396f9338c2675a4e9f15d17e6 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Sun, 14 Sep 2014 19:49:52 -0400
Subject: [net] Clarification of CHECKSUM_UNNECESSARY

Message-id: <1410724197-31885-3-git-send-email-fwestpha@redhat.com>
Patchwork-id: 94697
O-Subject: [PATCH 49/57 RHEL7.1 net v2] net: Clarification of CHECKSUM_UNNECESSARY
Bugzilla: 1131999
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>

BZ: 1131999
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7951596

Conflicts due to earlier kabi adjustments,
flags3 member got moved.

Also adds single rh pad bid for csum_level, this was suggested
by Jiri Benc:  while upstream can always increase csum_level
size, we can only do so if no other flags would change position.

commit 77cffe23c1f88835f6bd7b47bfa0c060c2969828
Author: Tom Herbert <therbert@google.com>
Date:   Wed Aug 27 21:26:46 2014 -0700

    net: Clarification of CHECKSUM_UNNECESSARY

    This patch:
     - Clarifies the specific requirements of devices returning
       CHECKSUM_UNNECESSARY (comments in skbuff.h).
     - Adds csum_level field to skbuff. This is used to express how
       many checksums are covered by CHECKSUM_UNNECESSARY (stores n - 1).
       This replaces the overloading of skb->encapsulation, that field is
       is now only used to indicate inner headers are valid.
     - Change __skb_checksum_validate_needed to "consume" each checksum
       as indicated by csum_level as layers of the the packet are parsed.
     - Remove skb_pop_rcv_encapsulation, no longer needed in the new
       csum_level model.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index ac87803..2bd00aa 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -1143,8 +1143,6 @@ static int vxlan_udp_encap_recv(struct sock *sk, struct sk_buff *skb)
  if (!vs)
   goto drop;
 
- skb_pop_rcv_encapsulation(skb);
-
  vs->rcv(vs, skb, vxh->vx_vni);
  return 0;
 
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index ad817a2..27a38fd 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -46,11 +46,29 @@
  *
  *   The hardware you're dealing with doesn't calculate the full checksum
  *   (as in CHECKSUM_COMPLETE), but it does parse headers and verify checksums
- *   for specific protocols e.g. TCP/UDP/SCTP, then, for such packets it will
- *   set CHECKSUM_UNNECESSARY if their checksums are okay. skb->csum is still
- *   undefined in this case though. It is a bad option, but, unfortunately,
- *   nowadays most vendors do this. Apparently with the secret goal to sell
- *   you new devices, when you will add new protocol to your host, f.e. IPv6 8)
+ *   for specific protocols. For such packets it will set CHECKSUM_UNNECESSARY
+ *   if their checksums are okay. skb->csum is still undefined in this case
+ *   though. It is a bad option, but, unfortunately, nowadays most vendors do
+ *   this. Apparently with the secret goal to sell you new devices, when you
+ *   will add new protocol to your host, f.e. IPv6 8)
+ *
+ *   CHECKSUM_UNNECESSARY is applicable to following protocols:
+ *     TCP: IPv6 and IPv4.
+ *     UDP: IPv4 and IPv6. A device may apply CHECKSUM_UNNECESSARY to a
+ *       zero UDP checksum for either IPv4 or IPv6, the networking stack
+ *       may perform further validation in this case.
+ *     GRE: only if the checksum is present in the header.
+ *     SCTP: indicates the CRC in SCTP header has been validated.
+ *
+ *   skb->csum_level indicates the number of consecutive checksums found in
+ *   the packet minus one that have been verified as CHECKSUM_UNNECESSARY.
+ *   For instance if a device receives an IPv6->UDP->GRE->IPv4->TCP packet
+ *   and a device is able to verify the checksums for UDP (possibly zero),
+ *   GRE (checksum flag is set), and TCP-- skb->csum_level would be set to
+ *   two. If the device were only able to verify the UDP checksum and not
+ *   GRE, either because it doesn't support GRE checksum of because GRE
+ *   checksum is bad, skb->csum_level would be set to zero (TCP checksum is
+ *   not considered in this case).
  *
  * CHECKSUM_COMPLETE:
  *
@@ -111,6 +129,9 @@
 #define CHECKSUM_COMPLETE 2
 #define CHECKSUM_PARTIAL 3
 
+/* Maximum value in skb->csum_level */
+#define SKB_MAX_CSUM_LEVEL 3
+
 #define SKB_DATA_ALIGN(X) ALIGN(X, SMP_CACHE_BYTES)
 #define SKB_WITH_OVERHEAD(X) \
  ((X) - SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
@@ -510,11 +531,7 @@ struct sk_buff {
  __u8   wifi_acked:1;
  __u8   no_fcs:1;
  __u8   head_frag:1;
- /* Encapsulation protocol and NIC drivers should use
-  * this flag to indicate to each other if the skb contains
-  * encapsulated packet or not and maybe use the inner packet
-  * headers if needed
-  */
+ /* Indicates the inner headers are valid in the skbuff. */
  __u8   encapsulation:1;
 #ifndef __GENKSYMS__
  __u8   encap_hdr_csum:1;
@@ -549,7 +566,10 @@ struct sk_buff {
 
 #ifndef __GENKSYMS__
  kmemcheck_bitfield_begin(flags3);
- /* 16 bit hole */
+ kmemcheck_bitfield_begin(flags3);
+ __u8   csum_level:2;
+ __u8   rh_csum_pad:1;
+ /* 13 bit hole */
  kmemcheck_bitfield_end(flags3);
 #endif
  /* RHEL SPECIFIC
@@ -1803,18 +1823,6 @@ static inline int pskb_network_may_pull(struct sk_buff *skb, unsigned int len)
  return pskb_may_pull(skb, skb_network_offset(skb) + len);
 }
 
-static inline void skb_pop_rcv_encapsulation(struct sk_buff *skb)
-{
- /* Only continue with checksum unnecessary if device indicated
-  * it is valid across encapsulation (skb->encapsulation was set).
-  */
- if (skb->ip_summed == CHECKSUM_UNNECESSARY && !skb->encapsulation)
-  skb->ip_summed = CHECKSUM_NONE;
-
- skb->encapsulation = 0;
- skb->csum_valid = 0;
-}
-
 /*
  * CPUs often take a performance hit when accessing unaligned memory
  * locations. The actual performance hit varies, it can be small if the
@@ -2709,6 +2717,27 @@ static inline __sum16 skb_checksum_complete(struct sk_buff *skb)
         0 : __skb_checksum_complete(skb);
 }
 
+static inline void __skb_decr_checksum_unnecessary(struct sk_buff *skb)
+{
+ if (skb->ip_summed == CHECKSUM_UNNECESSARY) {
+  if (skb->csum_level == 0)
+   skb->ip_summed = CHECKSUM_NONE;
+  else
+   skb->csum_level--;
+ }
+}
+
+static inline void __skb_incr_checksum_unnecessary(struct sk_buff *skb)
+{
+ if (skb->ip_summed == CHECKSUM_UNNECESSARY) {
+  if (skb->csum_level < SKB_MAX_CSUM_LEVEL)
+   skb->csum_level++;
+ } else if (skb->ip_summed == CHECKSUM_NONE) {
+  skb->ip_summed = CHECKSUM_UNNECESSARY;
+  skb->csum_level = 0;
+ }
+}
+
 /* Check if we need to perform checksum complete validation.
  *
  * Returns true if checksum complete is needed, false otherwise
@@ -2720,6 +2749,7 @@ static inline bool __skb_checksum_validate_needed(struct sk_buff *skb,
 {
  if (skb_csum_unnecessary(skb) || (zero_okay && !check)) {
   skb->csum_valid = 1;
+  __skb_decr_checksum_unnecessary(skb);
   return false;
  }
 
diff --git a/net/ipv4/gre_demux.c b/net/ipv4/gre_demux.c
index 2ef87d7..e25b80e 100644
--- a/net/ipv4/gre_demux.c
+++ b/net/ipv4/gre_demux.c
@@ -124,7 +124,6 @@ static int parse_gre_header(struct sk_buff *skb, struct tnl_ptk_info *tpi,
    *csum_err = true;
    return -EINVAL;
   }
-  skb_pop_rcv_encapsulation(skb);
   options++;
  }
 
-- 
1.7.1