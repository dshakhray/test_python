From d150f00bee8941020e835622e106b85e7e5edb3e Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:26:05 -0400
Subject: [fs] ceph: include time stamp in every MDS request
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-259-git-send-email-sweil@redhat.com>
Patchwork-id: 89737
O-Subject: [PATCH 258/303] ceph: include time stamp in every MDS request
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Sage Weil <sage@inktank.com>

We recently modified the client/MDS protocol to include a timestamp in the
client request.  This allows ctime updates to follow the client's clock
in most cases, which avoids subtle problems when clocks are out of sync
and timestamps are updated sometimes by the MDS clock (for most requests)
and sometimes by the client clock (for cap writeback).

Signed-off-by: Sage Weil <sage@inktank.com>
(cherry picked from commit b8e69066d8afa8d2670dc697252ff0e5907aafad)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/mds_client.c b/fs/ceph/mds_client.c
index 2b4d093..7b19510 100644
--- a/fs/ceph/mds_client.c
+++ b/fs/ceph/mds_client.c
@@ -1558,6 +1558,8 @@ ceph_mdsc_create_request(struct ceph_mds_client *mdsc, int op, int mode)
  init_completion(&req->r_safe_completion);
  INIT_LIST_HEAD(&req->r_unsafe_item);
 
+ req->r_stamp = CURRENT_TIME;
+
  req->r_op = op;
  req->r_direct_mode = mode;
  return req;
@@ -1783,7 +1785,8 @@ static struct ceph_msg *create_request_message(struct ceph_mds_client *mdsc,
  }
 
  len = sizeof(*head) +
-  pathlen1 + pathlen2 + 2*(1 + sizeof(u32) + sizeof(u64));
+  pathlen1 + pathlen2 + 2*(1 + sizeof(u32) + sizeof(u64)) +
+  sizeof(struct timespec);
 
  /* calculate (max) length for cap releases */
  len += sizeof(struct ceph_mds_request_release) *
@@ -1800,6 +1803,7 @@ static struct ceph_msg *create_request_message(struct ceph_mds_client *mdsc,
   goto out_free2;
  }
 
+ msg->hdr.version = 2;
  msg->hdr.tid = cpu_to_le64(req->r_tid);
 
  head = msg->front.iov_base;
@@ -1836,6 +1840,9 @@ static struct ceph_msg *create_request_message(struct ceph_mds_client *mdsc,
         mds, req->r_old_inode_drop, req->r_old_inode_unless, 0);
  head->num_releases = cpu_to_le16(releases);
 
+ /* time stamp */
+ ceph_encode_copy(&p, &req->r_stamp, sizeof(req->r_stamp));
+
  BUG_ON(p > end);
  msg->front.iov_len = p - msg->front.iov_base;
  msg->hdr.front_len = cpu_to_le32(msg->front.iov_len);
diff --git a/fs/ceph/mds_client.h b/fs/ceph/mds_client.h
index e90cfcc..e00737c 100644
--- a/fs/ceph/mds_client.h
+++ b/fs/ceph/mds_client.h
@@ -194,6 +194,7 @@ struct ceph_mds_request {
  int r_fmode;        /* file mode, if expecting cap */
  kuid_t r_uid;
  kgid_t r_gid;
+ struct timespec r_stamp;
 
  /* for choosing which mds to send this request to */
  int r_direct_mode;
-- 
1.7.1