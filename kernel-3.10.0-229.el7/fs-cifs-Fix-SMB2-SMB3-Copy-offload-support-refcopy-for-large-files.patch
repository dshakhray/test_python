From 6b43a8d84865b0e83cb54037f9dede8dfa33cd56 Mon Sep 17 00:00:00 2001
From: Sachin Prabhu <sprabhu@redhat.com>
Date: Mon, 28 Jul 2014 12:16:26 -0400
Subject: [fs] cifs: Fix SMB2/SMB3 Copy offload support (refcopy) for large files

Message-id: <1406549822-10376-34-git-send-email-sprabhu@redhat.com>
Patchwork-id: 86797
O-Subject: [RHEL7.1 PATCH 33/69] [bz1082049]CIFS: Fix SMB2/SMB3 Copy offload support (refcopy) for large files
Bugzilla: 1082049
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Steve French <smfrench@gmail.com>

This third version of the patch, incorparating feedback from David Disseldorp
extends the ability of copychunk (refcopy) over smb2/smb3 mounts to
handle servers with smaller than usual maximum chunk sizes
and also fixes it to handle files bigger than the maximum chunk sizes

In the future this can be extended further to handle sending
multiple chunk requests in on SMB2 ioctl request which will
further improve performance, but even with one 1MB chunk per
request the speedup on cp is quite large.

Reviewed-by: David Disseldorp <ddiss@samba.org>
Signed-off-by: Steve French <smfrench@gmail.com>
(cherry picked from commit 9bf0c9cd431440a831e60c0a0fd0bc4f0e083e7f)
Signed-off-by: Sachin Prabhu <sprabhu@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/cifs/smb2ops.c b/fs/cifs/smb2ops.c
index ba622d4..dc04b21 100644
--- a/fs/cifs/smb2ops.c
+++ b/fs/cifs/smb2ops.c
@@ -532,7 +532,10 @@ smb2_clone_range(const unsigned int xid,
  int rc;
  unsigned int ret_data_len;
  struct copychunk_ioctl *pcchunk;
- char *retbuf = NULL;
+ struct copychunk_ioctl_rsp *retbuf = NULL;
+ struct cifs_tcon *tcon;
+ int chunks_copied = 0;
+ bool chunk_sizes_updated = false;
 
  pcchunk = kmalloc(sizeof(struct copychunk_ioctl), GFP_KERNEL);
 
@@ -547,27 +550,96 @@ smb2_clone_range(const unsigned int xid,
 
  /* Note: request_res_key sets res_key null only if rc !=0 */
  if (rc)
-  return rc;
+  goto cchunk_out;
 
  /* For now array only one chunk long, will make more flexible later */
  pcchunk->ChunkCount = __constant_cpu_to_le32(1);
  pcchunk->Reserved = 0;
- pcchunk->SourceOffset = cpu_to_le64(src_off);
- pcchunk->TargetOffset = cpu_to_le64(dest_off);
- pcchunk->Length = cpu_to_le32(len);
  pcchunk->Reserved2 = 0;
 
- /* Request that server copy to target from src file identified by key */
- rc = SMB2_ioctl(xid, tlink_tcon(trgtfile->tlink),
-   trgtfile->fid.persistent_fid,
-   trgtfile->fid.volatile_fid, FSCTL_SRV_COPYCHUNK_WRITE,
-   true /* is_fsctl */, (char *)pcchunk,
-   sizeof(struct copychunk_ioctl), &retbuf, &ret_data_len);
+ tcon = tlink_tcon(trgtfile->tlink);
 
- /* BB need to special case rc = EINVAL to alter chunk size */
+ while (len > 0) {
+  pcchunk->SourceOffset = cpu_to_le64(src_off);
+  pcchunk->TargetOffset = cpu_to_le64(dest_off);
+  pcchunk->Length =
+   cpu_to_le32(min_t(u32, len, tcon->max_bytes_chunk));
 
- cifs_dbg(FYI, "rc %d data length out %d\n", rc, ret_data_len);
+  /* Request server copy to target from src identified by key */
+  rc = SMB2_ioctl(xid, tcon, trgtfile->fid.persistent_fid,
+   trgtfile->fid.volatile_fid, FSCTL_SRV_COPYCHUNK_WRITE,
+   true /* is_fsctl */, (char *)pcchunk,
+   sizeof(struct copychunk_ioctl), (char **)&retbuf,
+   &ret_data_len);
+  if (rc == 0) {
+   if (ret_data_len !=
+     sizeof(struct copychunk_ioctl_rsp)) {
+    cifs_dbg(VFS, "invalid cchunk response size\n");
+    rc = -EIO;
+    goto cchunk_out;
+   }
+   if (retbuf->TotalBytesWritten == 0) {
+    cifs_dbg(FYI, "no bytes copied\n");
+    rc = -EIO;
+    goto cchunk_out;
+   }
+   /*
+    * Check if server claimed to write more than we asked
+    */
+   if (le32_to_cpu(retbuf->TotalBytesWritten) >
+       le32_to_cpu(pcchunk->Length)) {
+    cifs_dbg(VFS, "invalid copy chunk response\n");
+    rc = -EIO;
+    goto cchunk_out;
+   }
+   if (le32_to_cpu(retbuf->ChunksWritten) != 1) {
+    cifs_dbg(VFS, "invalid num chunks written\n");
+    rc = -EIO;
+    goto cchunk_out;
+   }
+   chunks_copied++;
+
+   src_off += le32_to_cpu(retbuf->TotalBytesWritten);
+   dest_off += le32_to_cpu(retbuf->TotalBytesWritten);
+   len -= le32_to_cpu(retbuf->TotalBytesWritten);
+
+   cifs_dbg(FYI, "Chunks %d PartialChunk %d Total %d\n",
+    le32_to_cpu(retbuf->ChunksWritten),
+    le32_to_cpu(retbuf->ChunkBytesWritten),
+    le32_to_cpu(retbuf->TotalBytesWritten));
+  } else if (rc == -EINVAL) {
+   if (ret_data_len != sizeof(struct copychunk_ioctl_rsp))
+    goto cchunk_out;
+
+   cifs_dbg(FYI, "MaxChunks %d BytesChunk %d MaxCopy %d\n",
+    le32_to_cpu(retbuf->ChunksWritten),
+    le32_to_cpu(retbuf->ChunkBytesWritten),
+    le32_to_cpu(retbuf->TotalBytesWritten));
+
+   /*
+    * Check if this is the first request using these sizes,
+    * (ie check if copy succeed once with original sizes
+    * and check if the server gave us different sizes after
+    * we already updated max sizes on previous request).
+    * if not then why is the server returning an error now
+    */
+   if ((chunks_copied != 0) || chunk_sizes_updated)
+    goto cchunk_out;
+
+   /* Check that server is not asking us to grow size */
+   if (le32_to_cpu(retbuf->ChunkBytesWritten) <
+     tcon->max_bytes_chunk)
+    tcon->max_bytes_chunk =
+     le32_to_cpu(retbuf->ChunkBytesWritten);
+   else
+    goto cchunk_out; /* server gave us bogus size */
+
+   /* No need to change MaxChunks since already set to 1 */
+   chunk_sizes_updated = true;
+  }
+ }
 
+cchunk_out:
  kfree(pcchunk);
  return rc;
 }
diff --git a/fs/cifs/smb2pdu.c b/fs/cifs/smb2pdu.c
index eec06d4..62be20f 100644
--- a/fs/cifs/smb2pdu.c
+++ b/fs/cifs/smb2pdu.c
@@ -1214,10 +1214,17 @@ SMB2_ioctl(const unsigned int xid, struct cifs_tcon *tcon, u64 persistent_fid,
  rc = SendReceive2(xid, ses, iov, num_iovecs, &resp_buftype, 0);
  rsp = (struct smb2_ioctl_rsp *)iov[0].iov_base;
 
- if (rc != 0) {
+ if ((rc != 0) && (rc != -EINVAL)) {
   if (tcon)
    cifs_stats_fail_inc(tcon, SMB2_IOCTL_HE);
   goto ioctl_exit;
+ } else if (rc == -EINVAL) {
+  if ((opcode != FSCTL_SRV_COPYCHUNK_WRITE) &&
+      (opcode != FSCTL_SRV_COPYCHUNK)) {
+   if (tcon)
+    cifs_stats_fail_inc(tcon, SMB2_IOCTL_HE);
+   goto ioctl_exit;
+  }
  }
 
  /* check if caller wants to look at return data or just return rc */
-- 
1.7.1