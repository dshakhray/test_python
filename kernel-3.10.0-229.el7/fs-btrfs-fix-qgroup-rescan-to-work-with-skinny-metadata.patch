From aab39cdb8ca39686541631e061ad4531eb058f09 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 18:59:53 -0400
Subject: [fs] btrfs: fix qgroup rescan to work with skinny metadata

Message-id: <1407179109-13714-107-git-send-email-sandeen@redhat.com>
Patchwork-id: 87066
O-Subject: [RHEL7.1 PATCH 106/422] Btrfs: fix qgroup rescan to work with skinny metadata
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Josef Bacik <jbacik@fb.com>

commit 3a6d75e846224542151e9ff186cb89df5a6ca2c6
Author: Josef Bacik <jbacik@fb.com>
Date:   Thu Jan 23 16:45:10 2014 -0500

    Btrfs: fix qgroup rescan to work with skinny metadata

    Could have sworn I fixed this before but apparently not.  This makes us pass
    btrfs/022 with skinny metadata enabled.  Thanks,

    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/qgroup.c b/fs/btrfs/qgroup.c
index d22e0a1..472302a 100644
--- a/fs/btrfs/qgroup.c
+++ b/fs/btrfs/qgroup.c
@@ -1897,9 +1897,17 @@ qgroup_rescan_leaf(struct btrfs_fs_info *fs_info, struct btrfs_path *path,
  mutex_unlock(&fs_info->qgroup_rescan_lock);
 
  for (; slot < btrfs_header_nritems(scratch_leaf); ++slot) {
+  u64 num_bytes;
+
   btrfs_item_key_to_cpu(scratch_leaf, &found, slot);
-  if (found.type != BTRFS_EXTENT_ITEM_KEY)
+  if (found.type != BTRFS_EXTENT_ITEM_KEY &&
+      found.type != BTRFS_METADATA_ITEM_KEY)
    continue;
+  if (found.type == BTRFS_METADATA_ITEM_KEY)
+   num_bytes = fs_info->extent_root->leafsize;
+  else
+   num_bytes = found.offset;
+
   ret = btrfs_find_all_roots(trans, fs_info, found.objectid,
         tree_mod_seq_elem.seq, &roots);
   if (ret < 0)
@@ -1944,12 +1952,12 @@ qgroup_rescan_leaf(struct btrfs_fs_info *fs_info, struct btrfs_path *path,
    struct btrfs_qgroup_list *glist;
 
    qg = (struct btrfs_qgroup *)(uintptr_t) unode->aux;
-   qg->rfer += found.offset;
-   qg->rfer_cmpr += found.offset;
+   qg->rfer += num_bytes;
+   qg->rfer_cmpr += num_bytes;
    WARN_ON(qg->tag >= seq);
    if (qg->refcnt - seq == roots->nnodes) {
-    qg->excl += found.offset;
-    qg->excl_cmpr += found.offset;
+    qg->excl += num_bytes;
+    qg->excl_cmpr += num_bytes;
    }
    qgroup_dirty(fs_info, qg);
 
-- 
1.7.1