From 587ab8891008b498eb4607d0342b7283b53a6cc2 Mon Sep 17 00:00:00 2001
From: Nikolay Aleksandrov <nikolay@redhat.com>
Date: Fri, 5 Sep 2014 11:03:44 -0400
Subject: [ethernet] sfc: Rewrite adjustment of PPS event in a clearer way

Message-id: <1409915048-26438-9-git-send-email-nikolay@redhat.com>
Patchwork-id: 91403
O-Subject: [RHEL7.1 PATCH BZ 1110888 08/32] sfc: Rewrite adjustment of PPS event in a clearer way
Bugzilla: 1110888
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ben Hutchings <bhutchings@solarflare.com>

There is substantial latency in generation and handling of PPS events
from the NIC, which we have to correct for before passing a host
timestamp to the PPS subsystem.  We compare clocks with the MC,
giving us two offsets to subtract from the timestamp generated by
pps_get_ts():

(a) Time from the last good sync (where we got host and NIC timestamps
    for nearly the same instant) to the time we called pps_get_ts()
(b) Time from NIC top of second to the last good sync

We currently calculate (a) + (b) in a quite confusing way.
Instead, calculate (a) completely, then add (b) to it.

Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>
Signed-off-by: Shradha Shah <sshah@solarflare.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 92d8f766ecce190dc2aa5d1aa9a5f5381e831641)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/sfc/ptp.c b/drivers/net/ethernet/sfc/ptp.c
index 7d0de50..28275e3 100644
--- a/drivers/net/ethernet/sfc/ptp.c
+++ b/drivers/net/ethernet/sfc/ptp.c
@@ -766,37 +766,36 @@ efx_ptp_process_times(struct efx_nic *efx, MCDI_DECLARE_STRUCT_PTR(synch_buf),
   return -EAGAIN;
  }
 
- /* Convert the NIC time into kernel time. No correction is required-
-  * this time is the output of a firmware process.
-  */
- mc_time = ptp->nic_to_kernel_time(ptp->timeset[last_good].major,
-       ptp->timeset[last_good].minor, 0);
-
- /* Calculate delay from actual PPS to last_time */
- delta = ktime_to_timespec(mc_time);
- delta.tv_nsec +=
-  last_time->ts_real.tv_nsec -
-  (ptp->timeset[last_good].host_start & MC_NANOSECOND_MASK);
-
- /* It is possible that the seconds rolled over between taking
+ /* Calculate delay from last good sync (host time) to last_time.
+  * It is possible that the seconds rolled over between taking
   * the start reading and the last value written by the host.  The
   * timescales are such that a gap of more than one second is never
-  * expected.
+  * expected.  delta is *not* normalised.
   */
  start_sec = ptp->timeset[last_good].host_start >> MC_NANOSECOND_BITS;
  last_sec = last_time->ts_real.tv_sec & MC_SECOND_MASK;
- if (start_sec != last_sec) {
-  if (((start_sec + 1) & MC_SECOND_MASK) != last_sec) {
-   netif_warn(efx, hw, efx->net_dev,
-       "PTP bad synchronisation seconds\n");
-   return -EAGAIN;
-  } else {
-   delta.tv_sec = 1;
-  }
- } else {
-  delta.tv_sec = 0;
+ if (start_sec != last_sec &&
+     ((start_sec + 1) & MC_SECOND_MASK) != last_sec) {
+  netif_warn(efx, hw, efx->net_dev,
+      "PTP bad synchronisation seconds\n");
+  return -EAGAIN;
  }
+ delta.tv_sec = (last_sec - start_sec) & 1;
+ delta.tv_nsec =
+  last_time->ts_real.tv_nsec -
+  (ptp->timeset[last_good].host_start & MC_NANOSECOND_MASK);
+
+ /* Convert the NIC time at last good sync into kernel time.
+  * No correction is required - this time is the output of a
+  * firmware process.
+  */
+ mc_time = ptp->nic_to_kernel_time(ptp->timeset[last_good].major,
+       ptp->timeset[last_good].minor, 0);
+
+ /* Calculate delay from NIC top of second to last_time */
+ delta.tv_nsec += ktime_to_timespec(mc_time).tv_nsec;
 
+ /* Set PPS timestamp to match NIC top of second */
  ptp->host_time_pps = *last_time;
  pps_sub_ts(&ptp->host_time_pps, delta);
 
-- 
1.7.1