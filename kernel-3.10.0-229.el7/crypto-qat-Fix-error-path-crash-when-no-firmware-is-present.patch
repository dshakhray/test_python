From 9756e3648c7c301cf209761711ee3f1ff17e6319 Mon Sep 17 00:00:00 2001
From: Nikolay Aleksandrov <nikolay@redhat.com>
Date: Mon, 1 Sep 2014 13:33:07 -0400
Subject: [crypto] qat: Fix error path crash when no firmware is present

Message-id: <1409578401-26943-16-git-send-email-nikolay@redhat.com>
Patchwork-id: 90091
O-Subject: [RHEL7.1 PATCH BZ 1091130 15/29] crypto: qat - Fix error path crash when no firmware is present
Bugzilla: 1091130
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Herbert Xu <herbert.xu@redhat.com>

From: Tadeusz Struk <tadeusz.struk@intel.com>

Firmware loader crashes when no firmware file is present.

Reviewed-by: Bruce Allan <bruce.w.allan@intel.com>
Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 8f312d64b5eea5c1f807265c1010969a0cb4b876)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/crypto/qat/qat_common/adf_common_drv.h b/drivers/crypto/qat/qat_common/adf_common_drv.h
index 3cea9fa..5e8f9d4 100644
--- a/drivers/crypto/qat/qat_common/adf_common_drv.h
+++ b/drivers/crypto/qat/qat_common/adf_common_drv.h
@@ -186,7 +186,7 @@ int qat_hal_init_nn(struct icp_qat_fw_loader_handle *handle,
 int qat_hal_wr_lm(struct icp_qat_fw_loader_handle *handle,
     unsigned char ae, unsigned short lm_addr, unsigned int value);
 int qat_uclo_wr_all_uimage(struct icp_qat_fw_loader_handle *handle);
-int qat_uclo_del_uof_obj(struct icp_qat_fw_loader_handle *handle);
+void qat_uclo_del_uof_obj(struct icp_qat_fw_loader_handle *handle);
 int qat_uclo_map_uof_obj(struct icp_qat_fw_loader_handle *handle,
     void *addr_ptr, int mem_size);
 #endif
diff --git a/drivers/crypto/qat/qat_common/qat_uclo.c b/drivers/crypto/qat/qat_common/qat_uclo.c
index 20b6b42..dd4e0d3 100644
--- a/drivers/crypto/qat/qat_common/qat_uclo.c
+++ b/drivers/crypto/qat/qat_common/qat_uclo.c
@@ -959,8 +959,6 @@ static int qat_uclo_parse_uof_obj(struct icp_qat_fw_loader_handle *handle)
  obj_handle->encap_uof_obj.beg_uof = obj_handle->obj_hdr->file_buff;
  obj_handle->encap_uof_obj.obj_hdr = (struct icp_qat_uof_objhdr *)
           obj_handle->obj_hdr->file_buff;
- obj_handle->encap_uof_obj.chunk_hdr = (struct icp_qat_uof_chunkhdr *)
-    (obj_handle->obj_hdr->file_buff + sizeof(struct icp_qat_uof_objhdr));
  obj_handle->uword_in_bytes = 6;
  obj_handle->prod_type = ICP_QAT_AC_C_CPU_TYPE;
  obj_handle->prod_rev = PID_MAJOR_REV |
@@ -1040,23 +1038,25 @@ out_objbuf_err:
  return -ENOMEM;
 }
 
-int qat_uclo_del_uof_obj(struct icp_qat_fw_loader_handle *handle)
+void qat_uclo_del_uof_obj(struct icp_qat_fw_loader_handle *handle)
 {
  struct icp_qat_uclo_objhandle *obj_handle = handle->obj_handle;
  int a;
 
+ if (!obj_handle)
+  return;
+
  kfree(obj_handle->uword_buf);
  for (a = 0; a < obj_handle->uimage_num; a++)
   kfree(obj_handle->ae_uimage[a].page);
 
  for (a = 0; a <= (int)handle->hal_handle->ae_max_num; a++)
   qat_uclo_free_ae_data(&obj_handle->ae_data[a]);
- kfree(obj_handle->obj_hdr);
 
+ kfree(obj_handle->obj_hdr);
  kfree(obj_handle->obj_buf);
  kfree(obj_handle);
  handle->obj_handle = NULL;
- return 0;
 }
 
 static void qat_uclo_fill_uwords(struct icp_qat_uclo_objhandle *obj_handle,
-- 
1.7.1