From c621111ecd35279bbcc772b3d5fec3d8c621d013 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:02:19 -0400
Subject: [fs] btrfs: don't flush all delalloc inodes when we doesn't get s_umount lock

Message-id: <1407179109-13714-253-git-send-email-sandeen@redhat.com>
Patchwork-id: 87222
O-Subject: [RHEL7.1 PATCH 252/422] Btrfs: don't flush all delalloc inodes when we doesn't get s_umount lock
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Miao Xie <miaox@cn.fujitsu.com>

commit 6c255e67cec1c38a0569c7f823eba63f9449ccf8
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Thu Mar 6 13:55:01 2014 +0800

    Btrfs: don't flush all delalloc inodes when we doesn't get s_umount lock

    We needn't flush all delalloc inodes when we doesn't get s_umount lock,
    or we would make the tasks wait for a long time.

    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ctree.h b/fs/btrfs/ctree.h
index 374bb2f..5a80098 100644
--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -3740,7 +3740,8 @@ int btrfs_truncate_inode_items(struct btrfs_trans_handle *trans,
           u32 min_type);
 
 int btrfs_start_delalloc_inodes(struct btrfs_root *root, int delay_iput);
-int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, int delay_iput);
+int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, int delay_iput,
+          int nr);
 int btrfs_set_extent_delalloc(struct inode *inode, u64 start, u64 end,
          struct extent_state **cached_state);
 int btrfs_create_subvol_root(struct btrfs_trans_handle *trans,
diff --git a/fs/btrfs/dev-replace.c b/fs/btrfs/dev-replace.c
index f48f0ee..4b75adb 100644
--- a/fs/btrfs/dev-replace.c
+++ b/fs/btrfs/dev-replace.c
@@ -491,7 +491,7 @@ static int btrfs_dev_replace_finishing(struct btrfs_fs_info *fs_info,
   * flush all outstanding I/O and inode extent mappings before the
   * copy operation is declared as being finished
   */
- ret = btrfs_start_delalloc_roots(root->fs_info, 0);
+ ret = btrfs_start_delalloc_roots(root->fs_info, 0, -1);
  if (ret) {
   mutex_unlock(&dev_replace->lock_finishing_cancel_unmount);
   return ret;
diff --git a/fs/btrfs/extent-tree.c b/fs/btrfs/extent-tree.c
index 5c0c545..c6b6a6e 100644
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -3971,7 +3971,7 @@ static int can_overcommit(struct btrfs_root *root,
 }
 
 static void btrfs_writeback_inodes_sb_nr(struct btrfs_root *root,
-      unsigned long nr_pages)
+      unsigned long nr_pages, int nr_items)
 {
  struct super_block *sb = root->fs_info->sb;
 
@@ -3986,9 +3986,9 @@ static void btrfs_writeback_inodes_sb_nr(struct btrfs_root *root,
    * the filesystem is readonly(all dirty pages are written to
    * the disk).
    */
-  btrfs_start_delalloc_roots(root->fs_info, 0);
+  btrfs_start_delalloc_roots(root->fs_info, 0, nr_items);
   if (!current->journal_info)
-   btrfs_wait_ordered_roots(root->fs_info, -1);
+   btrfs_wait_ordered_roots(root->fs_info, nr_items);
  }
 }
 
@@ -4045,7 +4045,7 @@ static void shrink_delalloc(struct btrfs_root *root, u64 to_reclaim, u64 orig,
  while (delalloc_bytes && loops < 3) {
   max_reclaim = min(delalloc_bytes, to_reclaim);
   nr_pages = max_reclaim >> PAGE_CACHE_SHIFT;
-  btrfs_writeback_inodes_sb_nr(root, nr_pages);
+  btrfs_writeback_inodes_sb_nr(root, nr_pages, items);
   /*
    * We need to wait for the async pages to actually start before
    * we do anything.
diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index 47af0ab..d542c9b 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -8452,7 +8452,8 @@ void btrfs_wait_and_free_delalloc_work(struct btrfs_delalloc_work *work)
  * some fairly slow code that needs optimization. This walks the list
  * of all the inodes with pending delalloc and forces them to disk.
  */
-static int __start_delalloc_inodes(struct btrfs_root *root, int delay_iput)
+static int __start_delalloc_inodes(struct btrfs_root *root, int delay_iput,
+       int nr)
 {
  struct btrfs_inode *binode;
  struct inode *inode;
@@ -8486,12 +8487,14 @@ static int __start_delalloc_inodes(struct btrfs_root *root, int delay_iput)
    else
     iput(inode);
    ret = -ENOMEM;
-   goto out;
+   break;
   }
   list_add_tail(&work->list, &works);
   btrfs_queue_work(root->fs_info->flush_workers,
      &work->work);
-
+  ret++;
+  if (nr != -1 && ret >= nr)
+   break;
   cond_resched();
   spin_lock(&root->delalloc_lock);
  }
@@ -8501,12 +8504,6 @@ static int __start_delalloc_inodes(struct btrfs_root *root, int delay_iput)
   list_del_init(&work->list);
   btrfs_wait_and_free_delalloc_work(work);
  }
- return 0;
-out:
- list_for_each_entry_safe(work, next, &works, list) {
-  list_del_init(&work->list);
-  btrfs_wait_and_free_delalloc_work(work);
- }
 
  if (!list_empty_careful(&splice)) {
   spin_lock(&root->delalloc_lock);
@@ -8523,7 +8520,9 @@ int btrfs_start_delalloc_inodes(struct btrfs_root *root, int delay_iput)
  if (test_bit(BTRFS_FS_STATE_ERROR, &root->fs_info->fs_state))
   return -EROFS;
 
- ret = __start_delalloc_inodes(root, delay_iput);
+ ret = __start_delalloc_inodes(root, delay_iput, -1);
+ if (ret > 0)
+  ret = 0;
  /*
   * the filemap_flush will queue IO into the worker threads, but
   * we have to make sure the IO is actually started and that
@@ -8540,7 +8539,8 @@ int btrfs_start_delalloc_inodes(struct btrfs_root *root, int delay_iput)
  return ret;
 }
 
-int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, int delay_iput)
+int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, int delay_iput,
+          int nr)
 {
  struct btrfs_root *root;
  struct list_head splice;
@@ -8553,7 +8553,7 @@ int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, int delay_iput)
 
  spin_lock(&fs_info->delalloc_root_lock);
  list_splice_init(&fs_info->delalloc_roots, &splice);
- while (!list_empty(&splice)) {
+ while (!list_empty(&splice) && nr) {
   root = list_first_entry(&splice, struct btrfs_root,
      delalloc_root);
   root = btrfs_grab_fs_root(root);
@@ -8562,15 +8562,20 @@ int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, int delay_iput)
           &fs_info->delalloc_roots);
   spin_unlock(&fs_info->delalloc_root_lock);
 
-  ret = __start_delalloc_inodes(root, delay_iput);
+  ret = __start_delalloc_inodes(root, delay_iput, nr);
   btrfs_put_fs_root(root);
-  if (ret)
+  if (ret < 0)
    goto out;
 
+  if (nr != -1) {
+   nr -= ret;
+   WARN_ON(nr < 0);
+  }
   spin_lock(&fs_info->delalloc_root_lock);
  }
  spin_unlock(&fs_info->delalloc_root_lock);
 
+ ret = 0;
  atomic_inc(&fs_info->async_submit_draining);
  while (atomic_read(&fs_info->nr_async_submits) ||
        atomic_read(&fs_info->async_delalloc_pages)) {
@@ -8579,7 +8584,6 @@ int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, int delay_iput)
       atomic_read(&fs_info->async_delalloc_pages) == 0));
  }
  atomic_dec(&fs_info->async_submit_draining);
- return 0;
 out:
  if (!list_empty_careful(&splice)) {
   spin_lock(&fs_info->delalloc_root_lock);
diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index e6b3173..23269e1 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -4871,7 +4871,7 @@ long btrfs_ioctl(struct file *file, unsigned int
  case BTRFS_IOC_SYNC: {
   int ret;
 
-  ret = btrfs_start_delalloc_roots(root->fs_info, 0);
+  ret = btrfs_start_delalloc_roots(root->fs_info, 0, -1);
   if (ret)
    return ret;
   ret = btrfs_sync_fs(file->f_dentry->d_sb, 1);
diff --git a/fs/btrfs/relocation.c b/fs/btrfs/relocation.c
index 07b3b36..def428a 100644
--- a/fs/btrfs/relocation.c
+++ b/fs/btrfs/relocation.c
@@ -4248,7 +4248,7 @@ int btrfs_relocate_block_group(struct btrfs_root *extent_root, u64 group_start)
  btrfs_info(extent_root->fs_info, "relocating block group %llu flags %llu",
         rc->block_group->key.objectid, rc->block_group->flags);
 
- ret = btrfs_start_delalloc_roots(fs_info, 0);
+ ret = btrfs_start_delalloc_roots(fs_info, 0, -1);
  if (ret < 0) {
   err = ret;
   goto out;
diff --git a/fs/btrfs/transaction.c b/fs/btrfs/transaction.c
index 79a4186..a999b85 100644
--- a/fs/btrfs/transaction.c
+++ b/fs/btrfs/transaction.c
@@ -1620,7 +1620,7 @@ static int btrfs_flush_all_pending_stuffs(struct btrfs_trans_handle *trans,
 static inline int btrfs_start_delalloc_flush(struct btrfs_fs_info *fs_info)
 {
  if (btrfs_test_opt(fs_info->tree_root, FLUSHONCOMMIT))
-  return btrfs_start_delalloc_roots(fs_info, 1);
+  return btrfs_start_delalloc_roots(fs_info, 1, -1);
  return 0;
 }
 
-- 
1.7.1