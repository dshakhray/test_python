From c0f811b1de92c0141f2286cb2c182cd3188f2a64 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Wed, 14 May 2014 15:30:02 -0400
Subject: [net] filter: let bpf_tell_extensions return SKF_AD_MAX

Message-id: <2101a41da25e588babc68e553ac774e34644a462.1400081343.git.jbenc@redhat.com>
Patchwork-id: 79802
O-Subject: [RHEL7.1 net PATCH 2/2] net: filter: let bpf_tell_extensions return SKF_AD_MAX
Bugzilla: 1079524
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1079524
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7455041
Tested: Using a simple test program

commit 37692299319db31f33f04ce418604781fa5710fb
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Tue Jan 21 00:19:37 2014 +0100

    net: filter: let bpf_tell_extensions return SKF_AD_MAX

    Michal Sekletar added in commit ea02f9411d9f ("net: introduce
    SO_BPF_EXTENSIONS") a facility where user space can enquire
    the BPF ancillary instruction set, which is imho a step into
    the right direction for letting user space high-level to BPF
    optimizers make an informed decision for possibly using these
    extensions.

    The original rationale was to return through a getsockopt(2)
    a bitfield of which instructions are supported and which
    are not, as of right now, we just return 0 to indicate a
    base support for SKF_AD_PROTOCOL up to SKF_AD_PAY_OFFSET.
    Limitations of this approach are that this API which we need
    to maintain for a long time can only support a maximum of 32
    extensions, and needs to be additionally maintained/updated
    when each new extension that comes in.

    I thought about this a bit more and what we can do here to
    overcome this is to just return SKF_AD_MAX. Since we never
    remove any extension since we cannot break user space and
    always linearly increase SKF_AD_MAX on each newly added
    extension, user space can make a decision on what extensions
    are supported in the whole set of extensions and which aren't,
    by just checking which of them from the whole set have an
    offset < SKF_AD_MAX of the underlying kernel.

    Since SKF_AD_MAX must be updated each time we add new ones,
    we don't need to introduce an additional enum and got
    maintenance for free. At some point in time when
    SO_BPF_EXTENSIONS becomes ubiquitous for most kernels, then
    an application can simply make use of this and easily be run
    on newer or older underlying kernels without needing to be
    recompiled, of course. Since that is for 3.14, it's not too
    late to do this change.

    Cc: Michal Sekletar <msekleta@redhat.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Acked-by: Michal Sekletar <msekleta@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/filter.h b/include/linux/filter.h
index 10127fe..99ce561 100644
--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -78,13 +78,7 @@ static inline void bpf_jit_free(struct sk_filter *fp)
 
 static inline int bpf_tell_extensions(void)
 {
- /* When adding new BPF extension it is necessary to enumerate
-  * it here, so userspace software which wants to know what is
-  * supported can do so by inspecting return value of this
-  * function
-  */
-
- return 0;
+ return SKF_AD_MAX;
 }
 
 enum {
-- 
1.7.1