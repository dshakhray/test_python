From a4fd38500f55533209992328cb08ce2400a7ad58 Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:25:03 -0400
Subject: [kernel] sched/wait: Introduce ___wait_event()

Message-id: <1409563584-9000-2-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 89939
O-Subject: [RHEL7.1 PATCH 01/82] sched/wait: Introduce ___wait_event()
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: Peter Zijlstra <peterz@infradead.org>

There's far too much duplication in the __wait_event macros; in order
to fix this introduce ___wait_event() a macro with the capability to
replace most other macros.

With the previous patches changing the various __wait_event*()
implementations to be more uniform; we can now collapse the lot
without also changing generated code.

Reviewed-by: Oleg Nesterov <oleg@redhat.com>
Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20131002092528.181897111@infradead.org
Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 41a1431b178c3b731d6dfc40b987528b333dd93e)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 include/linux/wait.h
Caused by context - no actual changes required.
---

diff --git a/include/linux/wait.h b/include/linux/wait.h
index c8e5760..d1a5883 100644
--- a/include/linux/wait.h
+++ b/include/linux/wait.h
@@ -173,6 +173,42 @@ wait_queue_head_t *bit_waitqueue(void *, int);
 #define wake_up_interruptible_sync_poll(x, m)    \
  __wake_up_sync_key((x), TASK_INTERRUPTIBLE, 1, (void *) (m))
 
+#define ___wait_signal_pending(state)     \
+ ((state == TASK_INTERRUPTIBLE && signal_pending(current)) || \
+  (state == TASK_KILLABLE && fatal_signal_pending(current)))
+
+#define ___wait_nop_ret  int ret __always_unused
+
+#define ___wait_event(wq, condition, state, exclusive, ret, cmd) \
+do {         \
+ __label__ __out;      \
+ DEFINE_WAIT(__wait);      \
+         \
+ for (;;) {       \
+  if (exclusive)      \
+   prepare_to_wait_exclusive(&wq, &__wait, state); \
+  else       \
+   prepare_to_wait(&wq, &__wait, state);  \
+         \
+  if (condition)      \
+   break;      \
+         \
+  if (___wait_signal_pending(state)) {   \
+   ret = -ERESTARTSYS;    \
+   if (exclusive) {    \
+    abort_exclusive_wait(&wq, &__wait,  \
+           state, NULL);  \
+    goto __out;    \
+   }      \
+   break;      \
+  }       \
+         \
+  cmd;       \
+ }        \
+ finish_wait(&wq, &__wait);     \
+__out: ;        \
+} while (0)
+
 #define __wait_event(wq, condition)      \
 do {         \
  DEFINE_WAIT(__wait);      \
-- 
1.7.1