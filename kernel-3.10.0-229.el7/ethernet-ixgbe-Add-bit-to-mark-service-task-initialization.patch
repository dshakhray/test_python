From c19a4398b336f84bfc011f07aa40bbd87892128c Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Wed, 10 Sep 2014 18:29:07 -0400
Subject: [ethernet] ixgbe: Add bit to mark service task initialization

Message-id: <1410373750-11341-48-git-send-email-jogreene@redhat.com>
Patchwork-id: 93523
O-Subject: [RHEL7.1 PATCH 47/50] ixgbe: Add bit to mark service task initialization
Bugzilla: 1091123
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

BZ: 1091123
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7919168
Tested: In beaker. See BZ for details
Upstream: 58cf663f0e962a51f051a84e38be281335bdf1fd

There needs to be an indication when the service task has been
initialized. This is because register access prior to that time
can detect a removal and attempt to schedule the service task.
Adding the __IXGBE_SERVICE_INITED bit allows this to be checked
and if not set prevent the service task scheduling. By checking
for a removal right after initialization, the probe can be failed
at that point without getting the service task involved.

Signed-off-by: Mark Rustad <mark.d.rustad@intel.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe.h b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
index 4eb0aab..bf850f6 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
@@ -792,6 +792,7 @@ enum ixgbe_state_t {
  __IXGBE_DISABLED,
  __IXGBE_REMOVING,
  __IXGBE_SERVICE_SCHED,
+ __IXGBE_SERVICE_INITED,
  __IXGBE_IN_SFP_INIT,
  __IXGBE_PTP_RUNNING,
  __IXGBE_PTP_TX_IN_PROGRESS,
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index aa63186..da67562 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -298,7 +298,8 @@ static void ixgbe_remove_adapter(struct ixgbe_hw *hw)
   return;
  hw->hw_addr = NULL;
  e_dev_err("Adapter removed\n");
- ixgbe_service_event_schedule(adapter);
+ if (test_bit(__IXGBE_SERVICE_INITED, &adapter->state))
+  ixgbe_service_event_schedule(adapter);
 }
 
 void ixgbe_check_remove(struct ixgbe_hw *hw, u32 reg)
@@ -7674,6 +7675,10 @@ static int ixgbe_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
  /* EEPROM */
  memcpy(&hw->eeprom.ops, ii->eeprom_ops, sizeof(hw->eeprom.ops));
  eec = IXGBE_READ_REG(hw, IXGBE_EEC);
+ if (ixgbe_removed(hw->hw_addr)) {
+  err = -EIO;
+  goto err_ioremap;
+ }
  /* If EEPROM is valid (bit 8 = 1), use default otherwise use bit bang */
  if (!(eec & (1 << 8)))
   hw->eeprom.ops.read = &ixgbe_read_eeprom_bit_bang_generic;
@@ -7836,7 +7841,12 @@ skip_sriov:
  setup_timer(&adapter->service_timer, &ixgbe_service_timer,
       (unsigned long) adapter);
 
+ if (ixgbe_removed(hw->hw_addr)) {
+  err = -EIO;
+  goto err_sw_init;
+ }
  INIT_WORK(&adapter->service_task, ixgbe_service_task);
+ set_bit(__IXGBE_SERVICE_INITED, &adapter->state);
  clear_bit(__IXGBE_SERVICE_SCHED, &adapter->state);
 
  err = ixgbe_init_interrupt_scheme(adapter);
@@ -8155,6 +8165,9 @@ static pci_ers_result_t ixgbe_io_error_detected(struct pci_dev *pdev,
 
 skip_bad_vf_detection:
 #endif /* CONFIG_PCI_IOV */
+ if (!test_bit(__IXGBE_SERVICE_INITED, &adapter->state))
+  return PCI_ERS_RESULT_DISCONNECT;
+
  rtnl_lock();
  netif_device_detach(netdev);
 
-- 
1.7.1