From 7a8e13b7f18d8531bf2bcfbf799880bb0fca070c Mon Sep 17 00:00:00 2001
From: Vlad Yasevich <vyasevic@redhat.com>
Date: Tue, 30 Sep 2014 14:16:07 -0400
Subject: [net] macvtap: Fix race between device delete and open

Message-id: <1412086567-20696-1-git-send-email-vyasevic@redhat.com>
Patchwork-id: 96802
O-Subject: [RHEL7 PATCH] macvtap: Fix race between device delete and open.
Bugzilla: 1075904
RH-Acked-by: Kyle McMartin <kmcmarti@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>

From: Vlad Yasevich <vyasevich@gmail.com>

BZ: 1075904
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8045668

commit 40b8fe45d1f094e3babe7b2dc2b71557ab71401d
Author: Vlad Yasevich <vyasevich@gmail.com>
Date:   Mon Sep 22 16:34:17 2014 -0400

 In macvtap device delete and open calls can race and
 this causes a list curruption of the vlan queue_list.

 The race intself is triggered by the idr accessors
 that located the vlan device.  The device is stored
 into and removed from the idr under both an rtnl and
 a mutex.  However, when attempting to locate the device
 in idr, only a mutex is taken.  As a result, once cpu
 perfoming a delete may take an rtnl and wait for the mutex,
 while another cput doing an open() will take the idr
 mutex first to fetch the device pointer and later take
 an rtnl to add a queue for the device which may have
 just gotten deleted.

 With this patch, we now hold the rtnl for the duration
 of the macvtap_open() call thus making sure that
 open will not race with delete.

 CC: Michael S. Tsirkin <mst@redhat.com>
 CC: Jason Wang <jasowang@redhat.com>
 Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
 Acked-by: Jason Wang <jasowang@redhat.com>
 Acked-by: Michael S. Tsirkin <mst@redhat.com>
 Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/macvtap.c b/drivers/net/macvtap.c
index f2c16cb..6326656 100644
--- a/drivers/net/macvtap.c
+++ b/drivers/net/macvtap.c
@@ -108,17 +108,15 @@ out:
  return err;
 }
 
+/* Requires RTNL */
 static int macvtap_set_queue(struct net_device *dev, struct file *file,
         struct macvtap_queue *q)
 {
  struct macvlan_dev *vlan = netdev_priv(dev);
- int err = -EBUSY;
 
- rtnl_lock();
  if (vlan->numqueues == MAX_MACVTAP_QUEUES)
-  goto out;
+  return -EBUSY;
 
- err = 0;
  rcu_assign_pointer(q->vlan, vlan);
  rcu_assign_pointer(vlan->taps[vlan->numvtaps], q);
  sock_hold(&q->sk);
@@ -132,9 +130,7 @@ static int macvtap_set_queue(struct net_device *dev, struct file *file,
  vlan->numvtaps++;
  vlan->numqueues++;
 
-out:
- rtnl_unlock();
- return err;
+ return 0;
 }
 
 static int macvtap_disable_queue(struct macvtap_queue *q)
@@ -450,11 +446,12 @@ static void macvtap_sock_destruct(struct sock *sk)
 static int macvtap_open(struct inode *inode, struct file *file)
 {
  struct net *net = current->nsproxy->net_ns;
- struct net_device *dev = dev_get_by_macvtap_minor(iminor(inode));
+ struct net_device *dev;
  struct macvtap_queue *q;
- int err;
+ int err = -ENODEV;
 
- err = -ENODEV;
+ rtnl_lock();
+ dev = dev_get_by_macvtap_minor(iminor(inode));
  if (!dev)
   goto out;
 
@@ -494,6 +491,7 @@ out:
  if (dev)
   dev_put(dev);
 
+ rtnl_unlock();
  return err;
 }
 
-- 
1.7.1