From 793fc4b6446625304c889690686511875e0b703a Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Tue, 28 Jan 2014 09:47:22 -0500
Subject: [net] vxlan: properly cleanup devs on module unload

Message-id: <c18fdff7aeca245910659270d02fa058b4a35593.1390840390.git.dborkman@redhat.com>
Patchwork-id: 75433
O-Subject: [RHEL7 PATCH net v2 2/4] net: vxlan: properly cleanup devs on module unload
Bugzilla: 1039587
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Thomas Graf <tgraf@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1039587
Upstream Status: 8425783c0f4292ca5be35097a467e1240735c257
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=6952127
Tested: verified on beaker

Upstream Commit:
commit 8425783c0f4292ca5be35097a467e1240735c257
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Mon Jan 13 18:41:20 2014 +0100

    net: vxlan: properly cleanup devs on module unload

    We should use vxlan_dellink() handler in vxlan_exit_net(), since
    i) we're not in fast-path and we should be consistent in dismantle
    just as we would remove a device through rtnl ops, and more
    importantly, ii) in case future code will kfree() memory in
    vxlan_dellink(), we would leak it right here unnoticed. Therefore,
    do not only half of the cleanup work, but make it properly.

    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 5a4fb56..e3ff1a7 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -2792,13 +2792,13 @@ static __net_init int vxlan_init_net(struct net *net)
 static __net_exit void vxlan_exit_net(struct net *net)
 {
  struct vxlan_net *vn = net_generic(net, vxlan_net_id);
- struct vxlan_dev *vxlan;
- LIST_HEAD(list);
+ struct vxlan_dev *vxlan, *next;
+ LIST_HEAD(list_kill);
 
  rtnl_lock();
- list_for_each_entry(vxlan, &vn->vxlan_list, next)
-  unregister_netdevice_queue(vxlan->dev, &list);
- unregister_netdevice_many(&list);
+ list_for_each_entry_safe(vxlan, next, &vn->vxlan_list, next)
+  vxlan_dellink(vxlan->dev, &list_kill);
+ unregister_netdevice_many(&list_kill);
  rtnl_unlock();
 }
 
-- 
1.7.1