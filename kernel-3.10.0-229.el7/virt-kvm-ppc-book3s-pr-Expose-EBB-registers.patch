From fff6de18523bb7683c2e0a9a2a2b797b9df9aeb0 Mon Sep 17 00:00:00 2001
From: David Gibson <dgibson@redhat.com>
Date: Mon, 15 Sep 2014 07:13:14 -0400
Subject: [virt] kvm/ppc: book3s/pr - Expose EBB registers

Message-id: <1410765214-16377-59-git-send-email-dgibson@redhat.com>
Patchwork-id: 94743
O-Subject: [PATCH 58/78] KVM: PPC: Book3S PR: Expose EBB registers
Bugzilla: 1123145 1123133 1123367
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Signed-off-by: David Gibson <dgibson@redhat.com>

commit 2e23f544135e7b5fc2f0bcb6fa935c4b4f5058b2
Author: Alexander Graf <agraf@suse.de>
Date:   Tue Apr 29 13:36:21 2014 +0200

    KVM: PPC: Book3S PR: Expose EBB registers

    POWER8 introduces a new facility called the "Event Based Branch" facility.
    It contains of a few registers that indicate where a guest should branch to
    when a defined event occurs and it's in PR mode.

    We don't want to really enable EBB as it will create a big mess with !PR guest
    mode while hardware is in PR and we don't really emulate the PMU anyway.

    So instead, let's just leave it at emulation of all its registers.

    Signed-off-by: Alexander Graf <agraf@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s.c b/arch/powerpc/kvm/book3s.c
index f142ea3..1e810f4 100644
--- a/arch/powerpc/kvm/book3s.c
+++ b/arch/powerpc/kvm/book3s.c
@@ -637,6 +637,15 @@ int kvm_vcpu_ioctl_get_one_reg(struct kvm_vcpu *vcpu, struct kvm_one_reg *reg)
   case KVM_REG_PPC_TAR:
    val = get_reg_val(reg->id, vcpu->arch.tar);
    break;
+  case KVM_REG_PPC_EBBHR:
+   val = get_reg_val(reg->id, vcpu->arch.ebbhr);
+   break;
+  case KVM_REG_PPC_EBBRR:
+   val = get_reg_val(reg->id, vcpu->arch.ebbrr);
+   break;
+  case KVM_REG_PPC_BESCR:
+   val = get_reg_val(reg->id, vcpu->arch.bescr);
+   break;
   default:
    r = -EINVAL;
    break;
@@ -732,6 +741,15 @@ int kvm_vcpu_ioctl_set_one_reg(struct kvm_vcpu *vcpu, struct kvm_one_reg *reg)
   case KVM_REG_PPC_TAR:
    vcpu->arch.tar = set_reg_val(reg->id, val);
    break;
+  case KVM_REG_PPC_EBBHR:
+   vcpu->arch.ebbhr = set_reg_val(reg->id, val);
+   break;
+  case KVM_REG_PPC_EBBRR:
+   vcpu->arch.ebbrr = set_reg_val(reg->id, val);
+   break;
+  case KVM_REG_PPC_BESCR:
+   vcpu->arch.bescr = set_reg_val(reg->id, val);
+   break;
   default:
    r = -EINVAL;
    break;
diff --git a/arch/powerpc/kvm/book3s_emulate.c b/arch/powerpc/kvm/book3s_emulate.c
index e8133e5..e1165ba 100644
--- a/arch/powerpc/kvm/book3s_emulate.c
+++ b/arch/powerpc/kvm/book3s_emulate.c
@@ -441,6 +441,17 @@ int kvmppc_core_emulate_mtspr_pr(struct kvm_vcpu *vcpu, int sprn, ulong spr_val)
  case SPRN_FSCR:
   vcpu->arch.fscr = spr_val;
   break;
+#ifdef CONFIG_PPC_BOOK3S_64
+ case SPRN_BESCR:
+  vcpu->arch.bescr = spr_val;
+  break;
+ case SPRN_EBBHR:
+  vcpu->arch.ebbhr = spr_val;
+  break;
+ case SPRN_EBBRR:
+  vcpu->arch.ebbrr = spr_val;
+  break;
+#endif
  case SPRN_ICTC:
  case SPRN_THRM1:
  case SPRN_THRM2:
@@ -551,6 +562,17 @@ int kvmppc_core_emulate_mfspr_pr(struct kvm_vcpu *vcpu, int sprn, ulong *spr_val
  case SPRN_FSCR:
   *spr_val = vcpu->arch.fscr;
   break;
+#ifdef CONFIG_PPC_BOOK3S_64
+ case SPRN_BESCR:
+  *spr_val = vcpu->arch.bescr;
+  break;
+ case SPRN_EBBHR:
+  *spr_val = vcpu->arch.ebbhr;
+  break;
+ case SPRN_EBBRR:
+  *spr_val = vcpu->arch.ebbrr;
+  break;
+#endif
  case SPRN_THRM1:
  case SPRN_THRM2:
  case SPRN_THRM3:
diff --git a/arch/powerpc/kvm/book3s_hv.c b/arch/powerpc/kvm/book3s_hv.c
index 913dceb..6e86dec 100644
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@ -960,15 +960,6 @@ static int kvmppc_get_one_reg_hv(struct kvm_vcpu *vcpu, u64 id,
  case KVM_REG_PPC_PSPB:
   *val = get_reg_val(id, vcpu->arch.pspb);
   break;
- case KVM_REG_PPC_EBBHR:
-  *val = get_reg_val(id, vcpu->arch.ebbhr);
-  break;
- case KVM_REG_PPC_EBBRR:
-  *val = get_reg_val(id, vcpu->arch.ebbrr);
-  break;
- case KVM_REG_PPC_BESCR:
-  *val = get_reg_val(id, vcpu->arch.bescr);
-  break;
  case KVM_REG_PPC_DPDES:
   *val = get_reg_val(id, vcpu->arch.vcore->dpdes);
   break;
@@ -1166,15 +1157,6 @@ static int kvmppc_set_one_reg_hv(struct kvm_vcpu *vcpu, u64 id,
  case KVM_REG_PPC_PSPB:
   vcpu->arch.pspb = set_reg_val(id, *val);
   break;
- case KVM_REG_PPC_EBBHR:
-  vcpu->arch.ebbhr = set_reg_val(id, *val);
-  break;
- case KVM_REG_PPC_EBBRR:
-  vcpu->arch.ebbrr = set_reg_val(id, *val);
-  break;
- case KVM_REG_PPC_BESCR:
-  vcpu->arch.bescr = set_reg_val(id, *val);
-  break;
  case KVM_REG_PPC_DPDES:
   vcpu->arch.vcore->dpdes = set_reg_val(id, *val);
   break;
-- 
1.7.1