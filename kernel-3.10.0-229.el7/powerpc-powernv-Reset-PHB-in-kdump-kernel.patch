From 3b6bb2057a2b41b8ac76d095e39538ba48c719bb Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:09:49 -0400
Subject: [powerpc] powernv: Reset PHB in kdump kernel

Message-id: <1410545655-205645-361-git-send-email-dzickus@redhat.com>
Patchwork-id: 94645
O-Subject: [RHEL7 PATCH 360/626] powrpc/powernv: Reset PHB in kdump kernel
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 361f2a2a1536a1d7ff6f52bf0e4848c1441e17ab
Author: Gavin Shan <gwshan@linux.vnet.ibm.com>
Date:   Thu Apr 24 18:00:25 2014 +1000

    powrpc/powernv: Reset PHB in kdump kernel

    In the kdump scenario, the first kerenl doesn't shutdown PCI devices
    and the kdump kerenl clean PHB IODA table at the early probe time.
    That means the kdump kerenl can't support PCI transactions piled
    by the first kerenl. Otherwise, lots of EEH errors and frozen PEs
    will be detected.

    In order to avoid the EEH errors, the PHB is resetted to drop all
    PCI transaction from the first kerenl.

    Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/platforms/powernv/eeh-ioda.c b/arch/powerpc/platforms/powernv/eeh-ioda.c
index 6a1bd42..9f7cdd8 100644
--- a/arch/powerpc/platforms/powernv/eeh-ioda.c
+++ b/arch/powerpc/platforms/powernv/eeh-ioda.c
@@ -402,13 +402,16 @@ static s64 ioda_eeh_phb_poll(struct pnv_phb *phb)
   if (rc <= 0)
    break;
 
-  msleep(rc);
+  if (system_state < SYSTEM_RUNNING)
+   udelay(1000 * rc);
+  else
+   msleep(rc);
  }
 
  return rc;
 }
 
-static int ioda_eeh_phb_reset(struct pci_controller *hose, int option)
+int ioda_eeh_phb_reset(struct pci_controller *hose, int option)
 {
  struct pnv_phb *phb = hose->private_data;
  s64 rc = OPAL_HARDWARE;
@@ -436,8 +439,12 @@ static int ioda_eeh_phb_reset(struct pci_controller *hose, int option)
   * need the PCI bus settlement delay.
   */
  rc = ioda_eeh_phb_poll(phb);
- if (option == EEH_RESET_DEACTIVATE)
-  msleep(EEH_PE_RST_SETTLE_TIME);
+ if (option == EEH_RESET_DEACTIVATE) {
+  if (system_state < SYSTEM_RUNNING)
+   udelay(1000 * EEH_PE_RST_SETTLE_TIME);
+  else
+   msleep(EEH_PE_RST_SETTLE_TIME);
+ }
 out:
  if (rc != OPAL_SUCCESS)
   return -EIO;
diff --git a/arch/powerpc/platforms/powernv/pci-ioda.c b/arch/powerpc/platforms/powernv/pci-ioda.c
index c3a040a..c1ba3ea 100644
--- a/arch/powerpc/platforms/powernv/pci-ioda.c
+++ b/arch/powerpc/platforms/powernv/pci-ioda.c
@@ -13,6 +13,7 @@
 
 #include <linux/kernel.h>
 #include <linux/pci.h>
+#include <linux/crash_dump.h>
 #include <linux/debugfs.h>
 #include <linux/delay.h>
 #include <linux/string.h>
@@ -1367,6 +1368,17 @@ void __init pnv_pci_init_ioda_phb(struct device_node *np,
  rc = opal_pci_reset(phb_id, OPAL_PCI_IODA_TABLE_RESET, OPAL_ASSERT_RESET);
  if (rc)
   pr_warning("  OPAL Error %ld performing IODA table reset !\n", rc);
+
+ /* If we're running in kdump kerenl, the previous kerenl never
+  * shutdown PCI devices correctly. We already got IODA table
+  * cleaned out. So we have to issue PHB reset to stop all PCI
+  * transactions from previous kerenl.
+  */
+ if (is_kdump_kernel()) {
+  pr_info("  Issue PHB reset ...\n");
+  ioda_eeh_phb_reset(hose, EEH_RESET_FUNDAMENTAL);
+  ioda_eeh_phb_reset(hose, OPAL_DEASSERT_RESET);
+ }
 }
 
 void __init pnv_pci_init_ioda2_phb(struct device_node *np)
diff --git a/arch/powerpc/platforms/powernv/pci.h b/arch/powerpc/platforms/powernv/pci.h
index 26851d3..0467933 100644
--- a/arch/powerpc/platforms/powernv/pci.h
+++ b/arch/powerpc/platforms/powernv/pci.h
@@ -204,5 +204,6 @@ extern void pnv_pci_init_ioda_hub(struct device_node *np);
 extern void pnv_pci_init_ioda2_phb(struct device_node *np);
 extern void pnv_pci_ioda_tce_invalidate(struct iommu_table *tbl,
      __be64 *startp, __be64 *endp);
+extern int ioda_eeh_phb_reset(struct pci_controller *hose, int option);
 
 #endif /* __POWERNV_PCI_H */
-- 
1.7.1