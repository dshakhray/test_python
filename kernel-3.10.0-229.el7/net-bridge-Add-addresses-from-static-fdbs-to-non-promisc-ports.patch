From 09312e77f340f7a560b3b42acec21681c5e3aa9b Mon Sep 17 00:00:00 2001
From: Vlad Yasevich <vyasevic@redhat.com>
Date: Fri, 29 Aug 2014 19:01:19 -0400
Subject: [net] bridge: Add addresses from static fdbs to non-promisc ports

Message-id: <1409338885-30414-8-git-send-email-vyasevic@redhat.com>
Patchwork-id: 89898
O-Subject: [RHEL7 PATCH 07/13] bridge: Add addresses from static fdbs to non-promisc ports
Bugzilla: 896669
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>

From: Vlad Yasevich <vyasevic@redhat.com>

When a static fdb entry is created, add the mac address
from this fdb entry to any ports that are currently running
in non-promiscuous mode.  These ports need this data so that
they can receive traffic destined to these addresses.
By default ports start in promiscuous mode, so this feature
is disabled.

Acked-by: Michael S. Tsirkin <mst@redhat.com>
Signed-off-by: Vlad Yasevich <vyasevic@redhat.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 145beee8d6bbd18dbebf9f71a40ba99af80d71f7)
Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index bf196bd..e57b1ca 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -82,8 +82,58 @@ static void fdb_rcu_free(struct rcu_head *head)
  kmem_cache_free(br_fdb_cache, ent);
 }
 
+/* When a static FDB entry is added, the mac address from the entry is
+ * added to the bridge private HW address list and all required ports
+ * are then updated with the new information.
+ * Called under RTNL.
+ */
+static void fdb_add_hw(struct net_bridge *br, const unsigned char *addr)
+{
+ int err;
+ struct net_bridge_port *p, *tmp;
+
+ ASSERT_RTNL();
+
+ list_for_each_entry(p, &br->port_list, list) {
+  if (!br_promisc_port(p)) {
+   err = dev_uc_add(p->dev, addr);
+   if (err)
+    goto undo;
+  }
+ }
+
+ return;
+undo:
+ list_for_each_entry(tmp, &br->port_list, list) {
+  if (tmp == p)
+   break;
+  if (!br_promisc_port(tmp))
+   dev_uc_del(tmp->dev, addr);
+ }
+}
+
+/* When a static FDB entry is deleted, the HW address from that entry is
+ * also removed from the bridge private HW address list and updates all
+ * the ports with needed information.
+ * Called under RTNL.
+ */
+static void fdb_del_hw(struct net_bridge *br, const unsigned char *addr)
+{
+ struct net_bridge_port *p;
+
+ ASSERT_RTNL();
+
+ list_for_each_entry(p, &br->port_list, list) {
+  if (!br_promisc_port(p))
+   dev_uc_del(p->dev, addr);
+ }
+}
+
 static void fdb_delete(struct net_bridge *br, struct net_bridge_fdb_entry *f)
 {
+ if (f->is_static)
+  fdb_del_hw(br, f->addr.addr);
+
  hlist_del_rcu(&f->hlist);
  fdb_notify(br, f, RTM_DELNEIGH);
  call_rcu(&f->rcu, fdb_rcu_free);
@@ -430,6 +480,7 @@ static int fdb_insert(struct net_bridge *br, struct net_bridge_port *source,
   return -ENOMEM;
 
  fdb->is_local = fdb->is_static = 1;
+ fdb_add_hw(br, addr);
  fdb_notify(br, fdb, RTM_NEWNEIGH);
  return 0;
 }
@@ -638,13 +689,25 @@ static int fdb_add_entry(struct net_bridge_port *source, const __u8 *addr,
  }
 
  if (fdb_to_nud(fdb) != state) {
-  if (state & NUD_PERMANENT)
-   fdb->is_local = fdb->is_static = 1;
-  else if (state & NUD_NOARP) {
+  if (state & NUD_PERMANENT) {
+   fdb->is_local = 1;
+   if (!fdb->is_static) {
+    fdb->is_static = 1;
+    fdb_add_hw(br, addr);
+   }
+  } else if (state & NUD_NOARP) {
    fdb->is_local = 0;
-   fdb->is_static = 1;
-  } else
-   fdb->is_local = fdb->is_static = 0;
+   if (!fdb->is_static) {
+    fdb->is_static = 1;
+    fdb_add_hw(br, addr);
+   }
+  } else {
+   fdb->is_local = 0;
+   if (fdb->is_static) {
+    fdb->is_static = 0;
+    fdb_del_hw(br, addr);
+   }
+  }
 
   modified = true;
  }
-- 
1.7.1