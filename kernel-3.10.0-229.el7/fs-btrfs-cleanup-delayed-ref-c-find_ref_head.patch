From 651782e65f4010097c98636ba0a7cf8a1cf2565f Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:01:27 -0400
Subject: [fs] btrfs: cleanup delayed-ref.c:find_ref_head()

Message-id: <1407179109-13714-201-git-send-email-sandeen@redhat.com>
Patchwork-id: 87129
O-Subject: [RHEL7.1 PATCH 200/422] Btrfs: cleanup delayed-ref.c:find_ref_head()
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit 85fdfdf6118dc00c2fcea8907815e48c98ee6c1d
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Wed Feb 12 15:07:53 2014 +0000

    Btrfs: cleanup delayed-ref.c:find_ref_head()

    The argument last wasn't used, all callers supplied a NULL value
    for it. Also removed unnecessary intermediate storage of the result
    of key comparisons.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/delayed-ref.c b/fs/btrfs/delayed-ref.c
index 56cdfe9..2502ba5 100644
--- a/fs/btrfs/delayed-ref.c
+++ b/fs/btrfs/delayed-ref.c
@@ -199,42 +199,30 @@ static struct btrfs_delayed_ref_head *htree_insert(struct rb_root *root,
  */
 static struct btrfs_delayed_ref_head *
 find_ref_head(struct rb_root *root, u64 bytenr,
-       struct btrfs_delayed_ref_head **last, int return_bigger)
+       int return_bigger)
 {
  struct rb_node *n;
  struct btrfs_delayed_ref_head *entry;
- int cmp = 0;
 
  n = root->rb_node;
  entry = NULL;
  while (n) {
   entry = rb_entry(n, struct btrfs_delayed_ref_head, href_node);
-  if (last)
-   *last = entry;
 
   if (bytenr < entry->node.bytenr)
-   cmp = -1;
-  else if (bytenr > entry->node.bytenr)
-   cmp = 1;
-  else
-   cmp = 0;
-
-  if (cmp < 0)
    n = n->rb_left;
-  else if (cmp > 0)
+  else if (bytenr > entry->node.bytenr)
    n = n->rb_right;
   else
    return entry;
  }
  if (entry && return_bigger) {
-  if (cmp > 0) {
+  if (bytenr > entry->node.bytenr) {
    n = rb_next(&entry->href_node);
    if (!n)
     n = rb_first(root);
    entry = rb_entry(n, struct btrfs_delayed_ref_head,
       href_node);
-   if (last)
-    *last = entry;
    return entry;
   }
   return entry;
@@ -414,12 +402,12 @@ btrfs_select_ref_head(struct btrfs_trans_handle *trans)
 
 again:
  start = delayed_refs->run_delayed_start;
- head = find_ref_head(&delayed_refs->href_root, start, NULL, 1);
+ head = find_ref_head(&delayed_refs->href_root, start, 1);
  if (!head && !loop) {
   delayed_refs->run_delayed_start = 0;
   start = 0;
   loop = true;
-  head = find_ref_head(&delayed_refs->href_root, start, NULL, 1);
+  head = find_ref_head(&delayed_refs->href_root, start, 1);
   if (!head)
    return NULL;
  } else if (!head && loop) {
@@ -897,7 +885,7 @@ btrfs_find_delayed_ref_head(struct btrfs_trans_handle *trans, u64 bytenr)
  struct btrfs_delayed_ref_root *delayed_refs;
 
  delayed_refs = &trans->transaction->delayed_refs;
- return find_ref_head(&delayed_refs->href_root, bytenr, NULL, 0);
+ return find_ref_head(&delayed_refs->href_root, bytenr, 0);
 }
 
 void btrfs_delayed_ref_exit(void)
-- 
1.7.1