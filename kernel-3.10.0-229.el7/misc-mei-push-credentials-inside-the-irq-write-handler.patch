From e95be363b19a3e0ccb6508b4e9bf3185cef27b0d Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 2 May 2014 14:36:45 -0400
Subject: [misc] mei: push credentials inside the irq write handler

Message-id: <1399041470-21330-13-git-send-email-prarit@redhat.com>
Patchwork-id: 79299
O-Subject: [RHEL7.1 PATCH BZ 1088953 12/77] mei: push credentials inside the irq write handler
Bugzilla: 1088953
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit 136698e535cd1ce59e436cc084b41370fd8f1eff
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Mon Sep 16 23:44:44 2013 +0300

    mei: push credentials inside the irq write handler

    this eventually allows as use a single write queue
    both for control and data messages and removing possible
    race

    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Cc: Dean Nelson <dnelson@redhat.com>
Cc: Stefan Assmann <sassmann@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/amthif.c b/drivers/misc/mei/amthif.c
index e4a4e2e..226c3f3 100644
--- a/drivers/misc/mei/amthif.c
+++ b/drivers/misc/mei/amthif.c
@@ -461,6 +461,15 @@ int mei_amthif_irq_write_complete(struct mei_cl *cl, struct mei_cl_cb *cb,
  u32 msg_slots = mei_data2slots(len);
  int rets;
 
+ rets = mei_cl_flow_ctrl_creds(cl);
+ if (rets < 0)
+  return rets;
+
+ if (rets == 0) {
+  cl_dbg(dev, cl, "No flow control credentials: not sending.\n");
+  return 0;
+ }
+
  mei_hdr.host_addr = cl->host_client_id;
  mei_hdr.me_addr = cl->me_client_id;
  mei_hdr.reserved = 0;
diff --git a/drivers/misc/mei/client.c b/drivers/misc/mei/client.c
index 1a53d96..2ab9d16 100644
--- a/drivers/misc/mei/client.c
+++ b/drivers/misc/mei/client.c
@@ -702,12 +702,33 @@ err:
 int mei_cl_irq_write_complete(struct mei_cl *cl, struct mei_cl_cb *cb,
          s32 *slots, struct mei_cl_cb *cmpl_list)
 {
- struct mei_device *dev = cl->dev;
+ struct mei_device *dev;
+ struct mei_msg_data *buf;
  struct mei_msg_hdr mei_hdr;
- size_t len = cb->request_buffer.size - cb->buf_idx;
- u32 msg_slots = mei_data2slots(len);
+ size_t len;
+ u32 msg_slots;
  int rets;
 
+
+ if (WARN_ON(!cl || !cl->dev))
+  return -ENODEV;
+
+ dev = cl->dev;
+
+ buf = &cb->request_buffer;
+
+ rets = mei_cl_flow_ctrl_creds(cl);
+ if (rets < 0)
+  return rets;
+
+ if (rets == 0) {
+  cl_dbg(dev, cl, "No flow control credentials: not sending.\n");
+  return 0;
+ }
+
+ len = buf->size - cb->buf_idx;
+ msg_slots = mei_data2slots(len);
+
  mei_hdr.host_addr = cl->host_client_id;
  mei_hdr.me_addr = cl->me_client_id;
  mei_hdr.reserved = 0;
@@ -730,8 +751,7 @@ int mei_cl_irq_write_complete(struct mei_cl *cl, struct mei_cl_cb *cb,
    cb->request_buffer.size, cb->buf_idx);
 
  *slots -=  msg_slots;
- rets = mei_write_message(dev, &mei_hdr,
-   cb->request_buffer.data + cb->buf_idx);
+ rets = mei_write_message(dev, &mei_hdr, buf->data + cb->buf_idx);
  if (rets) {
   cl->status = rets;
   list_move_tail(&cb->list, &cmpl_list->list);
diff --git a/drivers/misc/mei/interrupt.c b/drivers/misc/mei/interrupt.c
index e4bb9ae..7a95c07 100644
--- a/drivers/misc/mei/interrupt.c
+++ b/drivers/misc/mei/interrupt.c
@@ -513,11 +513,6 @@ int mei_irq_write_handler(struct mei_device *dev, struct mei_cl_cb *cmpl_list)
   cl = cb->cl;
   if (cl == NULL)
    continue;
-  if (mei_cl_flow_ctrl_creds(cl) <= 0) {
-   cl_dbg(dev, cl, "No flow control credentials, not sending.\n");
-   continue;
-  }
-
   if (cl == &dev->iamthif_cl)
    ret = mei_amthif_irq_write_complete(cl, cb,
       &slots, cmpl_list);
-- 
1.7.1