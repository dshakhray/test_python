From 1f0b2351e5195fd74290322a64840fcd2381fe71 Mon Sep 17 00:00:00 2001
From: Maurizio Lombardi <mlombard@redhat.com>
Date: Mon, 14 Jul 2014 15:46:13 -0400
Subject: [ethernet] cnic: Don't take rcu_read_lock in cnic_rcv_netevent()

Message-id: <1405352774-9934-2-git-send-email-mlombard@redhat.com>
Patchwork-id: 85792
O-Subject: [RHEL7.1 PATCH 1/2] cnic: Don't take rcu_read_lock in cnic_rcv_netevent()
Bugzilla: 1079384 1094613
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Michael Chan <mchan@broadcom.com>

Because the called function, such as bnx2fc_indicate_netevent(), can sleep,
we cannot take rcu_lock().  To prevent the rcu protected ulp_ops from going
away, we use the cnic_lock mutex and set the ULP_F_CALL_PENDING flag.
The code already waits for ULP_F_CALL_PENDING flag to clear in
cnic_unregister_device().

Signed-off-by: Michael Chan <mchan@broadcom.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 20f30c2d5ea44925cb83b0fdae78b8600a76b66e)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/broadcom/cnic.c b/drivers/net/ethernet/broadcom/cnic.c
index dadca6b..dccf410 100644
--- a/drivers/net/ethernet/broadcom/cnic.c
+++ b/drivers/net/ethernet/broadcom/cnic.c
@@ -5623,20 +5623,27 @@ static void cnic_rcv_netevent(struct cnic_local *cp, unsigned long event,
 {
  int if_type;
 
- rcu_read_lock();
  for (if_type = 0; if_type < MAX_CNIC_ULP_TYPE; if_type++) {
   struct cnic_ulp_ops *ulp_ops;
   void *ctx;
 
-  ulp_ops = rcu_dereference(cp->ulp_ops[if_type]);
-  if (!ulp_ops || !ulp_ops->indicate_netevent)
+  mutex_lock(&cnic_lock);
+  ulp_ops = rcu_dereference_protected(cp->ulp_ops[if_type],
+      lockdep_is_held(&cnic_lock));
+  if (!ulp_ops || !ulp_ops->indicate_netevent) {
+   mutex_unlock(&cnic_lock);
    continue;
+  }
 
   ctx = cp->ulp_handle[if_type];
 
+  set_bit(ULP_F_CALL_PENDING, &cp->ulp_flags[if_type]);
+  mutex_unlock(&cnic_lock);
+
   ulp_ops->indicate_netevent(ctx, event, vlan_id);
+
+  clear_bit(ULP_F_CALL_PENDING, &cp->ulp_flags[if_type]);
  }
- rcu_read_unlock();
 }
 
 /* netdev event handler */
-- 
1.7.1