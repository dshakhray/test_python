From 32d592abcd1c2c0a4c9c037c37007a8e8bf56f31 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Thu, 11 Dec 2014 16:33:22 -0500
Subject: [md] dm-thin: fix missing out-of-data-space to write mode transition if blocks are released

Message-id: <1418315602-11579-2-git-send-email-snitzer@redhat.com>
Patchwork-id: 101670
O-Subject: [RHEL7.1 PATCH 2/2] dm thin: fix missing out-of-data-space to write mode transition if blocks are released
Bugzilla: 1173181
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1173181

Upstream linux-dm.git commit 1a82db0592fad10978ae50e159907b4975532a34
Author: Joe Thornber <ejt@redhat.com>
Date:   Thu Dec 11 11:12:19 2014 +0000

    dm thin: fix missing out-of-data-space to write mode transition if blocks are released

    Discard bios and thin device deletion have the potential to release data
    blocks.  If the thin-pool is in out-of-data-space mode, and blocks were
    released, transition the thin-pool back to full write mode.

    The correct time to do this is just after the thin-pool metadata commit.
    It cannot be done before the commit because the space maps will not
    allow immediate reuse of the data blocks in case there's a rollback
    following power failure.

    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index 246c128..703a9d4 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -1121,6 +1121,24 @@ static void schedule_external_copy(struct thin_c *tc, dm_block_t virt_block,
   schedule_zero(tc, virt_block, data_dest, cell, bio);
 }
 
+static void set_pool_mode(struct pool *pool, enum pool_mode new_mode);
+
+static void check_for_space(struct pool *pool)
+{
+ int r;
+ dm_block_t nr_free;
+
+ if (get_pool_mode(pool) != PM_OUT_OF_DATA_SPACE)
+  return;
+
+ r = dm_pool_get_free_block_count(pool->pmd, &nr_free);
+ if (r)
+  return;
+
+ if (nr_free)
+  set_pool_mode(pool, PM_WRITE);
+}
+
 /*
  * A non-zero return indicates read_only or fail_io mode.
  * Many callers don't care about the return value.
@@ -1135,6 +1153,8 @@ static int commit(struct pool *pool)
  r = dm_pool_commit_metadata(pool->pmd);
  if (r)
   metadata_operation_failed(pool, "dm_pool_commit_metadata", r);
+ else
+  check_for_space(pool);
 
  return r;
 }
@@ -1153,8 +1173,6 @@ static void check_low_water_mark(struct pool *pool, dm_block_t free_blocks)
  }
 }
 
-static void set_pool_mode(struct pool *pool, enum pool_mode new_mode);
-
 static int alloc_data_block(struct thin_c *tc, dm_block_t *result)
 {
  int r;
-- 
1.7.1