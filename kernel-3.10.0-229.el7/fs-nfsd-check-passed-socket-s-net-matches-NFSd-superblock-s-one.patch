From 1b93282c54a28bf9a44344cd0c470004a140250b Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:50:09 -0400
Subject: [fs] nfsd: check passed socket's net matches NFSd superblock's one

Message-id: <1403560314-32525-68-git-send-email-bfields@redhat.com>
Patchwork-id: 84482
O-Subject: [Patch RHEL7 067/172] nfsd: check passed socket's net matches NFSd superblock's one
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Stanislav Kinsbursky <skinsbursky@parallels.com>

There could be a case, when NFSd file system is mounted in network, different
to socket's one, like below:

"ip netns exec" creates new network and mount namespace, which duplicates NFSd
mount point, created in init_net context. And thus NFS server stop in nested
network context leads to RPCBIND client destruction in init_net.
Then, on NFSd start in nested network context, rpc.nfsd process creates socket
in nested net and passes it into "write_ports", which leads to RPCBIND sockets
creation in init_net context because of the same reason (NFSd monut point was
created in init_net context). An attempt to register passed socket in nested
net leads to panic, because no RPCBIND client present in nexted network
namespace.

This patch add check that passed socket's net matches NFSd superblock's one.
And returns -EINVAL error to user psace otherwise.

v2: Put socket on exit.

Reported-by: Weng Meiling <wengmeiling.weng@huawei.com>
Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
Cc: stable@vger.kernel.org
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 3064639423c48d6e0eb9ecc27c512a58e38c6c57
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfsctl.c b/fs/nfsd/nfsctl.c
index 7f55517..f34d9de 100644
--- a/fs/nfsd/nfsctl.c
+++ b/fs/nfsd/nfsctl.c
@@ -699,6 +699,11 @@ static ssize_t __write_ports_addfd(char *buf, struct net *net)
  if (err != 0 || fd < 0)
   return -EINVAL;
 
+ if (svc_alien_sock(net, fd)) {
+  printk(KERN_ERR "%s: socket net is different to NFSd's one\n", __func__);
+  return -EINVAL;
+ }
+
  err = nfsd_create_serv(net);
  if (err != 0)
   return err;
diff --git a/include/linux/sunrpc/svcsock.h b/include/linux/sunrpc/svcsock.h
index 62fd1b7..947009e 100644
--- a/include/linux/sunrpc/svcsock.h
+++ b/include/linux/sunrpc/svcsock.h
@@ -56,6 +56,7 @@ int  svc_recv(struct svc_rqst *, long);
 int  svc_send(struct svc_rqst *);
 void  svc_drop(struct svc_rqst *);
 void  svc_sock_update_bufs(struct svc_serv *serv);
+bool  svc_alien_sock(struct net *net, int fd);
 int  svc_addsock(struct svc_serv *serv, const int fd,
      char *name_return, const size_t len);
 void  svc_init_xprt_sock(void);
diff --git a/net/sunrpc/svcsock.c b/net/sunrpc/svcsock.c
index 5b48381..b2eaeeb 100644
--- a/net/sunrpc/svcsock.c
+++ b/net/sunrpc/svcsock.c
@@ -1397,6 +1397,22 @@ static struct svc_sock *svc_setup_socket(struct svc_serv *serv,
  return svsk;
 }
 
+bool svc_alien_sock(struct net *net, int fd)
+{
+ int err;
+ struct socket *sock = sockfd_lookup(fd, &err);
+ bool ret = false;
+
+ if (!sock)
+  goto out;
+ if (sock_net(sock->sk) != net)
+  ret = true;
+ sockfd_put(sock);
+out:
+ return ret;
+}
+EXPORT_SYMBOL_GPL(svc_alien_sock);
+
 /**
  * svc_addsock - add a listener socket to an RPC service
  * @serv: pointer to RPC service to which to add a new listener
-- 
1.7.1