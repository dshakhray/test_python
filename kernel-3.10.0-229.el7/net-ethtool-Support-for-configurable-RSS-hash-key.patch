From ba48d285f79259e72e0c5d990e57477d6eef310f Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 11:40:37 -0400
Subject: [net] ethtool: Support for configurable RSS hash key

Message-id: <1410176446-10440-2-git-send-email-ivecera@redhat.com>
Patchwork-id: 91651
O-Subject: [RHEL7.1 PATCH 01/10] ethtool: Support for configurable RSS hash key
Bugzilla: 1138823
RH-Acked-by: Michal Schmidt <mschmidt@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: #1138823

Upstream commit(s):
commit 3de0b592394d17b2c41a261a6a493a521213f299
Author: Venkata Duvvuru <VenkatKumar.Duvvuru@Emulex.Com>
Date:   Mon Apr 21 15:37:59 2014 +0530

    ethtool: Support for configurable RSS hash key

    This ethtool patch primarily copies the ioctl command data structures
    from/to the User space and invokes the driver hook.

    Signed-off-by: Venkat Duvvuru <VenkatKumar.Duvvuru@Emulex.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/ethtool.h b/include/linux/ethtool.h
index ff432ee..5b1a7f7 100644
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@ -154,13 +154,23 @@ static inline u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
  * @reset: Reset (part of) the device, as specified by a bitmask of
  * flags from &enum ethtool_reset_flags.  Returns a negative
  * error code or zero.
+ * @get_rxfh_key_size: Get the size of the RX flow hash key.
+ * Returns zero if not supported for this specific device.
  * @get_rxfh_indir_size: Get the size of the RX flow hash indirection table.
  * Returns zero if not supported for this specific device.
  * @get_rxfh_indir: Get the contents of the RX flow hash indirection table.
  * Will not be called if @get_rxfh_indir_size returns zero.
+ * @get_rxfh: Get the contents of the RX flow hash indirection table and hash
+ * key.
+ * Will not be called if @get_rxfh_indir_size and @get_rxfh_key_size
+ * returns zero.
  * Returns a negative error code or zero.
  * @set_rxfh_indir: Set the contents of the RX flow hash indirection table.
  * Will not be called if @get_rxfh_indir_size returns zero.
+ * @set_rxfh: Set the contents of the RX flow hash indirection table and
+ * hash key.
+ * Will not be called if @get_rxfh_indir_size and @get_rxfh_key_size
+ * returns zero.
  * Returns a negative error code or zero.
  * @get_channels: Get number of channels.
  * @set_channels: Set number of channels.  Returns a negative error code or
@@ -253,9 +263,15 @@ struct ethtool_ops {
   * to replace reserved slots with required structure field
   * additions of your backport.
   */
+#ifdef __GENKSYMS__
  void   (*rh_reserved1)(void);
  void   (*rh_reserved2)(void);
  void   (*rh_reserved3)(void);
+#else
+ u32 (*get_rxfh_key_size)(struct net_device *);
+ int (*get_rxfh)(struct net_device *, u32 *, u8 *);
+ int (*set_rxfh)(struct net_device *, u32 *, u8 *);
+#endif
  void   (*rh_reserved4)(void);
  void   (*rh_reserved5)(void);
  void   (*rh_reserved6)(void);
diff --git a/include/uapi/linux/ethtool.h b/include/uapi/linux/ethtool.h
index 0c9b448..d278861 100644
--- a/include/uapi/linux/ethtool.h
+++ b/include/uapi/linux/ethtool.h
@@ -630,6 +630,35 @@ struct ethtool_rxfh_indir {
 };
 
 /**
+ * struct ethtool_rxfh - command to get/set RX flow hash indir or/and hash key.
+ * @cmd: Specific command number - %ETHTOOL_GRSSH or %ETHTOOL_SRSSH
+ * @rss_context: RSS context identifier.
+ * @indir_size: On entry, the array size of the user buffer, which may be zero.
+ *  On return from %ETHTOOL_GRSSH, the array size of the hardware
+ *  indirection table.
+ * @key_size: On entry, the array size of the user buffer in bytes,
+ *  which may be zero.
+ *  On return from %ETHTOOL_GRSSH, the size of the RSS hash key.
+ * @rsvd: Reserved for future extensions.
+ * @rss_config: RX ring/queue index for each hash value i.e., indirection table
+ *  of size @indir_size followed by hash key of size @key_size.
+ *
+ * For %ETHTOOL_GRSSH, a @indir_size and key_size of zero means that only the
+ * size should be returned.  For %ETHTOOL_SRSSH, a @indir_size of 0xDEADBEEF
+ * means that indir table setting is not requested and a @indir_size of zero
+ * means the indir table should be reset to default values.  This last feature
+ * is not supported by the original implementations.
+ */
+struct ethtool_rxfh {
+ __u32   cmd;
+ __u32 rss_context;
+ __u32   indir_size;
+ __u32   key_size;
+ __u32 rsvd[2];
+ __u32   rss_config[0];
+};
+
+/**
  * struct ethtool_rx_ntuple_flow_spec - specification for RX flow filter
  * @flow_type: Type of match to perform, e.g. %TCP_V4_FLOW
  * @h_u: Flow field values to match (dependent on @flow_type)
@@ -901,6 +930,9 @@ enum ethtool_sfeatures_retval_bits {
 #define ETHTOOL_GEEE  0x00000044 /* Get EEE settings */
 #define ETHTOOL_SEEE  0x00000045 /* Set EEE settings */
 
+#define ETHTOOL_GRSSH  0x00000046 /* Get RX flow hash configuration */
+#define ETHTOOL_SRSSH  0x00000047 /* Set RX flow hash configuration */
+
 /* compatibility with older code */
 #define SPARC_ETH_GSET  ETHTOOL_GSET
 #define SPARC_ETH_SSET  ETHTOOL_SSET
diff --git a/net/core/ethtool.c b/net/core/ethtool.c
index 1bd5533..e376155 100644
--- a/net/core/ethtool.c
+++ b/net/core/ethtool.c
@@ -546,6 +546,23 @@ err_out:
  return ret;
 }
 
+static int ethtool_copy_validate_indir(u32 *indir, void __user *useraddr,
+     struct ethtool_rxnfc *rx_rings,
+     u32 size)
+{
+ int ret = 0, i;
+
+ if (copy_from_user(indir, useraddr, size * sizeof(indir[0])))
+  ret = -EFAULT;
+
+ /* Validate ring indices */
+ for (i = 0; i < size; i++) {
+  if (indir[i] >= rx_rings->data)
+   ret = -EINVAL;
+ }
+ return ret;
+}
+
 static noinline_for_stack int ethtool_get_rxfh_indir(struct net_device *dev,
            void __user *useraddr)
 {
@@ -602,6 +619,7 @@ static noinline_for_stack int ethtool_set_rxfh_indir(struct net_device *dev,
  u32 *indir;
  const struct ethtool_ops *ops = dev->ethtool_ops;
  int ret;
+ u32 ringidx_offset = offsetof(struct ethtool_rxfh_indir, ring_index[0]);
 
  if (!ops->get_rxfh_indir_size || !ops->set_rxfh_indir ||
      !ops->get_rxnfc)
@@ -632,28 +650,196 @@ static noinline_for_stack int ethtool_set_rxfh_indir(struct net_device *dev,
   for (i = 0; i < dev_size; i++)
    indir[i] = ethtool_rxfh_indir_default(i, rx_rings.data);
  } else {
-  if (copy_from_user(indir,
-      useraddr +
-      offsetof(struct ethtool_rxfh_indir,
-        ring_index[0]),
-      dev_size * sizeof(indir[0]))) {
+  ret = ethtool_copy_validate_indir(indir,
+        useraddr + ringidx_offset,
+        &rx_rings,
+        dev_size);
+  if (ret)
+   goto out;
+ }
+
+ ret = ops->set_rxfh_indir(dev, indir);
+
+out:
+ kfree(indir);
+ return ret;
+}
+
+static noinline_for_stack int ethtool_get_rxfh(struct net_device *dev,
+            void __user *useraddr)
+{
+ int ret;
+ const struct ethtool_ops *ops = dev->ethtool_ops;
+ u32 user_indir_size = 0, user_key_size = 0;
+ u32 dev_indir_size = 0, dev_key_size = 0;
+ u32 total_size;
+ u32 indir_offset, indir_bytes;
+ u32 key_offset;
+ u32 *indir = NULL;
+ u8 *hkey = NULL;
+ u8 *rss_config;
+
+ if (!(dev->ethtool_ops->get_rxfh_indir_size ||
+       dev->ethtool_ops->get_rxfh_key_size) ||
+       !dev->ethtool_ops->get_rxfh)
+  return -EOPNOTSUPP;
+
+ if (ops->get_rxfh_indir_size)
+  dev_indir_size = ops->get_rxfh_indir_size(dev);
+
+ indir_offset = offsetof(struct ethtool_rxfh, indir_size);
+
+ if (copy_from_user(&user_indir_size,
+      useraddr + indir_offset,
+      sizeof(user_indir_size)))
+  return -EFAULT;
+
+ if (copy_to_user(useraddr + indir_offset,
+    &dev_indir_size, sizeof(dev_indir_size)))
+  return -EFAULT;
+
+ if (ops->get_rxfh_key_size)
+  dev_key_size = ops->get_rxfh_key_size(dev);
+
+ if ((dev_key_size + dev_indir_size) == 0)
+  return -EOPNOTSUPP;
+
+ key_offset = offsetof(struct ethtool_rxfh, key_size);
+
+ if (copy_from_user(&user_key_size,
+      useraddr + key_offset,
+      sizeof(user_key_size)))
+  return -EFAULT;
+
+ if (copy_to_user(useraddr + key_offset,
+    &dev_key_size, sizeof(dev_key_size)))
+  return -EFAULT;
+
+ /* If the user buffer size is 0, this is just a query for the
+  * device table size and key size.  Otherwise, if the User size is
+  * not equal to device table size or key size it's an error.
+  */
+ if (!user_indir_size && !user_key_size)
+  return 0;
+
+ if ((user_indir_size && (user_indir_size != dev_indir_size)) ||
+     (user_key_size && (user_key_size != dev_key_size)))
+  return -EINVAL;
+
+ indir_bytes = user_indir_size * sizeof(indir[0]);
+ total_size = indir_bytes + user_key_size;
+ rss_config = kzalloc(total_size, GFP_USER);
+ if (!rss_config)
+  return -ENOMEM;
+
+ if (user_indir_size)
+  indir = (u32 *)rss_config;
+
+ if (user_key_size)
+  hkey = rss_config + indir_bytes;
+
+ ret = dev->ethtool_ops->get_rxfh(dev, indir, hkey);
+ if (!ret) {
+  if (copy_to_user(useraddr +
+     offsetof(struct ethtool_rxfh, rss_config[0]),
+     rss_config, total_size))
    ret = -EFAULT;
+ }
+
+ kfree(rss_config);
+
+ return ret;
+}
+
+static noinline_for_stack int ethtool_set_rxfh(struct net_device *dev,
+            void __user *useraddr)
+{
+ int ret;
+ const struct ethtool_ops *ops = dev->ethtool_ops;
+ struct ethtool_rxnfc rx_rings;
+ u32 user_indir_size = 0, dev_indir_size = 0, i;
+ u32 user_key_size = 0, dev_key_size = 0;
+ u32 *indir = NULL, indir_bytes = 0;
+ u8 *hkey = NULL;
+ u8 *rss_config;
+ u32 indir_offset, key_offset;
+ u32 rss_cfg_offset = offsetof(struct ethtool_rxfh, rss_config[0]);
+
+ if (!(ops->get_rxfh_indir_size || ops->get_rxfh_key_size) ||
+     !ops->get_rxnfc || !ops->set_rxfh)
+  return -EOPNOTSUPP;
+
+ if (ops->get_rxfh_indir_size)
+  dev_indir_size = ops->get_rxfh_indir_size(dev);
+
+ indir_offset = offsetof(struct ethtool_rxfh, indir_size);
+ if (copy_from_user(&user_indir_size,
+      useraddr + indir_offset,
+      sizeof(user_indir_size)))
+  return -EFAULT;
+
+ if (ops->get_rxfh_key_size)
+  dev_key_size = dev->ethtool_ops->get_rxfh_key_size(dev);
+
+ if ((dev_key_size + dev_indir_size) == 0)
+  return -EOPNOTSUPP;
+
+ key_offset = offsetof(struct ethtool_rxfh, key_size);
+ if (copy_from_user(&user_key_size,
+      useraddr + key_offset,
+      sizeof(user_key_size)))
+  return -EFAULT;
+
+ /* If either indir or hash key is valid, proceed further.
+  */
+ if ((user_indir_size && ((user_indir_size != 0xDEADBEEF) &&
+     user_indir_size != dev_indir_size)) ||
+     (user_key_size && (user_key_size != dev_key_size)))
+  return -EINVAL;
+
+ if (user_indir_size != 0xDEADBEEF)
+  indir_bytes = dev_indir_size * sizeof(indir[0]);
+
+ rss_config = kzalloc(indir_bytes + user_key_size, GFP_USER);
+ if (!rss_config)
+  return -ENOMEM;
+
+ rx_rings.cmd = ETHTOOL_GRXRINGS;
+ ret = ops->get_rxnfc(dev, &rx_rings, NULL);
+ if (ret)
+  goto out;
+
+ /* user_indir_size == 0 means reset the indir table to default.
+  * user_indir_size == 0xDEADBEEF means indir setting is not requested.
+  */
+ if (user_indir_size && user_indir_size != 0xDEADBEEF) {
+  indir = (u32 *)rss_config;
+  ret = ethtool_copy_validate_indir(indir,
+        useraddr + rss_cfg_offset,
+        &rx_rings,
+        user_indir_size);
+  if (ret)
    goto out;
-  }
+ } else if (user_indir_size == 0) {
+  indir = (u32 *)rss_config;
+  for (i = 0; i < dev_indir_size; i++)
+   indir[i] = ethtool_rxfh_indir_default(i, rx_rings.data);
+ }
 
-  /* Validate ring indices */
-  for (i = 0; i < dev_size; i++) {
-   if (indir[i] >= rx_rings.data) {
-    ret = -EINVAL;
-    goto out;
-   }
+ if (user_key_size) {
+  hkey = rss_config + indir_bytes;
+  if (copy_from_user(hkey,
+       useraddr + rss_cfg_offset + indir_bytes,
+       user_key_size)) {
+   ret = -EFAULT;
+   goto out;
   }
  }
 
- ret = ops->set_rxfh_indir(dev, indir);
+ ret = ops->set_rxfh(dev, indir, hkey);
 
 out:
- kfree(indir);
+ kfree(rss_config);
  return ret;
 }
 
@@ -1461,6 +1647,7 @@ int dev_ethtool(struct net *net, struct ifreq *ifr)
  case ETHTOOL_GRXCLSRULE:
  case ETHTOOL_GRXCLSRLALL:
  case ETHTOOL_GRXFHINDIR:
+ case ETHTOOL_GRSSH:
  case ETHTOOL_GFEATURES:
  case ETHTOOL_GCHANNELS:
  case ETHTOOL_GET_TS_INFO:
@@ -1598,6 +1785,12 @@ int dev_ethtool(struct net *net, struct ifreq *ifr)
  case ETHTOOL_SRXFHINDIR:
   rc = ethtool_set_rxfh_indir(dev, useraddr);
   break;
+ case ETHTOOL_GRSSH:
+  rc = ethtool_get_rxfh(dev, useraddr);
+  break;
+ case ETHTOOL_SRSSH:
+  rc = ethtool_set_rxfh(dev, useraddr);
+  break;
  case ETHTOOL_GFEATURES:
   rc = ethtool_get_features(dev, useraddr);
   break;
-- 
1.7.1