From b929185dda958f73690dd312fd0356ad40f9bf2e Mon Sep 17 00:00:00 2001
From: Ilya Dryomov <ilya.dryomov@inktank.com>
Date: Tue, 18 Nov 2014 15:49:38 -0500
Subject: [block] rbd: use helpers to handle discard for layered images correctly
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1416325805-26490-24-git-send-email-idryomov@redhat.com>
Patchwork-id: 100215
O-Subject: [RHEL7.1 PATCH 23/50] rbd: use helpers to handle discard for layered images correctly
Bugzilla: 1165232
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Sage Weil <sweil@redhat.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>

From: Josh Durgin <josh.durgin@inktank.com>

Only allocate two osd ops for discard requests, since the
preallocation hint is only added for regular writes.  Use
rbd_img_obj_request_fill() to recreate the original write or discard
osd operations, isolating that logic to one place, and change the
assert in rbd_osd_req_create_copyup() to accept discard requests as
well.

Signed-off-by: Josh Durgin <josh.durgin@inktank.com>
(cherry picked from commit d3246fb0da5d70838469c01d5b6b11163b49cd86)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/rbd.c b/drivers/block/rbd.c
index 73e87c9..4b56424 100644
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@ -1978,9 +1978,10 @@ static struct ceph_osd_request *rbd_osd_req_create(
 }
 
 /*
- * Create a copyup osd request based on the information in the
- * object request supplied.  A copyup request has three osd ops,
- * a copyup method call, a hint op, and a write op.
+ * Create a copyup osd request based on the information in the object
+ * request supplied.  A copyup request has two or three osd ops, a
+ * copyup method call, potentially a hint op, and a write or truncate
+ * or zero op.
  */
 static struct ceph_osd_request *
 rbd_osd_req_create_copyup(struct rbd_obj_request *obj_request)
@@ -1990,18 +1991,24 @@ rbd_osd_req_create_copyup(struct rbd_obj_request *obj_request)
  struct rbd_device *rbd_dev;
  struct ceph_osd_client *osdc;
  struct ceph_osd_request *osd_req;
+ int num_osd_ops = 3;
 
  rbd_assert(obj_request_img_data_test(obj_request));
  img_request = obj_request->img_request;
  rbd_assert(img_request);
- rbd_assert(img_request_write_test(img_request));
+ rbd_assert(img_request_write_test(img_request) ||
+   img_request_discard_test(img_request));
 
- /* Allocate and initialize the request, for the three ops */
+ if (img_request_discard_test(img_request))
+  num_osd_ops = 2;
+
+ /* Allocate and initialize the request, for all the ops */
 
  snapc = img_request->snapc;
  rbd_dev = img_request->rbd_dev;
  osdc = &rbd_dev->rbd_client->client->osdc;
- osd_req = ceph_osdc_alloc_request(osdc, snapc, 3, false, GFP_ATOMIC);
+ osd_req = ceph_osdc_alloc_request(osdc, snapc, num_osd_ops,
+      false, GFP_ATOMIC);
  if (!osd_req)
   return NULL; /* ENOMEM */
 
@@ -2381,10 +2388,9 @@ static void rbd_img_obj_request_fill(struct rbd_obj_request *obj_request,
  u16 opcode;
 
  if (op_type == OBJ_OP_DISCARD) {
-  if (!offset && (length == object_size)
-   && (!img_request_layered_test(img_request) ||
-    (rbd_dev->parent_overlap <=
-     obj_request->img_offset))) {
+  if (!offset && length == object_size &&
+      (!img_request_layered_test(img_request) ||
+       !obj_request_overlaps_parent(obj_request))) {
    opcode = CEPH_OSD_OP_DELETE;
   } else if ((offset + length == object_size)) {
    opcode = CEPH_OSD_OP_TRUNCATE;
@@ -2543,7 +2549,8 @@ rbd_img_obj_copyup_callback(struct rbd_obj_request *obj_request)
  struct page **pages;
  u32 page_count;
 
- rbd_assert(obj_request->type == OBJ_REQUEST_BIO);
+ rbd_assert(obj_request->type == OBJ_REQUEST_BIO ||
+  obj_request->type == OBJ_REQUEST_NODATA);
  rbd_assert(obj_request_img_data_test(obj_request));
  img_request = obj_request->img_request;
  rbd_assert(img_request);
@@ -2581,11 +2588,10 @@ rbd_img_obj_parent_read_full_callback(struct rbd_img_request *img_request)
  struct ceph_osd_client *osdc;
  struct rbd_device *rbd_dev;
  struct page **pages;
+ enum obj_operation_type op_type;
  u32 page_count;
  int img_result;
  u64 parent_length;
- u64 offset;
- u64 length;
 
  rbd_assert(img_request_child_test(img_request));
 
@@ -2649,26 +2655,10 @@ rbd_img_obj_parent_read_full_callback(struct rbd_img_request *img_request)
  osd_req_op_cls_request_data_pages(osd_req, 0, pages, parent_length, 0,
       false, false);
 
- /* Then the hint op */
-
- osd_req_op_alloc_hint_init(osd_req, 1, rbd_obj_bytes(&rbd_dev->header),
-       rbd_obj_bytes(&rbd_dev->header));
-
- /* And the original write request op */
-
- offset = orig_request->offset;
- length = orig_request->length;
- osd_req_op_extent_init(osd_req, 2, CEPH_OSD_OP_WRITE,
-     offset, length, 0, 0);
- if (orig_request->type == OBJ_REQUEST_BIO)
-  osd_req_op_extent_osd_data_bio(osd_req, 2,
-     orig_request->bio_list, length);
- else
-  osd_req_op_extent_osd_data_pages(osd_req, 2,
-     orig_request->pages, length,
-     offset & ~PAGE_MASK, false, false);
+ /* Add the other op(s) */
 
- rbd_osd_req_format_write(orig_request);
+ op_type = rbd_img_request_op_type(orig_request->img_request);
+ rbd_img_obj_request_fill(orig_request, osd_req, op_type, 1);
 
  /* All set, send it off. */
 
-- 
1.7.1