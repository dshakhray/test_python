From a7461783c71de41572040e9a8c02306bf6d5ea19 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sat, 19 Jul 2014 04:30:48 -0400
Subject: [pci] Enable INTx if BIOS left them disabled

Message-id: <20140719043048.19438.76447.stgit@gir.stowe>
Patchwork-id: 86039
O-Subject: [RHEL7.1 PATCH 77/81] PCI: Enable INTx if BIOS left them disabled
Bugzilla: 1110895
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110895
Upstream Status: 1f42db786b14a31bf807fc41ee5583a00c08fcb1

commit 1f42db786b14a31bf807fc41ee5583a00c08fcb1
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Fri Feb 14 13:48:16 2014 -0700

    PCI: Enable INTx if BIOS left them disabled

    Some firmware leaves the Interrupt Disable bit set even if the device uses
    INTx interrupts.  Clear Interrupt Disable so we get those interrupts.

    Based on the report mentioned below, if the user selects the "EHCI only"
    option in the Intel Baytrail BIOS, the EHCI device is handed off to the OS
    with the PCI_COMMAND_INTX_DISABLE bit set.

    Link: http://lkml.kernel.org/r/20140114181721.GC12126@xanatos
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=70601
    Reported-by: Chris Cheng <chris.cheng@atrustcorp.com>
    Reported-and-tested-by: Jamie Chen <jamie.chen@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: stable@vger.kernel.org
    CC: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 268aaa1..14959f4 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -1181,6 +1181,8 @@ EXPORT_SYMBOL_GPL(pci_load_and_free_saved_state);
 static int do_pci_enable_device(struct pci_dev *dev, int bars)
 {
  int err;
+ u16 cmd;
+ u8 pin;
 
  err = pci_set_power_state(dev, PCI_D0);
  if (err < 0 && err != -EIO)
@@ -1190,6 +1192,14 @@ static int do_pci_enable_device(struct pci_dev *dev, int bars)
   return err;
  pci_fixup_device(pci_fixup_enable, dev);
 
+ pci_read_config_byte(dev, PCI_INTERRUPT_PIN, &pin);
+ if (pin) {
+  pci_read_config_word(dev, PCI_COMMAND, &cmd);
+  if (cmd & PCI_COMMAND_INTX_DISABLE)
+   pci_write_config_word(dev, PCI_COMMAND,
+           cmd & ~PCI_COMMAND_INTX_DISABLE);
+ }
+
  return 0;
 }
 
-- 
1.7.1