From e3752bdf2de3d2c035efed287444024ef58cec2d Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:02:49 -0400
Subject: [acpi] hotplug/pci: Do not exectute _PS0 and _PS3 directly

Message-id: <20140710010249.22146.33045.stgit@gir.stowe>
Patchwork-id: 85583
O-Subject: [RHEL7.1 PATCH 044/105] ACPI / hotplug / PCI: Do not exectute _PS0 and _PS3 directly
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: bc805a55392a7cb3e9b1251d00449c70e3967fc5

commit bc805a55392a7cb3e9b1251d00449c70e3967fc5
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Jul 13 23:27:26 2013 +0200

    ACPI / hotplug / PCI: Do not exectute _PS0 and _PS3 directly

    The ACPI-based PCI hotplug (acpiphp) core code need not and really
    should not execute _PS0 and _PS3 directly for devices it handles.

    First of all, it is not necessary to put devices into D3 after
    acpi_bus_trim() has walked through them, because
    acpi_device_unregister() invoked by it puts each device into D3cold
    before returning.  Thus after disable_device() the slot should be
    powered down already.

    Second, calling _PS0 directly on ACPI device objects may not be
    appropriate, because it may require power resources to be set up in
    a specific way in advance and that must be taken care of by the ACPI
    core.  Thus modify acpiphp_bus_add() to power up the device using
    the appropriate interface after it has run acpi_bus_scan() on its
    handle.

    After that, the functions executing _PS0 and _PS3, power_on_slot()
    and power_off_slot(), are not necessary any more, so drop them
    and update the code calling them accordingly.  Also drop the
    function flags related to device power states, since they aren't
    useful any more too.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp.h b/drivers/pci/hotplug/acpiphp.h
index f30caf5..dac836c 100644
--- a/drivers/pci/hotplug/acpiphp.h
+++ b/drivers/pci/hotplug/acpiphp.h
@@ -152,7 +152,6 @@ struct acpiphp_attention_info
 
 /* slot flags */
 
-#define SLOT_POWEREDON  (0x00000001)
 #define SLOT_ENABLED  (0x00000002)
 #define SLOT_MULTIFUNCTION (0x00000004)
 
@@ -160,11 +159,7 @@ struct acpiphp_attention_info
 
 #define FUNC_HAS_STA  (0x00000001)
 #define FUNC_HAS_EJ0  (0x00000002)
-#define FUNC_HAS_PS0  (0x00000010)
-#define FUNC_HAS_PS1  (0x00000020)
-#define FUNC_HAS_PS2  (0x00000040)
-#define FUNC_HAS_PS3  (0x00000080)
-#define FUNC_HAS_DCK            (0x00000100)
+#define FUNC_HAS_DCK            (0x00000004)
 
 /* function prototypes */
 
diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index f055389..c30acb2 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -303,12 +303,6 @@ static acpi_status register_slot(acpi_handle handle, u32 lvl, void *data,
  if (acpi_has_method(handle, "_STA"))
   newfunc->flags |= FUNC_HAS_STA;
 
- if (acpi_has_method(handle, "_PS0"))
-  newfunc->flags |= FUNC_HAS_PS0;
-
- if (acpi_has_method(handle, "_PS3"))
-  newfunc->flags |= FUNC_HAS_PS3;
-
  if (acpi_has_method(handle, "_DCK"))
   newfunc->flags |= FUNC_HAS_DCK;
 
@@ -366,7 +360,7 @@ static acpi_status register_slot(acpi_handle handle, u32 lvl, void *data,
 
  if (pci_bus_read_dev_vendor_id(pbus, PCI_DEVFN(device, function),
            &val, 60*1000))
-  slot->flags |= (SLOT_ENABLED | SLOT_POWEREDON);
+  slot->flags |= SLOT_ENABLED;
 
  if (is_dock_device(handle)) {
   /* we don't want to call this device's _EJ0
@@ -446,73 +440,6 @@ static void cleanup_bridge(struct acpiphp_bridge *bridge)
  mutex_unlock(&bridge_mutex);
 }
 
-static int power_on_slot(struct acpiphp_slot *slot)
-{
- acpi_status status;
- struct acpiphp_func *func;
- int retval = 0;
-
- /* if already enabled, just skip */
- if (slot->flags & SLOT_POWEREDON)
-  goto err_exit;
-
- list_for_each_entry(func, &slot->funcs, sibling) {
-  if (func->flags & FUNC_HAS_PS0) {
-   pr_debug("%s: executing _PS0\n", __func__);
-   status = acpi_evaluate_object(func_to_handle(func),
-            "_PS0", NULL, NULL);
-   if (ACPI_FAILURE(status)) {
-    pr_warn("%s: _PS0 failed\n", __func__);
-    retval = -1;
-    goto err_exit;
-   } else
-    break;
-  }
- }
-
- /* TBD: evaluate _STA to check if the slot is enabled */
-
- slot->flags |= SLOT_POWEREDON;
-
- err_exit:
- return retval;
-}
-
-
-static int power_off_slot(struct acpiphp_slot *slot)
-{
- acpi_status status;
- struct acpiphp_func *func;
-
- int retval = 0;
-
- /* if already disabled, just skip */
- if ((slot->flags & SLOT_POWEREDON) == 0)
-  goto err_exit;
-
- list_for_each_entry(func, &slot->funcs, sibling) {
-  if (func->flags & FUNC_HAS_PS3) {
-   status = acpi_evaluate_object(func_to_handle(func),
-            "_PS3", NULL, NULL);
-   if (ACPI_FAILURE(status)) {
-    pr_warn("%s: _PS3 failed\n", __func__);
-    retval = -1;
-    goto err_exit;
-   } else
-    break;
-  }
- }
-
- /* TBD: evaluate _STA to check if the slot is disabled */
-
- slot->flags &= (~SLOT_POWEREDON);
-
- err_exit:
- return retval;
-}
-
-
-
 /**
  * acpiphp_max_busnr - return the highest reserved bus number under the given bus.
  * @bus: bus to start search with
@@ -559,8 +486,13 @@ static void acpiphp_bus_trim(acpi_handle handle)
  */
 static void acpiphp_bus_add(acpi_handle handle)
 {
+ struct acpi_device *adev = NULL;
+
  acpiphp_bus_trim(handle);
  acpi_bus_scan(handle);
+ acpi_bus_get_device(handle, &adev);
+ if (adev)
+  acpi_device_set_power(adev, ACPI_STATE_D0);
 }
 
 static void acpiphp_set_acpi_region(struct acpiphp_slot *slot)
@@ -1095,23 +1027,8 @@ int acpiphp_enable_slot(struct acpiphp_slot *slot)
  int retval;
 
  mutex_lock(&slot->crit_sect);
-
- /* wake up all functions */
- retval = power_on_slot(slot);
- if (retval)
-  goto err_exit;
-
- if (get_slot_status(slot) == ACPI_STA_ALL) {
-  /* configure all functions */
-  retval = enable_device(slot);
-  if (retval)
-   power_off_slot(slot);
- } else {
-  pr_debug("%s: Slot status is not ACPI_STA_ALL\n", __func__);
-  power_off_slot(slot);
- }
-
- err_exit:
+ /* configure all functions */
+ retval = enable_device(slot);
  mutex_unlock(&slot->crit_sect);
  return retval;
 }
@@ -1132,11 +1049,6 @@ int acpiphp_disable_and_eject_slot(struct acpiphp_slot *slot)
  if (retval)
   goto err_exit;
 
- /* power off all functions */
- retval = power_off_slot(slot);
- if (retval)
-  goto err_exit;
-
  list_for_each_entry(func, &slot->funcs, sibling)
   if (func->flags & FUNC_HAS_EJ0) {
    acpi_handle handle = func_to_handle(func);
@@ -1159,7 +1071,7 @@ int acpiphp_disable_and_eject_slot(struct acpiphp_slot *slot)
  */
 u8 acpiphp_get_power_status(struct acpiphp_slot *slot)
 {
- return (slot->flags & SLOT_POWEREDON);
+ return (slot->flags & SLOT_ENABLED);
 }
 
 
-- 
1.7.1