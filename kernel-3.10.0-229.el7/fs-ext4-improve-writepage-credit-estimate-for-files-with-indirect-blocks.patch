From 201f451c762553cbfabb641a341b37a8d63d0861 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:52:47 -0400
Subject: [fs] ext4: improve writepage credit estimate for files with indirect blocks

Message-id: <1414058125-4183-14-git-send-email-lczerner@redhat.com>
Patchwork-id: 98114
O-Subject: [RHEL 7.1 PATCH v2 013/171] ext4: improve writepage credit estimate for files with indirect blocks
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit fa55a0ed0386e1fcbb8a229a06a5c70477d0d6e5

 ext4_ind_trans_blocks() wrongly used 'chunk' argument to decide whether
 blocks mapped are logically contiguous. That is wrong since the argument
 informs whether the blocks are physically contiguous. As the blocks
 mapped are always logically contiguous and that's all
 ext4_ind_trans_blocks() cares about, just remove the 'chunk' argument.

 Reviewed-by: Zheng Liu <wenqing.lz@taobao.com>
 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index d1e7444..ec53dd6 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2116,7 +2116,7 @@ extern ssize_t ext4_ind_direct_IO(int rw, struct kiocb *iocb,
     const struct iovec *iov, loff_t offset,
     unsigned long nr_segs);
 extern int ext4_ind_calc_metadata_amount(struct inode *inode, sector_t lblock);
-extern int ext4_ind_trans_blocks(struct inode *inode, int nrblocks, int chunk);
+extern int ext4_ind_trans_blocks(struct inode *inode, int nrblocks);
 extern void ext4_ind_truncate(handle_t *, struct inode *inode);
 extern int ext4_free_hole_blocks(handle_t *handle, struct inode *inode,
      ext4_lblk_t first, ext4_lblk_t stop);
diff --git a/fs/ext4/indirect.c b/fs/ext4/indirect.c
index f690858..c4c0b13 100644
--- a/fs/ext4/indirect.c
+++ b/fs/ext4/indirect.c
@@ -779,27 +779,18 @@ int ext4_ind_calc_metadata_amount(struct inode *inode, sector_t lblock)
  return (blk_bits / EXT4_ADDR_PER_BLOCK_BITS(inode->i_sb)) + 1;
 }
 
-int ext4_ind_trans_blocks(struct inode *inode, int nrblocks, int chunk)
+/*
+ * Calculate number of indirect blocks touched by mapping @nrblocks logically
+ * contiguous blocks
+ */
+int ext4_ind_trans_blocks(struct inode *inode, int nrblocks)
 {
- int indirects;
-
- /* if nrblocks are contiguous */
- if (chunk) {
-  /*
-   * With N contiguous data blocks, we need at most
-   * N/EXT4_ADDR_PER_BLOCK(inode->i_sb) + 1 indirect blocks,
-   * 2 dindirect blocks, and 1 tindirect block
-   */
-  return DIV_ROUND_UP(nrblocks,
-        EXT4_ADDR_PER_BLOCK(inode->i_sb)) + 4;
- }
  /*
-  * if nrblocks are not contiguous, worse case, each block touch
-  * a indirect block, and each indirect block touch a double indirect
-  * block, plus a triple indirect block
+  * With N contiguous data blocks, we need at most
+  * N/EXT4_ADDR_PER_BLOCK(inode->i_sb) + 1 indirect blocks,
+  * 2 dindirect blocks, and 1 tindirect block
   */
- indirects = nrblocks * 2 + 1;
- return indirects;
+ return DIV_ROUND_UP(nrblocks, EXT4_ADDR_PER_BLOCK(inode->i_sb)) + 4;
 }
 
 /*
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 1ea7865..824b3c8 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -4669,7 +4669,7 @@ int ext4_getattr(struct vfsmount *mnt, struct dentry *dentry,
 static int ext4_index_trans_blocks(struct inode *inode, int nrblocks, int chunk)
 {
  if (!(ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS)))
-  return ext4_ind_trans_blocks(inode, nrblocks, chunk);
+  return ext4_ind_trans_blocks(inode, nrblocks);
  return ext4_ext_index_trans_blocks(inode, nrblocks, chunk);
 }
 
-- 
1.7.1