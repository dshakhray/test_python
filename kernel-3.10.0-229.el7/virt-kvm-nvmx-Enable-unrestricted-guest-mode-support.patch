From e63bd5352a3e7952a323795299cde07cc2b79d2b Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:37:59 -0400
Subject: [virt] kvm/nvmx: Enable unrestricted guest mode support

Message-id: <1406040016-3289-85-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86162
O-Subject: [RHEL7 PATCH v2 084/221] KVM: nVMX: Enable unrestricted guest mode support
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jan Kiszka <jan.kiszka@siemens.com>

Now that we provide EPT support, there is no reason to torture our
guests by hiding the relieving unrestricted guest mode feature. We just
need to relax CR0 checks for always-on bits as PE and PG can now be
switched off.

Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
Reviewed-by: Gleb Natapov <gleb@redhat.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 92fbc7b195b824e201d9f06f2b93105f72384d65)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 2b4602d..46bc83c 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -2252,6 +2252,7 @@ static __init void nested_vmx_setup_ctls_msrs(void)
  nested_vmx_secondary_ctls_low = 0;
  nested_vmx_secondary_ctls_high &=
   SECONDARY_EXEC_VIRTUALIZE_APIC_ACCESSES |
+  SECONDARY_EXEC_UNRESTRICTED_GUEST |
   SECONDARY_EXEC_WBINVD_EXITING;
 
  if (enable_ept) {
@@ -4881,6 +4882,17 @@ vmx_patch_hypercall(struct kvm_vcpu *vcpu, unsigned char *hypercall)
  hypercall[2] = 0xc1;
 }
 
+static bool nested_cr0_valid(struct vmcs12 *vmcs12, unsigned long val)
+{
+ unsigned long always_on = VMXON_CR0_ALWAYSON;
+
+ if (nested_vmx_secondary_ctls_high &
+  SECONDARY_EXEC_UNRESTRICTED_GUEST &&
+     nested_cpu_has2(vmcs12, SECONDARY_EXEC_UNRESTRICTED_GUEST))
+  always_on &= ~(X86_CR0_PE | X86_CR0_PG);
+ return (val & always_on) == always_on;
+}
+
 /* called to set cr0 as appropriate for a mov-to-cr0 exit. */
 static int handle_set_cr0(struct kvm_vcpu *vcpu, unsigned long val)
 {
@@ -4899,9 +4911,7 @@ static int handle_set_cr0(struct kvm_vcpu *vcpu, unsigned long val)
   val = (val & ~vmcs12->cr0_guest_host_mask) |
    (vmcs12->guest_cr0 & vmcs12->cr0_guest_host_mask);
 
-  /* TODO: will have to take unrestricted guest mode into
-   * account */
-  if ((val & VMXON_CR0_ALWAYSON) != VMXON_CR0_ALWAYSON)
+  if (!nested_cr0_valid(vmcs12, val))
    return 1;
 
   if (kvm_set_cr0(vcpu, val))
@@ -7877,7 +7887,7 @@ static int nested_vmx_run(struct kvm_vcpu *vcpu, bool launch)
   return 1;
  }
 
- if (((vmcs12->guest_cr0 & VMXON_CR0_ALWAYSON) != VMXON_CR0_ALWAYSON) ||
+ if (!nested_cr0_valid(vmcs12, vmcs12->guest_cr0) ||
      ((vmcs12->guest_cr4 & VMXON_CR4_ALWAYSON) != VMXON_CR4_ALWAYSON)) {
   nested_vmx_entry_failure(vcpu, vmcs12,
    EXIT_REASON_INVALID_STATE, ENTRY_FAIL_DEFAULT);
-- 
1.7.1