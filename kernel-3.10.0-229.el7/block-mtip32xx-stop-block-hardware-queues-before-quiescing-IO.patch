From 7e892830e499cda1824fe32456bfc6d6df5488cc Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 15:30:18 -0400
Subject: [block] mtip32xx: stop block hardware queues before quiescing IO

Message-id: <1402673421-17117-16-git-send-email-snitzer@redhat.com>
Patchwork-id: 83925
O-Subject: [RHEL7.1 PATCH 15/18] mtip32xx: stop block hardware queues before quiescing IO
Bugzilla: 1105703
RH-Acked-by: David Milburn <dmilburn@redhat.com>

BZ: 1105703

Upstream commit 9acf03cfb1fbecc058d3f223323e3ed97763f1e6
Author: Jens Axboe <axboe@fb.com>
Date:   Wed May 14 08:22:56 2014 -0600

    mtip32xx: stop block hardware queues before quiescing IO

    We need to stop the block layer queues to prevent new "normal"
    IO from entering the driver, while we wait for existing commands
    to finish.

    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/mtip32xx/mtip32xx.c b/drivers/block/mtip32xx/mtip32xx.c
index 948b284..2e2046c 100644
--- a/drivers/block/mtip32xx/mtip32xx.c
+++ b/drivers/block/mtip32xx/mtip32xx.c
@@ -1029,6 +1029,8 @@ static int mtip_quiesce_io(struct mtip_port *port, unsigned long timeout)
  unsigned int n;
  unsigned int active = 1;
 
+ blk_mq_stop_hw_queues(port->dd->queue);
+
  to = jiffies + msecs_to_jiffies(timeout);
  do {
   if (test_bit(MTIP_PF_SVC_THD_ACTIVE_BIT, &port->flags) &&
@@ -1037,7 +1039,7 @@ static int mtip_quiesce_io(struct mtip_port *port, unsigned long timeout)
    continue; /* svc thd is actively issuing commands */
   }
   if (test_bit(MTIP_DDF_REMOVE_PENDING_BIT, &port->dd->dd_flag))
-   return -EFAULT;
+   goto err_fault;
   /*
    * Ignore s_active bit 0 of array element 0.
    * This bit will always be set
@@ -1052,7 +1054,11 @@ static int mtip_quiesce_io(struct mtip_port *port, unsigned long timeout)
   msleep(20);
  } while (time_before(jiffies, to));
 
+ blk_mq_start_stopped_hw_queues(port->dd->queue, true);
  return active ? -EBUSY : 0;
+err_fault:
+ blk_mq_start_stopped_hw_queues(port->dd->queue, true);
+ return -EFAULT;
 }
 
 /*
-- 
1.7.1