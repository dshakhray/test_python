From 3c18049c0476a6b7272bdd3e5e9905314bffeec9 Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Tue, 9 Dec 2014 20:01:35 -0500
Subject: [kernel] kthread: ensure locality of task_struct allocations

Message-id: <1418155299-17945-2-git-send-email-gduarte@redhat.com>
Patchwork-id: 101206
O-Subject: [RHEL7.1 PATCH BZ 953583 1/5] kthread: ensure locality of task_struct allocations
Bugzilla: 953583
RH-Acked-by: David Gibson <dgibson@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

BZ 953583
Upstream Status: 81c98869faa5f3a9457c93efef908ef476326b31

commit 81c98869faa5f3a9457c93efef908ef476326b31
Author: Nishanth Aravamudan <nacc@linux.vnet.ibm.com>
Date:   Thu Apr 3 14:46:25 2014 -0700

    kthread: ensure locality of task_struct allocations

    In the presence of memoryless nodes, numa_node_id() will return the
    current CPU's NUMA node, but that may not be where we expect to allocate
    from memory from.  Instead, we should rely on the fallback code in the
    memory allocator itself, by using NUMA_NO_NODE.  Also, when calling
    kthread_create_on_node(), use the nearest node with memory to the cpu in
    question, rather than the node it is running on.

    Signed-off-by: Nishanth Aravamudan <nacc@linux.vnet.ibm.com>
    Reviewed-by: Christoph Lameter <cl@linux.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Cc: Anton Blanchard <anton@samba.org>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Wanpeng Li <liwanp@linux.vnet.ibm.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Ben Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/kthread.c b/kernel/kthread.c
index 760e86d..35cbf29 100644
--- a/kernel/kthread.c
+++ b/kernel/kthread.c
@@ -210,7 +210,7 @@ int tsk_fork_get_node(struct task_struct *tsk)
  if (tsk == kthreadd_task)
   return tsk->pref_node_fork;
 #endif
- return numa_node_id();
+ return NUMA_NO_NODE;
 }
 
 static void create_kthread(struct kthread_create_info *create)
@@ -332,7 +332,7 @@ struct task_struct *kthread_create_on_cpu(int (*threadfn)(void *data),
 {
  struct task_struct *p;
 
- p = kthread_create_on_node(threadfn, data, cpu_to_node(cpu), namefmt,
+ p = kthread_create_on_node(threadfn, data, cpu_to_mem(cpu), namefmt,
        cpu);
  if (IS_ERR(p))
   return p;
-- 
1.7.1