From 0de7d9e740559ab95de0c789e161b1574378628c Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:07:36 -0400
Subject: [tools] perf: Add libdw DWARF post unwind support for ARM

Message-id: <1410181752-25631-212-git-send-email-jolsa@redhat.com>
Patchwork-id: 91820
O-Subject: [PATCH RHEL7.1 BZ1134356 211/307] perf tools: Add libdw DWARF post unwind support for ARM
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 97eac381b113932bd7bd4a5c3c68b18e9ff7a2a0
Author: Jean Pihet <jean.pihet@linaro.org>
Date: Fri May 16 10:41:12 2014 +0200

description
===========
Adding libdw DWARF post unwind support, which is part
of elfutils-devel/libdw-dev package from version 0.158.

The new code is contained in unwin-libdw.c object, and
implements unwind__get_entries unwind interface function.
---
 create mode 100644 tools/perf/arch/arm/util/unwind-libdw.c

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/arch/arm/Makefile b/tools/perf/arch/arm/Makefile
index 221f21d..09d6215 100644
--- a/tools/perf/arch/arm/Makefile
+++ b/tools/perf/arch/arm/Makefile
@@ -4,6 +4,11 @@ LIB_OBJS += $(OUTPUT)arch/$(ARCH)/util/dwarf-regs.o
 endif
 ifndef NO_LIBUNWIND
 LIB_OBJS += $(OUTPUT)arch/$(ARCH)/util/unwind-libunwind.o
+endif
+ifndef NO_LIBDW_DWARF_UNWIND
+LIB_OBJS += $(OUTPUT)arch/$(ARCH)/util/unwind-libdw.o
+endif
+ifndef NO_DWARF_UNWIND
 LIB_OBJS += $(OUTPUT)arch/$(ARCH)/tests/regs_load.o
 LIB_OBJS += $(OUTPUT)arch/$(ARCH)/tests/dwarf-unwind.o
 endif
diff --git a/tools/perf/arch/arm/util/unwind-libdw.c b/tools/perf/arch/arm/util/unwind-libdw.c
new file mode 100644
index 0000000..b4176c6
--- /dev/null
+++ b/tools/perf/arch/arm/util/unwind-libdw.c
@@ -0,0 +1,36 @@
+#include <elfutils/libdwfl.h>
+#include "../../util/unwind-libdw.h"
+#include "../../util/perf_regs.h"
+
+bool libdw__arch_set_initial_registers(Dwfl_Thread *thread, void *arg)
+{
+ struct unwind_info *ui = arg;
+ struct regs_dump *user_regs = &ui->sample->user_regs;
+ Dwarf_Word dwarf_regs[PERF_REG_ARM_MAX];
+
+#define REG(r) ({      \
+ Dwarf_Word val = 0;     \
+ perf_reg_value(&val, user_regs, PERF_REG_ARM_##r); \
+ val;       \
+})
+
+ dwarf_regs[0]  = REG(R0);
+ dwarf_regs[1]  = REG(R1);
+ dwarf_regs[2]  = REG(R2);
+ dwarf_regs[3]  = REG(R3);
+ dwarf_regs[4]  = REG(R4);
+ dwarf_regs[5]  = REG(R5);
+ dwarf_regs[6]  = REG(R6);
+ dwarf_regs[7]  = REG(R7);
+ dwarf_regs[8]  = REG(R8);
+ dwarf_regs[9]  = REG(R9);
+ dwarf_regs[10] = REG(R10);
+ dwarf_regs[11] = REG(FP);
+ dwarf_regs[12] = REG(IP);
+ dwarf_regs[13] = REG(SP);
+ dwarf_regs[14] = REG(LR);
+ dwarf_regs[15] = REG(PC);
+
+ return dwfl_thread_state_registers(thread, 0, PERF_REG_ARM_MAX,
+        dwarf_regs);
+}
-- 
1.7.1