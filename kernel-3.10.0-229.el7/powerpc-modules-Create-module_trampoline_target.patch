From 3100b105ed824fa7c295a0ca20487f69d0274e8f Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:11:11 -0400
Subject: [powerpc] modules: Create module_trampoline_target()

Message-id: <1410545655-205645-443-git-send-email-dzickus@redhat.com>
Patchwork-id: 94550
O-Subject: [RHEL7 PATCH 442/626] powerpc/modules: Create module_trampoline_target()
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit dd9fa162505c07e1917c96a1a12ca117b1afe55a
Author: Anton Blanchard <anton@samba.org>
Date:   Fri Apr 4 15:58:42 2014 +1100

    powerpc/modules: Create module_trampoline_target()

    ftrace has way too much knowledge of our kernel module trampoline
    layout hidden inside it. Create module_trampoline_target() that gives
    the target address of a kernel module trampoline.

    Signed-off-by: Anton Blanchard <anton@samba.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/module.h b/arch/powerpc/include/asm/module.h
index ddda466..4d32033 100644
--- a/arch/powerpc/include/asm/module.h
+++ b/arch/powerpc/include/asm/module.h
@@ -83,6 +83,8 @@ struct mod_arch_specific {
 #endif
 
 bool is_module_trampoline(u32 *insns);
+int module_trampoline_target(struct module *mod, u32 *trampoline,
+        unsigned long *target);
 
 struct exception_table_entry;
 void sort_ex_table(struct exception_table_entry *start,
diff --git a/arch/powerpc/kernel/module_64.c b/arch/powerpc/kernel/module_64.c
index 4db5ecd..ef349d0 100644
--- a/arch/powerpc/kernel/module_64.c
+++ b/arch/powerpc/kernel/module_64.c
@@ -176,6 +176,35 @@ bool is_module_trampoline(u32 *p)
  return true;
 }
 
+int module_trampoline_target(struct module *mod, u32 *trampoline,
+        unsigned long *target)
+{
+ u32 buf[2];
+ u16 upper, lower;
+ long offset;
+ void *toc_entry;
+
+ if (probe_kernel_read(buf, trampoline, sizeof(buf)))
+  return -EFAULT;
+
+ upper = buf[0] & 0xffff;
+ lower = buf[1] & 0xffff;
+
+ /* perform the addis/addi, both signed */
+ offset = ((short)upper << 16) + (short)lower;
+
+ /*
+  * Now get the address this trampoline jumps to. This
+  * is always 32 bytes into our trampoline stub.
+  */
+ toc_entry = (void *)mod->arch.toc + offset + 32;
+
+ if (probe_kernel_read(target, toc_entry, sizeof(*target)))
+  return -EFAULT;
+
+ return 0;
+}
+
 #endif
 
 /* Count how many different 24-bit relocations (different symbol,
-- 
1.7.1