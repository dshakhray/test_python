From 6cd25aed12ec50e08263bd63143cf5a87de5def6 Mon Sep 17 00:00:00 2001
From: David Milburn <dmilburn@redhat.com>
Date: Thu, 8 May 2014 15:36:55 -0400
Subject: [ata] ahci: accommodate tag ordered controller

Message-id: <1399563415-6346-1-git-send-email-dmilburn@redhat.com>
Patchwork-id: 79567
O-Subject: [RHEL7.1 PATCH] libata/ahci: accommodate tag ordered controller
Bugzilla: 1083746
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>

commit 8a4aeec8d2d6a3edeffbdfae451cdf05cbf0fefd
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Apr 17 11:48:21 2014 -0700

    libata/ahci: accommodate tag ordered controllers

    The AHCI spec allows implementations to issue commands in tag order
    rather than FIFO order:

     5.3.2.12 P:SelectCmd
     HBA sets pSlotLoc = (pSlotLoc + 1) mod (CAP.NCS + 1)
     or HBA selects the command to issue that has had the
     PxCI bit set to '1' longer than any other command
     pending to be issued.

    The result is that commands posted sequentially (time-wise) may play out
    of sequence when issued by hardware.

    This behavior has likely been hidden by drives that arrange for commands
    to complete in issue order.  However, it appears recent drives (two from
    different vendors that we have found so far) inflict out-of-order
    completions as a matter of course.  So, we need to take care to maintain
    ordered submission, otherwise we risk triggering a drive to fall out of
    sequential-io automation and back to random-io processing, which incurs
    large latency and degrades throughput.

    This issue was found in simple benchmarks where QD=2 seq-write
    performance was 30-50% *greater* than QD=32 seq-write performance.

    Tagging for -stable and making the change globally since it has a low
    risk-to-reward ratio.  Also, word is that recent versions of an unnamed
    OS also does it this way now.  So, drives in the field are already
    experienced with this tag ordering scheme.

    Cc: <stable@vger.kernel.org>
    Cc: Dave Jiang <dave.jiang@intel.com>
    Cc: Ed Ciechanowski <ed.ciechanowski@intel.com>
    Reviewed-by: Matthew Wilcox <matthew.r.wilcox@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>

https://bugzilla.redhat.com/show_bug.cgi?id=1083746
https://brewweb.devel.redhat.com/taskinfo?taskID=7373142

Intel has verified a patched test kernel, please review and ACK.

Thanks,
David

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/ata/libata-core.c b/drivers/ata/libata-core.c
index db49632..f50355e 100644
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@ -4734,21 +4734,26 @@ void swap_buf_le16(u16 *buf, unsigned int buf_words)
 static struct ata_queued_cmd *ata_qc_new(struct ata_port *ap)
 {
  struct ata_queued_cmd *qc = NULL;
- unsigned int i;
+ unsigned int i, tag;
 
  /* no command while frozen */
  if (unlikely(ap->pflags & ATA_PFLAG_FROZEN))
   return NULL;
 
- /* the last tag is reserved for internal command. */
- for (i = 0; i < ATA_MAX_QUEUE - 1; i++)
-  if (!test_and_set_bit(i, &ap->qc_allocated)) {
-   qc = __ata_qc_from_tag(ap, i);
+ for (i = 0; i < ATA_MAX_QUEUE; i++) {
+  tag = (i + ap->last_tag + 1) % ATA_MAX_QUEUE;
+
+  /* the last tag is reserved for internal command. */
+  if (tag == ATA_TAG_INTERNAL)
+   continue;
+
+  if (!test_and_set_bit(tag, &ap->qc_allocated)) {
+   qc = __ata_qc_from_tag(ap, tag);
+   qc->tag = tag;
+   ap->last_tag = tag;
    break;
   }
-
- if (qc)
-  qc->tag = i;
+ }
 
  return qc;
 }
diff --git a/include/linux/libata.h b/include/linux/libata.h
index 47e0292..9c5dc3c 100644
--- a/include/linux/libata.h
+++ b/include/linux/libata.h
@@ -770,6 +770,7 @@ struct ata_port {
  unsigned long  qc_allocated;
  unsigned int  qc_active;
  int   nr_active_links; /* #links with active qcs */
+ unsigned int  last_tag; /* track next tag hw expects */
 
  struct ata_link  link;  /* host default link */
  struct ata_link  *slave_link; /* see ata_slave_link_init() */
-- 
1.7.1