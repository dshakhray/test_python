From 9472b70a7d8f79361e5c25dcd37bc71e8df32218 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:33:10 -0400
Subject: [fs] nfs: Fix the return value of nfs4_select_rw_stateid

Message-id: <1403796815-28580-5-git-send-email-steved@redhat.com>
Patchwork-id: 84844
O-Subject: [RHEL7.1 PATCH 04/29] NFSv4: Fix the return value of nfs4_select_rw_stateid
Bugzilla: 1111170
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

In commit 5521abfdcf4d6 (NFSv4: Resend the READ/WRITE RPC call
if a stateid change causes an error), we overloaded the return value of
nfs4_select_rw_stateid() to cause it to return -EWOULDBLOCK if an RPC
call is outstanding that would cause the NFSv4 lock or open stateid
to change.
That is all redundant when we actually copy the stateid used in the
read/write RPC call that failed, and check that against the current
stateid. It is doubly so, when we consider that in the NFSv4.1 case,
we also set the stateid's seqid to the special value '0', which means
'match the current valid stateid'.

Reported-by: Andy Adamson <andros@netapp.com>
Link: http://lkml.kernel.org/r/1393954269-3974-1-git-send-email-andros@netapp.com
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 927864cd92aaad1d6285e3bb16e503caf3d6e27e
Bugzilla: 1111170
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4state.c b/fs/nfs/nfs4state.c
index 630beba..c8d1b9d 100644
--- a/fs/nfs/nfs4state.c
+++ b/fs/nfs/nfs4state.c
@@ -974,9 +974,6 @@ static int nfs4_copy_lock_stateid(nfs4_stateid *dst,
  else if (lsp != NULL && test_bit(NFS_LOCK_INITIALIZED, &lsp->ls_flags) != 0) {
   nfs4_stateid_copy(dst, &lsp->ls_stateid);
   ret = 0;
-  smp_rmb();
-  if (!list_empty(&lsp->ls_seqid.list))
-   ret = -EWOULDBLOCK;
  }
  spin_unlock(&state->state_lock);
  nfs4_put_lock_state(lsp);
@@ -984,10 +981,9 @@ out:
  return ret;
 }
 
-static int nfs4_copy_open_stateid(nfs4_stateid *dst, struct nfs4_state *state)
+static void nfs4_copy_open_stateid(nfs4_stateid *dst, struct nfs4_state *state)
 {
  const nfs4_stateid *src;
- int ret;
  int seq;
 
  do {
@@ -996,12 +992,7 @@ static int nfs4_copy_open_stateid(nfs4_stateid *dst, struct nfs4_state *state)
   if (test_bit(NFS_OPEN_STATE, &state->flags))
    src = &state->open_stateid;
   nfs4_stateid_copy(dst, src);
-  ret = 0;
-  smp_rmb();
-  if (!list_empty(&state->owner->so_seqid.list))
-   ret = -EWOULDBLOCK;
  } while (read_seqretry(&state->seqlock, seq));
- return ret;
 }
 
 /*
@@ -1026,7 +1017,8 @@ int nfs4_select_rw_stateid(nfs4_stateid *dst, struct nfs4_state *state,
    * choose to use.
    */
   goto out;
- ret = nfs4_copy_open_stateid(dst, state);
+ nfs4_copy_open_stateid(dst, state);
+ ret = 0;
 out:
  if (nfs_server_capable(state->inode, NFS_CAP_STATEID_NFSV41))
   dst->seqid = 0;
-- 
1.7.1