From 2ae944ccc1760c399a8a14c92632f0f352a4cdfd Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:49:01 -0400
Subject: [tools] perf/record: Unify data output code into perf_record__write function

Message-id: <1408953210-26343-54-git-send-email-jolsa@redhat.com>
Patchwork-id: 88760
O-Subject: [PATCH RHEL7.1 BZ1133083 053/322] perf record: Unify data output code into perf_record__write function
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 6233dd5efdf9e2c2da1b003cfb70307b7b2028e8
Author: Jiri Olsa <jolsa@redhat.com>
Date: Thu Nov 28 11:30:13 2013 +0100

description
===========
Unifying current 2 data output functions do_write_output and
write_output into single one perf_record__write.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 65615a8..d93e2ee 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -76,7 +76,7 @@ struct perf_record {
  long   samples;
 };
 
-static int do_write_output(struct perf_record *rec, void *buf, size_t size)
+static int perf_record__write(struct perf_record *rec, void *buf, size_t size)
 {
  struct perf_data_file *file = &rec->file;
 
@@ -97,21 +97,13 @@ static int do_write_output(struct perf_record *rec, void *buf, size_t size)
  return 0;
 }
 
-static int write_output(struct perf_record *rec, void *buf, size_t size)
-{
- return do_write_output(rec, buf, size);
-}
-
 static int process_synthesized_event(struct perf_tool *tool,
          union perf_event *event,
          struct perf_sample *sample __maybe_unused,
          struct machine *machine __maybe_unused)
 {
  struct perf_record *rec = container_of(tool, struct perf_record, tool);
- if (write_output(rec, event, event->header.size) < 0)
-  return -1;
-
- return 0;
+ return perf_record__write(rec, event, event->header.size);
 }
 
 static int perf_record__mmap_read(struct perf_record *rec,
@@ -136,7 +128,7 @@ static int perf_record__mmap_read(struct perf_record *rec,
   size = md->mask + 1 - (old & md->mask);
   old += size;
 
-  if (write_output(rec, buf, size) < 0) {
+  if (perf_record__write(rec, buf, size) < 0) {
    rc = -1;
    goto out;
   }
@@ -146,7 +138,7 @@ static int perf_record__mmap_read(struct perf_record *rec,
  size = head - old;
  old += size;
 
- if (write_output(rec, buf, size) < 0) {
+ if (perf_record__write(rec, buf, size) < 0) {
   rc = -1;
   goto out;
  }
@@ -335,8 +327,8 @@ static int perf_record__mmap_read_all(struct perf_record *rec)
  }
 
  if (perf_header__has_feat(&rec->session->header, HEADER_TRACING_DATA))
-  rc = write_output(rec, &finished_round_event,
-      sizeof(finished_round_event));
+  rc = perf_record__write(rec, &finished_round_event,
+     sizeof(finished_round_event));
 
 out:
  return rc;
-- 
1.7.1