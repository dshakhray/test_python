From ff9d36292bf926f59637d27f288029aa1d573404 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 18:59:19 -0400
Subject: [fs] btrfs: remove residual code in delayed inode async helper

Message-id: <1407179109-13714-73-git-send-email-sandeen@redhat.com>
Patchwork-id: 87040
O-Subject: [RHEL7.1 PATCH 072/422] Btrfs: remove residual code in delayed inode async helper
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Miao Xie <miaox@cn.fujitsu.com>

commit 74c40f925e0d8e1ddfe5f9fc410b4c2f6c70acf5
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Thu Dec 26 13:07:01 2013 +0800

    Btrfs: remove residual code in delayed inode async helper

    Before applying the patch
      commit de3cb945db4d8eb3b046dc7a5ea89a893372750c
      title: Btrfs: improve the delayed inode throttling

    We need requeue the async work after the current work was done, it
    introduced a deadlock problem. So we wrote the code that this patch
    removes to avoid the above problem. But after applying the above
    patch, the deadlock problem didn't exist. So we should remove that
    fix code.

    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/delayed-inode.c b/fs/btrfs/delayed-inode.c
index 673e197..d68dc41 100644
--- a/fs/btrfs/delayed-inode.c
+++ b/fs/btrfs/delayed-inode.c
@@ -1300,33 +1300,6 @@ again:
  trans->block_rsv = &root->fs_info->delayed_block_rsv;
 
  __btrfs_commit_inode_delayed_items(trans, path, delayed_node);
- /*
-  * Maybe new delayed items have been inserted, so we need requeue
-  * the work. Besides that, we must dequeue the empty delayed nodes
-  * to avoid the race between delayed items balance and the worker.
-  * The race like this:
-  *  Task1    Worker thread
-  *      count == 0, needn't requeue
-  *        also needn't insert the
-  *        delayed node into prepare
-  *        list again.
-  *  add lots of delayed items
-  *  queue the delayed node
-  *    already in the list,
-  *    and not in the prepare
-  *    list, it means the delayed
-  *    node is being dealt with
-  *    by the worker.
-  *  do delayed items balance
-  *    the delayed node is being
-  *    dealt with by the worker
-  *    now, just wait.
-  *        the worker goto idle.
-  * Task1 will sleep until the transaction is commited.
-  */
- mutex_lock(&delayed_node->mutex);
- btrfs_dequeue_delayed_node(root->fs_info->delayed_root, delayed_node);
- mutex_unlock(&delayed_node->mutex);
 
  trans->block_rsv = block_rsv;
  btrfs_end_transaction_dmeta(trans, root);
-- 
1.7.1