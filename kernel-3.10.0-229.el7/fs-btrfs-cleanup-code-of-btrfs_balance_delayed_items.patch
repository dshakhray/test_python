From 7bcc4aa1b92ce95d8982c686672a2c5909c506dd Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 18:59:21 -0400
Subject: [fs] btrfs: cleanup code of btrfs_balance_delayed_items()

Message-id: <1407179109-13714-75-git-send-email-sandeen@redhat.com>
Patchwork-id: 87051
O-Subject: [RHEL7.1 PATCH 074/422] Btrfs: cleanup code of btrfs_balance_delayed_items()
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Miao Xie <miaox@cn.fujitsu.com>

commit 0353808cae35bc81c86e3510748a10f6bdff41b8
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Thu Dec 26 13:07:03 2013 +0800

    Btrfs: cleanup code of btrfs_balance_delayed_items()

    - move the condition check for wait into a function
    - use wait_event_interruptible instead of prepare-schedule-finish process

    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/delayed-inode.c b/fs/btrfs/delayed-inode.c
index fe1c275..2cf9090 100644
--- a/fs/btrfs/delayed-inode.c
+++ b/fs/btrfs/delayed-inode.c
@@ -1349,52 +1349,40 @@ void btrfs_assert_delayed_root_empty(struct btrfs_root *root)
  WARN_ON(btrfs_first_delayed_node(delayed_root));
 }
 
-static int refs_newer(struct btrfs_delayed_root *delayed_root,
-        int seq, int count)
+static int could_end_wait(struct btrfs_delayed_root *delayed_root, int seq)
 {
  int val = atomic_read(&delayed_root->items_seq);
 
- if (val < seq || val >= seq + count)
+ if (val < seq || val >= seq + BTRFS_DELAYED_BATCH)
   return 1;
+
+ if (atomic_read(&delayed_root->items) < BTRFS_DELAYED_BACKGROUND)
+  return 1;
+
  return 0;
 }
 
 void btrfs_balance_delayed_items(struct btrfs_root *root)
 {
  struct btrfs_delayed_root *delayed_root;
- int seq;
 
  delayed_root = btrfs_get_delayed_root(root);
 
  if (atomic_read(&delayed_root->items) < BTRFS_DELAYED_BACKGROUND)
   return;
 
- seq = atomic_read(&delayed_root->items_seq);
-
  if (atomic_read(&delayed_root->items) >= BTRFS_DELAYED_WRITEBACK) {
+  int seq;
   int ret;
-  DEFINE_WAIT(__wait);
+
+  seq = atomic_read(&delayed_root->items_seq);
 
   ret = btrfs_wq_run_delayed_node(delayed_root, root, 0);
   if (ret)
    return;
 
-  while (1) {
-   prepare_to_wait(&delayed_root->wait, &__wait,
-     TASK_INTERRUPTIBLE);
-
-   if (refs_newer(delayed_root, seq,
-           BTRFS_DELAYED_BATCH) ||
-       atomic_read(&delayed_root->items) <
-       BTRFS_DELAYED_BACKGROUND) {
-    break;
-   }
-   if (!signal_pending(current))
-    schedule();
-   else
-    break;
-  }
-  finish_wait(&delayed_root->wait, &__wait);
+  wait_event_interruptible(delayed_root->wait,
+      could_end_wait(delayed_root, seq));
   return;
  }
 
-- 
1.7.1