From 3294c37e5a42df712c3a2dfbad33ba2516fc9331 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:22:37 -0400
Subject: [cpufreq] p4-clockmod: Use generic cpufreq routines

Message-id: <1409235879-1283-64-git-send-email-prarit@redhat.com>
Patchwork-id: 89397
O-Subject: [RHEL7.1 PATCH BZ 1134639 063/185] cpufreq: p4-clockmod: Use generic cpufreq routines
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 522f70cefaedf414d8856677f46836f262572a35
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Oct 3 20:28:14 2013 +0530

    cpufreq: p4-clockmod: Use generic cpufreq routines

    Most of the CPUFreq drivers do similar things in .exit() and .verify() routines
    and .attr. So its better if we have generic routines for them which can be used
    by cpufreq drivers then.

    This patch uses these generic routines in the p4-clockmod driver.

    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/p4-clockmod.c b/drivers/cpufreq/p4-clockmod.c
index 03478bf..4fe6d4c 100644
--- a/drivers/cpufreq/p4-clockmod.c
+++ b/drivers/cpufreq/p4-clockmod.c
@@ -140,12 +140,6 @@ static int cpufreq_p4_target(struct cpufreq_policy *policy,
 }
 
 
-static int cpufreq_p4_verify(struct cpufreq_policy *policy)
-{
- return cpufreq_frequency_table_verify(policy, &p4clockmod_table[0]);
-}
-
-
 static unsigned int cpufreq_p4_get_frequency(struct cpuinfo_x86 *c)
 {
  if (c->x86 == 0x06) {
@@ -242,12 +236,6 @@ static int cpufreq_p4_cpu_init(struct cpufreq_policy *policy)
 }
 
 
-static int cpufreq_p4_cpu_exit(struct cpufreq_policy *policy)
-{
- cpufreq_frequency_table_put_attr(policy->cpu);
- return 0;
-}
-
 static unsigned int cpufreq_p4_get(unsigned int cpu)
 {
  u32 l, h;
@@ -266,19 +254,14 @@ static unsigned int cpufreq_p4_get(unsigned int cpu)
  return stock_freq;
 }
 
-static struct freq_attr *p4clockmod_attr[] = {
- &cpufreq_freq_attr_scaling_available_freqs,
- NULL,
-};
-
 static struct cpufreq_driver p4clockmod_driver = {
- .verify  = cpufreq_p4_verify,
+ .verify  = cpufreq_generic_frequency_table_verify,
  .target  = cpufreq_p4_target,
  .init  = cpufreq_p4_cpu_init,
- .exit  = cpufreq_p4_cpu_exit,
+ .exit  = cpufreq_generic_exit,
  .get  = cpufreq_p4_get,
  .name  = "p4-clockmod",
- .attr  = p4clockmod_attr,
+ .attr  = cpufreq_generic_attr,
 };
 
 static const struct x86_cpu_id cpufreq_p4_id[] = {
-- 
1.7.1