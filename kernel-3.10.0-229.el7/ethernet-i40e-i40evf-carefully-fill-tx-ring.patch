From 325f18ce0190945f94ef405099247e967dba17b4 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 13:11:07 -0400
Subject: [ethernet] i40e/i40evf: carefully fill tx ring

Message-id: <1409663591-32531-25-git-send-email-sassmann@redhat.com>
Patchwork-id: 90502
O-Subject: [RHEL7.1 PATCH 024/148] i40e/i40evf: carefully fill tx ring
Bugzilla: 1091127
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jesse Brandeburg <jesse.brandeburg@intel.com>

We need to make sure that we stay away from the cache line
where the DD bit (done) may be getting written back for
the transmit ring since the hardware may be writing the
whole cache line for a partial update.

Change-ID: Id0b6dfc01f654def6a2a021af185803be1915d7e
Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
Signed-off-by: Catherine Sullivan <catherine.sullivan@intel.com>
Tested-by: Kavindya Deegala <kavindya.s.deegala@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit be56052154c7129e6aab0e944f3d1ab331ff0cea)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
index 01bfab7..b1d87c6 100644
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
@@ -1482,7 +1482,7 @@ static int i40e_xmit_descriptor_count(struct sk_buff *skb,
 
  /* need: 1 descriptor per page * PAGE_SIZE/I40E_MAX_DATA_PER_TXD,
   *       + 1 desc for skb_head_len/I40E_MAX_DATA_PER_TXD,
-  *       + 2 desc gap to keep tail from touching head,
+  *       + 4 desc gap to avoid the cache line where head is,
   *       + 1 desc for context descriptor,
   * otherwise try next time
   */
@@ -1493,7 +1493,7 @@ static int i40e_xmit_descriptor_count(struct sk_buff *skb,
  count += skb_shinfo(skb)->nr_frags;
 #endif
  count += TXD_USE_COUNT(skb_headlen(skb));
- if (i40e_maybe_stop_tx(tx_ring, count + 3)) {
+ if (i40e_maybe_stop_tx(tx_ring, count + 4 + 1)) {
   tx_ring->tx_stats.tx_busy++;
   return 0;
  }
-- 
1.7.1