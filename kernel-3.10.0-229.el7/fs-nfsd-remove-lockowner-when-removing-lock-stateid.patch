From a42e766c97561dc19b18d0e525fe1097d078fe67 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:50:28 -0400
Subject: [fs] nfsd: remove lockowner when removing lock stateid

Message-id: <1403560314-32525-87-git-send-email-bfields@redhat.com>
Patchwork-id: 84556
O-Subject: [Patch RHEL7 086/172] nfsd4: remove lockowner when removing lock stateid
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

The nfsv4 state code has always assumed a one-to-one correspondance
between lock stateid's and lockowners even if it appears not to in some
places.

We may actually change that, but for now when FREE_STATEID releases a
lock stateid it also needs to release the parent lockowner.

Symptoms were a subsequent LOCK crashing in find_lockowner_str when it
calls same_lockowner_ino on a lockowner that unexpectedly has an empty
so_stateids list.

Cc: stable@vger.kernel.org
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: a1b8ff4c97b4375d21b6d6c45d75877303f61b3b
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index fac2683..6615114 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -3724,9 +3724,16 @@ out:
 static __be32
 nfsd4_free_lock_stateid(struct nfs4_ol_stateid *stp)
 {
- if (check_for_locks(stp->st_file, lockowner(stp->st_stateowner)))
+ struct nfs4_lockowner *lo = lockowner(stp->st_stateowner);
+
+ if (check_for_locks(stp->st_file, lo))
   return nfserr_locks_held;
- release_lock_stateid(stp);
+ /*
+  * Currently there's a 1-1 lock stateid<->lockowner
+  * correspondance, and we have to delete the lockowner when we
+  * delete the lock stateid:
+  */
+ unhash_lockowner(lo);
  return nfs_ok;
 }
 
-- 
1.7.1