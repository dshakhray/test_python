From 5de2bf0a1ead1f25a99a8094f4cb3c12fe09d362 Mon Sep 17 00:00:00 2001
From: Marcelo Leitner <mleitner@redhat.com>
Date: Tue, 21 Oct 2014 16:17:59 -0400
Subject: [net] netfilter: nf_tables: relocate commit and abort routines in the source file

Message-id: <20141021161759.22888.81210.stgit@localhost.localdomain>
Patchwork-id: 97948
O-Subject: [RHEL7 net PATCH 051/124] netfilter: nf_tables: relocate commit and abort routines in the source file
Bugzilla: 1148041 1155088
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Backport of upstream commit: 37082f930bb59ef6fd45e7bae6c45858af2cd972

 commit 37082f930bb59ef6fd45e7bae6c45858af2cd972
 Author: Pablo Neira Ayuso <pablo@netfilter.org>
 Date:   Thu Apr 3 11:56:37 2014 +0200

    netfilter: nf_tables: relocate commit and abort routines in the source file

    Move the commit and abort routines to the bottom of the source code
    file. This change is required by the follow up patches that add the
    set, chain and table transaction support.

    This patch is just a cleanup to access several functions without
    having to declare their prototypes.

    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/netfilter/nf_tables_api.c b/net/netfilter/nf_tables_api.c
index 891cb02..57fe5e8 100644
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -1827,86 +1827,6 @@ static int nf_tables_delrule(struct sock *nlsk, struct sk_buff *skb,
  return err;
 }
 
-static int nf_tables_commit(struct sk_buff *skb)
-{
- struct net *net = sock_net(skb->sk);
- struct nft_trans *trans, *next;
-
- /* Bump generation counter, invalidate any dump in progress */
- net->nft.genctr++;
-
- /* A new generation has just started */
- net->nft.gencursor = gencursor_next(net);
-
- /* Make sure all packets have left the previous generation before
-  * purging old rules.
-  */
- synchronize_rcu();
-
- list_for_each_entry_safe(trans, next, &net->nft.commit_list, list) {
-  /* This rule was inactive in the past and just became active.
-   * Clear the next bit of the genmask since its meaning has
-   * changed, now it is the future.
-   */
-  if (nft_rule_is_active(net, nft_trans_rule(trans))) {
-   nft_rule_clear(net, nft_trans_rule(trans));
-   nf_tables_rule_notify(skb, trans->ctx.nlh,
-           trans->ctx.table,
-           trans->ctx.chain,
-           nft_trans_rule(trans),
-           NFT_MSG_NEWRULE, 0,
-           trans->ctx.afi->family);
-   nft_trans_destroy(trans);
-   continue;
-  }
-
-  /* This rule is in the past, get rid of it */
-  list_del_rcu(&nft_trans_rule(trans)->list);
-  nf_tables_rule_notify(skb, trans->ctx.nlh,
-          trans->ctx.table, trans->ctx.chain,
-          nft_trans_rule(trans), NFT_MSG_DELRULE,
-          0, trans->ctx.afi->family);
- }
-
- /* Make sure we don't see any packet traversing old rules */
- synchronize_rcu();
-
- /* Now we can safely release unused old rules */
- list_for_each_entry_safe(trans, next, &net->nft.commit_list, list) {
-  nf_tables_rule_destroy(&trans->ctx, nft_trans_rule(trans));
-  nft_trans_destroy(trans);
- }
-
- return 0;
-}
-
-static int nf_tables_abort(struct sk_buff *skb)
-{
- struct net *net = sock_net(skb->sk);
- struct nft_trans *trans, *next;
-
- list_for_each_entry_safe(trans, next, &net->nft.commit_list, list) {
-  if (!nft_rule_is_active_next(net, nft_trans_rule(trans))) {
-   nft_rule_clear(net, nft_trans_rule(trans));
-   nft_trans_destroy(trans);
-   continue;
-  }
-
-  /* This rule is inactive, get rid of it */
-  list_del_rcu(&nft_trans_rule(trans)->list);
- }
-
- /* Make sure we don't see any packet accessing aborted rules */
- synchronize_rcu();
-
- list_for_each_entry_safe(trans, next, &net->nft.commit_list, list) {
-  nf_tables_rule_destroy(&trans->ctx, nft_trans_rule(trans));
-  nft_trans_destroy(trans);
- }
-
- return 0;
-}
-
 /*
  * Sets
  */
@@ -3178,6 +3098,86 @@ static const struct nfnl_callback nf_tables_cb[NFT_MSG_MAX] = {
  },
 };
 
+static int nf_tables_commit(struct sk_buff *skb)
+{
+ struct net *net = sock_net(skb->sk);
+ struct nft_trans *trans, *next;
+
+ /* Bump generation counter, invalidate any dump in progress */
+ net->nft.genctr++;
+
+ /* A new generation has just started */
+ net->nft.gencursor = gencursor_next(net);
+
+ /* Make sure all packets have left the previous generation before
+  * purging old rules.
+  */
+ synchronize_rcu();
+
+ list_for_each_entry_safe(trans, next, &net->nft.commit_list, list) {
+  /* This rule was inactive in the past and just became active.
+   * Clear the next bit of the genmask since its meaning has
+   * changed, now it is the future.
+   */
+  if (nft_rule_is_active(net, nft_trans_rule(trans))) {
+   nft_rule_clear(net, nft_trans_rule(trans));
+   nf_tables_rule_notify(skb, trans->ctx.nlh,
+           trans->ctx.table,
+           trans->ctx.chain,
+           nft_trans_rule(trans),
+           NFT_MSG_NEWRULE, 0,
+           trans->ctx.afi->family);
+   nft_trans_destroy(trans);
+   continue;
+  }
+
+  /* This rule is in the past, get rid of it */
+  list_del_rcu(&nft_trans_rule(trans)->list);
+  nf_tables_rule_notify(skb, trans->ctx.nlh,
+          trans->ctx.table, trans->ctx.chain,
+          nft_trans_rule(trans), NFT_MSG_DELRULE,
+          0, trans->ctx.afi->family);
+ }
+
+ /* Make sure we don't see any packet traversing old rules */
+ synchronize_rcu();
+
+ /* Now we can safely release unused old rules */
+ list_for_each_entry_safe(trans, next, &net->nft.commit_list, list) {
+  nf_tables_rule_destroy(&trans->ctx, nft_trans_rule(trans));
+  nft_trans_destroy(trans);
+ }
+
+ return 0;
+}
+
+static int nf_tables_abort(struct sk_buff *skb)
+{
+ struct net *net = sock_net(skb->sk);
+ struct nft_trans *trans, *next;
+
+ list_for_each_entry_safe(trans, next, &net->nft.commit_list, list) {
+  if (!nft_rule_is_active_next(net, nft_trans_rule(trans))) {
+   nft_rule_clear(net, nft_trans_rule(trans));
+   nft_trans_destroy(trans);
+   continue;
+  }
+
+  /* This rule is inactive, get rid of it */
+  list_del_rcu(&nft_trans_rule(trans)->list);
+ }
+
+ /* Make sure we don't see any packet accessing aborted rules */
+ synchronize_rcu();
+
+ list_for_each_entry_safe(trans, next, &net->nft.commit_list, list) {
+  nf_tables_rule_destroy(&trans->ctx, nft_trans_rule(trans));
+  nft_trans_destroy(trans);
+ }
+
+ return 0;
+}
+
 static const struct nfnetlink_subsystem nf_tables_subsys = {
  .name  = "nf_tables",
  .subsys_id = NFNL_SUBSYS_NFTABLES,
-- 
1.7.1