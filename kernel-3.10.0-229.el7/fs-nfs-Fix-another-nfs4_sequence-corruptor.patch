From f29c4bbf8f74c0f10805e46e3273b582e5c5ef45 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:33:07 -0400
Subject: [fs] nfs: Fix another nfs4_sequence corruptor

Message-id: <1403796815-28580-2-git-send-email-steved@redhat.com>
Patchwork-id: 84843
O-Subject: [RHEL7.1 PATCH 01/29] NFSv4: Fix another nfs4_sequence corruptor
Bugzilla: 1111170
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

nfs4_release_lockowner needs to set the rpc_message reply to point to
the nfs4_sequence_res in order to avoid another Oopsable situation
in nfs41_assign_slot.

Fixes: fbd4bfd1d9d21 (NFS: Add nfs4_sequence calls for RELEASE_LOCKOWNER)
Cc: stable@vger.kernel.org # 3.12+
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: b7e63a1079b266866a732cf699d8c4d61391bbda
Bugzilla: 1111170
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index d0e184b..31b03b9 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -5798,8 +5798,7 @@ struct nfs_release_lockowner_data {
  struct nfs4_lock_state *lsp;
  struct nfs_server *server;
  struct nfs_release_lockowner_args args;
- struct nfs4_sequence_args seq_args;
- struct nfs4_sequence_res seq_res;
+ struct nfs_release_lockowner_res res;
  unsigned long timestamp;
 };
 
@@ -5807,7 +5806,7 @@ static void nfs4_release_lockowner_prepare(struct rpc_task *task, void *calldata
 {
  struct nfs_release_lockowner_data *data = calldata;
  nfs40_setup_sequence(data->server,
-    &data->seq_args, &data->seq_res, task);
+    &data->args.seq_args, &data->res.seq_res, task);
  data->timestamp = jiffies;
 }
 
@@ -5816,7 +5815,7 @@ static void nfs4_release_lockowner_done(struct rpc_task *task, void *calldata)
  struct nfs_release_lockowner_data *data = calldata;
  struct nfs_server *server = data->server;
 
- nfs40_sequence_done(task, &data->seq_res);
+ nfs40_sequence_done(task, &data->res.seq_res);
 
  switch (task->tk_status) {
  case 0:
@@ -5857,7 +5856,6 @@ static int nfs4_release_lockowner(struct nfs_server *server, struct nfs4_lock_st
  data = kmalloc(sizeof(*data), GFP_NOFS);
  if (!data)
   return -ENOMEM;
- nfs4_init_sequence(&data->seq_args, &data->seq_res, 0);
  data->lsp = lsp;
  data->server = server;
  data->args.lock_owner.clientid = server->nfs_client->cl_clientid;
@@ -5865,6 +5863,8 @@ static int nfs4_release_lockowner(struct nfs_server *server, struct nfs4_lock_st
  data->args.lock_owner.s_dev = server->s_dev;
 
  msg.rpc_argp = &data->args;
+ msg.rpc_resp = &data->res;
+ nfs4_init_sequence(&data->args.seq_args, &data->res.seq_res, 0);
  rpc_call_async(server->client, &msg, 0, &nfs4_release_lockowner_ops, data);
  return 0;
 }
diff --git a/include/linux/nfs_xdr.h b/include/linux/nfs_xdr.h
index ad88a0a..6fb5b23 100644
--- a/include/linux/nfs_xdr.h
+++ b/include/linux/nfs_xdr.h
@@ -467,9 +467,14 @@ struct nfs_lockt_res {
 };
 
 struct nfs_release_lockowner_args {
+ struct nfs4_sequence_args seq_args;
  struct nfs_lowner lock_owner;
 };
 
+struct nfs_release_lockowner_res {
+ struct nfs4_sequence_res seq_res;
+};
+
 struct nfs4_delegreturnargs {
  struct nfs4_sequence_args seq_args;
  const struct nfs_fh *fhandle;
-- 
1.7.1