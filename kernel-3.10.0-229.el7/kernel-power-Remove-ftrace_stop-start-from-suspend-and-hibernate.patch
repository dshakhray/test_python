From b4489cece6ac58b7fe896a25ccc697ec97f48aa8 Mon Sep 17 00:00:00 2001
From: Josh Poimboeuf <jpoimboe@redhat.com>
Date: Thu, 4 Sep 2014 18:54:30 -0400
Subject: [kernel] power: Remove ftrace_stop/start() from suspend and hibernate

Message-id: <97c54fbab0d3315ff15831efdbb37b818757a6cd.1409856554.git.jpoimboe@redhat.com>
Patchwork-id: 91242
O-Subject: [RHEL7.1 PATCH 11/23] PM / Sleep: Remove ftrace_stop/start() from suspend and hibernate
Bugzilla: 1113829
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1113829

commit 2b014666a1b93ad21c5667a4643da67bd49a5562
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Tue Jun 24 23:38:08 2014 -0400

    PM / Sleep: Remove ftrace_stop/start() from suspend and hibernate

    ftrace_stop() and ftrace_start() were added to the suspend and hibernate
    process because there was some function within the work flow that caused
    the system to reboot if it was traced. This function has recently been
    found (restore_processor_state()). Now there's no reason to disable
    function tracing while we are going into suspend or hibernate, which means
    that being able to trace this will help tremendously in debugging any
    issues with suspend or hibernate.

    This also means that the ftrace_stop/start() functions can be removed
    and simplify the function tracing code a bit.

    Link: http://lkml.kernel.org/r/1518201.VD9cU33jRU@vostro.rjw.lan

    Acked-by: "Rafael J. Wysocki" <rjw@rjwysocki.net>
    Reviewed-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/power/hibernate.c b/kernel/power/hibernate.c
index abaff17..080e8bc 100644
--- a/kernel/power/hibernate.c
+++ b/kernel/power/hibernate.c
@@ -358,7 +358,6 @@ int hibernation_snapshot(int platform_mode)
  }
 
  suspend_console();
- ftrace_stop();
  pm_restrict_gfp_mask();
 
  error = dpm_suspend(PMSG_FREEZE);
@@ -384,7 +383,6 @@ int hibernation_snapshot(int platform_mode)
  if (error || !in_suspend)
   pm_restore_gfp_mask();
 
- ftrace_start();
  resume_console();
  dpm_complete(msg);
 
@@ -487,7 +485,6 @@ int hibernation_restore(int platform_mode)
 
  pm_prepare_console();
  suspend_console();
- ftrace_stop();
  pm_restrict_gfp_mask();
  error = dpm_suspend_start(PMSG_QUIESCE);
  if (!error) {
@@ -495,7 +492,6 @@ int hibernation_restore(int platform_mode)
   dpm_resume_end(PMSG_RECOVER);
  }
  pm_restore_gfp_mask();
- ftrace_start();
  resume_console();
  pm_restore_console();
  return error;
@@ -522,7 +518,6 @@ int hibernation_platform_enter(void)
 
  entering_platform_hibernation = true;
  suspend_console();
- ftrace_stop();
  error = dpm_suspend_start(PMSG_HIBERNATE);
  if (error) {
   if (hibernation_ops->recover)
@@ -566,7 +561,6 @@ int hibernation_platform_enter(void)
  Resume_devices:
  entering_platform_hibernation = false;
  dpm_resume_end(PMSG_RESTORE);
- ftrace_start();
  resume_console();
 
  Close:
diff --git a/kernel/power/suspend.c b/kernel/power/suspend.c
index ece0422..2f77c97 100644
--- a/kernel/power/suspend.c
+++ b/kernel/power/suspend.c
@@ -265,7 +265,6 @@ int suspend_devices_and_enter(suspend_state_t state)
    goto Close;
  }
  suspend_console();
- ftrace_stop();
  suspend_test_start();
  error = dpm_suspend_start(PMSG_SUSPEND);
  if (error) {
@@ -285,7 +284,6 @@ int suspend_devices_and_enter(suspend_state_t state)
  suspend_test_start();
  dpm_resume_end(PMSG_RESUME);
  suspend_test_finish("resume devices");
- ftrace_start();
  resume_console();
  Close:
  if (need_suspend_ops(state) && suspend_ops->end)
-- 
1.7.1