From ac0bc61320de4c679bf973c97b19fa47415f481c Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:22:58 -0400
Subject: [cpufreq] intel_pstate: Remove periodic P state boost

Message-id: <1409235879-1283-85-git-send-email-prarit@redhat.com>
Patchwork-id: 89447
O-Subject: [RHEL7.1 PATCH BZ 1134639 084/185] intel_pstate: Remove periodic P state boost
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 91a4cd4f3d8169d7398f9123683f64575927c682
Author: Dirk Brandewie <dirk.j.brandewie@intel.com>
Date:   Tue Dec 17 09:42:07 2013 -0800

    intel_pstate: Remove periodic P state boost

    Remove the periodic P state boost.  This code required for some corner
    case benchmark tests.  The calculation of the required P state was
    incorrect/inaccurate and would not allow P state increase.

    This was fixed by a combination of commits:
      2134ed4 cpufreq / intel_pstate: Change to scale off of max P-state
      d253d2a intel_pstate: Improve accuracy by not truncating until final result

    References: https://bugzilla.kernel.org/show_bug.cgi?id=64271
    Reported-by: Doug Smythies <dsmythies@telus.net>
    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index feaff30..fab2386 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -92,8 +92,6 @@ struct cpudata {
  struct vid_data vid;
  struct _pid pid;
 
- int min_pstate_count;
-
  u64 prev_aperf;
  u64 prev_mperf;
  int sample_ptr;
@@ -617,15 +615,6 @@ static void intel_pstate_timer_func(unsigned long __data)
 
  intel_pstate_sample(cpu);
  intel_pstate_adjust_busy_pstate(cpu);
-
- if (cpu->pstate.current_pstate == cpu->pstate.min_pstate) {
-  cpu->min_pstate_count++;
-  if (!(cpu->min_pstate_count % 5)) {
-   intel_pstate_set_pstate(cpu, cpu->pstate.max_pstate);
-  }
- } else
-  cpu->min_pstate_count = 0;
-
  intel_pstate_set_sample_time(cpu);
 }
 
-- 
1.7.1