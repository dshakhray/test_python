From 82e27506ea7f7883c1c9c53e344646c667af312b Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 12:29:08 -0400
Subject: [acpi] hotplug/pci: Do not pass ACPI handle to hotplug_event()

Message-id: <1411129776-21656-34-git-send-email-prarit@redhat.com>
Patchwork-id: 96398
O-Subject: [RHEL7.1 PATCH BZ 1141846 33/61] ACPI / hotplug / PCI: Do not pass ACPI handle to hotplug_event()
Bugzilla: 1141846
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit d3a1ebb063cc45d5f4a5655534b87c3547fd9bbf
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Feb 4 00:42:20 2014 +0100

    ACPI / hotplug / PCI: Do not pass ACPI handle to hotplug_event()

    Since hotplug_event() can get the ACPI handle needed for debug
    printouts from its context argument, there's no need to pass the
    handle to it.  Moreover, the second argument's type may be changed
    to (struct acpiphp_context *), because that's what is always passed
    to hotplug_event() as the second argument anyway.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

Cc: Myron Stowe <mstowe@redhat.com>
Cc: Andy Gospodarek <agospoda@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index e73b015..644ddd3 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -63,7 +63,7 @@ static DEFINE_MUTEX(acpiphp_context_lock);
 static void handle_hotplug_event(acpi_handle handle, u32 type, void *data);
 static void acpiphp_sanitize_bus(struct pci_bus *bus);
 static void acpiphp_set_hpp_values(struct pci_bus *bus);
-static void hotplug_event(acpi_handle handle, u32 type, void *data);
+static void hotplug_event(u32 type, struct acpiphp_context *context);
 static void free_bridge(struct kref *kref);
 
 static void acpiphp_context_handler(acpi_handle handle, void *context)
@@ -225,7 +225,7 @@ static void dock_event(acpi_handle handle, u32 type, void *data)
  acpiphp_put_context(context);
  mutex_unlock(&acpiphp_context_lock);
 
- hotplug_event(handle, type, data);
+ hotplug_event(type, context);
 
  put_bridge(context->func.parent);
 }
@@ -813,9 +813,9 @@ void acpiphp_check_host_bridge(acpi_handle handle)
 
 static int acpiphp_disable_and_eject_slot(struct acpiphp_slot *slot);
 
-static void hotplug_event(acpi_handle handle, u32 type, void *data)
+static void hotplug_event(u32 type, struct acpiphp_context *context)
 {
- struct acpiphp_context *context = data;
+ acpi_handle handle = context->adev->handle;
  struct acpiphp_func *func = &context->func;
  struct acpiphp_slot *slot = func->slot;
  struct acpiphp_bridge *bridge;
@@ -870,14 +870,14 @@ static void hotplug_event(acpi_handle handle, u32 type, void *data)
 static void hotplug_event_work(void *data, u32 type)
 {
  struct acpiphp_context *context = data;
- acpi_handle handle = context->adev->handle;
 
  acpi_scan_lock_acquire();
 
- hotplug_event(handle, type, context);
+ hotplug_event(type, context);
 
  acpi_scan_lock_release();
- acpi_evaluate_hotplug_ost(handle, type, ACPI_OST_SC_SUCCESS, NULL);
+ acpi_evaluate_hotplug_ost(context->adev->handle, type,
+      ACPI_OST_SC_SUCCESS, NULL);
  put_bridge(context->func.parent);
 }
 
-- 
1.7.1