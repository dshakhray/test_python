From 7dd31306d6354288f230a6dea61c1ee22b00d561 Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jpirko@redhat.com>
Date: Tue, 29 Apr 2014 11:59:18 -0400
Subject: [net] rtnetlink: Warn when interface's information won't fit in our packet

Message-id: <1398772759-16351-1-git-send-email-jpirko@redhat.com>
Patchwork-id: 79223
O-Subject: [patch rhel7 net 1/2] rtnetlink: Warn when interface's information won't fit in our packet
Bugzilla: 1092400
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

BZ1092400
https://brewweb.devel.redhat.com/taskinfo?taskID=7396036

upstream (net) commit 973462bbde79bb827824c73b59027a0aed5c9ca6
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Thu Apr 24 10:22:35 2014 +1000

    rtnetlink: Warn when interface's information won't fit in our packet

    Without IFLA_EXT_MASK specified, the information reported for a single
    interface in response to RTM_GETLINK is expected to fit within a netlink
    packet of NLMSG_GOODSIZE.

    If it doesn't, however, things will go badly wrong,  When listing all
    interfaces, netlink_dump() will incorrectly treat -EMSGSIZE on the first
    message in a packet as the end of the listing and omit information for
    that interface and all subsequent ones.  This can cause getifaddrs(3) to
    enter an infinite loop.

    This patch won't fix the problem, but it will WARN_ON() making it easier to
    track down what's going wrong.

Signed-off-by: Jiri Pirko <jpirko@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index af7613d..79fd408 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -1132,6 +1132,7 @@ static int rtnl_dump_ifinfo(struct sk_buff *skb, struct netlink_callback *cb)
  struct hlist_head *head;
  struct nlattr *tb[IFLA_MAX+1];
  u32 ext_filter_mask = 0;
+ int err;
 
  s_h = cb->args[0];
  s_idx = cb->args[1];
@@ -1152,11 +1153,17 @@ static int rtnl_dump_ifinfo(struct sk_buff *skb, struct netlink_callback *cb)
   hlist_for_each_entry_rcu(dev, head, index_hlist) {
    if (idx < s_idx)
     goto cont;
-   if (rtnl_fill_ifinfo(skb, dev, RTM_NEWLINK,
-          NETLINK_CB(cb->skb).portid,
-          cb->nlh->nlmsg_seq, 0,
-          NLM_F_MULTI,
-          ext_filter_mask) <= 0)
+   err = rtnl_fill_ifinfo(skb, dev, RTM_NEWLINK,
+            NETLINK_CB(cb->skb).portid,
+            cb->nlh->nlmsg_seq, 0,
+            NLM_F_MULTI,
+            ext_filter_mask);
+   /* If we ran out of room on the first message,
+    * we're in trouble
+    */
+   WARN_ON((err == -EMSGSIZE) && (skb->len == 0));
+
+   if (err <= 0)
     goto out;
 
    nl_dump_check_consistent(cb, nlmsg_hdr(skb));
-- 
1.7.1