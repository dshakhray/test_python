From 6ec8188e986c50fa37cd15fcc095ad7f691e90be Mon Sep 17 00:00:00 2001
From: Andy Grover <agrover@redhat.com>
Date: Fri, 5 Sep 2014 16:36:08 -0400
Subject: [target] iscsi, iser:  Use list_del_init for ->i_conn_node

Message-id: <1409934989-29941-11-git-send-email-agrover@redhat.com>
Patchwork-id: 91478
O-Subject: [RHEL7.1 PATCH e-stor 10/31] iscsi/iser-target: Use list_del_init for ->i_conn_node
Bugzilla: 1129387
RH-Acked-by: Chris Leech <cleech@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

From: Nicholas Bellinger <nab@linux-iscsi.org>

commit 5159d763f60af693a3fcec45dce2021f66e528a4 upstream.

There are a handful of uses of list_empty() for cmd->i_conn_node
within iser-target code that expect to return false once a cmd
has been removed from the per connect list.

This patch changes all uses of list_del -> list_del_init in order
to ensure that list_empty() returns false as expected.

Acked-by: Sagi Grimberg <sagig@mellanox.com>
Cc: Or Gerlitz <ogerlitz@mellanox.com>
Cc: <stable@vger.kernel.org> #3.10+
Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/isert/ib_isert.c b/drivers/infiniband/ulp/isert/ib_isert.c
index 6ed2011..fd15531 100644
--- a/drivers/infiniband/ulp/isert/ib_isert.c
+++ b/drivers/infiniband/ulp/isert/ib_isert.c
@@ -1226,7 +1226,7 @@ isert_put_cmd(struct isert_cmd *isert_cmd)
  case ISCSI_OP_SCSI_CMD:
   spin_lock_bh(&conn->cmd_lock);
   if (!list_empty(&cmd->i_conn_node))
-   list_del(&cmd->i_conn_node);
+   list_del_init(&cmd->i_conn_node);
   spin_unlock_bh(&conn->cmd_lock);
 
   if (cmd->data_direction == DMA_TO_DEVICE)
@@ -1238,7 +1238,7 @@ isert_put_cmd(struct isert_cmd *isert_cmd)
  case ISCSI_OP_SCSI_TMFUNC:
   spin_lock_bh(&conn->cmd_lock);
   if (!list_empty(&cmd->i_conn_node))
-   list_del(&cmd->i_conn_node);
+   list_del_init(&cmd->i_conn_node);
   spin_unlock_bh(&conn->cmd_lock);
 
   transport_generic_free_cmd(&cmd->se_cmd, 0);
@@ -1247,7 +1247,7 @@ isert_put_cmd(struct isert_cmd *isert_cmd)
  case ISCSI_OP_NOOP_OUT:
   spin_lock_bh(&conn->cmd_lock);
   if (!list_empty(&cmd->i_conn_node))
-   list_del(&cmd->i_conn_node);
+   list_del_init(&cmd->i_conn_node);
   spin_unlock_bh(&conn->cmd_lock);
 
   /*
diff --git a/drivers/target/iscsi/iscsi_target.c b/drivers/target/iscsi/iscsi_target.c
index 96b52b4..9473c8f 100644
--- a/drivers/target/iscsi/iscsi_target.c
+++ b/drivers/target/iscsi/iscsi_target.c
@@ -3652,7 +3652,7 @@ iscsit_immediate_queue(struct iscsi_conn *conn, struct iscsi_cmd *cmd, int state
   break;
  case ISTATE_REMOVE:
   spin_lock_bh(&conn->cmd_lock);
-  list_del(&cmd->i_conn_node);
+  list_del_init(&cmd->i_conn_node);
   spin_unlock_bh(&conn->cmd_lock);
 
   iscsit_free_cmd(cmd, false);
@@ -4098,7 +4098,7 @@ static void iscsit_release_commands_from_conn(struct iscsi_conn *conn)
  spin_lock_bh(&conn->cmd_lock);
  list_for_each_entry_safe(cmd, cmd_tmp, &conn->conn_cmd_list, i_conn_node) {
 
-  list_del(&cmd->i_conn_node);
+  list_del_init(&cmd->i_conn_node);
   spin_unlock_bh(&conn->cmd_lock);
 
   iscsit_increment_maxcmdsn(cmd, sess);
diff --git a/drivers/target/iscsi/iscsi_target_erl2.c b/drivers/target/iscsi/iscsi_target_erl2.c
index 45a5afd..0d2d013 100644
--- a/drivers/target/iscsi/iscsi_target_erl2.c
+++ b/drivers/target/iscsi/iscsi_target_erl2.c
@@ -140,7 +140,7 @@ void iscsit_free_connection_recovery_entires(struct iscsi_session *sess)
   list_for_each_entry_safe(cmd, cmd_tmp,
     &cr->conn_recovery_cmd_list, i_conn_node) {
 
-   list_del(&cmd->i_conn_node);
+   list_del_init(&cmd->i_conn_node);
    cmd->conn = NULL;
    spin_unlock(&cr->conn_recovery_cmd_lock);
    iscsit_free_cmd(cmd, true);
@@ -162,7 +162,7 @@ void iscsit_free_connection_recovery_entires(struct iscsi_session *sess)
   list_for_each_entry_safe(cmd, cmd_tmp,
     &cr->conn_recovery_cmd_list, i_conn_node) {
 
-   list_del(&cmd->i_conn_node);
+   list_del_init(&cmd->i_conn_node);
    cmd->conn = NULL;
    spin_unlock(&cr->conn_recovery_cmd_lock);
    iscsit_free_cmd(cmd, true);
@@ -218,7 +218,7 @@ int iscsit_remove_cmd_from_connection_recovery(
  }
  cr = cmd->cr;
 
- list_del(&cmd->i_conn_node);
+ list_del_init(&cmd->i_conn_node);
  return --cr->cmd_count;
 }
 
@@ -299,7 +299,7 @@ int iscsit_discard_unacknowledged_ooo_cmdsns_for_conn(struct iscsi_conn *conn)
   if (!(cmd->cmd_flags & ICF_OOO_CMDSN))
    continue;
 
-  list_del(&cmd->i_conn_node);
+  list_del_init(&cmd->i_conn_node);
 
   spin_unlock_bh(&conn->cmd_lock);
   iscsit_free_cmd(cmd, true);
@@ -337,7 +337,7 @@ int iscsit_prepare_cmds_for_realligance(struct iscsi_conn *conn)
  /*
   * Only perform connection recovery on ISCSI_OP_SCSI_CMD or
   * ISCSI_OP_NOOP_OUT opcodes.  For all other opcodes call
-  * list_del(&cmd->i_conn_node); to release the command to the
+  * list_del_init(&cmd->i_conn_node); to release the command to the
   * session pool and remove it from the connection's list.
   *
   * Also stop the DataOUT timer, which will be restarted after
@@ -353,7 +353,7 @@ int iscsit_prepare_cmds_for_realligance(struct iscsi_conn *conn)
     " CID: %hu\n", cmd->iscsi_opcode,
     cmd->init_task_tag, cmd->cmd_sn, conn->cid);
 
-   list_del(&cmd->i_conn_node);
+   list_del_init(&cmd->i_conn_node);
    spin_unlock_bh(&conn->cmd_lock);
    iscsit_free_cmd(cmd, true);
    spin_lock_bh(&conn->cmd_lock);
@@ -373,7 +373,7 @@ int iscsit_prepare_cmds_for_realligance(struct iscsi_conn *conn)
    */
   if (!(cmd->cmd_flags & ICF_OOO_CMDSN) && !cmd->immediate_cmd &&
        iscsi_sna_gte(cmd->cmd_sn, conn->sess->exp_cmd_sn)) {
-   list_del(&cmd->i_conn_node);
+   list_del_init(&cmd->i_conn_node);
    spin_unlock_bh(&conn->cmd_lock);
    iscsit_free_cmd(cmd, true);
    spin_lock_bh(&conn->cmd_lock);
@@ -395,7 +395,7 @@ int iscsit_prepare_cmds_for_realligance(struct iscsi_conn *conn)
 
   cmd->sess = conn->sess;
 
-  list_del(&cmd->i_conn_node);
+  list_del_init(&cmd->i_conn_node);
   spin_unlock_bh(&conn->cmd_lock);
 
   iscsit_free_all_datain_reqs(cmd);
-- 
1.7.1