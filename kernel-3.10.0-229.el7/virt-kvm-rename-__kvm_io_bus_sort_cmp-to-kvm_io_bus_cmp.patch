From c6aa828aed9c0779e566d632611499ed9e7832f6 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:36:42 -0400
Subject: [virt] kvm: rename __kvm_io_bus_sort_cmp to kvm_io_bus_cmp

Message-id: <1406040016-3289-8-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86086
O-Subject: [RHEL7 PATCH v2 007/221] KVM: rename __kvm_io_bus_sort_cmp to kvm_io_bus_cmp
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

This is the type-safe comparison function, so the double-underscore is
not related.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Gleb Natapov <gleb@redhat.com>
(cherry picked from commit c21fbff16b5d43d608966a2963fb248bebce257f)
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index a0e7412..263aeba 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -2817,8 +2817,8 @@ static void kvm_io_bus_destroy(struct kvm_io_bus *bus)
  kfree(bus);
 }
 
-static inline int __kvm_io_bus_sort_cmp(const struct kvm_io_range *r1,
-                                        const struct kvm_io_range *r2)
+static inline int kvm_io_bus_cmp(const struct kvm_io_range *r1,
+                                 const struct kvm_io_range *r2)
 {
  if (r1->addr < r2->addr)
   return -1;
@@ -2829,7 +2829,7 @@ static inline int __kvm_io_bus_sort_cmp(const struct kvm_io_range *r1,
 
 static int kvm_io_bus_sort_cmp(const void *p1, const void *p2)
 {
- return __kvm_io_bus_sort_cmp(p1, p2);
+ return kvm_io_bus_cmp(p1, p2);
 }
 
 static int kvm_io_bus_insert_dev(struct kvm_io_bus *bus, struct kvm_io_device *dev,
@@ -2865,7 +2865,7 @@ static int kvm_io_bus_get_first_dev(struct kvm_io_bus *bus,
 
  off = range - bus->range;
 
- while (off > 0 && __kvm_io_bus_sort_cmp(&key, &bus->range[off-1]) == 0)
+ while (off > 0 && kvm_io_bus_cmp(&key, &bus->range[off-1]) == 0)
   off--;
 
  return off;
@@ -2881,7 +2881,7 @@ static int __kvm_io_bus_write(struct kvm_io_bus *bus,
   return -EOPNOTSUPP;
 
  while (idx < bus->dev_count &&
-  __kvm_io_bus_sort_cmp(range, &bus->range[idx]) == 0) {
+  kvm_io_bus_cmp(range, &bus->range[idx]) == 0) {
   if (!kvm_iodevice_write(bus->range[idx].dev, range->addr,
      range->len, val))
    return idx;
@@ -2925,7 +2925,7 @@ int kvm_io_bus_write_cookie(struct kvm *kvm, enum kvm_bus bus_idx, gpa_t addr,
 
  /* First try the device referenced by cookie. */
  if ((cookie >= 0) && (cookie < bus->dev_count) &&
-     (__kvm_io_bus_sort_cmp(&range, &bus->range[cookie]) == 0))
+     (kvm_io_bus_cmp(&range, &bus->range[cookie]) == 0))
   if (!kvm_iodevice_write(bus->range[cookie].dev, addr, len,
      val))
    return cookie;
@@ -2947,7 +2947,7 @@ static int __kvm_io_bus_read(struct kvm_io_bus *bus, struct kvm_io_range *range,
   return -EOPNOTSUPP;
 
  while (idx < bus->dev_count &&
-  __kvm_io_bus_sort_cmp(range, &bus->range[idx]) == 0) {
+  kvm_io_bus_cmp(range, &bus->range[idx]) == 0) {
   if (!kvm_iodevice_read(bus->range[idx].dev, range->addr,
            range->len, val))
    return idx;
@@ -2991,7 +2991,7 @@ int kvm_io_bus_read_cookie(struct kvm *kvm, enum kvm_bus bus_idx, gpa_t addr,
 
  /* First try the device referenced by cookie. */
  if ((cookie >= 0) && (cookie < bus->dev_count) &&
-     (__kvm_io_bus_sort_cmp(&range, &bus->range[cookie]) == 0))
+     (kvm_io_bus_cmp(&range, &bus->range[cookie]) == 0))
   if (!kvm_iodevice_read(bus->range[cookie].dev, addr, len,
            val))
    return cookie;
-- 
1.7.1