From ae59ac3dbd6ae90ab88b38d659026b784699b2ea Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 12:00:36 -0400
Subject: [ethernet] mlx4: Set proper build dependancy with vxlan

Message-id: <b9b917ba8e1a0f6485f0599446a21cb6f331e529.1410425016.git.avadai@redhat.com>
Patchwork-id: 93733
O-Subject: [Patch RHEL7.1 V1 100/197] net/mlx4: Set proper build dependancy with vxlan
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Or Gerlitz <ogerlitz@mellanox.com>

Make sure that vxlan_get_rx_port() is present in the kernel build in a manner
consistent with mlx4, else mlx4 can be made built-in where vxlan a module and
the phase of the build linking fails. Add CONFIG_MLX4_EN_VXLAN for that.

Also, #ifdef the advertizement and implementation of the mlx4 vxlan ndo
calls and related code under this config directive.

Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a66132f3eb514f42c49a3e8f57aab2ccd0360f06)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/mellanox/mlx4/Kconfig b/drivers/net/ethernet/mellanox/mlx4/Kconfig
index 1a6e188..1486ce9 100644
--- a/drivers/net/ethernet/mellanox/mlx4/Kconfig
+++ b/drivers/net/ethernet/mellanox/mlx4/Kconfig
@@ -23,6 +23,13 @@ config MLX4_EN_DCB
 
    If unsure, set to Y
 
+config MLX4_EN_VXLAN
+ bool "VXLAN offloads Support"
+ default y
+ depends on MLX4_EN && VXLAN && !(MLX4_EN=y && VXLAN=m)
+ ---help---
+   Say Y here if you want to use VXLAN offloads in the driver.
+
 config MLX4_CORE
  tristate
  depends on PCI
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index 82d7eb5..f085c2d 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@ -1698,8 +1698,10 @@ int mlx4_en_start_port(struct net_device *dev)
 
  mlx4_set_stats_bitmap(mdev->dev, &priv->stats_bitmap);
 
+#ifdef CONFIG_MLX4_EN_VXLAN
  if (priv->mdev->dev->caps.flags2 & MLX4_DEV_CAP_FLAG2_VXLAN_OFFLOADS)
   vxlan_get_rx_port(dev);
+#endif
  priv->port_up = true;
  netif_tx_start_all_queues(dev);
  netif_device_attach(dev);
@@ -2267,6 +2269,7 @@ static int mlx4_en_get_phys_port_id(struct net_device *dev,
  return 0;
 }
 
+#ifdef CONFIG_MLX4_EN_VXLAN
 static void mlx4_en_add_vxlan_offloads(struct work_struct *work)
 {
  int ret;
@@ -2341,6 +2344,7 @@ static void mlx4_en_del_vxlan_port(struct  net_device *dev,
 
  queue_work(priv->mdev->workqueue, &priv->vxlan_del_task);
 }
+#endif
 
 static const struct net_device_ops mlx4_netdev_ops = {
  .ndo_open  = mlx4_en_open,
@@ -2368,8 +2372,10 @@ static const struct net_device_ops mlx4_netdev_ops = {
  .ndo_busy_poll  = mlx4_en_low_latency_recv,
 #endif
  .ndo_get_phys_port_id = mlx4_en_get_phys_port_id,
+#ifdef CONFIG_MLX4_EN_VXLAN
  .ndo_add_vxlan_port = mlx4_en_add_vxlan_port,
  .ndo_del_vxlan_port = mlx4_en_del_vxlan_port,
+#endif
 };
 
 static const struct net_device_ops mlx4_netdev_ops_master = {
@@ -2461,8 +2467,10 @@ int mlx4_en_init_netdev(struct mlx4_en_dev *mdev, int port,
  INIT_WORK(&priv->linkstate_task, mlx4_en_linkstate);
  INIT_DELAYED_WORK(&priv->stats_task, mlx4_en_do_get_stats);
  INIT_DELAYED_WORK(&priv->service_task, mlx4_en_service_task);
+#ifdef CONFIG_MLX4_EN_VXLAN
  INIT_WORK(&priv->vxlan_add_task, mlx4_en_add_vxlan_offloads);
  INIT_WORK(&priv->vxlan_del_task, mlx4_en_del_vxlan_offloads);
+#endif
 #ifdef CONFIG_MLX4_EN_DCB
  if (!mlx4_is_slave(priv->mdev->dev)) {
   if (mdev->dev->caps.flags & MLX4_DEV_CAP_FLAG_SET_ETH_SCHED) {
diff --git a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
index 2f17f6f..20e3686 100644
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
@@ -559,8 +559,10 @@ struct mlx4_en_priv {
  struct work_struct linkstate_task;
  struct delayed_work stats_task;
  struct delayed_work service_task;
+#ifdef CONFIG_MLX4_EN_VXLAN
  struct work_struct vxlan_add_task;
  struct work_struct vxlan_del_task;
+#endif
  struct mlx4_en_perf_stats pstats;
  struct mlx4_en_pkt_stats pkstats;
  struct mlx4_en_port_stats port_stats;
-- 
1.7.1