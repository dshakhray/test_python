From 67480ba2a24501efc537dc0646bb7b483d66229b Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:03:24 -0400
Subject: [usb] wusbcore: fix up coding style issues in wusbhc.c and wusbhc.h

Message-id: <1410887463-20674-133-git-send-email-dzickus@redhat.com>
Patchwork-id: 95403
O-Subject: [RHEL7 PATCH 132/591] USB: wusbcore: fix up coding style issues in wusbhc.c and wusbhc.h
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit a7737e3444b573512e47b64251e0822fff2e6614
Author: Rahul Bedarkar <rahulbedarkar89@gmail.com>
Date:   Sat Jan 4 14:13:10 2014 +0530

    USB: wusbcore: fix up coding style issues in wusbhc.c and wusbhc.h

    Signed-off-by: Rahul Bedarkar <rahulbedarkar89@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/wusbcore/wusbhc.c b/drivers/usb/wusbcore/wusbhc.c
index 4dd943a..3e1ba51 100644
--- a/drivers/usb/wusbcore/wusbhc.c
+++ b/drivers/usb/wusbcore/wusbhc.c
@@ -55,7 +55,8 @@ static struct wusbhc *usbhc_dev_to_wusbhc(struct device *dev)
  * value of trust_timeout is jiffies.
  */
 static ssize_t wusb_trust_timeout_show(struct device *dev,
-           struct device_attribute *attr, char *buf)
+     struct device_attribute *attr,
+     char *buf)
 {
  struct wusbhc *wusbhc = usbhc_dev_to_wusbhc(dev);
 
@@ -173,7 +174,8 @@ static ssize_t wusb_phy_rate_store(struct device *dev,
  wusbhc->phy_rate = phy_rate;
  return size;
 }
-static DEVICE_ATTR(wusb_phy_rate, 0644, wusb_phy_rate_show, wusb_phy_rate_store);
+static DEVICE_ATTR(wusb_phy_rate, 0644, wusb_phy_rate_show,
+   wusb_phy_rate_store);
 
 static ssize_t wusb_dnts_show(struct device *dev,
       struct device_attribute *attr,
@@ -227,7 +229,8 @@ static ssize_t wusb_retry_count_store(struct device *dev,
  if (result != 1)
   return -EINVAL;
 
- wusbhc->retry_count = max_t(uint8_t, retry_count, WUSB_RETRY_COUNT_MAX);
+ wusbhc->retry_count = max_t(uint8_t, retry_count,
+     WUSB_RETRY_COUNT_MAX);
 
  return size;
 }
@@ -321,7 +324,8 @@ int wusbhc_b_create(struct wusbhc *wusbhc)
 
  result = sysfs_create_group(wusbhc_kobj(wusbhc), &wusbhc_attr_group);
  if (result < 0) {
-  dev_err(dev, "Cannot register WUSBHC attributes: %d\n", result);
+  dev_err(dev, "Cannot register WUSBHC attributes: %d\n",
+   result);
   goto error_create_attr_group;
  }
 
@@ -425,7 +429,8 @@ EXPORT_SYMBOL_GPL(wusb_cluster_id_put);
  */
 void wusbhc_giveback_urb(struct wusbhc *wusbhc, struct urb *urb, int status)
 {
- struct wusb_dev *wusb_dev = __wusb_dev_get_by_usb_dev(wusbhc, urb->dev);
+ struct wusb_dev *wusb_dev = __wusb_dev_get_by_usb_dev(wusbhc,
+     urb->dev);
 
  if (status == 0 && wusb_dev) {
   wusb_dev->entry_ts = jiffies;
diff --git a/drivers/usb/wusbcore/wusbhc.h b/drivers/usb/wusbcore/wusbhc.h
index 6bd3b81..2384add 100644
--- a/drivers/usb/wusbcore/wusbhc.h
+++ b/drivers/usb/wusbcore/wusbhc.h
@@ -164,7 +164,7 @@ struct wusb_port {
  * functions/operations that only deal with general Wireless USB HC
  * issues use this data type to refer to the host.
  *
- * @usb_hcd     Instantiation of a USB host controller
+ * @usb_hcd    Instantiation of a USB host controller
  *                 (initialized by upper layer [HWA=HC or WHCI].
  *
  * @dev     Device that implements this; initialized by the
@@ -196,7 +196,7 @@ struct wusb_port {
  * @ports_max    Number of simultaneous device connections (fake
  *                 ports) this HC will take. Read-only.
  *
- * @port          Array of port status for each fake root port. Guaranteed to
+ * @port    Array of port status for each fake root port. Guaranteed to
  *                 always be the same length during device existence
  *                 [this allows for some unlocked but referenced reading].
  *
@@ -329,7 +329,8 @@ void wusbhc_pal_unregister(struct wusbhc *wusbhc);
  * This is a safe assumption as @usb_dev->bus is referenced all the
  * time during the @usb_dev life cycle.
  */
-static inline struct usb_hcd *usb_hcd_get_by_usb_dev(struct usb_device *usb_dev)
+static inline
+struct usb_hcd *usb_hcd_get_by_usb_dev(struct usb_device *usb_dev)
 {
  struct usb_hcd *usb_hcd;
  usb_hcd = container_of(usb_dev->bus, struct usb_hcd, self);
-- 
1.7.1