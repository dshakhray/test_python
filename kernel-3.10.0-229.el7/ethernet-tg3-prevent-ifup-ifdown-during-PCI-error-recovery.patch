From 88ede8bc779d7f69b86165c8e4d4652f19434541 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 12:26:13 -0400
Subject: [ethernet] tg3: prevent ifup/ifdown during PCI error recovery

Message-id: <1410179173-14304-20-git-send-email-ivecera@redhat.com>
Patchwork-id: 91665
O-Subject: [RHEL7.1 PATCH 19/19] tg3: prevent ifup/ifdown during PCI error recovery
Bugzilla: 1088637
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: #1088637

Upstream commit(s):
commit 0486a063b1ffce4f37ef80970689c64bf7b99e98
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Mon Sep 1 14:21:57 2014 +0200

    tg3: prevent ifup/ifdown during PCI error recovery

    The patch fixes race conditions between PCI error recovery callbacks and
    potential ifup/ifdown.

    First, if ifup (tg3_open) is called between tg3_io_error_detected() and
    tg3_io_resume() then tp->timer is armed twice before expiry. Once during
    tg3_open() and again during tg3_io_resume(). This results in BUG
    at kernel/time/timer.c:945.

    Second, if ifdown (tg3_close) is called between tg3_io_error_detected()
    and tg3_io_resume() then tg3_napi_disable() is called twice without
    a tg3_napi_enable between. Once during tg3_io_error_detected() and again
    during tg3_close(). The tg3_io_resume() then hangs on rtnl_lock().

    v2: Added logging messages per Prashant's request

    Cc: Prashant Sreedharan <prashant@broadcom.com>
    Cc: Michael Chan <mchan@broadcom.com>

    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Acked-by: Prashant Sreedharan <prashant@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index d140f64..7f4bdce 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -11629,6 +11629,12 @@ static int tg3_open(struct net_device *dev)
  struct tg3 *tp = netdev_priv(dev);
  int err;
 
+ if (tp->pcierr_recovery) {
+  netdev_err(dev, "Failed to open device. PCI error recovery "
+      "in progress\n");
+  return -EAGAIN;
+ }
+
  if (tp->fw_needed) {
   err = tg3_request_firmware(tp);
   if (tg3_asic_rev(tp) == ASIC_REV_57766) {
@@ -11686,6 +11692,12 @@ static int tg3_close(struct net_device *dev)
 {
  struct tg3 *tp = netdev_priv(dev);
 
+ if (tp->pcierr_recovery) {
+  netdev_err(dev, "Failed to close device. PCI error recovery "
+      "in progress\n");
+  return -EAGAIN;
+ }
+
  tg3_ptp_fini(tp);
 
  tg3_stop(tp);
@@ -17573,6 +17585,7 @@ static int tg3_init_one(struct pci_dev *pdev,
  tp->rx_mode = TG3_DEF_RX_MODE;
  tp->tx_mode = TG3_DEF_TX_MODE;
  tp->irq_sync = 1;
+ tp->pcierr_recovery = false;
 
  if (tg3_debug > 0)
   tp->msg_enable = tg3_debug;
@@ -18083,6 +18096,8 @@ static pci_ers_result_t tg3_io_error_detected(struct pci_dev *pdev,
 
  rtnl_lock();
 
+ tp->pcierr_recovery = true;
+
  /* We probably don't have netdev yet */
  if (!netdev || !netif_running(netdev))
   goto done;
@@ -18207,6 +18222,7 @@ static void tg3_io_resume(struct pci_dev *pdev)
  tg3_phy_start(tp);
 
 done:
+ tp->pcierr_recovery = false;
  rtnl_unlock();
 }
 
diff --git a/drivers/net/ethernet/broadcom/tg3.h b/drivers/net/ethernet/broadcom/tg3.h
index 461acca..31c9f82 100644
--- a/drivers/net/ethernet/broadcom/tg3.h
+++ b/drivers/net/ethernet/broadcom/tg3.h
@@ -3407,6 +3407,7 @@ struct tg3 {
 
  struct device   *hwmon_dev;
  bool    link_up;
+ bool    pcierr_recovery;
 };
 
 /* Accessor macros for chip and asic attributes
-- 
1.7.1