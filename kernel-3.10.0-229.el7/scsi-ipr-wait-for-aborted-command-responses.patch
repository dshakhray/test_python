From 4e68bf0611bc4d8880685195677ae55e29de50f2 Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Wed, 5 Nov 2014 18:30:26 -0500
Subject: [scsi] ipr: wait for aborted command responses

Message-id: <1415212226-2622-1-git-send-email-gduarte@redhat.com>
Patchwork-id: 99409
O-Subject: [RHEL7.1 PATCH BZ 1156530] ipr: wait for aborted command responses
Bugzilla: 1156530
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

BZ 1156530
Upstream Status: http://git.infradead.org/users/hch/scsi-queue.git/commit/05d511d79efa36e43c38f675c26f306898d8d15d
Build Info: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8199522
ppc64le: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8199545
Tested: Sanity checks on ppc64 and ppc64le using rh-tests-kernel-storage-bonnie++-1.2-1

Author: Brian King <brking@linux.vnet.ibm.com>
Date: Thu, 30 Oct 2014 17:27:10 -0500

    ipr: wait for aborted command responses

    Fixes a race condition in abort handling that was injected
    when multiple interrupt support was added. When only a single
    interrupt is present, the adapter guarantees it will send
    responses for aborted commands prior to the response for the
    abort command itself. With multiple interrupts, these responses
    generally come back on different interrupts, so we need to
    ensure the abort thread waits until the aborted command is
    complete so we don't perform a double completion. This race
    condition was being hit frequently in environments which
    were triggering command timeouts, which was resulting in
    a double completion causing a kernel oops.

    Cc: <stable@vger.kernel.org>
    Signed-off-by: Brian King <brking@linux.vnet.ibm.com>
    Reviewed-by: Wendy Xiong <wenxiong@linux.vnet.ibm.com>
    Tested-by: Wendy Xiong <wenxiong@linux.vnet.ibm.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/ipr.c b/drivers/scsi/ipr.c
index 5e6eb3e..4ee3d8a 100644
--- a/drivers/scsi/ipr.c
+++ b/drivers/scsi/ipr.c
@@ -683,6 +683,7 @@ static void ipr_init_ipr_cmnd(struct ipr_cmnd *ipr_cmd,
  ipr_reinit_ipr_cmnd(ipr_cmd);
  ipr_cmd->u.scratch = 0;
  ipr_cmd->sibling = NULL;
+ ipr_cmd->eh_comp = NULL;
  ipr_cmd->fast_done = fast_done;
  init_timer(&ipr_cmd->timer);
 }
@@ -848,6 +849,8 @@ static void ipr_scsi_eh_done(struct ipr_cmnd *ipr_cmd)
 
  scsi_dma_unmap(ipr_cmd->scsi_cmd);
  scsi_cmd->scsi_done(scsi_cmd);
+ if (ipr_cmd->eh_comp)
+  complete(ipr_cmd->eh_comp);
  list_add_tail(&ipr_cmd->queue, &ipr_cmd->hrrq->hrrq_free_q);
 }
 
@@ -4845,6 +4848,84 @@ static int ipr_slave_alloc(struct scsi_device *sdev)
  return rc;
 }
 
+/**
+ * ipr_match_lun - Match function for specified LUN
+ * @ipr_cmd: ipr command struct
+ * @device:  device to match (sdev)
+ *
+ * Returns:
+ * 1 if command matches sdev / 0 if command does not match sdev
+ **/
+static int ipr_match_lun(struct ipr_cmnd *ipr_cmd, void *device)
+{
+ if (ipr_cmd->scsi_cmd && ipr_cmd->scsi_cmd->device == device)
+  return 1;
+ return 0;
+}
+
+/**
+ * ipr_wait_for_ops - Wait for matching commands to complete
+ * @ipr_cmd: ipr command struct
+ * @device:  device to match (sdev)
+ * @match:  match function to use
+ *
+ * Returns:
+ * SUCCESS / FAILED
+ **/
+static int ipr_wait_for_ops(struct ipr_ioa_cfg *ioa_cfg, void *device,
+       int (*match)(struct ipr_cmnd *, void *))
+{
+ struct ipr_cmnd *ipr_cmd;
+ int wait;
+ unsigned long flags;
+ struct ipr_hrr_queue *hrrq;
+ signed long timeout = IPR_ABORT_TASK_TIMEOUT;
+ DECLARE_COMPLETION_ONSTACK(comp);
+
+ ENTER;
+ do {
+  wait = 0;
+
+  for_each_hrrq(hrrq, ioa_cfg) {
+   spin_lock_irqsave(hrrq->lock, flags);
+   list_for_each_entry(ipr_cmd, &hrrq->hrrq_pending_q, queue) {
+    if (match(ipr_cmd, device)) {
+     ipr_cmd->eh_comp = &comp;
+     wait++;
+    }
+   }
+   spin_unlock_irqrestore(hrrq->lock, flags);
+  }
+
+  if (wait) {
+   timeout = wait_for_completion_timeout(&comp, timeout);
+
+   if (!timeout) {
+    wait = 0;
+
+    for_each_hrrq(hrrq, ioa_cfg) {
+     spin_lock_irqsave(hrrq->lock, flags);
+     list_for_each_entry(ipr_cmd, &hrrq->hrrq_pending_q, queue) {
+      if (match(ipr_cmd, device)) {
+       ipr_cmd->eh_comp = NULL;
+       wait++;
+      }
+     }
+     spin_unlock_irqrestore(hrrq->lock, flags);
+    }
+
+    if (wait)
+     dev_err(&ioa_cfg->pdev->dev, "Timed out waiting for aborted commands\n");
+    LEAVE;
+    return wait ? FAILED : SUCCESS;
+   }
+  }
+ } while (wait);
+
+ LEAVE;
+ return SUCCESS;
+}
+
 static int ipr_eh_host_reset(struct scsi_cmnd *cmd)
 {
  struct ipr_ioa_cfg *ioa_cfg;
@@ -5064,11 +5145,17 @@ static int __ipr_eh_dev_reset(struct scsi_cmnd *scsi_cmd)
 static int ipr_eh_dev_reset(struct scsi_cmnd *cmd)
 {
  int rc;
+ struct ipr_ioa_cfg *ioa_cfg;
+
+ ioa_cfg = (struct ipr_ioa_cfg *) cmd->device->host->hostdata;
 
  spin_lock_irq(cmd->device->host->host_lock);
  rc = __ipr_eh_dev_reset(cmd);
  spin_unlock_irq(cmd->device->host->host_lock);
 
+ if (rc == SUCCESS)
+  rc = ipr_wait_for_ops(ioa_cfg, cmd->device, ipr_match_lun);
+
  return rc;
 }
 
@@ -5246,13 +5333,18 @@ static int ipr_eh_abort(struct scsi_cmnd *scsi_cmd)
 {
  unsigned long flags;
  int rc;
+ struct ipr_ioa_cfg *ioa_cfg;
 
  ENTER;
 
+ ioa_cfg = (struct ipr_ioa_cfg *) scsi_cmd->device->host->hostdata;
+
  spin_lock_irqsave(scsi_cmd->device->host->host_lock, flags);
  rc = ipr_cancel_op(scsi_cmd);
  spin_unlock_irqrestore(scsi_cmd->device->host->host_lock, flags);
 
+ if (rc == SUCCESS)
+  rc = ipr_wait_for_ops(ioa_cfg, scsi_cmd->device, ipr_match_lun);
  LEAVE;
  return rc;
 }
diff --git a/drivers/scsi/ipr.h b/drivers/scsi/ipr.h
index 31ed126..c24c747 100644
--- a/drivers/scsi/ipr.h
+++ b/drivers/scsi/ipr.h
@@ -1607,6 +1607,7 @@ struct ipr_cmnd {
   struct scsi_device *sdev;
  } u;
 
+ struct completion *eh_comp;
  struct ipr_hrr_queue *hrrq;
  struct ipr_ioa_cfg *ioa_cfg;
 };
-- 
1.7.1