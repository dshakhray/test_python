From dac8baa10da0c1147ae95c6804b02af0991fe763 Mon Sep 17 00:00:00 2001
From: Rui Wang <ruwang@redhat.com>
Date: Fri, 22 Aug 2014 03:11:12 -0400
Subject: [edac] Add an edac_report parameter to EDAC

Message-id: <1408677072-31761-1-git-send-email-ruwang@redhat.com>
Patchwork-id: 88689
O-Subject: [PATCH v2 RHEL7.1 BZ1076655 14/17] EDAC: Add an edac_report parameter
Bugzilla: 1076655
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Aristeu Rozanski <aris@redhat.com>

From: "Chen, Gong" <gong.chen@linux.intel.com>

Backport of:
Original commit: c700f013adb0ec57518a7fe0163e3117659ce249
Original Author: "Chen, Gong" <gong.chen@linux.intel.com>
Original Date: Fri, 6 Dec 2013 01:17:08 -0500

 This new parameter is used to control how to report HW error reporting,
 especially for newer Intel platform, like Ivybridge-EX, which contains
 an enhanced error decoding functionality in the firmware, i.e. eMCA.

Signed-off-by: Chen, Gong <gong.chen@linux.intel.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 7dbc936..703e217 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -843,6 +843,14 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 
    The xen output can only be used by Xen PV guests.
 
+ edac_report= [HW,EDAC] Control how to report EDAC event
+   Format: {"on" | "off" | "force"}
+   on: enable EDAC to report H/W event. May be overridden
+   by other higher priority error reporting module.
+   off: disable H/W event reporting through EDAC.
+   force: enforce the use of EDAC to report H/W event.
+   default: on.
+
  ekgdboc= [X86,KGDB] Allow early kernel console debugging
    ekgdboc=kbd
 
diff --git a/drivers/edac/edac_stub.c b/drivers/edac/edac_stub.c
index 351945f..648bfd8 100644
--- a/drivers/edac/edac_stub.c
+++ b/drivers/edac/edac_stub.c
@@ -29,6 +29,25 @@ EXPORT_SYMBOL_GPL(edac_err_assert);
 
 static atomic_t edac_subsys_valid = ATOMIC_INIT(0);
 
+int edac_report_status = EDAC_REPORTING_FORCE;
+EXPORT_SYMBOL_GPL(edac_report_status);
+
+static int __init edac_report_setup(char *str)
+{
+ if (!str)
+  return -EINVAL;
+
+ if (!strncmp(str, "on", 2))
+  set_edac_report_status(EDAC_REPORTING_ENABLED);
+ else if (!strncmp(str, "off", 3))
+  set_edac_report_status(EDAC_REPORTING_DISABLED);
+ else if (!strncmp(str, "force", 5))
+  set_edac_report_status(EDAC_REPORTING_FORCE);
+
+ return 0;
+}
+__setup("edac_report=", edac_report_setup);
+
 /*
  * called to determine if there is an EDAC driver interested in
  * knowing an event (such as NMI) occurred
diff --git a/include/linux/edac.h b/include/linux/edac.h
index bd50877..e1e68da 100644
--- a/include/linux/edac.h
+++ b/include/linux/edac.h
@@ -35,6 +35,34 @@ extern void edac_atomic_assert_error(void);
 extern struct bus_type *edac_get_sysfs_subsys(void);
 extern void edac_put_sysfs_subsys(void);
 
+enum {
+ EDAC_REPORTING_ENABLED,
+ EDAC_REPORTING_DISABLED,
+ EDAC_REPORTING_FORCE
+};
+
+extern int edac_report_status;
+#ifdef CONFIG_EDAC
+static inline int get_edac_report_status(void)
+{
+ return edac_report_status;
+}
+
+static inline void set_edac_report_status(int new)
+{
+ edac_report_status = new;
+}
+#else
+static inline int get_edac_report_status(void)
+{
+ return EDAC_REPORTING_DISABLED;
+}
+
+static inline void set_edac_report_status(int new)
+{
+}
+#endif
+
 static inline void opstate_init(void)
 {
  switch (edac_op_state) {
-- 
1.7.1