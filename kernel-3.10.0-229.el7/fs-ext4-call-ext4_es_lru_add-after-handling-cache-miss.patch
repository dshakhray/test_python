From d73fb16a3205a1839149c4e98fbc29300f319799 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:22 -0400
Subject: [fs] ext4: call ext4_es_lru_add() after handling cache miss

Message-id: <1414058125-4183-49-git-send-email-lczerner@redhat.com>
Patchwork-id: 98265
O-Subject: [RHEL 7.1 PATCH v2 048/171] ext4: call ext4_es_lru_add() after handling cache miss
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 63b999685cb372e24eb73f255cd73547026370fd

 If there are no items in the extent status tree, ext4_es_lru_add() is
 a no-op.  So it is not sufficient to call ext4_es_lru_add() before we
 try to lookup an entry in the extent status tree.  We also need to
 call it at the end of ext4_ext_map_blocks(), after items have been
 added to the extent status tree.

 This could lead to inodes with that have extent status trees but which
 are not in the LRU list, which means they won't get considered for
 eviction by the es_shrinker.

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Cc: Zheng Liu <wenqing.lz@taobao.com>
 Cc: stable@vger.kernel.org
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 2f25f79..2037056 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -4385,8 +4385,9 @@ out2:
  }
 
 out3:
- trace_ext4_ext_map_blocks_exit(inode, flags, map, err ? err : allocated);
-
+ trace_ext4_ext_map_blocks_exit(inode, flags, map,
+           err ? err : allocated);
+ ext4_es_lru_add(inode);
  return err ? err : allocated;
 }
 
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index b1449b8..31c9c34 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -514,10 +514,9 @@ int ext4_map_blocks(handle_t *handle, struct inode *inode,
     "logical block %lu\n", inode->i_ino, flags, map->m_len,
     (unsigned long) map->m_lblk);
 
- ext4_es_lru_add(inode);
-
  /* Lookup extent status tree firstly */
  if (ext4_es_lookup_extent(inode, map->m_lblk, &es)) {
+  ext4_es_lru_add(inode);
   if (ext4_es_is_written(&es) || ext4_es_is_unwritten(&es)) {
    map->m_pblk = ext4_es_pblock(&es) +
      map->m_lblk - es.es_lblk;
@@ -1530,11 +1529,9 @@ static int ext4_da_map_blocks(struct inode *inode, sector_t iblock,
     "logical block %lu\n", inode->i_ino, map->m_len,
     (unsigned long) map->m_lblk);
 
- ext4_es_lru_add(inode);
-
  /* Lookup extent status tree firstly */
  if (ext4_es_lookup_extent(inode, iblock, &es)) {
-
+  ext4_es_lru_add(inode);
   if (ext4_es_is_hole(&es)) {
    retval = 0;
    down_read((&EXT4_I(inode)->i_data_sem));
-- 
1.7.1