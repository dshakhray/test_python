From e89adf57c52c980e6f91e2cfcde61ecab0d9df08 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:01 -0400
Subject: [block] blk-mq: fix wrong usage of hctx->state vs hctx->flags

Message-id: <1402670238-13916-14-git-send-email-snitzer@redhat.com>
Patchwork-id: 83777
O-Subject: [RHEL7.1 PATCH 013/150] blk-mq: fix wrong usage of hctx->state vs hctx->flags
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 5d12f905cc50c0810628d0deedd478ec2db48659
Author: Jens Axboe <axboe@fb.com>
Date:   Wed Mar 19 15:25:02 2014 -0600

    blk-mq: fix wrong usage of hctx->state vs hctx->flags

    BLK_MQ_F_* flags are for hctx->flags, and are non-atomic and
    set at registration time. BLK_MQ_S_* flags are dynamic and
    atomic, and are accessed through hctx->state.

    Some of the BLK_MQ_S_STOPPED uses were wrong. Additionally,
    the header file should not use a bit shift for the _S_ flags,
    as they are done through the set/test_bit functions.

    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index b25f50f..f8e89f9 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -514,7 +514,7 @@ static void __blk_mq_run_hw_queue(struct blk_mq_hw_ctx *hctx)
  LIST_HEAD(rq_list);
  int bit, queued;
 
- if (unlikely(test_bit(BLK_MQ_S_STOPPED, &hctx->flags)))
+ if (unlikely(test_bit(BLK_MQ_S_STOPPED, &hctx->state)))
   return;
 
  hctx->run++;
@@ -603,7 +603,7 @@ static void __blk_mq_run_hw_queue(struct blk_mq_hw_ctx *hctx)
 
 void blk_mq_run_hw_queue(struct blk_mq_hw_ctx *hctx, bool async)
 {
- if (unlikely(test_bit(BLK_MQ_S_STOPPED, &hctx->flags)))
+ if (unlikely(test_bit(BLK_MQ_S_STOPPED, &hctx->state)))
   return;
 
  if (!async)
@@ -623,7 +623,7 @@ void blk_mq_run_queues(struct request_queue *q, bool async)
  queue_for_each_hw_ctx(q, hctx, i) {
   if ((!blk_mq_hctx_has_pending(hctx) &&
       list_empty_careful(&hctx->dispatch)) ||
-      test_bit(BLK_MQ_S_STOPPED, &hctx->flags))
+      test_bit(BLK_MQ_S_STOPPED, &hctx->state))
    continue;
 
   blk_mq_run_hw_queue(hctx, async);
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 2a59679..674bbed 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -109,7 +109,7 @@ enum {
  BLK_MQ_F_SHOULD_SORT = 1 << 1,
  BLK_MQ_F_SHOULD_IPI = 1 << 2,
 
- BLK_MQ_S_STOPPED = 1 << 0,
+ BLK_MQ_S_STOPPED = 0,
 
  BLK_MQ_MAX_DEPTH = 2048,
 };
-- 
1.7.1