From c7c671edc001f2fad188b3d87b720fb40672c903 Mon Sep 17 00:00:00 2001
From: Richard Guy Briggs <rgb@redhat.com>
Date: Wed, 1 Oct 2014 21:35:54 -0400
Subject: [kernel] syscall_get_arch: remove useless function arguments

Message-id: <a70a586481dc53f5a6c0109ff9b94d8f09281e0a.1412192166.git.rgb@redhat.com>
Patchwork-id: 96858
O-Subject: [RHEL7 PATCH V2 1/9] syscall_get_arch: remove useless function arguments
Bugzilla: 1053921
RH-Acked-by: Eric Paris <eparis@redhat.com>
RH-Acked-by: Paul Moore <pmoore@redhat.com>

From: Eric Paris <eparis@redhat.com>

Every caller of syscall_get_arch() uses current for the task and no
implementors of the function need args.  So just get rid of both of
those things.  Admittedly, since these are inline functions we aren't
wasting stack space, but it just makes the prototypes better.

RGB: Removed blobs from unsupported arches.

Upstream-commit: 5e937a9
Based-on-patch-by: Richard Guy Briggs <rgb@redhat.com>
Signed-off-by: Eric Paris <eparis@redhat.com>
Cc: linux-arm-kernel@lists.infradead.org
Cc: linux-mips@linux-mips.org
Cc: linux390@de.ibm.com
Cc: x86@kernel.org
Cc: linux-kernel@vger.kernel.org
Cc: linux-s390@vger.kernel.org
Cc: linux-arch@vger.kernel.org
Signed-off-by: Richard Guy Briggs <rgb@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/include/asm/syscall.h b/arch/s390/include/asm/syscall.h
index cd29d2f..bebc0bd 100644
--- a/arch/s390/include/asm/syscall.h
+++ b/arch/s390/include/asm/syscall.h
@@ -89,11 +89,10 @@ static inline void syscall_set_arguments(struct task_struct *task,
   regs->orig_gpr2 = args[0];
 }
 
-static inline int syscall_get_arch(struct task_struct *task,
-       struct pt_regs *regs)
+static inline int syscall_get_arch(void)
 {
 #ifdef CONFIG_COMPAT
- if (test_tsk_thread_flag(task, TIF_31BIT))
+ if (test_tsk_thread_flag(current, TIF_31BIT))
   return AUDIT_ARCH_S390;
 #endif
  return sizeof(long) == 8 ? AUDIT_ARCH_S390X : AUDIT_ARCH_S390;
diff --git a/arch/x86/include/asm/syscall.h b/arch/x86/include/asm/syscall.h
index 2e188d6..f106908 100644
--- a/arch/x86/include/asm/syscall.h
+++ b/arch/x86/include/asm/syscall.h
@@ -90,8 +90,7 @@ static inline void syscall_set_arguments(struct task_struct *task,
  memcpy(&regs->bx + i, args, n * sizeof(args[0]));
 }
 
-static inline int syscall_get_arch(struct task_struct *task,
-       struct pt_regs *regs)
+static inline int syscall_get_arch(void)
 {
  return AUDIT_ARCH_I386;
 }
@@ -220,8 +219,7 @@ static inline void syscall_set_arguments(struct task_struct *task,
   }
 }
 
-static inline int syscall_get_arch(struct task_struct *task,
-       struct pt_regs *regs)
+static inline int syscall_get_arch(void)
 {
 #ifdef CONFIG_IA32_EMULATION
  /*
@@ -233,7 +231,7 @@ static inline int syscall_get_arch(struct task_struct *task,
   *
   * x32 tasks should be considered AUDIT_ARCH_X86_64.
   */
- if (task_thread_info(task)->status & TS_COMPAT)
+ if (task_thread_info(current)->status & TS_COMPAT)
   return AUDIT_ARCH_I386;
 #endif
  /* Both x32 and x86_64 are considered "64-bit". */
diff --git a/include/asm-generic/syscall.h b/include/asm-generic/syscall.h
index 5b09392..d401e54 100644
--- a/include/asm-generic/syscall.h
+++ b/include/asm-generic/syscall.h
@@ -144,8 +144,6 @@ void syscall_set_arguments(struct task_struct *task, struct pt_regs *regs,
 
 /**
  * syscall_get_arch - return the AUDIT_ARCH for the current system call
- * @task: task of interest, must be in system call entry tracing
- * @regs: task_pt_regs() of @task
  *
  * Returns the AUDIT_ARCH_* based on the system call convention in use.
  *
@@ -155,5 +153,5 @@ void syscall_set_arguments(struct task_struct *task, struct pt_regs *regs,
  * Architectures which permit CONFIG_HAVE_ARCH_SECCOMP_FILTER must
  * provide an implementation of this.
  */
-int syscall_get_arch(struct task_struct *task, struct pt_regs *regs);
+int syscall_get_arch(void);
 #endif /* _ASM_SYSCALL_H */
diff --git a/kernel/seccomp.c b/kernel/seccomp.c
index b7a1004..eda2da3 100644
--- a/kernel/seccomp.c
+++ b/kernel/seccomp.c
@@ -95,7 +95,7 @@ u32 seccomp_bpf_load(int off)
  if (off == BPF_DATA(nr))
   return syscall_get_nr(current, regs);
  if (off == BPF_DATA(arch))
-  return syscall_get_arch(current, regs);
+  return syscall_get_arch();
  if (off >= BPF_DATA(args[0]) && off < BPF_DATA(args[6])) {
   unsigned long value;
   int arg = (off - BPF_DATA(args[0])) / sizeof(u64);
@@ -351,7 +351,7 @@ static void seccomp_send_sigsys(int syscall, int reason)
  info.si_code = SYS_SECCOMP;
  info.si_call_addr = (void __user *)KSTK_EIP(current);
  info.si_errno = reason;
- info.si_arch = syscall_get_arch(current, task_pt_regs(current));
+ info.si_arch = syscall_get_arch();
  info.si_syscall = syscall;
  force_sig_info(SIGSYS, &info, current);
 }
-- 
1.7.1