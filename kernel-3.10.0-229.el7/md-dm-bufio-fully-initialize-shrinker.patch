From b8ccc7d50484a644494b28782dedce40394fdfa3 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Thu, 23 Oct 2014 20:01:11 -0400
Subject: [md] dm-bufio: fully initialize shrinker

Message-id: <1414094494-22068-2-git-send-email-snitzer@redhat.com>
Patchwork-id: 98338
O-Subject: [RHEL7.2 PATCH 01/24] dm bufio: fully initialize shrinker
Bugzilla: 1156161
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1156161

Upstream commit d8c712ea471ce7a4fd1734ad2211adf8469ddddc
Author: Greg Thelen <gthelen@google.com>
Date:   Thu Jul 31 09:07:19 2014 -0700

    dm bufio: fully initialize shrinker

    1d3d4437eae1 ("vmscan: per-node deferred work") added a flags field to
    struct shrinker assuming that all shrinkers were zero filled.  The dm
    bufio shrinker is not zero filled, which leaves arbitrary kmalloc() data
    in flags.  So far the only defined flags bit is SHRINKER_NUMA_AWARE.
    But there are proposed patches which add other bits to shrinker.flags
    (e.g. memcg awareness).

    Rather than simply initializing the shrinker, this patch uses kzalloc()
    when allocating the dm_bufio_client to ensure that the embedded shrinker
    and any other similar structures are zeroed.

    This fixes theoretical over aggressive shrinking of dm bufio objects.
    If the uninitialized dm_bufio_client.shrinker.flags contains
    SHRINKER_NUMA_AWARE then shrink_slab() would call the dm shrinker for
    each numa node rather than just once.  This has been broken since 3.12.

    Signed-off-by: Greg Thelen <gthelen@google.com>
    Acked-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org # v3.12+
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-bufio.c b/drivers/md/dm-bufio.c
index 09ef26a..d1ad083 100644
--- a/drivers/md/dm-bufio.c
+++ b/drivers/md/dm-bufio.c
@@ -1528,7 +1528,7 @@ struct dm_bufio_client *dm_bufio_client_create(struct block_device *bdev, unsign
  BUG_ON(block_size < 1 << SECTOR_SHIFT ||
         (block_size & (block_size - 1)));
 
- c = kmalloc(sizeof(*c), GFP_KERNEL);
+ c = kzalloc(sizeof(*c), GFP_KERNEL);
  if (!c) {
   r = -ENOMEM;
   goto bad_client;
-- 
1.7.1