From d0c17c9a6182e7293de544e44a3e6808c9cfa280 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:50:50 -0400
Subject: [fs] nfsd: use xdr_stream throughout compound encoding

Message-id: <1403560314-32525-109-git-send-email-bfields@redhat.com>
Patchwork-id: 84579
O-Subject: [Patch RHEL7 108/172] nfsd4: use xdr_stream throughout compound encoding
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

Note this makes ADJUST_ARGS useless; we'll remove it in the following
patch.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: d3f627c815b6eb5f6be388100617c36823d661c5
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4proc.c b/fs/nfsd/nfs4proc.c
index dbdd5ec..f213620 100644
--- a/fs/nfsd/nfs4proc.c
+++ b/fs/nfsd/nfs4proc.c
@@ -1283,7 +1283,7 @@ nfsd4_proc_compound(struct svc_rqst *rqstp,
  svcxdr_init_encode(rqstp, resp);
  resp->tagp = resp->xdr.p;
  /* reserve space for: taglen, tag, and opcnt */
- resp->xdr.p += 2 + XDR_QUADLEN(args->taglen);
+ xdr_reserve_space(&resp->xdr, 8 + args->taglen);
  resp->taglen = args->taglen;
  resp->tag = args->tag;
  resp->opcnt = 0;
diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 27d1e94..5064cb5 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -1747,10 +1747,10 @@ static void write_cinfo(__be32 **p, struct nfsd4_change_info *c)
 }
 
 #define RESERVE_SPACE(nbytes) do {    \
- p = resp->xdr.p;      \
- BUG_ON(p + XDR_QUADLEN(nbytes) > resp->xdr.end);  \
+ p = xdr_reserve_space(&resp->xdr, nbytes);  \
+ BUG_ON(!p);      \
 } while (0)
-#define ADJUST_ARGS()  resp->xdr.p = p
+#define ADJUST_ARGS()  WARN_ON_ONCE(p != resp->xdr.p) \
 
 /* Encode as an array of strings the string given with components
  * separated @sep, escaped with esc_enter and esc_exit.
@@ -3056,8 +3056,11 @@ nfsd4_encode_read(struct nfsd4_compoundres *resp, __be32 nfserr,
    read->rd_offset, resp->rqstp->rq_vec, read->rd_vlen,
    &maxcount);
 
- if (nfserr)
+ if (nfserr) {
+  xdr->p -= 2;
+  xdr->iov->iov_len -= 8;
   return nfserr;
+ }
  eof = (read->rd_offset + maxcount >=
         read->rd_fhp->fh_dentry->d_inode->i_size);
 
@@ -3110,9 +3113,12 @@ nfsd4_encode_readlink(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd
   */
  nfserr = nfsd_readlink(readlink->rl_rqstp, readlink->rl_fhp, page, &maxcount);
  if (nfserr == nfserr_isdir)
-  return nfserr_inval;
- if (nfserr)
+  nfserr = nfserr_inval;
+ if (nfserr) {
+  xdr->p--;
+  xdr->iov->iov_len -= 4;
   return nfserr;
+ }
 
  WRITE32(maxcount);
  ADJUST_ARGS();
@@ -3213,8 +3219,9 @@ nfsd4_encode_readdir(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4
 
  return 0;
 err_no_verf:
- p = savep;
- ADJUST_ARGS();
+ xdr->p = savep;
+ xdr->iov->iov_len = ((char *)resp->xdr.p)
+    - (char *)resp->xdr.buf->head[0].iov_base;
  return nfserr;
 }
 
-- 
1.7.1