From ceb159a34cdad29c473d330e9a6dc4be765ba76f Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:49:31 -0400
Subject: [tools] perf: Add filename__read_str util function

Message-id: <1408953210-26343-84-git-send-email-jolsa@redhat.com>
Patchwork-id: 88794
O-Subject: [PATCH RHEL7.1 BZ1133083 083/322] perf tools: Add filename__read_str util function
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit cef82c9f5a3deab94c1f1f02cfc25213844852ed
Author: Jiri Olsa <jolsa@redhat.com>
Date: Tue Dec 3 14:09:22 2013 +0100

description
===========
Adding filename__read_str util function to read
text file and return it in the char array.

The interface is:
  int filename__read_str(const char *filename, char **buf, size_t *sizep)

  Returns 0/-1 if the read suceeded/fail respectively.

  buf  - place to store the data pointer
  size - place to store data size

v2 change:
  - better error handling suggested by Namhyung Kim.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/util.c b/tools/perf/util/util.c
index b1d5376..bae8756 100644
--- a/tools/perf/util/util.c
+++ b/tools/perf/util/util.c
@@ -6,6 +6,8 @@
 #endif
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
+#include <errno.h>
 #include <linux/kernel.h>
 
 /*
@@ -433,3 +435,50 @@ int filename__read_int(const char *filename, int *value)
  close(fd);
  return err;
 }
+
+int filename__read_str(const char *filename, char **buf, size_t *sizep)
+{
+ size_t size = 0, alloc_size = 0;
+ void *bf = NULL, *nbf;
+ int fd, n, err = 0;
+
+ fd = open(filename, O_RDONLY);
+ if (fd < 0)
+  return -errno;
+
+ do {
+  if (size == alloc_size) {
+   alloc_size += BUFSIZ;
+   nbf = realloc(bf, alloc_size);
+   if (!nbf) {
+    err = -ENOMEM;
+    break;
+   }
+
+   bf = nbf;
+  }
+
+  n = read(fd, bf + size, alloc_size - size);
+  if (n < 0) {
+   if (size) {
+    pr_warning("read failed %d: %s\n",
+        errno, strerror(errno));
+    err = 0;
+   } else
+    err = -errno;
+
+   break;
+  }
+
+  size += n;
+ } while (n > 0);
+
+ if (!err) {
+  *sizep = size;
+  *buf   = bf;
+ } else
+  free(bf);
+
+ close(fd);
+ return err;
+}
diff --git a/tools/perf/util/util.h b/tools/perf/util/util.h
index ce0f73d..adb39f2 100644
--- a/tools/perf/util/util.h
+++ b/tools/perf/util/util.h
@@ -308,4 +308,5 @@ char *get_srcline(struct dso *dso, unsigned long addr);
 void free_srcline(char *srcline);
 
 int filename__read_int(const char *filename, int *value);
+int filename__read_str(const char *filename, char **buf, size_t *sizep);
 #endif /* GIT_COMPAT_UTIL_H */
-- 
1.7.1