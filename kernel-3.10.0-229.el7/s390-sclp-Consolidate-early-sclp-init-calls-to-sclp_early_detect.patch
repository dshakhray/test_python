From e233d9d95100d43576cb8f095d07b1d1d71cf160 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Mon, 16 Jun 2014 12:55:56 -0400
Subject: [s390] sclp: Consolidate early sclp init calls to sclp_early_detect()

Message-id: <1402923362-2331-6-git-send-email-brueckner@redhat.com>
Patchwork-id: 84029
O-Subject: [RHEL7.1 PATCH 05/11] [s390] s390/sclp: Consolidate early sclp init calls to sclp_early_detect()
Bugzilla: 1107730
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 7b50da53f6ad2048241bef232bfc22a132a40283
Author: Michael Holzheu <holzheu@linux.vnet.ibm.com>
Date:   Wed Nov 13 10:38:27 2013 +0100

    s390/sclp: Consolidate early sclp init calls to sclp_early_detect()

    The new function calls the old ones. The sclp_event_mask_early() is removed
    and replaced by one invocation of sclp_set_event_mask(0, 0).

    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1107730
https://bugzilla.redhat.com/show_bug.cgi?id=1107730

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=7b50da53f6ad2048241bef232bfc22a132a40283

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7572070

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/include/asm/sclp.h b/arch/s390/include/asm/sclp.h
index d8455be..2f39095 100644
--- a/arch/s390/include/asm/sclp.h
+++ b/arch/s390/include/asm/sclp.h
@@ -44,7 +44,6 @@ struct sclp_cpu_info {
 int sclp_get_cpu_info(struct sclp_cpu_info *info);
 int sclp_cpu_configure(u8 cpu);
 int sclp_cpu_deconfigure(u8 cpu);
-void sclp_facilities_detect(void);
 unsigned long long sclp_get_rnmax(void);
 unsigned long long sclp_get_rzm(void);
 int sclp_sdias_blk_count(void);
@@ -58,7 +57,7 @@ bool sclp_has_vt220(void);
 int sclp_pci_configure(u32 fid);
 int sclp_pci_deconfigure(u32 fid);
 int memcpy_hsa(void *dest, unsigned long src, size_t count, int mode);
-void sclp_hsa_size_detect(void);
 unsigned long sclp_get_hsa_size(void);
+void sclp_early_detect(void);
 
 #endif /* _ASM_S390_SCLP_H */
diff --git a/arch/s390/kernel/early.c b/arch/s390/kernel/early.c
index 67928f0..7e16350 100644
--- a/arch/s390/kernel/early.c
+++ b/arch/s390/kernel/early.c
@@ -481,8 +481,7 @@ void __init startup_init(void)
  detect_diag44();
  detect_machine_facilities();
  setup_topology();
- sclp_facilities_detect();
- sclp_hsa_size_detect();
+ sclp_early_detect();
 #ifdef CONFIG_DYNAMIC_FTRACE
  S390_lowcore.ftrace_func = (unsigned long)ftrace_caller;
 #endif
diff --git a/drivers/s390/char/sclp_early.c b/drivers/s390/char/sclp_early.c
index cbec45f..f7aa080 100644
--- a/drivers/s390/char/sclp_early.c
+++ b/drivers/s390/char/sclp_early.c
@@ -93,20 +93,7 @@ static void __init sclp_read_info_early(void)
  }
 }
 
-static void __init sclp_event_mask_early(void)
-{
- struct init_sccb *sccb = &early_event_mask_sccb;
- int rc;
-
- do {
-  memset(sccb, 0, sizeof(*sccb));
-  sccb->header.length = sizeof(*sccb);
-  sccb->mask_length = sizeof(sccb_mask_t);
-  rc = sclp_cmd_sync_early(SCLP_CMDW_WRITE_EVENT_MASK, sccb);
- } while (rc == -EBUSY);
-}
-
-void __init sclp_facilities_detect(void)
+static void __init sclp_facilities_detect(void)
 {
  struct read_info_sccb *sccb;
 
@@ -122,8 +109,6 @@ void __init sclp_facilities_detect(void)
  sclp_rnmax = sccb->rnmax ? sccb->rnmax : sccb->rnmax2;
  sclp_rzm = sccb->rnsize ? sccb->rnsize : sccb->rnsize2;
  sclp_rzm <<= 20;
-
- sclp_event_mask_early();
 }
 
 bool __init sclp_has_linemode(void)
@@ -246,7 +231,7 @@ unsigned long sclp_get_hsa_size(void)
  return sclp_hsa_size;
 }
 
-void __init sclp_hsa_size_detect(void)
+static void __init sclp_hsa_size_detect(void)
 {
  long size;
 
@@ -268,6 +253,12 @@ void __init sclp_hsa_size_detect(void)
  if (size < 0)
   return;
 out:
- sclp_set_event_mask(0, 0);
  sclp_hsa_size = size;
 }
+
+void __init sclp_early_detect(void)
+{
+ sclp_facilities_detect();
+ sclp_hsa_size_detect();
+ sclp_set_event_mask(0, 0);
+}
-- 
1.7.1