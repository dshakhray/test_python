From 9c6f3e3af997d4920788663c7656a1d437cb5965 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 13 Jun 2014 15:05:46 -0400
Subject: [init] main: add initcall_blacklist kernel parameter

Message-id: <1402671946-20181-1-git-send-email-prarit@redhat.com>
Patchwork-id: 83908
O-Subject: [RHEL7.1 PATCH BZ 1080995] init/main.c: add initcall_blacklist kernel parameter
Bugzilla: 1080995
RH-Acked-by: Josh Boyer <jwboyer@redhat.com>
RH-Acked-by: Kyle McMartin <kmcmarti@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1080995
http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7576515

commit 7b0b73d76651e5f88c88b76efa18d719f832bf6f
Author: Prarit Bhargava <prarit@redhat.com>
Date:   Wed Jun 4 16:12:17 2014 -0700

    init/main.c: add initcall_blacklist kernel parameter

    When a module is built into the kernel the module_init() function
    becomes an initcall.  Sometimes debugging through dynamic debug can
    help, however, debugging built in kernel modules is typically done by
    changing the .config, recompiling, and booting the new kernel in an
    effort to determine exactly which module caused a problem.

    This patchset can be useful stand-alone or combined with initcall_debug.
    There are cases where some initcalls can hang the machine before the
    console can be flushed, which can make initcall_debug output inaccurate.
    Having the ability to skip initcalls can help further debugging of these
    scenarios.

    Usage: initcall_blacklist=<list of comma separated initcalls>

    ex) added "initcall_blacklist=sgi_uv_sysfs_init" as a kernel parameter and
    the log contains:

     blacklisting initcall sgi_uv_sysfs_init
     ...
     ...
     initcall sgi_uv_sysfs_init blacklisted

    ex) added "initcall_blacklist=foo_bar,sgi_uv_sysfs_init" as a kernel parameter
    and the log contains:

     blacklisting initcall foo_bar
     blacklisting initcall sgi_uv_sysfs_init
     ...
     ...
     initcall sgi_uv_sysfs_init blacklisted

    [akpm@linux-foundation.org: tweak printk text]
    Signed-off-by: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Weinberger <richard.weinberger@gmail.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Josh Boyer <jwboyer@fedoraproject.org>
    Cc: Rob Landley <rob@landley.net>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Kyle McMartin <kmcmarti@redhat.com>
Cc: Vivek Goyal <vgoyal@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 1ea3dd8..499fd5c 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -1171,6 +1171,10 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
    for working out where the kernel is dying during
    startup.
 
+ initcall_blacklist=  [KNL] Do not execute a comma-separated list of
+   initcall functions.  Useful for debugging built-in
+   modules and initcalls.
+
  initrd=  [BOOT] Specify the location of the initial ramdisk
 
  inport.irq= [HW] Inport (ATI XL and Microsoft) busmouse driver
diff --git a/init/main.c b/init/main.c
index c043f5a..e74b65f 100644
--- a/init/main.c
+++ b/init/main.c
@@ -76,6 +76,7 @@
 #include <linux/elevator.h>
 #include <linux/random.h>
 #include <linux/context_tracking.h>
+#include <linux/list.h>
 
 #include <asm/io.h>
 #include <asm/bugs.h>
@@ -660,6 +661,70 @@ core_param(initcall_debug, initcall_debug, bool, 0644);
 
 static char msgbuf[64];
 
+#ifdef CONFIG_KALLSYMS
+struct blacklist_entry {
+ struct list_head next;
+ char *buf;
+};
+
+static __initdata_or_module LIST_HEAD(blacklisted_initcalls);
+
+static int __init initcall_blacklist(char *str)
+{
+ char *str_entry;
+ struct blacklist_entry *entry;
+
+ /* str argument is a comma-separated list of functions */
+ do {
+  str_entry = strsep(&str, ",");
+  if (str_entry) {
+   pr_debug("blacklisting initcall %s\n", str_entry);
+   entry = alloc_bootmem(sizeof(*entry));
+   entry->buf = alloc_bootmem(strlen(str_entry) + 1);
+   strcpy(entry->buf, str_entry);
+   list_add(&entry->next, &blacklisted_initcalls);
+  }
+ } while (str_entry);
+
+ return 0;
+}
+
+static bool __init_or_module initcall_blacklisted(initcall_t fn)
+{
+ struct list_head *tmp;
+ struct blacklist_entry *entry;
+ char *fn_name;
+
+ fn_name = kasprintf(GFP_KERNEL, "%pf", fn);
+ if (!fn_name)
+  return false;
+
+ list_for_each(tmp, &blacklisted_initcalls) {
+  entry = list_entry(tmp, struct blacklist_entry, next);
+  if (!strcmp(fn_name, entry->buf)) {
+   pr_debug("initcall %s blacklisted\n", fn_name);
+   kfree(fn_name);
+   return true;
+  }
+ }
+
+ kfree(fn_name);
+ return false;
+}
+#else
+static int __init initcall_blacklist(char *str)
+{
+ pr_warn("initcall_blacklist requires CONFIG_KALLSYMS\n");
+ return 0;
+}
+
+static bool __init_or_module initcall_blacklisted(initcall_t fn)
+{
+ return false;
+}
+#endif
+__setup("initcall_blacklist=", initcall_blacklist);
+
 static int __init_or_module do_one_initcall_debug(initcall_t fn)
 {
  ktime_t calltime, delta, rettime;
@@ -683,6 +748,9 @@ int __init_or_module do_one_initcall(initcall_t fn)
  int count = preempt_count();
  int ret;
 
+ if (initcall_blacklisted(fn))
+  return -EPERM;
+
  if (initcall_debug)
   ret = do_one_initcall_debug(fn);
  else
-- 
1.7.1