From 4ca60eac055beae24a9c3c5ed2e5096c712b09a9 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:09:39 -0400
Subject: [virt] kvm/ppc: book3s hv - Add get/set_one_reg for new TM state

Message-id: <1410545655-205645-351-git-send-email-dzickus@redhat.com>
Patchwork-id: 94682
O-Subject: [RHEL7 PATCH 350/626] KVM: PPC: Book3S HV: Add get/set_one_reg for new TM state
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit a7d80d01c68ed7d3fbc7bcf4541e6fb7e6b87cd6
Author: Michael Neuling <mikey@neuling.org>
Date:   Tue Mar 25 10:47:03 2014 +1100

    KVM: PPC: Book3S HV: Add get/set_one_reg for new TM state

    This adds code to get/set_one_reg to read and write the new transactional
    memory (TM) state.

    Signed-off-by: Michael Neuling <mikey@neuling.org>
    Signed-off-by: Paul Mackerras <paulus@samba.org>
    Acked-by: Scott Wood <scottwood@freescale.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_hv.c b/arch/powerpc/kvm/book3s_hv.c
index c5443ad..5fd1c13 100644
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@ -872,17 +872,6 @@ static int kvmppc_get_one_reg_hv(struct kvm_vcpu *vcpu, u64 id,
  case KVM_REG_PPC_IAMR:
   *val = get_reg_val(id, vcpu->arch.iamr);
   break;
-#ifdef CONFIG_PPC_TRANSACTIONAL_MEM
- case KVM_REG_PPC_TFHAR:
-  *val = get_reg_val(id, vcpu->arch.tfhar);
-  break;
- case KVM_REG_PPC_TFIAR:
-  *val = get_reg_val(id, vcpu->arch.tfiar);
-  break;
- case KVM_REG_PPC_TEXASR:
-  *val = get_reg_val(id, vcpu->arch.texasr);
-  break;
-#endif
  case KVM_REG_PPC_FSCR:
   *val = get_reg_val(id, vcpu->arch.fscr);
   break;
@@ -963,6 +952,69 @@ static int kvmppc_get_one_reg_hv(struct kvm_vcpu *vcpu, u64 id,
  case KVM_REG_PPC_PPR:
   *val = get_reg_val(id, vcpu->arch.ppr);
   break;
+#ifdef CONFIG_PPC_TRANSACTIONAL_MEM
+ case KVM_REG_PPC_TFHAR:
+  *val = get_reg_val(id, vcpu->arch.tfhar);
+  break;
+ case KVM_REG_PPC_TFIAR:
+  *val = get_reg_val(id, vcpu->arch.tfiar);
+  break;
+ case KVM_REG_PPC_TEXASR:
+  *val = get_reg_val(id, vcpu->arch.texasr);
+  break;
+ case KVM_REG_PPC_TM_GPR0 ... KVM_REG_PPC_TM_GPR31:
+  i = id - KVM_REG_PPC_TM_GPR0;
+  *val = get_reg_val(id, vcpu->arch.gpr_tm[i]);
+  break;
+ case KVM_REG_PPC_TM_VSR0 ... KVM_REG_PPC_TM_VSR63:
+ {
+  int j;
+  i = id - KVM_REG_PPC_TM_VSR0;
+  if (i < 32)
+   for (j = 0; j < TS_FPRWIDTH; j++)
+    val->vsxval[j] = vcpu->arch.fp_tm.fpr[i][j];
+  else {
+   if (cpu_has_feature(CPU_FTR_ALTIVEC))
+    val->vval = vcpu->arch.vr_tm.vr[i-32];
+   else
+    r = -ENXIO;
+  }
+  break;
+ }
+ case KVM_REG_PPC_TM_CR:
+  *val = get_reg_val(id, vcpu->arch.cr_tm);
+  break;
+ case KVM_REG_PPC_TM_LR:
+  *val = get_reg_val(id, vcpu->arch.lr_tm);
+  break;
+ case KVM_REG_PPC_TM_CTR:
+  *val = get_reg_val(id, vcpu->arch.ctr_tm);
+  break;
+ case KVM_REG_PPC_TM_FPSCR:
+  *val = get_reg_val(id, vcpu->arch.fp_tm.fpscr);
+  break;
+ case KVM_REG_PPC_TM_AMR:
+  *val = get_reg_val(id, vcpu->arch.amr_tm);
+  break;
+ case KVM_REG_PPC_TM_PPR:
+  *val = get_reg_val(id, vcpu->arch.ppr_tm);
+  break;
+ case KVM_REG_PPC_TM_VRSAVE:
+  *val = get_reg_val(id, vcpu->arch.vrsave_tm);
+  break;
+ case KVM_REG_PPC_TM_VSCR:
+  if (cpu_has_feature(CPU_FTR_ALTIVEC))
+   *val = get_reg_val(id, vcpu->arch.vr_tm.vscr.u[3]);
+  else
+   r = -ENXIO;
+  break;
+ case KVM_REG_PPC_TM_DSCR:
+  *val = get_reg_val(id, vcpu->arch.dscr_tm);
+  break;
+ case KVM_REG_PPC_TM_TAR:
+  *val = get_reg_val(id, vcpu->arch.tar_tm);
+  break;
+#endif
  case KVM_REG_PPC_ARCH_COMPAT:
   *val = get_reg_val(id, vcpu->arch.vcore->arch_compat);
   break;
@@ -1029,17 +1081,6 @@ static int kvmppc_set_one_reg_hv(struct kvm_vcpu *vcpu, u64 id,
  case KVM_REG_PPC_IAMR:
   vcpu->arch.iamr = set_reg_val(id, *val);
   break;
-#ifdef CONFIG_PPC_TRANSACTIONAL_MEM
- case KVM_REG_PPC_TFHAR:
-  vcpu->arch.tfhar = set_reg_val(id, *val);
-  break;
- case KVM_REG_PPC_TFIAR:
-  vcpu->arch.tfiar = set_reg_val(id, *val);
-  break;
- case KVM_REG_PPC_TEXASR:
-  vcpu->arch.texasr = set_reg_val(id, *val);
-  break;
-#endif
  case KVM_REG_PPC_FSCR:
   vcpu->arch.fscr = set_reg_val(id, *val);
   break;
@@ -1134,6 +1175,68 @@ static int kvmppc_set_one_reg_hv(struct kvm_vcpu *vcpu, u64 id,
  case KVM_REG_PPC_PPR:
   vcpu->arch.ppr = set_reg_val(id, *val);
   break;
+#ifdef CONFIG_PPC_TRANSACTIONAL_MEM
+ case KVM_REG_PPC_TFHAR:
+  vcpu->arch.tfhar = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TFIAR:
+  vcpu->arch.tfiar = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TEXASR:
+  vcpu->arch.texasr = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_GPR0 ... KVM_REG_PPC_TM_GPR31:
+  i = id - KVM_REG_PPC_TM_GPR0;
+  vcpu->arch.gpr_tm[i] = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_VSR0 ... KVM_REG_PPC_TM_VSR63:
+ {
+  int j;
+  i = id - KVM_REG_PPC_TM_VSR0;
+  if (i < 32)
+   for (j = 0; j < TS_FPRWIDTH; j++)
+    vcpu->arch.fp_tm.fpr[i][j] = val->vsxval[j];
+  else
+   if (cpu_has_feature(CPU_FTR_ALTIVEC))
+    vcpu->arch.vr_tm.vr[i-32] = val->vval;
+   else
+    r = -ENXIO;
+  break;
+ }
+ case KVM_REG_PPC_TM_CR:
+  vcpu->arch.cr_tm = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_LR:
+  vcpu->arch.lr_tm = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_CTR:
+  vcpu->arch.ctr_tm = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_FPSCR:
+  vcpu->arch.fp_tm.fpscr = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_AMR:
+  vcpu->arch.amr_tm = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_PPR:
+  vcpu->arch.ppr_tm = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_VRSAVE:
+  vcpu->arch.vrsave_tm = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_VSCR:
+  if (cpu_has_feature(CPU_FTR_ALTIVEC))
+   vcpu->arch.vr.vscr.u[3] = set_reg_val(id, *val);
+  else
+   r = - ENXIO;
+  break;
+ case KVM_REG_PPC_TM_DSCR:
+  vcpu->arch.dscr_tm = set_reg_val(id, *val);
+  break;
+ case KVM_REG_PPC_TM_TAR:
+  vcpu->arch.tar_tm = set_reg_val(id, *val);
+  break;
+#endif
  case KVM_REG_PPC_ARCH_COMPAT:
   r = kvmppc_set_arch_compat(vcpu, set_reg_val(id, *val));
   break;
-- 
1.7.1