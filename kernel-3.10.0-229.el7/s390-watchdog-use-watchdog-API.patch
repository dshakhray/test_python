From 698e9e190cd97cb5a9a90aaffa1729eb9037403f Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Thu, 10 Jul 2014 09:13:06 -0400
Subject: [s390] watchdog: use watchdog API

Message-id: <1404983588-14286-2-git-send-email-brueckner@redhat.com>
Patchwork-id: 85649
O-Subject: [RHEL7.1 PATCH 1/3] [s390] s390/watchdog: use watchdog API
Bugzilla: 1088540
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit f7a94db4e9594fd4b67e715d7b26864b7bd74a75
Author: Philipp Hachtmann <phacht@de.ibm.com>
Commit: Martin Schwidefsky <schwidefsky@de.ibm.com>

    s390/watchdog: use watchdog API

    Converted the vmwatchdog driver to use the kernel's watchdog API.

    Signed-off-by: Philipp Hachtmann <phacht@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1088540
https://bugzilla.redhat.com/show_bug.cgi?id=1088540

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version v3.16-rc2
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=f7a94db4e9594fd4b67e715d7b26864b7bd74a75

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7683420

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/char/Makefile b/drivers/s390/char/Makefile
index b69ab17..ead8e89 100644
--- a/drivers/s390/char/Makefile
+++ b/drivers/s390/char/Makefile
@@ -19,7 +19,6 @@ obj-$(CONFIG_SCLP_VT220_TTY) += sclp_vt220.o
 obj-$(CONFIG_SCLP_CPI) += sclp_cpi.o
 obj-$(CONFIG_SCLP_ASYNC) += sclp_async.o
 
-obj-$(CONFIG_ZVM_WATCHDOG) += vmwatchdog.o
 obj-$(CONFIG_VMLOGRDR) += vmlogrdr.o
 obj-$(CONFIG_VMCP) += vmcp.o
 
diff --git a/drivers/s390/char/vmwatchdog.c b/drivers/s390/char/vmwatchdog.c
deleted file mode 100644
index e9b7231..0000000
--- a/drivers/s390/char/vmwatchdog.c
+++ /dev/null
@@ -1,337 +0,0 @@
-/*
- * Watchdog implementation based on z/VM Watchdog Timer API
- *
- * Copyright IBM Corp. 2004, 2009
- *
- * The user space watchdog daemon can use this driver as
- * /dev/vmwatchdog to have z/VM execute the specified CP
- * command when the timeout expires. The default command is
- * "IPL", which which cause an immediate reboot.
- */
-#define KMSG_COMPONENT "vmwatchdog"
-#define pr_fmt(fmt) KMSG_COMPONENT ": " fmt
-
-#include <linux/init.h>
-#include <linux/fs.h>
-#include <linux/kernel.h>
-#include <linux/miscdevice.h>
-#include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/slab.h>
-#include <linux/suspend.h>
-#include <linux/watchdog.h>
-
-#include <asm/ebcdic.h>
-#include <asm/io.h>
-#include <asm/uaccess.h>
-
-#define MAX_CMDLEN 240
-#define MIN_INTERVAL 15
-static char vmwdt_cmd[MAX_CMDLEN] = "IPL";
-static bool vmwdt_conceal;
-
-static bool vmwdt_nowayout = WATCHDOG_NOWAYOUT;
-
-MODULE_LICENSE("GPL");
-MODULE_AUTHOR("Arnd Bergmann <arndb@de.ibm.com>");
-MODULE_DESCRIPTION("z/VM Watchdog Timer");
-module_param_string(cmd, vmwdt_cmd, MAX_CMDLEN, 0644);
-MODULE_PARM_DESC(cmd, "CP command that is run when the watchdog triggers");
-module_param_named(conceal, vmwdt_conceal, bool, 0644);
-MODULE_PARM_DESC(conceal, "Enable the CONCEAL CP option while the watchdog "
-  " is active");
-module_param_named(nowayout, vmwdt_nowayout, bool, 0);
-MODULE_PARM_DESC(nowayout, "Watchdog cannot be stopped once started"
-  " (default=CONFIG_WATCHDOG_NOWAYOUT)");
-MODULE_ALIAS_MISCDEV(WATCHDOG_MINOR);
-
-static unsigned int vmwdt_interval = 60;
-static unsigned long vmwdt_is_open;
-static int vmwdt_expect_close;
-
-static DEFINE_MUTEX(vmwdt_mutex);
-
-#define VMWDT_OPEN 0 /* devnode is open or suspend in progress */
-#define VMWDT_RUNNING 1 /* The watchdog is armed */
-
-enum vmwdt_func {
- /* function codes */
- wdt_init   = 0,
- wdt_change = 1,
- wdt_cancel = 2,
- /* flags */
- wdt_conceal = 0x80000000,
-};
-
-static int __diag288(enum vmwdt_func func, unsigned int timeout,
-       char *cmd, size_t len)
-{
- register unsigned long __func asm("2") = func;
- register unsigned long __timeout asm("3") = timeout;
- register unsigned long __cmdp asm("4") = virt_to_phys(cmd);
- register unsigned long __cmdl asm("5") = len;
- int err;
-
- err = -EINVAL;
- asm volatile(
-  " diag %1,%3,0x288\n"
-  "0: la %0,0\n"
-  "1:\n"
-  EX_TABLE(0b,1b)
-  : "+d" (err) : "d"(__func), "d"(__timeout),
-    "d"(__cmdp), "d"(__cmdl) : "1", "cc");
- return err;
-}
-
-static int vmwdt_keepalive(void)
-{
- /* we allocate new memory every time to avoid having
-  * to track the state. static allocation is not an
-  * option since that might not be contiguous in real
-  * storage in case of a modular build */
- static char *ebc_cmd;
- size_t len;
- int ret;
- unsigned int func;
-
- ebc_cmd = kmalloc(MAX_CMDLEN, GFP_KERNEL);
- if (!ebc_cmd)
-  return -ENOMEM;
-
- len = strlcpy(ebc_cmd, vmwdt_cmd, MAX_CMDLEN);
- ASCEBC(ebc_cmd, MAX_CMDLEN);
- EBC_TOUPPER(ebc_cmd, MAX_CMDLEN);
-
- func = vmwdt_conceal ? (wdt_init | wdt_conceal) : wdt_init;
- set_bit(VMWDT_RUNNING, &vmwdt_is_open);
- ret = __diag288(func, vmwdt_interval, ebc_cmd, len);
- WARN_ON(ret != 0);
- kfree(ebc_cmd);
- return ret;
-}
-
-static int vmwdt_disable(void)
-{
- int ret = __diag288(wdt_cancel, 0, "", 0);
- WARN_ON(ret != 0);
- clear_bit(VMWDT_RUNNING, &vmwdt_is_open);
- return ret;
-}
-
-static int __init vmwdt_probe(void)
-{
- /* there is no real way to see if the watchdog is supported,
-  * so we try initializing it with a NOP command ("BEGIN")
-  * that won't cause any harm even if the following disable
-  * fails for some reason */
- static char __initdata ebc_begin[] = {
-  194, 197, 199, 201, 213
- };
- if (__diag288(wdt_init, 15, ebc_begin, sizeof(ebc_begin)) != 0)
-  return -EINVAL;
- return vmwdt_disable();
-}
-
-static int vmwdt_open(struct inode *i, struct file *f)
-{
- int ret;
- if (test_and_set_bit(VMWDT_OPEN, &vmwdt_is_open))
-  return -EBUSY;
- ret = vmwdt_keepalive();
- if (ret)
-  clear_bit(VMWDT_OPEN, &vmwdt_is_open);
- return ret ? ret : nonseekable_open(i, f);
-}
-
-static int vmwdt_close(struct inode *i, struct file *f)
-{
- if (vmwdt_expect_close == 42)
-  vmwdt_disable();
- vmwdt_expect_close = 0;
- clear_bit(VMWDT_OPEN, &vmwdt_is_open);
- return 0;
-}
-
-static struct watchdog_info vmwdt_info = {
- .options = WDIOF_SETTIMEOUT | WDIOF_KEEPALIVEPING | WDIOF_MAGICCLOSE,
- .firmware_version = 0,
- .identity = "z/VM Watchdog Timer",
-};
-
-static int __vmwdt_ioctl(unsigned int cmd, unsigned long arg)
-{
- switch (cmd) {
- case WDIOC_GETSUPPORT:
-  if (copy_to_user((void __user *)arg, &vmwdt_info,
-     sizeof(vmwdt_info)))
-   return -EFAULT;
-  return 0;
- case WDIOC_GETSTATUS:
- case WDIOC_GETBOOTSTATUS:
-  return put_user(0, (int __user *)arg);
- case WDIOC_GETTEMP:
-  return -EINVAL;
- case WDIOC_SETOPTIONS:
-  {
-   int options, ret;
-   if (get_user(options, (int __user *)arg))
-    return -EFAULT;
-   ret = -EINVAL;
-   if (options & WDIOS_DISABLECARD) {
-    ret = vmwdt_disable();
-    if (ret)
-     return ret;
-   }
-   if (options & WDIOS_ENABLECARD) {
-    ret = vmwdt_keepalive();
-   }
-   return ret;
-  }
- case WDIOC_GETTIMEOUT:
-  return put_user(vmwdt_interval, (int __user *)arg);
- case WDIOC_SETTIMEOUT:
-  {
-   int interval;
-   if (get_user(interval, (int __user *)arg))
-    return -EFAULT;
-   if (interval < MIN_INTERVAL)
-    return -EINVAL;
-   vmwdt_interval = interval;
-  }
-  return vmwdt_keepalive();
- case WDIOC_KEEPALIVE:
-  return vmwdt_keepalive();
- }
- return -EINVAL;
-}
-
-static long vmwdt_ioctl(struct file *f, unsigned int cmd, unsigned long arg)
-{
- int rc;
-
- mutex_lock(&vmwdt_mutex);
- rc = __vmwdt_ioctl(cmd, arg);
- mutex_unlock(&vmwdt_mutex);
- return (long) rc;
-}
-
-static ssize_t vmwdt_write(struct file *f, const char __user *buf,
-    size_t count, loff_t *ppos)
-{
- if(count) {
-  if (!vmwdt_nowayout) {
-   size_t i;
-
-   /* note: just in case someone wrote the magic character
-    * five months ago... */
-   vmwdt_expect_close = 0;
-
-   for (i = 0; i != count; i++) {
-    char c;
-    if (get_user(c, buf+i))
-     return -EFAULT;
-    if (c == 'V')
-     vmwdt_expect_close = 42;
-   }
-  }
-  /* someone wrote to us, we should restart timer */
-  vmwdt_keepalive();
- }
- return count;
-}
-
-static int vmwdt_resume(void)
-{
- clear_bit(VMWDT_OPEN, &vmwdt_is_open);
- return NOTIFY_DONE;
-}
-
-/*
- * It makes no sense to go into suspend while the watchdog is running.
- * Depending on the memory size, the watchdog might trigger, while we
- * are still saving the memory.
- * We reuse the open flag to ensure that suspend and watchdog open are
- * exclusive operations
- */
-static int vmwdt_suspend(void)
-{
- if (test_and_set_bit(VMWDT_OPEN, &vmwdt_is_open)) {
-  pr_err("The system cannot be suspended while the watchdog"
-   " is in use\n");
-  return notifier_from_errno(-EBUSY);
- }
- if (test_bit(VMWDT_RUNNING, &vmwdt_is_open)) {
-  clear_bit(VMWDT_OPEN, &vmwdt_is_open);
-  pr_err("The system cannot be suspended while the watchdog"
-   " is running\n");
-  return notifier_from_errno(-EBUSY);
- }
- return NOTIFY_DONE;
-}
-
-/*
- * This function is called for suspend and resume.
- */
-static int vmwdt_power_event(struct notifier_block *this, unsigned long event,
-        void *ptr)
-{
- switch (event) {
- case PM_POST_HIBERNATION:
- case PM_POST_SUSPEND:
-  return vmwdt_resume();
- case PM_HIBERNATION_PREPARE:
- case PM_SUSPEND_PREPARE:
-  return vmwdt_suspend();
- default:
-  return NOTIFY_DONE;
- }
-}
-
-static struct notifier_block vmwdt_power_notifier = {
- .notifier_call = vmwdt_power_event,
-};
-
-static const struct file_operations vmwdt_fops = {
- .open    = &vmwdt_open,
- .release = &vmwdt_close,
- .unlocked_ioctl = &vmwdt_ioctl,
- .write   = &vmwdt_write,
- .owner   = THIS_MODULE,
- .llseek  = noop_llseek,
-};
-
-static struct miscdevice vmwdt_dev = {
- .minor      = WATCHDOG_MINOR,
- .name       = "watchdog",
- .fops       = &vmwdt_fops,
-};
-
-static int __init vmwdt_init(void)
-{
- int ret;
-
- ret = vmwdt_probe();
- if (ret)
-  return ret;
- ret = register_pm_notifier(&vmwdt_power_notifier);
- if (ret)
-  return ret;
- /*
-  * misc_register() has to be the last action in module_init(), because
-  * file operations will be available right after this.
-  */
- ret = misc_register(&vmwdt_dev);
- if (ret) {
-  unregister_pm_notifier(&vmwdt_power_notifier);
-  return ret;
- }
- return 0;
-}
-module_init(vmwdt_init);
-
-static void __exit vmwdt_exit(void)
-{
- unregister_pm_notifier(&vmwdt_power_notifier);
- misc_deregister(&vmwdt_dev);
-}
-module_exit(vmwdt_exit);
diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index e89fc31..93119a4 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -1185,9 +1185,10 @@ config WATCHDOG_RTAS
 
 # S390 Architecture
 
-config ZVM_WATCHDOG
- tristate "z/VM Watchdog Timer"
+config DIAG288_WATCHDOG
+ tristate "System z diag288 Watchdog"
  depends on S390
+ select WATCHDOG_CORE
  help
    IBM s/390 and zSeries machines running under z/VM 5.1 or later
    provide a virtual watchdog timer to their guest that cause a
diff --git a/drivers/watchdog/Makefile b/drivers/watchdog/Makefile
index a300b94..95e01d9 100644
--- a/drivers/watchdog/Makefile
+++ b/drivers/watchdog/Makefile
@@ -148,6 +148,7 @@ obj-$(CONFIG_BOOKE_WDT) += booke_wdt.o
 obj-$(CONFIG_WATCHDOG_RTAS) += wdrtas.o
 
 # S390 Architecture
+obj-$(CONFIG_DIAG288_WATCHDOG) += diag288_wdt.o
 
 # SUPERH (sh + sh64) Architecture
 obj-$(CONFIG_SH_WDT) += shwdt.o
diff --git a/drivers/watchdog/diag288_wdt.c b/drivers/watchdog/diag288_wdt.c
new file mode 100644
index 0000000..d406711
--- /dev/null
+++ b/drivers/watchdog/diag288_wdt.c
@@ -0,0 +1,287 @@
+/*
+ * Watchdog driver for z/VM using the diag 288 interface.
+ *
+ * Under z/VM, expiration of the watchdog will send a "system restart" command
+ * to CP.
+ *
+ * The command can be altered using the module parameter "cmd".
+ *
+ * Copyright IBM Corp. 2004, 2013
+ * Author(s): Arnd Bergmann (arndb@de.ibm.com)
+ *       Philipp Hachtmann (phacht@de.ibm.com)
+ *
+ */
+
+#define KMSG_COMPONENT "diag288_wdt"
+#define pr_fmt(fmt) KMSG_COMPONENT ": " fmt
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/slab.h>
+#include <linux/miscdevice.h>
+#include <linux/watchdog.h>
+#include <linux/suspend.h>
+#include <asm/ebcdic.h>
+#include <linux/io.h>
+#include <linux/uaccess.h>
+
+#define MAX_CMDLEN 240
+#define DEFAULT_CMD "SYSTEM RESTART"
+
+#define MIN_INTERVAL 15     /* Minimal time supported by diag88 */
+#define MAX_INTERVAL 3600   /* One hour should be enough - pure estimation */
+
+#define WDT_DEFAULT_TIMEOUT 30
+
+/* Function codes - init, change, cancel */
+#define WDT_FUNC_INIT 0
+#define WDT_FUNC_CHANGE 1
+#define WDT_FUNC_CANCEL 2
+#define WDT_FUNC_CONCEAL 0x80000000
+
+static char wdt_cmd[MAX_CMDLEN] = DEFAULT_CMD;
+static bool conceal_on;
+static bool nowayout_info = WATCHDOG_NOWAYOUT;
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Arnd Bergmann <arndb@de.ibm.com>");
+MODULE_AUTHOR("Philipp Hachtmann <phacht@de.ibm.com>");
+
+MODULE_DESCRIPTION("System z diag288  Watchdog Timer");
+
+module_param_string(cmd, wdt_cmd, MAX_CMDLEN, 0644);
+MODULE_PARM_DESC(cmd, "CP command that is run when the watchdog triggers (z/VM only)");
+
+module_param_named(conceal, conceal_on, bool, 0644);
+MODULE_PARM_DESC(conceal, "Enable the CONCEAL CP option while the watchdog is active (z/VM only)");
+
+module_param_named(nowayout, nowayout_info, bool, 0444);
+MODULE_PARM_DESC(nowayout, "Watchdog cannot be stopped once started (default = CONFIG_WATCHDOG_NOWAYOUT)");
+
+MODULE_ALIAS_MISCDEV(WATCHDOG_MINOR);
+MODULE_ALIAS("vmwatchdog");
+
+static int __diag288(unsigned int func, unsigned int timeout,
+       unsigned long action, unsigned int len)
+{
+ register unsigned long __func asm("2") = func;
+ register unsigned long __timeout asm("3") = timeout;
+ register unsigned long __action asm("4") = action;
+ register unsigned long __len asm("5") = len;
+ int err;
+
+ err = -EINVAL;
+ asm volatile(
+  " diag %1, %3, 0x288\n"
+  "0: la %0, 0\n"
+  "1:\n"
+  EX_TABLE(0b, 1b)
+  : "+d" (err) : "d"(__func), "d"(__timeout),
+    "d"(__action), "d"(__len) : "1", "cc");
+ return err;
+}
+
+static int __diag288_vm(unsigned int  func, unsigned int timeout,
+   char *cmd, size_t len)
+{
+ return __diag288(func, timeout, virt_to_phys(cmd), len);
+}
+
+static int wdt_start(struct watchdog_device *dev)
+{
+ char *ebc_cmd;
+ size_t len;
+ int ret;
+ unsigned int func;
+
+ ret = -ENODEV;
+
+ if (MACHINE_IS_VM) {
+  ebc_cmd = kmalloc(MAX_CMDLEN, GFP_KERNEL);
+  if (!ebc_cmd)
+   return -ENOMEM;
+  len = strlcpy(ebc_cmd, wdt_cmd, MAX_CMDLEN);
+  ASCEBC(ebc_cmd, MAX_CMDLEN);
+  EBC_TOUPPER(ebc_cmd, MAX_CMDLEN);
+
+  func = conceal_on ? (WDT_FUNC_INIT | WDT_FUNC_CONCEAL)
+   : WDT_FUNC_INIT;
+  ret = __diag288_vm(func, dev->timeout, ebc_cmd, len);
+  WARN_ON(ret != 0);
+  kfree(ebc_cmd);
+ }
+
+ if (ret) {
+  pr_err("The watchdog cannot be activated\n");
+  return ret;
+ }
+ pr_info("The watchdog was activated\n");
+ return 0;
+}
+
+static int wdt_stop(struct watchdog_device *dev)
+{
+ int ret;
+
+ ret = __diag288(WDT_FUNC_CANCEL, 0, 0, 0);
+ pr_info("The watchdog was deactivated\n");
+ return ret;
+}
+
+static int wdt_ping(struct watchdog_device *dev)
+{
+ char *ebc_cmd;
+ size_t len;
+ int ret;
+ unsigned int func;
+
+ ret = -ENODEV;
+
+ if (MACHINE_IS_VM) {
+  ebc_cmd = kmalloc(MAX_CMDLEN, GFP_KERNEL);
+  if (!ebc_cmd)
+   return -ENOMEM;
+  len = strlcpy(ebc_cmd, wdt_cmd, MAX_CMDLEN);
+  ASCEBC(ebc_cmd, MAX_CMDLEN);
+  EBC_TOUPPER(ebc_cmd, MAX_CMDLEN);
+
+  /*
+   * It seems to be ok to z/VM to use the init function to
+   * retrigger the watchdog.
+   */
+  func = conceal_on ? (WDT_FUNC_INIT | WDT_FUNC_CONCEAL)
+   : WDT_FUNC_INIT;
+
+  ret = __diag288_vm(func, dev->timeout, ebc_cmd, len);
+  WARN_ON(ret != 0);
+  kfree(ebc_cmd);
+ }
+
+ if (ret)
+  pr_err("The watchdog timer cannot be started or reset\n");
+ return ret;
+}
+
+static int wdt_set_timeout(struct watchdog_device * dev, unsigned int new_to)
+{
+ dev->timeout = new_to;
+ return wdt_ping(dev);
+}
+
+static struct watchdog_ops wdt_ops = {
+ .owner = THIS_MODULE,
+ .start = wdt_start,
+ .stop = wdt_stop,
+ .ping = wdt_ping,
+ .set_timeout = wdt_set_timeout,
+};
+
+static struct watchdog_info wdt_info = {
+ .options = WDIOF_SETTIMEOUT | WDIOF_MAGICCLOSE,
+ .firmware_version = 0,
+ .identity = "z Watchdog",
+};
+
+static struct watchdog_device wdt_dev = {
+ .parent = NULL,
+ .info = &wdt_info,
+ .ops = &wdt_ops,
+ .bootstatus = 0,
+ .timeout = WDT_DEFAULT_TIMEOUT,
+ .min_timeout = MIN_INTERVAL,
+ .max_timeout = MAX_INTERVAL,
+};
+
+/*
+ * It makes no sense to go into suspend while the watchdog is running.
+ * Depending on the memory size, the watchdog might trigger, while we
+ * are still saving the memory.
+ * We reuse the open flag to ensure that suspend and watchdog open are
+ * exclusive operations
+ */
+static int wdt_suspend(void)
+{
+ if (test_and_set_bit(WDOG_DEV_OPEN, &wdt_dev.status)) {
+  pr_err("Linux cannot be suspended while the watchdog is in use\n");
+  return notifier_from_errno(-EBUSY);
+ }
+ if (test_bit(WDOG_ACTIVE, &wdt_dev.status)) {
+  clear_bit(WDOG_DEV_OPEN, &wdt_dev.status);
+  pr_err("Linux cannot be suspended while the watchdog is in use\n");
+  return notifier_from_errno(-EBUSY);
+ }
+ return NOTIFY_DONE;
+}
+
+static int wdt_resume(void)
+{
+ clear_bit(WDOG_DEV_OPEN, &wdt_dev.status);
+ return NOTIFY_DONE;
+}
+
+static int wdt_power_event(struct notifier_block *this, unsigned long event,
+      void *ptr)
+{
+ switch (event) {
+ case PM_POST_HIBERNATION:
+ case PM_POST_SUSPEND:
+  return wdt_resume();
+ case PM_HIBERNATION_PREPARE:
+ case PM_SUSPEND_PREPARE:
+  return wdt_suspend();
+ default:
+  return NOTIFY_DONE;
+ }
+}
+
+static struct notifier_block wdt_power_notifier = {
+ .notifier_call = wdt_power_event,
+};
+
+static int __init diag288_init(void)
+{
+ int ret;
+ char ebc_begin[] = {
+  194, 197, 199, 201, 213
+ };
+
+ watchdog_set_nowayout(&wdt_dev, nowayout_info);
+
+ if (MACHINE_IS_VM) {
+  pr_info("The watchdog device driver detected a z/VM environment\n");
+  if (__diag288_vm(WDT_FUNC_INIT, 15,
+     ebc_begin, sizeof(ebc_begin)) != 0) {
+   pr_err("The watchdog cannot be initialized\n");
+   return -EINVAL;
+  }
+ } else {
+  pr_err("Linux runs in an environment that does not support the diag288 watchdog\n");
+  return -ENODEV;
+ }
+
+ if (__diag288_vm(WDT_FUNC_CANCEL, 0, NULL, 0)) {
+  pr_err("The watchdog cannot be deactivated\n");
+  return -EINVAL;
+ }
+
+ ret = register_pm_notifier(&wdt_power_notifier);
+ if (ret)
+  return ret;
+
+ ret = watchdog_register_device(&wdt_dev);
+ if (ret)
+  unregister_pm_notifier(&wdt_power_notifier);
+
+ return ret;
+}
+
+static void __exit diag288_exit(void)
+{
+ watchdog_unregister_device(&wdt_dev);
+ unregister_pm_notifier(&wdt_power_notifier);
+}
+
+module_init(diag288_init);
+module_exit(diag288_exit);
-- 
1.7.1