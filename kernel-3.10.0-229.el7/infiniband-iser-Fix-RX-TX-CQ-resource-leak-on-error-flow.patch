From c5e7ebe7aad3858242a5d0412241df66e29a23b4 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Mon, 3 Nov 2014 07:52:32 -0500
Subject: [infiniband] iser: Fix RX/TX CQ resource leak on error flow

Message-id: <5906aa5af3fac753877f7e44b3dae7ca6f1c045e.1415000301.git.avadai@redhat.com>
Patchwork-id: 98703
O-Subject: [Patch RHEL7.1 34/37] IB/iser: Fix RX/TX CQ resource leak on error flow
Bugzilla: 1107622
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Doug Ledford <dledford@redhat.com>

From: Roi Dayan <roid@mellanox.com>

When failing to allocate TX CQ we already allocated RX CQ, so we need to make
sure we release it. Also, when failing to register notification to the RX CQ
we currently leak both RX and TX CQs of the current index, fix that too.

Signed-off-by: Roi Dayan <roid@mellanox.com>
Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit c33b15f00bbfb9324dc38e5176f576a0f46e0873)
Signed-off-by: Amir Vadai <amirv@mellanox.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/iser/iser_verbs.c b/drivers/infiniband/ulp/iser/iser_verbs.c
index 3ef167f..3bfec4b 100644
--- a/drivers/infiniband/ulp/iser/iser_verbs.c
+++ b/drivers/infiniband/ulp/iser/iser_verbs.c
@@ -73,7 +73,7 @@ static int iser_create_device_ib_res(struct iser_device *device)
 {
  struct iser_cq_desc *cq_desc;
  struct ib_device_attr *dev_attr = &device->dev_attr;
- int ret, i, j;
+ int ret, i;
 
  ret = ib_query_device(device->ib_device, dev_attr);
  if (ret) {
@@ -125,16 +125,20 @@ static int iser_create_device_ib_res(struct iser_device *device)
        iser_cq_event_callback,
        (void *)&cq_desc[i],
        ISER_MAX_RX_CQ_LEN, i);
-  if (IS_ERR(device->rx_cq[i]))
+  if (IS_ERR(device->rx_cq[i])) {
+   device->rx_cq[i] = NULL;
    goto cq_err;
+  }
 
   device->tx_cq[i] = ib_create_cq(device->ib_device,
        NULL, iser_cq_event_callback,
        (void *)&cq_desc[i],
        ISER_MAX_TX_CQ_LEN, i);
 
-  if (IS_ERR(device->tx_cq[i]))
+  if (IS_ERR(device->tx_cq[i])) {
+   device->tx_cq[i] = NULL;
    goto cq_err;
+  }
 
   if (ib_req_notify_cq(device->rx_cq[i], IB_CQ_NEXT_COMP))
    goto cq_err;
@@ -160,14 +164,14 @@ static int iser_create_device_ib_res(struct iser_device *device)
 handler_err:
  ib_dereg_mr(device->mr);
 dma_mr_err:
- for (j = 0; j < device->cqs_used; j++)
-  tasklet_kill(&device->cq_tasklet[j]);
+ for (i = 0; i < device->cqs_used; i++)
+  tasklet_kill(&device->cq_tasklet[i]);
 cq_err:
- for (j = 0; j < i; j++) {
-  if (device->tx_cq[j])
-   ib_destroy_cq(device->tx_cq[j]);
-  if (device->rx_cq[j])
-   ib_destroy_cq(device->rx_cq[j]);
+ for (i = 0; i < device->cqs_used; i++) {
+  if (device->tx_cq[i])
+   ib_destroy_cq(device->tx_cq[i]);
+  if (device->rx_cq[i])
+   ib_destroy_cq(device->rx_cq[i]);
  }
  ib_dealloc_pd(device->pd);
 pd_err:
-- 
1.7.1