From 2d1a734afb0002803d42ba44a23ffdb7ae6314dc Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 2 Dec 2014 21:03:32 -0500
Subject: [kernel] Use new KABI macros

Message-id: <1417554215-238434-8-git-send-email-dzickus@redhat.com>
Patchwork-id: 101094
O-Subject: [RHEL7 PATCH 07/10] kabi, include/linux: Use new KABI macros
Bugzilla: 1164383
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1164383
Upstream: RHEL only

Convert some of the include/linux GENKSYMS usage to use the new kabi macros.

Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Don Zickus <dzickus@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/device.h b/include/linux/device.h
index 2b10542..b36aad3 100644
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@ -28,6 +28,8 @@
 #include <linux/uidgid.h>
 #include <asm/device.h>
 
+#include <linux/rh_kabi.h>
+
 struct device;
 struct device_private;
 struct device_driver;
@@ -638,11 +640,9 @@ struct acpi_device;
 
 struct acpi_dev_node {
 #ifdef CONFIG_ACPI
- #ifndef __GENKSYMS__
- struct acpi_device *companion;
- #else
- void *handle;
- #endif
+ RH_KABI_REPLACE_P(void *handle,
+            struct acpi_device *companion)
+
 #endif
 };
 
diff --git a/include/linux/ethtool.h b/include/linux/ethtool.h
index 6dbccba..6e85969 100644
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@ -14,6 +14,7 @@
 
 #include <linux/compat.h>
 #include <uapi/linux/ethtool.h>
+#include <linux/rh_kabi.h>
 
 #ifdef CONFIG_COMPAT
 
@@ -264,28 +265,21 @@ struct ethtool_ops {
   * to replace reserved slots with required structure field
   * additions of your backport.
   */
-#ifdef __GENKSYMS__
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
-#else
- u32 (*get_rxfh_key_size)(struct net_device *);
- int (*get_rxfh)(struct net_device *, u32 *indir, u8 *key);
- int (*set_rxfh)(struct net_device *, const u32 *indir,
-       const u8 *key);
-#endif
- void   (*rh_reserved4)(void);
- void   (*rh_reserved5)(void);
- void   (*rh_reserved6)(void);
- void   (*rh_reserved7)(void);
- void   (*rh_reserved8)(void);
- void   (*rh_reserved9)(void);
- void   (*rh_reserved10)(void);
- void   (*rh_reserved11)(void);
- void   (*rh_reserved12)(void);
- void   (*rh_reserved13)(void);
- void   (*rh_reserved14)(void);
- void   (*rh_reserved15)(void);
- void   (*rh_reserved16)(void);
+ RH_KABI_USE_P(1, u32 (*get_rxfh_key_size)(struct net_device *))
+ RH_KABI_USE_P(2, int (*get_rxfh)(struct net_device *, u32 *indir, u8 *key))
+ RH_KABI_USE_P(3, int (*set_rxfh)(struct net_device *, const u32 *indir, const u8 *key))
+ RH_KABI_RESERVE_P(4)
+ RH_KABI_RESERVE_P(5)
+ RH_KABI_RESERVE_P(6)
+ RH_KABI_RESERVE_P(7)
+ RH_KABI_RESERVE_P(8)
+ RH_KABI_RESERVE_P(9)
+ RH_KABI_RESERVE_P(10)
+ RH_KABI_RESERVE_P(11)
+ RH_KABI_RESERVE_P(12)
+ RH_KABI_RESERVE_P(13)
+ RH_KABI_RESERVE_P(14)
+ RH_KABI_RESERVE_P(15)
+ RH_KABI_RESERVE_P(16)
 };
 #endif /* _LINUX_ETHTOOL_H */
diff --git a/include/linux/lockref.h b/include/linux/lockref.h
index 7a904f8..191c2a6 100644
--- a/include/linux/lockref.h
+++ b/include/linux/lockref.h
@@ -1,6 +1,8 @@
 #ifndef __LINUX_LOCKREF_H
 #define __LINUX_LOCKREF_H
 
+#include <linux/rh_kabi.h>
+
 /*
  * Locked reference counts.
  *
@@ -19,11 +21,9 @@
 struct lockref {
  union {
 #ifdef CONFIG_PPC64
-#ifndef __GENKSYMS__
 #ifdef CONFIG_CMPXCHG_LOCKREF
-  aligned_u64 lock_count;
+  RH_KABI_EXTEND(aligned_u64 lock_count)
 #endif
-#endif /* __GENKSYMS__ */
 #else /* CONFIG_PPC64 */
 #ifdef CONFIG_CMPXCHG_LOCKREF
   aligned_u64 lock_count;
diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index cf9589b..f068a7c 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -16,6 +16,8 @@
 #include <asm/page.h>
 #include <asm/mmu.h>
 
+#include <linux/rh_kabi.h>
+
 #ifndef AT_VECTOR_SIZE_ARCH
 #define AT_VECTOR_SIZE_ARCH 0
 #endif
@@ -300,10 +302,10 @@ struct vm_area_struct {
 #endif
 
  /* reserved for Red Hat */
- unsigned long rh_reserved1;
- unsigned long rh_reserved2;
- unsigned long rh_reserved3;
- unsigned long rh_reserved4;
+ RH_KABI_RESERVE(1)
+ RH_KABI_RESERVE(2)
+ RH_KABI_RESERVE(3)
+ RH_KABI_RESERVE(4)
 };
 
 struct core_thread {
@@ -454,14 +456,14 @@ struct mm_struct {
  struct uprobes_state uprobes_state;
 
  /* reserved for Red Hat */
- unsigned long rh_reserved1;
- unsigned long rh_reserved2;
- unsigned long rh_reserved3;
- unsigned long rh_reserved4;
- unsigned long rh_reserved5;
- unsigned long rh_reserved6;
- unsigned long rh_reserved7;
- unsigned long rh_reserved8;
+ RH_KABI_RESERVE(1)
+ RH_KABI_RESERVE(2)
+ RH_KABI_RESERVE(3)
+ RH_KABI_RESERVE(4)
+ RH_KABI_RESERVE(5)
+ RH_KABI_RESERVE(6)
+ RH_KABI_RESERVE(7)
+ RH_KABI_RESERVE(8)
 };
 
 static inline void mm_init_cpumask(struct mm_struct *mm)
diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index e663dc6..cd832a1 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -19,6 +19,8 @@
 #include <linux/atomic.h>
 #include <asm/page.h>
 
+#include <linux/rh_kabi.h>
+
 /* Free memory management - zoned buddy allocator.  */
 #ifndef CONFIG_FORCE_MAX_ZONEORDER
 #define MAX_ORDER 11
@@ -502,14 +504,14 @@ struct zone {
  const char  *name;
 
  /* reserved for Red Hat */
- unsigned long rh_reserved1;
- unsigned long rh_reserved2;
- unsigned long rh_reserved3;
- unsigned long rh_reserved4;
- unsigned long rh_reserved5;
- unsigned long rh_reserved6;
- unsigned long rh_reserved7;
- unsigned long rh_reserved8;
+ RH_KABI_RESERVE(1)
+ RH_KABI_RESERVE(2)
+ RH_KABI_RESERVE(3)
+ RH_KABI_RESERVE(4)
+ RH_KABI_RESERVE(5)
+ RH_KABI_RESERVE(6)
+ RH_KABI_RESERVE(7)
+ RH_KABI_RESERVE(8)
 
 } ____cacheline_internodealigned_in_smp;
 
@@ -784,10 +786,10 @@ typedef struct pglist_data {
 #endif
 
  /* reserved for Red Hat */
- unsigned long rh_reserved1;
- unsigned long rh_reserved2;
- unsigned long rh_reserved3;
- unsigned long rh_reserved4;
+ RH_KABI_RESERVE(1)
+ RH_KABI_RESERVE(2)
+ RH_KABI_RESERVE(3)
+ RH_KABI_RESERVE(4)
 
 } pg_data_t;
 
diff --git a/include/linux/mutex.h b/include/linux/mutex.h
index f74de3b..26d7feb 100644
--- a/include/linux/mutex.h
+++ b/include/linux/mutex.h
@@ -18,6 +18,7 @@
 #include <linux/atomic.h>
 #include <asm/processor.h>
 
+#include <linux/rh_kabi.h>
 /*
  * Simple, straightforward mutexes with strict semantics:
  *
@@ -56,11 +57,8 @@ struct mutex {
  struct task_struct *owner;
 #endif
 #ifdef CONFIG_MUTEX_SPIN_ON_OWNER
-#ifdef __GENKSYMS__
- void   *spin_mlock; /* Spinner MCS lock */
-#else
- struct optimistic_spin_queue *osq; /* Spinner MCS lock */
-#endif
+ RH_KABI_REPLACE_P(void   *spin_mlock, /* Spinner MCS lock */
+            struct optimistic_spin_queue *osq) /* Spinner MCS lock */
 #endif
 #ifdef CONFIG_DEBUG_MUTEXES
  const char   *name;
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 9301365..975ee94 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -51,6 +51,8 @@
 #include <linux/neighbour.h>
 #include <uapi/linux/netdevice.h>
 
+#include <linux/rh_kabi.h>
+
 struct netpoll_info;
 struct device;
 struct phy_device;
@@ -1105,22 +1107,22 @@ struct net_device_ops {
   * to replace reserved slots with required structure field
   * additions of your backport.
   */
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
- void   (*rh_reserved4)(void);
- void   (*rh_reserved5)(void);
- void   (*rh_reserved6)(void);
- void   (*rh_reserved7)(void);
- void   (*rh_reserved8)(void);
- void   (*rh_reserved9)(void);
- void   (*rh_reserved10)(void);
- void   (*rh_reserved11)(void);
- void   (*rh_reserved12)(void);
- void   (*rh_reserved13)(void);
- void   (*rh_reserved14)(void);
- void   (*rh_reserved15)(void);
- void   (*rh_reserved16)(void);
+ RH_KABI_RESERVE_P(1)
+ RH_KABI_RESERVE_P(2)
+ RH_KABI_RESERVE_P(3)
+ RH_KABI_RESERVE_P(4)
+ RH_KABI_RESERVE_P(5)
+ RH_KABI_RESERVE_P(6)
+ RH_KABI_RESERVE_P(7)
+ RH_KABI_RESERVE_P(8)
+ RH_KABI_RESERVE_P(9)
+ RH_KABI_RESERVE_P(10)
+ RH_KABI_RESERVE_P(11)
+ RH_KABI_RESERVE_P(12)
+ RH_KABI_RESERVE_P(13)
+ RH_KABI_RESERVE_P(14)
+ RH_KABI_RESERVE_P(15)
+ RH_KABI_RESERVE_P(16)
 };
 
 /*
@@ -1239,12 +1241,11 @@ struct net_device {
  unsigned char  addr_len; /* hardware address length */
  unsigned short  neigh_priv_len;
  unsigned short          dev_id;  /* for shared network cards */
-#ifndef __GENKSYMS__
- unsigned short          dev_port; /* Used to differentiate
+
+ RH_KABI_FILL_HOLE(unsigned short dev_port) /* Used to differentiate
        * devices that share the same
        * function
        */
-#endif
  spinlock_t  addr_list_lock;
  struct netdev_hw_addr_list uc; /* Unicast mac addresses */
  struct netdev_hw_addr_list mc; /* Multicast mac addresses */
@@ -1446,22 +1447,22 @@ struct net_device {
   * to replace reserved slots with required structure field
   * additions of your backport.
   */
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
- void   (*rh_reserved4)(void);
- void   (*rh_reserved5)(void);
- void   (*rh_reserved6)(void);
- void   (*rh_reserved7)(void);
- void   (*rh_reserved8)(void);
- void   (*rh_reserved9)(void);
- void   (*rh_reserved10)(void);
- void   (*rh_reserved11)(void);
- void   (*rh_reserved12)(void);
- void   (*rh_reserved13)(void);
- void   (*rh_reserved14)(void);
- void   (*rh_reserved15)(void);
- void   (*rh_reserved16)(void);
+ RH_KABI_RESERVE_P(1)
+ RH_KABI_RESERVE_P(2)
+ RH_KABI_RESERVE_P(3)
+ RH_KABI_RESERVE_P(4)
+ RH_KABI_RESERVE_P(5)
+ RH_KABI_RESERVE_P(6)
+ RH_KABI_RESERVE_P(7)
+ RH_KABI_RESERVE_P(8)
+ RH_KABI_RESERVE_P(9)
+ RH_KABI_RESERVE_P(10)
+ RH_KABI_RESERVE_P(11)
+ RH_KABI_RESERVE_P(12)
+ RH_KABI_RESERVE_P(13)
+ RH_KABI_RESERVE_P(14)
+ RH_KABI_RESERVE_P(15)
+ RH_KABI_RESERVE_P(16)
 };
 #define to_net_dev(d) container_of(d, struct net_device, dev)
 
diff --git a/include/linux/of.h b/include/linux/of.h
index 996d6fe..768a2bb 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -27,6 +27,8 @@
 #include <asm/byteorder.h>
 #include <asm/errno.h>
 
+#include <linux/rh_kabi.h>
+
 typedef u32 phandle;
 typedef u32 ihandle;
 
@@ -37,9 +39,7 @@ struct property {
  struct property *next;
  unsigned long _flags;
  unsigned int unique_id;
-#ifndef __GENKSYMS__
- struct bin_attribute attr;
-#endif
+ RH_KABI_EXTEND(struct bin_attribute attr)
 };
 
 #if defined(CONFIG_SPARC)
@@ -68,9 +68,7 @@ struct device_node {
  unsigned int unique_id;
  struct of_irq_controller *irq_trans;
 #endif
-#ifndef __GENKSYMS__
- struct kobject kobj;
-#endif
+ RH_KABI_EXTEND(struct kobject kobj)
 };
 
 #define MAX_PHANDLE_ARGS 8
diff --git a/include/linux/pci.h b/include/linux/pci.h
index 494bcc6..7fa0ebe 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -33,6 +33,8 @@
 
 #include <linux/pci_ids.h>
 
+#include <linux/rh_kabi.h>
+
 /*
  * The PCI interface treats multi-function devices as independent
  * devices.  The slot/function address of each device is encoded
@@ -382,9 +384,7 @@ struct pci_dev {
  * going forward.  This structure will never be under KABI restrictions.
  */
 struct pci_dev_rh {
-#ifndef __GENKSYMS__
- u8  dma_alias_devfn;/* devfn of DMA alias, if any */
-#endif
+ RH_KABI_EXTEND(u8  dma_alias_devfn) /* devfn of DMA alias, if any */
 };
 
 static inline struct pci_dev *pci_physfn(struct pci_dev *dev)
diff --git a/include/linux/perf_event.h b/include/linux/perf_event.h
index 3bf1c33..6e84d97 100644
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@ -54,6 +54,8 @@ struct perf_guest_info_callbacks {
 #include <linux/perf_regs.h>
 #include <asm/local.h>
 
+#include <linux/rh_kabi.h>
+
 struct perf_callchain_entry {
  __u64    nr;
  __u64    ip[PERF_MAX_STACK_DEPTH];
@@ -277,14 +279,12 @@ struct pmu {
   */
  void (*flush_branch_stack) (void);
 
-#ifndef __GENKSYMS__
- struct module   *module;
+ RH_KABI_EXTEND(struct module *module)
 
  /*
   * various common per-pmu feature flags
   */
- int    capabilities;
-#endif
+ RH_KABI_EXTEND(int capabilities)
 };
 
 /**
@@ -461,15 +461,13 @@ struct perf_event {
  int    cgrp_defer_enabled;
 #endif
 
-#ifndef __GENKSYMS__
  /*
   * We need storage to track the entries in perf_pmu_migrate_context; we
   * cannot use the event_entry because of RCU and we want to keep the
   * group in tact which avoids us using the other two entries.
   */
- struct list_head  migrate_entry;
- struct list_head  active_entry;
-#endif
+ RH_KABI_EXTEND(struct list_head  migrate_entry)
+ RH_KABI_EXTEND(struct list_head  active_entry)
 #endif /* CONFIG_PERF_EVENTS */
 };
 
@@ -619,12 +617,10 @@ struct perf_sample_data {
  u64    stack_user_size;
  u64    weight;
 
-#ifndef __GENKSYMS__
  /*
   * Transaction flags for abort events:
   */
- u64    txn;
-#endif
+ RH_KABI_EXTEND(u64    txn)
 };
 
 static inline void perf_sample_data_init(struct perf_sample_data *data,
diff --git a/include/linux/quota.h b/include/linux/quota.h
index 8b263d1..99932a5 100644
--- a/include/linux/quota.h
+++ b/include/linux/quota.h
@@ -48,6 +48,8 @@
 #include <linux/projid.h>
 #include <uapi/linux/quota.h>
 
+#include <linux/rh_kabi.h>
+
 #undef USRQUOTA
 #undef GRPQUOTA
 enum quota_type {
@@ -329,9 +331,7 @@ struct quotactl_ops {
  int (*get_xstate)(struct super_block *, struct fs_quota_stat *);
  int (*set_xstate)(struct super_block *, unsigned int, int);
  int (*get_xstatev)(struct super_block *, struct fs_quota_statv *);
-#ifndef __GENKSYMS__
- int (*rm_xquota)(struct super_block *, unsigned int);
-#endif
+ RH_KABI_EXTEND(int (*rm_xquota)(struct super_block *, unsigned int))
 };
 
 struct quota_format_type {
diff --git a/include/linux/sched.h b/include/linux/sched.h
index aec7476..c322878 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -2,7 +2,7 @@
 #define _LINUX_SCHED_H
 
 #include <uapi/linux/sched.h>
-
+#include <linux/rh_kabi.h>
 
 struct sched_param {
  int sched_priority;
@@ -632,14 +632,10 @@ struct signal_struct {
       * (notably. ptrace) */
 
  /* reserved for Red Hat */
-#ifdef __GENKSYMS__
- unsigned long rh_reserved1;
-#else
- seqlock_t stats_lock;
-#endif
- unsigned long rh_reserved2;
- unsigned long rh_reserved3;
- unsigned long rh_reserved4;
+ RH_KABI_USE(1, seqlock_t stats_lock)
+ RH_KABI_RESERVE(2)
+ RH_KABI_RESERVE(3)
+ RH_KABI_RESERVE(4)
 };
 
 /*
@@ -1087,10 +1083,10 @@ struct sched_entity {
 #endif
 
  /* reserved for Red Hat */
- unsigned long rh_reserved1;
- unsigned long rh_reserved2;
- unsigned long rh_reserved3;
- unsigned long rh_reserved4;
+ RH_KABI_RESERVE(1)
+ RH_KABI_RESERVE(2)
+ RH_KABI_RESERVE(3)
+ RH_KABI_RESERVE(4)
 };
 
 struct sched_rt_entity {
@@ -1547,22 +1543,18 @@ struct task_struct {
 #endif
 
  /* reserved for Red Hat */
-#ifndef __GENKSYMS__
 #ifdef CONFIG_DETECT_HUNG_TASK
-/* hung task detection */
- unsigned long last_switch_count;
-#endif
- unsigned long atomic_flags;
+ RH_KABI_USE(1, unsigned long last_switch_count)
 #else
- unsigned long rh_reserved1;
- unsigned long rh_reserved2;
-#endif
- unsigned long rh_reserved3;
- unsigned long rh_reserved4;
- unsigned long rh_reserved5;
- unsigned long rh_reserved6;
- unsigned long rh_reserved7;
- unsigned long rh_reserved8;
+ RH_KABI_RESERVE(1)
+#endif
+ RH_KABI_USE(2, unsigned long atomic_flags)
+ RH_KABI_RESERVE(3)
+ RH_KABI_RESERVE(4)
+ RH_KABI_RESERVE(5)
+ RH_KABI_RESERVE(6)
+ RH_KABI_RESERVE(7)
+ RH_KABI_RESERVE(8)
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index eaeb9c5..67f1318 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -34,6 +34,8 @@
 #include <linux/netdev_features.h>
 #include <net/flow_keys.h>
 
+#include <linux/rh_kabi.h>
+
 /* A. Checksumming of received packets by device.
  *
  * CHECKSUM_NONE:
@@ -537,11 +539,9 @@ struct sk_buff {
  __u8   head_frag:1;
  /* Indicates the inner headers are valid in the skbuff. */
  __u8   encapsulation:1;
-#ifndef __GENKSYMS__
- __u8   encap_hdr_csum:1;
- __u8   csum_valid:1;
- __u8   csum_complete_sw:1;
-#endif
+ RH_KABI_EXTEND(__u8   encap_hdr_csum:1)
+ RH_KABI_EXTEND(__u8   csum_valid:1)
+ RH_KABI_EXTEND(__u8   csum_complete_sw:1)
  /* 3/5 bit hole (depending on ndisc_nodetype presence) */
  kmemcheck_bitfield_end(flags2);
 
@@ -568,15 +568,13 @@ struct sk_buff {
  __u16   network_header;
  __u16   mac_header;
 
-#ifndef __GENKSYMS__
- kmemcheck_bitfield_begin(flags3);
- kmemcheck_bitfield_begin(flags3);
- __u8   csum_level:2;
- __u8   rh_csum_pad:1;
- __u8   csum_bad:1;
+ RH_KABI_EXTEND(kmemcheck_bitfield_begin(flags3))
+ RH_KABI_EXTEND(__u8 csum_level:2)
+ RH_KABI_EXTEND(__u8 rh_csum_pad:1)
+ RH_KABI_EXTEND(__u8 csum_bad:1)
  /* 12 bit hole */
- kmemcheck_bitfield_end(flags3);
-#endif
+ RH_KABI_EXTEND(kmemcheck_bitfield_end(flags3))
+
  /* RHEL SPECIFIC
   *
   * The following padding has been inserted before ABI freeze to
diff --git a/include/linux/smp.h b/include/linux/smp.h
index 8f23682..0b414a3 100644
--- a/include/linux/smp.h
+++ b/include/linux/smp.h
@@ -14,18 +14,13 @@
 #include <linux/irqflags.h>
 #include <linux/llist.h>
 
+#include <linux/rh_kabi.h>
+
 extern void cpu_idle(void);
 
 typedef void (*smp_call_func_t)(void *info);
 struct call_single_data {
-#ifdef __GENKSYMS__
- struct list_head list;
-#else
- union {
-  struct list_head list;
-  struct llist_node llist;
- };
-#endif
+ RH_KABI_REPLACE(struct list_head list, struct llist_node llist)
  smp_call_func_t func;
  void *info;
  u16 flags;
diff --git a/include/linux/swap.h b/include/linux/swap.h
index 526f04a..b445ed0 100644
--- a/include/linux/swap.h
+++ b/include/linux/swap.h
@@ -13,6 +13,8 @@
 #include <linux/page-flags.h>
 #include <asm/page.h>
 
+#include <linux/rh_kabi.h>
+
 struct notifier_block;
 
 struct bio;
@@ -220,10 +222,8 @@ struct swap_info_struct {
       * swap_lock. If both locks need hold,
       * hold swap_lock first.
       */
-#ifndef __GENKSYMS__
- struct plist_node list;  /* entry in swap_active_head */
- struct plist_node avail_list; /* entry in swap_avail_head */
-#endif
+ RH_KABI_EXTEND(struct plist_node list)  /* entry in swap_active_head */
+ RH_KABI_EXTEND(struct plist_node avail_list) /* entry in swap_avail_head */
 };
 
 /* linux/mm/workingset.c */
diff --git a/include/linux/writeback.h b/include/linux/writeback.h
index da4f6e0..193b615 100644
--- a/include/linux/writeback.h
+++ b/include/linux/writeback.h
@@ -8,6 +8,8 @@
 #include <linux/workqueue.h>
 #include <linux/fs.h>
 
+#include <linux/rh_kabi.h>
+
 DECLARE_PER_CPU(int, dirty_throttle_leaks);
 
 /*
@@ -81,8 +83,8 @@ struct writeback_control {
  unsigned for_sync:1;  /* sync(2) WB_SYNC_ALL writeback */
 
  /* reserved for Red Hat */
- unsigned long rh_reserved1;
- unsigned long rh_reserved2;
+ RH_KABI_RESERVE(1)
+ RH_KABI_RESERVE(2)
 };
 
 /*
-- 
1.7.1