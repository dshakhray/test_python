From 583a9300fc17dd86098254b8ec1f8f5d1df38427 Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Mon, 8 Sep 2014 15:07:46 -0400
Subject: [ethernet] ixgbevf: fix skb->pkt_type checks

Message-id: <1410188883-6595-32-git-send-email-jogreene@redhat.com>
Patchwork-id: 92387
O-Subject: [RHEL7.1 PATCH 31/48] ixgbevf: fix skb->pkt_type checks
Bugzilla: 1091124
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>

BZ: 1091124
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7919168
Tested: In beaker. See BZ for details

skb->pkt_type is not a bitmask, but contains only value at a time from
the range defined in include/uapi/linux/if_packet.h.

Checking it like if it was a bitmask of values would also cause
PACKET_OTHERHOST, PACKET_LOOPBACK and PACKET_FASTROUTE to be matched by
this check since their lower 2 bits are also set, although that does not
fix a real bug, it is still potentially confusing.

This bogus check was introduced in commit 815cccbf ("ixgbe: add setlink,
getlink support to ixgbe and ixgbevf").

Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit bd9d55929df54b67708460d7eda84a7d7924009d)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
index 5460007..85ee750 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
@@ -516,7 +516,8 @@ static int ixgbevf_clean_rx_irq(struct ixgbevf_q_vector *q_vector,
   /* Workaround hardware that can't do proper VEPA multicast
    * source pruning.
    */
-  if ((skb->pkt_type & (PACKET_BROADCAST | PACKET_MULTICAST)) &&
+  if ((skb->pkt_type == PACKET_BROADCAST ||
+      skb->pkt_type == PACKET_MULTICAST) &&
       ether_addr_equal(rx_ring->netdev->dev_addr,
          eth_hdr(skb)->h_source)) {
    dev_kfree_skb_irq(skb);
-- 
1.7.1