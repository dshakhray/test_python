From ddb1d491a23319d11ef1dee4605358fd8975c2bc Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:08:06 -0400
Subject: [usb] Avoid runtime suspend loops for HCDs that can't handle suspend/resume

Message-id: <1410887463-20674-415-git-send-email-dzickus@redhat.com>
Patchwork-id: 95259
O-Subject: [RHEL7 PATCH 414/591] USB: Avoid runtime suspend loops for HCDs that can't handle suspend/resume
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 8ef42ddd9a53b73e6fc3934278710c27f80f324f
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri May 23 10:45:54 2014 -0400

    USB: Avoid runtime suspend loops for HCDs that can't handle suspend/resume

    Not all host controller drivers have bus-suspend and bus-resume
    methods.  When one doesn't, it will cause problems if runtime PM is
    enabled in the kernel.  The PM core will attempt to suspend the
    controller's root hub, the suspend will fail because there is no
    bus-suspend routine, and a -EBUSY error code will be returned to the
    PM core.  This will cause the suspend attempt to be repeated shortly
    thereafter, in a never-ending loop.

    Part of the problem is that the original error code -ENOENT gets
    changed to -EBUSY in usb_runtime_suspend(), on the grounds that the PM
    core will interpret -ENOENT as meaning that the root hub has gotten
    into a runtime-PM error state.  While this change is appropriate for
    real USB devices, it's not such a good idea for a root hub.  In fact,
    considering the root hub to be in a runtime-PM error state would not
    be far from the truth.  Therefore this patch updates
    usb_runtime_suspend() so that it adjusts error codes only for
    non-root-hub devices.

    Furthermore, the patch attempts to prevent the problem from occurring
    in the first place by not enabling runtime PM by default for root hubs
    whose host controller driver doesn't have bus_suspend and bus_resume
    methods.

    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Will Deacon <will.deacon@arm.com>
    Tested-by: Will Deacon <will.deacon@arm.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/core/driver.c b/drivers/usb/core/driver.c
index 37d2910..3f82f1d 100644
--- a/drivers/usb/core/driver.c
+++ b/drivers/usb/core/driver.c
@@ -1791,10 +1791,13 @@ int usb_runtime_suspend(struct device *dev)
  if (status == -EAGAIN || status == -EBUSY)
   usb_mark_last_busy(udev);
 
- /* The PM core reacts badly unless the return code is 0,
-  * -EAGAIN, or -EBUSY, so always return -EBUSY on an error.
+ /*
+  * The PM core reacts badly unless the return code is 0,
+  * -EAGAIN, or -EBUSY, so always return -EBUSY on an error
+  * (except for root hubs, because they don't suspend through
+  * an upstream port like other USB devices).
   */
- if (status != 0)
+ if (status != 0 && udev->parent)
   return -EBUSY;
  return status;
 }
diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 3a15a9d..2a9f9cc 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -1687,8 +1687,19 @@ static int hub_probe(struct usb_interface *intf, const struct usb_device_id *id)
   */
  pm_runtime_set_autosuspend_delay(&hdev->dev, 0);
 
- /* Hubs have proper suspend/resume support. */
- usb_enable_autosuspend(hdev);
+ /*
+  * Hubs have proper suspend/resume support, except for root hubs
+  * where the controller driver doesn't have bus_suspend and
+  * bus_resume methods.
+  */
+ if (hdev->parent) {  /* normal device */
+  usb_enable_autosuspend(hdev);
+ } else {   /* root hub */
+  const struct hc_driver *drv = bus_to_hcd(hdev->bus)->driver;
+
+  if (drv->bus_suspend && drv->bus_resume)
+   usb_enable_autosuspend(hdev);
+ }
 
  if (hdev->level == MAX_TOPO_LEVEL) {
   dev_err(&intf->dev,
-- 
1.7.1