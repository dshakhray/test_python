From 1534209fbbfcfe1c0b8a2631117673fd9fc0f43c Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Wed, 23 Jul 2014 10:49:52 -0400
Subject: [virt] virtio_ring: let virtqueue_{kick()/notify()} return a bool

Message-id: <1406112611-9862-5-git-send-email-brueckner@redhat.com>
Patchwork-id: 86316
O-Subject: [RHEL7.1 PATCH 04/23] [virt] virtio_ring: let virtqueue_{kick()/notify()} return a bool
Bugzilla: 1088554
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 5b1bf7cb673ade0ab5c75f200dce911d9fb91c21
Author: Heinz Graalfs <graalfs@linux.vnet.ibm.com>
Commit: Rusty Russell <rusty@rustcorp.com.au>

    virtio_ring: let virtqueue_{kick()/notify()} return a bool

    virtqueue_{kick()/notify()} should exploit the new host notification API.
    If the notify call returned with a negative value the host kick failed
    (e.g. a kick triggered after a device was hot-unplugged). In this case
    the virtqueue is set to 'broken' and false is returned, otherwise true.

    Signed-off-by: Heinz Graalfs <graalfs@linux.vnet.ibm.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

Bugzilla
--------
BZ 1088554
https://bugzilla.redhat.com/show_bug.cgi?id=1088554

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version v3.13-rc1
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=5b1bf7cb673ade0ab5c75f200dce911d9fb91c21

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7725759

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/virtio/virtio_ring.c b/drivers/virtio/virtio_ring.c
index 753b2ab..209e215 100644
--- a/drivers/virtio/virtio_ring.c
+++ b/drivers/virtio/virtio_ring.c
@@ -462,13 +462,22 @@ EXPORT_SYMBOL_GPL(virtqueue_kick_prepare);
  * @vq: the struct virtqueue
  *
  * This does not need to be serialized.
+ *
+ * Returns false if host notify failed or queue is broken, otherwise true.
  */
-void virtqueue_notify(struct virtqueue *_vq)
+bool virtqueue_notify(struct virtqueue *_vq)
 {
  struct vring_virtqueue *vq = to_vvq(_vq);
 
+ if (unlikely(vq->broken))
+  return false;
+
  /* Prod other side to tell it about changes. */
- vq->notify(_vq);
+ if (vq->notify(_vq) < 0) {
+  vq->broken = true;
+  return false;
+ }
+ return true;
 }
 EXPORT_SYMBOL_GPL(virtqueue_notify);
 
@@ -481,11 +490,14 @@ EXPORT_SYMBOL_GPL(virtqueue_notify);
  *
  * Caller must ensure we don't call this with other virtqueue
  * operations at the same time (except where noted).
+ *
+ * Returns false if kick failed, otherwise true.
  */
-void virtqueue_kick(struct virtqueue *vq)
+bool virtqueue_kick(struct virtqueue *vq)
 {
  if (virtqueue_kick_prepare(vq))
-  virtqueue_notify(vq);
+  return virtqueue_notify(vq);
+ return true;
 }
 EXPORT_SYMBOL_GPL(virtqueue_kick);
 
diff --git a/include/linux/virtio.h b/include/linux/virtio.h
index 72398ee..9cbef44 100644
--- a/include/linux/virtio.h
+++ b/include/linux/virtio.h
@@ -58,11 +58,11 @@ int virtqueue_add_sgs(struct virtqueue *vq,
         void *data,
         gfp_t gfp);
 
-void virtqueue_kick(struct virtqueue *vq);
+bool virtqueue_kick(struct virtqueue *vq);
 
 bool virtqueue_kick_prepare(struct virtqueue *vq);
 
-void virtqueue_notify(struct virtqueue *vq);
+bool virtqueue_notify(struct virtqueue *vq);
 
 void *virtqueue_get_buf(struct virtqueue *vq, unsigned int *len);
 
-- 
1.7.1