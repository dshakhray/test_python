From 44ab5e4ac3d0b7402f00550b092d01efee82909e Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 17 Dec 2014 21:39:16 -0500
Subject: [drm] i915: Do not leak pages when freeing userptr objects

Message-id: <1418852380-13061-66-git-send-email-rclark@redhat.com>
Patchwork-id: 102194
O-Subject: [RHEL7 drm 65/89] drm/i915: Do not leak pages when freeing userptr objects
Bugzilla: 1173317
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1173317
Upstream: since drm-intel-next-fixes-2014-10-03

commit c479f4383ea8940dd6f88da61798ad31feb33e51

Author:     Tvrtko Ursulin <tvrtko.ursulin@intel.com>
AuthorDate: Fri Sep 26 15:05:22 2014 +0100
Commit:     Rob Clark <rclark@redhat.com>
CommitDate: Mon Dec 15 14:16:11 2014 -0500

    drm/i915: Do not leak pages when freeing userptr objects

    sg_alloc_table_from_pages() can build us a table with coalesced ranges which
    means we need to iterate over pages and not sg table entries when releasing
    page references.

    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: "Barbalho, Rafael" <rafael.barbalho@intel.com>
    Tested-by: Rafael Barbalho <rafael.barbalho@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: stable@vger.kernel.org
    [danvet: Remove unused local variable sg.]
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>

Signed-off-by: Rob Clark <rclark@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/i915/i915_gem_userptr.c b/drivers/gpu/drm/i915/i915_gem_userptr.c
index 21ea928..7b7a35d 100644
--- a/drivers/gpu/drm/i915/i915_gem_userptr.c
+++ b/drivers/gpu/drm/i915/i915_gem_userptr.c
@@ -554,16 +554,15 @@ i915_gem_userptr_get_pages(struct drm_i915_gem_object *obj)
 static void
 i915_gem_userptr_put_pages(struct drm_i915_gem_object *obj)
 {
- struct scatterlist *sg;
- int i;
+ struct sg_page_iter sg_iter;
 
  BUG_ON(obj->userptr.work != NULL);
 
  if (obj->madv != I915_MADV_WILLNEED)
   obj->dirty = 0;
 
- for_each_sg(obj->pages->sgl, sg, obj->pages->nents, i) {
-  struct page *page = sg_page(sg);
+ for_each_sg_page(obj->pages->sgl, &sg_iter, obj->pages->nents, 0) {
+  struct page *page = sg_page_iter_page(&sg_iter);
 
   if (obj->dirty)
    set_page_dirty(page);
-- 
1.7.1