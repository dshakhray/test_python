From b7cf62df2080b7e2994535bea5399612e8d6e9dd Mon Sep 17 00:00:00 2001
From: Josh Poimboeuf <jpoimboe@redhat.com>
Date: Thu, 4 Sep 2014 18:54:29 -0400
Subject: [x86] power/cpu: Annotate restore_processor_state() with notrace

Message-id: <d022a62f86c2f06742b9bffed5aa1cf6047ec46e.1409856554.git.jpoimboe@redhat.com>
Patchwork-id: 91244
O-Subject: [RHEL7.1 PATCH 10/23] x86, power, suspend: Annotate restore_processor_state() with notrace
Bugzilla: 1113829
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1113829

commit b8f99b3e0e066e7b2f3dbc348fe33d8277950727
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Tue Jun 24 20:58:26 2014 -0400

    x86, power, suspend: Annotate restore_processor_state() with notrace

    ftrace_stop() is used to stop function tracing during suspend and resume
    which removes a lot of possible debugging opportunities with tracing.
    The reason was that some function in the resume path was causing a triple
    fault if it were to be traced. The issue I found was that doing something
    as simple as calling smp_processor_id() would reboot the box!

    When function tracing was first created I didn't have a good way to figure
    out what function was having issues, or it looked to be multiple ones. To
    fix it, we just created a big hammer approach to the problem which was to
    add a flag in the mcount trampoline that could be checked and not call
    the traced functions.

    Lately I developed better ways to find problem functions and I can bisect
    down to see what function is causing the issue. I removed the flag that
    stopped tracing and proceeded to find the problem function and it ended
    up being restore_processor_state(). This function makes sense as when the
    CPU comes back online from a suspend it calls this function to set up
    registers, amongst them the GS register, which stores things such as
    what CPU the processor is (if you call smp_processor_id() without this
    set up properly, it would fault).

    By making restore_processor_state() notrace, the system can suspend and
    resume without the need of the big hammer tracing to stop.

    Link: http://lkml.kernel.org/r/3577662.BSnUZfboWb@vostro.rjw.lan

    Acked-by: "Rafael J. Wysocki" <rjw@rjwysocki.net>
    Reviewed-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c
index 1cf5b30..18c831f 100644
--- a/arch/x86/power/cpu.c
+++ b/arch/x86/power/cpu.c
@@ -165,7 +165,7 @@ static void fix_processor_context(void)
  *  by __save_processor_state()
  * @ctxt - structure to load the registers contents from
  */
-static void __restore_processor_state(struct saved_context *ctxt)
+static void notrace __restore_processor_state(struct saved_context *ctxt)
 {
  if (ctxt->misc_enable_saved)
   wrmsrl(MSR_IA32_MISC_ENABLE, ctxt->misc_enable);
@@ -239,7 +239,7 @@ static void __restore_processor_state(struct saved_context *ctxt)
 }
 
 /* Needed by apm.c */
-void restore_processor_state(void)
+void notrace restore_processor_state(void)
 {
  __restore_processor_state(&saved_context);
 }
-- 
1.7.1