From 233c6675cda5f3da3320c8987dbf0f734d6e18c6 Mon Sep 17 00:00:00 2001
From: Steve Best <sbest@redhat.com>
Date: Thu, 28 Aug 2014 11:01:12 -0400
Subject: [kernel] hashtable: add hash_for_each_possible_rcu_notrace()

Message-id: <20140828110112.11288.68158.sendpatchset@ibm-p7r2-01.lab.bos.redhat.com>
Patchwork-id: 89334
O-Subject: [PATCH RHEL7.1 BZ1123126] hashtable: add hash_for_each_possible_rcu_notrace()
Bugzilla: 1123126
RH-Acked-by: Jarod Wilson <jarod@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

RHBZ#:
------
https://bugzilla.redhat.com/show_bug.cgi?id=1123126

Description:
------------
This adds hash_for_each_possible_rcu_notrace() which is basically
a notrace clone of hash_for_each_possible_rcu() which cannot be
used in real mode due to its tracing/debugging capability.

Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

RHEL Version Found:
-------------------
RHEL 7.0

Brew:
-----
http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7891344

Upstream:
---------
http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=81fcfb813fe99c30f77dd3ed9a4e541d14a9ed01

This came in upstream with the patchset posted here
Subject [PATCH 0/8 v4] KVM: PPC: IOMMU in-kernel handling
https://lkml.org/lkml/2013/6/27/26

The way the bzs were created to bring in Power KVM the bz we have here only does the hashtable part. The
rest of the larger patchset will come in under Bug 1123145 - baseline patches for Power KVM enablement
for Power 8 - PPC KVM related.

Test Status:
------------
Currently being tested by IBM. This is part of their Power KVM product that we are bring into RHEL 7.1.

---------------------------------------------------------------
Steve Best

Proposed Patch:
---------------

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/hashtable.h b/include/linux/hashtable.h
index a9df51f..519b6e2 100644
--- a/include/linux/hashtable.h
+++ b/include/linux/hashtable.h
@@ -174,6 +174,21 @@ static inline void hash_del_rcu(struct hlist_node *node)
   member)
 
 /**
+ * hash_for_each_possible_rcu_notrace - iterate over all possible objects hashing
+ * to the same bucket in an rcu enabled hashtable in a rcu enabled hashtable
+ * @name: hashtable to iterate
+ * @obj: the type * to use as a loop cursor for each entry
+ * @member: the name of the hlist_node within the struct
+ * @key: the key of the objects to iterate over
+ *
+ * This is the same as hash_for_each_possible_rcu() except that it does
+ * not do any RCU debugging or tracing.
+ */
+#define hash_for_each_possible_rcu_notrace(name, obj, member, key) \
+ hlist_for_each_entry_rcu_notrace(obj, \
+  &name[hash_min(key, HASH_BITS(name))], member)
+
+/**
  * hash_for_each_possible_safe - iterate over all possible objects hashing to the
  * same bucket safe against removals
  * @name: hashtable to iterate
-- 
1.7.1