From 48f19a15708fc734d5114809027fb466913330b9 Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:38:18 -0400
Subject: [alsa] hda: Fix and neaten print_nid_path/debug_badness

Message-id: <140972823573-380-patchset-jkysela@redhat.com>
Patchwork-id: 91076
O-Subject: [RHEL 7.1 PATCH 379/442] ALSA: hda - Fix and neaten print_nid_path/debug_badness
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

print_nid_path has a possible buffer overflow if
struct nid_path.path values are > 256.

Avoid this and neaten the output to remove the leading ':'

Neaten debug_badness to always verify arguments.

Signed-off-by: Joe Perches <joe@perches.com>
Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: d82353e534847732c4665a21e2ea699713a0e5b0)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/pci/hda/hda_generic.c b/sound/pci/hda/hda_generic.c
index a24c7b2..b956449 100644
--- a/sound/pci/hda/hda_generic.c
+++ b/sound/pci/hda/hda_generic.c
@@ -350,16 +350,16 @@ static void print_nid_path(struct hda_codec *codec,
       const char *pfx, struct nid_path *path)
 {
  char buf[40];
+ char *pos = buf;
  int i;
 
+ *pos = 0;
+ for (i = 0; i < path->depth; i++)
+  pos += scnprintf(pos, sizeof(buf) - (pos - buf), "%s%02x",
+     pos != buf ? ":" : "",
+     path->path[i]);
 
- buf[0] = 0;
- for (i = 0; i < path->depth; i++) {
-  char tmp[4];
-  sprintf(tmp, ":%02x", path->path[i]);
-  strlcat(buf, tmp, sizeof(buf));
- }
- codec_dbg(codec, "%s path: depth=%d %s\n", pfx, path->depth, buf);
+ codec_dbg(codec, "%s path: depth=%d '%s'\n", pfx, path->depth, buf);
 }
 
 /* called recursively */
@@ -1700,9 +1700,11 @@ static int fill_and_eval_dacs(struct hda_codec *codec,
 #define DEBUG_BADNESS
 
 #ifdef DEBUG_BADNESS
-#define debug_badness(fmt, args...) codec_dbg(codec, fmt, ##args)
+#define debug_badness(fmt, ...)      \
+ codec_dbg(codec, fmt, ##__VA_ARGS__)
 #else
-#define debug_badness(...)
+#define debug_badness(fmt, ...)      \
+ do { if (0) codec_dbg(codec, fmt, ##__VA_ARGS__); } while (0)
 #endif
 
 #ifdef DEBUG_BADNESS
-- 
1.7.1