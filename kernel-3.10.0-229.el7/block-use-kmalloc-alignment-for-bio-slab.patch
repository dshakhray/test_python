From 0e2d708cd4ead9052e5ea042b36a17de9de8a77d Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:43 -0400
Subject: [block] use kmalloc alignment for bio slab

Message-id: <1405543364-20901-40-git-send-email-snitzer@redhat.com>
Patchwork-id: 85923
O-Subject: [RHEL7.1 PATCH 39/40] block: use kmalloc alignment for bio slab
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1117872

We haven't renamed fs/bio.c to block/bio.c in RHEL7 (yet); patch was
adjusted accordingly.

Upstream linux-dm.git commit d47e140e9ee4016c207a00f10b34aea3d588fc50
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Mar 28 15:51:55 2014 -0400

    block: use kmalloc alignment for bio slab

    Various subsystems can ask the bio subsystem to create a bio slab cache
    with some free space before the bio.  This free space can be used for any
    purpose.  Device mapper uses this per-bio-data feature to place some
    target-specific and device-mapper specific data before the bio, so that
    the target-specific data doesn't have to be allocated separately.

    This per-bio-data mechanism is used in place of kmalloc, so we need the
    allocated slab to have the same memory alignment as memory allocated
    with kmalloc.

    Change bio_find_or_create_slab() so that it uses ARCH_KMALLOC_MINALIGN
    alignment when creating the slab cache.  This is needed so that dm-crypt
    can use per-bio-data for encryption - the crypto subsystem assumes this
    data will have the same alignment as kmalloc'ed memory.

    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Acked-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/bio.c b/fs/bio.c
index dd90df7..c1e7cf1 100644
--- a/fs/bio.c
+++ b/fs/bio.c
@@ -114,7 +114,8 @@ static struct kmem_cache *bio_find_or_create_slab(unsigned int extra_size)
  bslab = &bio_slabs[entry];
 
  snprintf(bslab->name, sizeof(bslab->name), "bio-%d", entry);
- slab = kmem_cache_create(bslab->name, sz, 0, SLAB_HWCACHE_ALIGN, NULL);
+ slab = kmem_cache_create(bslab->name, sz, ARCH_KMALLOC_MINALIGN,
+     SLAB_HWCACHE_ALIGN, NULL);
  if (!slab)
   goto out_unlock;
 
-- 
1.7.1