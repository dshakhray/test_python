From a5ef4e6303f9d58e1bc37a0943cc0882906feee3 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 26 Aug 2014 15:30:25 -0400
Subject: [ethernet] igbvf: integer wrapping bug setting the mtu

Message-id: <1409067034-17415-5-git-send-email-sassmann@redhat.com>
Patchwork-id: 89216
O-Subject: [RHEL7.1 PATCH 04/13] igbvf: integer wrapping bug setting the mtu
Bugzilla: 1091122
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: John Greene <jogreene@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>

From: Dan Carpenter <dan.carpenter@oracle.com>

If new_mtu is very large then "new_mtu + ETH_HLEN + ETH_FCS_LEN" can
wrap and the check on the next line can underflow. This is one of those
bugs which can be triggered by the user if you have namespaces
configured.

Also since this is something the user can trigger then we don't want to
have dev_err() message.

This is a static checker fix and I'm not sure what the impact is.

Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Tested-by: Sibai Li Sibai.li@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 3de9e65f011b95235a789b12abc4730570cdb737)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/igbvf/netdev.c b/drivers/net/ethernet/intel/igbvf/netdev.c
index 4e6b02f..0c0b8f6 100644
--- a/drivers/net/ethernet/intel/igbvf/netdev.c
+++ b/drivers/net/ethernet/intel/igbvf/netdev.c
@@ -2343,10 +2343,9 @@ static int igbvf_change_mtu(struct net_device *netdev, int new_mtu)
  struct igbvf_adapter *adapter = netdev_priv(netdev);
  int max_frame = new_mtu + ETH_HLEN + ETH_FCS_LEN;
 
- if ((new_mtu < 68) || (max_frame > MAX_JUMBO_FRAME_SIZE)) {
-  dev_err(&adapter->pdev->dev, "Invalid MTU setting\n");
+ if (new_mtu < 68 || new_mtu > INT_MAX - ETH_HLEN - ETH_FCS_LEN ||
+     max_frame > MAX_JUMBO_FRAME_SIZE)
   return -EINVAL;
- }
 
 #define MAX_STD_JUMBO_FRAME_SIZE 9234
  if (max_frame > MAX_STD_JUMBO_FRAME_SIZE) {
-- 
1.7.1