From b28645265ecc938e83c33a5a6238bf624290a6b2 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Thu, 4 Sep 2014 11:21:55 -0400
Subject: [net] netfilter: ctnetlink: fix dumping of dying/unconfirmed conntracks

Message-id: <1409829716-13720-9-git-send-email-fwestpha@redhat.com>
Patchwork-id: 91223
O-Subject: [PATCH 8/9 RHEL7.1 net] netfilter: ctnetlink: fix dumping of dying/unconfirmed conntracks
Bugzilla: 1043012
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Jesper Brouer <jbrouer@redhat.com>

BZ: 1043012

commit 266155b2de8fb721ae353688529b2f8bcdde2f90
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Jun 5 14:28:44 2014 +0200

    netfilter: ctnetlink: fix dumping of dying/unconfirmed conntracks

    The dumping prematurely stops, it seems the callback argument that
    indicates that all entries have been dumped is set after iterating
    on the first cpu list. The dumping also may stop before the entire
    per-cpu list content is also dumped.

    With this patch, conntrack -L dying now shows the dying list content
    again.

    Fixes: b7779d06 ("netfilter: conntrack: spinlock per cpu to protect special lists.")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/netfilter/nf_conntrack_netlink.c b/net/netfilter/nf_conntrack_netlink.c
index 9a379da..e0d44d7 100644
--- a/net/netfilter/nf_conntrack_netlink.c
+++ b/net/netfilter/nf_conntrack_netlink.c
@@ -1163,9 +1163,6 @@ ctnetlink_dump_list(struct sk_buff *skb, struct netlink_callback *cb, bool dying
  if (cb->args[2])
   return 0;
 
- if (cb->args[0] == nr_cpu_ids)
-  return 0;
-
  for (cpu = cb->args[0]; cpu < nr_cpu_ids; cpu++) {
   struct ct_pcpu *pcpu;
 
@@ -1194,6 +1191,7 @@ restart:
    rcu_read_unlock();
    if (res < 0) {
     nf_conntrack_get(&ct->ct_general);
+    cb->args[0] = cpu;
     cb->args[1] = (unsigned long)ct;
     spin_unlock_bh(&pcpu->lock);
     goto out;
@@ -1202,10 +1200,10 @@ restart:
   if (cb->args[1]) {
    cb->args[1] = 0;
    goto restart;
-  } else
-   cb->args[2] = 1;
+  }
   spin_unlock_bh(&pcpu->lock);
  }
+ cb->args[2] = 1;
 out:
  if (last)
   nf_ct_put(last);
-- 
1.7.1