From be53eb8e79c3c89fa31991217d2368b77a7353ff Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:06:07 -0400
Subject: [acpi] hotplug/pci: Use _OST to notify firmware about notify status

Message-id: <20140710010607.22146.30293.stgit@gir.stowe>
Patchwork-id: 85618
O-Subject: [RHEL7.1 PATCH 076/105] ACPI / hotplug / PCI: Use _OST to notify firmware about notify status
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: e532e84ea11399a6066f31641425a76dd012ce77

commit e532e84ea11399a6066f31641425a76dd012ce77
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Sep 6 15:41:41 2013 +0200

    ACPI / hotplug / PCI: Use _OST to notify firmware about notify status

    The spec suggests that we should use _OST to notify the platform
    about the status of notifications it sends us, for example so that
    it doesn't repeate a notification that has been handled already.

    This turns out to help reduce the amount of diagnostic output from
    the ACPIPHP subsystem and speed up boot on at least one system that
    generates multiple device check notifies for PCIe devices on the root
    bus during boot.

    Reported-and-tested-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index 5a15dc3..47f78d1 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -870,6 +870,8 @@ static void hotplug_event_work(struct work_struct *work)
  hotplug_event(hp_work->handle, hp_work->type, context);
 
  acpi_scan_lock_release();
+ acpi_evaluate_hotplug_ost(hp_work->handle, hp_work->type,
+      ACPI_OST_SC_SUCCESS, NULL);
  kfree(hp_work); /* allocated in handle_hotplug_event() */
  put_bridge(context->func.parent);
 }
@@ -885,11 +887,15 @@ static void hotplug_event_work(struct work_struct *work)
 static void handle_hotplug_event(acpi_handle handle, u32 type, void *data)
 {
  struct acpiphp_context *context;
+ u32 ost_code = ACPI_OST_SC_SUCCESS;
 
  switch (type) {
  case ACPI_NOTIFY_BUS_CHECK:
  case ACPI_NOTIFY_DEVICE_CHECK:
+  break;
  case ACPI_NOTIFY_EJECT_REQUEST:
+  ost_code = ACPI_OST_SC_EJECT_IN_PROGRESS;
+  acpi_evaluate_hotplug_ost(handle, type, ost_code, NULL);
   break;
 
  case ACPI_NOTIFY_DEVICE_WAKE:
@@ -898,20 +904,21 @@ static void handle_hotplug_event(acpi_handle handle, u32 type, void *data)
  case ACPI_NOTIFY_FREQUENCY_MISMATCH:
   acpi_handle_err(handle, "Device cannot be configured due "
     "to a frequency mismatch\n");
-  return;
+  goto out;
 
  case ACPI_NOTIFY_BUS_MODE_MISMATCH:
   acpi_handle_err(handle, "Device cannot be configured due "
     "to a bus mode mismatch\n");
-  return;
+  goto out;
 
  case ACPI_NOTIFY_POWER_FAULT:
   acpi_handle_err(handle, "Device has suffered a power fault\n");
-  return;
+  goto out;
 
  default:
   acpi_handle_warn(handle, "Unsupported event type 0x%x\n", type);
-  return;
+  ost_code = ACPI_OST_SC_UNRECOGNIZED_NOTIFY;
+  goto out;
  }
 
  mutex_lock(&acpiphp_context_lock);
@@ -920,8 +927,14 @@ static void handle_hotplug_event(acpi_handle handle, u32 type, void *data)
   get_bridge(context->func.parent);
   acpiphp_put_context(context);
   alloc_acpi_hp_work(handle, type, context, hotplug_event_work);
+  mutex_unlock(&acpiphp_context_lock);
+  return;
  }
  mutex_unlock(&acpiphp_context_lock);
+ ost_code = ACPI_OST_SC_NON_SPECIFIC_FAILURE;
+
+ out:
+ acpi_evaluate_hotplug_ost(handle, type, ost_code, NULL);
 }
 
 /*
-- 
1.7.1