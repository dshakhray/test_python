From 76bfd5632768bda2bd56e8e6c4eced7b15d33948 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:25:57 -0400
Subject: [tools] perf/annotate: Fix annotate_browser__callq()

Message-id: <1408462094-14194-189-git-send-email-jolsa@redhat.com>
Patchwork-id: 88176
O-Subject: [PATCH RHEL7.1 BZ1131394 188/325] perf annotate: Fix annotate_browser__callq()
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 1179e11bbb655162e83b33e17a97c45d3fe292da
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Mon Oct 14 13:43:39 2013 +0300

description
===========
When following a call, annotate_browser__callq() uses the current
symbol's map to look up the target ip.  That will not work if the target
ip is on a map with a different mapping (i.e.  start - pgoff is
different).
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/ui/browsers/annotate.c b/tools/perf/ui/browsers/annotate.c
index 08545ae..57d3a86 100644
--- a/tools/perf/ui/browsers/annotate.c
+++ b/tools/perf/ui/browsers/annotate.c
@@ -442,35 +442,34 @@ static bool annotate_browser__callq(struct annotate_browser *browser,
 {
  struct map_symbol *ms = browser->b.priv;
  struct disasm_line *dl = browser->selection;
- struct symbol *sym = ms->sym;
  struct annotation *notes;
- struct symbol *target;
- u64 ip;
+ struct addr_map_symbol target = {
+  .map = ms->map,
+  .addr = dl->ops.target.addr,
+ };
  char title[SYM_TITLE_MAX_SIZE];
 
  if (!ins__is_call(dl->ins))
   return false;
 
- ip = ms->map->map_ip(ms->map, dl->ops.target.addr);
- target = map__find_symbol(ms->map, ip, NULL);
- if (target == NULL) {
+ if (map_groups__find_ams(&target, NULL)) {
   ui_helpline__puts("The called function was not found.");
   return true;
  }
 
- notes = symbol__annotation(target);
+ notes = symbol__annotation(target.sym);
  pthread_mutex_lock(&notes->lock);
 
- if (notes->src == NULL && symbol__alloc_hist(target) < 0) {
+ if (notes->src == NULL && symbol__alloc_hist(target.sym) < 0) {
   pthread_mutex_unlock(&notes->lock);
   ui__warning("Not enough memory for annotating '%s' symbol!\n",
-       target->name);
+       target.sym->name);
   return true;
  }
 
  pthread_mutex_unlock(&notes->lock);
- symbol__tui_annotate(target, ms->map, evsel, hbt);
- sym_title(sym, ms->map, title, sizeof(title));
+ symbol__tui_annotate(target.sym, target.map, evsel, hbt);
+ sym_title(ms->sym, ms->map, title, sizeof(title));
  ui_browser__show_title(&browser->b, title);
  return true;
 }
-- 
1.7.1