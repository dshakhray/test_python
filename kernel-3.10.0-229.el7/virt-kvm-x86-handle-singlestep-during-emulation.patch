From 3ea41bc294bdadd131e9276d75b87aba875ccb1b Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:37:25 -0400
Subject: [virt] kvm/x86: handle singlestep during emulation

Message-id: <1406040016-3289-51-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86129
O-Subject: [RHEL7 PATCH v2 050/221] KVM: x86: handle singlestep during emulation
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

This lets debugging work better during emulation of invalid
guest state.

This time the check is done after emulation, but before writeback
of the flags; we need to check the flags *before* execution of the
instruction, we cannot check singlestep_rip because the CS base may
have already been modified.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 arch/x86/kvm/x86.c
(cherry picked from commit 663f4c61b8036fd3a80debbe00b58d198ae63e76)
---

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index f7451a6..7890722 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -5038,6 +5038,41 @@ static int kvm_vcpu_check_hw_bp(unsigned long addr, u32 type, u32 dr7,
  return dr6;
 }
 
+static void kvm_vcpu_check_singlestep(struct kvm_vcpu *vcpu, int *r)
+{
+ struct kvm_run *kvm_run = vcpu->run;
+
+ /*
+  * Use the "raw" value to see if TF was passed to the processor.
+  * Note that the new value of the flags has not been saved yet.
+  *
+  * This is correct even for TF set by the guest, because "the
+  * processor will not generate this exception after the instruction
+  * that sets the TF flag".
+  */
+ unsigned long rflags = kvm_x86_ops->get_rflags(vcpu);
+
+ if (unlikely(rflags & X86_EFLAGS_TF)) {
+  if (vcpu->guest_debug & KVM_GUESTDBG_SINGLESTEP) {
+   kvm_run->debug.arch.dr6 = DR6_BS | DR6_FIXED_1;
+   kvm_run->debug.arch.pc = vcpu->arch.singlestep_rip;
+   kvm_run->debug.arch.exception = DB_VECTOR;
+   kvm_run->exit_reason = KVM_EXIT_DEBUG;
+   *r = EMULATE_USER_EXIT;
+  } else {
+   vcpu->arch.emulate_ctxt.eflags &= ~X86_EFLAGS_TF;
+   /*
+    * "Certain debug exceptions may clear bit 0-3.  The
+    * remaining contents of the DR6 register are never
+    * cleared by the processor".
+    */
+   vcpu->arch.dr6 &= ~15;
+   vcpu->arch.dr6 |= DR6_BS;
+   kvm_queue_exception(vcpu, DB_VECTOR);
+  }
+ }
+}
+
 static bool kvm_vcpu_check_breakpoint(struct kvm_vcpu *vcpu, int *r)
 {
  struct kvm_run *kvm_run = vcpu->run;
@@ -5184,10 +5219,12 @@ restart:
 
  if (writeback) {
   toggle_interruptibility(vcpu, ctxt->interruptibility);
-  kvm_set_rflags(vcpu, ctxt->eflags);
   kvm_make_request(KVM_REQ_EVENT, vcpu);
   vcpu->arch.emulate_regs_need_sync_to_vcpu = false;
   kvm_rip_write(vcpu, ctxt->eip);
+  if (r == EMULATE_DONE)
+   kvm_vcpu_check_singlestep(vcpu, &r);
+  kvm_set_rflags(vcpu, ctxt->eflags);
  } else
   vcpu->arch.emulate_regs_need_sync_to_vcpu = true;
 
-- 
1.7.1