From f83b9ec5ac2e5212d6c3db1beb6d9263c6c3dea6 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:05:50 -0400
Subject: [virt] kvm/ppc: book3s - Add GET/SET_ONE_REG interface for VRSAVE

Message-id: <1410545655-205645-122-git-send-email-dzickus@redhat.com>
Patchwork-id: 94144
O-Subject: [RHEL7 PATCH 121/626] KVM: PPC: Book3S: Add GET/SET_ONE_REG interface for VRSAVE
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit c0867fd50943d71d9f0bc5078393ce4ec76b3923
Author: Paul Mackerras <paulus@samba.org>
Date:   Fri Sep 6 13:18:32 2013 +1000

    KVM: PPC: Book3S: Add GET/SET_ONE_REG interface for VRSAVE

    The VRSAVE register value for a vcpu is accessible through the
    GET/SET_SREGS interface for Book E processors, but not for Book 3S
    processors.  In order to make this accessible for Book 3S processors,
    this adds a new register identifier for GET/SET_ONE_REG, and adds
    the code to implement it.

    Signed-off-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Alexander Graf <agraf@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/virtual/kvm/api.txt b/Documentation/virtual/kvm/api.txt
index 5b8830b..58ccf0a 100644
--- a/Documentation/virtual/kvm/api.txt
+++ b/Documentation/virtual/kvm/api.txt
@@ -1847,6 +1847,7 @@ registers, find a list below:
   PPC   | KVM_REG_PPC_TCSCR | 64
   PPC   | KVM_REG_PPC_PID | 64
   PPC   | KVM_REG_PPC_ACOP | 64
+  PPC   | KVM_REG_PPC_VRSAVE | 32
   PPC   | KVM_REG_PPC_TM_GPR0 | 64
           ...
   PPC   | KVM_REG_PPC_TM_GPR31 | 64
diff --git a/arch/powerpc/include/uapi/asm/kvm.h b/arch/powerpc/include/uapi/asm/kvm.h
index a8124fe..b98bf3f 100644
--- a/arch/powerpc/include/uapi/asm/kvm.h
+++ b/arch/powerpc/include/uapi/asm/kvm.h
@@ -532,6 +532,8 @@ struct kvm_get_htab_header {
 #define KVM_REG_PPC_PID  (KVM_REG_PPC | KVM_REG_SIZE_U64 | 0xb2)
 #define KVM_REG_PPC_ACOP (KVM_REG_PPC | KVM_REG_SIZE_U64 | 0xb3)
 
+#define KVM_REG_PPC_VRSAVE (KVM_REG_PPC | KVM_REG_SIZE_U32 | 0xb4)
+
 /* Transactional Memory checkpointed state:
  * This is all GPRs, all VSX regs and a subset of SPRs
  */
diff --git a/arch/powerpc/kvm/book3s.c b/arch/powerpc/kvm/book3s.c
index 700df6f..f97369d 100644
--- a/arch/powerpc/kvm/book3s.c
+++ b/arch/powerpc/kvm/book3s.c
@@ -528,6 +528,9 @@ int kvm_vcpu_ioctl_get_one_reg(struct kvm_vcpu *vcpu, struct kvm_one_reg *reg)
    }
    val = get_reg_val(reg->id, vcpu->arch.vscr.u[3]);
    break;
+  case KVM_REG_PPC_VRSAVE:
+   val = get_reg_val(reg->id, vcpu->arch.vrsave);
+   break;
 #endif /* CONFIG_ALTIVEC */
   case KVM_REG_PPC_DEBUG_INST: {
    u32 opcode = INS_TW;
@@ -605,6 +608,13 @@ int kvm_vcpu_ioctl_set_one_reg(struct kvm_vcpu *vcpu, struct kvm_one_reg *reg)
    }
    vcpu->arch.vscr.u[3] = set_reg_val(reg->id, val);
    break;
+  case KVM_REG_PPC_VRSAVE:
+   if (!cpu_has_feature(CPU_FTR_ALTIVEC)) {
+    r = -ENXIO;
+    break;
+   }
+   vcpu->arch.vrsave = set_reg_val(reg->id, val);
+   break;
 #endif /* CONFIG_ALTIVEC */
 #ifdef CONFIG_KVM_XICS
   case KVM_REG_PPC_ICP_STATE:
-- 
1.7.1