From 3ca9d2822bd7e2aea7293ab3a14fc8e5eafe3d7d Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:50:22 -0400
Subject: [tools] perf/symbols: Rename filename argument

Message-id: <1408953210-26343-135-git-send-email-jolsa@redhat.com>
Patchwork-id: 88903
O-Subject: [PATCH RHEL7.1 BZ1133083 134/322] perf symbols: Rename filename argument
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 7d2a5122ca973cdf3c1469187811ae01dc07f67a
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Tue Dec 10 16:02:50 2013 -0300

description
===========
The 'file' is more commonly associated with a file descriptor of
some sort, rename it to 'filename' as this is the more common idiom
for a file name argument.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/dso.c b/tools/perf/util/dso.c
index fbc66fd..582b5d3 100644
--- a/tools/perf/util/dso.c
+++ b/tools/perf/util/dso.c
@@ -29,7 +29,7 @@ char dso__symtab_origin(const struct dso *dso)
 }
 
 int dso__binary_type_file(const struct dso *dso, enum dso_binary_type type,
-     char *root_dir, char *file, size_t size)
+     char *root_dir, char *filename, size_t size)
 {
  char build_id_hex[BUILD_ID_SIZE * 2 + 1];
  int ret = 0;
@@ -38,30 +38,30 @@ int dso__binary_type_file(const struct dso *dso, enum dso_binary_type type,
  case DSO_BINARY_TYPE__DEBUGLINK: {
   char *debuglink;
 
-  strncpy(file, dso->long_name, size);
-  debuglink = file + dso->long_name_len;
-  while (debuglink != file && *debuglink != '/')
+  strncpy(filename, dso->long_name, size);
+  debuglink = filename + dso->long_name_len;
+  while (debuglink != filename && *debuglink != '/')
    debuglink--;
   if (*debuglink == '/')
    debuglink++;
   filename__read_debuglink(dso->long_name, debuglink,
-      size - (debuglink - file));
+      size - (debuglink - filename));
   }
   break;
  case DSO_BINARY_TYPE__BUILD_ID_CACHE:
   /* skip the locally configured cache if a symfs is given */
   if (symbol_conf.symfs[0] ||
-      (dso__build_id_filename(dso, file, size) == NULL))
+      (dso__build_id_filename(dso, filename, size) == NULL))
    ret = -1;
   break;
 
  case DSO_BINARY_TYPE__FEDORA_DEBUGINFO:
-  snprintf(file, size, "%s/usr/lib/debug%s.debug",
+  snprintf(filename, size, "%s/usr/lib/debug%s.debug",
     symbol_conf.symfs, dso->long_name);
   break;
 
  case DSO_BINARY_TYPE__UBUNTU_DEBUGINFO:
-  snprintf(file, size, "%s/usr/lib/debug%s",
+  snprintf(filename, size, "%s/usr/lib/debug%s",
     symbol_conf.symfs, dso->long_name);
   break;
 
@@ -75,14 +75,14 @@ int dso__binary_type_file(const struct dso *dso, enum dso_binary_type type,
   while (last_slash != dso->long_name && *last_slash != '/')
    last_slash--;
 
-  len = scnprintf(file, size, "%s", symbol_conf.symfs);
+  len = scnprintf(filename, size, "%s", symbol_conf.symfs);
   dir_size = last_slash - dso->long_name + 2;
   if (dir_size > (size - len)) {
    ret = -1;
    break;
   }
-  len += scnprintf(file + len, dir_size, "%s",  dso->long_name);
-  len += scnprintf(file + len , size - len, ".debug%s",
+  len += scnprintf(filename + len, dir_size, "%s",  dso->long_name);
+  len += scnprintf(filename + len , size - len, ".debug%s",
         last_slash);
   break;
  }
@@ -96,7 +96,7 @@ int dso__binary_type_file(const struct dso *dso, enum dso_binary_type type,
   build_id__sprintf(dso->build_id,
       sizeof(dso->build_id),
       build_id_hex);
-  snprintf(file, size,
+  snprintf(filename, size,
     "%s/usr/lib/debug/.build-id/%.2s/%s.debug",
     symbol_conf.symfs, build_id_hex, build_id_hex + 2);
   break;
@@ -104,23 +104,23 @@ int dso__binary_type_file(const struct dso *dso, enum dso_binary_type type,
  case DSO_BINARY_TYPE__VMLINUX:
  case DSO_BINARY_TYPE__GUEST_VMLINUX:
  case DSO_BINARY_TYPE__SYSTEM_PATH_DSO:
-  snprintf(file, size, "%s%s",
+  snprintf(filename, size, "%s%s",
     symbol_conf.symfs, dso->long_name);
   break;
 
  case DSO_BINARY_TYPE__GUEST_KMODULE:
-  snprintf(file, size, "%s%s%s", symbol_conf.symfs,
+  snprintf(filename, size, "%s%s%s", symbol_conf.symfs,
     root_dir, dso->long_name);
   break;
 
  case DSO_BINARY_TYPE__SYSTEM_PATH_KMODULE:
-  snprintf(file, size, "%s%s", symbol_conf.symfs,
+  snprintf(filename, size, "%s%s", symbol_conf.symfs,
     dso->long_name);
   break;
 
  case DSO_BINARY_TYPE__KCORE:
  case DSO_BINARY_TYPE__GUEST_KCORE:
-  snprintf(file, size, "%s", dso->long_name);
+  snprintf(filename, size, "%s", dso->long_name);
   break;
 
  default:
diff --git a/tools/perf/util/dso.h b/tools/perf/util/dso.h
index 99f3c64..e1cc506 100644
--- a/tools/perf/util/dso.h
+++ b/tools/perf/util/dso.h
@@ -129,7 +129,7 @@ int dso__kernel_module_get_build_id(struct dso *dso, const char *root_dir);
 
 char dso__symtab_origin(const struct dso *dso);
 int dso__binary_type_file(const struct dso *dso, enum dso_binary_type type,
-     char *root_dir, char *file, size_t size);
+     char *root_dir, char *filename, size_t size);
 
 int dso__data_fd(struct dso *dso, struct machine *machine);
 ssize_t dso__data_read_offset(struct dso *dso, struct machine *machine,
-- 
1.7.1