From 0b60d5b492acf9d0e74397628c12d510ab69b979 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:14:47 -0400
Subject: [net] l2tp: call udp{6}_set_csum

Message-id: <1409652920-431-25-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90188
O-Subject: [PATCH 24/57] [RHEL7.1 net] l2tp: call udp{6}_set_csum
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

minor conflict due to missing commit
31c70d59 ("l2tp: keep original skb ownership").

commit 77157e1973cbdb8d60bdb0ec749d6014bedc5bd5
Author: Tom Herbert <therbert@google.com>
Date:   Wed Jun 4 17:19:56 2014 -0700

    l2tp: call udp{6}_set_csum

    Call common functions to set checksum for UDP tunnel.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/l2tp/l2tp_core.c b/net/l2tp/l2tp_core.c
index f1ee4fb..5f52799 100644
--- a/net/l2tp/l2tp_core.c
+++ b/net/l2tp/l2tp_core.c
@@ -1058,33 +1058,6 @@ static inline void l2tp_skb_set_owner_w(struct sk_buff *skb, struct sock *sk)
  skb->destructor = l2tp_sock_wfree;
 }
 
-#if IS_ENABLED(CONFIG_IPV6)
-static void l2tp_xmit_ipv6_csum(struct sock *sk, struct sk_buff *skb,
-    int udp_len)
-{
- struct ipv6_pinfo *np = inet6_sk(sk);
- struct udphdr *uh = udp_hdr(skb);
-
- if (udp_get_no_check6_tx(sk))
-  skb->ip_summed = CHECKSUM_NONE;
- else if (!skb_dst(skb) || !skb_dst(skb)->dev ||
-     !(skb_dst(skb)->dev->features & NETIF_F_IPV6_CSUM)) {
-  __wsum csum = skb_checksum(skb, 0, udp_len, 0);
-  skb->ip_summed = CHECKSUM_UNNECESSARY;
-  uh->check = csum_ipv6_magic(&np->saddr, &sk->sk_v6_daddr, udp_len,
-         IPPROTO_UDP, csum);
-  if (uh->check == 0)
-   uh->check = CSUM_MANGLED_0;
- } else {
-  skb->ip_summed = CHECKSUM_PARTIAL;
-  skb->csum_start = skb_transport_header(skb) - skb->head;
-  skb->csum_offset = offsetof(struct udphdr, check);
-  uh->check = ~csum_ipv6_magic(&np->saddr, &sk->sk_v6_daddr,
-          udp_len, IPPROTO_UDP, 0);
- }
-}
-#endif
-
 /* If caller requires the skb to have a ppp header, the header must be
  * inserted in the skb data before calling this function.
  */
@@ -1096,7 +1069,6 @@ int l2tp_xmit_skb(struct l2tp_session *session, struct sk_buff *skb, int hdr_len
  struct flowi *fl;
  struct udphdr *uh;
  struct inet_sock *inet;
- __wsum csum;
  int headroom;
  int uhlen = (tunnel->encap == L2TP_ENCAPTYPE_UDP) ? sizeof(struct udphdr) : 0;
  int udp_len;
@@ -1146,33 +1118,17 @@ int l2tp_xmit_skb(struct l2tp_session *session, struct sk_buff *skb, int hdr_len
   uh->dest = inet->inet_dport;
   udp_len = uhlen + hdr_len + data_len;
   uh->len = htons(udp_len);
-  uh->check = 0;
 
   /* Calculate UDP checksum if configured to do so */
 #if IS_ENABLED(CONFIG_IPV6)
   if (sk->sk_family == PF_INET6 && !tunnel->v4mapped)
-   l2tp_xmit_ipv6_csum(sk, skb, udp_len);
+   udp6_set_csum(udp_get_no_check6_tx(sk),
+          skb, &inet6_sk(sk)->saddr,
+          &sk->sk_v6_daddr, udp_len);
   else
 #endif
-  if (sk->sk_no_check_tx)
-   skb->ip_summed = CHECKSUM_NONE;
-  else if ((skb_dst(skb) && skb_dst(skb)->dev) &&
-    (!(skb_dst(skb)->dev->features & NETIF_F_V4_CSUM))) {
-   skb->ip_summed = CHECKSUM_COMPLETE;
-   csum = skb_checksum(skb, 0, udp_len, 0);
-   uh->check = csum_tcpudp_magic(inet->inet_saddr,
-            inet->inet_daddr,
-            udp_len, IPPROTO_UDP, csum);
-   if (uh->check == 0)
-    uh->check = CSUM_MANGLED_0;
-  } else {
-   skb->ip_summed = CHECKSUM_PARTIAL;
-   skb->csum_start = skb_transport_header(skb) - skb->head;
-   skb->csum_offset = offsetof(struct udphdr, check);
-   uh->check = ~csum_tcpudp_magic(inet->inet_saddr,
-             inet->inet_daddr,
-             udp_len, IPPROTO_UDP, 0);
-  }
+  udp_set_csum(sk->sk_no_check_tx, skb, inet->inet_saddr,
+        inet->inet_daddr, udp_len);
   break;
 
  case L2TP_ENCAPTYPE_IP:
-- 
1.7.1