From 22fc955841d3550fdca340a1fabc0393e860c3c4 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 21:00:34 -0400
Subject: [fs] xfs: flush both inodes in xfs_swap_extents

Message-id: <1412888441-4181-41-git-send-email-sandeen@redhat.com>
Patchwork-id: 97321
O-Subject: [RHEL7.1 PATCH 40/47] [fs] xfs: flush both inodes in xfs_swap_extents
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit 4ef897a27543b513351262881660147366c042a1
    Author: Dave Chinner <dchinner@redhat.com>
    Date:   Mon Aug 4 13:44:08 2014 +1000

    xfs: flush both inodes in xfs_swap_extents

    We need to treat both inodes identically from a page cache point of
    view when prepareing them for extent swapping. We don't do this
    right now - we assume that one of the inodes empty, because that's
    what xfs_fsr currently does. Remove this assumption from the code.

    While factoring out the flushing and related checks, move the
    transactions reservation to immeidately after the flushes so that we
    don't need to pick up and then drop the ilock to do the transaction
    reservation. There are no issues with aborting the transaction it if
    the checks fail before we join the inodes to the transaction and
    dirty them, so this is a safe change to make.

    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_bmap_util.c b/fs/xfs/xfs_bmap_util.c
index 8eef057..ce5cc28 100644
--- a/fs/xfs/xfs_bmap_util.c
+++ b/fs/xfs/xfs_bmap_util.c
@@ -1526,6 +1526,30 @@ xfs_swap_extents_check_format(
 }
 
 int
+xfs_swap_extent_flush(
+ struct xfs_inode *ip)
+{
+ int error;
+
+ error = -filemap_write_and_wait(VFS_I(ip)->i_mapping);
+ if (error)
+  return error;
+ truncate_pagecache_range(VFS_I(ip), 0, -1);
+
+ /* Verify O_DIRECT for ftmp */
+ if (VFS_I(ip)->i_mapping->nrpages)
+  return EINVAL;
+
+ /*
+  * Don't try to swap extents on mmap()d files because we can't lock
+  * out races against page faults safely.
+  */
+ if (mapping_mapped(VFS_I(ip)->i_mapping))
+  return EBUSY;
+ return 0;
+}
+
+int
 xfs_swap_extents(
  xfs_inode_t *ip, /* target inode */
  xfs_inode_t *tip, /* tmp inode */
@@ -1569,26 +1593,28 @@ xfs_swap_extents(
   goto out_unlock;
  }
 
- error = -filemap_write_and_wait(VFS_I(tip)->i_mapping);
+ error = xfs_swap_extent_flush(ip);
+ if (error)
+  goto out_unlock;
+ error = xfs_swap_extent_flush(tip);
  if (error)
   goto out_unlock;
- truncate_pagecache_range(VFS_I(tip), 0, -1);
-
- xfs_lock_two_inodes(ip, tip, XFS_ILOCK_EXCL);
- lock_flags |= XFS_ILOCK_EXCL;
 
- /* Verify O_DIRECT for ftmp */
- if (VN_CACHED(VFS_I(tip)) != 0) {
-  error = XFS_ERROR(EINVAL);
+ tp = xfs_trans_alloc(mp, XFS_TRANS_SWAPEXT);
+ error = xfs_trans_reserve(tp, &M_RES(mp)->tr_ichange, 0, 0);
+ if (error) {
+  xfs_trans_cancel(tp, 0);
   goto out_unlock;
  }
+ xfs_lock_two_inodes(ip, tip, XFS_ILOCK_EXCL);
+ lock_flags |= XFS_ILOCK_EXCL;
 
  /* Verify all data are being swapped */
  if (sxp->sx_offset != 0 ||
      sxp->sx_length != ip->i_d.di_size ||
      sxp->sx_length != tip->i_d.di_size) {
   error = XFS_ERROR(EFAULT);
-  goto out_unlock;
+  goto out_trans_cancel;
  }
 
  trace_xfs_swap_extent_before(ip, 0);
@@ -1600,7 +1626,7 @@ xfs_swap_extents(
   xfs_notice(mp,
       "%s: inode 0x%llx format is incompatible for exchanging.",
     __func__, ip->i_ino);
-  goto out_unlock;
+  goto out_trans_cancel;
  }
 
  /*
@@ -1615,41 +1641,8 @@ xfs_swap_extents(
      (sbp->bs_mtime.tv_sec != VFS_I(ip)->i_mtime.tv_sec) ||
      (sbp->bs_mtime.tv_nsec != VFS_I(ip)->i_mtime.tv_nsec)) {
   error = XFS_ERROR(EBUSY);
-  goto out_unlock;
- }
-
- /* We need to fail if the file is memory mapped.  Once we have tossed
-  * all existing pages, the page fault will have no option
-  * but to go to the filesystem for pages. By making the page fault call
-  * vop_read (or write in the case of autogrow) they block on the iolock
-  * until we have switched the extents.
-  */
- if (VN_MAPPED(VFS_I(ip))) {
-  error = XFS_ERROR(EBUSY);
-  goto out_unlock;
- }
-
- xfs_iunlock(ip, XFS_ILOCK_EXCL);
- xfs_iunlock(tip, XFS_ILOCK_EXCL);
- lock_flags &= ~XFS_ILOCK_EXCL;
-
- /*
-  * There is a race condition here since we gave up the
-  * ilock.  However, the data fork will not change since
-  * we have the iolock (locked for truncation too) so we
-  * are safe.  We don't really care if non-io related
-  * fields change.
-  */
- truncate_pagecache_range(VFS_I(ip), 0, -1);
-
- tp = xfs_trans_alloc(mp, XFS_TRANS_SWAPEXT);
- error = xfs_trans_reserve(tp, &M_RES(mp)->tr_ichange, 0, 0);
- if (error)
   goto out_trans_cancel;
-
- xfs_lock_two_inodes(ip, tip, XFS_ILOCK_EXCL);
- lock_flags |= XFS_ILOCK_EXCL;
-
+ }
  /*
   * Count the number of extended attribute blocks
   */
-- 
1.7.1