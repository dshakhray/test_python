From 7e09aef254c1da227e0cf62ed5de9c2bdfccc69f Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:23 -0400
Subject: [block] blk-mq: request initialization optimizations

Message-id: <1402670238-13916-96-git-send-email-snitzer@redhat.com>
Patchwork-id: 83885
O-Subject: [RHEL7.1 PATCH 095/150] blk-mq: request initialization optimizations
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 4b570521be54666e6ad7e5f47af92fd609fbd8b5
Author: Jens Axboe <axboe@fb.com>
Date:   Thu May 29 11:00:11 2014 -0600

    blk-mq: request initialization optimizations

    We currently clear a lot more than we need to, so make that a bit
    more clever. Make some of the init dependent on features, like
    only setting start_time if we are going to use it.

    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index f98d977..6160128 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -199,19 +199,12 @@ static void blk_mq_rq_ctx_init(struct request_queue *q, struct blk_mq_ctx *ctx,
  rq->q = q;
  rq->mq_ctx = ctx;
  rq->cmd_flags |= rw_flags;
- rq->cmd_type = 0;
  /* do not touch atomic flags, it needs atomic ops against the timer */
  rq->cpu = -1;
- rq->__data_len = 0;
- rq->__sector = (sector_t) -1;
- rq->bio = NULL;
- rq->biotail = NULL;
  INIT_HLIST_NODE(&rq->hash);
  RB_CLEAR_NODE(&rq->rb_node);
- memset(&rq->flush, 0, max(sizeof(rq->flush), sizeof(rq->elv)));
  rq->rq_disk = NULL;
  rq->part = NULL;
- rq->start_time = jiffies;
 #ifdef CONFIG_BLK_CGROUP
  rq->rl = NULL;
  set_start_time_ns(rq);
@@ -221,23 +214,16 @@ static void blk_mq_rq_ctx_init(struct request_queue *q, struct blk_mq_ctx *ctx,
 #if defined(CONFIG_BLK_DEV_INTEGRITY)
  rq->nr_integrity_segments = 0;
 #endif
- rq->ioprio = 0;
  rq->special = NULL;
  /* tag was already set */
  rq->errors = 0;
- memset(rq->__cmd, 0, sizeof(rq->__cmd));
- rq->cmd = rq->__cmd;
- rq->cmd_len = BLK_MAX_CDB;
 
  rq->extra_len = 0;
  rq->sense_len = 0;
  rq->resid_len = 0;
  rq->sense = NULL;
 
- rq->deadline = 0;
  INIT_LIST_HEAD(&rq->timeout_list);
- rq->timeout = 0;
- rq->retries = 0;
  rq->end_io = NULL;
  rq->end_io_data = NULL;
  rq->next_rq = NULL;
@@ -449,8 +435,10 @@ static void blk_mq_start_request(struct request *rq, bool last)
   * complete. So be sure to clear complete again when we start
   * the request, otherwise we'll ignore the completion event.
   */
- set_bit(REQ_ATOM_STARTED, &rq->atomic_flags);
- clear_bit(REQ_ATOM_COMPLETE, &rq->atomic_flags);
+ if (!test_bit(REQ_ATOM_STARTED, &rq->atomic_flags))
+  set_bit(REQ_ATOM_STARTED, &rq->atomic_flags);
+ if (test_bit(REQ_ATOM_COMPLETE, &rq->atomic_flags))
+  clear_bit(REQ_ATOM_COMPLETE, &rq->atomic_flags);
 
  if (q->dma_drain_size && blk_rq_bytes(rq)) {
   /*
@@ -1112,7 +1100,11 @@ void blk_mq_flush_plug_list(struct blk_plug *plug, bool from_schedule)
 static void blk_mq_bio_to_request(struct request *rq, struct bio *bio)
 {
  init_request_from_bio(rq, bio);
- blk_account_io_start(rq, 1);
+
+ if (blk_do_io_stat(rq)) {
+  rq->start_time = jiffies;
+  blk_account_io_start(rq, 1);
+ }
 }
 
 static inline bool blk_mq_merge_queue_io(struct blk_mq_hw_ctx *hctx,
-- 
1.7.1