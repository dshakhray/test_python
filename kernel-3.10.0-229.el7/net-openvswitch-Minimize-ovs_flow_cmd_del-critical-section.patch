From 24a09ddef2acaf5ba1517964d32ab5d7ae00ec96 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:30:03 -0400
Subject: [net] openvswitch: Minimize ovs_flow_cmd_del critical section

Message-id: <c1570ca8fb04238237082792438d8e8ffccb2606.1410531783.git.jbenc@redhat.com>
Patchwork-id: 94021
O-Subject: [RHEL7.1 net PATCH 30/50] openvswitch: Minimize ovs_flow_cmd_del critical section.
Bugzilla: 1110384
RH-Acked-by: Flavio Leitner <fbl@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110384
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit aed067783e505bf66dcafa8647d08619eb5b1c55
Author: Jarno Rajahalme <jrajahalme@nicira.com>
Date:   Mon May 5 14:40:13 2014 -0700

    openvswitch: Minimize ovs_flow_cmd_del critical section.

    ovs_flow_cmd_del() now allocates reply (if needed) after the flow has
    already been removed from the flow table.  If the reply allocation
    fails, a netlink error is signaled with netlink_set_err(), as is
    already done in ovs_flow_cmd_new_or_set() in the similar situation.

    Signed-off-by: Jarno Rajahalme <jrajahalme@nicira.com>
    Signed-off-by: Pravin B Shelar <pshelar@nicira.com>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index 6ccf9e7..50daf11 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -986,50 +986,53 @@ static int ovs_flow_cmd_del(struct sk_buff *skb, struct genl_info *info)
  struct sw_flow_match match;
  int err;
 
+ if (likely(a[OVS_FLOW_ATTR_KEY])) {
+  ovs_match_init(&match, &key, NULL);
+  err = ovs_nla_get_match(&match, a[OVS_FLOW_ATTR_KEY], NULL);
+  if (unlikely(err))
+   return err;
+ }
+
  ovs_lock();
  dp = get_dp(sock_net(skb->sk), ovs_header->dp_ifindex);
- if (!dp) {
+ if (unlikely(!dp)) {
   err = -ENODEV;
   goto unlock;
  }
 
- if (!a[OVS_FLOW_ATTR_KEY]) {
+ if (unlikely(!a[OVS_FLOW_ATTR_KEY])) {
   err = ovs_flow_tbl_flush(&dp->table);
   goto unlock;
  }
 
- ovs_match_init(&match, &key, NULL);
- err = ovs_nla_get_match(&match, a[OVS_FLOW_ATTR_KEY], NULL);
- if (err)
-  goto unlock;
-
  flow = ovs_flow_tbl_lookup(&dp->table, &key);
- if (!flow || !ovs_flow_cmp_unmasked_key(flow, &match)) {
+ if (unlikely(!flow || !ovs_flow_cmp_unmasked_key(flow, &match))) {
   err = -ENOENT;
   goto unlock;
  }
 
- reply = ovs_flow_cmd_alloc_info(ovsl_dereference(flow->sf_acts), info,
-     false);
- if (IS_ERR(reply)) {
-  err = PTR_ERR(reply);
-  goto unlock;
- }
-
  ovs_flow_tbl_remove(&dp->table, flow);
+ ovs_unlock();
 
- if (reply) {
-  err = ovs_flow_cmd_fill_info(flow, ovs_header->dp_ifindex,
-          reply, info->snd_portid,
-          info->snd_seq, 0,
-          OVS_FLOW_CMD_DEL);
-  BUG_ON(err < 0);
+ reply = ovs_flow_cmd_alloc_info((const struct sw_flow_actions __force *) flow->sf_acts,
+     info, false);
+ if (likely(reply)) {
+  if (likely(!IS_ERR(reply))) {
+   rcu_read_lock(); /*To keep RCU checker happy. */
+   err = ovs_flow_cmd_fill_info(flow, ovs_header->dp_ifindex,
+           reply, info->snd_portid,
+           info->snd_seq, 0,
+           OVS_FLOW_CMD_DEL);
+   rcu_read_unlock();
+   BUG_ON(err < 0);
+
+   ovs_notify(&dp_flow_genl_family, reply, info);
+  } else {
+   netlink_set_err(sock_net(skb->sk)->genl_sock, 0, 0, PTR_ERR(reply));
+  }
  }
- ovs_flow_free(flow, true);
- ovs_unlock();
 
- if (reply)
-  ovs_notify(&dp_flow_genl_family, reply, info);
+ ovs_flow_free(flow, true);
  return 0;
 unlock:
  ovs_unlock();
-- 
1.7.1