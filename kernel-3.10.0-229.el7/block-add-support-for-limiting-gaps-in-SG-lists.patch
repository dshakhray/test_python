From dc9f3ae6a553d49f74058c34b19f9ee55683f4b9 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 27 Jun 2014 18:05:22 -0400
Subject: [block] add support for limiting gaps in SG lists

Message-id: <1403892324-21735-1-git-send-email-snitzer@redhat.com>
Patchwork-id: 85076
O-Subject: [RHEL7.1 PATCH 159/150] block: add support for limiting gaps in SG lists
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 66cb45aa41315d1d9972cada354fbdf7870d7714
Author: Jens Axboe <axboe@fb.com>
Date:   Tue Jun 24 16:22:24 2014 -0600

    block: add support for limiting gaps in SG lists

    Another restriction inherited for NVMe - those devices don't support
    SG lists that have "gaps" in them. Gaps refers to cases where the
    previous SG entry doesn't end on a page boundary. For NVMe, all SG
    entries must start at offset 0 (except the first) and end on a page
    boundary (except the last).

    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-merge.c b/block/blk-merge.c
index c61d3bd..f0aac59 100644
--- a/block/blk-merge.c
+++ b/block/blk-merge.c
@@ -529,6 +529,8 @@ int blk_attempt_req_merge(struct request_queue *q, struct request *rq,
 
 bool blk_rq_merge_ok(struct request *rq, struct bio *bio)
 {
+ struct request_queue *q = rq->q;
+
  if (!rq_mergeable(rq) || !bio_mergeable(bio))
   return false;
 
@@ -552,6 +554,14 @@ bool blk_rq_merge_ok(struct request *rq, struct bio *bio)
      !blk_write_same_mergeable(rq->bio, bio))
   return false;
 
+ if (q->queue_flags & (1 << QUEUE_FLAG_SG_GAPS)) {
+  struct bio_vec *bprev;
+
+  bprev = &rq->biotail->bi_io_vec[bio->bi_vcnt - 1];
+  if (bvec_gap_to_prev(bprev, bio->bi_io_vec[0].bv_offset))
+   return false;
+ }
+
  return true;
 }
 
diff --git a/fs/bio.c b/fs/bio.c
index 37f0add..dd90df7 100644
--- a/fs/bio.c
+++ b/fs/bio.c
@@ -647,6 +647,14 @@ static int __bio_add_page(struct request_queue *q, struct bio *bio, struct page
 
    goto done;
   }
+
+  /*
+   * If the queue doesn't support SG gaps and adding this
+   * offset would create a gap, disallow it.
+   */
+  if (q->queue_flags & (1 << QUEUE_FLAG_SG_GAPS) &&
+      bvec_gap_to_prev(prev, offset))
+   return 0;
  }
 
  if (bio->bi_vcnt >= bio->bi_max_vecs)
diff --git a/include/linux/bio.h b/include/linux/bio.h
index 0b7f38a..2f83ecb 100644
--- a/include/linux/bio.h
+++ b/include/linux/bio.h
@@ -129,6 +129,15 @@ static inline void *bio_data(struct bio *bio)
 #define BIO_SEG_BOUNDARY(q, b1, b2) \
  BIOVEC_SEG_BOUNDARY((q), __BVEC_END((b1)), __BVEC_START((b2)))
 
+/*
+ * Check if adding a bio_vec after bprv with offset would create a gap in
+ * the SG list. Most drivers don't care about this, but some do.
+ */
+static inline bool bvec_gap_to_prev(struct bio_vec *bprv, unsigned int offset)
+{
+ return offset || ((bprv->bv_offset + bprv->bv_len) & (PAGE_SIZE - 1));
+}
+
 #define bio_io_error(bio) bio_endio((bio), -EIO)
 
 /*
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 20e649b..e44a7d6 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -557,6 +557,7 @@ struct request_queue {
 #define QUEUE_FLAG_INIT_DONE   20 /* queue is initialized */
 #define QUEUE_FLAG_UNPRIV_SGIO 21 /* SG_IO free for unprivileged users */
 #define QUEUE_FLAG_NO_SG_MERGE 22 /* don't attempt to merge SG segments*/
+#define QUEUE_FLAG_SG_GAPS     23 /* queue doesn't support SG gaps */
 
 #define QUEUE_FLAG_DEFAULT ((1 << QUEUE_FLAG_IO_STAT) |  \
      (1 << QUEUE_FLAG_STACKABLE) | \
-- 
1.7.1