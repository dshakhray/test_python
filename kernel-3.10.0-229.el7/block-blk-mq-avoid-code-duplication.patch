From 39469171cf1b22bd98e9db5220acd163886e3b66 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:09 -0400
Subject: [block] blk-mq: avoid code duplication

Message-id: <1402670238-13916-82-git-send-email-snitzer@redhat.com>
Patchwork-id: 83847
O-Subject: [RHEL7.1 PATCH 081/150] blk-mq: avoid code duplication
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 624dbe47541643b72868a59b2c0059bb53dc923f
Author: Ming Lei <tom.leiming@gmail.com>
Date:   Tue May 27 23:35:13 2014 +0800

    blk-mq: avoid code duplication

    blk_mq_exit_hw_queues() and blk_mq_free_hw_queues()
    are introduced to avoid code duplication.

    Signed-off-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index dad22a9..0785175 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1523,11 +1523,43 @@ static int blk_mq_hctx_notify(void *data, unsigned long action,
  return NOTIFY_OK;
 }
 
+static void blk_mq_exit_hw_queues(struct request_queue *q,
+  struct blk_mq_tag_set *set, int nr_queue)
+{
+ struct blk_mq_hw_ctx *hctx;
+ unsigned int i;
+
+ queue_for_each_hw_ctx(q, hctx, i) {
+  if (i == nr_queue)
+   break;
+
+  if (set->ops->exit_hctx)
+   set->ops->exit_hctx(hctx, i);
+
+  blk_mq_unregister_cpu_notifier(&hctx->cpu_notifier);
+  kfree(hctx->ctxs);
+  blk_mq_free_bitmap(&hctx->ctx_map);
+ }
+
+}
+
+static void blk_mq_free_hw_queues(struct request_queue *q,
+  struct blk_mq_tag_set *set)
+{
+ struct blk_mq_hw_ctx *hctx;
+ unsigned int i;
+
+ queue_for_each_hw_ctx(q, hctx, i) {
+  free_cpumask_var(hctx->cpumask);
+  set->ops->free_hctx(hctx, i);
+ }
+}
+
 static int blk_mq_init_hw_queues(struct request_queue *q,
   struct blk_mq_tag_set *set)
 {
  struct blk_mq_hw_ctx *hctx;
- unsigned int i, j;
+ unsigned int i;
 
  /*
   * Initialize hardware queues
@@ -1579,17 +1611,7 @@ static int blk_mq_init_hw_queues(struct request_queue *q,
  /*
   * Init failed
   */
- queue_for_each_hw_ctx(q, hctx, j) {
-  if (i == j)
-   break;
-
-  if (set->ops->exit_hctx)
-   set->ops->exit_hctx(hctx, j);
-
-  blk_mq_unregister_cpu_notifier(&hctx->cpu_notifier);
-  kfree(hctx->ctxs);
-  blk_mq_free_bitmap(&hctx->ctx_map);
- }
+ blk_mq_exit_hw_queues(q, set, i);
 
  return 1;
 }
@@ -1838,21 +1860,12 @@ EXPORT_SYMBOL(blk_mq_init_queue);
 
 void blk_mq_free_queue(struct request_queue *q)
 {
- struct blk_mq_hw_ctx *hctx;
- int i;
+ struct blk_mq_tag_set *set = q->tag_set;
 
  blk_mq_del_queue_tag_set(q);
 
- queue_for_each_hw_ctx(q, hctx, i) {
-  blk_mq_tag_idle(hctx);
-  kfree(hctx->ctxs);
-  blk_mq_free_bitmap(&hctx->ctx_map);
-  blk_mq_unregister_cpu_notifier(&hctx->cpu_notifier);
-  if (q->mq_ops->exit_hctx)
-   q->mq_ops->exit_hctx(hctx, i);
-  free_cpumask_var(hctx->cpumask);
-  q->mq_ops->free_hctx(hctx, i);
- }
+ blk_mq_exit_hw_queues(q, set, set->nr_hw_queues);
+ blk_mq_free_hw_queues(q, set);
 
  free_percpu(q->queue_ctx);
  kfree(q->queue_hw_ctx);
-- 
1.7.1