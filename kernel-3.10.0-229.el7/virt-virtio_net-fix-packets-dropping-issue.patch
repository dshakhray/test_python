From c1d6aa100a15e0d385c02b9bae74b1ece5be2538 Mon Sep 17 00:00:00 2001
From: Marcel Apfelbaum <marcel.a@redhat.com>
Date: Mon, 8 Sep 2014 04:08:20 -0400
Subject: [virt] virtio_net: fix packets dropping issue

Message-id: <1410149300-15207-1-git-send-email-marcel.a@redhat.com>
Patchwork-id: 91628
O-Subject: [RHEL7.1 PATCH] virtio-net: fix packets dropping issue
Bugzilla: 1131733
RH-Acked-by: Jason Wang <jasowang@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Michael S. Tsirkin <mst@redhat.com>

BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1131733
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7926438
Upstream commit: none - this is a fix to the backport of
                 f121159d72091f25afb22007c833e60a6845e912.

The following backport causes packets dropping
and it wasn't possible to communicate using vhost-user.
The root cause is calling page_to_skb with len parameter 0.

    Commit 30f0ce96e19dd0c03567f2efbfb3cd7c3576bf6b
    Date:   Fri Jan 10 10:02:20 2014 -0500

    [virt] virtio-net: make all RX paths handle errors consistently

    receive mergeable now handles errors internally.
    Do same for big and small packet paths, otherwise
    the logic is too hard to follow.
    [...]
    (cherry picked from commit f121159d72091f25afb22007c833e60a6845e912)

Fixed by calling page_to_skb with the right len parameter.

Signed-off-by: Marcel Apfelbaum <marcel.a@redhat.com>
---
Added Jason and original reviewers to cc.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 72d3c0f..f6b06f8 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -309,10 +309,10 @@ static struct sk_buff *receive_small(void *buf, unsigned int len)
 
 static struct sk_buff *receive_big(struct net_device *dev,
        struct receive_queue *rq,
-       void *buf)
+       void *buf, unsigned int len)
 {
  struct page *page = buf;
- struct sk_buff *skb = page_to_skb(rq, page, 0);
+ struct sk_buff *skb = page_to_skb(rq, page, len);
 
  if (unlikely(!skb))
   goto err;
@@ -402,7 +402,7 @@ static void receive_buf(struct receive_queue *rq, void *buf, unsigned int len)
  if (vi->mergeable_rx_bufs)
   skb = receive_mergeable(dev, rq, buf, len);
  else if (vi->big_packets)
-  skb = receive_big(dev, rq, buf);
+  skb = receive_big(dev, rq, buf, len);
  else
   skb = receive_small(buf, len);
 
-- 
1.7.1