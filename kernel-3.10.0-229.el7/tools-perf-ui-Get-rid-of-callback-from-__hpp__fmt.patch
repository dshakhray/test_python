From 8541fe5d27cad67951bcf0287e003c7dbd3d9450 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:07:43 -0400
Subject: [tools] perf/ui: Get rid of callback from __hpp__fmt()

Message-id: <1410181752-25631-219-git-send-email-jolsa@redhat.com>
Patchwork-id: 91831
O-Subject: [PATCH RHEL7.1 BZ1134356 218/307] perf ui: Get rid of callback from __hpp__fmt()
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit fb821c9e7135e324ff6d50d030352718a80364b4
Author: Namhyung Kim <namhyung@kernel.org>
Date: Mon Mar 3 17:05:19 2014 +0900

description
===========
The callback was used by TUI for determining color of folded sign
using percent of first field/column. But it cannot be used anymore
since it now support dynamic reordering of output field.

So move the logic to the hist_browser__show_entry().
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/ui/browsers/hists.c b/tools/perf/ui/browsers/hists.c
index 847de11..37c5188 100644
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@ -616,35 +616,6 @@ struct hpp_arg {
  bool current_entry;
 };
 
-static int __hpp__overhead_callback(struct perf_hpp *hpp, bool front)
-{
- struct hpp_arg *arg = hpp->ptr;
-
- if (arg->current_entry && arg->b->navkeypressed)
-  ui_browser__set_color(arg->b, HE_COLORSET_SELECTED);
- else
-  ui_browser__set_color(arg->b, HE_COLORSET_NORMAL);
-
- if (front) {
-  if (!symbol_conf.use_callchain)
-   return 0;
-
-  slsmg_printf("%c ", arg->folded_sign);
-  return 2;
- }
-
- return 0;
-}
-
-static int __hpp__color_callback(struct perf_hpp *hpp, bool front __maybe_unused)
-{
- struct hpp_arg *arg = hpp->ptr;
-
- if (!arg->current_entry || !arg->b->navkeypressed)
-  ui_browser__set_color(arg->b, HE_COLORSET_NORMAL);
- return 0;
-}
-
 static int __hpp__slsmg_color_printf(struct perf_hpp *hpp, const char *fmt, ...)
 {
  struct hpp_arg *arg = hpp->ptr;
@@ -665,7 +636,7 @@ static int __hpp__slsmg_color_printf(struct perf_hpp *hpp, const char *fmt, ...)
  return ret;
 }
 
-#define __HPP_COLOR_PERCENT_FN(_type, _field, _cb)   \
+#define __HPP_COLOR_PERCENT_FN(_type, _field)    \
 static u64 __hpp_get_##_field(struct hist_entry *he)   \
 {         \
  return he->stat._field;      \
@@ -676,15 +647,15 @@ hist_browser__hpp_color_##_type(struct perf_hpp_fmt *fmt __maybe_unused,\
     struct perf_hpp *hpp,   \
     struct hist_entry *he)   \
 {         \
- return __hpp__fmt(hpp, he, __hpp_get_##_field, _cb, " %6.2f%%", \
+ return __hpp__fmt(hpp, he, __hpp_get_##_field, " %6.2f%%", \
      __hpp__slsmg_color_printf, true);  \
 }
 
-__HPP_COLOR_PERCENT_FN(overhead, period, __hpp__overhead_callback)
-__HPP_COLOR_PERCENT_FN(overhead_sys, period_sys, __hpp__color_callback)
-__HPP_COLOR_PERCENT_FN(overhead_us, period_us, __hpp__color_callback)
-__HPP_COLOR_PERCENT_FN(overhead_guest_sys, period_guest_sys, __hpp__color_callback)
-__HPP_COLOR_PERCENT_FN(overhead_guest_us, period_guest_us, __hpp__color_callback)
+__HPP_COLOR_PERCENT_FN(overhead, period)
+__HPP_COLOR_PERCENT_FN(overhead_sys, period_sys)
+__HPP_COLOR_PERCENT_FN(overhead_us, period_us)
+__HPP_COLOR_PERCENT_FN(overhead_guest_sys, period_guest_sys)
+__HPP_COLOR_PERCENT_FN(overhead_guest_us, period_guest_us)
 
 #undef __HPP_COLOR_PERCENT_FN
 
@@ -729,7 +700,7 @@ static int hist_browser__show_entry(struct hist_browser *browser,
 
  if (row_offset == 0) {
   struct hpp_arg arg = {
-   .b   = &browser->b,
+   .b  = &browser->b,
    .folded_sign = folded_sign,
    .current_entry = current_entry,
   };
@@ -742,11 +713,24 @@ static int hist_browser__show_entry(struct hist_browser *browser,
   ui_browser__gotorc(&browser->b, row, 0);
 
   perf_hpp__for_each_format(fmt) {
-   if (!first) {
+   if (current_entry && browser->b.navkeypressed) {
+    ui_browser__set_color(&browser->b,
+            HE_COLORSET_SELECTED);
+   } else {
+    ui_browser__set_color(&browser->b,
+            HE_COLORSET_NORMAL);
+   }
+
+   if (first) {
+    if (symbol_conf.use_callchain) {
+     slsmg_printf("%c ", folded_sign);
+     width -= 2;
+    }
+    first = false;
+   } else {
     slsmg_printf("  ");
     width -= 2;
    }
-   first = false;
 
    if (fmt->color) {
     width -= fmt->color(fmt, &hpp, entry);
diff --git a/tools/perf/ui/gtk/hists.c b/tools/perf/ui/gtk/hists.c
index d5c336e..2237245 100644
--- a/tools/perf/ui/gtk/hists.c
+++ b/tools/perf/ui/gtk/hists.c
@@ -43,7 +43,7 @@ static int perf_gtk__hpp_color_##_type(struct perf_hpp_fmt *fmt __maybe_unused,
            struct perf_hpp *hpp,   \
            struct hist_entry *he)   \
 {          \
- return __hpp__fmt(hpp, he, he_get_##_field, NULL, " %6.2f%%",  \
+ return __hpp__fmt(hpp, he, he_get_##_field, " %6.2f%%",   \
      __percent_color_snprintf, true);   \
 }
 
diff --git a/tools/perf/ui/hist.c b/tools/perf/ui/hist.c
index 400437e..e7ac794 100644
--- a/tools/perf/ui/hist.c
+++ b/tools/perf/ui/hist.c
@@ -16,20 +16,15 @@
 })
 
 int __hpp__fmt(struct perf_hpp *hpp, struct hist_entry *he,
-        hpp_field_fn get_field, hpp_callback_fn callback,
-        const char *fmt, hpp_snprint_fn print_fn, bool fmt_percent)
+        hpp_field_fn get_field, const char *fmt,
+        hpp_snprint_fn print_fn, bool fmt_percent)
 {
- int ret = 0;
+ int ret;
  struct hists *hists = he->hists;
  struct perf_evsel *evsel = hists_to_evsel(hists);
  char *buf = hpp->buf;
  size_t size = hpp->size;
 
- if (callback) {
-  ret = callback(hpp, true);
-  advance_hpp(hpp, ret);
- }
-
  if (fmt_percent) {
   double percent = 0.0;
   u64 total = hists__total_period(hists);
@@ -37,9 +32,9 @@ int __hpp__fmt(struct perf_hpp *hpp, struct hist_entry *he,
   if (total)
    percent = 100.0 * get_field(he) / total;
 
-  ret += hpp__call_print_fn(hpp, print_fn, fmt, percent);
+  ret = hpp__call_print_fn(hpp, print_fn, fmt, percent);
  } else
-  ret += hpp__call_print_fn(hpp, print_fn, fmt, get_field(he));
+  ret = hpp__call_print_fn(hpp, print_fn, fmt, get_field(he));
 
  if (perf_evsel__is_group_event(evsel)) {
   int prev_idx, idx_delta;
@@ -99,13 +94,6 @@ int __hpp__fmt(struct perf_hpp *hpp, struct hist_entry *he,
   }
  }
 
- if (callback) {
-  int __ret = callback(hpp, false);
-
-  advance_hpp(hpp, __ret);
-  ret += __ret;
- }
-
  /*
   * Restore original buf and size as it's where caller expects
   * the result will be saved.
@@ -235,7 +223,7 @@ static u64 he_get_##_field(struct hist_entry *he)    \
 static int hpp__color_##_type(struct perf_hpp_fmt *fmt __maybe_unused,  \
          struct perf_hpp *hpp, struct hist_entry *he)  \
 {          \
- return __hpp__fmt(hpp, he, he_get_##_field, NULL, " %6.2f%%",  \
+ return __hpp__fmt(hpp, he, he_get_##_field, " %6.2f%%",   \
      hpp_color_scnprintf, true);    \
 }
 
@@ -244,7 +232,7 @@ static int hpp__entry_##_type(struct perf_hpp_fmt *_fmt __maybe_unused,  \
          struct perf_hpp *hpp, struct hist_entry *he)  \
 {          \
  const char *fmt = symbol_conf.field_sep ? " %.2f" : " %6.2f%%";  \
- return __hpp__fmt(hpp, he, he_get_##_field, NULL, fmt,   \
+ return __hpp__fmt(hpp, he, he_get_##_field, fmt,   \
      hpp_entry_scnprintf, true);    \
 }
 
@@ -264,7 +252,7 @@ static int hpp__entry_##_type(struct perf_hpp_fmt *_fmt __maybe_unused,  \
          struct perf_hpp *hpp, struct hist_entry *he)  \
 {          \
  const char *fmt = symbol_conf.field_sep ? " %"PRIu64 : " %11"PRIu64; \
- return __hpp__fmt(hpp, he, he_get_raw_##_field, NULL, fmt,  \
+ return __hpp__fmt(hpp, he, he_get_raw_##_field, fmt,   \
      hpp_entry_scnprintf, false);    \
 }
 
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index e76d323..76bb72e 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -203,8 +203,8 @@ typedef int (*hpp_callback_fn)(struct perf_hpp *hpp, bool front);
 typedef int (*hpp_snprint_fn)(struct perf_hpp *hpp, const char *fmt, ...);
 
 int __hpp__fmt(struct perf_hpp *hpp, struct hist_entry *he,
-        hpp_field_fn get_field, hpp_callback_fn callback,
-        const char *fmt, hpp_snprint_fn print_fn, bool fmt_percent);
+        hpp_field_fn get_field, const char *fmt,
+        hpp_snprint_fn print_fn, bool fmt_percent);
 
 static inline void advance_hpp(struct perf_hpp *hpp, int inc)
 {
-- 
1.7.1