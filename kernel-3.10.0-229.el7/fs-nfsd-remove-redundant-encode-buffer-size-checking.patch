From e4c22f0984bd08961b2092cbfa36f98ed3029f7d Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:51:00 -0400
Subject: [fs] nfsd: remove redundant encode buffer size checking

Message-id: <1403560314-32525-119-git-send-email-bfields@redhat.com>
Patchwork-id: 84506
O-Subject: [Patch RHEL7 118/172] nfsd4: remove redundant encode buffer size checking
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

Now that all op encoders can handle running out of space, we no longer
need to check the remaining size for every operation; only nonidempotent
operations need that check, and that can be done by
nfsd4_check_resp_size.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: ea8d7720b274607f48fb524337254a9c43dbc2df
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4proc.c b/fs/nfsd/nfs4proc.c
index a043669..9185e40 100644
--- a/fs/nfsd/nfs4proc.c
+++ b/fs/nfsd/nfs4proc.c
@@ -1278,7 +1278,6 @@ nfsd4_proc_compound(struct svc_rqst *rqstp,
  struct nfsd4_compound_state *cstate = &resp->cstate;
  struct svc_fh *current_fh = &cstate->current_fh;
  struct svc_fh *save_fh = &cstate->save_fh;
- int  slack_bytes;
  u32  plen = 0;
  __be32  status;
 
@@ -1332,19 +1331,6 @@ nfsd4_proc_compound(struct svc_rqst *rqstp,
    goto encode_op;
   }
 
-  /* We must be able to encode a successful response to
-   * this operation, with enough room left over to encode a
-   * failed response to the next operation.  If we don't
-   * have enough room, fail with ERR_RESOURCE.
-   */
-  slack_bytes = (char *)resp->xdr.end - (char *)resp->xdr.p;
-  if (slack_bytes < COMPOUND_SLACK_SPACE
-    + COMPOUND_ERR_SLACK_SPACE) {
-   BUG_ON(slack_bytes < COMPOUND_ERR_SLACK_SPACE);
-   op->status = nfserr_resource;
-   goto encode_op;
-  }
-
   opdesc = OPDESC(op);
 
   if (!current_fh->fh_dentry) {
diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 89c65a3..df643e0 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -3753,20 +3753,24 @@ static nfsd4_enc nfsd4_enc_ops[] = {
 __be32 nfsd4_check_resp_size(struct nfsd4_compoundres *resp, u32 pad)
 {
  struct xdr_buf *buf = &resp->rqstp->rq_res;
- struct nfsd4_session *session = NULL;
+ struct nfsd4_session *session = resp->cstate.session;
  struct nfsd4_slot *slot = resp->cstate.slot;
+ int slack_bytes = (char *)resp->xdr.end - (char *)resp->xdr.p;
 
- if (!nfsd4_has_session(&resp->cstate))
-  return 0;
+ if (nfsd4_has_session(&resp->cstate)) {
 
- session = resp->cstate.session;
+  if (buf->len + pad > session->se_fchannel.maxresp_sz)
+   return nfserr_rep_too_big;
 
- if (buf->len + pad > session->se_fchannel.maxresp_sz)
-  return nfserr_rep_too_big;
+  if ((slot->sl_flags & NFSD4_SLOT_CACHETHIS) &&
+      buf->len + pad > session->se_fchannel.maxresp_cached)
+   return nfserr_rep_too_big_to_cache;
+ }
 
- if ((slot->sl_flags & NFSD4_SLOT_CACHETHIS) &&
-     buf->len + pad > session->se_fchannel.maxresp_cached)
-  return nfserr_rep_too_big_to_cache;
+ if (pad > slack_bytes) {
+  WARN_ON_ONCE(nfsd4_has_session(&resp->cstate));
+  return nfserr_resource;
+ }
 
  return 0;
 }
-- 
1.7.1