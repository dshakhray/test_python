From c63bc6d98fbc9a27cc36df083d48209988ad729e Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:46 -0400
Subject: [fs] ext4: fix COLLAPSE_RANGE failure with 1KB block size

Message-id: <1414059176-6044-23-git-send-email-lczerner@redhat.com>
Patchwork-id: 98301
O-Subject: [RHEL 7.1 PATCH 22/32] ext4: fix COLLAPSE_RANGE failure with 1KB block size
Bugzilla: 1150171

From: Namjae Jeon <namjae.jeon@samsung.com>

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit a8680e0d5efd46aa54d7085e5b4a268f726922c7

 When formatting with 1KB or 2KB(not aligned with PAGE SIZE) block
 size, xfstests generic/075 and 091 are failing. The offset supplied to
 function truncate_pagecache_range is block size aligned. In this
 function start offset is re-aligned to PAGE_SIZE by rounding_up to the
 next page boundary.  Due to this rounding up, old data remains in the
 page cache when blocksize is less than page size and start offset is
 not aligned with page size.  In case of collapse range, we need to
 align start offset to page size boundary by doing a round down
 operation instead of round up.

 Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
 Signed-off-by: Ashish Sangwan <a.sangwan@samsung.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 7fafdff..37c185c 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -5384,7 +5384,7 @@ int ext4_collapse_range(struct inode *inode, loff_t offset, loff_t len)
  ext4_lblk_t punch_start, punch_stop;
  handle_t *handle;
  unsigned int credits;
- loff_t new_size;
+ loff_t new_size, ioffset;
  int ret;
 
  /* Collapse range works only on fs block size aligned offsets. */
@@ -5407,8 +5407,15 @@ int ext4_collapse_range(struct inode *inode, loff_t offset, loff_t len)
    return ret;
  }
 
+ /*
+  * Need to round down offset to be aligned with page size boundary
+  * for page size > block size.
+  */
+ ioffset = round_down(offset, PAGE_SIZE);
+
  /* Write out all dirty pages */
- ret = filemap_write_and_wait_range(inode->i_mapping, offset, LLONG_MAX);
+ ret = filemap_write_and_wait_range(inode->i_mapping, ioffset,
+        LLONG_MAX);
  if (ret)
   return ret;
 
@@ -5436,7 +5443,7 @@ int ext4_collapse_range(struct inode *inode, loff_t offset, loff_t len)
   goto out_mutex;
  }
 
- truncate_pagecache(inode, offset);
+ truncate_pagecache(inode, ioffset);
 
  /* Wait for existing dio to complete */
  ext4_inode_block_unlocked_dio(inode);
-- 
1.7.1