From 2ab563891f4fdce2e8fbae9786c81b3b03084b9e Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Wed, 18 Jun 2014 10:27:51 -0400
Subject: [s390] uaccess: test if current->mm is set before walking page tables

Message-id: <1403087280-902-6-git-send-email-brueckner@redhat.com>
Patchwork-id: 84253
O-Subject: [RHEL7.1 PATCH 05/14] [s390] s390/uaccess: test if current->mm is set before walking page tables
Bugzilla: 1099147
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit b03b467944b3e88a36a33b5429425c42dbd5b8a0
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Commit: Martin Schwidefsky <schwidefsky@de.ibm.com>

    s390/uaccess: test if current->mm is set before walking page tables

    If get_fs() == USER_DS we better test if current->mm is not zero before
    walking page tables.
    The page table walk code would try to lock mm->page_table_lock, however
    if mm is zero this might crash.

    Now it is arguably incorrect trying to access userspace if current->mm
    is zero, however we have seen that and s390 would be the only architecture
    which would crash in such a case.
    So we better make the page table walk code a bit more robust and report
    always a fault instead.

    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1099147
https://bugzilla.redhat.com/show_bug.cgi?id=1099147

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version v3.14-rc1
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=b03b467944b3e88a36a33b5429425c42dbd5b8a0

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7588402

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/lib/uaccess_pt.c b/arch/s390/lib/uaccess_pt.c
index b74ca95..d5d76dd 100644
--- a/arch/s390/lib/uaccess_pt.c
+++ b/arch/s390/lib/uaccess_pt.c
@@ -153,6 +153,8 @@ static __always_inline size_t __user_copy_pt(unsigned long uaddr, void *kptr,
  unsigned long offset, done, size, kaddr;
  void *from, *to;
 
+ if (!mm)
+  return n;
  done = 0;
 retry:
  spin_lock(&mm->page_table_lock);
@@ -262,6 +264,8 @@ static size_t strnlen_user_pt(size_t count, const char __user *src)
   return 0;
  if (segment_eq(get_fs(), KERNEL_DS))
   return strnlen_kernel(count, src);
+ if (!mm)
+  return 0;
  done = 0;
 retry:
  spin_lock(&mm->page_table_lock);
@@ -323,6 +327,8 @@ static size_t copy_in_user_pt(size_t n, void __user *to,
 
  if (segment_eq(get_fs(), KERNEL_DS))
   return copy_in_kernel(n, to, from);
+ if (!mm)
+  return n;
  done = 0;
 retry:
  spin_lock(&mm->page_table_lock);
@@ -411,6 +417,8 @@ int futex_atomic_op_pt(int op, u32 __user *uaddr, int oparg, int *old)
 
  if (segment_eq(get_fs(), KERNEL_DS))
   return __futex_atomic_op_pt(op, uaddr, oparg, old);
+ if (unlikely(!current->mm))
+  return -EFAULT;
  spin_lock(&current->mm->page_table_lock);
  uaddr = (u32 __force __user *)
   __dat_user_addr((__force unsigned long) uaddr, 1);
@@ -448,6 +456,8 @@ int futex_atomic_cmpxchg_pt(u32 *uval, u32 __user *uaddr,
 
  if (segment_eq(get_fs(), KERNEL_DS))
   return __futex_atomic_cmpxchg_pt(uval, uaddr, oldval, newval);
+ if (unlikely(!current->mm))
+  return -EFAULT;
  spin_lock(&current->mm->page_table_lock);
  uaddr = (u32 __force __user *)
   __dat_user_addr((__force unsigned long) uaddr, 1);
-- 
1.7.1