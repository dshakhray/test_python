From 786ec84be43accd490e7b1313a1df78746dc57d1 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:39:42 -0400
Subject: [virt] kvm/x86: Fix wrong/stuck PMU when guest does not use PMI

Message-id: <1406040016-3289-188-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86266
O-Subject: [RHEL7 PATCH v2 187/221] KVM: x86: Fix wrong/stuck PMU when guest does not use PMI
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Nadav Amit <namit@cs.technion.ac.il>

If a guest enables a performance counter but does not enable PMI, the
hypervisor currently does not reprogram the performance counter once it
overflows.  As a result the host performance counter is kept with the original
sampling period which was configured according to the value of the guest's
counter when the counter was enabled.

Such behaviour can cause very bad consequences. The most distrubing one can
cause the guest not to make any progress at all, and keep exiting due to host
PMI before any guest instructions is exeucted. This situation occurs when the
performance counter holds a very high value when the guest enables the
performance counter. As a result the host's sampling period is configured to be
very short. The host then never reconfigures the sampling period and get stuck
at entry->PMI->exit loop. We encountered such a scenario in our experiments.

The solution is to reprogram the counter even if the guest does not use PMI.

Signed-off-by: Nadav Amit <namit@cs.technion.ac.il>
Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
(cherry picked from commit 671bd9934a861288a248b051751061b11654aef9)
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/pmu.c b/arch/x86/kvm/pmu.c
index 5c4f631..cbecaa9 100644
--- a/arch/x86/kvm/pmu.c
+++ b/arch/x86/kvm/pmu.c
@@ -108,7 +108,10 @@ static void kvm_perf_overflow(struct perf_event *perf_event,
 {
  struct kvm_pmc *pmc = perf_event->overflow_handler_context;
  struct kvm_pmu *pmu = &pmc->vcpu->arch.pmu;
- __set_bit(pmc->idx, (unsigned long *)&pmu->global_status);
+ if (!test_and_set_bit(pmc->idx, (unsigned long *)&pmu->reprogram_pmi)) {
+  __set_bit(pmc->idx, (unsigned long *)&pmu->global_status);
+  kvm_make_request(KVM_REQ_PMU, pmc->vcpu);
+ }
 }
 
 static void kvm_perf_overflow_intr(struct perf_event *perf_event,
@@ -117,7 +120,7 @@ static void kvm_perf_overflow_intr(struct perf_event *perf_event,
  struct kvm_pmc *pmc = perf_event->overflow_handler_context;
  struct kvm_pmu *pmu = &pmc->vcpu->arch.pmu;
  if (!test_and_set_bit(pmc->idx, (unsigned long *)&pmu->reprogram_pmi)) {
-  kvm_perf_overflow(perf_event, data, regs);
+  __set_bit(pmc->idx, (unsigned long *)&pmu->global_status);
   kvm_make_request(KVM_REQ_PMU, pmc->vcpu);
   /*
    * Inject PMI. If vcpu was in a guest mode during NMI PMI
-- 
1.7.1