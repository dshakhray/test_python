From 6e0d92d2199a102c164078695b80134da2cdf18a Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:50:51 -0400
Subject: [fs] nfsd: remove ADJUST_ARGS

Message-id: <1403560314-32525-110-git-send-email-bfields@redhat.com>
Patchwork-id: 84538
O-Subject: [Patch RHEL7 109/172] nfsd4: remove ADJUST_ARGS
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

It's just uninteresting debugging code at this point.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: f46d382a749874e1b29cfb34d4ccf283eae4fffa
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 5064cb5..e9abf5f 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -1750,7 +1750,6 @@ static void write_cinfo(__be32 **p, struct nfsd4_change_info *c)
  p = xdr_reserve_space(&resp->xdr, nbytes);  \
  BUG_ON(!p);      \
 } while (0)
-#define ADJUST_ARGS()  WARN_ON_ONCE(p != resp->xdr.p) \
 
 /* Encode as an array of strings the string given with components
  * separated @sep, escaped with esc_enter and esc_exit.
@@ -2744,7 +2743,6 @@ nfsd4_encode_stateid(struct nfsd4_compoundres *resp, stateid_t *sid)
  RESERVE_SPACE(sizeof(stateid_t));
  WRITE32(sid->si_generation);
  WRITEMEM(&sid->si_opaque, sizeof(stateid_opaque_t));
- ADJUST_ARGS();
 }
 
 static __be32
@@ -2756,7 +2754,6 @@ nfsd4_encode_access(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_
   RESERVE_SPACE(8);
   WRITE32(access->ac_supported);
   WRITE32(access->ac_resp_access);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -2771,7 +2768,6 @@ static __be32 nfsd4_encode_bind_conn_to_session(struct nfsd4_compoundres *resp,
   WRITE32(bcts->dir);
   /* Sorry, we do not yet support RDMA over 4.1: */
   WRITE32(0);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -2794,7 +2790,6 @@ nfsd4_encode_commit(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_
  if (!nfserr) {
   RESERVE_SPACE(NFS4_VERIFIER_SIZE);
   WRITEMEM(commit->co_verf.data, NFS4_VERIFIER_SIZE);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -2810,7 +2805,6 @@ nfsd4_encode_create(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_
   WRITE32(2);
   WRITE32(create->cr_bmval[0]);
   WRITE32(create->cr_bmval[1]);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -2842,7 +2836,6 @@ nfsd4_encode_getfh(struct nfsd4_compoundres *resp, __be32 nfserr, struct svc_fh
   RESERVE_SPACE(len + 4);
   WRITE32(len);
   WRITEMEM(&fhp->fh_handle.fh_base, len);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -2870,7 +2863,6 @@ nfsd4_encode_lock_denied(struct nfsd4_compoundres *resp, struct nfsd4_lock_denie
   WRITE64((u64)0); /* clientid */
   WRITE32(0); /* length of owner name */
  }
- ADJUST_ARGS();
 }
 
 static __be32
@@ -2910,7 +2902,6 @@ nfsd4_encode_link(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_li
  if (!nfserr) {
   RESERVE_SPACE(20);
   write_cinfo(&p, &link->li_cinfo);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -2932,7 +2923,6 @@ nfsd4_encode_open(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_op
  WRITE32(open->op_bmval[0]);
  WRITE32(open->op_bmval[1]);
  WRITE32(open->op_delegate_type);
- ADJUST_ARGS();
 
  switch (open->op_delegate_type) {
  case NFS4_OPEN_DELEGATE_NONE:
@@ -2949,7 +2939,6 @@ nfsd4_encode_open(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_op
   WRITE32(0);
   WRITE32(0);
   WRITE32(0);   /* XXX: is NULL principal ok? */
-  ADJUST_ARGS();
   break;
  case NFS4_OPEN_DELEGATE_WRITE:
   nfsd4_encode_stateid(resp, &open->op_delegate_stateid);
@@ -2970,7 +2959,6 @@ nfsd4_encode_open(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_op
   WRITE32(0);
   WRITE32(0);
   WRITE32(0);   /* XXX: is NULL principal ok? */
-  ADJUST_ARGS();
   break;
  case NFS4_OPEN_DELEGATE_NONE_EXT: /* 4.1 */
   switch (open->op_why_no_deleg) {
@@ -2984,7 +2972,6 @@ nfsd4_encode_open(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_op
    RESERVE_SPACE(4);
    WRITE32(open->op_why_no_deleg);
   }
-  ADJUST_ARGS();
   break;
  default:
   BUG();
@@ -3066,7 +3053,6 @@ nfsd4_encode_read(struct nfsd4_compoundres *resp, __be32 nfserr,
 
  WRITE32(eof);
  WRITE32(maxcount);
- ADJUST_ARGS();
  resp->xdr.buf->head[0].iov_len = (char *)p
     - (char *)resp->xdr.buf->head[0].iov_base;
  resp->xdr.buf->page_len = maxcount;
@@ -3080,7 +3066,6 @@ nfsd4_encode_read(struct nfsd4_compoundres *resp, __be32 nfserr,
   WRITE32(0);
   resp->xdr.buf->tail[0].iov_base += maxcount&3;
   resp->xdr.buf->tail[0].iov_len = 4 - (maxcount&3);
-  ADJUST_ARGS();
  }
  return 0;
 }
@@ -3121,7 +3106,6 @@ nfsd4_encode_readlink(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd
  }
 
  WRITE32(maxcount);
- ADJUST_ARGS();
  resp->xdr.buf->head[0].iov_len = (char *)p
     - (char *)resp->xdr.buf->head[0].iov_base;
  resp->xdr.buf->page_len = maxcount;
@@ -3135,7 +3119,6 @@ nfsd4_encode_readlink(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd
   WRITE32(0);
   resp->xdr.buf->tail[0].iov_base += maxcount&3;
   resp->xdr.buf->tail[0].iov_len = 4 - (maxcount&3);
-  ADJUST_ARGS();
  }
  return 0;
 }
@@ -3162,7 +3145,6 @@ nfsd4_encode_readdir(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4
  /* XXX: Following NFSv3, we ignore the READDIR verifier for now. */
  WRITE32(0);
  WRITE32(0);
- ADJUST_ARGS();
  resp->xdr.buf->head[0].iov_len = ((char *)resp->xdr.p)
     - (char *)resp->xdr.buf->head[0].iov_base;
  tailbase = p;
@@ -3233,7 +3215,6 @@ nfsd4_encode_remove(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_
  if (!nfserr) {
   RESERVE_SPACE(20);
   write_cinfo(&p, &remove->rm_cinfo);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -3247,7 +3228,6 @@ nfsd4_encode_rename(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_
   RESERVE_SPACE(40);
   write_cinfo(&p, &rename->rn_sinfo);
   write_cinfo(&p, &rename->rn_tinfo);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -3287,7 +3267,6 @@ nfsd4_do_encode_secinfo(struct nfsd4_compoundres *resp,
  supported = 0;
  RESERVE_SPACE(4);
  flavorsp = p++;  /* to be backfilled later */
- ADJUST_ARGS();
 
  for (i = 0; i < nflavs; i++) {
   rpc_authflavor_t pf = flavs[i].pseudoflavor;
@@ -3301,12 +3280,10 @@ nfsd4_do_encode_secinfo(struct nfsd4_compoundres *resp,
    WRITEMEM(info.oid.data, info.oid.len);
    WRITE32(info.qop);
    WRITE32(info.service);
-   ADJUST_ARGS();
   } else if (pf < RPC_AUTH_MAXFLAVOR) {
    supported++;
    RESERVE_SPACE(4);
    WRITE32(pf);
-   ADJUST_ARGS();
   } else {
    if (report)
     pr_warn("NFS: SECINFO: security flavor %u "
@@ -3360,7 +3337,6 @@ nfsd4_encode_setattr(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4
   WRITE32(setattr->sa_bmval[1]);
   WRITE32(setattr->sa_bmval[2]);
  }
- ADJUST_ARGS();
  return nfserr;
 }
 
@@ -3373,13 +3349,11 @@ nfsd4_encode_setclientid(struct nfsd4_compoundres *resp, __be32 nfserr, struct n
   RESERVE_SPACE(8 + NFS4_VERIFIER_SIZE);
   WRITEMEM(&scd->se_clientid, 8);
   WRITEMEM(&scd->se_confirm, NFS4_VERIFIER_SIZE);
-  ADJUST_ARGS();
  }
  else if (nfserr == nfserr_clid_inuse) {
   RESERVE_SPACE(8);
   WRITE32(0);
   WRITE32(0);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -3394,7 +3368,6 @@ nfsd4_encode_write(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd4_w
   WRITE32(write->wr_bytes_written);
   WRITE32(write->wr_how_written);
   WRITEMEM(write->wr_verifier.data, NFS4_VERIFIER_SIZE);
-  ADJUST_ARGS();
  }
  return nfserr;
 }
@@ -3437,7 +3410,6 @@ nfsd4_encode_exchange_id(struct nfsd4_compoundres *resp, __be32 nfserr,
  WRITE32(exid->flags);
 
  WRITE32(exid->spa_how);
- ADJUST_ARGS();
 
  switch (exid->spa_how) {
  case SP4_NONE:
@@ -3453,7 +3425,6 @@ nfsd4_encode_exchange_id(struct nfsd4_compoundres *resp, __be32 nfserr,
   /* empty spo_must_allow bitmap: */
   WRITE32(0);
 
-  ADJUST_ARGS();
   break;
  default:
   WARN_ON_ONCE(1);
@@ -3479,7 +3450,6 @@ nfsd4_encode_exchange_id(struct nfsd4_compoundres *resp, __be32 nfserr,
 
  /* Implementation id */
  WRITE32(0); /* zero length nfs_impl_id4 array */
- ADJUST_ARGS();
  return 0;
 }
 
@@ -3496,7 +3466,6 @@ nfsd4_encode_create_session(struct nfsd4_compoundres *resp, __be32 nfserr,
  WRITEMEM(sess->sessionid.data, NFS4_MAX_SESSIONID_LEN);
  WRITE32(sess->seqid);
  WRITE32(sess->flags);
- ADJUST_ARGS();
 
  RESERVE_SPACE(28);
  WRITE32(0); /* headerpadsz */
@@ -3506,12 +3475,10 @@ nfsd4_encode_create_session(struct nfsd4_compoundres *resp, __be32 nfserr,
  WRITE32(sess->fore_channel.maxops);
  WRITE32(sess->fore_channel.maxreqs);
  WRITE32(sess->fore_channel.nr_rdma_attrs);
- ADJUST_ARGS();
 
  if (sess->fore_channel.nr_rdma_attrs) {
   RESERVE_SPACE(4);
   WRITE32(sess->fore_channel.rdma_attrs);
-  ADJUST_ARGS();
  }
 
  RESERVE_SPACE(28);
@@ -3522,12 +3489,10 @@ nfsd4_encode_create_session(struct nfsd4_compoundres *resp, __be32 nfserr,
  WRITE32(sess->back_channel.maxops);
  WRITE32(sess->back_channel.maxreqs);
  WRITE32(sess->back_channel.nr_rdma_attrs);
- ADJUST_ARGS();
 
  if (sess->back_channel.nr_rdma_attrs) {
   RESERVE_SPACE(4);
   WRITE32(sess->back_channel.rdma_attrs);
-  ADJUST_ARGS();
  }
  return 0;
 }
@@ -3550,7 +3515,6 @@ nfsd4_encode_sequence(struct nfsd4_compoundres *resp, __be32 nfserr,
  WRITE32(seq->maxslots - 1); /* sr_target_highest_slotid */
  WRITE32(seq->status_flags);
 
- ADJUST_ARGS();
  resp->cstate.datap = p; /* DRC cache data pointer */
  return 0;
 }
@@ -3572,7 +3536,6 @@ nfsd4_encode_test_stateid(struct nfsd4_compoundres *resp, __be32 nfserr,
   *p++ = stateid->ts_id_status;
  }
 
- ADJUST_ARGS();
  return nfserr;
 }
 
@@ -3707,7 +3670,6 @@ nfsd4_encode_operation(struct nfsd4_compoundres *resp, struct nfsd4_op *op)
  RESERVE_SPACE(8);
  WRITE32(op->opnum);
  statp = p++; /* to be backfilled at the end */
- ADJUST_ARGS();
 
  if (op->opnum == OP_ILLEGAL)
   goto status;
@@ -3768,11 +3730,9 @@ nfsd4_encode_replay(struct nfsd4_compoundres *resp, struct nfsd4_op *op)
  RESERVE_SPACE(8);
  WRITE32(op->opnum);
  *p++ = rp->rp_status;  /* already xdr'ed */
- ADJUST_ARGS();
 
  RESERVE_SPACE(rp->rp_buflen);
  WRITEMEM(rp->rp_buf, rp->rp_buflen);
- ADJUST_ARGS();
 }
 
 int
-- 
1.7.1