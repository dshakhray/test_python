From 42e6af1e838af87c36c245308922f7867ab3950c Mon Sep 17 00:00:00 2001
From: Marcelo Leitner <mleitner@redhat.com>
Date: Tue, 21 Oct 2014 16:18:05 -0400
Subject: [net] netfilter: nf_tables: use new transaction infrastructure to handle sets

Message-id: <20141021161805.22888.8777.stgit@localhost.localdomain>
Patchwork-id: 97949
O-Subject: [RHEL7 net PATCH 053/124] netfilter: nf_tables: use new transaction infrastructure to handle sets
Bugzilla: 1148041 1155088
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Backport of upstream commit: 958bee14d0718ca7a5002c0f48a099d1d345812a

 commit 958bee14d0718ca7a5002c0f48a099d1d345812a
 Author: Pablo Neira Ayuso <pablo@netfilter.org>
 Date:   Thu Apr 3 11:48:44 2014 +0200

    netfilter: nf_tables: use new transaction infrastructure to handle sets

    This patch reworks the nf_tables API so set updates are included in
    the same batch that contains rule updates. This speeds up rule-set
    updates since we skip a dialog of four messages between kernel and
    user-space (two on each direction), from:

     1) create the set and send netlink message to the kernel
     2) process the response from the kernel that contains the allocated name.
     3) add the set elements and send netlink message to the kernel.
     4) process the response from the kernel (to check for errors).

    To:

     1) add the set to the batch.
     2) add the set elements to the batch.
     3) add the rule that points to the set.
     4) send batch to the kernel.

    This also introduces an internal set ID (NFTA_SET_ID) that is unique
    in the batch so set elements and rules can refer to new sets.

    Backward compatibility has been only retained in userspace, this
    means that new nft versions can talk to the kernel both in the new
    and the old fashion.

    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/netfilter/nf_tables.h b/include/net/netfilter/nf_tables.h
index d8dfb26..0f472d6 100644
--- a/include/net/netfilter/nf_tables.h
+++ b/include/net/netfilter/nf_tables.h
@@ -268,6 +268,8 @@ static inline void *nft_set_priv(const struct nft_set *set)
 
 struct nft_set *nf_tables_set_lookup(const struct nft_table *table,
          const struct nlattr *nla);
+struct nft_set *nf_tables_set_lookup_byid(const struct net *net,
+       const struct nlattr *nla);
 
 /**
  * struct nft_set_binding - nf_tables set binding
@@ -408,6 +410,16 @@ struct nft_trans_rule {
 #define nft_trans_rule(trans) \
  (((struct nft_trans_rule *)trans->data)->rule)
 
+struct nft_trans_set {
+ struct nft_set *set;
+ u32  set_id;
+};
+
+#define nft_trans_set(trans) \
+ (((struct nft_trans_set *)trans->data)->set)
+#define nft_trans_set_id(trans) \
+ (((struct nft_trans_set *)trans->data)->set_id)
+
 static inline struct nft_expr *nft_expr_first(const struct nft_rule *rule)
 {
  return (struct nft_expr *)&rule->data[0];
diff --git a/include/uapi/linux/netfilter/nf_tables.h b/include/uapi/linux/netfilter/nf_tables.h
index 7d6433f..2a88f64 100644
--- a/include/uapi/linux/netfilter/nf_tables.h
+++ b/include/uapi/linux/netfilter/nf_tables.h
@@ -246,6 +246,7 @@ enum nft_set_desc_attributes {
  * @NFTA_SET_DATA_LEN: mapping data length (NLA_U32)
  * @NFTA_SET_POLICY: selection policy (NLA_U32)
  * @NFTA_SET_DESC: set description (NLA_NESTED)
+ * @NFTA_SET_ID: uniquely identifies a set in a transaction (NLA_U32)
  */
 enum nft_set_attributes {
  NFTA_SET_UNSPEC,
@@ -258,6 +259,7 @@ enum nft_set_attributes {
  NFTA_SET_DATA_LEN,
  NFTA_SET_POLICY,
  NFTA_SET_DESC,
+ NFTA_SET_ID,
  __NFTA_SET_MAX
 };
 #define NFTA_SET_MAX  (__NFTA_SET_MAX - 1)
@@ -293,12 +295,14 @@ enum nft_set_elem_attributes {
  * @NFTA_SET_ELEM_LIST_TABLE: table of the set to be changed (NLA_STRING)
  * @NFTA_SET_ELEM_LIST_SET: name of the set to be changed (NLA_STRING)
  * @NFTA_SET_ELEM_LIST_ELEMENTS: list of set elements (NLA_NESTED: nft_set_elem_attributes)
+ * @NFTA_SET_ELEM_LIST_SET_ID: uniquely identifies a set in a transaction (NLA_U32)
  */
 enum nft_set_elem_list_attributes {
  NFTA_SET_ELEM_LIST_UNSPEC,
  NFTA_SET_ELEM_LIST_TABLE,
  NFTA_SET_ELEM_LIST_SET,
  NFTA_SET_ELEM_LIST_ELEMENTS,
+ NFTA_SET_ELEM_LIST_SET_ID,
  __NFTA_SET_ELEM_LIST_MAX
 };
 #define NFTA_SET_ELEM_LIST_MAX (__NFTA_SET_ELEM_LIST_MAX - 1)
@@ -484,12 +488,14 @@ enum nft_cmp_attributes {
  * @NFTA_LOOKUP_SET: name of the set where to look for (NLA_STRING)
  * @NFTA_LOOKUP_SREG: source register of the data to look for (NLA_U32: nft_registers)
  * @NFTA_LOOKUP_DREG: destination register (NLA_U32: nft_registers)
+ * @NFTA_LOOKUP_SET_ID: uniquely identifies a set in a transaction (NLA_U32)
  */
 enum nft_lookup_attributes {
  NFTA_LOOKUP_UNSPEC,
  NFTA_LOOKUP_SET,
  NFTA_LOOKUP_SREG,
  NFTA_LOOKUP_DREG,
+ NFTA_LOOKUP_SET_ID,
  __NFTA_LOOKUP_MAX
 };
 #define NFTA_LOOKUP_MAX  (__NFTA_LOOKUP_MAX - 1)
diff --git a/net/netfilter/nf_tables_api.c b/net/netfilter/nf_tables_api.c
index 26cf0f9..6f6e188 100644
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -1935,6 +1935,7 @@ static const struct nla_policy nft_set_policy[NFTA_SET_MAX + 1] = {
  [NFTA_SET_DATA_LEN]  = { .type = NLA_U32 },
  [NFTA_SET_POLICY]  = { .type = NLA_U32 },
  [NFTA_SET_DESC]   = { .type = NLA_NESTED },
+ [NFTA_SET_ID]   = { .type = NLA_U32 },
 };
 
 static const struct nla_policy nft_set_desc_policy[NFTA_SET_DESC_MAX + 1] = {
@@ -1985,6 +1986,20 @@ struct nft_set *nf_tables_set_lookup(const struct nft_table *table,
  return ERR_PTR(-ENOENT);
 }
 
+struct nft_set *nf_tables_set_lookup_byid(const struct net *net,
+       const struct nlattr *nla)
+{
+ struct nft_trans *trans;
+ u32 id = ntohl(nla_get_be32(nla));
+
+ list_for_each_entry(trans, &net->nft.commit_list, list) {
+  if (trans->msg_type == NFT_MSG_NEWSET &&
+      id == nft_trans_set_id(trans))
+   return nft_trans_set(trans);
+ }
+ return ERR_PTR(-ENOENT);
+}
+
 static int nf_tables_set_alloc_name(struct nft_ctx *ctx, struct nft_set *set,
         const char *name)
 {
@@ -2260,6 +2275,8 @@ static int nf_tables_dump_sets(struct sk_buff *skb, struct netlink_callback *cb)
  return ret;
 }
 
+#define NFT_SET_INACTIVE (1 << 15) /* Internal set flag */
+
 static int nf_tables_getset(struct sock *nlsk, struct sk_buff *skb,
        const struct nlmsghdr *nlh,
        const struct nlattr * const nla[])
@@ -2289,6 +2306,8 @@ static int nf_tables_getset(struct sock *nlsk, struct sk_buff *skb,
  set = nf_tables_set_lookup(ctx.table, nla[NFTA_SET_NAME]);
  if (IS_ERR(set))
   return PTR_ERR(set);
+ if (set->flags & NFT_SET_INACTIVE)
+  return -ENOENT;
 
  skb2 = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);
  if (skb2 == NULL)
@@ -2322,6 +2341,26 @@ static int nf_tables_set_desc_parse(const struct nft_ctx *ctx,
  return 0;
 }
 
+static int nft_trans_set_add(struct nft_ctx *ctx, int msg_type,
+        struct nft_set *set)
+{
+ struct nft_trans *trans;
+
+ trans = nft_trans_alloc(ctx, msg_type, sizeof(struct nft_trans_set));
+ if (trans == NULL)
+  return -ENOMEM;
+
+ if (msg_type == NFT_MSG_NEWSET && ctx->nla[NFTA_SET_ID] != NULL) {
+  nft_trans_set_id(trans) =
+   ntohl(nla_get_be32(ctx->nla[NFTA_SET_ID]));
+  set->flags |= NFT_SET_INACTIVE;
+ }
+ nft_trans_set(trans) = set;
+ list_add_tail(&trans->list, &ctx->net->nft.commit_list);
+
+ return 0;
+}
+
 static int nf_tables_newset(struct sock *nlsk, struct sk_buff *skb,
        const struct nlmsghdr *nlh,
        const struct nlattr * const nla[])
@@ -2342,7 +2381,8 @@ static int nf_tables_newset(struct sock *nlsk, struct sk_buff *skb,
 
  if (nla[NFTA_SET_TABLE] == NULL ||
      nla[NFTA_SET_NAME] == NULL ||
-     nla[NFTA_SET_KEY_LEN] == NULL)
+     nla[NFTA_SET_KEY_LEN] == NULL ||
+     nla[NFTA_SET_ID] == NULL)
   return -EINVAL;
 
  memset(&desc, 0, sizeof(desc));
@@ -2459,8 +2499,11 @@ static int nf_tables_newset(struct sock *nlsk, struct sk_buff *skb,
  if (err < 0)
   goto err2;
 
+ err = nft_trans_set_add(&ctx, NFT_MSG_NEWSET, set);
+ if (err < 0)
+  goto err2;
+
  list_add_tail(&set->list, &table->sets);
- nf_tables_set_notify(&ctx, set, NFT_MSG_NEWSET);
  return 0;
 
 err2:
@@ -2470,16 +2513,20 @@ err1:
  return err;
 }
 
-static void nf_tables_set_destroy(const struct nft_ctx *ctx, struct nft_set *set)
+static void nft_set_destroy(struct nft_set *set)
 {
- list_del(&set->list);
- nf_tables_set_notify(ctx, set, NFT_MSG_DELSET);
-
  set->ops->destroy(set);
  module_put(set->ops->owner);
  kfree(set);
 }
 
+static void nf_tables_set_destroy(const struct nft_ctx *ctx, struct nft_set *set)
+{
+ list_del(&set->list);
+ nf_tables_set_notify(ctx, set, NFT_MSG_DELSET);
+ nft_set_destroy(set);
+}
+
 static int nf_tables_delset(struct sock *nlsk, struct sk_buff *skb,
        const struct nlmsghdr *nlh,
        const struct nlattr * const nla[])
@@ -2501,10 +2548,16 @@ static int nf_tables_delset(struct sock *nlsk, struct sk_buff *skb,
  set = nf_tables_set_lookup(ctx.table, nla[NFTA_SET_NAME]);
  if (IS_ERR(set))
   return PTR_ERR(set);
+ if (set->flags & NFT_SET_INACTIVE)
+  return -ENOENT;
  if (!list_empty(&set->bindings))
   return -EBUSY;
 
- nf_tables_set_destroy(&ctx, set);
+ err = nft_trans_set_add(&ctx, NFT_MSG_DELSET, set);
+ if (err < 0)
+  return err;
+
+ list_del(&set->list);
  return 0;
 }
 
@@ -2564,7 +2617,8 @@ void nf_tables_unbind_set(const struct nft_ctx *ctx, struct nft_set *set,
 {
  list_del(&binding->list);
 
- if (list_empty(&set->bindings) && set->flags & NFT_SET_ANONYMOUS)
+ if (list_empty(&set->bindings) && set->flags & NFT_SET_ANONYMOUS &&
+     !(set->flags & NFT_SET_INACTIVE))
   nf_tables_set_destroy(ctx, set);
 }
 
@@ -2582,6 +2636,7 @@ static const struct nla_policy nft_set_elem_list_policy[NFTA_SET_ELEM_LIST_MAX +
  [NFTA_SET_ELEM_LIST_TABLE] = { .type = NLA_STRING },
  [NFTA_SET_ELEM_LIST_SET] = { .type = NLA_STRING },
  [NFTA_SET_ELEM_LIST_ELEMENTS] = { .type = NLA_NESTED },
+ [NFTA_SET_ELEM_LIST_SET_ID] = { .type = NLA_U32 },
 };
 
 static int nft_ctx_init_from_elemattr(struct nft_ctx *ctx,
@@ -2681,6 +2736,8 @@ static int nf_tables_dump_set(struct sk_buff *skb, struct netlink_callback *cb)
  set = nf_tables_set_lookup(ctx.table, nla[NFTA_SET_ELEM_LIST_SET]);
  if (IS_ERR(set))
   return PTR_ERR(set);
+ if (set->flags & NFT_SET_INACTIVE)
+  return -ENOENT;
 
  event  = NFT_MSG_NEWSETELEM;
  event |= NFNL_SUBSYS_NFTABLES << 8;
@@ -2744,6 +2801,8 @@ static int nf_tables_getsetelem(struct sock *nlsk, struct sk_buff *skb,
  set = nf_tables_set_lookup(ctx.table, nla[NFTA_SET_ELEM_LIST_SET]);
  if (IS_ERR(set))
   return PTR_ERR(set);
+ if (set->flags & NFT_SET_INACTIVE)
+  return -ENOENT;
 
  if (nlh->nlmsg_flags & NLM_F_DUMP) {
   struct netlink_dump_control c = {
@@ -2929,6 +2988,7 @@ static int nf_tables_newsetelem(struct sock *nlsk, struct sk_buff *skb,
     const struct nlmsghdr *nlh,
     const struct nlattr * const nla[])
 {
+ struct net *net = sock_net(skb->sk);
  const struct nlattr *attr;
  struct nft_set *set;
  struct nft_ctx ctx;
@@ -2939,8 +2999,15 @@ static int nf_tables_newsetelem(struct sock *nlsk, struct sk_buff *skb,
   return err;
 
  set = nf_tables_set_lookup(ctx.table, nla[NFTA_SET_ELEM_LIST_SET]);
- if (IS_ERR(set))
-  return PTR_ERR(set);
+ if (IS_ERR(set)) {
+  if (nla[NFTA_SET_ELEM_LIST_SET_ID]) {
+   set = nf_tables_set_lookup_byid(net,
+     nla[NFTA_SET_ELEM_LIST_SET_ID]);
+  }
+  if (IS_ERR(set))
+   return PTR_ERR(set);
+ }
+
  if (!list_empty(&set->bindings) && set->flags & NFT_SET_CONSTANT)
   return -EBUSY;
 
@@ -3070,7 +3137,7 @@ static const struct nfnl_callback nf_tables_cb[NFT_MSG_MAX] = {
   .policy  = nft_rule_policy,
  },
  [NFT_MSG_NEWSET] = {
-  .call  = nf_tables_newset,
+  .call_batch = nf_tables_newset,
   .attr_count = NFTA_SET_MAX,
   .policy  = nft_set_policy,
  },
@@ -3080,12 +3147,12 @@ static const struct nfnl_callback nf_tables_cb[NFT_MSG_MAX] = {
   .policy  = nft_set_policy,
  },
  [NFT_MSG_DELSET] = {
-  .call  = nf_tables_delset,
+  .call_batch = nf_tables_delset,
   .attr_count = NFTA_SET_MAX,
   .policy  = nft_set_policy,
  },
  [NFT_MSG_NEWSETELEM] = {
-  .call  = nf_tables_newsetelem,
+  .call_batch = nf_tables_newsetelem,
   .attr_count = NFTA_SET_ELEM_LIST_MAX,
   .policy  = nft_set_elem_list_policy,
  },
@@ -3095,7 +3162,7 @@ static const struct nfnl_callback nf_tables_cb[NFT_MSG_MAX] = {
   .policy  = nft_set_elem_list_policy,
  },
  [NFT_MSG_DELSETELEM] = {
-  .call  = nf_tables_delsetelem,
+  .call_batch = nf_tables_delsetelem,
   .attr_count = NFTA_SET_ELEM_LIST_MAX,
   .policy  = nft_set_elem_list_policy,
  },
@@ -3137,6 +3204,16 @@ static int nf_tables_commit(struct sk_buff *skb)
            nft_trans_rule(trans), NFT_MSG_DELRULE, 0,
            trans->ctx.afi->family);
    break;
+  case NFT_MSG_NEWSET:
+   nft_trans_set(trans)->flags &= ~NFT_SET_INACTIVE;
+   nf_tables_set_notify(&trans->ctx, nft_trans_set(trans),
+          NFT_MSG_NEWSET);
+   nft_trans_destroy(trans);
+   break;
+  case NFT_MSG_DELSET:
+   nf_tables_set_notify(&trans->ctx, nft_trans_set(trans),
+          NFT_MSG_DELSET);
+   break;
   }
  }
 
@@ -3149,9 +3226,12 @@ static int nf_tables_commit(struct sk_buff *skb)
   case NFT_MSG_DELRULE:
    nf_tables_rule_destroy(&trans->ctx,
             nft_trans_rule(trans));
-   nft_trans_destroy(trans);
+   break;
+  case NFT_MSG_DELSET:
+   nft_set_destroy(nft_trans_set(trans));
    break;
   }
+  nft_trans_destroy(trans);
  }
 
  return 0;
@@ -3171,6 +3251,14 @@ static int nf_tables_abort(struct sk_buff *skb)
    nft_rule_clear(trans->ctx.net, nft_trans_rule(trans));
    nft_trans_destroy(trans);
    break;
+  case NFT_MSG_NEWSET:
+   list_del(&nft_trans_set(trans)->list);
+   break;
+  case NFT_MSG_DELSET:
+   list_add_tail(&nft_trans_set(trans)->list,
+          &trans->ctx.table->sets);
+   nft_trans_destroy(trans);
+   break;
   }
  }
 
@@ -3182,9 +3270,12 @@ static int nf_tables_abort(struct sk_buff *skb)
   case NFT_MSG_NEWRULE:
    nf_tables_rule_destroy(&trans->ctx,
             nft_trans_rule(trans));
-   nft_trans_destroy(trans);
+   break;
+  case NFT_MSG_NEWSET:
+   nft_set_destroy(nft_trans_set(trans));
    break;
   }
+  nft_trans_destroy(trans);
  }
 
  return 0;
diff --git a/net/netfilter/nft_lookup.c b/net/netfilter/nft_lookup.c
index 7fd2bea..6404a72 100644
--- a/net/netfilter/nft_lookup.c
+++ b/net/netfilter/nft_lookup.c
@@ -56,8 +56,14 @@ static int nft_lookup_init(const struct nft_ctx *ctx,
   return -EINVAL;
 
  set = nf_tables_set_lookup(ctx->table, tb[NFTA_LOOKUP_SET]);
- if (IS_ERR(set))
-  return PTR_ERR(set);
+ if (IS_ERR(set)) {
+  if (tb[NFTA_LOOKUP_SET_ID]) {
+   set = nf_tables_set_lookup_byid(ctx->net,
+       tb[NFTA_LOOKUP_SET_ID]);
+  }
+  if (IS_ERR(set))
+   return PTR_ERR(set);
+ }
 
  priv->sreg = ntohl(nla_get_be32(tb[NFTA_LOOKUP_SREG]));
  err = nft_validate_input_register(priv->sreg);
-- 
1.7.1