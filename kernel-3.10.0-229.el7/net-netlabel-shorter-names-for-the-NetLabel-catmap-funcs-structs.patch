From 907aa7ef8e1367b4d3f1832409f9eaa232e3f122 Mon Sep 17 00:00:00 2001
From: Paul Moore <pmoore@redhat.com>
Date: Fri, 8 Aug 2014 20:02:35 -0400
Subject: [net] netlabel: shorter names for the NetLabel catmap funcs/structs

Message-id: <20140808200235.6323.67846.stgit@localhost>
Patchwork-id: 87562
O-Subject: [RHEL7 PATCH 4/4] netlabel: shorter names for the NetLabel catmap funcs/structs
Bugzilla: 1119662
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1119662
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7799046
Upstream: Present in the SELinux and linux-security trees
Testing: Tested, see BZ

 commit: 4fbe63d1c773cceef3fe1f6ed0c9c268f4f24760
 From: Paul Moore <pmoore@redhat.com>
 Date: 2014-08-01 11:17:37 -0400

 netlabel: shorter names for the NetLabel catmap funcs/structs

 Historically the NetLabel LSM secattr catmap functions and data
 structures have had very long names which makes a mess of the NetLabel
 code and anyone who uses NetLabel.  This patch renames the catmap
 functions and structures from "*_secattr_catmap_*" to just "*_catmap_*"
 which improves things greatly.

 There are no substantial code or logic changes in this patch.

 Signed-off-by: Paul Moore <pmoore@redhat.com>
 Tested-by: Casey Schaufler <casey@schaufler-ca.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/netlabel.h b/include/net/netlabel.h
index e84d71b..9aa0941 100644
--- a/include/net/netlabel.h
+++ b/include/net/netlabel.h
@@ -140,7 +140,7 @@ struct netlbl_lsm_cache {
 };
 
 /**
- * struct netlbl_lsm_secattr_catmap - NetLabel LSM secattr category bitmap
+ * struct netlbl_lsm_catmap - NetLabel LSM secattr category bitmap
  * @startbit: the value of the lowest order bit in the bitmap
  * @bitmap: the category bitmap
  * @next: pointer to the next bitmap "node" or NULL
@@ -163,10 +163,10 @@ struct netlbl_lsm_cache {
 #define NETLBL_CATMAP_SIZE              (NETLBL_CATMAP_MAPSIZE * \
       NETLBL_CATMAP_MAPCNT)
 #define NETLBL_CATMAP_BIT               (NETLBL_CATMAP_MAPTYPE)0x01
-struct netlbl_lsm_secattr_catmap {
+struct netlbl_lsm_catmap {
  u32 startbit;
  NETLBL_CATMAP_MAPTYPE bitmap[NETLBL_CATMAP_MAPCNT];
- struct netlbl_lsm_secattr_catmap *next;
+ struct netlbl_lsm_catmap *next;
 };
 
 /**
@@ -210,7 +210,7 @@ struct netlbl_lsm_secattr {
  struct netlbl_lsm_cache *cache;
  struct {
   struct {
-   struct netlbl_lsm_secattr_catmap *cat;
+   struct netlbl_lsm_catmap *cat;
    u32 lvl;
   } mls;
   u32 secid;
@@ -259,7 +259,7 @@ static inline void netlbl_secattr_cache_free(struct netlbl_lsm_cache *cache)
 }
 
 /**
- * netlbl_secattr_catmap_alloc - Allocate a LSM secattr catmap
+ * netlbl_catmap_alloc - Allocate a LSM secattr catmap
  * @flags: memory allocation flags
  *
  * Description:
@@ -267,24 +267,22 @@ static inline void netlbl_secattr_cache_free(struct netlbl_lsm_cache *cache)
  * on failure.
  *
  */
-static inline struct netlbl_lsm_secattr_catmap *netlbl_secattr_catmap_alloc(
-                                                            gfp_t flags)
+static inline struct netlbl_lsm_catmap *netlbl_catmap_alloc(gfp_t flags)
 {
- return kzalloc(sizeof(struct netlbl_lsm_secattr_catmap), flags);
+ return kzalloc(sizeof(struct netlbl_lsm_catmap), flags);
 }
 
 /**
- * netlbl_secattr_catmap_free - Free a LSM secattr catmap
+ * netlbl_catmap_free - Free a LSM secattr catmap
  * @catmap: the category bitmap
  *
  * Description:
  * Free a LSM secattr catmap.
  *
  */
-static inline void netlbl_secattr_catmap_free(
-                               struct netlbl_lsm_secattr_catmap *catmap)
+static inline void netlbl_catmap_free(struct netlbl_lsm_catmap *catmap)
 {
- struct netlbl_lsm_secattr_catmap *iter;
+ struct netlbl_lsm_catmap *iter;
 
  while (catmap) {
   iter = catmap;
@@ -322,7 +320,7 @@ static inline void netlbl_secattr_destroy(struct netlbl_lsm_secattr *secattr)
  if (secattr->flags & NETLBL_SECATTR_CACHE)
   netlbl_secattr_cache_free(secattr->cache);
  if (secattr->flags & NETLBL_SECATTR_MLS_CAT)
-  netlbl_secattr_catmap_free(secattr->attr.mls.cat);
+  netlbl_catmap_free(secattr->attr.mls.cat);
 }
 
 /**
@@ -391,24 +389,22 @@ int netlbl_cfg_cipsov4_map_add(u32 doi,
 /*
  * LSM security attribute operations
  */
-int netlbl_secattr_catmap_walk(struct netlbl_lsm_secattr_catmap *catmap,
-          u32 offset);
-int netlbl_secattr_catmap_walk_rng(struct netlbl_lsm_secattr_catmap *catmap,
-       u32 offset);
-int netlbl_secattr_catmap_getlong(struct netlbl_lsm_secattr_catmap *catmap,
-      u32 *offset,
-      unsigned long *bitmap);
-int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap **catmap,
-     u32 bit,
-     gfp_t flags);
-int netlbl_secattr_catmap_setrng(struct netlbl_lsm_secattr_catmap **catmap,
-     u32 start,
-     u32 end,
-     gfp_t flags);
-int netlbl_secattr_catmap_setlong(struct netlbl_lsm_secattr_catmap **catmap,
-      u32 offset,
-      unsigned long bitmap,
-      gfp_t flags);
+int netlbl_catmap_walk(struct netlbl_lsm_catmap *catmap, u32 offset);
+int netlbl_catmap_walkrng(struct netlbl_lsm_catmap *catmap, u32 offset);
+int netlbl_catmap_getlong(struct netlbl_lsm_catmap *catmap,
+     u32 *offset,
+     unsigned long *bitmap);
+int netlbl_catmap_setbit(struct netlbl_lsm_catmap **catmap,
+    u32 bit,
+    gfp_t flags);
+int netlbl_catmap_setrng(struct netlbl_lsm_catmap **catmap,
+    u32 start,
+    u32 end,
+    gfp_t flags);
+int netlbl_catmap_setlong(struct netlbl_lsm_catmap **catmap,
+     u32 offset,
+     unsigned long bitmap,
+     gfp_t flags);
 
 /*
  * LSM protocol operations (NetLabel LSM/kernel API)
@@ -500,45 +496,39 @@ static inline int netlbl_cfg_cipsov4_map_add(u32 doi,
 {
  return -ENOSYS;
 }
-static inline int netlbl_secattr_catmap_walk(
-                               struct netlbl_lsm_secattr_catmap *catmap,
-          u32 offset)
+static inline int netlbl_catmap_walk(struct netlbl_lsm_catmap *catmap,
+         u32 offset)
 {
  return -ENOENT;
 }
-static inline int netlbl_secattr_catmap_walk_rng(
-          struct netlbl_lsm_secattr_catmap *catmap,
-          u32 offset)
+static inline int netlbl_catmap_walkrng(struct netlbl_lsm_catmap *catmap,
+     u32 offset)
 {
  return -ENOENT;
 }
-static inline int netlbl_secattr_catmap_getlong(
-          struct netlbl_lsm_secattr_catmap *catmap,
-          u32 *offset,
-          unsigned long *bitmap)
+static inline int netlbl_catmap_getlong(struct netlbl_lsm_catmap *catmap,
+     u32 *offset,
+     unsigned long *bitmap)
 {
  return 0;
 }
-static inline int netlbl_secattr_catmap_setbit(
-          struct netlbl_lsm_secattr_catmap **catmap,
-          u32 bit,
-          gfp_t flags)
+static inline int netlbl_catmap_setbit(struct netlbl_lsm_catmap **catmap,
+           u32 bit,
+           gfp_t flags)
 {
  return 0;
 }
-static inline int netlbl_secattr_catmap_setrng(
-          struct netlbl_lsm_secattr_catmap **catmap,
-          u32 start,
-          u32 end,
-          gfp_t flags)
+static inline int netlbl_catmap_setrng(struct netlbl_lsm_catmap **catmap,
+           u32 start,
+           u32 end,
+           gfp_t flags)
 {
  return 0;
 }
-static int netlbl_secattr_catmap_setlong(
-          struct netlbl_lsm_secattr_catmap **catmap,
-          u32 offset,
-          unsigned long bitmap,
-          gfp_t flags)
+static int netlbl_catmap_setlong(struct netlbl_lsm_catmap **catmap,
+     u32 offset,
+     unsigned long bitmap,
+     gfp_t flags)
 {
  return 0;
 }
diff --git a/net/ipv4/cipso_ipv4.c b/net/ipv4/cipso_ipv4.c
index d335b66..1c46d73 100644
--- a/net/ipv4/cipso_ipv4.c
+++ b/net/ipv4/cipso_ipv4.c
@@ -891,8 +891,8 @@ static int cipso_v4_map_cat_rbm_hton(const struct cipso_v4_doi *doi_def,
  }
 
  for (;;) {
-  host_spot = netlbl_secattr_catmap_walk(secattr->attr.mls.cat,
-             host_spot + 1);
+  host_spot = netlbl_catmap_walk(secattr->attr.mls.cat,
+            host_spot + 1);
   if (host_spot < 0)
    break;
 
@@ -974,7 +974,7 @@ static int cipso_v4_map_cat_rbm_ntoh(const struct cipso_v4_doi *doi_def,
     return -EPERM;
    break;
   }
-  ret_val = netlbl_secattr_catmap_setbit(&secattr->attr.mls.cat,
+  ret_val = netlbl_catmap_setbit(&secattr->attr.mls.cat,
              host_spot,
              GFP_ATOMIC);
   if (ret_val != 0)
@@ -1040,8 +1040,7 @@ static int cipso_v4_map_cat_enum_hton(const struct cipso_v4_doi *doi_def,
  u32 cat_iter = 0;
 
  for (;;) {
-  cat = netlbl_secattr_catmap_walk(secattr->attr.mls.cat,
-       cat + 1);
+  cat = netlbl_catmap_walk(secattr->attr.mls.cat, cat + 1);
   if (cat < 0)
    break;
   if ((cat_iter + 2) > net_cat_len)
@@ -1076,9 +1075,9 @@ static int cipso_v4_map_cat_enum_ntoh(const struct cipso_v4_doi *doi_def,
  u32 iter;
 
  for (iter = 0; iter < net_cat_len; iter += 2) {
-  ret_val = netlbl_secattr_catmap_setbit(&secattr->attr.mls.cat,
-    get_unaligned_be16(&net_cat[iter]),
-    GFP_ATOMIC);
+  ret_val = netlbl_catmap_setbit(&secattr->attr.mls.cat,
+          get_unaligned_be16(&net_cat[iter]),
+          GFP_ATOMIC);
   if (ret_val != 0)
    return ret_val;
  }
@@ -1156,8 +1155,7 @@ static int cipso_v4_map_cat_rng_hton(const struct cipso_v4_doi *doi_def,
   return -ENOSPC;
 
  for (;;) {
-  iter = netlbl_secattr_catmap_walk(secattr->attr.mls.cat,
-        iter + 1);
+  iter = netlbl_catmap_walk(secattr->attr.mls.cat, iter + 1);
   if (iter < 0)
    break;
   cat_size += (iter == 0 ? 0 : sizeof(u16));
@@ -1165,8 +1163,7 @@ static int cipso_v4_map_cat_rng_hton(const struct cipso_v4_doi *doi_def,
    return -ENOSPC;
   array[array_cnt++] = iter;
 
-  iter = netlbl_secattr_catmap_walk_rng(secattr->attr.mls.cat,
-            iter);
+  iter = netlbl_catmap_walkrng(secattr->attr.mls.cat, iter);
   if (iter < 0)
    return -EFAULT;
   cat_size += sizeof(u16);
@@ -1218,10 +1215,10 @@ static int cipso_v4_map_cat_rng_ntoh(const struct cipso_v4_doi *doi_def,
   else
    cat_low = 0;
 
-  ret_val = netlbl_secattr_catmap_setrng(&secattr->attr.mls.cat,
-             cat_low,
-             cat_high,
-             GFP_ATOMIC);
+  ret_val = netlbl_catmap_setrng(&secattr->attr.mls.cat,
+            cat_low,
+            cat_high,
+            GFP_ATOMIC);
   if (ret_val != 0)
    return ret_val;
  }
@@ -1341,7 +1338,7 @@ static int cipso_v4_parsetag_rbm(const struct cipso_v4_doi *doi_def,
           tag_len - 4,
           secattr);
   if (ret_val != 0) {
-   netlbl_secattr_catmap_free(secattr->attr.mls.cat);
+   netlbl_catmap_free(secattr->attr.mls.cat);
    return ret_val;
   }
 
@@ -1432,7 +1429,7 @@ static int cipso_v4_parsetag_enum(const struct cipso_v4_doi *doi_def,
            tag_len - 4,
            secattr);
   if (ret_val != 0) {
-   netlbl_secattr_catmap_free(secattr->attr.mls.cat);
+   netlbl_catmap_free(secattr->attr.mls.cat);
    return ret_val;
   }
 
@@ -1522,7 +1519,7 @@ static int cipso_v4_parsetag_rng(const struct cipso_v4_doi *doi_def,
           tag_len - 4,
           secattr);
   if (ret_val != 0) {
-   netlbl_secattr_catmap_free(secattr->attr.mls.cat);
+   netlbl_catmap_free(secattr->attr.mls.cat);
    return ret_val;
   }
 
diff --git a/net/netlabel/netlabel_kapi.c b/net/netlabel/netlabel_kapi.c
index 929bfc6..819ec12 100644
--- a/net/netlabel/netlabel_kapi.c
+++ b/net/netlabel/netlabel_kapi.c
@@ -411,7 +411,7 @@ out_entry:
 #define _CM_F_WALK 0x00000002
 
 /**
- * _netlbl_secattr_catmap_getnode - Get a individual node from a catmap
+ * _netlbl_catmap_getnode - Get a individual node from a catmap
  * @catmap: pointer to the category bitmap
  * @offset: the requested offset
  * @cm_flags: catmap flags, see _CM_F_*
@@ -425,36 +425,36 @@ out_entry:
  * be returned.  Returns a pointer to the node on success, NULL on failure.
  *
  */
-static struct netlbl_lsm_secattr_catmap *_netlbl_secattr_catmap_getnode(
-    struct netlbl_lsm_secattr_catmap **catmap,
-    u32 offset,
-    unsigned int cm_flags,
-    gfp_t gfp_flags)
+static struct netlbl_lsm_catmap *_netlbl_catmap_getnode(
+          struct netlbl_lsm_catmap **catmap,
+          u32 offset,
+          unsigned int cm_flags,
+          gfp_t gfp_flags)
 {
- struct netlbl_lsm_secattr_catmap *iter = *catmap;
- struct netlbl_lsm_secattr_catmap *prev = NULL;
+ struct netlbl_lsm_catmap *iter = *catmap;
+ struct netlbl_lsm_catmap *prev = NULL;
 
  if (iter == NULL)
-  goto secattr_catmap_getnode_alloc;
+  goto catmap_getnode_alloc;
  if (offset < iter->startbit)
-  goto secattr_catmap_getnode_walk;
+  goto catmap_getnode_walk;
  while (iter && offset >= (iter->startbit + NETLBL_CATMAP_SIZE)) {
   prev = iter;
   iter = iter->next;
  }
  if (iter == NULL || offset < iter->startbit)
-  goto secattr_catmap_getnode_walk;
+  goto catmap_getnode_walk;
 
  return iter;
 
-secattr_catmap_getnode_walk:
+catmap_getnode_walk:
  if (cm_flags & _CM_F_WALK)
   return iter;
-secattr_catmap_getnode_alloc:
+catmap_getnode_alloc:
  if (!(cm_flags & _CM_F_ALLOC))
   return NULL;
 
- iter = netlbl_secattr_catmap_alloc(gfp_flags);
+ iter = netlbl_catmap_alloc(gfp_flags);
  if (iter == NULL)
   return NULL;
  iter->startbit = offset & ~(NETLBL_CATMAP_SIZE - 1);
@@ -471,7 +471,7 @@ secattr_catmap_getnode_alloc:
 }
 
 /**
- * netlbl_secattr_catmap_walk - Walk a LSM secattr catmap looking for a bit
+ * netlbl_catmap_walk - Walk a LSM secattr catmap looking for a bit
  * @catmap: the category bitmap
  * @offset: the offset to start searching at, in bits
  *
@@ -480,15 +480,14 @@ secattr_catmap_getnode_alloc:
  * returns the spot of the first set bit or -ENOENT if no bits are set.
  *
  */
-int netlbl_secattr_catmap_walk(struct netlbl_lsm_secattr_catmap *catmap,
-          u32 offset)
+int netlbl_catmap_walk(struct netlbl_lsm_catmap *catmap, u32 offset)
 {
- struct netlbl_lsm_secattr_catmap *iter = catmap;
+ struct netlbl_lsm_catmap *iter = catmap;
  u32 idx;
  u32 bit;
  NETLBL_CATMAP_MAPTYPE bitmap;
 
- iter = _netlbl_secattr_catmap_getnode(&catmap, offset, _CM_F_WALK, 0);
+ iter = _netlbl_catmap_getnode(&catmap, offset, _CM_F_WALK, 0);
  if (iter == NULL)
   return -ENOENT;
  if (offset > iter->startbit) {
@@ -525,7 +524,7 @@ int netlbl_secattr_catmap_walk(struct netlbl_lsm_secattr_catmap *catmap,
 }
 
 /**
- * netlbl_secattr_catmap_walk_rng - Find the end of a string of set bits
+ * netlbl_catmap_walkrng - Find the end of a string of set bits
  * @catmap: the category bitmap
  * @offset: the offset to start searching at, in bits
  *
@@ -535,17 +534,16 @@ int netlbl_secattr_catmap_walk(struct netlbl_lsm_secattr_catmap *catmap,
  * the end of the bitmap.
  *
  */
-int netlbl_secattr_catmap_walk_rng(struct netlbl_lsm_secattr_catmap *catmap,
-       u32 offset)
+int netlbl_catmap_walkrng(struct netlbl_lsm_catmap *catmap, u32 offset)
 {
- struct netlbl_lsm_secattr_catmap *iter;
- struct netlbl_lsm_secattr_catmap *prev = NULL;
+ struct netlbl_lsm_catmap *iter;
+ struct netlbl_lsm_catmap *prev = NULL;
  u32 idx;
  u32 bit;
  NETLBL_CATMAP_MAPTYPE bitmask;
  NETLBL_CATMAP_MAPTYPE bitmap;
 
- iter = _netlbl_secattr_catmap_getnode(&catmap, offset, _CM_F_WALK, 0);
+ iter = _netlbl_catmap_getnode(&catmap, offset, _CM_F_WALK, 0);
  if (iter == NULL)
   return -ENOENT;
  if (offset > iter->startbit) {
@@ -585,7 +583,7 @@ int netlbl_secattr_catmap_walk_rng(struct netlbl_lsm_secattr_catmap *catmap,
 }
 
 /**
- * netlbl_secattr_catmap_getlong - Export an unsigned long bitmap
+ * netlbl_catmap_getlong - Export an unsigned long bitmap
  * @catmap: pointer to the category bitmap
  * @offset: pointer to the requested offset
  * @bitmap: the exported bitmap
@@ -598,11 +596,11 @@ int netlbl_secattr_catmap_walk_rng(struct netlbl_lsm_secattr_catmap *catmap,
  * Returns zero on sucess, negative values on failure.
  *
  */
-int netlbl_secattr_catmap_getlong(struct netlbl_lsm_secattr_catmap *catmap,
-      u32 *offset,
-      unsigned long *bitmap)
+int netlbl_catmap_getlong(struct netlbl_lsm_catmap *catmap,
+     u32 *offset,
+     unsigned long *bitmap)
 {
- struct netlbl_lsm_secattr_catmap *iter;
+ struct netlbl_lsm_catmap *iter;
  u32 off = *offset;
  u32 idx;
 
@@ -614,7 +612,7 @@ int netlbl_secattr_catmap_getlong(struct netlbl_lsm_secattr_catmap *catmap,
   off = catmap->startbit;
   *offset = off;
  }
- iter = _netlbl_secattr_catmap_getnode(&catmap, off, _CM_F_NONE, 0);
+ iter = _netlbl_catmap_getnode(&catmap, off, _CM_F_NONE, 0);
  if (iter == NULL) {
   *offset = (u32)-1;
   return 0;
@@ -633,7 +631,7 @@ int netlbl_secattr_catmap_getlong(struct netlbl_lsm_secattr_catmap *catmap,
 }
 
 /**
- * netlbl_secattr_catmap_setbit - Set a bit in a LSM secattr catmap
+ * netlbl_catmap_setbit - Set a bit in a LSM secattr catmap
  * @catmap: pointer to the category bitmap
  * @bit: the bit to set
  * @flags: memory allocation flags
@@ -643,14 +641,14 @@ int netlbl_secattr_catmap_getlong(struct netlbl_lsm_secattr_catmap *catmap,
  * negative values on failure.
  *
  */
-int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap **catmap,
-     u32 bit,
-     gfp_t flags)
+int netlbl_catmap_setbit(struct netlbl_lsm_catmap **catmap,
+    u32 bit,
+    gfp_t flags)
 {
- struct netlbl_lsm_secattr_catmap *iter;
+ struct netlbl_lsm_catmap *iter;
  u32 idx;
 
- iter = _netlbl_secattr_catmap_getnode(catmap, bit, _CM_F_ALLOC, flags);
+ iter = _netlbl_catmap_getnode(catmap, bit, _CM_F_ALLOC, flags);
  if (iter == NULL)
   return -ENOMEM;
 
@@ -662,7 +660,7 @@ int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap **catmap,
 }
 
 /**
- * netlbl_secattr_catmap_setrng - Set a range of bits in a LSM secattr catmap
+ * netlbl_catmap_setrng - Set a range of bits in a LSM secattr catmap
  * @catmap: pointer to the category bitmap
  * @start: the starting bit
  * @end: the last bit in the string
@@ -673,10 +671,10 @@ int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap **catmap,
  * on success, negative values on failure.
  *
  */
-int netlbl_secattr_catmap_setrng(struct netlbl_lsm_secattr_catmap **catmap,
-     u32 start,
-     u32 end,
-     gfp_t flags)
+int netlbl_catmap_setrng(struct netlbl_lsm_catmap **catmap,
+    u32 start,
+    u32 end,
+    gfp_t flags)
 {
  int rc = 0;
  u32 spot = start;
@@ -684,22 +682,20 @@ int netlbl_secattr_catmap_setrng(struct netlbl_lsm_secattr_catmap **catmap,
  while (rc == 0 && spot <= end) {
   if (((spot & (BITS_PER_LONG - 1)) != 0) &&
       ((end - spot) > BITS_PER_LONG)) {
-   rc = netlbl_secattr_catmap_setlong(catmap,
-          spot,
-          (unsigned long)-1,
-          flags);
+   rc = netlbl_catmap_setlong(catmap,
+         spot,
+         (unsigned long)-1,
+         flags);
    spot += BITS_PER_LONG;
   } else
-   rc = netlbl_secattr_catmap_setbit(catmap,
-         spot++,
-         flags);
+   rc = netlbl_catmap_setbit(catmap, spot++, flags);
  }
 
  return rc;
 }
 
 /**
- * netlbl_secattr_catmap_setlong - Import an unsigned long bitmap
+ * netlbl_catmap_setlong - Import an unsigned long bitmap
  * @catmap: pointer to the category bitmap
  * @offset: offset to the start of the imported bitmap
  * @bitmap: the bitmap to import
@@ -711,20 +707,19 @@ int netlbl_secattr_catmap_setrng(struct netlbl_lsm_secattr_catmap **catmap,
  * on success, negative values on failure.
  *
  */
-int netlbl_secattr_catmap_setlong(struct netlbl_lsm_secattr_catmap **catmap,
-      u32 offset,
-      unsigned long bitmap,
-      gfp_t flags)
+int netlbl_catmap_setlong(struct netlbl_lsm_catmap **catmap,
+     u32 offset,
+     unsigned long bitmap,
+     gfp_t flags)
 {
- struct netlbl_lsm_secattr_catmap *iter;
+ struct netlbl_lsm_catmap *iter;
  u32 idx;
 
  /* only allow aligned offsets */
  if ((offset & (BITS_PER_LONG - 1)) != 0)
   return -EINVAL;
 
- iter = _netlbl_secattr_catmap_getnode(catmap,
-           offset, _CM_F_ALLOC, flags);
+ iter = _netlbl_catmap_getnode(catmap, offset, _CM_F_ALLOC, flags);
  if (iter == NULL)
   return -ENOMEM;
 
diff --git a/security/selinux/ss/ebitmap.c b/security/selinux/ss/ebitmap.c
index 842deca..afe6a26 100644
--- a/security/selinux/ss/ebitmap.c
+++ b/security/selinux/ss/ebitmap.c
@@ -86,7 +86,7 @@ int ebitmap_cpy(struct ebitmap *dst, struct ebitmap *src)
  *
  */
 int ebitmap_netlbl_export(struct ebitmap *ebmap,
-     struct netlbl_lsm_secattr_catmap **catmap)
+     struct netlbl_lsm_catmap **catmap)
 {
  struct ebitmap_node *e_iter = ebmap->node;
  unsigned long e_map;
@@ -100,7 +100,7 @@ int ebitmap_netlbl_export(struct ebitmap *ebmap,
  }
 
  if (*catmap != NULL)
-  netlbl_secattr_catmap_free(*catmap);
+  netlbl_catmap_free(*catmap);
  *catmap = NULL;
 
  while (e_iter) {
@@ -108,10 +108,10 @@ int ebitmap_netlbl_export(struct ebitmap *ebmap,
   for (iter = 0; iter < EBITMAP_UNIT_NUMS; iter++) {
    e_map = e_iter->maps[iter];
    if (e_map != 0) {
-    rc = netlbl_secattr_catmap_setlong(catmap,
-           offset,
-           e_map,
-           GFP_ATOMIC);
+    rc = netlbl_catmap_setlong(catmap,
+          offset,
+          e_map,
+          GFP_ATOMIC);
     if (rc != 0)
      goto netlbl_export_failure;
    }
@@ -123,7 +123,7 @@ int ebitmap_netlbl_export(struct ebitmap *ebmap,
  return 0;
 
 netlbl_export_failure:
- netlbl_secattr_catmap_free(*catmap);
+ netlbl_catmap_free(*catmap);
  return -ENOMEM;
 }
 
@@ -138,7 +138,7 @@ netlbl_export_failure:
  *
  */
 int ebitmap_netlbl_import(struct ebitmap *ebmap,
-     struct netlbl_lsm_secattr_catmap *catmap)
+     struct netlbl_lsm_catmap *catmap)
 {
  int rc;
  struct ebitmap_node *e_iter = NULL;
@@ -147,7 +147,7 @@ int ebitmap_netlbl_import(struct ebitmap *ebmap,
  unsigned long bitmap;
 
  for (;;) {
-  rc = netlbl_secattr_catmap_getlong(catmap, &offset, &bitmap);
+  rc = netlbl_catmap_getlong(catmap, &offset, &bitmap);
   if (rc < 0)
    goto netlbl_import_failure;
   if (offset == (u32)-1)
diff --git a/security/selinux/ss/ebitmap.h b/security/selinux/ss/ebitmap.h
index 712c8a7..9637b8c 100644
--- a/security/selinux/ss/ebitmap.h
+++ b/security/selinux/ss/ebitmap.h
@@ -132,17 +132,17 @@ int ebitmap_write(struct ebitmap *e, void *fp);
 
 #ifdef CONFIG_NETLABEL
 int ebitmap_netlbl_export(struct ebitmap *ebmap,
-     struct netlbl_lsm_secattr_catmap **catmap);
+     struct netlbl_lsm_catmap **catmap);
 int ebitmap_netlbl_import(struct ebitmap *ebmap,
-     struct netlbl_lsm_secattr_catmap *catmap);
+     struct netlbl_lsm_catmap *catmap);
 #else
 static inline int ebitmap_netlbl_export(struct ebitmap *ebmap,
-    struct netlbl_lsm_secattr_catmap **catmap)
+     struct netlbl_lsm_catmap **catmap)
 {
  return -ENOMEM;
 }
 static inline int ebitmap_netlbl_import(struct ebitmap *ebmap,
-    struct netlbl_lsm_secattr_catmap *catmap)
+     struct netlbl_lsm_catmap *catmap)
 {
  return -ENOMEM;
 }
diff --git a/security/smack/smack_access.c b/security/smack/smack_access.c
index cd7f80a..dddd65c 100644
--- a/security/smack/smack_access.c
+++ b/security/smack/smack_access.c
@@ -407,10 +407,10 @@ int smk_netlbl_mls(int level, char *catset, struct netlbl_lsm_secattr *sap,
   for (m = 0x80; m != 0; m >>= 1, cat++) {
    if ((m & *cp) == 0)
     continue;
-   rc = netlbl_secattr_catmap_setbit(&sap->attr.mls.cat,
-         cat, GFP_ATOMIC);
+   rc = netlbl_catmap_setbit(&sap->attr.mls.cat,
+        cat, GFP_ATOMIC);
    if (rc < 0) {
-    netlbl_secattr_catmap_free(sap->attr.mls.cat);
+    netlbl_catmap_free(sap->attr.mls.cat);
     return rc;
    }
   }
diff --git a/security/smack/smackfs.c b/security/smack/smackfs.c
index 53a08b8..a3a55a2 100644
--- a/security/smack/smackfs.c
+++ b/security/smack/smackfs.c
@@ -770,7 +770,7 @@ static int cipso_seq_show(struct seq_file *s, void *v)
  struct list_head  *list = v;
  struct smack_known *skp =
    list_entry(list, struct smack_known, list);
- struct netlbl_lsm_secattr_catmap *cmp = skp->smk_netlabel.attr.mls.cat;
+ struct netlbl_lsm_catmap *cmp = skp->smk_netlabel.attr.mls.cat;
  char sep = '/';
  int i;
 
@@ -787,8 +787,8 @@ static int cipso_seq_show(struct seq_file *s, void *v)
 
  seq_printf(s, "%s %3d", skp->smk_known, skp->smk_netlabel.attr.mls.lvl);
 
- for (i = netlbl_secattr_catmap_walk(cmp, 0); i >= 0;
-      i = netlbl_secattr_catmap_walk(cmp, i + 1)) {
+ for (i = netlbl_catmap_walk(cmp, 0); i >= 0;
+      i = netlbl_catmap_walk(cmp, i + 1)) {
   seq_printf(s, "%c%d", sep, i);
   sep = ',';
  }
@@ -909,7 +909,7 @@ static ssize_t smk_set_cipso(struct file *file, const char __user *buf,
 
  rc = smk_netlbl_mls(maplevel, mapcatset, &ncats, SMK_CIPSOLEN);
  if (rc >= 0) {
-  netlbl_secattr_catmap_free(skp->smk_netlabel.attr.mls.cat);
+  netlbl_catmap_free(skp->smk_netlabel.attr.mls.cat);
   skp->smk_netlabel.attr.mls.cat = ncats.attr.mls.cat;
   skp->smk_netlabel.attr.mls.lvl = ncats.attr.mls.lvl;
   rc = count;
@@ -959,14 +959,14 @@ static int cipso2_seq_show(struct seq_file *s, void *v)
  struct list_head  *list = v;
  struct smack_known *skp =
    list_entry(list, struct smack_known, list);
- struct netlbl_lsm_secattr_catmap *cmp = skp->smk_netlabel.attr.mls.cat;
+ struct netlbl_lsm_catmap *cmp = skp->smk_netlabel.attr.mls.cat;
  char sep = '/';
  int i;
 
  seq_printf(s, "%s %3d", skp->smk_known, skp->smk_netlabel.attr.mls.lvl);
 
- for (i = netlbl_secattr_catmap_walk(cmp, 0); i >= 0;
-      i = netlbl_secattr_catmap_walk(cmp, i + 1)) {
+ for (i = netlbl_catmap_walk(cmp, 0); i >= 0;
+      i = netlbl_catmap_walk(cmp, i + 1)) {
   seq_printf(s, "%c%d", sep, i);
   sep = ',';
  }
-- 
1.7.1