From e38b13b753e0465b68be1d8c2bfa6436fa8cfc5d Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 28 Aug 2014 03:05:55 -0400
Subject: [acpi] Introduce acpi_set_device_status()

Message-id: <20140828030555.2117.59361.stgit@gir.stowe>
Patchwork-id: 89311
O-Subject: [RHEL7.1 PATCH 23/30] ACPI: Introduce acpi_set_device_status()
Bugzilla: 1128632
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1128632
Upstream Status: 25db115b0bf72acfdf8a339fa8e37d8b895214d6

commit 25db115b0bf72acfdf8a339fa8e37d8b895214d6
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 22 21:56:06 2013 +0100

    ACPI: Introduce acpi_set_device_status()

    Introduce a static inline function for setting the status field
    of struct acpi_device on the basis of a supplied u32 number,
    acpi_set_device_status(), and use it instead of the horrible
    horrible STRUCT_TO_INT() macro wherever applicable.  Having done
    that, drop STRUCT_TO_INT() (and pretend that it has never existed).

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/bus.c b/drivers/acpi/bus.c
index 8509c72..5e1c127 100644
--- a/drivers/acpi/bus.c
+++ b/drivers/acpi/bus.c
@@ -52,9 +52,6 @@ struct acpi_device *acpi_root;
 struct proc_dir_entry *acpi_root_dir;
 EXPORT_SYMBOL(acpi_root_dir);
 
-#define STRUCT_TO_INT(s) (*((int*)&s))
-
-
 #ifdef CONFIG_X86
 static int set_copy_dsdt(const struct dmi_system_id *id)
 {
@@ -115,18 +112,16 @@ int acpi_bus_get_status(struct acpi_device *device)
  if (ACPI_FAILURE(status))
   return -ENODEV;
 
- STRUCT_TO_INT(device->status) = (int) sta;
+ acpi_set_device_status(device, sta);
 
  if (device->status.functional && !device->status.present) {
   ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Device [%s] status [%08x]: "
          "functional but not present;\n",
-   device->pnp.bus_id,
-   (u32) STRUCT_TO_INT(device->status)));
+   device->pnp.bus_id, (u32)sta));
  }
 
  ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Device [%s] status [%08x]\n",
-     device->pnp.bus_id,
-     (u32) STRUCT_TO_INT(device->status)));
+     device->pnp.bus_id, (u32)sta));
  return 0;
 }
 EXPORT_SYMBOL(acpi_bus_get_status);
diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index cd1797c..0d03742 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -20,7 +20,6 @@
 
 #define _COMPONENT  ACPI_BUS_COMPONENT
 ACPI_MODULE_NAME("scan");
-#define STRUCT_TO_INT(s) (*((int*)&s))
 extern struct acpi_device *acpi_root;
 
 #define ACPI_BUS_CLASS   "system_bus"
@@ -1683,7 +1682,7 @@ void acpi_init_device_object(struct acpi_device *device, acpi_handle handle,
  device->device_type = type;
  device->handle = handle;
  device->parent = acpi_bus_get_parent(handle);
- STRUCT_TO_INT(device->status) = sta;
+ acpi_set_device_status(device, sta);
  acpi_device_get_busid(device);
  acpi_set_pnp_ids(handle, &device->pnp, type);
  acpi_bus_get_flags(device);
@@ -1927,7 +1926,7 @@ static acpi_status acpi_bus_device_attach(acpi_handle handle, u32 lvl_not_used,
  if (acpi_bus_get_device(handle, &device))
   return AE_CTRL_DEPTH;
 
- STRUCT_TO_INT(device->status) = sta;
+ acpi_set_device_status(device, sta);
  /* Skip devices that are not present. */
  if (!acpi_device_is_present(device))
   goto err;
diff --git a/include/acpi/acpi_bus.h b/include/acpi/acpi_bus.h
index 8b44c71..18e26a4 100644
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@ -319,6 +319,11 @@ static inline void *acpi_driver_data(struct acpi_device *d)
 #define to_acpi_device(d) container_of(d, struct acpi_device, dev)
 #define to_acpi_driver(d) container_of(d, struct acpi_driver, drv)
 
+static inline void acpi_set_device_status(struct acpi_device *adev, u32 sta)
+{
+ *((u32 *)&adev->status) = sta;
+}
+
 /* acpi_device.dev.bus == &acpi_bus_type */
 extern struct bus_type acpi_bus_type;
 
-- 
1.7.1