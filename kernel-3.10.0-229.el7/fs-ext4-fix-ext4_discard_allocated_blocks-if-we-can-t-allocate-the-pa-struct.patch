From e8c10fee199c36f820b8fa2bbac2be3c5f7dd68c Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:55:17 -0400
Subject: [fs] ext4: fix ext4_discard_allocated_blocks() if we can't allocate the pa struct

Message-id: <1414058125-4183-164-git-send-email-lczerner@redhat.com>
Patchwork-id: 98213
O-Subject: [RHEL 7.1 PATCH v2 163/171] ext4: fix ext4_discard_allocated_blocks() if we can't allocate the pa struct
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 86f0afd463215fc3e58020493482faa4ac3a4d69

 If there is a failure while allocating the preallocation structure, a
 number of blocks can end up getting marked in the in-memory buddy
 bitmap, and then not getting released.  This can result in the
 following corruption getting reported by the kernel:

 EXT4-fs error (device sda3): ext4_mb_generate_buddy:758: group 1126,
 12793 clusters in bitmap, 12729 in gd

 In that case, we need to release the blocks using mb_free_blocks().

 Tested: fs smoke test; also demonstrated that with injected errors,
  the file system is no longer getting corrupted

 Google-Bug-Id: 16657874

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Cc: stable@vger.kernel.org
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/mballoc.c b/fs/ext4/mballoc.c
index 0a70a35..5504348 100644
--- a/fs/ext4/mballoc.c
+++ b/fs/ext4/mballoc.c
@@ -3206,8 +3206,27 @@ static void ext4_mb_collect_stats(struct ext4_allocation_context *ac)
 static void ext4_discard_allocated_blocks(struct ext4_allocation_context *ac)
 {
  struct ext4_prealloc_space *pa = ac->ac_pa;
+ struct ext4_buddy e4b;
+ int err;
 
- if (pa && pa->pa_type == MB_INODE_PA)
+ if (pa == NULL) {
+  err = ext4_mb_load_buddy(ac->ac_sb, ac->ac_f_ex.fe_group, &e4b);
+  if (err) {
+   /*
+    * This should never happen since we pin the
+    * pages in the ext4_allocation_context so
+    * ext4_mb_load_buddy() should never fail.
+    */
+   WARN(1, "mb_load_buddy failed (%d)", err);
+   return;
+  }
+  ext4_lock_group(ac->ac_sb, ac->ac_f_ex.fe_group);
+  mb_free_blocks(ac->ac_inode, &e4b, ac->ac_f_ex.fe_start,
+          ac->ac_f_ex.fe_len);
+  ext4_unlock_group(ac->ac_sb, ac->ac_f_ex.fe_group);
+  return;
+ }
+ if (pa->pa_type == MB_INODE_PA)
   pa->pa_free += ac->ac_b_ex.fe_len;
 }
 
-- 
1.7.1