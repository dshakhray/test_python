From e06058671a29aff19f2165afa179ad25463242bb Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:50 -0400
Subject: [tools] perf/report: Remove some needless container_of usage

Message-id: <1410181752-25631-46-git-send-email-jolsa@redhat.com>
Patchwork-id: 91726
O-Subject: [PATCH RHEL7.1 BZ1134356 045/307] perf report: Remove some needless container_of usage
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 106395dfda0397a6a88cc309bb7beb1fdf2ed798
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Wed Jan 22 13:21:32 2014 -0300

description
===========
Since all it wants is to get the 'struct record' from the received
'struct perf_tool', and this is already done at the callers of these
functions, short circuit it.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index c783673..c47bf58 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -75,10 +75,9 @@ static int report__config(const char *var, const char *value, void *cb)
  return perf_default_config(var, value, cb);
 }
 
-static int report__add_mem_hist_entry(struct perf_tool *tool, struct addr_location *al,
+static int report__add_mem_hist_entry(struct report *rep, struct addr_location *al,
           struct perf_sample *sample, struct perf_evsel *evsel)
 {
- struct report *rep = container_of(tool, struct report, tool);
  struct symbol *parent = NULL;
  struct hist_entry *he;
  struct mem_info *mi, *mx;
@@ -129,10 +128,9 @@ out:
  return err;
 }
 
-static int report__add_branch_hist_entry(struct perf_tool *tool, struct addr_location *al,
+static int report__add_branch_hist_entry(struct report *rep, struct addr_location *al,
       struct perf_sample *sample, struct perf_evsel *evsel)
 {
- struct report *rep = container_of(tool, struct report, tool);
  struct symbol *parent = NULL;
  unsigned i;
  struct hist_entry *he;
@@ -187,10 +185,9 @@ out:
  return err;
 }
 
-static int report__add_hist_entry(struct perf_tool *tool, struct perf_evsel *evsel,
+static int report__add_hist_entry(struct report *rep, struct perf_evsel *evsel,
       struct addr_location *al, struct perf_sample *sample)
 {
- struct report *rep = container_of(tool, struct report, tool);
  struct symbol *parent = NULL;
  struct hist_entry *he;
  int err = sample__resolve_callchain(sample, &parent, evsel, al, rep->max_stack);
@@ -241,18 +238,18 @@ static int process_sample_event(struct perf_tool *tool,
   return 0;
 
  if (sort__mode == SORT_MODE__BRANCH) {
-  ret = report__add_branch_hist_entry(tool, &al, sample, evsel);
+  ret = report__add_branch_hist_entry(rep, &al, sample, evsel);
   if (ret < 0)
    pr_debug("problem adding lbr entry, skipping event\n");
  } else if (rep->mem_mode == 1) {
-  ret = report__add_mem_hist_entry(tool, &al, sample, evsel);
+  ret = report__add_mem_hist_entry(rep, &al, sample, evsel);
   if (ret < 0)
    pr_debug("problem adding mem entry, skipping event\n");
  } else {
   if (al.map != NULL)
    al.map->dso->hit = 1;
 
-  ret = report__add_hist_entry(tool, evsel, &al, sample);
+  ret = report__add_hist_entry(rep, evsel, &al, sample);
   if (ret < 0)
    pr_debug("problem incrementing symbol period, skipping event\n");
  }
-- 
1.7.1