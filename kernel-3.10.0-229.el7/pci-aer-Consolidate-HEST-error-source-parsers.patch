From 0148f34afafac528b33dd3963d8097d7d8949fd9 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sat, 19 Jul 2014 04:24:05 -0400
Subject: [pci] aer: Consolidate HEST error source parsers

Message-id: <20140719042405.19438.50179.stgit@gir.stowe>
Patchwork-id: 85975
O-Subject: [RHEL7.1 PATCH 13/81] PCI/AER: Consolidate HEST error source parsers
Bugzilla: 1110895
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110895
Upstream Status: 3620437a73b0ba68bac9c4e8d0fc9b809efca521

commit 3620437a73b0ba68bac9c4e8d0fc9b809efca521
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Fri Dec 13 15:42:53 2013 -0700

    PCI/AER: Consolidate HEST error source parsers

    aer_hest_parse() and aer_hest_parse_aff() are almost identical.  We use
    aer_hest_parse() to check the ACPI_HEST_FIRMWARE_FIRST flag for a specific
    device, and we use aer_hest_parse_aff() to check to see if any device sets
    the flag.

    This drops aer_hest_parse_aff() and enhances aer_hest_parse() so it
    collects the union of the PCIe ACPI_HEST_FIRMWARE_FIRST flag settings when
    no specific device is supplied.

    No functional change.

    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Betty Dall <betty.dall@hp.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/pcie/aer/aerdrv_acpi.c b/drivers/pci/pcie/aer/aerdrv_acpi.c
index a239957..4d69917 100644
--- a/drivers/pci/pcie/aer/aerdrv_acpi.c
+++ b/drivers/pci/pcie/aer/aerdrv_acpi.c
@@ -70,6 +70,17 @@ static int aer_hest_parse(struct acpi_hest_header *hest_hdr, void *data)
 
  p = (struct acpi_hest_aer_common *)(hest_hdr + 1);
  ff = !!(p->flags & ACPI_HEST_FIRMWARE_FIRST);
+
+ /*
+  * If no specific device is supplied, determine whether
+  * FIRMWARE_FIRST is set for *any* PCIe device.
+  */
+ if (!info->pci_dev) {
+  info->firmware_first |= ff;
+  return 0;
+ }
+
+ /* Otherwise, check the specific device */
  if (p->flags & ACPI_HEST_GLOBAL) {
   if (hest_match_type(hest_hdr, info->pci_dev))
    info->firmware_first = ff;
@@ -109,30 +120,20 @@ int pcie_aer_get_firmware_first(struct pci_dev *dev)
 
 static bool aer_firmware_first;
 
-static int aer_hest_parse_aff(struct acpi_hest_header *hest_hdr, void *data)
-{
- struct acpi_hest_aer_common *p;
-
- if (aer_firmware_first)
-  return 0;
-
- if (!hest_source_is_pcie_aer(hest_hdr))
-  return 0;
-
- p = (struct acpi_hest_aer_common *)(hest_hdr + 1);
- aer_firmware_first = !!(p->flags & ACPI_HEST_FIRMWARE_FIRST);
- return 0;
-}
-
 /**
  * aer_acpi_firmware_first - Check if APEI should control AER.
  */
 bool aer_acpi_firmware_first(void)
 {
  static bool parsed = false;
+ struct aer_hest_parse_info info = {
+  .pci_dev = NULL, /* Check all PCIe devices */
+  .firmware_first = 0,
+ };
 
  if (!parsed) {
-  apei_hest_parse(aer_hest_parse_aff, NULL);
+  apei_hest_parse(aer_hest_parse, &info);
+  aer_firmware_first = info.firmware_first;
   parsed = true;
  }
  return aer_firmware_first;
-- 
1.7.1