From f1b02dbdaa99549a65ea2fe58f20aca46aad7b24 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:56 -0400
Subject: [tools] perf/symbols: Fix not finding kcore in buildid cache

Message-id: <1408953210-26343-49-git-send-email-jolsa@redhat.com>
Patchwork-id: 88767
O-Subject: [PATCH RHEL7.1 BZ1133083 048/322] perf symbols: Fix not finding kcore in buildid cache
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 449867e346bfd52c5df6bba5b706a795c35e78d4
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Tue Nov 26 15:19:24 2013 +0200

description
===========
The logic was not looking in the buildid cache for kcore if the host
kernel buildid did not match the recorded kernel buildid.

This affects the non-live case i.e. the kernel has changed and we are
looking at a special copy of kcore that we placed in the buildid cache
(using "perf buildid-cache -v -k /proc/kcore") when the data was
recorded.

After this fix kernel symbols get resolved/annotated correctly.

[ Added further explanation extracted from conversation between Ingo & Adrian on lkml ]
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/symbol.c b/tools/perf/util/symbol.c
index ce9ce10..360eefe 100644
--- a/tools/perf/util/symbol.c
+++ b/tools/perf/util/symbol.c
@@ -1526,14 +1526,15 @@ static char *dso__find_kallsyms(struct dso *dso, struct map *map)
 
  build_id__sprintf(dso->build_id, sizeof(dso->build_id), sbuild_id);
 
+ scnprintf(path, sizeof(path), "%s/[kernel.kcore]/%s", buildid_dir,
+    sbuild_id);
+
  /* Use /proc/kallsyms if possible */
  if (is_host) {
   DIR *d;
   int fd;
 
   /* If no cached kcore go with /proc/kallsyms */
-  scnprintf(path, sizeof(path), "%s/[kernel.kcore]/%s",
-     buildid_dir, sbuild_id);
   d = opendir(path);
   if (!d)
    goto proc_kallsyms;
@@ -1558,6 +1559,10 @@ static char *dso__find_kallsyms(struct dso *dso, struct map *map)
   goto proc_kallsyms;
  }
 
+ /* Find kallsyms in build-id cache with kcore */
+ if (!find_matching_kcore(map, path, sizeof(path)))
+  return strdup(path);
+
  scnprintf(path, sizeof(path), "%s/[kernel.kallsyms]/%s",
     buildid_dir, sbuild_id);
 
-- 
1.7.1