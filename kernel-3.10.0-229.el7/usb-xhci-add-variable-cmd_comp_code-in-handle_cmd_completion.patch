From 4e9070e5a9c8bc517b2c684d07a579da29d05173 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:02:26 -0400
Subject: [usb] xhci: add variable 'cmd_comp_code' in handle_cmd_completion()

Message-id: <1410887463-20674-75-git-send-email-dzickus@redhat.com>
Patchwork-id: 95110
O-Subject: [RHEL7 PATCH 074/591] xhci: add variable 'cmd_comp_code' in handle_cmd_completion()
Bugzilla: 1032371
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1032371

commit e7a79a1d6af31c050b4264099c4ab0cbee9122b8
Author: Xenia Ragiadakou <burzalodowa@gmail.com>
Date:   Mon Sep 9 13:29:56 2013 +0300

    xhci: add variable 'cmd_comp_code' in handle_cmd_completion()

    This patch adds a new variable 'cmd_comp_code' to hold the command completion
    status code aiming to reduce code duplication and to improve code readability.

    Signed-off-by: Xenia Ragiadakou <burzalodowa@gmail.com>
    Acked-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index 62127dc..8115a30 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -1519,6 +1519,7 @@ static void handle_cmd_completion(struct xhci_hcd *xhci,
  int slot_id = TRB_TO_SLOT_ID(le32_to_cpu(event->flags));
  u64 cmd_dma;
  dma_addr_t cmd_dequeue_dma;
+ u32 cmd_comp_code;
 
  cmd_dma = le64_to_cpu(event->cmd_trb);
  cmd_dequeue_dma = xhci_trb_virt_to_dma(xhci->cmd_ring->deq_seg,
@@ -1537,16 +1538,15 @@ static void handle_cmd_completion(struct xhci_hcd *xhci,
  trace_xhci_cmd_completion(&xhci->cmd_ring->dequeue->generic,
      (struct xhci_generic_trb *) event);
 
- if ((GET_COMP_CODE(le32_to_cpu(event->status)) == COMP_CMD_ABORT) ||
-  (GET_COMP_CODE(le32_to_cpu(event->status)) == COMP_CMD_STOP)) {
+ cmd_comp_code = GET_COMP_CODE(le32_to_cpu(event->status));
+ if (cmd_comp_code == COMP_CMD_ABORT || cmd_comp_code == COMP_CMD_STOP) {
   /* If the return value is 0, we think the trb pointed by
    * command ring dequeue pointer is a good trb. The good
    * trb means we don't want to cancel the trb, but it have
    * been stopped by host. So we should handle it normally.
    * Otherwise, driver should invoke inc_deq() and return.
    */
-  if (handle_stopped_cmd_ring(xhci,
-    GET_COMP_CODE(le32_to_cpu(event->status)))) {
+  if (handle_stopped_cmd_ring(xhci, cmd_comp_code)) {
    inc_deq(xhci, xhci->cmd_ring);
    return;
   }
@@ -1561,23 +1561,19 @@ static void handle_cmd_completion(struct xhci_hcd *xhci,
  switch (le32_to_cpu(xhci->cmd_ring->dequeue->generic.field[3])
   & TRB_TYPE_BITMASK) {
  case TRB_TYPE(TRB_ENABLE_SLOT):
-  xhci_handle_cmd_enable_slot(xhci, slot_id,
-    GET_COMP_CODE(le32_to_cpu(event->status)));
+  xhci_handle_cmd_enable_slot(xhci, slot_id, cmd_comp_code);
   break;
  case TRB_TYPE(TRB_DISABLE_SLOT):
   xhci_handle_cmd_disable_slot(xhci, slot_id);
   break;
  case TRB_TYPE(TRB_CONFIG_EP):
-  xhci_handle_cmd_config_ep(xhci, slot_id, event,
-    GET_COMP_CODE(le32_to_cpu(event->status)));
+  xhci_handle_cmd_config_ep(xhci, slot_id, event, cmd_comp_code);
   break;
  case TRB_TYPE(TRB_EVAL_CONTEXT):
-  xhci_handle_cmd_eval_ctx(xhci, slot_id, event,
-    GET_COMP_CODE(le32_to_cpu(event->status)));
+  xhci_handle_cmd_eval_ctx(xhci, slot_id, event, cmd_comp_code);
   break;
  case TRB_TYPE(TRB_ADDR_DEV):
-  xhci_handle_cmd_addr_dev(xhci, slot_id,
-    GET_COMP_CODE(le32_to_cpu(event->status)));
+  xhci_handle_cmd_addr_dev(xhci, slot_id, cmd_comp_code);
   break;
  case TRB_TYPE(TRB_STOP_RING):
   xhci_handle_cmd_stop_ep(xhci, xhci->cmd_ring->dequeue, event);
-- 
1.7.1