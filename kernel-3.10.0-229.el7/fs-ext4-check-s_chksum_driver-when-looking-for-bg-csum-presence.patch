From 351d6aca3c53c0df87fe0610bfbb8d5c327ad79d Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Wed, 29 Oct 2014 16:34:44 -0400
Subject: [fs] ext4: check s_chksum_driver when looking for bg csum presence

Message-id: <1414600485-1929-55-git-send-email-lczerner@redhat.com>
Patchwork-id: 98572
O-Subject: [RHEL 7.1 PATCH v2 54/55] ext4: check s_chksum_driver when looking for bg csum presence
Bugzilla: 1156096
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: "Darrick J. Wong" <darrick.wong@oracle.com>

BZ 1156096
https://bugzilla.redhat.com/show_bug.cgi?id=1156096

BREW 8169722
https://brewweb.devel.redhat.com/taskinfo?taskID=8169722

Upstream commit 813d32f91333e4c33d5a19b67167c4bae42dae75

 Convert the ext4_has_group_desc_csum predicate to look for a checksum
 driver instead of the metadata_csum flag and change the bg checksum
 calculation function to look for GDT_CSUM before taking the crc16
 path.

 Without this patch, if we mount with ^uninit_bg,^metadata_csum and
 later metadata_csum gets turned on by accident, the block group
 checksum functions will incorrectly assume that checksumming is
 enabled (metadata_csum) but that crc16 should be used
 (!s_chksum_driver).  This is totally wrong, so fix the predicate
 and the checksum formula selection.

 (Granted, if the metadata_csum feature bit gets enabled on a live FS
 then something underhanded is going on, but we could at least avoid
 writing garbage into the on-disk fields.)

 Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Reviewed-by: Dmitry Monakhov <dmonakhov@openvz.org>
 Cc: stable@vger.kernel.org
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 4616f91..df85a35 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2343,8 +2343,8 @@ extern int ext4_register_li_request(struct super_block *sb,
 static inline int ext4_has_group_desc_csum(struct super_block *sb)
 {
  return EXT4_HAS_RO_COMPAT_FEATURE(sb,
-       EXT4_FEATURE_RO_COMPAT_GDT_CSUM |
-       EXT4_FEATURE_RO_COMPAT_METADATA_CSUM);
+       EXT4_FEATURE_RO_COMPAT_GDT_CSUM) ||
+        (EXT4_SB(sb)->s_chksum_driver != NULL);
 }
 
 static inline int ext4_has_metadata_csum(struct super_block *sb)
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index cb4b9f6..f9d36be 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -2024,6 +2024,10 @@ static __le16 ext4_group_desc_csum(struct ext4_sb_info *sbi, __u32 block_group,
  }
 
  /* old crc16 code */
+ if (!(sbi->s_es->s_feature_ro_compat &
+       cpu_to_le32(EXT4_FEATURE_RO_COMPAT_GDT_CSUM)))
+  return 0;
+
  offset = offsetof(struct ext4_group_desc, bg_checksum);
 
  crc = crc16(~0, sbi->s_es->s_uuid, sizeof(sbi->s_es->s_uuid));
-- 
1.7.1