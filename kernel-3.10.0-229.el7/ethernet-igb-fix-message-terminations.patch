From 75bd85423bae3e50b316350bcf96bc5bdf640edd Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 26 Aug 2014 14:12:05 -0400
Subject: [ethernet] igb: fix message terminations

Message-id: <1409062359-13063-48-git-send-email-sassmann@redhat.com>
Patchwork-id: 89162
O-Subject: [RHEL7.1 PATCH 47/81] e1000e/igb/ixgbe/i40e: fix message terminations
Bugzilla: 1091121
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jakub Kicinski <kubakici@wp.pl>

Add \n at the end of messages where missing, remove all \r.

Reported-by: Joe Perches <joe@perches.com>
Signed-off-by: Jakub Kicinski <kubakici@wp.pl>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Tested-by: Kavindya Deegala <kavindya.s.deegala@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit c5ffe7e1f745984b37b8ffe03b03f3d716a072f3)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/igb/e1000_i210.c b/drivers/net/ethernet/intel/igb/e1000_i210.c
index db96339..f67f8a1 100644
--- a/drivers/net/ethernet/intel/igb/e1000_i210.c
+++ b/drivers/net/ethernet/intel/igb/e1000_i210.c
@@ -365,7 +365,7 @@ static s32 igb_read_invm_word_i210(struct e1000_hw *hw, u8 address, u16 *data)
    word_address = INVM_DWORD_TO_WORD_ADDRESS(invm_dword);
    if (word_address == address) {
     *data = INVM_DWORD_TO_WORD_DATA(invm_dword);
-    hw_dbg("Read INVM Word 0x%02x = %x",
+    hw_dbg("Read INVM Word 0x%02x = %x\n",
        address, *data);
     status = E1000_SUCCESS;
     break;
diff --git a/drivers/net/ethernet/intel/igb/e1000_mac.c b/drivers/net/ethernet/intel/igb/e1000_mac.c
index 5910a93..1e0c404 100644
--- a/drivers/net/ethernet/intel/igb/e1000_mac.c
+++ b/drivers/net/ethernet/intel/igb/e1000_mac.c
@@ -929,11 +929,10 @@ s32 igb_config_fc_after_link_up(struct e1000_hw *hw)
     */
    if (hw->fc.requested_mode == e1000_fc_full) {
     hw->fc.current_mode = e1000_fc_full;
-    hw_dbg("Flow Control = FULL.\r\n");
+    hw_dbg("Flow Control = FULL.\n");
    } else {
     hw->fc.current_mode = e1000_fc_rx_pause;
-    hw_dbg("Flow Control = "
-           "RX PAUSE frames only.\r\n");
+    hw_dbg("Flow Control = RX PAUSE frames only.\n");
    }
   }
   /* For receiving PAUSE frames ONLY.
@@ -948,7 +947,7 @@ s32 igb_config_fc_after_link_up(struct e1000_hw *hw)
      (mii_nway_lp_ability_reg & NWAY_LPAR_PAUSE) &&
      (mii_nway_lp_ability_reg & NWAY_LPAR_ASM_DIR)) {
    hw->fc.current_mode = e1000_fc_tx_pause;
-   hw_dbg("Flow Control = TX PAUSE frames only.\r\n");
+   hw_dbg("Flow Control = TX PAUSE frames only.\n");
   }
   /* For transmitting PAUSE frames ONLY.
    *
@@ -962,7 +961,7 @@ s32 igb_config_fc_after_link_up(struct e1000_hw *hw)
     !(mii_nway_lp_ability_reg & NWAY_LPAR_PAUSE) &&
     (mii_nway_lp_ability_reg & NWAY_LPAR_ASM_DIR)) {
    hw->fc.current_mode = e1000_fc_rx_pause;
-   hw_dbg("Flow Control = RX PAUSE frames only.\r\n");
+   hw_dbg("Flow Control = RX PAUSE frames only.\n");
   }
   /* Per the IEEE spec, at this point flow control should be
    * disabled.  However, we want to consider that we could
@@ -988,10 +987,10 @@ s32 igb_config_fc_after_link_up(struct e1000_hw *hw)
     (hw->fc.requested_mode == e1000_fc_tx_pause) ||
     (hw->fc.strict_ieee)) {
    hw->fc.current_mode = e1000_fc_none;
-   hw_dbg("Flow Control = NONE.\r\n");
+   hw_dbg("Flow Control = NONE.\n");
   } else {
    hw->fc.current_mode = e1000_fc_rx_pause;
-   hw_dbg("Flow Control = RX PAUSE frames only.\r\n");
+   hw_dbg("Flow Control = RX PAUSE frames only.\n");
   }
 
   /* Now we need to do one last check...  If we auto-
diff --git a/drivers/net/ethernet/intel/igb/igb_ptp.c b/drivers/net/ethernet/intel/igb/igb_ptp.c
index 9209d65..ab25e49 100644
--- a/drivers/net/ethernet/intel/igb/igb_ptp.c
+++ b/drivers/net/ethernet/intel/igb/igb_ptp.c
@@ -389,7 +389,7 @@ static void igb_ptp_tx_work(struct work_struct *work)
   adapter->ptp_tx_skb = NULL;
   clear_bit_unlock(__IGB_PTP_TX_IN_PROGRESS, &adapter->state);
   adapter->tx_hwtstamp_timeouts++;
-  dev_warn(&adapter->pdev->dev, "clearing Tx timestamp hang");
+  dev_warn(&adapter->pdev->dev, "clearing Tx timestamp hang\n");
   return;
  }
 
@@ -451,7 +451,7 @@ void igb_ptp_rx_hang(struct igb_adapter *adapter)
   rd32(E1000_RXSTMPH);
   adapter->last_rx_ptp_check = jiffies;
   adapter->rx_hwtstamp_cleared++;
-  dev_warn(&adapter->pdev->dev, "clearing Rx timestamp hang");
+  dev_warn(&adapter->pdev->dev, "clearing Rx timestamp hang\n");
  }
 }
 
-- 
1.7.1