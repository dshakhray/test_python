From 19e1bdb6b95424350cf0548e1f66e09737c1fd51 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Mon, 3 Nov 2014 07:52:24 -0500
Subject: [infiniband] iser: Support IPv6 address family

Message-id: <d9c339619a9c217b7d9ae4f6fa786d4d6cecd58a.1415000301.git.avadai@redhat.com>
Patchwork-id: 98695
O-Subject: [Patch RHEL7.1 26/37] IB/iser: Support IPv6 address family
Bugzilla: 1107622
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Doug Ledford <dledford@redhat.com>

From: Roi Dayan <roid@mellanox.com>

Replace struct sockaddr_in with struct sockaddr which supports both
IPv4 and IPv6, and print using the %pIS format directive.

Signed-off-by: Roi Dayan <roid@mellanox.com>
Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 96ed02d4be3c68527130decd3a7d18240da4bee5)
Signed-off-by: Amir Vadai <amirv@mellanox.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/iser/iscsi_iser.c b/drivers/infiniband/ulp/iser/iscsi_iser.c
index eb79739..1a53fd2 100644
--- a/drivers/infiniband/ulp/iser/iscsi_iser.c
+++ b/drivers/infiniband/ulp/iser/iscsi_iser.c
@@ -604,8 +604,7 @@ iscsi_iser_ep_connect(struct Scsi_Host *shost, struct sockaddr *dst_addr,
  ib_conn->ep = ep;
  iser_conn_init(ib_conn);
 
- err = iser_connect(ib_conn, NULL, (struct sockaddr_in *)dst_addr,
-      non_blocking);
+ err = iser_connect(ib_conn, NULL, dst_addr, non_blocking);
  if (err)
   return ERR_PTR(err);
 
diff --git a/drivers/infiniband/ulp/iser/iscsi_iser.h b/drivers/infiniband/ulp/iser/iscsi_iser.h
index 97cd385..37e9284 100644
--- a/drivers/infiniband/ulp/iser/iscsi_iser.h
+++ b/drivers/infiniband/ulp/iser/iscsi_iser.h
@@ -448,8 +448,8 @@ int  iser_reg_rdma_mem_fastreg(struct iscsi_iser_task *task,
           enum iser_data_dir cmd_dir);
 
 int  iser_connect(struct iser_conn   *ib_conn,
-    struct sockaddr_in *src_addr,
-    struct sockaddr_in *dst_addr,
+    struct sockaddr    *src_addr,
+    struct sockaddr    *dst_addr,
     int                non_blocking);
 
 int  iser_reg_page_vec(struct iser_conn     *ib_conn,
diff --git a/drivers/infiniband/ulp/iser/iser_verbs.c b/drivers/infiniband/ulp/iser/iser_verbs.c
index ea01075..dc0c90f 100644
--- a/drivers/infiniband/ulp/iser/iser_verbs.c
+++ b/drivers/infiniband/ulp/iser/iser_verbs.c
@@ -810,22 +810,19 @@ void iser_conn_init(struct iser_conn *ib_conn)
  * sleeps until the connection is established or rejected
  */
 int iser_connect(struct iser_conn   *ib_conn,
-   struct sockaddr_in *src_addr,
-   struct sockaddr_in *dst_addr,
+   struct sockaddr    *src_addr,
+   struct sockaddr    *dst_addr,
    int                 non_blocking)
 {
- struct sockaddr *src, *dst;
  int err = 0;
 
- sprintf(ib_conn->name, "%pI4:%d",
-  &dst_addr->sin_addr.s_addr, dst_addr->sin_port);
+ sprintf(ib_conn->name, "%pISp", dst_addr);
+
+ iser_info("connecting to: %s\n", ib_conn->name);
 
  /* the device is known only --after-- address resolution */
  ib_conn->device = NULL;
 
- iser_info("connecting to: %pI4, port 0x%x\n",
-    &dst_addr->sin_addr, dst_addr->sin_port);
-
  ib_conn->state = ISER_CONN_PENDING;
 
  ib_conn->cma_id = rdma_create_id(iser_cma_handler,
@@ -837,9 +834,7 @@ int iser_connect(struct iser_conn   *ib_conn,
   goto id_failure;
  }
 
- src = (struct sockaddr *)src_addr;
- dst = (struct sockaddr *)dst_addr;
- err = rdma_resolve_addr(ib_conn->cma_id, src, dst, 1000);
+ err = rdma_resolve_addr(ib_conn->cma_id, src_addr, dst_addr, 1000);
  if (err) {
   iser_err("rdma_resolve_addr failed: %d\n", err);
   goto addr_failure;
-- 
1.7.1