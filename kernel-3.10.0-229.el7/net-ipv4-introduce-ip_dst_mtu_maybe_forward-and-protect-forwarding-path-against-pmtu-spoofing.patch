From 2f2a48c0c69022af77577de750499220b2b4a291 Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Mon, 8 Dec 2014 17:33:06 -0500
Subject: [net] ipv4: introduce ip_dst_mtu_maybe_forward and protect forwarding path against pmtu spoofing

Message-id: <4fd6aa17b6fb78ab56daf8267d44de2fbed960d4.1418058212.git.hannes@redhat.com>
Patchwork-id: 101186
O-Subject: [RHEL7.1 net 10/13] ipv4: introduce ip_dst_mtu_maybe_forward and protect forwarding path against pmtu spoofing
Bugzilla: 1170116
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1170116
Upstream Status: f87c10a8aa1e82498c42d0335524d6ae7cf5a52b
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8344420

I moved IP_MAX_MTU into the header but didn't touch
its value. I leave that to that person, who will backport
734d2725db879f3f6fcdc2b1d2a5deae105f5e95 ("ipv4: raise IP_MAX_MTU to
theoretical limit").

sysctl_ip_fwd_use_pmtu moved to end of struct net because of kabi.

Upstream Commit:
commit f87c10a8aa1e82498c42d0335524d6ae7cf5a52b
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Thu Jan 9 10:01:15 2014 +0100

    ipv4: introduce ip_dst_mtu_maybe_forward and protect forwarding path against pmtu spoofing

    While forwarding we should not use the protocol path mtu to calculate
    the mtu for a forwarded packet but instead use the interface mtu.

    We mark forwarded skbs in ip_forward with IPSKB_FORWARDED, which was
    introduced for multicast forwarding. But as it does not conflict with
    our usage in unicast code path it is perfect for reuse.

    I moved the functions ip_sk_accept_pmtu, ip_sk_use_pmtu and ip_skb_dst_mtu
    along with the new ip_dst_mtu_maybe_forward to net/ip.h to fix circular
    dependencies because of IPSKB_FORWARDED.

    Because someone might have written a software which does probe
    destinations manually and expects the kernel to honour those path mtus
    I introduced a new per-namespace "ip_forward_use_pmtu" knob so someone
    can disable this new behaviour. We also still use mtus which are locked on a
    route for forwarding.

    The reason for this change is, that path mtus information can be injected
    into the kernel via e.g. icmp_err protocol handler without verification
    of local sockets. As such, this could cause the IPv4 forwarding path to
    wrongfully emit fragmentation needed notifications or start to fragment
    packets along a path.

    Tunnel and ipsec output paths clear IPCB again, thus IPSKB_FORWARDED
    won't be set and further fragmentation logic will use the path mtu to
    determine the fragmentation size. They also recheck packet size with
    help of path mtu discovery and report appropriate errors.

    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: David Miller <davem@davemloft.net>
    Cc: John Heffner <johnwheffner@gmail.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/networking/ip-sysctl.txt b/Documentation/networking/ip-sysctl.txt
index f08639b..ad0270f 100644
--- a/Documentation/networking/ip-sysctl.txt
+++ b/Documentation/networking/ip-sysctl.txt
@@ -32,6 +32,19 @@ ip_no_pmtu_disc - INTEGER
 min_pmtu - INTEGER
  default 552 - minimum discovered Path MTU
 
+ip_forward_use_pmtu - BOOLEAN
+ By default we don't trust protocol path MTUs while forwarding
+ because they could be easily forged and can lead to unwanted
+ fragmentation by the router.
+ You only need to enable this if you have user-space software
+ which tries to discover path mtus by itself and depends on the
+ kernel honoring this information. This is normally not the
+ case.
+ Default: 0 (disabled)
+ Possible values:
+ 0 - disabled
+ 1 - enabled
+
 route/max_size - INTEGER
  Maximum number of routes allowed in the kernel.  Increase
  this when using large numbers of interfaces and/or routes.
diff --git a/include/net/ip.h b/include/net/ip.h
index 4accf9a..3992a61 100644
--- a/include/net/ip.h
+++ b/include/net/ip.h
@@ -275,7 +275,40 @@ int ip_dont_fragment(struct sock *sk, struct dst_entry *dst)
    !(dst_metric_locked(dst, RTAX_MTU)));
 }
 
-extern void __ip_select_ident(struct iphdr *iph, struct dst_entry *dst, int more);
+static inline bool ip_sk_accept_pmtu(const struct sock *sk)
+{
+ return inet_sk(sk)->pmtudisc != IP_PMTUDISC_INTERFACE;
+}
+
+static inline bool ip_sk_use_pmtu(const struct sock *sk)
+{
+ return inet_sk(sk)->pmtudisc < IP_PMTUDISC_PROBE;
+}
+
+static inline unsigned int ip_dst_mtu_maybe_forward(const struct dst_entry *dst,
+          bool forwarding)
+{
+ struct net *net = dev_net(dst->dev);
+
+ if (net->sysctl_ip_fwd_use_pmtu ||
+     dst_metric_locked(dst, RTAX_MTU) ||
+     !forwarding)
+  return dst_mtu(dst);
+
+ return min(dst->dev->mtu, IP_MAX_MTU);
+}
+
+static inline unsigned int ip_skb_dst_mtu(const struct sk_buff *skb)
+{
+ if (!skb->sk || ip_sk_use_pmtu(skb->sk)) {
+  bool forwarding = IPCB(skb)->flags & IPSKB_FORWARDED;
+  return ip_dst_mtu_maybe_forward(skb_dst(skb), forwarding);
+ } else {
+  return min(skb_dst(skb)->dev->mtu, IP_MAX_MTU);
+ }
+}
+
+void __ip_select_ident(struct iphdr *iph, struct dst_entry *dst, int more);
 
 static inline void ip_select_ident(struct sk_buff *skb, struct dst_entry *dst, struct sock *sk)
 {
diff --git a/include/net/net_namespace.h b/include/net/net_namespace.h
index f3eaf0a..385ac02 100644
--- a/include/net/net_namespace.h
+++ b/include/net/net_namespace.h
@@ -128,6 +128,7 @@ struct net {
  RH_KABI_EXTEND(unsigned int dev_unreg_count)
  RH_KABI_EXTEND(atomic_t  fnhe_genid)
  RH_KABI_EXTEND(int  sysctl_ip_no_pmtu_disc)
+ RH_KABI_EXTEND(int  sysctl_ip_fwd_use_pmtu)
 };
 
 /*
diff --git a/include/net/route.h b/include/net/route.h
index ce9329d..7a2a254 100644
--- a/include/net/route.h
+++ b/include/net/route.h
@@ -36,6 +36,9 @@
 #include <linux/cache.h>
 #include <linux/security.h>
 
+/* IPv4 datagram length is stored into 16bit field (tot_len) */
+#define IP_MAX_MTU 0xFFF0U
+
 #define RTO_ONLINK 0x01
 
 #define RT_CONN_FLAGS(sk)   (RT_TOS(inet_sk(sk)->tos) | sock_flag(sk, SOCK_LOCALROUTE))
@@ -318,20 +321,4 @@ static inline int ip4_dst_hoplimit(const struct dst_entry *dst)
  return hoplimit;
 }
 
-static inline bool ip_sk_accept_pmtu(const struct sock *sk)
-{
- return inet_sk(sk)->pmtudisc != IP_PMTUDISC_INTERFACE;
-}
-
-static inline bool ip_sk_use_pmtu(const struct sock *sk)
-{
- return inet_sk(sk)->pmtudisc < IP_PMTUDISC_PROBE;
-}
-
-static inline int ip_skb_dst_mtu(const struct sk_buff *skb)
-{
- return (!skb->sk || ip_sk_use_pmtu(skb->sk)) ?
-        dst_mtu(skb_dst(skb)) : skb_dst(skb)->dev->mtu;
-}
-
 #endif /* _ROUTE_H */
diff --git a/net/ipv4/ip_forward.c b/net/ipv4/ip_forward.c
index d4d2724..c2d2534 100644
--- a/net/ipv4/ip_forward.c
+++ b/net/ipv4/ip_forward.c
@@ -71,6 +71,7 @@ static int ip_forward_finish(struct sk_buff *skb)
 
 int ip_forward(struct sk_buff *skb)
 {
+ u32 mtu;
  struct iphdr *iph; /* Our header */
  struct rtable *rt; /* Route we use */
  struct ip_options *opt = &(IPCB(skb)->opt);
@@ -105,10 +106,12 @@ int ip_forward(struct sk_buff *skb)
  if (opt->is_strictroute && rt->rt_uses_gateway)
   goto sr_failed;
 
- if (!ip_may_fragment(skb) && ip_exceeds_mtu(skb, dst_mtu(&rt->dst))) {
+ IPCB(skb)->flags |= IPSKB_FORWARDED;
+ mtu = ip_dst_mtu_maybe_forward(&rt->dst, true);
+ if (!ip_may_fragment(skb) && ip_exceeds_mtu(skb, mtu)) {
   IP_INC_STATS(dev_net(rt->dst.dev), IPSTATS_MIB_FRAGFAILS);
   icmp_send(skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED,
-     htonl(dst_mtu(&rt->dst)));
+     htonl(mtu));
   goto drop;
  }
 
diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index e761287..7554158 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -491,6 +491,7 @@ int ip_fragment(struct sk_buff *skb, int (*output)(struct sk_buff *))
  __be16 not_last_frag;
  struct rtable *rt = skb_rtable(skb);
  int err = 0;
+ bool forwarding = IPCB(skb)->flags & IPSKB_FORWARDED;
 
  dev = rt->dst.dev;
 
@@ -500,12 +501,13 @@ int ip_fragment(struct sk_buff *skb, int (*output)(struct sk_buff *))
 
  iph = ip_hdr(skb);
 
+ mtu = ip_dst_mtu_maybe_forward(&rt->dst, forwarding);
  if (unlikely(((iph->frag_off & htons(IP_DF)) && !skb->local_df) ||
        (IPCB(skb)->frag_max_size &&
-        IPCB(skb)->frag_max_size > dst_mtu(&rt->dst)))) {
+        IPCB(skb)->frag_max_size > mtu))) {
   IP_INC_STATS(dev_net(dev), IPSTATS_MIB_FRAGFAILS);
   icmp_send(skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED,
-     htonl(ip_skb_dst_mtu(skb)));
+     htonl(mtu));
   kfree_skb(skb);
   return -EMSGSIZE;
  }
@@ -515,7 +517,7 @@ int ip_fragment(struct sk_buff *skb, int (*output)(struct sk_buff *))
   */
 
  hlen = iph->ihl * 4;
- mtu = dst_mtu(&rt->dst) - hlen; /* Size of data space */
+ mtu = mtu - hlen; /* Size of data space */
 #ifdef CONFIG_BRIDGE_NETFILTER
  if (skb->nf_bridge)
   mtu -= nf_bridge_mtu_reduction(skb);
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 7a342b4..66b6e57 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -112,8 +112,6 @@
 #define RT_FL_TOS(oldflp4) \
  ((oldflp4)->flowi4_tos & (IPTOS_RT_MASK | RTO_ONLINK))
 
-#define IP_MAX_MTU 0xFFF0
-
 #define RT_GC_TIMEOUT (300*HZ)
 
 static int ip_rt_max_size;
diff --git a/net/ipv4/sysctl_net_ipv4.c b/net/ipv4/sysctl_net_ipv4.c
index 966253f..5e49176 100644
--- a/net/ipv4/sysctl_net_ipv4.c
+++ b/net/ipv4/sysctl_net_ipv4.c
@@ -862,6 +862,13 @@ static struct ctl_table ipv4_net_table[] = {
   .mode  = 0644,
   .proc_handler = proc_dointvec
  },
+ {
+  .procname = "ip_forward_use_pmtu",
+  .data  = &init_net.sysctl_ip_fwd_use_pmtu,
+  .maxlen  = sizeof(int),
+  .mode  = 0644,
+  .proc_handler = proc_dointvec,
+ },
  { }
 };
 
-- 
1.7.1