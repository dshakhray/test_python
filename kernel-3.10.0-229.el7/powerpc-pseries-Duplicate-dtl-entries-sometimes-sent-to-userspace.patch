From 7fdf4a9e8054b04179cd1ecf14a81f92d15099c7 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:07:02 -0400
Subject: [powerpc] pseries: Duplicate dtl entries sometimes sent to userspace

Message-id: <1410545655-205645-194-git-send-email-dzickus@redhat.com>
Patchwork-id: 94293
O-Subject: [RHEL7 PATCH 193/626] powerpc/pseries: Duplicate dtl entries sometimes sent to userspace
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 84b073868b9d9e754ae48b828337633d1b386482
Author: Anton Blanchard <anton@samba.org>
Date:   Sun Nov 17 11:39:05 2013 +1100

    powerpc/pseries: Duplicate dtl entries sometimes sent to userspace

    When reading from the dispatch trace log (dtl) userspace interface, I
    sometimes see duplicate entries. One example:

    # hexdump -C dtl.out

    00000000  07 04 00 0c 00 00 48 44  00 00 00 00 00 00 00 00
    00000010  00 0c a0 b4 16 83 6d 68  00 00 00 00 00 00 00 00
    00000020  00 00 00 00 10 00 13 50  80 00 00 00 00 00 d0 32

    00000030  07 04 00 0c 00 00 48 44  00 00 00 00 00 00 00 00
    00000040  00 0c a0 b4 16 83 6d 68  00 00 00 00 00 00 00 00
    00000050  00 00 00 00 10 00 13 50  80 00 00 00 00 00 d0 32

    The problem is in scan_dispatch_log() where we call dtl_consumer()
    but bail out before incrementing the index.

    To fix this I moved dtl_consumer() after the timebase comparison.

    Signed-off-by: Anton Blanchard <anton@samba.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index b2bcd34..dee20bd 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -213,8 +213,6 @@ static u64 scan_dispatch_log(u64 stop_tb)
  if (i == be64_to_cpu(vpa->dtl_idx))
   return 0;
  while (i < be64_to_cpu(vpa->dtl_idx)) {
-  if (dtl_consumer)
-   dtl_consumer(dtl, i);
   dtb = be64_to_cpu(dtl->timebase);
   tb_delta = be32_to_cpu(dtl->enqueue_to_dispatch_time) +
    be32_to_cpu(dtl->ready_to_enqueue_time);
@@ -227,6 +225,8 @@ static u64 scan_dispatch_log(u64 stop_tb)
   }
   if (dtb > stop_tb)
    break;
+  if (dtl_consumer)
+   dtl_consumer(dtl, i);
   stolen += tb_delta;
   ++i;
   ++dtl;
-- 
1.7.1