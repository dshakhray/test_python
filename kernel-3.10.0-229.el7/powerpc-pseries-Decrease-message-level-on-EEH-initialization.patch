From d84ce2486750673ceb7e77cd741c3e80030fdf7a Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Wed, 3 Dec 2014 18:40:49 -0500
Subject: [powerpc] pseries: Decrease message level on EEH initialization

Message-id: <1417632050-27363-2-git-send-email-gduarte@redhat.com>
Patchwork-id: 101116
O-Subject: [RHEL7.1 PATCH BZ 1156651 1/2] powerpc/pseries: Decrease message level on EEH initialization
Bugzilla: 1156651
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ 1156651
Upstream Status: 4ba5a0fc6441194cf238e1a049f548b5d45760c8

commit 4ba5a0fc6441194cf238e1a049f548b5d45760c8
Author: Gavin Shan <gwshan@linux.vnet.ibm.com>
Date:   Tue Sep 30 12:39:04 2014 +1000

    powerpc/pseries: Decrease message level on EEH initialization

    As Anton suggested, the patch decreases the message level on EEH
    initialization to avoid unnecessary messages if required. Also,
    we have unified hint if any of needful RTAS calls is missed, and
    then we can check /proc/device-tree to figure out the missed RTAS
    calls.

    Suggested-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/platforms/pseries/eeh_pseries.c b/arch/powerpc/platforms/pseries/eeh_pseries.c
index 0bec0c0..a919da0 100644
--- a/arch/powerpc/platforms/pseries/eeh_pseries.c
+++ b/arch/powerpc/platforms/pseries/eeh_pseries.c
@@ -88,29 +88,14 @@ static int pseries_eeh_init(void)
   * and its variant since the old firmware probably support address
   * of domain/bus/slot/function for EEH RTAS operations.
   */
- if (ibm_set_eeh_option == RTAS_UNKNOWN_SERVICE) {
-  pr_warning("%s: RTAS service <ibm,set-eeh-option> invalid\n",
-   __func__);
-  return -EINVAL;
- } else if (ibm_set_slot_reset == RTAS_UNKNOWN_SERVICE) {
-  pr_warning("%s: RTAS service <ibm,set-slot-reset> invalid\n",
-   __func__);
-  return -EINVAL;
- } else if (ibm_read_slot_reset_state2 == RTAS_UNKNOWN_SERVICE &&
-     ibm_read_slot_reset_state == RTAS_UNKNOWN_SERVICE) {
-  pr_warning("%s: RTAS service <ibm,read-slot-reset-state2> and "
-   "<ibm,read-slot-reset-state> invalid\n",
-   __func__);
-  return -EINVAL;
- } else if (ibm_slot_error_detail == RTAS_UNKNOWN_SERVICE) {
-  pr_warning("%s: RTAS service <ibm,slot-error-detail> invalid\n",
-   __func__);
-  return -EINVAL;
- } else if (ibm_configure_pe == RTAS_UNKNOWN_SERVICE &&
-     ibm_configure_bridge == RTAS_UNKNOWN_SERVICE) {
-  pr_warning("%s: RTAS service <ibm,configure-pe> and "
-   "<ibm,configure-bridge> invalid\n",
-   __func__);
+ if (ibm_set_eeh_option == RTAS_UNKNOWN_SERVICE  ||
+     ibm_set_slot_reset == RTAS_UNKNOWN_SERVICE  ||
+     (ibm_read_slot_reset_state2 == RTAS_UNKNOWN_SERVICE &&
+      ibm_read_slot_reset_state == RTAS_UNKNOWN_SERVICE) ||
+     ibm_slot_error_detail == RTAS_UNKNOWN_SERVICE ||
+     (ibm_configure_pe == RTAS_UNKNOWN_SERVICE  &&
+      ibm_configure_bridge == RTAS_UNKNOWN_SERVICE)) {
+  pr_info("EEH functionality not supported\n");
   return -EINVAL;
  }
 
@@ -118,11 +103,11 @@ static int pseries_eeh_init(void)
  spin_lock_init(&slot_errbuf_lock);
  eeh_error_buf_size = rtas_token("rtas-error-log-max");
  if (eeh_error_buf_size == RTAS_UNKNOWN_SERVICE) {
-  pr_warning("%s: unknown EEH error log size\n",
+  pr_info("%s: unknown EEH error log size\n",
    __func__);
   eeh_error_buf_size = 1024;
  } else if (eeh_error_buf_size > RTAS_ERROR_LOG_MAX) {
-  pr_warning("%s: EEH error log size %d exceeds the maximal %d\n",
+  pr_info("%s: EEH error log size %d exceeds the maximal %d\n",
    __func__, eeh_error_buf_size, RTAS_ERROR_LOG_MAX);
   eeh_error_buf_size = RTAS_ERROR_LOG_MAX;
  }
-- 
1.7.1