From e82a77532700353f8e39935ce4e3d63e6c5850a4 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:50:52 -0400
Subject: [tools] perf/symbols: Clarify method to get DSO binary_type filename

Message-id: <1408953210-26343-165-git-send-email-jolsa@redhat.com>
Patchwork-id: 88880
O-Subject: [PATCH RHEL7.1 BZ1133083 164/322] perf symbols: Clarify method to get DSO binary_type filename
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit ee4e9625c8d4ec3a35322a882f7b6e035d2a1ad5
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Mon Dec 16 17:03:18 2013 -0300

description
===========
Using dso__binary_type_file() make it look like this function will
return a file, not just its filename, so rename it to:

 dso__read_binary_type_filename()

to make its purpose clear, just like we have:

 dso__read_running_kernel_build_id()
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/dso.c b/tools/perf/util/dso.c
index e7f4449..eef1662 100644
--- a/tools/perf/util/dso.c
+++ b/tools/perf/util/dso.c
@@ -28,8 +28,9 @@ char dso__symtab_origin(const struct dso *dso)
  return origin[dso->symtab_type];
 }
 
-int dso__binary_type_file(const struct dso *dso, enum dso_binary_type type,
-     char *root_dir, char *filename, size_t size)
+int dso__read_binary_type_filename(const struct dso *dso,
+       enum dso_binary_type type,
+       char *root_dir, char *filename, size_t size)
 {
  char build_id_hex[BUILD_ID_SIZE * 2 + 1];
  int ret = 0;
@@ -137,19 +138,18 @@ int dso__binary_type_file(const struct dso *dso, enum dso_binary_type type,
 
 static int open_dso(struct dso *dso, struct machine *machine)
 {
- char *root_dir = (char *) "";
- char *name;
  int fd;
+ char *root_dir = (char *)"";
+ char *name = malloc(PATH_MAX);
 
- name = malloc(PATH_MAX);
  if (!name)
   return -ENOMEM;
 
  if (machine)
   root_dir = machine->root_dir;
 
- if (dso__binary_type_file(dso, dso->data_type,
-      root_dir, name, PATH_MAX)) {
+ if (dso__read_binary_type_filename(dso, dso->data_type,
+         root_dir, name, PATH_MAX)) {
   free(name);
   return -EINVAL;
  }
diff --git a/tools/perf/util/dso.h b/tools/perf/util/dso.h
index e1cc506..aa33847 100644
--- a/tools/perf/util/dso.h
+++ b/tools/perf/util/dso.h
@@ -128,8 +128,8 @@ void dso__read_running_kernel_build_id(struct dso *dso,
 int dso__kernel_module_get_build_id(struct dso *dso, const char *root_dir);
 
 char dso__symtab_origin(const struct dso *dso);
-int dso__binary_type_file(const struct dso *dso, enum dso_binary_type type,
-     char *root_dir, char *filename, size_t size);
+int dso__read_binary_type_filename(const struct dso *dso, enum dso_binary_type type,
+       char *root_dir, char *filename, size_t size);
 
 int dso__data_fd(struct dso *dso, struct machine *machine);
 ssize_t dso__data_read_offset(struct dso *dso, struct machine *machine,
diff --git a/tools/perf/util/symbol.c b/tools/perf/util/symbol.c
index 61eb1cd..9ee4b80 100644
--- a/tools/perf/util/symbol.c
+++ b/tools/perf/util/symbol.c
@@ -1258,8 +1258,8 @@ int dso__load(struct dso *dso, struct map *map, symbol_filter_t filter)
 
   enum dso_binary_type symtab_type = binary_type_symtab[i];
 
-  if (dso__binary_type_file(dso, symtab_type,
-       root_dir, name, PATH_MAX))
+  if (dso__read_binary_type_filename(dso, symtab_type,
+         root_dir, name, PATH_MAX))
    continue;
 
   /* Name is now the name of the next image to try */
-- 
1.7.1