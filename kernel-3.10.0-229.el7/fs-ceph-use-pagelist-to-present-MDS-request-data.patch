From 22143276a934d772629ee26af8a751d819d3b3a3 Mon Sep 17 00:00:00 2001
From: Ilya Dryomov <ilya.dryomov@inktank.com>
Date: Tue, 18 Nov 2014 15:49:46 -0500
Subject: [fs] ceph: use pagelist to present MDS request data
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1416325805-26490-32-git-send-email-idryomov@redhat.com>
Patchwork-id: 100223
O-Subject: [RHEL7.1 PATCH 31/50] ceph: use pagelist to present MDS request data
Bugzilla: 1165232
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Sage Weil <sweil@redhat.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>

From: "Yan, Zheng" <zyan@redhat.com>

Current code uses page array to present MDS request data. Pages in the
array are allocated/freed by caller of ceph_mdsc_do_request(). If request
is interrupted, the pages can be freed while they are still being used by
the request message.

The fix is use pagelist to present MDS request data. Pagelist is
reference counted.

Signed-off-by: Yan, Zheng <zyan@redhat.com>
Reviewed-by: Sage Weil <sage@redhat.com>
(cherry picked from commit 25e6bae356502cde283f1804111b44e6fad20fc2)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/mds_client.c b/fs/ceph/mds_client.c
index b4430ce..f8f774e 100644
--- a/fs/ceph/mds_client.c
+++ b/fs/ceph/mds_client.c
@@ -543,6 +543,8 @@ void ceph_mdsc_release_request(struct kref *kref)
  }
  kfree(req->r_path1);
  kfree(req->r_path2);
+ if (req->r_pagelist)
+  ceph_pagelist_release(req->r_pagelist);
  put_request_session(req);
  ceph_unreserve_caps(req->r_mdsc, &req->r_caps_reservation);
  kfree(req);
@@ -1916,13 +1918,15 @@ static struct ceph_msg *create_request_message(struct ceph_mds_client *mdsc,
  msg->front.iov_len = p - msg->front.iov_base;
  msg->hdr.front_len = cpu_to_le32(msg->front.iov_len);
 
- if (req->r_data_len) {
-  /* outbound data set only by ceph_sync_setxattr() */
-  BUG_ON(!req->r_pages);
-  ceph_msg_data_add_pages(msg, req->r_pages, req->r_data_len, 0);
+ if (req->r_pagelist) {
+  struct ceph_pagelist *pagelist = req->r_pagelist;
+  atomic_inc(&pagelist->refcnt);
+  ceph_msg_data_add_pagelist(msg, pagelist);
+  msg->hdr.data_len = cpu_to_le32(pagelist->length);
+ } else {
+  msg->hdr.data_len = 0;
  }
 
- msg->hdr.data_len = cpu_to_le32(req->r_data_len);
  msg->hdr.data_off = cpu_to_le16(0);
 
 out_free2:
diff --git a/fs/ceph/mds_client.h b/fs/ceph/mds_client.h
index e00737c..23015f7 100644
--- a/fs/ceph/mds_client.h
+++ b/fs/ceph/mds_client.h
@@ -202,9 +202,7 @@ struct ceph_mds_request {
  bool r_direct_is_hash;  /* true if r_direct_hash is valid */
 
  /* data payload is used for xattr ops */
- struct page **r_pages;
- int r_num_pages;
- int r_data_len;
+ struct ceph_pagelist *r_pagelist;
 
  /* what caps shall we drop? */
  int r_inode_drop, r_inode_unless;
diff --git a/fs/ceph/xattr.c b/fs/ceph/xattr.c
index b7593da..4f17b39 100644
--- a/fs/ceph/xattr.c
+++ b/fs/ceph/xattr.c
@@ -1,4 +1,5 @@
 #include <linux/ceph/ceph_debug.h>
+#include <linux/ceph/pagelist.h>
 
 #include "super.h"
 #include "mds_client.h"
@@ -829,35 +830,25 @@ static int ceph_sync_setxattr(struct dentry *dentry, const char *name,
  struct ceph_inode_info *ci = ceph_inode(inode);
  struct ceph_mds_request *req;
  struct ceph_mds_client *mdsc = fsc->mdsc;
+ struct ceph_pagelist *pagelist = NULL;
  int err;
- int i, nr_pages;
- struct page **pages = NULL;
- void *kaddr;
-
- /* copy value into some pages */
- nr_pages = calc_pages_for(0, size);
- if (nr_pages) {
-  pages = kmalloc(sizeof(pages[0])*nr_pages, GFP_NOFS);
-  if (!pages)
+
+ if (value) {
+  /* copy value into pagelist */
+  pagelist = kmalloc(sizeof(*pagelist), GFP_NOFS);
+  if (!pagelist)
    return -ENOMEM;
-  err = -ENOMEM;
-  for (i = 0; i < nr_pages; i++) {
-   pages[i] = __page_cache_alloc(GFP_NOFS);
-   if (!pages[i]) {
-    nr_pages = i;
-    goto out;
-   }
-   kaddr = kmap(pages[i]);
-   memcpy(kaddr, value + i*PAGE_CACHE_SIZE,
-          min(PAGE_CACHE_SIZE, size-i*PAGE_CACHE_SIZE));
-  }
+
+  ceph_pagelist_init(pagelist);
+  err = ceph_pagelist_append(pagelist, value, size);
+  if (err)
+   goto out;
+ } else {
+  flags |= CEPH_XATTR_REMOVE;
  }
 
  dout("setxattr value=%.*s\n", (int)size, value);
 
- if (!value)
-  flags |= CEPH_XATTR_REMOVE;
-
  /* do request */
  req = ceph_mdsc_create_request(mdsc, CEPH_MDS_OP_SETXATTR,
            USE_AUTH_MDS);
@@ -872,9 +863,8 @@ static int ceph_sync_setxattr(struct dentry *dentry, const char *name,
  req->r_args.setxattr.flags = cpu_to_le32(flags);
  req->r_path2 = kstrdup(name, GFP_NOFS);
 
- req->r_pages = pages;
- req->r_num_pages = nr_pages;
- req->r_data_len = size;
+ req->r_pagelist = pagelist;
+ pagelist = NULL;
 
  dout("xattr.ver (before): %lld\n", ci->i_xattrs.version);
  err = ceph_mdsc_do_request(mdsc, NULL, req);
@@ -882,11 +872,8 @@ static int ceph_sync_setxattr(struct dentry *dentry, const char *name,
  dout("xattr.ver (after): %lld\n", ci->i_xattrs.version);
 
 out:
- if (pages) {
-  for (i = 0; i < nr_pages; i++)
-   __free_page(pages[i]);
-  kfree(pages);
- }
+ if (pagelist)
+  ceph_pagelist_release(pagelist);
  return err;
 }
 
-- 
1.7.1