From d893878eab2f577d7a5b19878a69d0a322a727ab Mon Sep 17 00:00:00 2001
From: Denys Vlasenko <dvlasenk@redhat.com>
Date: Mon, 7 Jul 2014 18:24:36 -0400
Subject: [target] rd: Refactor rd_build_device_space + rd_release_device_space

Message-id: <1404757476-29232-1-git-send-email-dvlasenk@redhat.com>
Patchwork-id: 85289
O-Subject: [PATCH RHEL7 BZ 1108755] target/rd: Refactor rd_build_device_space + rd_release_device_space
Bugzilla: 1108755
CVE: CVE-2014-4027
RH-Acked-by: Don Zickus <dzickus@redhat.com>

CVE-2014-4027:
BZ:
https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=1108755

Brew build:
https://brewweb.devel.redhat.com/taskinfo?taskID=7673428

The core of the fix is added "memset(p, init_payload, PAGE_SIZE)"
call, but to facilitate future backporting, the entire
upstream commit which added this memset is backported.
The rest of the upstream commit just refactors code,
without substantive changes to the logic.

Upstream status of the patch:
upstream commit 4442dc8a92b8f9ad8ee9e7f8438f4c04c03a22dc
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Tue Jan 7 22:40:27 2014 +0000

    target/rd: Refactor rd_build_device_space + rd_release_device_space

    This patch refactors rd_build_device_space() + rd_release_device_space()
    into rd_allocate_sgl_table() + rd_release_device_space() so that they
    may be used seperatly for setup + release of protection information
    scatterlists.

    Also add explicit memset of pages within rd_allocate_sgl_table() based
    upon passed 'init_payload' value.

    v2 changes:
      - Drop unused sg_table from rd_release_device_space (Wei)

Test Status:
Only compile-tested.

Signed-off-by: Denys Vlasenko <dvlasenk@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/target/target_core_rd.c b/drivers/target/target_core_rd.c
index 5c3b677..65105e3 100644
--- a/drivers/target/target_core_rd.c
+++ b/drivers/target/target_core_rd.c
@@ -79,23 +79,14 @@ static void rd_detach_hba(struct se_hba *hba)
  hba->hba_ptr = NULL;
 }
 
-/* rd_release_device_space():
- *
- *
- */
-static void rd_release_device_space(struct rd_dev *rd_dev)
+static u32 rd_release_sgl_table(struct rd_dev *rd_dev, struct rd_dev_sg_table *sg_table,
+     u32 sg_table_count)
 {
- u32 i, j, page_count = 0, sg_per_table;
- struct rd_dev_sg_table *sg_table;
  struct page *pg;
  struct scatterlist *sg;
+ u32 i, j, page_count = 0, sg_per_table;
 
- if (!rd_dev->sg_table_array || !rd_dev->sg_table_count)
-  return;
-
- sg_table = rd_dev->sg_table_array;
-
- for (i = 0; i < rd_dev->sg_table_count; i++) {
+ for (i = 0; i < sg_table_count; i++) {
   sg = sg_table[i].sg_table;
   sg_per_table = sg_table[i].rd_sg_count;
 
@@ -106,16 +97,28 @@ static void rd_release_device_space(struct rd_dev *rd_dev)
     page_count++;
    }
   }
-
   kfree(sg);
  }
 
+ kfree(sg_table);
+ return page_count;
+}
+
+static void rd_release_device_space(struct rd_dev *rd_dev)
+{
+ u32 page_count;
+
+ if (!rd_dev->sg_table_array || !rd_dev->sg_table_count)
+  return;
+
+ page_count = rd_release_sgl_table(rd_dev, rd_dev->sg_table_array,
+       rd_dev->sg_table_count);
+
  pr_debug("CORE_RD[%u] - Released device space for Ramdisk"
   " Device ID: %u, pages %u in %u tables total bytes %lu\n",
   rd_dev->rd_host->rd_host_id, rd_dev->rd_dev_id, page_count,
   rd_dev->sg_table_count, (unsigned long)page_count * PAGE_SIZE);
 
- kfree(sg_table);
  rd_dev->sg_table_array = NULL;
  rd_dev->sg_table_count = 0;
 }
@@ -125,33 +128,15 @@ static void rd_release_device_space(struct rd_dev *rd_dev)
  *
  *
  */
-static int rd_build_device_space(struct rd_dev *rd_dev)
+static int rd_allocate_sgl_table(struct rd_dev *rd_dev, struct rd_dev_sg_table *sg_table,
+     u32 total_sg_needed, unsigned char init_payload)
 {
- u32 i = 0, j, page_offset = 0, sg_per_table, sg_tables, total_sg_needed;
+ u32 i = 0, j, page_offset = 0, sg_per_table;
  u32 max_sg_per_table = (RD_MAX_ALLOCATION_SIZE /
     sizeof(struct scatterlist));
- struct rd_dev_sg_table *sg_table;
  struct page *pg;
  struct scatterlist *sg;
-
- if (rd_dev->rd_page_count <= 0) {
-  pr_err("Illegal page count: %u for Ramdisk device\n",
-   rd_dev->rd_page_count);
-  return -EINVAL;
- }
- total_sg_needed = rd_dev->rd_page_count;
-
- sg_tables = (total_sg_needed / max_sg_per_table) + 1;
-
- sg_table = kzalloc(sg_tables * sizeof(struct rd_dev_sg_table), GFP_KERNEL);
- if (!sg_table) {
-  pr_err("Unable to allocate memory for Ramdisk"
-   " scatterlist tables\n");
-  return -ENOMEM;
- }
-
- rd_dev->sg_table_array = sg_table;
- rd_dev->sg_table_count = sg_tables;
+ unsigned char *p;
 
  while (total_sg_needed) {
   sg_per_table = (total_sg_needed > max_sg_per_table) ?
@@ -182,16 +167,59 @@ static int rd_build_device_space(struct rd_dev *rd_dev)
    }
    sg_assign_page(&sg[j], pg);
    sg[j].length = PAGE_SIZE;
+
+   p = kmap(pg);
+   memset(p, init_payload, PAGE_SIZE);
+   kunmap(pg);
   }
 
   page_offset += sg_per_table;
   total_sg_needed -= sg_per_table;
  }
 
+ return 0;
+}
+
+static int rd_build_device_space(struct rd_dev *rd_dev)
+{
+ struct rd_dev_sg_table *sg_table;
+ u32 sg_tables, total_sg_needed;
+ u32 max_sg_per_table = (RD_MAX_ALLOCATION_SIZE /
+    sizeof(struct scatterlist));
+ int rc;
+
+ if (rd_dev->rd_page_count <= 0) {
+  pr_err("Illegal page count: %u for Ramdisk device\n",
+         rd_dev->rd_page_count);
+  return -EINVAL;
+ }
+
+ /* Don't need backing pages for NULLIO */
+ if (rd_dev->rd_flags & RDF_NULLIO)
+  return 0;
+
+ total_sg_needed = rd_dev->rd_page_count;
+
+ sg_tables = (total_sg_needed / max_sg_per_table) + 1;
+
+ sg_table = kzalloc(sg_tables * sizeof(struct rd_dev_sg_table), GFP_KERNEL);
+ if (!sg_table) {
+  pr_err("Unable to allocate memory for Ramdisk"
+         " scatterlist tables\n");
+  return -ENOMEM;
+ }
+
+ rd_dev->sg_table_array = sg_table;
+ rd_dev->sg_table_count = sg_tables;
+
+ rc = rd_allocate_sgl_table(rd_dev, sg_table, total_sg_needed, 0x00);
+ if (rc)
+  return rc;
+
  pr_debug("CORE_RD[%u] - Built Ramdisk Device ID: %u space of"
-  " %u pages in %u tables\n", rd_dev->rd_host->rd_host_id,
-  rd_dev->rd_dev_id, rd_dev->rd_page_count,
-  rd_dev->sg_table_count);
+   " %u pages in %u tables\n", rd_dev->rd_host->rd_host_id,
+   rd_dev->rd_dev_id, rd_dev->rd_page_count,
+   rd_dev->sg_table_count);
 
  return 0;
 }
-- 
1.7.1