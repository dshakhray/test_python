From d34341b14a55cb9a35f97ec76470d8cec3c95ed1 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 2 Dec 2014 21:03:34 -0500
Subject: [scsi] Use new KABI macros

Message-id: <1417554215-238434-10-git-send-email-dzickus@redhat.com>
Patchwork-id: 101095
O-Subject: [RHEL7 PATCH 09/10] kabi, include/scsi: Use new KABI macros
Bugzilla: 1164383
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1164383
Upstream: RHEL only

Convert some of the include/scsi GENKSYMS usage to use the new kabi macros.

Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Don Zickus <dzickus@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/scsi/scsi_cmnd.h b/include/scsi/scsi_cmnd.h
index 024c4b4..9b1ebe6 100644
--- a/include/scsi/scsi_cmnd.h
+++ b/include/scsi/scsi_cmnd.h
@@ -9,6 +9,8 @@
 #include <linux/scatterlist.h>
 #include <scsi/scsi_device.h>
 
+#include <linux/rh_kabi.h>
+
 struct Scsi_Host;
 struct scsi_device;
 struct scsi_driver;
@@ -138,10 +140,10 @@ struct scsi_cmnd {
   * The following padding has been inserted before ABI freeze to
   * allow extending the structure while preserve ABI.
   */
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
- void   (*rh_reserved4)(void);
+ RH_KABI_RESERVE_P(1)
+ RH_KABI_RESERVE_P(2)
+ RH_KABI_RESERVE_P(3)
+ RH_KABI_RESERVE_P(4)
 
 };
 
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index 5ea7ef5..cb6d9c1 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -8,6 +8,8 @@
 #include <scsi/scsi.h>
 #include <linux/atomic.h>
 
+#include <linux/rh_kabi.h>
+
 struct device;
 struct request_queue;
 struct scsi_cmnd;
@@ -210,24 +212,10 @@ struct scsi_device {
 
 #define SCSI_VPD_PG_LEN                255
 
-#ifndef __GENKSYMS__
- unsigned char *vpd_pg83;
- union {
-  int vpd_pg83_len;
-  void *vpd_reserved2;
- };
- unsigned char *vpd_pg80;
- union {
-  int vpd_pg80_len;
-  void *vpd_reserved4;
- };
-#else
- void *vpd_reserved1;
- void *vpd_reserved2;
- void *vpd_reserved3;
- void *vpd_reserved4;
-#endif
-
+ RH_KABI_REPLACE_P(void *vpd_reserved1, unsigned char *vpd_pg83)
+ RH_KABI_REPLACE(void *vpd_reserved2, int vpd_pg83_len)
+ RH_KABI_REPLACE_P(void *vpd_reserved3, unsigned char *vpd_pg80)
+ RH_KABI_REPLACE(void *vpd_reserved4, int vpd_pg80_len)
  char vpd_reserved5;
  char vpd_reserved6;
  char vpd_reserved7;
@@ -235,12 +223,12 @@ struct scsi_device {
 
  spinlock_t vpd_reserved9;
 
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
- void   (*rh_reserved4)(void);
- void   (*rh_reserved5)(void);
- void   (*rh_reserved6)(void);
+ RH_KABI_RESERVE_P(1)
+ RH_KABI_RESERVE_P(2)
+ RH_KABI_RESERVE_P(3)
+ RH_KABI_RESERVE_P(4)
+ RH_KABI_RESERVE_P(5)
+ RH_KABI_RESERVE_P(6)
 
  atomic_t scsi_mq_reserved1;
  atomic_t scsi_mq_reserved2;
@@ -358,10 +346,10 @@ struct scsi_target {
   * The following padding has been inserted before ABI freeze to
   * allow extending the structure while preserve ABI.
   */
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
- void   (*rh_reserved4)(void);
+ RH_KABI_RESERVE_P(1)
+ RH_KABI_RESERVE_P(2)
+ RH_KABI_RESERVE_P(3)
+ RH_KABI_RESERVE_P(4)
 
  atomic_t  scsi_mq_reserved1;
  atomic_t  scsi_mq_reserved2;
diff --git a/include/scsi/scsi_host.h b/include/scsi/scsi_host.h
index b8b44ff..ade595f 100644
--- a/include/scsi/scsi_host.h
+++ b/include/scsi/scsi_host.h
@@ -9,6 +9,8 @@
 #include <linux/seq_file.h>
 #include <scsi/scsi.h>
 
+#include <linux/rh_kabi.h>
+
 struct request_queue;
 struct block_device;
 struct completion;
@@ -531,25 +533,18 @@ struct scsi_host_template {
   * The following padding has been inserted before ABI freeze to
   * allow extending the structure while preserve ABI.
   */
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
- void   (*rh_reserved4)(void);
+ RH_KABI_RESERVE_P(1)
+ RH_KABI_RESERVE_P(2)
+ RH_KABI_RESERVE_P(3)
+ RH_KABI_RESERVE_P(4)
 
-#ifdef __GENKSYMS__
- unsigned int scsi_mq_reserved1;
- unsigned int scsi_mq_reserved2;
- void *scsi_mq_reserved3;
- void *scsi_mq_reserved4;
-#else
  /*
   * Additional per-command data allocated for the driver.
   */
- unsigned int cmd_size;
+ RH_KABI_REPLACE(unsigned int scsi_mq_reserved1, unsigned int cmd_size)
  unsigned int scsi_mq_reserved2;
- struct scsi_host_cmd_pool *cmd_pool;
+ RH_KABI_REPLACE(void *scsi_mq_reserved3, struct scsi_host_cmd_pool *cmd_pool)
  void *scsi_mq_reserved4;
-#endif
 };
 
 /*
@@ -784,12 +779,12 @@ struct Scsi_Host {
   * The following padding has been inserted before ABI freeze to
   * allow extending the structure while preserve ABI.
   */
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
- void   (*rh_reserved4)(void);
- void   (*rh_reserved5)(void);
- void   (*rh_reserved6)(void);
+ RH_KABI_RESERVE_P(1)
+ RH_KABI_RESERVE_P(2)
+ RH_KABI_RESERVE_P(3)
+ RH_KABI_RESERVE_P(4)
+ RH_KABI_RESERVE_P(5)
+ RH_KABI_RESERVE_P(6)
 
  unsigned int scsi_mq_reserved1;
  unsigned int scsi_mq_reserved2;
-- 
1.7.1