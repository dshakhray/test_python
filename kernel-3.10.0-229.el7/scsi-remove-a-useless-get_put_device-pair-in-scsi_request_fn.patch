From 889c3c6c1f34f361345a6c69be66e4eac2da8e61 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:37:07 -0400
Subject: [scsi] remove a useless get_put_device pair in scsi_request_fn

Message-id: <1402670238-13916-140-git-send-email-snitzer@redhat.com>
Patchwork-id: 83898
O-Subject: [RHEL7.1 PATCH 139/150] scsi: remove a useless get_put_device pair in scsi_request_fn
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Paolo Bonzini <pbonzini@redhat.com>

BZ: 1105204

Upstream commit 613be1f626e602c6744101a003e8fc5c180e1af9
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Feb 20 14:20:56 2014 -0800

    [SCSI] remove a useless get/put_device pair in scsi_request_fn

    SCSI devices may only be removed by calling scsi_remove_device().
    That function must invoke blk_cleanup_queue() before the final put
    of sdev->sdev_gendev. Since blk_cleanup_queue() waits for the
    block queue to drain and then tears it down, scsi_request_fn cannot
    be active anymore after blk_cleanup_queue() has returned and hence
    the get_device()/put_device() pair in scsi_request_fn is unnecessary.

    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Mike Christie <michaelc@cs.wisc.edu>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index 92b5d8d..a7d6a2d 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -1588,16 +1588,14 @@ static void scsi_softirq_done(struct request *rq)
  * Lock status: IO request lock assumed to be held when called.
  */
 static void scsi_request_fn(struct request_queue *q)
+ __releases(q->queue_lock)
+ __acquires(q->queue_lock)
 {
  struct scsi_device *sdev = q->queuedata;
  struct Scsi_Host *shost;
  struct scsi_cmnd *cmd;
  struct request *req;
 
- if(!get_device(&sdev->sdev_gendev))
-  /* We must be tearing the block queue down already */
-  return;
-
  /*
   * To start with, we keep looping until the queue is empty, or until
   * the host is no longer able to accept any more requests.
@@ -1686,7 +1684,7 @@ static void scsi_request_fn(struct request_queue *q)
    goto out_delay;
  }
 
- goto out;
+ return;
 
  not_ready:
  spin_unlock_irq(shost->host_lock);
@@ -1705,12 +1703,6 @@ static void scsi_request_fn(struct request_queue *q)
 out_delay:
  if (sdev->device_busy == 0)
   blk_delay_queue(q, SCSI_QUEUE_DELAY);
-out:
- /* must be careful here...if we trigger the ->remove() function
-  * we cannot be holding the q lock */
- spin_unlock_irq(q->queue_lock);
- put_device(&sdev->sdev_gendev);
- spin_lock_irq(q->queue_lock);
 }
 
 u64 scsi_calculate_bounce_limit(struct Scsi_Host *shost)
-- 
1.7.1