From 6d7d1485cd26dd4e44771a9aa9dd5d94dead85e4 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 16:14:01 -0400
Subject: [ethernet] be2net: move async cmd processing to a separate routine

Message-id: <1410192881-30702-39-git-send-email-ivecera@redhat.com>
Patchwork-id: 92471
O-Subject: [RHEL7.1 PATCH 38/78] be2net: move async cmd processing to a separate routine
Bugzilla: 1088575
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>

BZ: #1088575

Upstream commit(s):
commit 559b633f426dabed1e4ab91c41b7bf8ff2b07367
Author: Sathya Perla <sathya.perla@emulex.com>
Date:   Fri May 30 19:06:27 2014 +0530

    be2net: move async cmd processing to a separate routine

    For some FW cmds, the caller just issues the cmd and doesn't wait for a
    response. The response handling is done in the MCCQ compl processing context
    only. Move this code into a separate routine to make be_mcc_compl_process()
    more manageable.

    Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/emulex/benet/be_cmds.c b/drivers/net/ethernet/emulex/benet/be_cmds.c
index ce47c0c..7a264eb 100644
--- a/drivers/net/ethernet/emulex/benet/be_cmds.c
+++ b/drivers/net/ethernet/emulex/benet/be_cmds.c
@@ -132,6 +132,58 @@ static bool be_skip_err_log(u8 opcode, u16 base_status, u16 addl_status)
   return false;
 }
 
+/* Place holder for all the async MCC cmds wherein the caller is not in a busy
+ * loop (has not issued be_mcc_notify_wait())
+ */
+static void be_async_cmd_process(struct be_adapter *adapter,
+     struct be_mcc_compl *compl,
+     struct be_cmd_resp_hdr *resp_hdr)
+{
+ enum mcc_base_status base_status = base_status(compl->status);
+ u8 opcode = 0, subsystem = 0;
+
+ if (resp_hdr) {
+  opcode = resp_hdr->opcode;
+  subsystem = resp_hdr->subsystem;
+ }
+
+ if (opcode == OPCODE_LOWLEVEL_LOOPBACK_TEST &&
+     subsystem == CMD_SUBSYSTEM_LOWLEVEL) {
+  complete(&adapter->et_cmd_compl);
+  return;
+ }
+
+ if ((opcode == OPCODE_COMMON_WRITE_FLASHROM ||
+      opcode == OPCODE_COMMON_WRITE_OBJECT) &&
+     subsystem == CMD_SUBSYSTEM_COMMON) {
+  adapter->flash_status = compl->status;
+  complete(&adapter->et_cmd_compl);
+  return;
+ }
+
+ if ((opcode == OPCODE_ETH_GET_STATISTICS ||
+      opcode == OPCODE_ETH_GET_PPORT_STATS) &&
+     subsystem == CMD_SUBSYSTEM_ETH &&
+     base_status == MCC_STATUS_SUCCESS) {
+  be_parse_stats(adapter);
+  adapter->stats_cmd_sent = false;
+  return;
+ }
+
+ if (opcode == OPCODE_COMMON_GET_CNTL_ADDITIONAL_ATTRIBUTES &&
+     subsystem == CMD_SUBSYSTEM_COMMON) {
+  if (base_status == MCC_STATUS_SUCCESS) {
+   struct be_cmd_resp_get_cntl_addnl_attribs *resp =
+       (void *)resp_hdr;
+   adapter->drv_stats.be_on_die_temperature =
+      resp->on_die_temperature;
+  } else {
+   adapter->be_get_temp_freq = 0;
+  }
+  return;
+ }
+}
+
 static int be_mcc_compl_process(struct be_adapter *adapter,
     struct be_mcc_compl *compl)
 {
@@ -148,45 +200,15 @@ static int be_mcc_compl_process(struct be_adapter *adapter,
  addl_status = addl_status(compl->status);
 
  resp_hdr = be_decode_resp_hdr(compl->tag0, compl->tag1);
-
  if (resp_hdr) {
   opcode = resp_hdr->opcode;
   subsystem = resp_hdr->subsystem;
  }
 
- if (opcode == OPCODE_LOWLEVEL_LOOPBACK_TEST &&
-     subsystem == CMD_SUBSYSTEM_LOWLEVEL) {
-  complete(&adapter->et_cmd_compl);
-  return 0;
- }
-
- if (((opcode == OPCODE_COMMON_WRITE_FLASHROM) ||
-      (opcode == OPCODE_COMMON_WRITE_OBJECT)) &&
-     (subsystem == CMD_SUBSYSTEM_COMMON)) {
-  adapter->flash_status = compl->status;
-  complete(&adapter->et_cmd_compl);
- }
-
- if (base_status == MCC_STATUS_SUCCESS) {
-  if (((opcode == OPCODE_ETH_GET_STATISTICS) ||
-       (opcode == OPCODE_ETH_GET_PPORT_STATS)) &&
-      (subsystem == CMD_SUBSYSTEM_ETH)) {
-   be_parse_stats(adapter);
-   adapter->stats_cmd_sent = false;
-  }
-  if (opcode == OPCODE_COMMON_GET_CNTL_ADDITIONAL_ATTRIBUTES &&
-      subsystem == CMD_SUBSYSTEM_COMMON) {
-   struct be_cmd_resp_get_cntl_addnl_attribs *resp =
-    (void *)resp_hdr;
-   adapter->drv_stats.be_on_die_temperature =
-    resp->on_die_temperature;
-  }
- } else {
-  if (opcode == OPCODE_COMMON_GET_CNTL_ADDITIONAL_ATTRIBUTES)
-   adapter->be_get_temp_freq = 0;
+ be_async_cmd_process(adapter, compl, resp_hdr);
 
-  if (be_skip_err_log(opcode, base_status, addl_status))
-   return compl->status;
+ if (base_status != MCC_STATUS_SUCCESS &&
+     !be_skip_err_log(opcode, base_status, addl_status)) {
 
   if (base_status == MCC_STATUS_UNAUTHORIZED_REQUEST) {
    dev_warn(&adapter->pdev->dev,
-- 
1.7.1