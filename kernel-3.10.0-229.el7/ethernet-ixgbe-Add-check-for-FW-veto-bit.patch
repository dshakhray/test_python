From 7e72552cfd7e6b6c2faafd98a9e2d34749c3f39d Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Wed, 10 Sep 2014 18:28:34 -0400
Subject: [ethernet] ixgbe: Add check for FW veto bit

Message-id: <1410373750-11341-15-git-send-email-jogreene@redhat.com>
Patchwork-id: 93525
O-Subject: [RHEL7.1 PATCH 14/50] ixgbe: Add check for FW veto bit (v2)
Bugzilla: 1091123
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

BZ: 1091123
Brew: 7936897
Testing: Beaker

The driver will now honor the MNG FW veto bit in blocking link resets.
This patch will affect x520 and x540 systems.

Signed-off-by: Don Skidmore <donald.c.skidmore@intel.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c97506ab0e224613aa4fe9898f72d5e3eaf81772)

v2: moved 2 functions that should be in patch 12
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c
index deb8fda..4083d8e 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c
@@ -1,7 +1,7 @@
 /*******************************************************************************
 
   Intel 10 Gigabit PCI Express Linux driver
-  Copyright(c) 1999 - 2013 Intel Corporation.
+  Copyright(c) 1999 - 2014 Intel Corporation.
 
   This program is free software; you can redistribute it and/or modify it
   under the terms and conditions of the GNU General Public License,
@@ -233,6 +233,10 @@ static s32 prot_autoc_write_82599(struct ixgbe_hw *hw, u32 autoc, bool locked)
 {
  s32 ret_val = 0;
 
+ /* Blocked by MNG FW so bail */
+ if (ixgbe_check_reset_blocked(hw))
+  goto out;
+
  /* We only need to get the lock if:
   *  - We didn't do it already (in the read part of a read-modify-write)
   *  - LESM is enabled.
@@ -247,6 +251,7 @@ static s32 prot_autoc_write_82599(struct ixgbe_hw *hw, u32 autoc, bool locked)
  IXGBE_WRITE_REG(hw, IXGBE_AUTOC, autoc);
  ret_val = ixgbe_reset_pipeline_82599(hw);
 
+out:
  /* Free the SW/FW semaphore as we either grabbed it here or
   * already had it when this function was called.
   */
@@ -591,6 +596,10 @@ static void ixgbe_disable_tx_laser_multispeed_fiber(struct ixgbe_hw *hw)
 {
  u32 esdp_reg = IXGBE_READ_REG(hw, IXGBE_ESDP);
 
+ /* Blocked by MNG FW so bail */
+ if (ixgbe_check_reset_blocked(hw))
+  return;
+
  /* Disable tx laser; allow 100us to go dark per spec */
  esdp_reg |= IXGBE_ESDP_SDP3;
  IXGBE_WRITE_REG(hw, IXGBE_ESDP, esdp_reg);
@@ -631,6 +640,10 @@ static void ixgbe_enable_tx_laser_multispeed_fiber(struct ixgbe_hw *hw)
  **/
 static void ixgbe_flap_tx_laser_multispeed_fiber(struct ixgbe_hw *hw)
 {
+ /* Blocked by MNG FW so bail */
+ if (ixgbe_check_reset_blocked(hw))
+  return;
+
  if (hw->mac.autotry_restart) {
   ixgbe_disable_tx_laser_multispeed_fiber(hw);
   ixgbe_enable_tx_laser_multispeed_fiber(hw);
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c
index e4c6760..562f0f6 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c
@@ -1,7 +1,7 @@
 /*******************************************************************************
 
   Intel 10 Gigabit PCI Express Linux driver
-  Copyright(c) 1999 - 2013 Intel Corporation.
+  Copyright(c) 1999 - 2014 Intel Corporation.
 
   This program is free software; you can redistribute it and/or modify it
   under the terms and conditions of the GNU General Public License,
@@ -97,6 +97,32 @@ s32 ixgbe_identify_phy_generic(struct ixgbe_hw *hw)
 }
 
 /**
+ * ixgbe_check_reset_blocked - check status of MNG FW veto bit
+ * @hw: pointer to the hardware structure
+ *
+ * This function checks the MMNGC.MNG_VETO bit to see if there are
+ * any constraints on link from manageability.  For MAC's that don't
+ * have this bit just return false since the link can not be blocked
+ * via this method.
+ **/
+s32 ixgbe_check_reset_blocked(struct ixgbe_hw *hw)
+{
+ u32 mmngc;
+
+ /* If we don't have this bit, it can't be blocking */
+ if (hw->mac.type == ixgbe_mac_82598EB)
+  return false;
+
+ mmngc = IXGBE_READ_REG(hw, IXGBE_MMNGC);
+ if (mmngc & IXGBE_MMNGC_MNG_VETO) {
+  hw_dbg(hw, "MNG_VETO bit detected.\n");
+  return true;
+ }
+
+ return false;
+}
+
+/**
  *  ixgbe_get_phy_id - Get the phy type
  *  @hw: pointer to hardware structure
  *
@@ -171,6 +197,10 @@ s32 ixgbe_reset_phy_generic(struct ixgbe_hw *hw)
      (IXGBE_ERR_OVERTEMP == hw->phy.ops.check_overtemp(hw)))
   goto out;
 
+ /* Blocked by MNG FW so bail */
+ if (ixgbe_check_reset_blocked(hw))
+  goto out;
+
  /*
   * Perform soft PHY reset to the PHY_XS.
   * This will cause a soft reset to the PHY
@@ -475,6 +505,10 @@ s32 ixgbe_setup_phy_link_generic(struct ixgbe_hw *hw)
           autoneg_reg);
  }
 
+ /* Blocked by MNG FW so don't reset PHY */
+ if (ixgbe_check_reset_blocked(hw))
+  return status;
+
  /* Restart PHY autonegotiation and wait for completion */
  hw->phy.ops.read_reg(hw, MDIO_CTRL1,
         MDIO_MMD_AN, &autoneg_reg);
@@ -681,6 +715,10 @@ s32 ixgbe_setup_phy_link_tnx(struct ixgbe_hw *hw)
           autoneg_reg);
  }
 
+ /* Blocked by MNG FW so don't reset PHY */
+ if (ixgbe_check_reset_blocked(hw))
+  return status;
+
  /* Restart PHY autonegotiation and wait for completion */
  hw->phy.ops.read_reg(hw, MDIO_CTRL1,
         MDIO_MMD_AN, &autoneg_reg);
@@ -758,6 +796,10 @@ s32 ixgbe_reset_phy_nl(struct ixgbe_hw *hw)
  s32 ret_val = 0;
  u32 i;
 
+ /* Blocked by MNG FW so bail */
+ if (ixgbe_check_reset_blocked(hw))
+  goto out;
+
  hw->phy.ops.read_reg(hw, MDIO_CTRL1, MDIO_MMD_PHYXS, &phy_data);
 
  /* reset the PHY and poll for completion */
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h b/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
index aae900a..5cc4388 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
@@ -1,7 +1,7 @@
 /*******************************************************************************
 
   Intel 10 Gigabit PCI Express Linux driver
-  Copyright(c) 1999 - 2013 Intel Corporation.
+  Copyright(c) 1999 - 2014 Intel Corporation.
 
   This program is free software; you can redistribute it and/or modify it
   under the terms and conditions of the GNU General Public License,
@@ -131,6 +131,7 @@ s32 ixgbe_setup_phy_link_speed_generic(struct ixgbe_hw *hw,
 s32 ixgbe_get_copper_link_capabilities_generic(struct ixgbe_hw *hw,
                                                ixgbe_link_speed *speed,
                                                bool *autoneg);
+s32 ixgbe_check_reset_blocked(struct ixgbe_hw *hw);
 
 /* PHY specific */
 s32 ixgbe_check_phy_link_tnx(struct ixgbe_hw *hw,
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h b/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
index 3507aac..ffaa5d3 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
@@ -1,7 +1,7 @@
 /*******************************************************************************
 
   Intel 10 Gigabit PCI Express Linux driver
-  Copyright(c) 1999 - 2013 Intel Corporation.
+  Copyright(c) 1999 - 2014 Intel Corporation.
 
   This program is free software; you can redistribute it and/or modify it
   under the terms and conditions of the GNU General Public License,
@@ -1605,6 +1605,9 @@ enum {
 #define IXGBE_MACC_FS        0x00040000
 #define IXGBE_MAC_RX2TX_LPBK 0x00000002
 
+/* Veto Bit definiton */
+#define IXGBE_MMNGC_MNG_VETO  0x00000001
+
 /* LINKS Bit Masks */
 #define IXGBE_LINKS_KX_AN_COMP  0x80000000
 #define IXGBE_LINKS_UP          0x40000000
-- 
1.7.1