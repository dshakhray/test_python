From bdb005570710139191fa05b3b76911b4c064f118 Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:33:27 -0500
Subject: [fs] vfs: lock_two_nondirectories - allow directory args

Message-id: <20141125163327.18115.99067.stgit@warthog.procyon.org.uk>
Patchwork-id: 100908
O-Subject: [PATCH 08/47] vfs: lock_two_nondirectories: allow directory args
Bugzilla: 985875
RH-Acked-by: Ian Kent <ikent@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

From: J. Bruce Fields <bfields@redhat.com>

lock_two_nondirectories warned if either of its args was a directory.
Instead just ignore the directory args.  This is needed for locking in
cross rename.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
Original-commit: 4fd699ae3fbca2ac760137e1d26f98a105f59f05
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/inode.c b/fs/inode.c
index 7d47f0a..0d31944 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -981,24 +981,22 @@ EXPORT_SYMBOL(unlock_new_inode);
 
 /**
  * lock_two_nondirectories - take two i_mutexes on non-directory objects
+ *
+ * Lock any non-NULL argument that is not a directory.
+ * Zero, one or two objects may be locked by this function.
+ *
  * @inode1: first inode to lock
  * @inode2: second inode to lock
  */
 void lock_two_nondirectories(struct inode *inode1, struct inode *inode2)
 {
- WARN_ON_ONCE(S_ISDIR(inode1->i_mode));
- if (inode1 == inode2 || !inode2) {
-  mutex_lock(&inode1->i_mutex);
-  return;
- }
- WARN_ON_ONCE(S_ISDIR(inode2->i_mode));
- if (inode1 < inode2) {
+ if (inode1 > inode2)
+  swap(inode1, inode2);
+
+ if (inode1 && !S_ISDIR(inode1->i_mode))
   mutex_lock(&inode1->i_mutex);
+ if (inode2 && !S_ISDIR(inode2->i_mode) && inode2 != inode1)
   mutex_lock_nested(&inode2->i_mutex, I_MUTEX_NONDIR2);
- } else {
-  mutex_lock(&inode2->i_mutex);
-  mutex_lock_nested(&inode1->i_mutex, I_MUTEX_NONDIR2);
- }
 }
 EXPORT_SYMBOL(lock_two_nondirectories);
 
@@ -1009,8 +1007,9 @@ EXPORT_SYMBOL(lock_two_nondirectories);
  */
 void unlock_two_nondirectories(struct inode *inode1, struct inode *inode2)
 {
- mutex_unlock(&inode1->i_mutex);
- if (inode2 && inode2 != inode1)
+ if (inode1 && !S_ISDIR(inode1->i_mode))
+  mutex_unlock(&inode1->i_mutex);
+ if (inode2 && !S_ISDIR(inode2->i_mode) && inode2 != inode1)
   mutex_unlock(&inode2->i_mutex);
 }
 EXPORT_SYMBOL(unlock_two_nondirectories);
-- 
1.7.1