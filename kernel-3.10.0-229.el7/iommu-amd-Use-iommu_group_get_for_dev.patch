From ccacbf2b634038c30a452079f71313929844a397 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Fri, 5 Sep 2014 02:17:01 -0400
Subject: [iommu] amd: Use iommu_group_get_for_dev()

Message-id: <20140905021701.32574.79355.stgit@gir.stowe>
Patchwork-id: 91373
O-Subject: [RHEL7.1 PATCH 14/17] iommu/amd: Use iommu_group_get_for_dev()
Bugzilla: 1136537
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1136537
Upstream Status: 65d5352f12e16dc9321b1e4f8213793565c124be

commit 65d5352f12e16dc9321b1e4f8213793565c124be
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Thu Jul 3 09:51:30 2014 -0600

    iommu/amd: Use iommu_group_get_for_dev()

    The common iommu_group_get_for_dev() allows us to greatly simplify
    our group lookup for a new device.  Also, since we insert IVRS
    aliases into the PCI DMA alias quirks, we should alway come up with
    the same results as the existing code.

    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c
index afe80d5..7cd3da2 100644
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@ -46,7 +46,6 @@
 #include "amd_iommu_proto.h"
 #include "amd_iommu_types.h"
 #include "irq_remapping.h"
-#include "pci.h"
 
 #define CMD_SET_TYPE(cmd, t) ((cmd)->data[1] |= ((t) << 28))
 
@@ -133,9 +132,6 @@ static void free_dev_data(struct iommu_dev_data *dev_data)
  list_del(&dev_data->dev_data_list);
  spin_unlock_irqrestore(&dev_data_list_lock, flags);
 
- if (dev_data->group)
-  iommu_group_put(dev_data->group);
-
  kfree(dev_data);
 }
 
@@ -264,167 +260,17 @@ static bool check_device(struct device *dev)
  return true;
 }
 
-static struct pci_bus *find_hosted_bus(struct pci_bus *bus)
-{
- while (!bus->self) {
-  if (!pci_is_root_bus(bus))
-   bus = bus->parent;
-  else
-   return ERR_PTR(-ENODEV);
- }
-
- return bus;
-}
-
-#define REQ_ACS_FLAGS (PCI_ACS_SV | PCI_ACS_RR | PCI_ACS_CR | PCI_ACS_UF)
-
-static struct pci_dev *get_isolation_root(struct pci_dev *pdev)
-{
- struct pci_dev *dma_pdev = pdev;
-
- /* Account for quirked devices */
- swap_pci_ref(&dma_pdev, pci_get_dma_source(dma_pdev));
-
- /*
-  * If it's a multifunction device that does not support our
-  * required ACS flags, add to the same group as lowest numbered
-  * function that also does not suport the required ACS flags.
-  */
- if (dma_pdev->multifunction &&
-     !pci_acs_enabled(dma_pdev, REQ_ACS_FLAGS)) {
-  u8 i, slot = PCI_SLOT(dma_pdev->devfn);
-
-  for (i = 0; i < 8; i++) {
-   struct pci_dev *tmp;
-
-   tmp = pci_get_slot(dma_pdev->bus, PCI_DEVFN(slot, i));
-   if (!tmp)
-    continue;
-
-   if (!pci_acs_enabled(tmp, REQ_ACS_FLAGS)) {
-    swap_pci_ref(&dma_pdev, tmp);
-    break;
-   }
-   pci_dev_put(tmp);
-  }
- }
-
- /*
-  * Devices on the root bus go through the iommu.  If that's not us,
-  * find the next upstream device and test ACS up to the root bus.
-  * Finding the next device may require skipping virtual buses.
-  */
- while (!pci_is_root_bus(dma_pdev->bus)) {
-  struct pci_bus *bus = find_hosted_bus(dma_pdev->bus);
-  if (IS_ERR(bus))
-   break;
-
-  if (pci_acs_path_enabled(bus->self, NULL, REQ_ACS_FLAGS))
-   break;
-
-  swap_pci_ref(&dma_pdev, pci_dev_get(bus->self));
- }
-
- return dma_pdev;
-}
-
-static int use_pdev_iommu_group(struct pci_dev *pdev, struct device *dev)
-{
- struct iommu_group *group = iommu_group_get(&pdev->dev);
- int ret;
-
- if (!group) {
-  group = iommu_group_alloc();
-  if (IS_ERR(group))
-   return PTR_ERR(group);
-
-  WARN_ON(&pdev->dev != dev);
- }
-
- ret = iommu_group_add_device(group, dev);
- iommu_group_put(group);
- return ret;
-}
-
-static int use_dev_data_iommu_group(struct iommu_dev_data *dev_data,
-        struct device *dev)
-{
- if (!dev_data->group) {
-  struct iommu_group *group = iommu_group_alloc();
-  if (IS_ERR(group))
-   return PTR_ERR(group);
-
-  dev_data->group = group;
- }
-
- return iommu_group_add_device(dev_data->group, dev);
-}
-
 static int init_iommu_group(struct device *dev)
 {
- struct iommu_dev_data *dev_data;
  struct iommu_group *group;
- struct pci_dev *dma_pdev;
- int ret;
 
- group = iommu_group_get(dev);
- if (group) {
-  iommu_group_put(group);
-  return 0;
- }
+ group = iommu_group_get_for_dev(dev);
 
- dev_data = find_dev_data(get_device_id(dev));
- if (!dev_data)
-  return -ENOMEM;
-
- if (dev_data->alias_data) {
-  u16 alias;
-  struct pci_bus *bus;
-
-  if (dev_data->alias_data->group)
-   goto use_group;
+ if (IS_ERR(group))
+  return PTR_ERR(group);
 
-  /*
-   * If the alias device exists, it's effectively just a first
-   * level quirk for finding the DMA source.
-   */
-  alias = amd_iommu_alias_table[dev_data->devid];
-  dma_pdev = pci_get_bus_and_slot(alias >> 8, alias & 0xff);
-  if (dma_pdev) {
-   dma_pdev = get_isolation_root(dma_pdev);
-   goto use_pdev;
-  }
-
-  /*
-   * If the alias is virtual, try to find a parent device
-   * and test whether the IOMMU group is actualy rooted above
-   * the alias.  Be careful to also test the parent device if
-   * we think the alias is the root of the group.
-   */
-  bus = pci_find_bus(0, alias >> 8);
-  if (!bus)
-   goto use_group;
-
-  bus = find_hosted_bus(bus);
-  if (IS_ERR(bus) || !bus->self)
-   goto use_group;
-
-  dma_pdev = get_isolation_root(pci_dev_get(bus->self));
-  if (dma_pdev != bus->self || (dma_pdev->multifunction &&
-      !pci_acs_enabled(dma_pdev, REQ_ACS_FLAGS)))
-   goto use_pdev;
-
-  pci_dev_put(dma_pdev);
-  goto use_group;
- }
-
- dma_pdev = get_isolation_root(pci_dev_get(to_pci_dev(dev)));
-use_pdev:
- ret = use_pdev_iommu_group(dma_pdev, dev);
- pci_dev_put(dma_pdev);
- return ret;
-use_group:
- return use_dev_data_iommu_group(dev_data->alias_data, dev);
+ iommu_group_put(group);
+ return 0;
 }
 
 static int __last_alias(struct pci_dev *pdev, u16 alias, void *data)
diff --git a/drivers/iommu/amd_iommu_types.h b/drivers/iommu/amd_iommu_types.h
index 3a2f9fa..64cd460 100644
--- a/drivers/iommu/amd_iommu_types.h
+++ b/drivers/iommu/amd_iommu_types.h
@@ -431,7 +431,6 @@ struct iommu_dev_data {
  struct iommu_dev_data *alias_data;/* The alias dev_data */
  struct protection_domain *domain; /* Domain the device is bound to */
  atomic_t bind;     /* Domain attach reference count */
- struct iommu_group *group;   /* IOMMU group for virtual aliases */
  u16 devid;     /* PCI Device ID */
  bool iommu_v2;     /* Device can make use of IOMMUv2 */
  bool passthrough;    /* Default for device is pt_domain */
-- 
1.7.1