From 1ed6040161ff5301e1a3b63e77fc73dabf6cbccd Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:02:48 -0400
Subject: [fs] btrfs: more efficient io tree navigation on wait_extent_bit

Message-id: <1407179109-13714-282-git-send-email-sandeen@redhat.com>
Patchwork-id: 87207
O-Subject: [RHEL7.1 PATCH 281/422] Btrfs: more efficient io tree navigation on wait_extent_bit
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit c50d3e71c3d0378bcc9e116f48dab4148854a7bb
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Mon Mar 31 14:53:25 2014 +0100

    Btrfs: more efficient io tree navigation on wait_extent_bit

    If we don't reschedule use rb_next to find the next extent state
    instead of a full tree search, which is more efficient and safe
    since we didn't release the io tree's lock.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/extent_io.c b/fs/btrfs/extent_io.c
index 9dc1b2d..2ccc1dd 100644
--- a/fs/btrfs/extent_io.c
+++ b/fs/btrfs/extent_io.c
@@ -749,6 +749,7 @@ again:
    * our range starts
    */
   node = tree_search(tree, start);
+process_node:
   if (!node)
    break;
 
@@ -769,7 +770,10 @@ again:
   if (start > end)
    break;
 
-  cond_resched_lock(&tree->lock);
+  if (!cond_resched_lock(&tree->lock)) {
+   node = rb_next(node);
+   goto process_node;
+  }
  }
 out:
  spin_unlock(&tree->lock);
-- 
1.7.1