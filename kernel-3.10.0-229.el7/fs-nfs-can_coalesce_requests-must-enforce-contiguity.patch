From 4105d75f6cc6fd963fbb49ab0addbd5c67472723 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:49 -0400
Subject: [fs] nfs: can_coalesce_requests must enforce contiguity
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1411050057-12417-87-git-send-email-steved@redhat.com>
Patchwork-id: 96256
O-Subject: [RHEL7.1 PATCH 86/94] nfs: can_coalesce_requests must enforce contiguity
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Weston Andros Adamson <dros@primarydata.com>

Commit 6094f83864c1d1296566a282cba05ba613f151ee
"nfs: allow coalescing of subpage requests" got rid of the requirement
that requests cover whole pages, but it made some incorrect assumptions.

It turns out that callers of this interface can map adjacent requests
(by file position as seen by req_offset + req->wb_bytes) to different pages,
even when they could share a page. An example is the direct I/O interface -
iov_iter_get_pages_alloc may return one segment with a partial page filled
and the next segment (which is adjacent in the file position) starts with a
new page.

Reported-by: Toralf FÃÂ¶rster <toralf.foerster@gmx.de>
Signed-off-by: Weston Andros Adamson <dros@primarydata.com>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 78270e8fbc2916bfc8305b8f58f33474cce1ec0e
Bugzilla: 1111708
---
 fs/nfs/pagelist.c | 8 ++++++++
 1 file changed, 8 insertions(+)

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/pagelist.c b/fs/nfs/pagelist.c
index e243cf5..b39470d 100644
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@ -822,6 +822,14 @@ static bool nfs_can_coalesce_requests(struct nfs_page *prev,
    return false;
   if (req_offset(req) != req_offset(prev) + prev->wb_bytes)
    return false;
+  if (req->wb_page == prev->wb_page) {
+   if (req->wb_pgbase != prev->wb_pgbase + prev->wb_bytes)
+    return false;
+  } else {
+   if (req->wb_pgbase != 0 ||
+       prev->wb_pgbase + prev->wb_bytes != PAGE_CACHE_SIZE)
+    return false;
+  }
  }
  size = pgio->pg_ops->pg_test(pgio, prev, req);
  WARN_ON_ONCE(size > req->wb_bytes);
-- 
1.7.1