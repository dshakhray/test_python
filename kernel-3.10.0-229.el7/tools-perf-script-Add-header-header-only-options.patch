From 64b9cb653cee96388715cbef84c1c21aff7d5cde Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:50:13 -0400
Subject: [tools] perf/script: Add --header/--header-only options

Message-id: <1408953210-26343-126-git-send-email-jolsa@redhat.com>
Patchwork-id: 89026
O-Subject: [PATCH RHEL7.1 BZ1133083 125/322] perf script: Add --header/--header-only options
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit e90debddf8f26094cd90162b9af2a8ed37ed57cb
Author: Jiri Olsa <jolsa@redhat.com>
Date: Mon Dec 9 11:02:50 2013 +0100

description
===========
Currently the perf.data header is always displayed for stdio output,
which is no always useful.

Disabling header information by default and adding following options to
control header output:

  --header      - display header information
  --header-only - display header information only w/o further
                  processing
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/Documentation/perf-script.txt b/tools/perf/Documentation/perf-script.txt
index c2a5071..05f9a0a 100644
--- a/tools/perf/Documentation/perf-script.txt
+++ b/tools/perf/Documentation/perf-script.txt
@@ -209,6 +209,12 @@ OPTIONS
 --show-mmap-events
  Display mmap related events (e.g. MMAP, MMAP2).
 
+--header
+ Show perf.data header.
+
+--header-only
+ Show only perf.data header.
+
 SEE ALSO
 --------
 linkperf:perf-record[1], linkperf:perf-script-perl[1],
diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c
index 7a571fb..f8ab125 100644
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@ -1494,6 +1494,8 @@ static int have_cmd(int argc, const char **argv)
 int cmd_script(int argc, const char **argv, const char *prefix __maybe_unused)
 {
  bool show_full_info = false;
+ bool header = false;
+ bool header_only = false;
  char *rec_script_path = NULL;
  char *rep_script_path = NULL;
  struct perf_session *session;
@@ -1532,6 +1534,8 @@ int cmd_script(int argc, const char **argv, const char *prefix __maybe_unused)
  OPT_STRING('i', "input", &input_name, "file", "input file name"),
  OPT_BOOLEAN('d', "debug-mode", &debug_mode,
      "do various checks like samples ordering and lost events"),
+ OPT_BOOLEAN(0, "header", &header, "Show data header."),
+ OPT_BOOLEAN(0, "header-only", &header_only, "Show only data header."),
  OPT_STRING('k', "vmlinux", &symbol_conf.vmlinux_name,
      "file", "vmlinux pathname"),
  OPT_STRING(0, "kallsyms", &symbol_conf.kallsyms_name,
@@ -1748,6 +1752,12 @@ int cmd_script(int argc, const char **argv, const char *prefix __maybe_unused)
  if (session == NULL)
   return -ENOMEM;
 
+ if (header || header_only) {
+  perf_session__fprintf_info(session, stdout, show_full_info);
+  if (header_only)
+   return 0;
+ }
+
  script.session = session;
 
  if (cpu_list) {
@@ -1755,9 +1765,6 @@ int cmd_script(int argc, const char **argv, const char *prefix __maybe_unused)
    return -1;
  }
 
- if (!script_name && !generate_script_lang)
-  perf_session__fprintf_info(session, stdout, show_full_info);
-
  if (!no_callchain)
   symbol_conf.use_callchain = true;
  else
-- 
1.7.1