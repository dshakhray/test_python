From 34c5a3e5f5ad92fcec7749d412c138478d5c1d37 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:38:31 -0400
Subject: [virt] kvm/nvmx: Add support for activity state HLT

Message-id: <1406040016-3289-117-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86195
O-Subject: [RHEL7 PATCH v2 116/221] KVM: nVMX: Add support for activity state HLT
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jan Kiszka <jan.kiszka@siemens.com>

We can easily emulate the HLT activity state for L1: If it decides that
L2 shall be halted on entry, just invoke the normal emulation of halt
after switching to L2. We do not depend on specific host features to
provide this, so we can expose the capability unconditionally.

Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 6dfacadd5858882eee1983995854d4e1fb1b966e)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/include/asm/vmx.h b/arch/x86/include/asm/vmx.h
index 966502d..2067264 100644
--- a/arch/x86/include/asm/vmx.h
+++ b/arch/x86/include/asm/vmx.h
@@ -100,6 +100,7 @@
 
 #define VMX_MISC_PREEMPTION_TIMER_RATE_MASK 0x0000001f
 #define VMX_MISC_SAVE_EFER_LMA   0x00000020
+#define VMX_MISC_ACTIVITY_HLT   0x00000040
 
 /* VMCS Encodings */
 enum vmcs_field {
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index b990372..4ca2445 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -2340,6 +2340,7 @@ static __init void nested_vmx_setup_ctls_msrs(void)
  rdmsr(MSR_IA32_VMX_MISC, nested_vmx_misc_low, nested_vmx_misc_high);
  nested_vmx_misc_low &= VMX_MISC_PREEMPTION_TIMER_RATE_MASK |
   VMX_MISC_SAVE_EFER_LMA;
+ nested_vmx_misc_low |= VMX_MISC_ACTIVITY_HLT;
  nested_vmx_misc_high = 0;
 }
 
@@ -7938,7 +7939,8 @@ static int nested_vmx_run(struct kvm_vcpu *vcpu, bool launch)
   return 1;
  }
 
- if (vmcs12->guest_activity_state != GUEST_ACTIVITY_ACTIVE) {
+ if (vmcs12->guest_activity_state != GUEST_ACTIVITY_ACTIVE &&
+     vmcs12->guest_activity_state != GUEST_ACTIVITY_HLT) {
   nested_vmx_failValid(vcpu, VMXERR_ENTRY_INVALID_CONTROL_FIELD);
   return 1;
  }
@@ -8067,6 +8069,9 @@ static int nested_vmx_run(struct kvm_vcpu *vcpu, bool launch)
 
  prepare_vmcs02(vcpu, vmcs12);
 
+ if (vmcs12->guest_activity_state == GUEST_ACTIVITY_HLT)
+  return kvm_emulate_halt(vcpu);
+
  /*
   * Note no nested_vmx_succeed or nested_vmx_fail here. At this point
   * we are no longer running L1, and VMLAUNCH/VMRESUME has not yet
-- 
1.7.1