From 9c8e2bc69dfd157462947e74689f69f4a0bc14ad Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Mon, 14 Jul 2014 18:58:31 -0400
Subject: [x86] acpi, idle: Restructure the mwait idle routines

Message-id: <1405364315-27440-4-git-send-email-prarit@redhat.com>
Patchwork-id: 85799
O-Subject: [RHEL7.1 PATCH BZ 1119374 3/7] x86, acpi, idle: Restructure the mwait idle routines
Bugzilla: 1119374
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1119374

commit 16824255394f55adf31b9a96a9965d8c15bdac4c
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Dec 12 15:08:36 2013 +0100

    x86, acpi, idle: Restructure the mwait idle routines

    People seem to delight in writing wrong and broken mwait idle routines;
    collapse the lot.

    This leaves mwait_play_dead() the sole remaining user of __mwait() and
    new __mwait() users are probably doing it wrong.

    Also remove __sti_mwait() as its unused.

    Cc: Arjan van de Ven <arjan@linux.intel.com>
    Cc: Jacob Jun Pan <jacob.jun.pan@linux.intel.com>
    Cc: Mike Galbraith <bitbucket@online.de>
    Cc: Len Brown <lenb@kernel.org>
    Cc: Rui Zhang <rui.zhang@intel.com>
    Acked-by: Rafael Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/20131212141654.616820819@infradead.org
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

Cc: Don Zickus <dzickus@redhat.com>
Cc: Myron Stowe <mstowe@redhat.com>
Cc: Radim Krcmar <rkrcmar@redhat.com>
Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Dean Nelson <dnelson@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/include/asm/mwait.h b/arch/x86/include/asm/mwait.h
index 2f366d0..361b02e 100644
--- a/arch/x86/include/asm/mwait.h
+++ b/arch/x86/include/asm/mwait.h
@@ -1,6 +1,8 @@
 #ifndef _ASM_X86_MWAIT_H
 #define _ASM_X86_MWAIT_H
 
+#include <linux/sched.h>
+
 #define MWAIT_SUBSTATE_MASK  0xf
 #define MWAIT_CSTATE_MASK  0xf
 #define MWAIT_SUBSTATE_SIZE  4
@@ -13,4 +15,42 @@
 
 #define MWAIT_ECX_INTERRUPT_BREAK 0x1
 
+static inline void __monitor(const void *eax, unsigned long ecx,
+        unsigned long edx)
+{
+ /* "monitor %eax, %ecx, %edx;" */
+ asm volatile(".byte 0x0f, 0x01, 0xc8;"
+       :: "a" (eax), "c" (ecx), "d"(edx));
+}
+
+static inline void __mwait(unsigned long eax, unsigned long ecx)
+{
+ /* "mwait %eax, %ecx;" */
+ asm volatile(".byte 0x0f, 0x01, 0xc9;"
+       :: "a" (eax), "c" (ecx));
+}
+
+/*
+ * This uses new MONITOR/MWAIT instructions on P4 processors with PNI,
+ * which can obviate IPI to trigger checking of need_resched.
+ * We execute MONITOR against need_resched and enter optimized wait state
+ * through MWAIT. Whenever someone changes need_resched, we would be woken
+ * up from MWAIT (without an IPI).
+ *
+ * New with Core Duo processors, MWAIT can take some hints based on CPU
+ * capability.
+ */
+static inline void mwait_idle_with_hints(unsigned long eax, unsigned long ecx)
+{
+ if (!current_set_polling_and_test()) {
+  if (this_cpu_has(X86_FEATURE_CLFLUSH_MONITOR))
+   clflush((void *)&current_thread_info()->flags);
+
+  __monitor((void *)&current_thread_info()->flags, 0, 0);
+  if (!need_resched())
+   __mwait(eax, ecx);
+ }
+ __current_clr_polling();
+}
+
 #endif /* _ASM_X86_MWAIT_H */
diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h
index 994d792..eaf0dc5 100644
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@ -696,29 +696,6 @@ static inline void sync_core(void)
 #endif
 }
 
-static inline void __monitor(const void *eax, unsigned long ecx,
-        unsigned long edx)
-{
- /* "monitor %eax, %ecx, %edx;" */
- asm volatile(".byte 0x0f, 0x01, 0xc8;"
-       :: "a" (eax), "c" (ecx), "d"(edx));
-}
-
-static inline void __mwait(unsigned long eax, unsigned long ecx)
-{
- /* "mwait %eax, %ecx;" */
- asm volatile(".byte 0x0f, 0x01, 0xc9;"
-       :: "a" (eax), "c" (ecx));
-}
-
-static inline void __sti_mwait(unsigned long eax, unsigned long ecx)
-{
- trace_hardirqs_on();
- /* "mwait %eax, %ecx;" */
- asm volatile("sti; .byte 0x0f, 0x01, 0xc9;"
-       :: "a" (eax), "c" (ecx));
-}
-
 extern void select_idle_routine(const struct cpuinfo_x86 *c);
 extern void init_amd_e400_c1e_mask(void);
 
diff --git a/arch/x86/kernel/acpi/cstate.c b/arch/x86/kernel/acpi/cstate.c
index d2b7f27..e69182f 100644
--- a/arch/x86/kernel/acpi/cstate.c
+++ b/arch/x86/kernel/acpi/cstate.c
@@ -150,29 +150,6 @@ int acpi_processor_ffh_cstate_probe(unsigned int cpu,
 }
 EXPORT_SYMBOL_GPL(acpi_processor_ffh_cstate_probe);
 
-/*
- * This uses new MONITOR/MWAIT instructions on P4 processors with PNI,
- * which can obviate IPI to trigger checking of need_resched.
- * We execute MONITOR against need_resched and enter optimized wait state
- * through MWAIT. Whenever someone changes need_resched, we would be woken
- * up from MWAIT (without an IPI).
- *
- * New with Core Duo processors, MWAIT can take some hints based on CPU
- * capability.
- */
-void mwait_idle_with_hints(unsigned long ax, unsigned long cx)
-{
- if (!need_resched()) {
-  if (this_cpu_has(X86_FEATURE_CLFLUSH_MONITOR))
-   clflush((void *)&current_thread_info()->flags);
-
-  __monitor((void *)&current_thread_info()->flags, 0, 0);
-  smp_mb();
-  if (!need_resched())
-   __mwait(ax, cx);
- }
-}
-
 void acpi_processor_ffh_cstate_enter(struct acpi_processor_cx *cx)
 {
  unsigned int cpu = smp_processor_id();
diff --git a/drivers/acpi/acpi_pad.c b/drivers/acpi/acpi_pad.c
index 27bb6a9..b47f69a 100644
--- a/drivers/acpi/acpi_pad.c
+++ b/drivers/acpi/acpi_pad.c
@@ -193,10 +193,7 @@ static int power_saving_thread(void *data)
      CLOCK_EVT_NOTIFY_BROADCAST_ENTER, &cpu);
    stop_critical_timings();
 
-   __monitor((void *)&current_thread_info()->flags, 0, 0);
-   smp_mb();
-   if (!need_resched())
-    __mwait(power_saving_mwait_eax, 1);
+   mwait_idle_with_hints(power_saving_mwait_eax, 1);
 
    start_critical_timings();
    if (lapic_marked_unstable)
diff --git a/drivers/acpi/processor_idle.c b/drivers/acpi/processor_idle.c
index c7414a5..0a522c6 100644
--- a/drivers/acpi/processor_idle.c
+++ b/drivers/acpi/processor_idle.c
@@ -730,11 +730,6 @@ static int acpi_idle_enter_c1(struct cpuidle_device *dev,
  if (unlikely(!pr))
   return -EINVAL;
 
- if (cx->entry_method == ACPI_CSTATE_FFH) {
-  if (current_set_polling_and_test())
-   return -EINVAL;
- }
-
  lapic_timer_state_broadcast(pr, cx, 1);
  acpi_idle_do_entry(cx);
 
@@ -788,11 +783,6 @@ static int acpi_idle_enter_simple(struct cpuidle_device *dev,
  if (unlikely(!pr))
   return -EINVAL;
 
- if (cx->entry_method == ACPI_CSTATE_FFH) {
-  if (current_set_polling_and_test())
-   return -EINVAL;
- }
-
  /*
   * Must be done before busmaster disable as we might need to
   * access HPET !
@@ -844,11 +834,6 @@ static int acpi_idle_enter_bm(struct cpuidle_device *dev,
   }
  }
 
- if (cx->entry_method == ACPI_CSTATE_FFH) {
-  if (current_set_polling_and_test())
-   return -EINVAL;
- }
-
  acpi_unlazy_tlb(smp_processor_id());
 
  /* Tell the scheduler that we are going deep-idle: */
diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c
index df5a7e4..58a3381 100644
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@ -359,16 +359,7 @@ static int intel_idle(struct cpuidle_device *dev,
  if (!(lapic_timer_reliable_states & (1 << (cstate))))
   clockevents_notify(CLOCK_EVT_NOTIFY_BROADCAST_ENTER, &cpu);
 
- if (!current_set_polling_and_test()) {
-
-  if (this_cpu_has(X86_FEATURE_CLFLUSH_MONITOR))
-   clflush((void *)&current_thread_info()->flags);
-
-  __monitor((void *)&current_thread_info()->flags, 0, 0);
-  smp_mb();
-  if (!need_resched())
-   __mwait(eax, ecx);
- }
+ mwait_idle_with_hints(eax, ecx);
 
  if (!(lapic_timer_reliable_states & (1 << (cstate))))
   clockevents_notify(CLOCK_EVT_NOTIFY_BROADCAST_EXIT, &cpu);
diff --git a/drivers/thermal/intel_powerclamp.c b/drivers/thermal/intel_powerclamp.c
index 67b608e..00b9372 100644
--- a/drivers/thermal/intel_powerclamp.c
+++ b/drivers/thermal/intel_powerclamp.c
@@ -447,9 +447,7 @@ static int clamp_thread(void *arg)
     */
    local_touch_nmi();
    stop_critical_timings();
-   __monitor((void *)&current_thread_info()->flags, 0, 0);
-   cpu_relax(); /* allow HT sibling to run */
-   __mwait(eax, ecx);
+   mwait_idle_with_hints(eax, ecx);
    start_critical_timings();
    atomic_inc(&idle_wakeup_counter);
   }
-- 
1.7.1