From 43a393cad776311e0d3cdbb02d0a77054c0dc215 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:06 -0400
Subject: [md] dm-table: make dm_table_supports_discards static

Message-id: <1405543364-20901-3-git-send-email-snitzer@redhat.com>
Patchwork-id: 85884
O-Subject: [RHEL7.1 PATCH 02/40] dm table: make dm_table_supports_discards static
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1117872

Upstream linux-dm.git commit 52c5afa9bc0540688e81a799ba39737f237728e0
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Thu Jul 10 12:23:07 2014 -0400

    dm table: make dm_table_supports_discards static

    The function dm_table_supports_discards is only called from
    dm-table.c:dm_table_set_restrictions().  So move it above
    dm_table_set_restrictions and make it static.

    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-table.c b/drivers/md/dm-table.c
index 2ae35b2..bc443d1 100644
--- a/drivers/md/dm-table.c
+++ b/drivers/md/dm-table.c
@@ -1431,6 +1431,43 @@ static bool dm_table_supports_write_same(struct dm_table *t)
  return true;
 }
 
+static int device_discard_capable(struct dm_target *ti, struct dm_dev *dev,
+      sector_t start, sector_t len, void *data)
+{
+ struct request_queue *q = bdev_get_queue(dev->bdev);
+
+ return q && blk_queue_discard(q);
+}
+
+static bool dm_table_supports_discards(struct dm_table *t)
+{
+ struct dm_target *ti;
+ unsigned i = 0;
+
+ /*
+  * Unless any target used by the table set discards_supported,
+  * require at least one underlying device to support discards.
+  * t->devices includes internal dm devices such as mirror logs
+  * so we need to use iterate_devices here, which targets
+  * supporting discard selectively must provide.
+  */
+ while (i < dm_table_get_num_targets(t)) {
+  ti = dm_table_get_target(t, i++);
+
+  if (!ti->num_discard_bios)
+   continue;
+
+  if (ti->discards_supported)
+   return 1;
+
+  if (ti->type->iterate_devices &&
+      ti->type->iterate_devices(ti, device_discard_capable, NULL))
+   return 1;
+ }
+
+ return 0;
+}
+
 void dm_table_set_restrictions(struct dm_table *t, struct request_queue *q,
           struct queue_limits *limits)
 {
@@ -1618,39 +1655,3 @@ struct mapped_device *dm_table_get_md(struct dm_table *t)
 }
 EXPORT_SYMBOL(dm_table_get_md);
 
-static int device_discard_capable(struct dm_target *ti, struct dm_dev *dev,
-      sector_t start, sector_t len, void *data)
-{
- struct request_queue *q = bdev_get_queue(dev->bdev);
-
- return q && blk_queue_discard(q);
-}
-
-bool dm_table_supports_discards(struct dm_table *t)
-{
- struct dm_target *ti;
- unsigned i = 0;
-
- /*
-  * Unless any target used by the table set discards_supported,
-  * require at least one underlying device to support discards.
-  * t->devices includes internal dm devices such as mirror logs
-  * so we need to use iterate_devices here, which targets
-  * supporting discard selectively must provide.
-  */
- while (i < dm_table_get_num_targets(t)) {
-  ti = dm_table_get_target(t, i++);
-
-  if (!ti->num_discard_bios)
-   continue;
-
-  if (ti->discards_supported)
-   return 1;
-
-  if (ti->type->iterate_devices &&
-      ti->type->iterate_devices(ti, device_discard_capable, NULL))
-   return 1;
- }
-
- return 0;
-}
diff --git a/drivers/md/dm.h b/drivers/md/dm.h
index 88cc58c..09bb47e 100644
--- a/drivers/md/dm.h
+++ b/drivers/md/dm.h
@@ -72,7 +72,6 @@ int dm_table_any_busy_target(struct dm_table *t);
 unsigned dm_table_get_type(struct dm_table *t);
 struct target_type *dm_table_get_immutable_target_type(struct dm_table *t);
 bool dm_table_request_based(struct dm_table *t);
-bool dm_table_supports_discards(struct dm_table *t);
 void dm_table_free_md_mempools(struct dm_table *t);
 struct dm_md_mempools *dm_table_get_md_mempools(struct dm_table *t);
 
-- 
1.7.1