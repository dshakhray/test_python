From 50a25ffd6e4de7fad138e3f3dacc5e3df0df0c2d Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 21:00:33 -0400
Subject: [fs] xfs: fix swapext ilock deadlock

Message-id: <1412888441-4181-40-git-send-email-sandeen@redhat.com>
Patchwork-id: 97349
O-Subject: [RHEL7.1 PATCH 39/47] [fs] xfs: fix swapext ilock deadlock
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit 812176832169c77b4bacddd01edc3e55340263fd
    Author: Dave Chinner <dchinner@redhat.com>
    Date:   Mon Aug 4 13:29:32 2014 +1000

    xfs: fix swapext ilock deadlock

    xfs_swap_extents() holds the ilock over a call to
    filemap_write_and_wait(), which can then try to write data and take
    the ilock. That causes a self-deadlock.

    Fix the deadlock and clean up the code by separating the locking
    appropriately. Add a lockflags variable to track what locks we are
    holding as we gain and drop them and cleanup the error handling to
    always use "out_unlock" with the lockflags variable.

    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_bmap_util.c b/fs/xfs/xfs_bmap_util.c
index d042a27..8eef057 100644
--- a/fs/xfs/xfs_bmap_util.c
+++ b/fs/xfs/xfs_bmap_util.c
@@ -1540,6 +1540,7 @@ xfs_swap_extents(
  int  aforkblks = 0;
  int  taforkblks = 0;
  __uint64_t tmp;
+ int  lock_flags;
 
  tempifp = kmem_alloc(sizeof(xfs_ifork_t), KM_MAYFAIL);
  if (!tempifp) {
@@ -1548,13 +1549,13 @@ xfs_swap_extents(
  }
 
  /*
-  * we have to do two separate lock calls here to keep lockdep
-  * happy. If we try to get all the locks in one call, lock will
-  * report false positives when we drop the ILOCK and regain them
-  * below.
+  * Lock up the inodes against other IO and truncate to begin with.
+  * Then we can ensure the inodes are flushed and have no page cache
+  * safely. Once we have done this we can take the ilocks and do the rest
+  * of the checks.
   */
+ lock_flags = XFS_IOLOCK_EXCL;
  xfs_lock_two_inodes(ip, tip, XFS_IOLOCK_EXCL);
- xfs_lock_two_inodes(ip, tip, XFS_ILOCK_EXCL);
 
  /* Verify that both files have the same format */
  if ((ip->i_d.di_mode & S_IFMT) != (tip->i_d.di_mode & S_IFMT)) {
@@ -1573,6 +1574,9 @@ xfs_swap_extents(
   goto out_unlock;
  truncate_pagecache_range(VFS_I(tip), 0, -1);
 
+ xfs_lock_two_inodes(ip, tip, XFS_ILOCK_EXCL);
+ lock_flags |= XFS_ILOCK_EXCL;
+
  /* Verify O_DIRECT for ftmp */
  if (VN_CACHED(VFS_I(tip)) != 0) {
   error = XFS_ERROR(EINVAL);
@@ -1627,6 +1631,7 @@ xfs_swap_extents(
 
  xfs_iunlock(ip, XFS_ILOCK_EXCL);
  xfs_iunlock(tip, XFS_ILOCK_EXCL);
+ lock_flags &= ~XFS_ILOCK_EXCL;
 
  /*
   * There is a race condition here since we gave up the
@@ -1639,13 +1644,11 @@ xfs_swap_extents(
 
  tp = xfs_trans_alloc(mp, XFS_TRANS_SWAPEXT);
  error = xfs_trans_reserve(tp, &M_RES(mp)->tr_ichange, 0, 0);
- if (error) {
-  xfs_iunlock(ip,  XFS_IOLOCK_EXCL);
-  xfs_iunlock(tip, XFS_IOLOCK_EXCL);
-  xfs_trans_cancel(tp, 0);
-  goto out;
- }
+ if (error)
+  goto out_trans_cancel;
+
  xfs_lock_two_inodes(ip, tip, XFS_ILOCK_EXCL);
+ lock_flags |= XFS_ILOCK_EXCL;
 
  /*
   * Count the number of extended attribute blocks
@@ -1664,8 +1667,8 @@ xfs_swap_extents(
    goto out_trans_cancel;
  }
 
- xfs_trans_ijoin(tp, ip, XFS_ILOCK_EXCL | XFS_IOLOCK_EXCL);
- xfs_trans_ijoin(tp, tip, XFS_ILOCK_EXCL | XFS_IOLOCK_EXCL);
+ xfs_trans_ijoin(tp, ip, lock_flags);
+ xfs_trans_ijoin(tp, tip, lock_flags);
 
  /*
   * Before we've swapped the forks, lets set the owners of the forks
@@ -1794,8 +1797,8 @@ out:
  return error;
 
 out_unlock:
- xfs_iunlock(ip,  XFS_ILOCK_EXCL | XFS_IOLOCK_EXCL);
- xfs_iunlock(tip, XFS_ILOCK_EXCL | XFS_IOLOCK_EXCL);
+ xfs_iunlock(ip, lock_flags);
+ xfs_iunlock(tip, lock_flags);
  goto out;
 
 out_trans_cancel:
-- 
1.7.1