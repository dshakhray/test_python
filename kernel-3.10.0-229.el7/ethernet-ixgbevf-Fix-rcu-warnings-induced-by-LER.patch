From 201879c0cd7d176292494312018affe2dde83385 Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Mon, 8 Sep 2014 15:07:57 -0400
Subject: [ethernet] ixgbevf: Fix rcu warnings induced by LER

Message-id: <1410188883-6595-43-git-send-email-jogreene@redhat.com>
Patchwork-id: 92391
O-Subject: [RHEL7.1 PATCH 42/48] ixgbevf: Fix rcu warnings induced by LER
Bugzilla: 1091124
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>

BZ: 1091124
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7919168
Tested: In beaker. See BZ for details

Resolve some rcu warnings produced when LER actions take place.
This appears to be due to not holding the rtnl lock when calling
ixgbe_down, so hold the lock. Also avoid disabling the device
when it is already disabled. This check is necessary because the
callback can be called more than once in some cases.

Signed-off-by: Mark Rustad <mark.d.rustad@intel.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit bc0c715167c68ac2e737e221a80fc2a413f48155)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h b/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
index 35f3a3f..e586d30 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
@@ -419,6 +419,7 @@ enum ixbgevf_state_t {
  __IXGBEVF_TESTING,
  __IXGBEVF_RESETTING,
  __IXGBEVF_DOWN,
+ __IXGBEVF_DISABLED,
  __IXGBEVF_REMOVING,
 };
 
diff --git a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
index a74b1ba..4456689 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
@@ -3329,7 +3329,8 @@ static int ixgbevf_suspend(struct pci_dev *pdev, pm_message_t state)
   return retval;
 
 #endif
- pci_disable_device(pdev);
+ if (!test_and_set_bit(__IXGBEVF_DISABLED, &adapter->state))
+  pci_disable_device(pdev);
 
  return 0;
 }
@@ -3353,6 +3354,8 @@ static int ixgbevf_resume(struct pci_dev *pdev)
   dev_err(&pdev->dev, "Cannot enable PCI device from suspend\n");
   return err;
  }
+ smp_mb__before_clear_bit();
+ clear_bit(__IXGBEVF_DISABLED, &adapter->state);
  pci_set_master(pdev);
 
  ixgbevf_reset(adapter);
@@ -3607,7 +3610,8 @@ err_alloc_etherdev:
  pci_release_regions(pdev);
 err_pci_reg:
 err_dma:
- pci_disable_device(pdev);
+ if (!test_and_set_bit(__IXGBEVF_DISABLED, &adapter->state))
+  pci_disable_device(pdev);
  return err;
 }
 
@@ -3645,7 +3649,8 @@ static void ixgbevf_remove(struct pci_dev *pdev)
 
  free_netdev(netdev);
 
- pci_disable_device(pdev);
+ if (!test_and_set_bit(__IXGBEVF_DISABLED, &adapter->state))
+  pci_disable_device(pdev);
 }
 
 /**
@@ -3662,15 +3667,20 @@ static pci_ers_result_t ixgbevf_io_error_detected(struct pci_dev *pdev,
  struct net_device *netdev = pci_get_drvdata(pdev);
  struct ixgbevf_adapter *adapter = netdev_priv(netdev);
 
+ rtnl_lock();
  netif_device_detach(netdev);
 
- if (state == pci_channel_io_perm_failure)
+ if (state == pci_channel_io_perm_failure) {
+  rtnl_unlock();
   return PCI_ERS_RESULT_DISCONNECT;
+ }
 
  if (netif_running(netdev))
   ixgbevf_down(adapter);
 
- pci_disable_device(pdev);
+ if (!test_and_set_bit(__IXGBEVF_DISABLED, &adapter->state))
+  pci_disable_device(pdev);
+ rtnl_unlock();
 
  /* Request a slot slot reset. */
  return PCI_ERS_RESULT_NEED_RESET;
@@ -3694,6 +3704,8 @@ static pci_ers_result_t ixgbevf_io_slot_reset(struct pci_dev *pdev)
   return PCI_ERS_RESULT_DISCONNECT;
  }
 
+ smp_mb__before_clear_bit();
+ clear_bit(__IXGBEVF_DISABLED, &adapter->state);
  pci_set_master(pdev);
 
  ixgbevf_reset(adapter);
-- 
1.7.1