From c8db894a5aab879ef80dad72bc0a3e46c6c502e4 Mon Sep 17 00:00:00 2001
From: Oleg Nesterov <oleg@redhat.com>
Date: Mon, 16 Jun 2014 16:01:25 -0400
Subject: [kernel] uprobes: Conditionalize the usage of handle_riprel_insn()

Message-id: <20140616160125.GA15417@redhat.com>
Patchwork-id: 84074
O-Subject: [PATCH RHEL7 BZ 1073627 07/36] uprobes/x86: Conditionalize the usage of handle_riprel_insn()
Bugzilla: 1073627
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

RHBZ: 1073627

arch_uprobe_analyze_insn() calls handle_riprel_insn() at the start,
but only "0xff" and "default" cases need the UPROBE_FIX_RIP_ logic.
Move the callsite into "default" case and change the "0xff" case to
fall-through.

We are going to add the various hooks to handle the rip-relative
jmp/call instructions (and more), we need this change to enforce the
fact that the new code can not conflict with is_riprel_insn() logic
which, after this change, can only be used by default_xol_ops.

Note: arch_uprobe_abort_xol() still calls handle_riprel_post_xol()
directly. This is fine unless another _xol_ops we may add later will
need to reuse "UPROBE_FIX_RIP_AX|UPROBE_FIX_RIP_CX" bits in ->fixup.
In this case we can add uprobe_xol_ops->abort() hook, which (perhaps)
we will need anyway in the long term.

Signed-off-by: Oleg Nesterov <oleg@redhat.com>
Reviewed-by: Jim Keniston <jkenisto@us.ibm.com>
Reviewed-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
(cherry picked from commit e55848a4f8ee52465771983e144f0c3337776eda)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/uprobes.c b/arch/x86/kernel/uprobes.c
index 13ad8a3..08cdb82 100644
--- a/arch/x86/kernel/uprobes.c
+++ b/arch/x86/kernel/uprobes.c
@@ -482,8 +482,6 @@ int arch_uprobe_analyze_insn(struct arch_uprobe *auprobe, struct mm_struct *mm,
   * and annotate arch_uprobe->fixups accordingly. To start with, ->fixups
   * is either zero or it reflects rip-related fixups.
   */
- handle_riprel_insn(auprobe, &insn);
-
  switch (OPCODE1(&insn)) {
  case 0x9d:  /* popf */
   auprobe->fixups |= UPROBE_FIX_SETF;
@@ -512,9 +510,9 @@ int arch_uprobe_analyze_insn(struct arch_uprobe *auprobe, struct mm_struct *mm,
   case 4: case 5:   /* jmp or ljmp, indirect */
    fix_ip = false;
   }
-  break;
+  /* fall through */
  default:
-  break;
+  handle_riprel_insn(auprobe, &insn);
  }
 
  if (fix_ip)
-- 
1.7.1