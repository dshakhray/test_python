From bf66a67c162126ec944cbb5337ab92e8ee1b1083 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:02:55 -0400
Subject: [acpi] hotplug/pci: Do not check SLOT_ENABLED in enable_device()

Message-id: <20140710010255.22146.39872.stgit@gir.stowe>
Patchwork-id: 85584
O-Subject: [RHEL7.1 PATCH 045/105] ACPI / hotplug / PCI: Do not check SLOT_ENABLED in enable_device()
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 55502ddb2d83ada0661733361ec14b9cbef157a5

commit 55502ddb2d83ada0661733361ec14b9cbef157a5
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Sat Jul 13 23:27:26 2013 +0200

    ACPI / hotplug / PCI: Do not check SLOT_ENABLED in enable_device()

    With Thunderbolt you can daisy chain devices: connect new devices to
    an already plugged one.  In that case the "hotplug slot" is already
    enabled, but we still want to look for new PCI devices behind it.

    Reuse enable_device() to scan for new PCI devices on enabled slots
    and push the SLOT_ENABLED check up into acpiphp_enable_slot().

    [rjw: Rebased, modified the changelog]
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index c30acb2..a4e4b99 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -545,9 +545,6 @@ static int __ref enable_device(struct acpiphp_slot *slot)
  int num, max, pass;
  LIST_HEAD(add_list);
 
- if (slot->flags & SLOT_ENABLED)
-  goto err_exit;
-
  list_for_each_entry(func, &slot->funcs, sibling)
   acpiphp_bus_add(func_to_handle(func));
 
@@ -1024,11 +1021,14 @@ void acpiphp_remove_slots(struct pci_bus *bus)
  */
 int acpiphp_enable_slot(struct acpiphp_slot *slot)
 {
- int retval;
+ int retval = 0;
 
  mutex_lock(&slot->crit_sect);
+
  /* configure all functions */
- retval = enable_device(slot);
+ if (!(slot->flags & SLOT_ENABLED))
+  retval = enable_device(slot);
+
  mutex_unlock(&slot->crit_sect);
  return retval;
 }
-- 
1.7.1