From 7a9d963589e3586e4f884918eac0fc9222526679 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:42 -0400
Subject: [block] blk-mq: refactor request insertion_merging

Message-id: <1402670238-13916-55-git-send-email-snitzer@redhat.com>
Patchwork-id: 83842
O-Subject: [RHEL7.1 PATCH 054/150] blk-mq: refactor request insertion_merging
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit c6d600c65ebfa10a2a10d3e9183a24527ebe2aa4
Author: Jens Axboe <axboe@fb.com>
Date:   Wed Apr 30 13:43:56 2014 -0600

    blk-mq: refactor request insertion/merging

    Refactor the logic around adding a new bio to a software queue,
    so we nest the ctx->lock where we really need it (merge and
    insertion) and don't hold it when we don't (init and IO start
    accounting).

    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 77308a8..ca51ee4 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1037,17 +1037,25 @@ static void blk_mq_make_request(struct request_queue *q, struct bio *bio)
   }
  }
 
- spin_lock(&ctx->lock);
+ if (!(hctx->flags & BLK_MQ_F_SHOULD_MERGE)) {
+  init_request_from_bio(rq, bio);
 
- if ((hctx->flags & BLK_MQ_F_SHOULD_MERGE) &&
-     blk_mq_attempt_merge(q, ctx, bio))
-  __blk_mq_free_request(hctx, ctx, rq);
- else {
-  blk_mq_bio_to_request(rq, bio);
+  spin_lock(&ctx->lock);
+insert_rq:
   __blk_mq_insert_request(hctx, rq, false);
+  spin_unlock(&ctx->lock);
+  blk_account_io_start(rq, 1);
+ } else {
+  spin_lock(&ctx->lock);
+  if (!blk_mq_attempt_merge(q, ctx, bio)) {
+   init_request_from_bio(rq, bio);
+   goto insert_rq;
+  }
+
+  spin_unlock(&ctx->lock);
+  __blk_mq_free_request(hctx, ctx, rq);
  }
 
- spin_unlock(&ctx->lock);
 
  /*
   * For a SYNC request, send it to the hardware immediately. For an
-- 
1.7.1