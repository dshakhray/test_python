From 8538e5c5e32b9ec7ce95549e61ab70d74390fb9e Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:04:47 -0400
Subject: [base] unshare add_memory_section() from hotplug

Message-id: <20140710010447.22146.98167.stgit@gir.stowe>
Patchwork-id: 85602
O-Subject: [RHEL7.1 PATCH 063/105] drivers: base: unshare add_memory_section() from hotplug
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: d7f80530ad0a71615f54607128c30d2422bf4c02

commit d7f80530ad0a71615f54607128c30d2422bf4c02
Author: Seth Jennings <sjenning@linux.vnet.ibm.com>
Date:   Tue Aug 20 12:13:00 2013 -0500

    drivers: base: unshare add_memory_section() from hotplug

    add_memory_section() is currently called from both boot time and run
    time via hotplug and there is a lot of nastiness to allow for shared
    code including an enum parameter to convey the calling context to
    add_memory_section().

    This patch is the first step in breaking up the messy code sharing by
    pulling the hotplug path for add_memory_section() directly into
    register_new_memory().

    Signed-off-by: Seth Jennings <sjenning@linux.vnet.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/base/memory.c b/drivers/base/memory.c
index 67f9255..7bbd4f7 100644
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@ -649,12 +649,25 @@ static int add_memory_section(int nid, struct mem_section *section,
  */
 int register_new_memory(int nid, struct mem_section *section)
 {
- int ret;
+ int ret = 0;
+ struct memory_block *mem;
 
  mutex_lock(&mem_sysfs_mutex);
- ret = add_memory_section(nid, section, NULL, MEM_OFFLINE, HOTPLUG);
- mutex_unlock(&mem_sysfs_mutex);
 
+ mem = find_memory_block(section);
+ if (mem) {
+  mem->section_count++;
+  put_device(&mem->dev);
+ } else {
+  ret = init_memory_block(&mem, section, MEM_OFFLINE);
+  if (ret)
+   goto out;
+ }
+
+ if (mem->section_count == sections_per_block)
+  ret = register_mem_sect_under_node(mem, nid);
+out:
+ mutex_unlock(&mem_sysfs_mutex);
  return ret;
 }
 
-- 
1.7.1