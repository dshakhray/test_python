From 35f48091d962fc8914e7b13a9ea02d98d0c5412d Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Fri, 5 Sep 2014 01:51:52 -0400
Subject: [iommu] vt-d: fix memory leakage caused by commit ea8ea46

Message-id: <20140905015152.31297.35846.stgit@gir.stowe>
Patchwork-id: 91354
O-Subject: [RHEL7.1 PATCH 61/65] iommu/vt-d: fix memory leakage caused by commit ea8ea46
Bugzilla: 1129880 1087643
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1087643
Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1129880
Upstream Status: adeb25905c644350baf1f446bcd856517e58060e

commit adeb25905c644350baf1f446bcd856517e58060e
Author: Jiang Liu <jiang.liu@linux.intel.com>
Date:   Wed Apr 9 10:20:39 2014 +0800

    iommu/vt-d: fix memory leakage caused by commit ea8ea46

    Commit ea8ea46 "iommu/vt-d: Clean up and fix page table clear/free
    behaviour" introduces possible leakage of DMA page tables due to:
            for (pte = page_address(pg); !first_pte_in_page(pte); pte++) {
                    if (dma_pte_present(pte) && !dma_pte_superpage(pte))
                            freelist = dma_pte_list_pagetables(domain, level - 1,
                                                               pte, freelist);
            }

    For the first pte in a page, first_pte_in_page(pte) will always be true,
    thus dma_pte_list_pagetables() will never be called and leak DMA page
    tables if level is bigger than 1.

    Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c
index 69fa7da..13dc231 100644
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@ -1009,11 +1009,13 @@ static struct page *dma_pte_list_pagetables(struct dmar_domain *domain,
  if (level == 1)
   return freelist;
 
- for (pte = page_address(pg); !first_pte_in_page(pte); pte++) {
+ pte = page_address(pg);
+ do {
   if (dma_pte_present(pte) && !dma_pte_superpage(pte))
    freelist = dma_pte_list_pagetables(domain, level - 1,
           pte, freelist);
- }
+  pte++;
+ } while (!first_pte_in_page(pte));
 
  return freelist;
 }
-- 
1.7.1