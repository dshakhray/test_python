From 7bbcaa650704a0d9f059840201c76b2659b927ea Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:22:44 -0400
Subject: [fs] ceph: use vfs __set_page_dirty_nobuffers interface instead of doing it inside filesystem
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-58-git-send-email-sweil@redhat.com>
Patchwork-id: 89785
O-Subject: [PATCH 057/303] ceph: use vfs __set_page_dirty_nobuffers interface instead of doing it inside filesystem
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Sha Zhengju <handai.szj@taobao.com>

Following we will begin to add memcg dirty page accounting around
__set_page_dirty_{buffers,nobuffers} in vfs layer, so we'd better use vfs interface to
avoid exporting those details to filesystems.

Since vfs set_page_dirty() should be called under page lock, here we don't need elaborate
codes to handle racy anymore, and two WARN_ON() are added to detect such exceptions.
Thanks very much for Sage and Yan Zheng's coaching!

I tested it in a two server's ceph environment that one is client and the other is
mds/osd/mon, and run the following fsx test from xfstests:

  ./fsx   1MB -N 50000 -p 10000 -l 1048576
  ./fsx  10MB -N 50000 -p 10000 -l 10485760
  ./fsx 100MB -N 50000 -p 10000 -l 104857600

The fsx does lots of mmap-read/mmap-write/truncate operations and the tests completed
successfully without triggering any of WARN_ON.

Signed-off-by: Sha Zhengju <handai.szj@taobao.com>
Reviewed-by: Sage Weil <sage@inktank.com>
(cherry picked from commit 7d6e1f5461d0c16eb6aa8d226976995856d85e4e)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/addr.c b/fs/ceph/addr.c
index 429720f..a2a704f 100644
--- a/fs/ceph/addr.c
+++ b/fs/ceph/addr.c
@@ -70,15 +70,16 @@ static int ceph_set_page_dirty(struct page *page)
  struct address_space *mapping = page->mapping;
  struct inode *inode;
  struct ceph_inode_info *ci;
- int undo = 0;
  struct ceph_snap_context *snapc;
+ int ret;
 
  if (unlikely(!mapping))
   return !TestSetPageDirty(page);
 
- if (TestSetPageDirty(page)) {
+ if (PageDirty(page)) {
   dout("%p set_page_dirty %p idx %lu -- already dirty\n",
        mapping->host, page, page->index);
+  BUG_ON(!PagePrivate(page));
   return 0;
  }
 
@@ -107,35 +108,19 @@ static int ceph_set_page_dirty(struct page *page)
       snapc, snapc->seq, snapc->num_snaps);
  spin_unlock(&ci->i_ceph_lock);
 
- /* now adjust page */
- spin_lock_irq(&mapping->tree_lock);
- if (page->mapping) { /* Race with truncate? */
-  WARN_ON_ONCE(!PageUptodate(page));
-  account_page_dirtied(page, page->mapping);
-  radix_tree_tag_set(&mapping->page_tree,
-    page_index(page), PAGECACHE_TAG_DIRTY);
-
-  /*
-   * Reference snap context in page->private.  Also set
-   * PagePrivate so that we get invalidatepage callback.
-   */
-  page->private = (unsigned long)snapc;
-  SetPagePrivate(page);
- } else {
-  dout("ANON set_page_dirty %p (raced truncate?)\n", page);
-  undo = 1;
- }
-
- spin_unlock_irq(&mapping->tree_lock);
-
- if (undo)
-  /* whoops, we failed to dirty the page */
-  ceph_put_wrbuffer_cap_refs(ci, 1, snapc);
+ /*
+  * Reference snap context in page->private.  Also set
+  * PagePrivate so that we get invalidatepage callback.
+  */
+ BUG_ON(PagePrivate(page));
+ page->private = (unsigned long)snapc;
+ SetPagePrivate(page);
 
- __mark_inode_dirty(mapping->host, I_DIRTY_PAGES);
+ ret = __set_page_dirty_nobuffers(page);
+ WARN_ON(!PageLocked(page));
+ WARN_ON(!page->mapping);
 
- BUG_ON(!PageDirty(page));
- return 1;
+ return ret;
 }
 
 /*
-- 
1.7.1