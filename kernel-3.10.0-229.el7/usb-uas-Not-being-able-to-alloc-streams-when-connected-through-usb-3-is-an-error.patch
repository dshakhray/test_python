From 5a59de8f22727f2fe4b6dab15d7c5f7d9fcb1b54 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:06:37 -0400
Subject: [usb] uas: Not being able to alloc streams when connected through usb-3 is an error

Message-id: <1410887463-20674-326-git-send-email-dzickus@redhat.com>
Patchwork-id: 95236
O-Subject: [RHEL7 PATCH 325/591] uas: Not being able to alloc streams when connected through usb-3 is an error
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 58d51444cdd066239e9b660d72319d941c758fc3
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Oct 29 10:23:26 2013 +0100

    uas: Not being able to alloc streams when connected through usb-3 is an error

    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/storage/uas.c b/drivers/usb/storage/uas.c
index 754468b..d758fae 100644
--- a/drivers/usb/storage/uas.c
+++ b/drivers/usb/storage/uas.c
@@ -93,7 +93,6 @@ static int uas_submit_urbs(struct scsi_cmnd *cmnd,
     struct uas_dev_info *devinfo, gfp_t gfp);
 static void uas_do_work(struct work_struct *work);
 static int uas_try_complete(struct scsi_cmnd *cmnd, const char *caller);
-static void uas_configure_endpoints(struct uas_dev_info *devinfo);
 static void uas_free_streams(struct uas_dev_info *devinfo);
 static void uas_log_cmd_state(struct scsi_cmnd *cmnd, const char *caller);
 
@@ -898,7 +897,7 @@ static int uas_switch_interface(struct usb_device *udev,
    intf->altsetting[0].desc.bInterfaceNumber, alt);
 }
 
-static void uas_configure_endpoints(struct uas_dev_info *devinfo)
+static int uas_configure_endpoints(struct uas_dev_info *devinfo)
 {
  struct usb_host_endpoint *eps[4] = { };
  struct usb_device *udev = devinfo->udev;
@@ -920,14 +919,18 @@ static void uas_configure_endpoints(struct uas_dev_info *devinfo)
  devinfo->data_out_pipe = usb_sndbulkpipe(udev,
          usb_endpoint_num(&eps[3]->desc));
 
- devinfo->qdepth = usb_alloc_streams(devinfo->intf, eps + 1, 3, 256,
-        GFP_KERNEL);
- if (devinfo->qdepth < 0) {
+ if (udev->speed != USB_SPEED_SUPER) {
   devinfo->qdepth = 256;
   devinfo->use_streams = 0;
  } else {
+  devinfo->qdepth = usb_alloc_streams(devinfo->intf, eps + 1,
+          3, 256, GFP_KERNEL);
+  if (devinfo->qdepth < 0)
+   return devinfo->qdepth;
   devinfo->use_streams = 1;
  }
+
+ return 0;
 }
 
 static void uas_free_streams(struct uas_dev_info *devinfo)
@@ -984,7 +987,10 @@ static int uas_probe(struct usb_interface *intf, const struct usb_device_id *id)
  INIT_WORK(&devinfo->work, uas_do_work);
  INIT_LIST_HEAD(&devinfo->work_list);
  INIT_LIST_HEAD(&devinfo->dead_list);
- uas_configure_endpoints(devinfo);
+
+ result = uas_configure_endpoints(devinfo);
+ if (result)
+  goto set_alt0;
 
  result = scsi_init_shared_tag_map(shost, devinfo->qdepth - 2);
  if (result)
@@ -1039,7 +1045,11 @@ static int uas_post_reset(struct usb_interface *intf)
  struct uas_dev_info *devinfo = (void *)shost->hostdata[0];
  unsigned long flags;
 
- uas_configure_endpoints(devinfo);
+ if (uas_configure_endpoints(devinfo) != 0) {
+  shost_printk(KERN_ERR, shost,
+        "%s: alloc streams error after reset", __func__);
+  return 1;
+ }
 
  spin_lock_irqsave(shost->host_lock, flags);
  scsi_report_bus_reset(shost, 0);
-- 
1.7.1