From 8fac25e585c85bd4de4779a17737df2e39cbcf0e Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:36 -0400
Subject: [fs] ext4: Fix misspellings using 'codespell' tool

Message-id: <1414058125-4183-63-git-send-email-lczerner@redhat.com>
Patchwork-id: 98168
O-Subject: [RHEL 7.1 PATCH v2 062/171] ext4: Fix misspellings using 'codespell' tool
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Anatol Pomozov <anatol.pomozov@gmail.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 70261f568f3c08552f034742e3d5cb78c3877766

 Signed-off-by: Anatol Pomozov <anatol.pomozov@gmail.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext3/dir.c b/fs/ext3/dir.c
index 87eccbb..a765380 100644
--- a/fs/ext3/dir.c
+++ b/fs/ext3/dir.c
@@ -42,7 +42,7 @@ static unsigned char get_dtype(struct super_block *sb, int filetype)
 
 /**
  * Check if the given dir-inode refers to an htree-indexed directory
- * (or a directory which chould potentially get coverted to use htree
+ * (or a directory which could potentially get converted to use htree
  * indexing).
  *
  * Return 1 if it is a dx dir, 0 if not
diff --git a/fs/ext4/dir.c b/fs/ext4/dir.c
index f8d56e4..1b17b54 100644
--- a/fs/ext4/dir.c
+++ b/fs/ext4/dir.c
@@ -34,7 +34,7 @@ static int ext4_dx_readdir(struct file *filp,
 
 /**
  * Check if the given dir-inode refers to an htree-indexed directory
- * (or a directory which chould potentially get coverted to use htree
+ * (or a directory which could potentially get converted to use htree
  * indexing).
  *
  * Return 1 if it is a dx dir, 0 if not
diff --git a/fs/ext4/ext4_jbd2.h b/fs/ext4/ext4_jbd2.h
index 2877258..81cfefa 100644
--- a/fs/ext4/ext4_jbd2.h
+++ b/fs/ext4/ext4_jbd2.h
@@ -197,7 +197,7 @@ static inline void ext4_journal_callback_add(handle_t *handle,
  * ext4_journal_callback_del: delete a registered callback
  * @handle: active journal transaction handle on which callback was registered
  * @jce: registered journal callback entry to unregister
- * Return true if object was sucessfully removed
+ * Return true if object was successfully removed
  */
 static inline bool ext4_journal_callback_try_del(handle_t *handle,
           struct ext4_journal_cb_entry *jce)
diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index abb8aa4..8e7f1e7 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -3220,7 +3220,7 @@ fix_extent_len:
  * ext4_split_extents() splits an extent and mark extent which is covered
  * by @map as split_flags indicates
  *
- * It may result in splitting the extent into multiple extents (upto three)
+ * It may result in splitting the extent into multiple extents (up to three)
  * There are three possibilities:
  *   a> There is no split required
  *   b> Splits in two extents: Split is happening at either end of the extent
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 5b1326c..4a2a4df 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -1917,7 +1917,7 @@ static int mpage_submit_page(struct mpage_da_data *mpd, struct page *page)
 /*
  * mballoc gives us at most this number of blocks...
  * XXX: That seems to be only a limitation of ext4_mb_normalize_request().
- * The rest of mballoc seems to handle chunks upto full group size.
+ * The rest of mballoc seems to handle chunks up to full group size.
  */
 #define MAX_WRITEPAGES_EXTENT_LEN 2048
 
@@ -2058,7 +2058,7 @@ static int mpage_map_and_submit_buffers(struct mpage_da_data *mpd)
 
    if (page->index > end)
     break;
-   /* Upto 'end' pages must be contiguous */
+   /* Up to 'end' pages must be contiguous */
    BUG_ON(page->index != start);
    bh = head = page_buffers(page);
    do {
@@ -2257,7 +2257,7 @@ static int mpage_map_and_submit_extent(handle_t *handle,
 /*
  * Calculate the total number of credits to reserve for one writepages
  * iteration. This is called from ext4_writepages(). We map an extent of
- * upto MAX_WRITEPAGES_EXTENT_LEN blocks and then we go on and finish mapping
+ * up to MAX_WRITEPAGES_EXTENT_LEN blocks and then we go on and finish mapping
  * the last partial page. So in total we can map MAX_WRITEPAGES_EXTENT_LEN +
  * bpp - 1 blocks in bpp different extents.
  */
@@ -2444,7 +2444,7 @@ static int ext4_writepages(struct address_space *mapping,
 
  if (ext4_should_dioread_nolock(inode)) {
   /*
-   * We may need to convert upto one extent per block in
+   * We may need to convert up to one extent per block in
    * the page and we may dirty the inode.
    */
   rsv_blocks = 1 + (PAGE_CACHE_SIZE >> inode->i_blkbits);
diff --git a/fs/ext4/migrate.c b/fs/ext4/migrate.c
index f99bdb8..2ae73a8 100644
--- a/fs/ext4/migrate.c
+++ b/fs/ext4/migrate.c
@@ -494,7 +494,7 @@ int ext4_ext_migrate(struct inode *inode)
   * superblock modification.
   *
   * For the tmp_inode we already have committed the
-  * trascation that created the inode. Later as and
+  * transaction that created the inode. Later as and
   * when we add extents we extent the journal
   */
  /*
-- 
1.7.1