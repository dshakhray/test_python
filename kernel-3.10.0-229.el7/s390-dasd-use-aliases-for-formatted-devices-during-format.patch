From 45f5fad4705a62e5faa940d21e31a361549886d3 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Thu, 21 Aug 2014 14:48:50 -0400
Subject: [s390] dasd: use aliases for formatted devices during format

Message-id: <1408632535-642-2-git-send-email-brueckner@redhat.com>
Patchwork-id: 88682
O-Subject: [RHEL7.1 PATCH] [s390] dasd: use aliases for formatted devices during format
Bugzilla: 1132369
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Description
-----------
commit daa991bf30cbea85dc10560e6932406677ed5d5c
Author: Stefan Haberland <stefan.haberland@de.ibm.com>
Date:   Fri Jul 18 14:19:25 2014 +0200

    dasd: use aliases for formatted devices during format

    Formatting of a previously formatted device is slower than newly
    format a device when alias devices are available.
    For already formatted devices the alias devices are not used for
    formatting.

    Fix the alias handling for already formatted devices.

    Signed-off-by: Stefan Haberland <stefan.haberland@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1132369
https://bugzilla.redhat.com/show_bug.cgi?id=1132369

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=daa991bf30cbea85dc10560e6932406677ed5d5c

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7869031

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/block/dasd.c b/drivers/s390/block/dasd.c
index 242fa98..ec4b581 100644
--- a/drivers/s390/block/dasd.c
+++ b/drivers/s390/block/dasd.c
@@ -284,6 +284,12 @@ static int dasd_state_basic_to_known(struct dasd_device *device)
 {
  int rc;
 
+ if (device->discipline->basic_to_known) {
+  rc = device->discipline->basic_to_known(device);
+  if (rc)
+   return rc;
+ }
+
  if (device->block) {
   dasd_profile_exit(&device->block->profile);
   if (device->block->debugfs_dentry)
@@ -377,11 +383,6 @@ static int dasd_state_ready_to_basic(struct dasd_device *device)
 {
  int rc;
 
- if (device->discipline->ready_to_basic) {
-  rc = device->discipline->ready_to_basic(device);
-  if (rc)
-   return rc;
- }
  device->state = DASD_STATE_BASIC;
  if (device->block) {
   struct dasd_block *block = device->block;
diff --git a/drivers/s390/block/dasd_eckd.c b/drivers/s390/block/dasd_eckd.c
index 6a44b27..1102cd0 100644
--- a/drivers/s390/block/dasd_eckd.c
+++ b/drivers/s390/block/dasd_eckd.c
@@ -2034,7 +2034,7 @@ static int dasd_eckd_online_to_ready(struct dasd_device *device)
  return 0;
 };
 
-static int dasd_eckd_ready_to_basic(struct dasd_device *device)
+static int dasd_eckd_basic_to_known(struct dasd_device *device)
 {
  return dasd_alias_remove_device(device);
 };
@@ -4434,7 +4434,7 @@ static struct dasd_discipline dasd_eckd_discipline = {
  .verify_path = dasd_eckd_verify_path,
  .basic_to_ready = dasd_eckd_basic_to_ready,
  .online_to_ready = dasd_eckd_online_to_ready,
- .ready_to_basic = dasd_eckd_ready_to_basic,
+ .basic_to_known = dasd_eckd_basic_to_known,
  .fill_geometry = dasd_eckd_fill_geometry,
  .start_IO = dasd_start_IO,
  .term_IO = dasd_term_IO,
diff --git a/drivers/s390/block/dasd_int.h b/drivers/s390/block/dasd_int.h
index 0785bd9..8bc8419 100644
--- a/drivers/s390/block/dasd_int.h
+++ b/drivers/s390/block/dasd_int.h
@@ -302,7 +302,7 @@ struct dasd_discipline {
   */
  int (*basic_to_ready) (struct dasd_device *);
  int (*online_to_ready) (struct dasd_device *);
- int (*ready_to_basic)  (struct dasd_device *);
+ int (*basic_to_known)(struct dasd_device *);
 
  /* (struct dasd_device *);
   * Device operation functions. build_cp creates a ccw chain for
-- 
1.7.1