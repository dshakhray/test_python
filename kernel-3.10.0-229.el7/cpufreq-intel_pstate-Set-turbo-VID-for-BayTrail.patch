From b9e9d43a23949025b72299982fbe2d0f97458a3d Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:00 -0400
Subject: [cpufreq] intel_pstate: Set turbo VID for BayTrail

Message-id: <1409235879-1283-147-git-send-email-prarit@redhat.com>
Patchwork-id: 89465
O-Subject: [RHEL7.1 PATCH BZ 1134639 146/185] intel_pstate: Set turbo VID for BayTrail
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 21855ff5bcbdd075e1c99772827a84912ab083dd
Author: Dirk Brandewie <dirk.j.brandewie@intel.com>
Date:   Thu May 8 12:57:23 2014 -0700

    intel_pstate: Set turbo VID for BayTrail

    A documentation update exposed that there is a separate set of VID
    values that must be used in the turbo/boost P state range.  Add
    enumerating and setting the correct VID for P states in the turbo
    range.

    Cc: v3.13+ <stable@vger.kernel.org> # v3.13+
    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index e4c0985..0a5adf1 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -35,6 +35,7 @@
 #define BYT_RATIOS  0x66a
 #define BYT_VIDS  0x66b
 #define BYT_TURBO_RATIOS 0x66c
+#define BYT_TURBO_VIDS  0x66d
 
 
 #define FRAC_BITS 6
@@ -68,8 +69,9 @@ struct pstate_data {
 };
 
 struct vid_data {
- int32_t min;
- int32_t max;
+ int min;
+ int max;
+ int turbo;
  int32_t ratio;
 };
 
@@ -357,14 +359,14 @@ static int byt_get_min_pstate(void)
 {
  u64 value;
  rdmsrl(BYT_RATIOS, value);
- return (value >> 8) & 0xFF;
+ return (value >> 8) & 0x3F;
 }
 
 static int byt_get_max_pstate(void)
 {
  u64 value;
  rdmsrl(BYT_RATIOS, value);
- return (value >> 16) & 0xFF;
+ return (value >> 16) & 0x3F;
 }
 
 static int byt_get_turbo_pstate(void)
@@ -391,6 +393,9 @@ static void byt_set_pstate(struct cpudata *cpudata, int pstate)
  vid_fp = clamp_t(int32_t, vid_fp, cpudata->vid.min, cpudata->vid.max);
  vid = fp_toint(vid_fp);
 
+ if (pstate > cpudata->pstate.max_pstate)
+  vid = cpudata->vid.turbo;
+
  val |= vid;
 
  wrmsrl(MSR_IA32_PERF_CTL, val);
@@ -400,13 +405,17 @@ static void byt_get_vid(struct cpudata *cpudata)
 {
  u64 value;
 
+
  rdmsrl(BYT_VIDS, value);
- cpudata->vid.min = int_tofp((value >> 8) & 0x7f);
- cpudata->vid.max = int_tofp((value >> 16) & 0x7f);
+ cpudata->vid.min = int_tofp((value >> 8) & 0x3f);
+ cpudata->vid.max = int_tofp((value >> 16) & 0x3f);
  cpudata->vid.ratio = div_fp(
   cpudata->vid.max - cpudata->vid.min,
   int_tofp(cpudata->pstate.max_pstate -
    cpudata->pstate.min_pstate));
+
+ rdmsrl(BYT_TURBO_VIDS, value);
+ cpudata->vid.turbo = value & 0x7f;
 }
 
 
-- 
1.7.1