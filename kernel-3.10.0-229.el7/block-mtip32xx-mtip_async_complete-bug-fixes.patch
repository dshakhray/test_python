From 490a852a4d0a6c55d87ac20c0f7454ca9d85c597 Mon Sep 17 00:00:00 2001
From: Jeff Moyer <jmoyer@redhat.com>
Date: Thu, 29 May 2014 21:11:22 -0400
Subject: [block] mtip32xx: mtip_async_complete() bug fixes

Message-id: <1401397882-5166-3-git-send-email-jmoyer@redhat.com>
Patchwork-id: 81192
O-Subject: [RHEL7 PATCH 2/2] [block] mtip32xx: mtip_async_complete() bug fixes
Bugzilla: 1102281
RH-Acked-by: David Milburn <dmilburn@redhat.com>

This is a backport of the following commit:

  commit 5eb9291c36c7d71d7c6c832d5a4f551eb8ac015d
  Author: Sam Bradshaw <sbradshaw@micron.com>
  Date:   Thu Mar 13 14:33:30 2014 -0700

    This patch fixes 2 issues in the fast completion path:
    1) Possible double completions / double dma_unmap_sg() calls due to lack
    of atomicity in the check and subsequent dereference of the upper layer
    callback function. Fixed with cmpxchg before unmap and callback.
    2) Regression in unaligned IO constraining workaround for p420m devices.
    Fixed by checking if IO is unaligned and using proper semaphore if so.

    Signed-off-by: Sam Bradshaw <sbradshaw@micron.com>
    Cc: stable@kernel.org
    Signed-off-by: Jens Axboe <axboe@fb.com>

The unaligned IO bit is easily trigger-able by doing 512 byte direct
I/O to the device, so this is important to get fixed in z-stream.
Micron has agreed to test the fix, as we don't have the hardware in
our lab.

brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7512189
bz: 1102281

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/mtip32xx/mtip32xx.c b/drivers/block/mtip32xx/mtip32xx.c
index 11831bf..1a5d481 100644
--- a/drivers/block/mtip32xx/mtip32xx.c
+++ b/drivers/block/mtip32xx/mtip32xx.c
@@ -231,38 +231,45 @@ static void mtip_async_complete(struct mtip_port *port,
     void *data,
     int status)
 {
- struct mtip_cmd *command;
+ struct mtip_cmd *cmd;
  struct driver_data *dd = data;
- int cb_status = status ? -EIO : 0;
+ int unaligned, cb_status = status ? -EIO : 0;
+ void (*func)(void *, int);
 
  if (unlikely(!dd) || unlikely(!port))
   return;
 
- command = &port->commands[tag];
+ cmd = &port->commands[tag];
 
  if (unlikely(status == PORT_IRQ_TF_ERR)) {
   dev_warn(&port->dd->pdev->dev,
    "Command tag %d failed due to TFE\n", tag);
  }
 
- /* Unmap the DMA scatter list entries */
- dma_unmap_sg(&dd->pdev->dev,
-  command->sg,
-  command->scatter_ents,
-  command->direction);
+ /* Clear the active flag */
+ atomic_set(&port->commands[tag].active, 0);
 
  /* Upper layer callback */
- if (likely(command->async_callback))
-  command->async_callback(command->async_data, cb_status);
+ func = cmd->async_callback;
+ if (likely(func && cmpxchg(&cmd->async_callback, func, 0) == func)) {
 
- command->async_callback = NULL;
- command->comp_func = NULL;
+  /* Unmap the DMA scatter list entries */
+  dma_unmap_sg(&dd->pdev->dev,
+   cmd->sg,
+   cmd->scatter_ents,
+   cmd->direction);
 
- /* Clear the allocated and active bits for the command */
- atomic_set(&port->commands[tag].active, 0);
- release_slot(port, tag);
+  func(cmd->async_data, cb_status);
+  unaligned = cmd->unaligned;
 
- up(&port->cmd_slot);
+  /* Clear the allocated bit for the command */
+  release_slot(port, tag);
+
+  if (unlikely(unaligned))
+   up(&port->cmd_slot_unal);
+  else
+   up(&port->cmd_slot);
+ }
 }
 
 /*
@@ -639,11 +646,12 @@ static void mtip_timeout_function(unsigned long int data)
 {
  struct mtip_port *port = (struct mtip_port *) data;
  struct host_to_dev_fis *fis;
- struct mtip_cmd *command;
- int tag, cmdto_cnt = 0;
+ struct mtip_cmd *cmd;
+ int unaligned, tag, cmdto_cnt = 0;
  unsigned int bit, group;
  unsigned int num_command_slots;
  unsigned long to, tagaccum[SLOTBITS_IN_LONGS];
+ void (*func)(void *, int);
 
  if (unlikely(!port))
   return;
@@ -673,8 +681,8 @@ static void mtip_timeout_function(unsigned long int data)
    group = tag >> 5;
    bit = tag & 0x1F;
 
-   command = &port->commands[tag];
-   fis = (struct host_to_dev_fis *) command->command;
+   cmd = &port->commands[tag];
+   fis = (struct host_to_dev_fis *) cmd->command;
 
    set_bit(tag, tagaccum);
    cmdto_cnt++;
@@ -688,27 +696,30 @@ static void mtip_timeout_function(unsigned long int data)
     */
    writel(1 << bit, port->completed[group]);
 
-   /* Unmap the DMA scatter list entries */
-   dma_unmap_sg(&port->dd->pdev->dev,
-     command->sg,
-     command->scatter_ents,
-     command->direction);
+   /* Clear the active flag for the command */
+   atomic_set(&port->commands[tag].active, 0);
 
-   /* Call the async completion callback. */
-   if (likely(command->async_callback))
-    command->async_callback(command->async_data,
-        -EIO);
-   command->async_callback = NULL;
-   command->comp_func = NULL;
+   func = cmd->async_callback;
+   if (func &&
+       cmpxchg(&cmd->async_callback, func, 0) == func) {
 
-   /*
-    * Clear the allocated bit and active tag for the
-    * command.
-    */
-   atomic_set(&port->commands[tag].active, 0);
-   release_slot(port, tag);
+    /* Unmap the DMA scatter list entries */
+    dma_unmap_sg(&port->dd->pdev->dev,
+      cmd->sg,
+      cmd->scatter_ents,
+      cmd->direction);
 
-   up(&port->cmd_slot);
+    func(cmd->async_data, -EIO);
+    unaligned = cmd->unaligned;
+
+    /* Clear the allocated bit for the command. */
+    release_slot(port, tag);
+
+    if (unaligned)
+     up(&port->cmd_slot_unal);
+    else
+     up(&port->cmd_slot);
+   }
   }
  }
 
diff --git a/drivers/block/mtip32xx/mtip32xx.h b/drivers/block/mtip32xx/mtip32xx.h
index 9be7a15..26d6ca7 100644
--- a/drivers/block/mtip32xx/mtip32xx.h
+++ b/drivers/block/mtip32xx/mtip32xx.h
@@ -92,7 +92,7 @@
 
 /* Driver name and version strings */
 #define MTIP_DRV_NAME  "mtip32xx"
-#define MTIP_DRV_VERSION "1.2.6os3"
+#define MTIP_DRV_VERSION "1.2.6os4"
 
 /* Maximum number of minor device numbers per device. */
 #define MTIP_MAX_MINORS  16
-- 
1.7.1