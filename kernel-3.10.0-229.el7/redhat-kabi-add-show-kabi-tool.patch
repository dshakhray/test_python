From 1d38e5eaa05dec0bb0c78300ace1ab53eb7d91f1 Mon Sep 17 00:00:00 2001
From: Petr Oros <poros@redhat.com>
Date: Thu, 18 Sep 2014 12:44:39 -0400
Subject: [redhat] kabi: add show-kabi tool

Message-id: <9d14455248377442ad7a95a4d1898bff2f291abb.1411043629.git.poros@redhat.com>
Patchwork-id: 5224
O-Subject: [kernel team] [RHEL7 PATCH 3/5 v2] kabi: add show-kabi tool
Bugzilla:
RH-Acked-by: Jarod Wilson <jarod@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

Tool for merging kabi files into old styled files
 show-kabi:
  -a arch  architecture, ( default all archs )
  -k dir  kabi-module root directory ( default ./kabi-module )
  -m  output Module.kabi_$(arch) styled file
    default output kabi_whitelist_$(arch) styled file
  -r release release, for example 7.1 ( default latest )
  -s  show header ( no headers like [rhel7_x86_64_whitelist] )

Tests:
======
 tests $ tree
 .
 +-- kabi-module
 |   +-- kabi_ppc64
 |   |   +-- add_disk
 |   |   +-- add_timer
 |   |   +-- alloc_disk
 |   +-- kabi_s390x
 |   |   +-- add_disk
 |   |   +-- add_timer
 |   |   +-- alloc_disk
 |   |   +-- alloc_etherdev_mqs
 |   +-- kabi_x86_64
 |       +-- vsprintf
 |       +-- vunmap
 |       +-- wake_up_process
 |       +-- wireless_send_event
 |       +-- x86_cpu_to_apicid
 +-- show-kabi
 ===========================================================
 tests/kabi-module/kabi_ppc64 $ cat *
 #0-
 0x90e00558 add_disk vmlinux EXPORT_SYMBOL
 #0-
 0xbe2c0274 add_timer vmlinux EXPORT_SYMBOL
 #0-
 0x092d13e8 alloc_disk vmlinux EXPORT_SYMBOL
 tests/kabi-module/kabi_ppc64 $
 ============================================================
 tests/kabi-module/kabi_s390x $ cat *
 #0-
 0x873bab48 add_disk vmlinux EXPORT_SYMBOL
 #0-
 0xbe2c0274 add_timer vmlinux EXPORT_SYMBOL
 #0-
 0xff0fc525 alloc_disk vmlinux EXPORT_SYMBOL
 #0-
 0x608404e3 alloc_etherdev_mqs vmlinux EXPORT_SYMBOL
 tests/kabi-module/kabi_s390x $
 ============================================================
 tests/kabi-module/kabi_x86_64 $ cat *
 #1-
 0x2482e688 vsprintf vmlinux EXPORT_SYMBOL
 #1-2
 0x94961283 vunmap vmlinux EXPORT_SYMBOL
 #2-5
 0xe65cdceb wake_up_process vmlinux EXPORT_SYMBOL
 #3-
 0xf3b8b280 wireless_send_event vmlinux EXPORT_SYMBOL
 #0-3
 0x360b8d16 x86_cpu_to_apicid vmlinux EXPORT_SYMBOL
 tests/kabi-module/kabi_x86_64 $
 =============================================================
 tests $ ./show-kabi -h
 show-kabi:
  -a arch  architecture, ( default all archs )
  -k dir  kabi-module root directory ( default ./kabi-module )
  -m  output Module.kabi_$(arch) styled file
    default output kabi_whitelist_$(arch) styled file
  -r release release, for example 7.1 ( default latest )
  -s  show header ( no headers like [rhel7_x86_64_whitelist] )
  -h   this help
 ==============================================================
 tests $ ./show-kabi
  vsprintf
  wireless_send_event
  add_disk
  add_timer
  alloc_disk
  alloc_etherdev_mqs
  add_disk
  add_timer
  alloc_disk
 ==============================================================
 tests $ ./show-kabi -a x86_64
  vsprintf
  wireless_send_event
 ==============================================================
 tests $ ./show-kabi -a x86_64 -s
 [rhel7_x86_64_whitelist]
  vsprintf
  wireless_send_event
 ==============================================================
 tests $ ./show-kabi -a x86_64 -m
 0x2482e688 vsprintf vmlinux EXPORT_SYMBOL
 0x94961283 vunmap vmlinux EXPORT_SYMBOL
 0xe65cdceb wake_up_process vmlinux EXPORT_SYMBOL
 0xf3b8b280 wireless_send_event vmlinux EXPORT_SYMBOL
 0x360b8d16 x86_cpu_to_apicid vmlinux EXPORT_SYMBOL
 ===============================================================
 tests $ ./show-kabi -a x86_64 -r 7.0
  x86_cpu_to_apicid
 ===============================================================
 tests $ ./show-kabi -a x86_64 -r 7.1
  vsprintf
  vunmap
  x86_cpu_to_apicid
 ===============================================================
 tests $ ./show-kabi -a x86_64 -r 7.2
  vsprintf
  wake_up_process
  x86_cpu_to_apicid
 ===============================================================
 tests $ ./show-kabi -a x86_64 -r 7.3
  vsprintf
  wake_up_process
  wireless_send_event
 ===============================================================
 tests $ ./show-kabi -a x86_64 -r 7.4
  vsprintf
  wake_up_process
  wireless_send_event
 ===============================================================
 tests $ ./show-kabi -a x86_64 -r 7.5
  vsprintf
  wireless_send_event
 ===============================================================
 tests $ ./show-kabi -a x86_64 -r 7.6
  vsprintf
  wireless_send_event
 ===============================================================
 tests $ ./show-kabi -a ppc64 -m
 0x90e00558 add_disk vmlinux EXPORT_SYMBOL
 0xbe2c0274 add_timer vmlinux EXPORT_SYMBOL
 0x092d13e8 alloc_disk vmlinux EXPORT_SYMBOL
 tests $
 ===============================================================

Signed-off-by: Petr Oros <poros@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/redhat/kabi/show-kabi b/redhat/kabi/show-kabi
new file mode 100755
index 0000000..55d603f
--- /dev/null
+++ b/redhat/kabi/show-kabi
@@ -0,0 +1,147 @@
+#!/usr/bin/python
+#
+# show-kabi - Red Hat kABI reference module extraction tool
+#
+# We use this script to dump info from kabi infrastructure.
+#
+# Author: Petr Oros <poros@redhat.com>
+# Copyright (C) 2014 Red Hat, Inc.
+#
+# This software may be freely redistributed under the terms of the GNU
+# General Public License (GPL).
+
+__author__ = "Petr Oros <poros@redhat.com>"
+__version__ = "1.0"
+__date__ = "2014/09/05"
+__copyright__ = "Copyright (C) 2014 Red Hat, Inc"
+__license__ = "GPL"
+
+import getopt
+import os
+import sys
+
+def load_kabi(dirname, kabi, order, arch):
+    """Load a reference whitelist content."""
+
+    try:
+        archlist = []
+        if arch == "":
+            for arch in os.listdir(dirname):
+                if "kabi_" in arch:
+                    archlist.append(arch[5:])
+                    kabi[arch[5:]] = {}
+                    order[arch[5:]] = []
+                else:
+                    # no kabi arch dir
+                    continue
+        else:
+            archlist.append(arch)
+            kabi[arch] = {}
+            order[arch] = []
+
+        for arch in archlist:
+            for symbol in os.listdir(dirname + "/kabi_" + arch):
+                kabi_file = open(dirname + "/kabi_" + arch + "/" + symbol, "r")
+                line = []
+                #store version metadata
+                line.append(kabi_file.readline())
+                #store content ( no empty line is bad state )
+                line.append(kabi_file.readline().rstrip('\n'))
+                kabi[arch][symbol] = line
+                order[arch].append(symbol)
+                kabi_file.close()
+            order[arch].sort()
+    except OSError as err:
+        print "Invalid arch: " + str(arch)
+        print str(err)
+        sys.exit(1)
+
+
+def check_struct(dirname):
+    match_files = 0
+    try:
+        if os.path.isdir(dirname):
+            for arch_dir in os.listdir(dirname):
+                match_files += len(os.listdir(dirname + "/" + arch_dir))
+        return match_files
+    except OSError:
+        print "Invalid kabi-module/ root directory"
+        print "Use -k param to specify right path"
+        sys.exit(1)
+
+def show_kabi(kabi, order, release, fmt, show_head):
+    rhel_minor = release.split('.', 1)[-1]
+    if rhel_minor == "":
+        rhel_minor = sys.maxint
+    else:
+        rhel_minor = int(rhel_minor)
+    for current_arch in kabi:
+        if show_head and (fmt == "whitelist"):
+            print "[rhel7_" + current_arch + "_whitelist]"
+        for sym in order[current_arch]:
+            if kabi[current_arch][sym][0][0] != "#":
+                print "Invalid metadata format: " + kabi[current_arch][sym][0]
+                sys.exit(1)
+            # format Module.kabi_$arch styled file
+            # note: keep checksum for removed symbols
+            if fmt == "module":
+                print kabi[current_arch][sym][1]
+                continue
+            minor_range = kabi[current_arch][sym][0][1:-1].split("-", 2)
+            minor_range[0] = int(minor_range[0])
+            if minor_range[1] == "":
+                minor_range[1] = sys.maxint
+            else:
+                minor_range[1] = int(minor_range[1])
+            if minor_range[0] > rhel_minor:
+                continue
+            if (minor_range[1] <= rhel_minor) and (minor_range[1] != sys.maxint):
+                continue
+            # format kabi_whitelist_$arch styled file
+            print "\t" + sym
+
+def usage():
+    print """show-kabi:
+    -a arch        architecture, ( default all archs )
+    -k dir        kabi-module root directory ( default ./kabi-module )
+    -m        output Module.kabi_$(arch) styled file
+            default output kabi_whitelist_$(arch) styled file
+    -r release    release, for example 7.1 ( default latest )
+    -s        show header ( no headers like [rhel7_x86_64_whitelist] )
+    -h         this help"""
+
+if __name__ == "__main__":
+
+    kabi = {}
+    kabi_order = {}
+    arch = ""
+    kabi_dir = "kabi-module"
+    release = ""
+    kabi_head = False
+    kabi_out = "whitelist"
+
+    opts, args = getopt.getopt(sys.argv[1:], 'a:k:mr:sh')
+
+    for o, v in opts:
+        if o == "-a":
+            arch = v
+        if o == "-k":
+            kabi_dir = v
+        if o == "-m":
+            kabi_out = "module"
+        if o == "-r":
+            release = v
+        if o == "-s":
+            kabi_head = True
+        if o == "-h":
+            usage()
+            sys.exit(0)
+
+    if check_struct(kabi_dir) == 0:
+        print "Invalid directory structure!!!"
+        print "kabi-module/ specified as root must contain"
+        print "arch specific directories like kabi_ppc64..."
+        sys.exit(1)
+
+    load_kabi(kabi_dir, kabi, kabi_order, arch)
+    show_kabi(kabi, kabi_order, release, kabi_out, kabi_head)
-- 
1.7.1