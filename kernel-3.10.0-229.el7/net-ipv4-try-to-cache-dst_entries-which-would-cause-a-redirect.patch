From ffc7b682891eaeb4e0a0ea12b1fb3b8bd7707af2 Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Tue, 27 Jan 2015 09:29:35 -0500
Subject: [net] ipv4: try to cache dst_entries which would cause a redirect

Message-id: <9e98bcbd84e8be700caef4c6518c289e701fece3.1422350911.git.hannes@redhat.com>
Patchwork-id: 103583
O-Subject: [RHEL7.1 net] ipv4: try to cache dst_entries which would cause a redirect
Bugzilla: 1181819
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: Marcelo Leitner <mleitner@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1181819
Upstream Status: df4d92549f23e1c037e83323aff58a21b3de7fe0 (davem's net repository)
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8632826

Upstream Commit:
commit df4d92549f23e1c037e83323aff58a21b3de7fe0
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Fri Jan 23 12:01:26 2015 +0100

    ipv4: try to cache dst_entries which would cause a redirect

    Not caching dst_entries which cause redirects could be exploited by hosts
    on the same subnet, causing a severe DoS attack. This effect aggravated
    since commit f88649721268999 ("ipv4: fix dst race in sk_dst_get()").

    Lookups causing redirects will be allocated with DST_NOCACHE set which
    will force dst_release to free them via RCU.  Unfortunately waiting for
    RCU grace period just takes too long, we can end up with >1M dst_entries
    waiting to be released and the system will run OOM. rcuos threads cannot
    catch up under high softirq load.

    Attaching the flag to emit a redirect later on to the specific skb allows
    us to cache those dst_entries thus reducing the pressure on allocation
    and deallocation.

    This issue was discovered by Marcelo Leitner.

    Cc: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Marcelo Leitner <mleitner@redhat.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/ip.h b/include/net/ip.h
index 42ea6c8..0751f2e 100644
--- a/include/net/ip.h
+++ b/include/net/ip.h
@@ -38,11 +38,12 @@ struct inet_skb_parm {
  struct ip_options opt;  /* Compiled IP options  */
  unsigned char  flags;
 
-#define IPSKB_FORWARDED  1
-#define IPSKB_XFRM_TUNNEL_SIZE 2
-#define IPSKB_XFRM_TRANSFORMED 4
-#define IPSKB_FRAG_COMPLETE 8
-#define IPSKB_REROUTED  16
+#define IPSKB_FORWARDED  BIT(0)
+#define IPSKB_XFRM_TUNNEL_SIZE BIT(1)
+#define IPSKB_XFRM_TRANSFORMED BIT(2)
+#define IPSKB_FRAG_COMPLETE BIT(3)
+#define IPSKB_REROUTED  BIT(4)
+#define IPSKB_DOREDIRECT BIT(5)
 
  u16   frag_max_size;
 };
diff --git a/net/ipv4/ip_forward.c b/net/ipv4/ip_forward.c
index c2d2534..2e3056b 100644
--- a/net/ipv4/ip_forward.c
+++ b/net/ipv4/ip_forward.c
@@ -127,7 +127,8 @@ int ip_forward(struct sk_buff *skb)
   * We now generate an ICMP HOST REDIRECT giving the route
   * we calculated.
   */
- if (rt->rt_flags&RTCF_DOREDIRECT && !opt->srr && !skb_sec_path(skb))
+ if (IPCB(skb)->flags & IPSKB_DOREDIRECT && !opt->srr &&
+     !skb_sec_path(skb))
   ip_rt_send_redirect(skb);
 
  skb->priority = rt_tos2priority(iph->tos);
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 66b6e57..e67d4bd 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -1515,11 +1515,10 @@ static int __mkroute_input(struct sk_buff *skb,
 
  do_cache = res->fi && !itag;
  if (out_dev == in_dev && err && IN_DEV_TX_REDIRECTS(out_dev) &&
+     skb->protocol == htons(ETH_P_IP) &&
      (IN_DEV_SHARED_MEDIA(out_dev) ||
-      inet_addr_onlink(out_dev, saddr, FIB_RES_GW(*res)))) {
-  flags |= RTCF_DOREDIRECT;
-  do_cache = false;
- }
+      inet_addr_onlink(out_dev, saddr, FIB_RES_GW(*res))))
+  IPCB(skb)->flags |= IPSKB_DOREDIRECT;
 
  if (skb->protocol != htons(ETH_P_IP)) {
   /* Not IP (i.e. ARP). Do not create route, if it is
@@ -2256,6 +2255,8 @@ static int rt_fill_info(struct net *net,  __be32 dst, __be32 src,
  r->rtm_flags = (rt->rt_flags & ~0xFFFF) | RTM_F_CLONED;
  if (rt->rt_flags & RTCF_NOTIFY)
   r->rtm_flags |= RTM_F_NOTIFY;
+ if (IPCB(skb)->flags & IPSKB_DOREDIRECT)
+  r->rtm_flags |= RTCF_DOREDIRECT;
 
  if (nla_put_be32(skb, RTA_DST, dst))
   goto nla_put_failure;
-- 
1.7.1