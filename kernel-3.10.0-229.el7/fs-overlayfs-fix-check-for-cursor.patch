From a54d108172ce366705bfc3ef7b89ebe1ce557c1b Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:36:05 -0500
Subject: [fs] overlayfs: fix check for cursor

Message-id: <20141125163605.18115.66465.stgit@warthog.procyon.org.uk>
Patchwork-id: 100942
O-Subject: [PATCH 42/47] ovl: fix check for cursor
Bugzilla: 985875
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Miklos Szeredi <miklos@szeredi.hu>

ovl_cache_entry.name is now an array not a pointer, so it makes no sense
test for it being NULL.

Detected by coverity.

From: Miklos Szeredi <mszeredi@suse.cz>
Fixes: 68bf8611076a ("overlayfs: make ovl_cache_entry->name an array instead of
+pointer")
Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Original-commit: c2096537d40f026672c4c6adfcd7247ce5799604
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/overlayfs/readdir.c b/fs/overlayfs/readdir.c
index 8f25758..ec36f80 100644
--- a/fs/overlayfs/readdir.c
+++ b/fs/overlayfs/readdir.c
@@ -21,9 +21,10 @@ struct ovl_cache_entry {
  unsigned int len;
  unsigned int type;
  u64 ino;
- bool is_whiteout;
  struct list_head l_node;
  struct rb_node node;
+ bool is_whiteout;
+ bool is_cursor;
  char name[];
 };
 
@@ -258,7 +259,7 @@ static int ovl_dir_mark_whiteouts(struct dentry *dir,
 
  mutex_lock(&dir->d_inode->i_mutex);
  list_for_each_entry(p, rdd->list, l_node) {
-  if (!p->name)
+  if (p->is_cursor)
    continue;
 
   if (p->type != DT_CHR)
@@ -314,7 +315,6 @@ static inline int ovl_dir_read_merged(struct path *upperpath,
  }
 out:
  return err;
-
 }
 
 static void ovl_seek_cursor(struct ovl_dir_file *od, loff_t pos)
@@ -323,7 +323,7 @@ static void ovl_seek_cursor(struct ovl_dir_file *od, loff_t pos)
  loff_t off = 0;
 
  list_for_each_entry(p, &od->cache->entries, l_node) {
-  if (!p->name)
+  if (p->is_cursor)
    continue;
   if (off >= pos)
    break;
@@ -404,7 +404,7 @@ static int ovl_readdir(struct file *file, void *buf, filldir_t filler)
   p = list_entry(od->cursor.l_node.next, struct ovl_cache_entry, l_node);
   off = file->f_pos;
   /* Skip cursors */
-  if (p->name) {
+  if (!p->is_cursor) {
    if (!p->is_whiteout) {
     over = filler(buf, p->name, p->len, off, p->ino,
            p->type);
@@ -536,6 +536,7 @@ static int ovl_dir_open(struct inode *inode, struct file *file)
  od->realfile = realfile;
  od->is_real = (type != OVL_PATH_MERGE);
  od->is_upper = (type != OVL_PATH_LOWER);
+ od->cursor.is_cursor = true;
  file->private_data = od;
 
  return 0;
-- 
1.7.1