From 98f08fd62bdd220fb419038277d8f09296b6ccf6 Mon Sep 17 00:00:00 2001
From: Steve Best <sbest@redhat.com>
Date: Fri, 2 Jan 2015 15:04:08 -0500
Subject: [powerpc] kdump: Ignore failure in enabling big endian exception during crash

Message-id: <20150102150408.11134.19226.sendpatchset@ibm-p7r2-01.lab.bos.redhat.com>
Patchwork-id: 102429
O-Subject: [PATCH RHEL7.1 BZ1170362 v2] powerpc/kdump: Ignore failure in enabling big endian exception during crash
Bugzilla: 1170362
RH-Acked-by: Don Zickus <dzickus@redhat.com>

RHBZ#:
------
https://bugzilla.redhat.com/show_bug.cgi?id=1170362

Description:
------------
In LE kernel, we currently have a hack for kexec that resets the exception
endian before starting a new kernel as the kernel that is loaded could be a
big endian or a little endian kernel. In kdump case, resetting exception
endian fails when one or more cpus is disabled. But we can ignore the failure
and still go ahead, as in most cases crashkernel will be of same endianess
as primary kernel and reseting endianess is not even needed in those cases.
This patch adds a new inline function to say if this is kdump path. This
function is used at places where such a check is needed.

Signed-off-by: Hari Bathini <hbathini@linux.vnet.ibm.com>
[mpe: Rename to kdump_in_progress(), use bool, and edit comment]
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

v2 - use upstream accepted patch

Brew:
-----
BE: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8445523
LE: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8445531

Upstream:
---------
http://git.kernel.org/cgit/linux/kernel/git/mpe/linux.git/commit/?h=fixes&id=c1caae3de46a072d0855729aed6e793e536a4a55

Test Status:
------------
Tested by me and IBM.

I've done several successfully kdumps with this patch using both 7.1 BE and LE
systems.

This issue only showed up if cpu was disable by using chcpu -d x were x was
the cpu number to disable and on PowerVM LE system.

---------------------------------------------------------------
Steve Best

Proposed Patch:
---------------

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/kexec.h b/arch/powerpc/include/asm/kexec.h
index 15ee4db..bb6f5e7 100644
--- a/arch/powerpc/include/asm/kexec.h
+++ b/arch/powerpc/include/asm/kexec.h
@@ -103,6 +103,11 @@ extern int overlaps_crashkernel(unsigned long start, unsigned long size);
 extern void reserve_crashkernel(void);
 extern void machine_kexec_mask_interrupts(void);
 
+static inline bool kdump_in_progress(void)
+{
+ return crashing_cpu >= 0;
+}
+
 #else /* !CONFIG_KEXEC */
 static inline void crash_kexec_secondary(struct pt_regs *regs) { }
 
@@ -123,6 +128,11 @@ static inline int crash_shutdown_unregister(crash_shutdown_t handler)
  return 0;
 }
 
+static inline bool kdump_in_progress(void)
+{
+ return false;
+}
+
 #endif /* CONFIG_KEXEC */
 #endif /* ! __ASSEMBLY__ */
 #endif /* __KERNEL__ */
diff --git a/arch/powerpc/kernel/machine_kexec_64.c b/arch/powerpc/kernel/machine_kexec_64.c
index 59d229a..d260db4 100644
--- a/arch/powerpc/kernel/machine_kexec_64.c
+++ b/arch/powerpc/kernel/machine_kexec_64.c
@@ -330,7 +330,7 @@ void default_machine_kexec(struct kimage *image)
         * using debugger IPI.
         */
 
- if (crashing_cpu == -1)
+ if (!kdump_in_progress())
   kexec_prepare_cpus();
 
  pr_debug("kexec: Starting switchover sequence.\n");
diff --git a/arch/powerpc/platforms/pseries/lpar.c b/arch/powerpc/platforms/pseries/lpar.c
index 1feb1ba..774618b 100644
--- a/arch/powerpc/platforms/pseries/lpar.c
+++ b/arch/powerpc/platforms/pseries/lpar.c
@@ -42,6 +42,7 @@
 #include <asm/trace.h>
 #include <asm/firmware.h>
 #include <asm/plpar_wrappers.h>
+#include <asm/kexec.h>
 #include <asm/fadump.h>
 
 #include "pseries.h"
@@ -268,8 +269,13 @@ static void pSeries_lpar_hptab_clear(void)
    * out to the user, but at least this will stop us from
    * continuing on further and creating an even more
    * difficult to debug situation.
+   *
+   * There is a known problem when kdump'ing, if cpus are offline
+   * the above call will fail. Rather than panicking again, keep
+   * going and hope the kdump kernel is also little endian, which
+   * it usually is.
    */
-  if (rc)
+  if (rc && !kdump_in_progress())
    panic("Could not enable big endian exceptions");
  }
 #endif
-- 
1.7.1