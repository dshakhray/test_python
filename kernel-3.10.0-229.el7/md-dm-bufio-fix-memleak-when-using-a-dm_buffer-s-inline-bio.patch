From 64947862c3da06be7b440f1ebdcfe455ce292eaf Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Mon, 1 Dec 2014 16:37:00 -0500
Subject: [md] dm-bufio: fix memleak when using a dm_buffer's inline bio

Message-id: <20141201163700.GB8227@redhat.com>
Patchwork-id: 101023
O-Subject: [RHEL7.1 PATCH 1/9 v2] dm bufio: fix memleak when using a dm_buffer's inline bio
Bugzilla: 1165050
RH-Acked-by: Joe Thornber <thornber@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1165050

Upstream linux-dm.git commit 445559cdcb98a141f5de415b94fd6eaccab87e6d
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Tue Nov 25 17:45:15 2014 -0800

    dm bufio: fix memleak when using a dm_buffer's inline bio

    When dm-bufio sets out to use the bio built into a struct dm_buffer to
    issue an IO, it needs to call bio_reset after it's done with the bio
    so that we can free things attached to the bio such as the integrity
    payload.  Therefore, inject our own endio callback to take care of
    the bio_reset after calling submit_io's end_io callback.

    Test case:
    1. modprobe scsi_debug delay=0 dif=1 dix=199 ato=1 dev_size_mb=300
    2. Set up a dm-bufio client, e.g. dm-verity, on the scsi_debug device
    3. Repeatedly read metadata and watch kmalloc-192 leak!

    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-bufio.c b/drivers/md/dm-bufio.c
index 97492b0..7d86d66 100644
--- a/drivers/md/dm-bufio.c
+++ b/drivers/md/dm-bufio.c
@@ -578,6 +578,19 @@ static void use_dmio(struct dm_buffer *b, int rw, sector_t block,
   end_io(&b->bio, r);
 }
 
+static void inline_endio(struct bio *bio, int error)
+{
+ bio_end_io_t *end_fn = bio->bi_private;
+
+ /*
+  * Reset the bio to free any attached resources
+  * (e.g. bio integrity profiles).
+  */
+ bio_reset(bio);
+
+ end_fn(bio, error);
+}
+
 static void use_inline_bio(struct dm_buffer *b, int rw, sector_t block,
       bio_end_io_t *end_io)
 {
@@ -589,7 +602,12 @@ static void use_inline_bio(struct dm_buffer *b, int rw, sector_t block,
  b->bio.bi_max_vecs = DM_BUFIO_INLINE_VECS;
  b->bio.bi_sector = block << b->c->sectors_per_block_bits;
  b->bio.bi_bdev = b->c->bdev;
- b->bio.bi_end_io = end_io;
+ b->bio.bi_end_io = inline_endio;
+ /*
+  * Use of .bi_private isn't a problem here because
+  * the dm_buffer's inline bio is local to bufio.
+  */
+ b->bio.bi_private = end_io;
 
  /*
   * We assume that if len >= PAGE_SIZE ptr is page-aligned.
-- 
1.7.1