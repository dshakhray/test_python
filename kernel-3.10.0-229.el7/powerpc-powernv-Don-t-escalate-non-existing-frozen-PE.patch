From 2fc558f47f3a97f9f2943c82c081b7088cc73072 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:13:17 -0400
Subject: [powerpc] powernv: Don't escalate non-existing frozen PE

Message-id: <1410545655-205645-569-git-send-email-dzickus@redhat.com>
Patchwork-id: 94602
O-Subject: [RHEL7 PATCH 568/626] powerpc/powernv: Don't escalate non-existing frozen PE
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 71b540adffd9832e025dd9401178a8ef8c814e50
Author: Gavin Shan <gwshan@linux.vnet.ibm.com>
Date:   Mon May 5 09:29:04 2014 +1000

    powerpc/powernv: Don't escalate non-existing frozen PE

    Commit cb5b242c ("powerpc/eeh: Escalate error on non-existing PE")
    escalates the frozen state on non-existing PE to fenced PHB. It
    was to improve kdump reliability. After that, commit 361f2a2a
    ("powrpc/powernv: Reset PHB in kdump kernel") was introduced to
    issue complete reset on all PHBs to increase the reliability of
    kdump kernel.

    Commit cb5b242c becomes unuseful and it would be reverted.

    Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/platforms/powernv/eeh-ioda.c b/arch/powerpc/platforms/powernv/eeh-ioda.c
index 68167cd..5711f6f 100644
--- a/arch/powerpc/platforms/powernv/eeh-ioda.c
+++ b/arch/powerpc/platforms/powernv/eeh-ioda.c
@@ -794,23 +794,17 @@ static int ioda_eeh_next_error(struct eeh_pe **pe)
    break;
   case OPAL_EEH_PE_ERROR:
    /*
-    * If we can't find the corresponding PE, the
-    * PEEV / PEST would be messy. So we force an
-    * fenced PHB so that it can be recovered.
-    *
-    * If the PE has been marked as isolated, that
-    * should have been removed permanently or in
-    * progress with recovery. We needn't report
-    * it again.
+    * If we can't find the corresponding PE, we
+    * just try to unfreeze.
     */
    if (ioda_eeh_get_pe(hose,
-     be64_to_cpu(frozen_pe_no), pe)) {
-    *pe = phb_pe;
-    pr_err("EEH: Escalated fenced PHB#%x "
-           "detected for PE#%llx\n",
-     hose->global_number,
-     be64_to_cpu(frozen_pe_no));
-    ret = EEH_NEXT_ERR_FENCED_PHB;
+         be64_to_cpu(frozen_pe_no), pe)) {
+    /* Try best to clear it */
+    pr_info("EEH: Clear non-existing PHB#%x-PE#%llx\n",
+     hose->global_number, frozen_pe_no);
+    opal_pci_eeh_freeze_clear(phb->opal_id, frozen_pe_no,
+     OPAL_EEH_ACTION_CLEAR_FREEZE_ALL);
+    ret = EEH_NEXT_ERR_NONE;
    } else if ((*pe)->state & EEH_PE_ISOLATED) {
     ret = EEH_NEXT_ERR_NONE;
    } else {
-- 
1.7.1