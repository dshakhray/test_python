From 3d8aecb7bf18e418973c14bcdb95f6df4e3acb22 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:51 -0400
Subject: [fs] nfsv4: Fix problems with close in the presence of a delegation

Message-id: <1411050057-12417-89-git-send-email-steved@redhat.com>
Patchwork-id: 96255
O-Subject: [RHEL7.1 PATCH 88/94] NFSv4: Fix problems with close in the presence of a delegation
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

In the presence of delegations, we can no longer assume that the
state->n_rdwr, state->n_rdonly, state->n_wronly reflect the open
stateid share mode, and so we need to calculate the initial value
for calldata->arg.fmode using the state->flags.

Reported-by: James Drews <drews@engr.wisc.edu>
Fixes: 88069f77e1ac5 (NFSv41: Fix a potential state leakage when...)
Cc: stable@vger.kernel.org # 2.6.33+
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upsteam Id: aee7af356e151494d5014f57b33460b162f181b5
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 59e8449..57eb1d4 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -2601,6 +2601,7 @@ static void nfs4_close_prepare(struct rpc_task *task, void *data)
  struct nfs4_closedata *calldata = data;
  struct nfs4_state *state = calldata->state;
  struct inode *inode = calldata->inode;
+ bool is_rdonly, is_wronly, is_rdwr;
  int call_close = 0;
 
  dprintk("%s: begin!\n", __func__);
@@ -2608,18 +2609,24 @@ static void nfs4_close_prepare(struct rpc_task *task, void *data)
   goto out_wait;
 
  task->tk_msg.rpc_proc = &nfs4_procedures[NFSPROC4_CLNT_OPEN_DOWNGRADE];
- calldata->arg.fmode = FMODE_READ|FMODE_WRITE;
  spin_lock(&state->owner->so_lock);
+ is_rdwr = test_bit(NFS_O_RDWR_STATE, &state->flags);
+ is_rdonly = test_bit(NFS_O_RDONLY_STATE, &state->flags);
+ is_wronly = test_bit(NFS_O_WRONLY_STATE, &state->flags);
+ /* Calculate the current open share mode */
+ calldata->arg.fmode = 0;
+ if (is_rdonly || is_rdwr)
+  calldata->arg.fmode |= FMODE_READ;
+ if (is_wronly || is_rdwr)
+  calldata->arg.fmode |= FMODE_WRITE;
  /* Calculate the change in open mode */
  if (state->n_rdwr == 0) {
   if (state->n_rdonly == 0) {
-   call_close |= test_bit(NFS_O_RDONLY_STATE, &state->flags);
-   call_close |= test_bit(NFS_O_RDWR_STATE, &state->flags);
+   call_close |= is_rdonly || is_rdwr;
    calldata->arg.fmode &= ~FMODE_READ;
   }
   if (state->n_wronly == 0) {
-   call_close |= test_bit(NFS_O_WRONLY_STATE, &state->flags);
-   call_close |= test_bit(NFS_O_RDWR_STATE, &state->flags);
+   call_close |= is_wronly || is_rdwr;
    calldata->arg.fmode &= ~FMODE_WRITE;
   }
  }
-- 
1.7.1