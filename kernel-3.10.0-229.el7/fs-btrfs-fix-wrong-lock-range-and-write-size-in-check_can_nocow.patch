From 98c40d2f3cbd72a367e4ef15ed2d737ffd1b7cca Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:01:44 -0400
Subject: [fs] btrfs: fix wrong lock range and write size in check_can_nocow()

Message-id: <1407179109-13714-218-git-send-email-sandeen@redhat.com>
Patchwork-id: 87145
O-Subject: [RHEL7.1 PATCH 217/422] Btrfs: fix wrong lock range and write size in check_can_nocow()
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Miao Xie <miaox@cn.fujitsu.com>

commit c933956ddf80bc455d33cbcf39d35d935daf45a9
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Thu Feb 27 13:58:04 2014 +0800

    Btrfs: fix wrong lock range and write size in check_can_nocow()

    The write range may not be sector-aligned, for example:

           |--------|--------| <- write range, sector-unaligned, size: 2blocks
      |--------|--------|--------|  <- correct lock range, size: 3blocks

    But according to the old code, we used the size of write range to calculate
    the lock range directly, not considered the offset, we would get a wrong lock
    range:

           |--------|--------| <- write range, sector-unaligned, size: 2blocks
      |--------|--------|  <- wrong lock range, size: 2blocks

    And besides that, the old code also had the same problem when calculating
    the real write size. Correct them.

    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/file.c b/fs/btrfs/file.c
index 4f29097..cc074eb 100644
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -1411,7 +1411,7 @@ static noinline int check_can_nocow(struct inode *inode, loff_t pos,
  int ret;
 
  lockstart = round_down(pos, root->sectorsize);
- lockend = lockstart + round_up(*write_bytes, root->sectorsize) - 1;
+ lockend = round_up(pos + *write_bytes, root->sectorsize) - 1;
 
  while (1) {
   lock_extent(&BTRFS_I(inode)->io_tree, lockstart, lockend);
@@ -1434,7 +1434,8 @@ static noinline int check_can_nocow(struct inode *inode, loff_t pos,
      EXTENT_DIRTY | EXTENT_DELALLOC |
      EXTENT_DO_ACCOUNTING | EXTENT_DEFRAG, 0, 0,
      NULL, GFP_NOFS);
-  *write_bytes = min_t(size_t, *write_bytes, num_bytes);
+  *write_bytes = min_t(size_t, *write_bytes ,
+         num_bytes - pos + lockstart);
  }
 
  unlock_extent(&BTRFS_I(inode)->io_tree, lockstart, lockend);
-- 
1.7.1