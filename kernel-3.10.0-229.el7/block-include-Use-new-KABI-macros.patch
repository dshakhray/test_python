From f97b83fa0a7b4a30c6c268eadc4a7d30b2957448 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 2 Dec 2014 21:03:31 -0500
Subject: [block] include: Use new KABI macros

Message-id: <1417554215-238434-7-git-send-email-dzickus@redhat.com>
Patchwork-id: 101092
O-Subject: [RHEL7 PATCH 06/10] kabi, include/linux/blk: Use new KABI macros
Bugzilla: 1164383
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1164383
Upstream: RHEL only

Convert some of the include/linux/blk* GENKSYMS usage to use the new kabi macros.

Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Don Zickus <dzickus@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index e8c4972..736ba31 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -2,17 +2,15 @@
 #define BLK_MQ_H
 
 #include <linux/blkdev.h>
+#include <linux/rh_kabi.h>
 
 struct blk_mq_tags;
 
 struct blk_mq_cpu_notifier {
  struct list_head list;
  void *data;
-#ifdef __GENKSYMS__
- void (*notify)(void *data, unsigned long action, unsigned int cpu);
-#else
- int (*notify)(void *data, unsigned long action, unsigned int cpu);
-#endif
+ RH_KABI_REPLACE_P(void (*notify)(void *data, unsigned long action, unsigned int cpu),
+     int (*notify)(void *data, unsigned long action, unsigned int cpu))
 };
 
 struct blk_mq_ctxmap {
@@ -29,11 +27,8 @@ struct blk_mq_hw_ctx {
 
  unsigned long  state;  /* BLK_MQ_S_* flags */
 
-#ifdef __GENKSYMS__
- struct delayed_work delayed_work;
-#else
- struct delayed_work delay_work;
-#endif
+ RH_KABI_REPLACE(struct delayed_work delayed_work,
+          struct delayed_work delay_work)
 
  unsigned long  flags;  /* BLK_MQ_F_* flags */
 
@@ -45,19 +40,17 @@ struct blk_mq_hw_ctx {
  unsigned int  nr_ctx;
  struct blk_mq_ctx **ctxs;
 
-#ifdef __GENKSYMS__
- unsigned int  nr_ctx_map;
- unsigned long  *ctx_map;
+ RH_KABI_REPLACE(unsigned int  nr_ctx_map,
+   atomic_t  wait_index)
 
- struct request  **rqs;
- struct list_head page_list;
-#else
- atomic_t  wait_index;
- /* DEPRECATED: RHEL kABI padding follows, repurpose? */
- unsigned long  *padding1;
- struct request  **padding2;
- struct list_head padding3;
-#endif
+ RH_KABI_REPLACE_P(unsigned long  *ctx_map,
+            unsigned long  *padding1)
+
+ RH_KABI_REPLACE_P(struct request  **rqs,
+            struct request  **padding2)
+
+ RH_KABI_REPLACE(struct list_head  page_list,
+          struct list_head  padding3)
 
  struct blk_mq_tags *tags;
 
@@ -73,16 +66,14 @@ struct blk_mq_hw_ctx {
  struct blk_mq_cpu_notifier cpu_notifier;
  struct kobject  kobj;
 
-#ifndef __GENKSYMS__
- struct delayed_work run_work;
- cpumask_var_t  cpumask;
- int   next_cpu;
- int   next_cpu_batch;
+ RH_KABI_EXTEND(struct delayed_work run_work)
+ RH_KABI_EXTEND(cpumask_var_t  cpumask)
+ RH_KABI_EXTEND(int   next_cpu)
+ RH_KABI_EXTEND(int   next_cpu_batch)
 
- struct blk_mq_ctxmap ctx_map;
+ RH_KABI_EXTEND(struct blk_mq_ctxmap ctx_map)
 
- atomic_t  nr_active;
-#endif
+ RH_KABI_EXTEND(atomic_t  nr_active)
 };
 
 #ifdef __GENKSYMS__
@@ -115,12 +106,10 @@ struct blk_mq_tag_set {
 };
 #endif
 
-#ifdef __GENKSYMS__
 /* This thing was never covered by kabi */
-typedef int (queue_rq_fn)(struct blk_mq_hw_ctx *, struct request *);
-#else
-typedef int (queue_rq_fn)(struct blk_mq_hw_ctx *, struct request *, bool);
-#endif
+RH_KABI_REPLACE_P(typedef int (queue_rq_fn)(struct blk_mq_hw_ctx *, struct request *),
+            typedef int (queue_rq_fn)(struct blk_mq_hw_ctx *, struct request *, bool))
+
 typedef struct blk_mq_hw_ctx *(map_queue_fn)(struct request_queue *, const int);
 #ifdef __GENKSYMS__
 typedef struct blk_mq_hw_ctx *(alloc_hctx_fn)(struct blk_mq_reg *,unsigned int);
@@ -151,11 +140,7 @@ struct blk_mq_ops {
  /*
   * Called on request timeout
   */
-#ifdef __GENKSYMS__
- rq_timed_out_fn  *timeout;
-#else
- timeout_fn  *timeout;
-#endif
+ RH_KABI_REPLACE_P(rq_timed_out_fn *timeout, timeout_fn *timeout)
 
  softirq_done_fn  *complete;
 
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 4a2b2af..bea378b 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -24,6 +24,8 @@
 
 #include <asm/scatterlist.h>
 
+#include <linux/rh_kabi.h>
+
 struct module;
 struct scsi_ioctl_command;
 
@@ -106,12 +108,8 @@ struct request {
 #endif
  union {
   struct call_single_data csd;
-#ifdef __GENKSYMS__
-  struct work_struct mq_flush_work;
-#else
-  struct work_struct __DEPRECATED__requeue_work_moved_to_request_queue;
-  unsigned long fifo_time;
-#endif
+  RH_KABI_REPLACE(struct work_struct mq_flush_work,
+           unsigned long fifo_time)
  };
 
  struct request_queue *q;
@@ -322,22 +320,10 @@ struct queue_limits {
   * The following padding has been inserted before ABI freeze to
   * allow extending the structure while preserving ABI.
   */
-#ifdef __GENKSYMS__
- unsigned int  xcopy_reserved;
-
- unsigned long  rh_reserved1;
- unsigned long  rh_reserved2;
- unsigned long  rh_reserved3;
-#else
  unsigned int  xcopy_reserved;
-
- unsigned int  chunk_sectors;
-#if defined(__LP64__)
- unsigned int  rh_reserved1;
-#endif
- unsigned long  rh_reserved2;
- unsigned long  rh_reserved3;
-#endif
+ RH_KABI_USE(1, unsigned int chunk_sectors)
+ RH_KABI_RESERVE(2)
+ RH_KABI_RESERVE(3)
 };
 
 struct request_queue {
@@ -372,11 +358,9 @@ struct request_queue {
  unsigned int  *mq_map;
 
  /* sw queues */
-#ifdef __GENKSYMS__
- struct blk_mq_ctx *queue_ctx;
-#else
- struct blk_mq_ctx __percpu *queue_ctx;
-#endif
+ RH_KABI_REPLACE_P(struct blk_mq_ctx *queue_ctx,
+            struct blk_mq_ctx __percpu *queue_ctx)
+
  unsigned int  nr_queues;
 
  /* hw dispatch queues */
@@ -522,17 +506,15 @@ struct request_queue {
  struct percpu_counter mq_usage_counter;
  struct list_head all_q_node;
 
-#ifndef __GENKSYMS__
- unprep_rq_fn  *unprep_rq_fn;
+ RH_KABI_EXTEND(unprep_rq_fn  *unprep_rq_fn)
 
- struct blk_mq_tag_set *tag_set;
- struct list_head tag_set_list;
+ RH_KABI_EXTEND(struct blk_mq_tag_set *tag_set)
+ RH_KABI_EXTEND(struct list_head  tag_set_list)
 
- struct list_head requeue_list;
- spinlock_t  requeue_lock;
- struct work_struct requeue_work;
- int   mq_freeze_depth;
-#endif
+ RH_KABI_EXTEND(struct list_head  requeue_list)
+ RH_KABI_EXTEND(spinlock_t   requeue_lock)
+ RH_KABI_EXTEND(struct work_struct  requeue_work)
+ RH_KABI_EXTEND(int    mq_freeze_depth)
 };
 
 #define QUEUE_FLAG_QUEUED 1 /* uses generic tag queueing */
-- 
1.7.1