From 417f77e6dc1352284db1ffcf33fdb61de3d4b87b Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Mon, 28 Apr 2014 15:20:57 -0400
Subject: [net] ipv4: current group_info should be put after using

Message-id: <c93e11d2b28840b1f3726fab01ba6dc9905c67a9.1398698444.git.jbenc@redhat.com>
Patchwork-id: 79200
O-Subject: [RHEL7.1 net PATCH] net: ipv4: current group_info should be put after using.
Bugzilla: 1087416
CVE: CVE-2014-2851
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1087416
CVE-2014-2851
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7387487

Testing: only limited, as the reproducer takes hours

commit b04c46190219a4f845e46a459e3102137b7f6cac
Author: Wang, Xiaoming <xiaoming.wang@intel.com>
Date:   Mon Apr 14 12:30:45 2014 -0400

    net: ipv4: current group_info should be put after using.

    Plug a group_info refcount leak in ping_init.
    group_info is only needed during initialization and
    the code failed to release the reference on exit.
    While here move grabbing the reference to a place
    where it is actually needed.

    Signed-off-by: Chuansheng Liu <chuansheng.liu@intel.com>
    Signed-off-by: Zhang Dongxing <dongxing.zhang@intel.com>
    Signed-off-by: xiaoming wang <xiaoming.wang@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/ping.c b/net/ipv4/ping.c
index 3742343..fd81a2b 100644
--- a/net/ipv4/ping.c
+++ b/net/ipv4/ping.c
@@ -204,26 +204,33 @@ static int ping_init_sock(struct sock *sk)
 {
  struct net *net = sock_net(sk);
  kgid_t group = current_egid();
- struct group_info *group_info = get_current_groups();
- int i, j, count = group_info->ngroups;
+ struct group_info *group_info;
+ int i, j, count;
  kgid_t low, high;
+ int ret = 0;
 
  inet_get_ping_group_range_net(net, &low, &high);
  if (gid_lte(low, group) && gid_lte(group, high))
   return 0;
 
+ group_info = get_current_groups();
+ count = group_info->ngroups;
  for (i = 0; i < group_info->nblocks; i++) {
   int cp_count = min_t(int, NGROUPS_PER_BLOCK, count);
   for (j = 0; j < cp_count; j++) {
    kgid_t gid = group_info->blocks[i][j];
    if (gid_lte(low, gid) && gid_lte(gid, high))
-    return 0;
+    goto out_release_group;
   }
 
   count -= cp_count;
  }
 
- return -EACCES;
+ ret = -EACCES;
+
+out_release_group:
+ put_group_info(group_info);
+ return ret;
 }
 
 static void ping_close(struct sock *sk, long timeout)
-- 
1.7.1