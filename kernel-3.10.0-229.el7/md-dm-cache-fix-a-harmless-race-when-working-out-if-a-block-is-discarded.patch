From aa16347232133c3b761454aaae8fcd8ceef30bdf Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 28 Nov 2014 16:18:34 -0500
Subject: [md] dm-cache: fix a harmless race when working out if a block is discarded

Message-id: <1417191518-16689-6-git-send-email-snitzer@redhat.com>
Patchwork-id: 101005
O-Subject: [RHEL7.1 PATCH 5/9] dm cache: fix a harmless race when working out if a block is discarded
Bugzilla: 1165050
RH-Acked-by: Joe Thornber <thornber@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1165050

Upstream linux-dm.git commit c5ade12cee1d8f389e6a14a4bae9289daec67828
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Nov 25 13:14:57 2014 +0000

    dm cache: fix a harmless race when working out if a block is discarded

    It is more correct to hold the cell before checking the discard state.
    These flags are only used as hints to the policy so this change will
    have negligable effect.

    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-cache-target.c b/drivers/md/dm-cache-target.c
index 710ef63..894648d 100644
--- a/drivers/md/dm-cache-target.c
+++ b/drivers/md/dm-cache-target.c
@@ -1426,9 +1426,8 @@ static void process_bio(struct cache *cache, struct prealloc *structs,
  dm_oblock_t block = get_bio_block(cache, bio);
  struct dm_bio_prison_cell *cell_prealloc, *old_ocell, *new_ocell;
  struct policy_result lookup_result;
- bool discarded_block = is_discarded_oblock(cache, block);
  bool passthrough = passthrough_mode(&cache->features);
- bool can_migrate = !passthrough && (discarded_block || spare_migration_bandwidth(cache));
+ bool discarded_block, can_migrate;
 
  /*
   * Check to see if that block is currently migrating.
@@ -1440,6 +1439,9 @@ static void process_bio(struct cache *cache, struct prealloc *structs,
  if (r > 0)
   return;
 
+ discarded_block = is_discarded_oblock(cache, block);
+ can_migrate = !passthrough && (discarded_block || spare_migration_bandwidth(cache));
+
  r = policy_map(cache->policy, block, true, can_migrate, discarded_block,
          bio, &lookup_result);
 
-- 
1.7.1