From 970b7720a2b36338126db3ec3e44ed6c3ed0492f Mon Sep 17 00:00:00 2001
From: Vlad Yasevich <vyasevic@redhat.com>
Date: Fri, 29 Aug 2014 21:23:17 -0400
Subject: [ethernet] e1000: Fix TSO for non-accelerated vlan traffic

Message-id: <1409347403-2401-7-git-send-email-vyasevic@redhat.com>
Patchwork-id: 89927
O-Subject: [RHEL7 PATCH 06/12] e1000: Fix TSO for non-accelerated vlan traffic
Bugzilla: 1135619
RH-Acked-by: John Greene <jogreene@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>

From: Vlad Yasevich <vyasevich@gmail.com>

This device claims TSO and checksum support for vlans.  It also
allows a user to control vlan acceleration offloading.  As such,
it is possible to turn off vlan acceleration and configure a vlan
which will continue to support TSO.

In such situation the packet passed down the the device will contain
a vlan header and skb->protocol will be set to ETH_P_8021Q.
The device assumes that skb->protocol contains network protocol
value and uses that value to set up TSO and checksum information.
This will results in corrupted frames sent on the wire.

This patch extract the protocol value correctly and corrects TSO
for non-accelerated traffic.

CC: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
CC: Jesse Brandeburg <jesse.brandeburg@intel.com>
CC: Bruce Allan <bruce.w.allan@intel.com>
CC: Carolyn Wyborny <carolyn.wyborny@intel.com>
CC: Don Skidmore <donald.c.skidmore@intel.com>
CC: Greg Rose <gregory.v.rose@intel.com>
CC: Alex Duyck <alexander.h.duyck@intel.com>
CC: John Ronciak <john.ronciak@intel.com>
CC: Mitch Williams <mitch.a.williams@intel.com>
CC: Linux NICS <linux.nics@intel.com>
CC: e1000-devel@lists.sourceforge.net
Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 06f4d0333e86e302da3ac8386f873d5e353baf2e)
Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/e1000/e1000_main.c b/drivers/net/ethernet/intel/e1000/e1000_main.c
index d5f1b6e..60bb25c 100644
--- a/drivers/net/ethernet/intel/e1000/e1000_main.c
+++ b/drivers/net/ethernet/intel/e1000/e1000_main.c
@@ -2679,7 +2679,8 @@ set_itr_now:
 #define E1000_TX_FLAGS_VLAN_SHIFT 16
 
 static int e1000_tso(struct e1000_adapter *adapter,
-       struct e1000_tx_ring *tx_ring, struct sk_buff *skb)
+       struct e1000_tx_ring *tx_ring, struct sk_buff *skb,
+       __be16 protocol)
 {
  struct e1000_context_desc *context_desc;
  struct e1000_buffer *buffer_info;
@@ -2698,7 +2699,7 @@ static int e1000_tso(struct e1000_adapter *adapter,
 
   hdr_len = skb_transport_offset(skb) + tcp_hdrlen(skb);
   mss = skb_shinfo(skb)->gso_size;
-  if (skb->protocol == htons(ETH_P_IP)) {
+  if (protocol == htons(ETH_P_IP)) {
    struct iphdr *iph = ip_hdr(skb);
    iph->tot_len = 0;
    iph->check = 0;
@@ -2708,7 +2709,7 @@ static int e1000_tso(struct e1000_adapter *adapter,
          0);
    cmd_length = E1000_TXD_CMD_IP;
    ipcse = skb_transport_offset(skb) - 1;
-  } else if (skb->protocol == htons(ETH_P_IPV6)) {
+  } else if (skb_is_gso_v6(skb)) {
    ipv6_hdr(skb)->payload_len = 0;
    tcp_hdr(skb)->check =
     ~csum_ipv6_magic(&ipv6_hdr(skb)->saddr,
@@ -2751,7 +2752,8 @@ static int e1000_tso(struct e1000_adapter *adapter,
 }
 
 static bool e1000_tx_csum(struct e1000_adapter *adapter,
-     struct e1000_tx_ring *tx_ring, struct sk_buff *skb)
+     struct e1000_tx_ring *tx_ring, struct sk_buff *skb,
+     __be16 protocol)
 {
  struct e1000_context_desc *context_desc;
  struct e1000_buffer *buffer_info;
@@ -2762,7 +2764,7 @@ static bool e1000_tx_csum(struct e1000_adapter *adapter,
  if (skb->ip_summed != CHECKSUM_PARTIAL)
   return false;
 
- switch (skb->protocol) {
+ switch (protocol) {
  case cpu_to_be16(ETH_P_IP):
   if (ip_hdr(skb)->protocol == IPPROTO_TCP)
    cmd_len |= E1000_TXD_CMD_TCP;
@@ -3103,6 +3105,7 @@ static netdev_tx_t e1000_xmit_frame(struct sk_buff *skb,
  int count = 0;
  int tso;
  unsigned int f;
+ __be16 protocol = vlan_get_protocol(skb);
 
  /* This goes back to the question of how to logically map a Tx queue
   * to a flow.  Right now, performance is impacted slightly negatively
@@ -3221,7 +3224,7 @@ static netdev_tx_t e1000_xmit_frame(struct sk_buff *skb,
 
  first = tx_ring->next_to_use;
 
- tso = e1000_tso(adapter, tx_ring, skb);
+ tso = e1000_tso(adapter, tx_ring, skb, protocol);
  if (tso < 0) {
   dev_kfree_skb_any(skb);
   return NETDEV_TX_OK;
@@ -3231,10 +3234,10 @@ static netdev_tx_t e1000_xmit_frame(struct sk_buff *skb,
   if (likely(hw->mac_type != e1000_82544))
    tx_ring->last_tx_tso = true;
   tx_flags |= E1000_TX_FLAGS_TSO;
- } else if (likely(e1000_tx_csum(adapter, tx_ring, skb)))
+ } else if (likely(e1000_tx_csum(adapter, tx_ring, skb, protocol)))
   tx_flags |= E1000_TX_FLAGS_CSUM;
 
- if (likely(skb->protocol == htons(ETH_P_IP)))
+ if (protocol == htons(ETH_P_IP))
   tx_flags |= E1000_TX_FLAGS_IPV4;
 
  if (unlikely(skb->no_fcs))
-- 
1.7.1