From 091f2cea832ae6000fb6c6da58765012142d97fd Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jpirko@redhat.com>
Date: Fri, 27 Jun 2014 14:48:36 -0400
Subject: [net] always advertise rx_flags changes via netlink

Message-id: <1403880516-18932-2-git-send-email-jpirko@redhat.com>
Patchwork-id: 85059
O-Subject: [patch rhel7 net 2/2] net: dev: always advertise rx_flags changes via netlink
Bugzilla: 1113925
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>

BZ1113925
https://brewweb.devel.redhat.com/taskinfo?taskID=7633144
Tested on my testing machine

upstream commit 991fb3f74c142e1a1891ff4f7e9a6285a79a8ea1
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Wed Sep 25 12:02:45 2013 +0200

    dev: always advertise rx_flags changes via netlink

    When flags IFF_PROMISC and IFF_ALLMULTI are changed, netlink messages are not
    consistent. For example, if a multicast daemon is running (flag IFF_ALLMULTI
    set in dev->flags but not dev->gflags, ie not exported to userspace) and then a
    user sets it via netlink (flag IFF_ALLMULTI set in dev->flags and dev->gflags, ie
    exported to userspace), no netlink message is sent.
    Same for IFF_PROMISC and because dev->promiscuity is exported via
    IFLA_PROMISCUITY, we may send a netlink message after each change of this
    counter.

Signed-off-by: Jiri Pirko <jpirko@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/core/dev.c b/net/core/dev.c
index 3fd6f40..07b1283 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -4566,7 +4566,7 @@ static void dev_change_rx_flags(struct net_device *dev, int flags)
   ops->ndo_change_rx_flags(dev, flags);
 }
 
-static int __dev_set_promiscuity(struct net_device *dev, int inc)
+static int __dev_set_promiscuity(struct net_device *dev, int inc, bool notify)
 {
  unsigned int old_flags = dev->flags;
  kuid_t uid;
@@ -4609,6 +4609,8 @@ static int __dev_set_promiscuity(struct net_device *dev, int inc)
 
   dev_change_rx_flags(dev, IFF_PROMISC);
  }
+ if (notify)
+  __dev_notify_flags(dev, old_flags, IFF_PROMISC);
  return 0;
 }
 
@@ -4628,7 +4630,7 @@ int dev_set_promiscuity(struct net_device *dev, int inc)
  unsigned int old_flags = dev->flags;
  int err;
 
- err = __dev_set_promiscuity(dev, inc);
+ err = __dev_set_promiscuity(dev, inc, true);
  if (err < 0)
   return err;
  if (dev->flags != old_flags)
@@ -4637,22 +4639,9 @@ int dev_set_promiscuity(struct net_device *dev, int inc)
 }
 EXPORT_SYMBOL(dev_set_promiscuity);
 
-/**
- * dev_set_allmulti - update allmulti count on a device
- * @dev: device
- * @inc: modifier
- *
- * Add or remove reception of all multicast frames to a device. While the
- * count in the device remains above zero the interface remains listening
- * to all interfaces. Once it hits zero the device reverts back to normal
- * filtering operation. A negative @inc value is used to drop the counter
- * when releasing a resource needing all multicasts.
- * Return 0 if successful or a negative errno code on error.
- */
-
-int dev_set_allmulti(struct net_device *dev, int inc)
+static int __dev_set_allmulti(struct net_device *dev, int inc, bool notify)
 {
- unsigned int old_flags = dev->flags;
+ unsigned int old_flags = dev->flags, old_gflags = dev->gflags;
 
  ASSERT_RTNL();
 
@@ -4675,9 +4664,30 @@ int dev_set_allmulti(struct net_device *dev, int inc)
  if (dev->flags ^ old_flags) {
   dev_change_rx_flags(dev, IFF_ALLMULTI);
   dev_set_rx_mode(dev);
+  if (notify)
+   __dev_notify_flags(dev, old_flags,
+        dev->gflags ^ old_gflags);
  }
  return 0;
 }
+
+/**
+ * dev_set_allmulti - update allmulti count on a device
+ * @dev: device
+ * @inc: modifier
+ *
+ * Add or remove reception of all multicast frames to a device. While the
+ * count in the device remains above zero the interface remains listening
+ * to all interfaces. Once it hits zero the device reverts back to normal
+ * filtering operation. A negative @inc value is used to drop the counter
+ * when releasing a resource needing all multicasts.
+ * Return 0 if successful or a negative errno code on error.
+ */
+
+int dev_set_allmulti(struct net_device *dev, int inc)
+{
+ return __dev_set_allmulti(dev, inc, true);
+}
 EXPORT_SYMBOL(dev_set_allmulti);
 
 /*
@@ -4702,10 +4712,10 @@ void __dev_set_rx_mode(struct net_device *dev)
    * therefore calling __dev_set_promiscuity here is safe.
    */
   if (!netdev_uc_empty(dev) && !dev->uc_promisc) {
-   __dev_set_promiscuity(dev, 1);
+   __dev_set_promiscuity(dev, 1, false);
    dev->uc_promisc = true;
   } else if (netdev_uc_empty(dev) && dev->uc_promisc) {
-   __dev_set_promiscuity(dev, -1);
+   __dev_set_promiscuity(dev, -1, false);
    dev->uc_promisc = false;
   }
  }
@@ -4794,9 +4804,13 @@ int __dev_change_flags(struct net_device *dev, unsigned int flags)
 
  if ((flags ^ dev->gflags) & IFF_PROMISC) {
   int inc = (flags & IFF_PROMISC) ? 1 : -1;
+  unsigned int old_flags = dev->flags;
 
   dev->gflags ^= IFF_PROMISC;
-  dev_set_promiscuity(dev, inc);
+
+  if (__dev_set_promiscuity(dev, inc, false) >= 0)
+   if (dev->flags != old_flags)
+    dev_set_rx_mode(dev);
  }
 
  /* NOTE: order of synchronization of IFF_PROMISC and IFF_ALLMULTI
@@ -4807,7 +4821,7 @@ int __dev_change_flags(struct net_device *dev, unsigned int flags)
   int inc = (flags & IFF_ALLMULTI) ? 1 : -1;
 
   dev->gflags ^= IFF_ALLMULTI;
-  dev_set_allmulti(dev, inc);
+  __dev_set_allmulti(dev, inc, false);
  }
 
  return ret;
@@ -4844,13 +4858,13 @@ void __dev_notify_flags(struct net_device *dev, unsigned int old_flags,
 int dev_change_flags(struct net_device *dev, unsigned int flags)
 {
  int ret;
- unsigned int changes, old_flags = dev->flags;
+ unsigned int changes, old_flags = dev->flags, old_gflags = dev->gflags;
 
  ret = __dev_change_flags(dev, flags);
  if (ret < 0)
   return ret;
 
- changes = old_flags ^ dev->flags;
+ changes = (old_flags ^ dev->flags) | (old_gflags ^ dev->gflags);
  __dev_notify_flags(dev, old_flags, changes);
  return ret;
 }
-- 
1.7.1