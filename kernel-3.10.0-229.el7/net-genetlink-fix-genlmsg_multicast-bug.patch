From 2c03b8d9cbe6de0d7021866d75c5a744c4cc89fe Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:27:02 -0400
Subject: [net] genetlink: fix genlmsg_multicast() bug

Message-id: <f5a067fabc9a7bbc8c322997221c0b2ee5b50232.1410528958.git.jbenc@redhat.com>
Patchwork-id: 93984
O-Subject: [RHEL7.1 net PATCH 20/23] genetlink: fix genlmsg_multicast() bug
Bugzilla: 1140656
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140656
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit 220815a9665f7deca98a09ecca655044f94cfa44
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Nov 21 18:17:04 2013 +0100

    genetlink: fix genlmsg_multicast() bug

    Unfortunately, I introduced a tremendously stupid bug into
    genlmsg_multicast() when doing all those multicast group
    changes: it adjusts the group number, but then passes it
    to genlmsg_multicast_netns() which does that again.

    Somehow, my tests failed to catch this, so add a warning
    into genlmsg_multicast_netns() and remove the offending
    group ID adjustment.

    Also add a warning to the similar code in other functions
    so people who misuse them are more loudly warned.

    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/genetlink.h b/include/net/genetlink.h
index f151c11..16ac93e 100644
--- a/include/net/genetlink.h
+++ b/include/net/genetlink.h
@@ -276,7 +276,7 @@ static inline int genlmsg_multicast_netns(struct genl_family *family,
        struct net *net, struct sk_buff *skb,
        u32 portid, unsigned int group, gfp_t flags)
 {
- if (group >= family->n_mcgrps)
+ if (WARN_ON_ONCE(group >= family->n_mcgrps))
   return -EINVAL;
  group = family->mcgrp_offset + group;
  return nlmsg_multicast(net->genl_sock, skb, portid, group, flags);
@@ -294,9 +294,6 @@ static inline int genlmsg_multicast(struct genl_family *family,
         struct sk_buff *skb, u32 portid,
         unsigned int group, gfp_t flags)
 {
- if (group >= family->n_mcgrps)
-  return -EINVAL;
- group = family->mcgrp_offset + group;
  return genlmsg_multicast_netns(family, &init_net, skb,
            portid, group, flags);
 }
diff --git a/net/netlink/genetlink.c b/net/netlink/genetlink.c
index 0969996..2e79b96 100644
--- a/net/netlink/genetlink.c
+++ b/net/netlink/genetlink.c
@@ -1066,7 +1066,7 @@ static int genlmsg_mcast(struct sk_buff *skb, u32 portid, unsigned long group,
 int genlmsg_multicast_allns(struct genl_family *family, struct sk_buff *skb,
        u32 portid, unsigned int group, gfp_t flags)
 {
- if (group >= family->n_mcgrps)
+ if (WARN_ON_ONCE(group >= family->n_mcgrps))
   return -EINVAL;
  group = family->mcgrp_offset + group;
  return genlmsg_mcast(skb, portid, group, flags);
@@ -1083,7 +1083,7 @@ void genl_notify(struct genl_family *family,
  if (nlh)
   report = nlmsg_report(nlh);
 
- if (group >= family->n_mcgrps)
+ if (WARN_ON_ONCE(group >= family->n_mcgrps))
   return;
  group = family->mcgrp_offset + group;
  nlmsg_notify(sk, skb, portid, group, report, flags);
-- 
1.7.1