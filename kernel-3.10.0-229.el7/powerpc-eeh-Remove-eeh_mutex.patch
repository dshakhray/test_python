From bfc8ced1014af2479d98241182d643bcc01357e3 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:03:53 -0400
Subject: [powerpc] eeh: Remove eeh_mutex

Message-id: <1410545655-205645-5-git-send-email-dzickus@redhat.com>
Patchwork-id: 94067
O-Subject: [RHEL7 PATCH 004/626] powerpc/eeh: Remove eeh_mutex
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit ef6a28577398df2853abf123cb4a2e0c57eb879a
Author: Gavin Shan <shangw@linux.vnet.ibm.com>
Date:   Tue Jun 25 14:35:27 2013 +0800

    powerpc/eeh: Remove eeh_mutex

    Originally, eeh_mutex was introduced to protect the PE hierarchy
    tree and the attached EEH devices because EEH core was possiblly
    running with multiple threads to access the PE hierarchy tree.
    However, we now have only one kthread in EEH core. So we needn't
    the eeh_mutex and just remove it.

    Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/eeh.h b/arch/powerpc/include/asm/eeh.h
index 378a5ad..d3e5e9b 100644
--- a/arch/powerpc/include/asm/eeh.h
+++ b/arch/powerpc/include/asm/eeh.h
@@ -161,7 +161,6 @@ struct eeh_ops {
 
 extern struct eeh_ops *eeh_ops;
 extern int eeh_subsystem_enabled;
-extern struct mutex eeh_mutex;
 extern raw_spinlock_t confirm_error_lock;
 extern int eeh_probe_mode;
 
@@ -183,16 +182,6 @@ static inline int eeh_probe_mode_dev(void)
  return (eeh_probe_mode == EEH_PROBE_MODE_DEV);
 }
 
-static inline void eeh_lock(void)
-{
- mutex_lock(&eeh_mutex);
-}
-
-static inline void eeh_unlock(void)
-{
- mutex_unlock(&eeh_mutex);
-}
-
 static inline void eeh_serialize_lock(unsigned long *flags)
 {
  raw_spin_lock_irqsave(&confirm_error_lock, *flags);
@@ -289,9 +278,6 @@ static inline void eeh_add_sysfs_files(struct pci_bus *bus) { }
 
 static inline void eeh_remove_device(struct pci_dev *dev) { }
 
-static inline void eeh_lock(void) { }
-static inline void eeh_unlock(void) { }
-
 #define EEH_POSSIBLE_ERROR(val, type) (0)
 #define EEH_IO_ERROR_VALUE(size) (-1UL)
 #endif /* CONFIG_EEH */
diff --git a/arch/powerpc/kernel/eeh.c b/arch/powerpc/kernel/eeh.c
index b22ab76..8d4bf9e 100644
--- a/arch/powerpc/kernel/eeh.c
+++ b/arch/powerpc/kernel/eeh.c
@@ -103,9 +103,6 @@ EXPORT_SYMBOL(eeh_subsystem_enabled);
  */
 int eeh_probe_mode;
 
-/* Global EEH mutex */
-DEFINE_MUTEX(eeh_mutex);
-
 /* Lock to avoid races due to multiple reports of an error */
 DEFINE_RAW_SPINLOCK(confirm_error_lock);
 
diff --git a/arch/powerpc/kernel/eeh_pe.c b/arch/powerpc/kernel/eeh_pe.c
index 940a6e0..f945053 100644
--- a/arch/powerpc/kernel/eeh_pe.c
+++ b/arch/powerpc/kernel/eeh_pe.c
@@ -79,9 +79,7 @@ int eeh_phb_pe_create(struct pci_controller *phb)
  }
 
  /* Put it into the list */
- eeh_lock();
  list_add_tail(&pe->child, &eeh_phb_pe);
- eeh_unlock();
 
  pr_debug("EEH: Add PE for PHB#%d\n", phb->global_number);
 
@@ -186,21 +184,15 @@ void *eeh_pe_dev_traverse(struct eeh_pe *root,
   return NULL;
  }
 
- eeh_lock();
-
  /* Traverse root PE */
  for (pe = root; pe; pe = eeh_pe_next(pe, root)) {
   eeh_pe_for_each_dev(pe, edev, tmp) {
    ret = fn(edev, flag);
-   if (ret) {
-    eeh_unlock();
+   if (ret)
     return ret;
-   }
   }
  }
 
- eeh_unlock();
-
  return NULL;
 }
 
@@ -306,8 +298,6 @@ int eeh_add_to_parent_pe(struct eeh_dev *edev)
 {
  struct eeh_pe *pe, *parent;
 
- eeh_lock();
-
  /*
   * Search the PE has been existing or not according
   * to the PE address. If that has been existing, the
@@ -317,7 +307,6 @@ int eeh_add_to_parent_pe(struct eeh_dev *edev)
  pe = eeh_pe_get(edev);
  if (pe && !(pe->type & EEH_PE_INVALID)) {
   if (!edev->pe_config_addr) {
-   eeh_unlock();
    pr_err("%s: PE with addr 0x%x already exists\n",
     __func__, edev->config_addr);
    return -EEXIST;
@@ -329,7 +318,6 @@ int eeh_add_to_parent_pe(struct eeh_dev *edev)
 
   /* Put the edev to PE */
   list_add_tail(&edev->list, &pe->edevs);
-  eeh_unlock();
   pr_debug("EEH: Add %s to Bus PE#%x\n",
    edev->dn->full_name, pe->addr);
 
@@ -348,7 +336,6 @@ int eeh_add_to_parent_pe(struct eeh_dev *edev)
    parent->type &= ~(EEH_PE_INVALID | EEH_PE_KEEP);
    parent = parent->parent;
   }
-  eeh_unlock();
   pr_debug("EEH: Add %s to Device PE#%x, Parent PE#%x\n",
    edev->dn->full_name, pe->addr, pe->parent->addr);
 
@@ -358,7 +345,6 @@ int eeh_add_to_parent_pe(struct eeh_dev *edev)
  /* Create a new EEH PE */
  pe = eeh_pe_alloc(edev->phb, EEH_PE_DEVICE);
  if (!pe) {
-  eeh_unlock();
   pr_err("%s: out of memory!\n", __func__);
   return -ENOMEM;
  }
@@ -386,7 +372,6 @@ int eeh_add_to_parent_pe(struct eeh_dev *edev)
  if (!parent) {
   parent = eeh_phb_pe_get(edev->phb);
   if (!parent) {
-   eeh_unlock();
    pr_err("%s: No PHB PE is found (PHB Domain=%d)\n",
     __func__, edev->phb->global_number);
    edev->pe = NULL;
@@ -403,7 +388,6 @@ int eeh_add_to_parent_pe(struct eeh_dev *edev)
  list_add_tail(&pe->child, &parent->child_list);
  list_add_tail(&edev->list, &pe->edevs);
  edev->pe = pe;
- eeh_unlock();
  pr_debug("EEH: Add %s to Device PE#%x, Parent PE#%x\n",
   edev->dn->full_name, pe->addr, pe->parent->addr);
 
@@ -430,8 +414,6 @@ int eeh_rmv_from_parent_pe(struct eeh_dev *edev)
   return -EEXIST;
  }
 
- eeh_lock();
-
  /* Remove the EEH device */
  pe = edev->pe;
  edev->pe = NULL;
@@ -476,8 +458,6 @@ int eeh_rmv_from_parent_pe(struct eeh_dev *edev)
   pe = parent;
  }
 
- eeh_unlock();
-
  return 0;
 }
 
@@ -550,9 +530,7 @@ static void *__eeh_pe_state_mark(void *data, void *flag)
  */
 void eeh_pe_state_mark(struct eeh_pe *pe, int state)
 {
- eeh_lock();
  eeh_pe_traverse(pe, __eeh_pe_state_mark, &state);
- eeh_unlock();
 }
 
 /**
@@ -586,9 +564,7 @@ static void *__eeh_pe_state_clear(void *data, void *flag)
  */
 void eeh_pe_state_clear(struct eeh_pe *pe, int state)
 {
- eeh_lock();
  eeh_pe_traverse(pe, __eeh_pe_state_clear, &state);
- eeh_unlock();
 }
 
 /*
@@ -796,8 +772,6 @@ struct pci_bus *eeh_pe_bus_get(struct eeh_pe *pe)
  struct eeh_dev *edev;
  struct pci_dev *pdev;
 
- eeh_lock();
-
  if (pe->type & EEH_PE_PHB) {
   bus = pe->phb->bus;
  } else if (pe->type & EEH_PE_BUS ||
@@ -814,7 +788,5 @@ struct pci_bus *eeh_pe_bus_get(struct eeh_pe *pe)
  }
 
 out:
- eeh_unlock();
-
  return bus;
 }
-- 
1.7.1