From 551d6852cc9cc06c0909593d6d8f4a2713c408a6 Mon Sep 17 00:00:00 2001
From: Vitaly Kuznetsov <vkuznets@redhat.com>
Date: Tue, 27 May 2014 13:11:04 -0400
Subject: [mm] use paravirt friendly ops for NUMA hinting ptes

Message-id: <1401196264-9136-1-git-send-email-vkuznets@redhat.com>
Patchwork-id: 80848
O-Subject: [RHEL7.1 PATCH] mm: use paravirt friendly ops for NUMA hinting ptes
Bugzilla: 1101274
RH-Acked-by: Andrew Jones <drjones@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>

Upstream commit: 29c7787075c92ca8af353acd5301481e6f37082f
Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1101274
Brew build: https://brewweb.devel.redhat.com/taskinfo?taskID=7499307
Testing: tested Xen PV guest with reproducer from
         https://bugzilla.redhat.com/show_bug.cgi?id=1099985

Author: Mel Gorman <mgorman@suse.de>
Date:   Fri Apr 18 15:07:21 2014 -0700

David Vrabel identified a regression when using automatic NUMA balancing
under Xen whereby page table entries were getting corrupted due to the
use of native PTE operations.  Quoting him

 Xen PV guest page tables require that their entries use machine
 addresses if the preset bit (_PAGE_PRESENT) is set, and (for
 successful migration) non-present PTEs must use pseudo-physical
 addresses.  This is because on migration MFNs in present PTEs are
 translated to PFNs (canonicalised) so they may be translated back
 to the new MFN in the destination domain (uncanonicalised).

 pte_mknonnuma(), pmd_mknonnuma(), pte_mknuma() and pmd_mknuma()
 set and clear the _PAGE_PRESENT bit using pte_set_flags(),
 pte_clear_flags(), etc.

 In a Xen PV guest, these functions must translate MFNs to PFNs
 when clearing _PAGE_PRESENT and translate PFNs to MFNs when setting
 _PAGE_PRESENT.

His suggested fix converted p[te|md]_[set|clear]_flags to using
paravirt-friendly ops but this is overkill.  He suggested an alternative
of using p[te|md]_modify in the NUMA page table operations but this is
does more work than necessary and would require looking up a VMA for
protections.

This patch modifies the NUMA page table operations to use paravirt
friendly operations to set/clear the flags of interest.  Unfortunately
this will take a performance hit when updating the PTEs on
CONFIG_PARAVIRT but I do not see a way around it that does not break
Xen.

Signed-off-by: Mel Gorman <mgorman@suse.de>
Acked-by: David Vrabel <david.vrabel@citrix.com>
Tested-by: David Vrabel <david.vrabel@citrix.com>
Cc: Ingo Molnar <mingo@kernel.org>
Cc: Peter Anvin <hpa@zytor.com>
Cc: Fengguang Wu <fengguang.wu@intel.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Steven Noonan <steven@uplinklabs.net>
Cc: Rik van Riel <riel@redhat.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: Dave Hansen <dave.hansen@intel.com>
Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
Cc: Cyrill Gorcunov <gorcunov@gmail.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/asm-generic/pgtable.h b/include/asm-generic/pgtable.h
index 05c6b9b..9a87860 100644
--- a/include/asm-generic/pgtable.h
+++ b/include/asm-generic/pgtable.h
@@ -633,24 +633,35 @@ static inline int pmd_numa(pmd_t pmd)
 #ifndef pte_mknonnuma
 static inline pte_t pte_mknonnuma(pte_t pte)
 {
- pte = pte_clear_flags(pte, _PAGE_NUMA);
- return pte_set_flags(pte, _PAGE_PRESENT|_PAGE_ACCESSED);
+ pteval_t val = pte_val(pte);
+
+ val &= ~_PAGE_NUMA;
+ val |= (_PAGE_PRESENT|_PAGE_ACCESSED);
+ return __pte(val);
 }
 #endif
 
 #ifndef pmd_mknonnuma
 static inline pmd_t pmd_mknonnuma(pmd_t pmd)
 {
- pmd = pmd_clear_flags(pmd, _PAGE_NUMA);
- return pmd_set_flags(pmd, _PAGE_PRESENT|_PAGE_ACCESSED);
+ pmdval_t val = pmd_val(pmd);
+
+ val &= ~_PAGE_NUMA;
+ val |= (_PAGE_PRESENT|_PAGE_ACCESSED);
+
+ return __pmd(val);
 }
 #endif
 
 #ifndef pte_mknuma
 static inline pte_t pte_mknuma(pte_t pte)
 {
- pte = pte_set_flags(pte, _PAGE_NUMA);
- return pte_clear_flags(pte, _PAGE_PRESENT);
+ pteval_t val = pte_val(pte);
+
+ val &= ~_PAGE_PRESENT;
+ val |= _PAGE_NUMA;
+
+ return __pte(val);
 }
 #endif
 
@@ -669,8 +680,12 @@ static inline void ptep_set_numa(struct mm_struct *mm, unsigned long addr,
 #ifndef pmd_mknuma
 static inline pmd_t pmd_mknuma(pmd_t pmd)
 {
- pmd = pmd_set_flags(pmd, _PAGE_NUMA);
- return pmd_clear_flags(pmd, _PAGE_PRESENT);
+ pmdval_t val = pmd_val(pmd);
+
+ val &= ~_PAGE_PRESENT;
+ val |= _PAGE_NUMA;
+
+ return __pmd(val);
 }
 #endif
 
-- 
1.7.1