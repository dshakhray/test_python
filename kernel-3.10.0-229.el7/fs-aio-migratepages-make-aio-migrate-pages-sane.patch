From 901028361e186ca3c9892439d9a18ddb7f56fd7c Mon Sep 17 00:00:00 2001
From: Jeff Moyer <jmoyer@redhat.com>
Date: Mon, 8 Sep 2014 22:52:51 -0400
Subject: [fs] aio/migratepages: make aio migrate pages sane

Message-id: <1410216777-18522-3-git-send-email-jmoyer@redhat.com>
Patchwork-id: 93351
O-Subject: [RHEL7 PATCH 2/8] aio/migratepages: make aio migrate pages sane
Bugzilla: 1122092
RH-Acked-by: Zach Brown <zab@redhat.com>

This is a straight backport of the following upstream commit.  This
was tested using the libaio test harness, aio-stress, and xfstests aio
tests.

This patch addresses bug 1122092.

  commit 8e321fefb0e60bae4e2a28d20fc4fa30758d27c6
  Author: Benjamin LaHaise <bcrl@kvack.org>
  Date:   Sat Dec 21 17:56:08 2013 -0500

    aio/migratepages: make aio migrate pages sane

    The arbitrary restriction on page counts offered by the core
    migrate_page_move_mapping() code results in rather suspicious looking
    fiddling with page reference counts in the aio_migratepage() operation.
    To fix this, make migrate_page_move_mapping() take an extra_count parameter
    that allows aio to tell the code about its own reference count on the page
    being migrated.

    While cleaning up aio_migratepage(), make it validate that the old page
    being passed in is actually what aio_migratepage() expects to prevent
    misbehaviour in the case of races.

    Signed-off-by: Benjamin LaHaise <bcrl@kvack.org>

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/aio.c b/fs/aio.c
index 8f90a0a..d9d22a4 100644
--- a/fs/aio.c
+++ b/fs/aio.c
@@ -214,9 +214,14 @@ static void aio_free_ring(struct kioctx *ctx)
  int i;
 
  for (i = 0; i < ctx->nr_pages; i++) {
+  struct page *page;
   pr_debug("pid(%d) [%d] page->count=%d\n", current->pid, i,
     page_count(ctx->ring_pages[i]));
-  put_page(ctx->ring_pages[i]);
+  page = ctx->ring_pages[i];
+  if (!page)
+   continue;
+  ctx->ring_pages[i] = NULL;
+  put_page(page);
  }
 
  put_aio_ring_file(ctx);
@@ -248,18 +253,38 @@ static int aio_migratepage(struct address_space *mapping, struct page *new,
  unsigned long flags;
  int rc;
 
+ rc = 0;
+
+ /* Make sure the old page hasn't already been changed */
+ spin_lock(&mapping->private_lock);
+ ctx = mapping->private_data;
+ if (ctx) {
+  pgoff_t idx;
+  spin_lock_irqsave(&ctx->completion_lock, flags);
+  idx = old->index;
+  if (idx < (pgoff_t)ctx->nr_pages) {
+   if (ctx->ring_pages[idx] != old)
+    rc = -EAGAIN;
+  } else
+   rc = -EINVAL;
+  spin_unlock_irqrestore(&ctx->completion_lock, flags);
+ } else
+  rc = -EINVAL;
+ spin_unlock(&mapping->private_lock);
+
+ if (rc != 0)
+  return rc;
+
  /* Writeback must be complete */
  BUG_ON(PageWriteback(old));
- put_page(old);
+ get_page(new);
 
- rc = migrate_page_move_mapping(mapping, new, old, NULL, mode);
+ rc = migrate_page_move_mapping(mapping, new, old, NULL, mode, 1);
  if (rc != MIGRATEPAGE_SUCCESS) {
-  get_page(old);
+  put_page(new);
   return rc;
  }
 
- get_page(new);
-
  /* We can potentially race against kioctx teardown here.  Use the
   * address_space's private data lock to protect the mapping's
   * private_data.
@@ -271,13 +296,24 @@ static int aio_migratepage(struct address_space *mapping, struct page *new,
   spin_lock_irqsave(&ctx->completion_lock, flags);
   migrate_page_copy(new, old);
   idx = old->index;
-  if (idx < (pgoff_t)ctx->nr_pages)
-   ctx->ring_pages[idx] = new;
+  if (idx < (pgoff_t)ctx->nr_pages) {
+   /* And only do the move if things haven't changed */
+   if (ctx->ring_pages[idx] == old)
+    ctx->ring_pages[idx] = new;
+   else
+    rc = -EAGAIN;
+  } else
+   rc = -EINVAL;
   spin_unlock_irqrestore(&ctx->completion_lock, flags);
  } else
   rc = -EBUSY;
  spin_unlock(&mapping->private_lock);
 
+ if (rc == MIGRATEPAGE_SUCCESS)
+  put_page(old);
+ else
+  put_page(new);
+
  return rc;
 }
 #endif
diff --git a/include/linux/migrate.h b/include/linux/migrate.h
index 0355a5c..0671d89 100644
--- a/include/linux/migrate.h
+++ b/include/linux/migrate.h
@@ -57,7 +57,8 @@ extern int migrate_huge_page_move_mapping(struct address_space *mapping,
       struct page *newpage, struct page *page);
 extern int migrate_page_move_mapping(struct address_space *mapping,
   struct page *newpage, struct page *page,
-  struct buffer_head *head, enum migrate_mode mode);
+  struct buffer_head *head, enum migrate_mode mode,
+  int extra_count);
 #else
 
 static inline void putback_lru_pages(struct list_head *l) {}
diff --git a/mm/migrate.c b/mm/migrate.c
index 43277c6..8abc33e 100644
--- a/mm/migrate.c
+++ b/mm/migrate.c
@@ -311,14 +311,15 @@ static inline bool buffer_migrate_lock_buffers(struct buffer_head *head,
  */
 int migrate_page_move_mapping(struct address_space *mapping,
   struct page *newpage, struct page *page,
-  struct buffer_head *head, enum migrate_mode mode)
+  struct buffer_head *head, enum migrate_mode mode,
+  int extra_count)
 {
- int expected_count = 0;
+ int expected_count = 1 + extra_count;
  void **pslot;
 
  if (!mapping) {
   /* Anonymous page without mapping */
-  if (page_count(page) != 1)
+  if (page_count(page) != expected_count)
    return -EAGAIN;
   return MIGRATEPAGE_SUCCESS;
  }
@@ -328,7 +329,7 @@ int migrate_page_move_mapping(struct address_space *mapping,
  pslot = radix_tree_lookup_slot(&mapping->page_tree,
       page_index(page));
 
- expected_count = 2 + page_has_private(page);
+ expected_count += 1 + page_has_private(page);
  if (page_count(page) != expected_count ||
   radix_tree_deref_slot_protected(pslot, &mapping->tree_lock) != page) {
   spin_unlock_irq(&mapping->tree_lock);
@@ -578,7 +579,7 @@ int migrate_page(struct address_space *mapping,
 
  BUG_ON(PageWriteback(page)); /* Writeback must be complete */
 
- rc = migrate_page_move_mapping(mapping, newpage, page, NULL, mode);
+ rc = migrate_page_move_mapping(mapping, newpage, page, NULL, mode, 0);
 
  if (rc != MIGRATEPAGE_SUCCESS)
   return rc;
@@ -605,7 +606,7 @@ int buffer_migrate_page(struct address_space *mapping,
 
  head = page_buffers(page);
 
- rc = migrate_page_move_mapping(mapping, newpage, page, head, mode);
+ rc = migrate_page_move_mapping(mapping, newpage, page, head, mode, 0);
 
  if (rc != MIGRATEPAGE_SUCCESS)
   return rc;
-- 
1.7.1