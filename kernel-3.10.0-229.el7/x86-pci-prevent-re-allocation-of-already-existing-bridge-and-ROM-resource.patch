From d9d7445f5fb31491a77bf2449f2e4155cd1f7e8c Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:00:33 -0400
Subject: [x86] pci: prevent re-allocation of already existing bridge and ROM resource

Message-id: <20140710010032.22146.54437.stgit@gir.stowe>
Patchwork-id: 85561
O-Subject: [RHEL7.1 PATCH 022/105] x86 / PCI: prevent re-allocation of already existing bridge and ROM resource
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: c70d65052a1c792bae8d1bb84845f15526b74997

commit c70d65052a1c792bae8d1bb84845f15526b74997
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Jul 3 17:04:48 2013 +0300

    x86 / PCI: prevent re-allocation of already existing bridge and ROM resource

    In hotplug case (especially with Thunderbolt enabled systems) we might need
    to call pcibios_resource_survey_bus() several times for a bus. The function
    ends up calling pci_claim_resource() for each bridge resource that then
    fails claiming that the resource exists already (which it does). Once this
    happens the resource is invalidated thus preventing devices behind the
    bridge to allocate their resources.

    To fix this we do what has been done in pcibios_allocate_dev_resources()
    and check 'parent' of the given resource. If it is non-NULL it means that
    the resource has been allocated already and we can skip it. We do the same
    for ROM resources as well.

    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/pci/i386.c b/arch/x86/pci/i386.c
index 94919e3..db6b1ab 100644
--- a/arch/x86/pci/i386.c
+++ b/arch/x86/pci/i386.c
@@ -210,6 +210,8 @@ static void pcibios_allocate_bridge_resources(struct pci_dev *dev)
   r = &dev->resource[idx];
   if (!r->flags)
    continue;
+  if (r->parent) /* Already allocated */
+   continue;
   if (!r->start || pci_claim_resource(dev, idx) < 0) {
    /*
     * Something is wrong with the region.
@@ -318,6 +320,8 @@ static void pcibios_allocate_dev_rom_resource(struct pci_dev *dev)
  r = &dev->resource[PCI_ROM_RESOURCE];
  if (!r->flags || !r->start)
   return;
+ if (r->parent) /* Already allocated */
+  return;
 
  if (pci_claim_resource(dev, PCI_ROM_RESOURCE) < 0) {
   r->end -= r->start;
-- 
1.7.1