From ea3de8380814aaa56900647c6b8ecae1c18503ce Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Fri, 5 Sep 2014 01:50:24 -0400
Subject: [iommu] vt-d: Make get_valid_domain_for_dev() take struct device

Message-id: <20140905015024.31297.86886.stgit@gir.stowe>
Patchwork-id: 91339
O-Subject: [RHEL7.1 PATCH 46/65] iommu/vt-d: Make get_valid_domain_for_dev() take struct device
Bugzilla: 1129880 1087643
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1087643
Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1129880
Upstream Status: d4b709f48ed44d42ed90c1a85dda7fd053d36ce1

commit d4b709f48ed44d42ed90c1a85dda7fd053d36ce1
Author: David Woodhouse <David.Woodhouse@intel.com>
Date:   Sun Mar 9 16:07:40 2014 -0700

    iommu/vt-d: Make get_valid_domain_for_dev() take struct device

    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c
index ccfce88..e18b93c 100644
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@ -2862,26 +2862,24 @@ static struct iova *intel_alloc_iova(struct device *dev,
  return iova;
 }
 
-static struct dmar_domain *__get_valid_domain_for_dev(struct pci_dev *pdev)
+static struct dmar_domain *__get_valid_domain_for_dev(struct device *dev)
 {
  struct dmar_domain *domain;
  int ret;
 
- domain = get_domain_for_dev(&pdev->dev, DEFAULT_DOMAIN_ADDRESS_WIDTH);
+ domain = get_domain_for_dev(dev, DEFAULT_DOMAIN_ADDRESS_WIDTH);
  if (!domain) {
-  printk(KERN_ERR
-   "Allocating domain for %s failed", pci_name(pdev));
+  printk(KERN_ERR "Allocating domain for %s failed",
+         dev_name(dev));
   return NULL;
  }
 
  /* make sure context mapping is ok */
- if (unlikely(!domain_context_mapped(&pdev->dev))) {
-  ret = domain_context_mapping(domain, &pdev->dev,
-          CONTEXT_TT_MULTI_LEVEL);
+ if (unlikely(!domain_context_mapped(dev))) {
+  ret = domain_context_mapping(domain, dev, CONTEXT_TT_MULTI_LEVEL);
   if (ret) {
-   printk(KERN_ERR
-    "Domain context map for %s failed",
-    pci_name(pdev));
+   printk(KERN_ERR "Domain context map for %s failed",
+          dev_name(dev));
    return NULL;
   }
  }
@@ -2889,12 +2887,12 @@ static struct dmar_domain *__get_valid_domain_for_dev(struct pci_dev *pdev)
  return domain;
 }
 
-static inline struct dmar_domain *get_valid_domain_for_dev(struct pci_dev *dev)
+static inline struct dmar_domain *get_valid_domain_for_dev(struct device *dev)
 {
  struct device_domain_info *info;
 
  /* No lock here, assumes no domain exit in normal case */
- info = dev->dev.archdata.iommu;
+ info = dev->archdata.iommu;
  if (likely(info))
   return info->domain;
 
@@ -2975,7 +2973,7 @@ static dma_addr_t __intel_map_single(struct device *hwdev, phys_addr_t paddr,
  if (iommu_no_mapping(hwdev))
   return paddr;
 
- domain = get_valid_domain_for_dev(pdev);
+ domain = get_valid_domain_for_dev(hwdev);
  if (!domain)
   return 0;
 
@@ -3280,7 +3278,7 @@ static int intel_map_sg(struct device *hwdev, struct scatterlist *sglist, int ne
  if (iommu_no_mapping(hwdev))
   return intel_nontranslate_map_sg(hwdev, sglist, nelems, dir);
 
- domain = get_valid_domain_for_dev(pdev);
+ domain = get_valid_domain_for_dev(hwdev);
  if (!domain)
   return 0;
 
-- 
1.7.1