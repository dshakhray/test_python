From f6cf023282fa2665d8911402aaf9aa31f6fc48a9 Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Thu, 18 Sep 2014 14:14:25 -0400
Subject: [scsi] megaraid_sas: Add module parameter to disable IRQ-CPU affinity hint

Message-id: <1411049668-28841-26-git-send-email-thenzl@redhat.com>
Patchwork-id: 96154
O-Subject: [RHEL7.1 e-stor PATCH 25/28] megaraid_sas : Add module parameter to disable IRQ-CPU affinity hint
Bugzilla: 1088523
RH-Acked-by: Ewan Milne <emilne@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

For certain deployment, we may need to disable irq cpu affinity hint.
This module parameter provides option for use to disable irq cpu affinity hint
and allow irqbalancer to handle the rest.

scsi-queue/drivers-for-3.18 commit ac95136ad40fc72c4842fee1ef002390ad96bfa0

Signed-off-by: Sumit Saxena <sumit.saxena@avagotech.com>
Signed-off-by: Kashyap Desai <kashyap.desai@avagotech.com>
Reviewed-by: Tomas Henzl <thenzl@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/megaraid/megaraid_sas_base.c b/drivers/scsi/megaraid/megaraid_sas_base.c
index 2eec87f..ab0a7ec 100644
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@ -89,6 +89,10 @@ module_param(resetwaittime, int, S_IRUGO);
 MODULE_PARM_DESC(resetwaittime, "Wait time in seconds after I/O timeout "
    "before resetting adapter. Default: 180");
 
+int smp_affinity_enable = 1;
+module_param(smp_affinity_enable, int, S_IRUGO);
+MODULE_PARM_DESC(smp_affinity_enable, "SMP affinity feature enable/disbale Default: enable(1)");
+
 MODULE_LICENSE("GPL");
 MODULE_VERSION(MEGASAS_VERSION);
 MODULE_AUTHOR("megaraidlinux@lsi.com");
@@ -5170,8 +5174,9 @@ retry_irq_register:
     printk(KERN_DEBUG "megasas: Failed to "
            "register IRQ for vector %d.\n", i);
     for (j = 0; j < i; j++) {
-     irq_set_affinity_hint(
-      instance->msixentry[j].vector, NULL);
+     if (smp_affinity_enable)
+      irq_set_affinity_hint(
+       instance->msixentry[j].vector, NULL);
      free_irq(
       instance->msixentry[j].vector,
       &instance->irq_context[j]);
@@ -5180,11 +5185,14 @@ retry_irq_register:
     instance->msix_vectors = 0;
     goto retry_irq_register;
    }
-   if (irq_set_affinity_hint(instance->msixentry[i].vector,
-    get_cpu_mask(cpu)))
-    dev_err(&instance->pdev->dev, "Error setting"
-     "affinity hint for cpu %d\n", cpu);
-   cpu = cpumask_next(cpu, cpu_online_mask);
+   if (smp_affinity_enable) {
+    if (irq_set_affinity_hint(instance->msixentry[i].vector,
+     get_cpu_mask(cpu)))
+     dev_err(&instance->pdev->dev,
+      "Error setting affinity hint "
+      "for cpu %d\n", cpu);
+    cpu = cpumask_next(cpu, cpu_online_mask);
+   }
   }
  } else {
   instance->irq_context[0].instance = instance;
@@ -5244,8 +5252,9 @@ retry_irq_register:
  instance->instancet->disable_intr(instance);
  if (instance->msix_vectors)
   for (i = 0; i < instance->msix_vectors; i++) {
-   irq_set_affinity_hint(
-    instance->msixentry[i].vector, NULL);
+   if (smp_affinity_enable)
+    irq_set_affinity_hint(
+     instance->msixentry[i].vector, NULL);
    free_irq(instance->msixentry[i].vector,
      &instance->irq_context[i]);
   }
@@ -5408,8 +5417,9 @@ megasas_suspend(struct pci_dev *pdev, pm_message_t state)
 
  if (instance->msix_vectors)
   for (i = 0; i < instance->msix_vectors; i++) {
-   irq_set_affinity_hint(
-    instance->msixentry[i].vector, NULL);
+   if (smp_affinity_enable)
+    irq_set_affinity_hint(
+     instance->msixentry[i].vector, NULL);
    free_irq(instance->msixentry[i].vector,
      &instance->irq_context[i]);
   }
@@ -5518,8 +5528,9 @@ megasas_resume(struct pci_dev *pdev)
     printk(KERN_DEBUG "megasas: Failed to "
            "register IRQ for vector %d.\n", i);
     for (j = 0; j < i; j++) {
-     irq_set_affinity_hint(
-      instance->msixentry[j].vector, NULL);
+     if (smp_affinity_enable)
+      irq_set_affinity_hint(
+       instance->msixentry[j].vector, NULL);
      free_irq(
       instance->msixentry[j].vector,
       &instance->irq_context[j]);
@@ -5527,11 +5538,14 @@ megasas_resume(struct pci_dev *pdev)
     goto fail_irq;
    }
 
-   if (irq_set_affinity_hint(instance->msixentry[i].vector,
-    get_cpu_mask(cpu)))
-    dev_err(&instance->pdev->dev, "Error setting"
-     "affinity hint for cpu %d\n", cpu);
-   cpu = cpumask_next(cpu, cpu_online_mask);
+   if (smp_affinity_enable) {
+    if (irq_set_affinity_hint(instance->msixentry[i].vector,
+     get_cpu_mask(cpu)))
+     dev_err(&instance->pdev->dev, "Error "
+      "setting affinity hint for cpu "
+      "%d\n", cpu);
+    cpu = cpumask_next(cpu, cpu_online_mask);
+   }
   }
  } else {
   instance->irq_context[0].instance = instance;
@@ -5651,8 +5665,9 @@ static void megasas_detach_one(struct pci_dev *pdev)
 
  if (instance->msix_vectors)
   for (i = 0; i < instance->msix_vectors; i++) {
-   irq_set_affinity_hint(
-    instance->msixentry[i].vector, NULL);
+   if (smp_affinity_enable)
+    irq_set_affinity_hint(
+     instance->msixentry[i].vector, NULL);
    free_irq(instance->msixentry[i].vector,
      &instance->irq_context[i]);
   }
@@ -5742,8 +5757,9 @@ static void megasas_shutdown(struct pci_dev *pdev)
  instance->instancet->disable_intr(instance);
  if (instance->msix_vectors)
   for (i = 0; i < instance->msix_vectors; i++) {
-   irq_set_affinity_hint(
-    instance->msixentry[i].vector, NULL);
+   if (smp_affinity_enable)
+    irq_set_affinity_hint(
+     instance->msixentry[i].vector, NULL);
    free_irq(instance->msixentry[i].vector,
      &instance->irq_context[i]);
   }
-- 
1.7.1