From 3d488ee510b7637b33d88facb8541e69a1da6648 Mon Sep 17 00:00:00 2001
From: Abhijith Das <adas@redhat.com>
Date: Wed, 16 Apr 2014 13:14:38 -0400
Subject: [fs] gfs2: Fix uninitialized VFS inode in gfs2_create_inode

Message-id: <1397654078-58985-1-git-send-email-adas@redhat.com>
Patchwork-id: 78952
O-Subject: [RHEL7 PATCH] gfs2: Fix uninitialized VFS inode in gfs2_create_inode
Bugzilla: 1087995
RH-Acked-by: Robert S Peterson <rpeterso@redhat.com>
RH-Acked-by: Steven Whitehouse <swhiteho@redhat.com>

When gfs2_create_inode() fails due to quota violation, the VFS
inode is not completely uninitialized. This can cause a list
corruption error.

This patch correctly uninitializes the VFS inode when a quota
violation occurs in the gfs2_create_inode codepath.

This is a rhel7 port of the upstream patch here:
http://git.kernel.org/cgit/linux/kernel/git/steve/gfs2-3.0-nmw.git/commit/fs/gfs2?id=059788039f1e6343f34f46d202f8d9f2158c2783

Resolves: rhbz#1087995
Signed-off-by: Abhi Das <adas@redhat.com>
Tested-by: Bob Peterson <rpeterso@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/gfs2/incore.h b/fs/gfs2/incore.h
index e371cf7..90b0773 100644
--- a/fs/gfs2/incore.h
+++ b/fs/gfs2/incore.h
@@ -355,6 +355,7 @@ enum {
  GIF_ALLOC_FAILED = 2,
  GIF_SW_PAGED  = 3,
  GIF_ORDERED  = 4,
+ GIF_FREE_VFS_INODE      = 5,
 };
 
 struct gfs2_inode {
diff --git a/fs/gfs2/inode.c b/fs/gfs2/inode.c
index 3922571..bb81ecc 100644
--- a/fs/gfs2/inode.c
+++ b/fs/gfs2/inode.c
@@ -558,7 +558,7 @@ static int gfs2_create_inode(struct inode *dir, struct dentry *dentry,
  struct gfs2_sbd *sdp = GFS2_SB(&dip->i_inode);
  struct gfs2_glock *io_gl;
  struct dentry *d;
- int error;
+ int error, free_vfs_inode = 0;
  u32 aflags = 0;
  int arq;
 
@@ -716,14 +716,15 @@ fail_free_inode:
  if (ip->i_gl)
   gfs2_glock_put(ip->i_gl);
  gfs2_rs_delete(ip);
- free_inode_nonrcu(inode);
- inode = NULL;
+ free_vfs_inode = 1;
 fail_gunlock:
  gfs2_glock_dq_uninit(ghs);
  if (inode && !IS_ERR(inode)) {
   clear_nlink(inode);
-  mark_inode_dirty(inode);
-  set_bit(GIF_ALLOC_FAILED, &GFS2_I(inode)->i_flags);
+  if (!free_vfs_inode)
+   mark_inode_dirty(inode);
+  set_bit(free_vfs_inode ? GIF_FREE_VFS_INODE : GIF_ALLOC_FAILED,
+   &GFS2_I(inode)->i_flags);
   iput(inode);
  }
 fail:
diff --git a/fs/gfs2/super.c b/fs/gfs2/super.c
index ac96a99..d8e31f9 100644
--- a/fs/gfs2/super.c
+++ b/fs/gfs2/super.c
@@ -1223,7 +1223,7 @@ static int gfs2_drop_inode(struct inode *inode)
 {
  struct gfs2_inode *ip = GFS2_I(inode);
 
- if (inode->i_nlink) {
+ if (!test_bit(GIF_FREE_VFS_INODE, &ip->i_flags) && inode->i_nlink) {
   struct gfs2_glock *gl = ip->i_iopen_gh.gh_gl;
   if (gl && test_bit(GLF_DEMOTE, &gl->gl_flags))
    clear_nlink(inode);
@@ -1438,6 +1438,11 @@ static void gfs2_evict_inode(struct inode *inode)
  struct gfs2_holder gh;
  int error;
 
+ if (test_bit(GIF_FREE_VFS_INODE, &ip->i_flags)) {
+  clear_inode(inode);
+  return;
+ }
+
  if (inode->i_nlink || (sb->s_flags & MS_RDONLY))
   goto out;
 
-- 
1.7.1