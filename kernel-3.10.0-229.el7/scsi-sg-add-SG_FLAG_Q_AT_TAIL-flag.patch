From ab813e265366a7962583a8136217e9ef8bbd0aad Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Wed, 20 Aug 2014 18:59:01 -0400
Subject: [scsi] sg: add SG_FLAG_Q_AT_TAIL flag

Message-id: <1408561176-18133-23-git-send-email-emilne@redhat.com>
Patchwork-id: 88447
O-Subject: [RHEL7.1 PATCH e-stor 22/57] sg: add SG_FLAG_Q_AT_TAIL flag
Bugzilla: 1132092
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Ewan D. Milne" <emilne@redhat.com>

upstream commit 301c087d95671df63858a6c94101422caab32b3b

Tested by Ewan D. Milne and Barry Donahue with a combination
of manual and automated testing.  No issues seen.

upstream commit 301c087d95671df63858a6c94101422caab32b3b
Author: Douglas Gilbert <dgilbert@interlog.com>
Date:   Wed Jun 4 10:58:30 2014 -0400

    sg: add SG_FLAG_Q_AT_TAIL flag

    When the SG_IO ioctl was copied into the block layer and
    later into the bsg driver, subtle differences emerged.

    One difference is the way injected commands are queued through
    the block layer (i.e. this is not SCSI device queueing nor SATA
    NCQ). Summarizing:
       - SG_IO in the block layer: blk_exec*(at_head=false)
       - sg SG_IO: at_head=true
       - bsg SG_IO: at_head=true

    Some time ago Boaz Harrosh introduced a sg v4 flag called
    BSG_FLAG_Q_AT_TAIL to override the bsg driver default.
    This patch does the equivalent for the sg driver.

    ChangeLog:
         Introduce SG_FLAG_Q_AT_TAIL flag to cause commands
         to be injected into the block layer with
         at_head=false.

    Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
    Reviewed-by: Mike Christie <michaelc@cs.wisc.edu>
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

Signed-off-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/sg.c b/drivers/scsi/sg.c
index 72e7aca..2a184ba 100644
--- a/drivers/scsi/sg.c
+++ b/drivers/scsi/sg.c
@@ -741,7 +741,7 @@ static int
 sg_common_write(Sg_fd * sfp, Sg_request * srp,
   unsigned char *cmnd, int timeout, int blocking)
 {
- int k, data_dir;
+ int k, data_dir, at_head;
  Sg_device *sdp = sfp->parentdp;
  sg_io_hdr_t *hp = &srp->header;
 
@@ -785,11 +785,16 @@ sg_common_write(Sg_fd * sfp, Sg_request * srp,
   break;
  }
  hp->duration = jiffies_to_msecs(jiffies);
+ if (hp->interface_id != '\0' && /* v3 (or later) interface */
+     (SG_FLAG_Q_AT_TAIL & hp->flags))
+  at_head = 0;
+ else
+  at_head = 1;
 
  srp->rq->timeout = timeout;
  kref_get(&sfp->f_ref); /* sg_rq_end_io() does kref_put(). */
  blk_execute_rq_nowait(sdp->device->request_queue, sdp->disk,
-         srp->rq, 1, sg_rq_end_io);
+         srp->rq, at_head, sg_rq_end_io);
  return 0;
 }
 
diff --git a/include/scsi/sg.h b/include/scsi/sg.h
index d8c0c43..9859355 100644
--- a/include/scsi/sg.h
+++ b/include/scsi/sg.h
@@ -86,6 +86,7 @@ typedef struct sg_io_hdr
 #define SG_FLAG_MMAP_IO 4       /* request memory mapped IO */
 #define SG_FLAG_NO_DXFER 0x10000 /* no transfer of kernel buffers to/from */
     /* user space (debug indirect IO) */
+#define SG_FLAG_Q_AT_TAIL 0x10  /* default is Q_AT_HEAD */
 
 /* following 'info' values are "or"-ed together */
 #define SG_INFO_OK_MASK 0x1
-- 
1.7.1