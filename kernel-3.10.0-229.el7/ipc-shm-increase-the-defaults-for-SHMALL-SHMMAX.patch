From d960c91a104c18d83b0dd7e8a9c43a406cff7483 Mon Sep 17 00:00:00 2001
From: Larry Woodman <lwoodman@redhat.com>
Date: Tue, 15 Jul 2014 19:52:51 -0400
Subject: [ipc] shm: increase the defaults for SHMALL, SHMMAX

Message-id: <1405453971-7166-1-git-send-email-lwoodman@redhat.com>
Patchwork-id: 85837
O-Subject: [RHEL7.1 PATCH] ipc/shm.c: increase the defaults for SHMALL, SHMMAX
Bugzilla: 1101821
RH-Acked-by: Rafael Aquini <aquini@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>

The attached upstream backport increases the defaults for SHMALL & SHMMAX
to 1<<24 pages and 1<<24 bytes respectively.

Testing: Booted kernel and verified /proc/sys/kernel/shmall & shmmax were
         increased to the new values.

BZ: Fixes BZ1101821

Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7702585

---------------------------------------------------------------------

 commit 060028bac94bf60a65415d1d55a359c3a17d5c31
 Author: Manfred Spraul <manfred@colorfullife.com>
 Date:   Fri Jun 6 14:37:42 2014 -0700

    ipc/shm.c: increase the defaults for SHMALL, SHMMAX

    System V shared memory

    a) can be abused to trigger out-of-memory conditions and the standard
       measures against out-of-memory do not work:

        - it is not possible to use setrlimit to limit the size of shm segments.

        - segments can exist without association with any processes, thus
          the oom-killer is unable to free that memory.

    b) is typically used for shared information - today often multiple GB.
       (e.g. database shared buffers)

    The current default is a maximum segment size of 32 MB and a maximum
    total size of 8 GB.  This is often too much for a) and not enough for
    b), which means that lots of users must change the defaults.

    This patch increases the default limits (nearly) to the maximum, which
    is perfect for case b).  The defaults are used after boot and as the
    initial value for each new namespace.

    Admins/distros that need a protection against a) should reduce the
    limits and/or enable shm_rmid_forced.

    Unix has historically required setting these limits for shared memory,
    and Linux inherited such behavior.  The consequence of this is added
    complexity for users and administrators.  One very common example are
    Database setup/installation documents and scripts, where users must
    manually calculate the values for these limits.  This also requires
    (some) knowledge of how the underlying memory management works, thus
    causing, in many occasions, the limits to just be flat out wrong.
    Disabling these limits sooner could have saved companies a lot of time,
    headaches and money for support.  But it's never too late, simplify
    users life now.

    Further notes:
    - The patch only changes default, overrides behave as before:
            # sysctl kernel.shmall=33554432
      would recreate the previous limit for SHMMAX (for the current namespace).

    - Disabling sysv shm allocation is possible with:
            # sysctl kernel.shmall=0
      (not a new feature, also per-namespace)

    - The limits are intentionally set to a value slightly less than ULONG_MAX,
      to avoid triggering overflows in user space apps.
      [not unreasonable, see http://marc.info/?l=linux-mm&m=139638334330127]

    Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Davidlohr Bueso <davidlohr@hp.com>
    Reported-by: Davidlohr Bueso <davidlohr@hp.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/shm.h b/include/linux/shm.h
index 429c199..a6936ed 100644
--- a/include/linux/shm.h
+++ b/include/linux/shm.h
@@ -3,9 +3,8 @@
 
 #include <asm/page.h>
 #include <uapi/linux/shm.h>
-
-#define SHMALL (SHMMAX/PAGE_SIZE*(SHMMNI/16)) /* max shm system wide (pages) */
 #include <asm/shmparam.h>
+
 struct shmid_kernel /* private to the kernel */
 { 
  struct kern_ipc_perm shm_perm;
diff --git a/include/uapi/linux/shm.h b/include/uapi/linux/shm.h
index ec36fa1..e704ebe 100644
--- a/include/uapi/linux/shm.h
+++ b/include/uapi/linux/shm.h
@@ -9,15 +9,13 @@
 
 /*
  * SHMMAX, SHMMNI and SHMALL are upper limits are defaults which can
- * be increased by sysctl
+ * be modified by sysctl.
  */
 
-#define SHMMAX 0x2000000   /* max shared seg size (bytes) */
 #define SHMMIN 1    /* min shared seg size (bytes) */
 #define SHMMNI 4096    /* max num of segs system wide */
-#ifndef __KERNEL__
-#define SHMALL (SHMMAX/getpagesize()*(SHMMNI/16))
-#endif
+#define SHMMAX (ULONG_MAX - (1L<<24))  /* max shared seg size (bytes) */
+#define SHMALL (ULONG_MAX - (1L<<24))  /* max shm system wide (pages) */
 #define SHMSEG SHMMNI    /* max shared segs per process */
 
 
-- 
1.7.1