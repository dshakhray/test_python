From 1b78f61baba92c75a7c491a689ec0a81b21a692c Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Tue, 7 Oct 2014 20:58:07 -0400
Subject: [net] split rt_genid for ipv4 and ipv6

Message-id: <e027422d951decca437713a94748123ac8d2b7ea.1412712186.git.hannes@redhat.com>
Patchwork-id: 97143
O-Subject: [RHEL7.1 net PATCH v2 3/6] net: split rt_genid for ipv4 and ipv6
Bugzilla: 1150017
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1150017
Upstream Status: ca4c3fc24e293719fe7410c4e63da9b6bc633b83
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8075311

kabi: The old genid storage location is now used only for IPv4, IPv6 got a
new location in its own namespace.

Upstream Commit:
commit ca4c3fc24e293719fe7410c4e63da9b6bc633b83
Author: fan.du <fan.du@windriver.com>
Date:   Tue Jul 30 08:33:53 2013 +0800

    net: split rt_genid for ipv4 and ipv6

    Current net name space has only one genid for both IPv4 and IPv6, it has below
    drawbacks:

    - Add/delete an IPv4 address will invalidate all IPv6 routing table entries.
    - Insert/remove XFRM policy will also invalidate both IPv4/IPv6 routing table
      entries even when the policy is only applied for one address family.

    Thus, this patch attempt to split one genid for two to cater for IPv4 and IPv6
    separately in a fine granularity.

    Signed-off-by: Fan Du <fan.du@windriver.com>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/net_namespace.h b/include/net/net_namespace.h
index 69cb611..2804112 100644
--- a/include/net/net_namespace.h
+++ b/include/net/net_namespace.h
@@ -126,6 +126,7 @@ struct net {
 #ifndef __GENKSYMS__
  unsigned int  dev_unreg_count;
  atomic_t  fnhe_genid;
+ atomic_t  rt6_genid;
 #endif
 };
 
@@ -339,16 +340,44 @@ static inline void unregister_net_sysctl_table(struct ctl_table_header *header)
 }
 #endif
 
-static inline int rt_genid(struct net *net)
+static inline int rt_genid_ipv4(struct net *net)
 {
  return atomic_read(&net->rt_genid);
 }
 
-static inline void rt_genid_bump(struct net *net)
+static inline void rt_genid_bump_ipv4(struct net *net)
 {
  atomic_inc(&net->rt_genid);
 }
 
+#if IS_ENABLED(CONFIG_IPV6)
+static inline int rt_genid_ipv6(struct net *net)
+{
+ return atomic_read(&net->rt6_genid);
+}
+
+static inline void rt_genid_bump_ipv6(struct net *net)
+{
+ atomic_inc(&net->rt6_genid);
+}
+#else
+static inline int rt_genid_ipv6(struct net *net)
+{
+ return 0;
+}
+
+static inline void rt_genid_bump_ipv6(struct net *net)
+{
+}
+#endif
+
+/* For callers who don't really care about whether it's IPv4 or IPv6 */
+static inline void rt_genid_bump_all(struct net *net)
+{
+ rt_genid_bump_ipv4(net);
+ rt_genid_bump_ipv6(net);
+}
+
 static inline int fnhe_genid(struct net *net)
 {
  return atomic_read(&net->fnhe_genid);
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 4cc2e72..4b518ee 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -435,12 +435,12 @@ static inline int ip_rt_proc_init(void)
 
 static inline bool rt_is_expired(const struct rtable *rth)
 {
- return rth->rt_genid != rt_genid(dev_net(rth->dst.dev));
+ return rth->rt_genid != rt_genid_ipv4(dev_net(rth->dst.dev));
 }
 
 void rt_cache_flush(struct net *net)
 {
- rt_genid_bump(net);
+ rt_genid_bump_ipv4(net);
 }
 
 static struct neighbour *ipv4_neigh_lookup(const struct dst_entry *dst,
@@ -1425,7 +1425,7 @@ static int ip_route_input_mc(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 #endif
  rth->dst.output = ip_rt_bug;
 
- rth->rt_genid = rt_genid(dev_net(dev));
+ rth->rt_genid = rt_genid_ipv4(dev_net(dev));
  rth->rt_flags = RTCF_MULTICAST;
  rth->rt_type = RTN_MULTICAST;
  rth->rt_is_input= 1;
@@ -1550,7 +1550,7 @@ static int __mkroute_input(struct sk_buff *skb,
   goto cleanup;
  }
 
- rth->rt_genid = rt_genid(dev_net(rth->dst.dev));
+ rth->rt_genid = rt_genid_ipv4(dev_net(rth->dst.dev));
  rth->rt_flags = flags;
  rth->rt_type = res->type;
  rth->rt_is_input = 1;
@@ -1721,7 +1721,7 @@ local_input:
  rth->dst.tclassid = itag;
 #endif
 
- rth->rt_genid = rt_genid(net);
+ rth->rt_genid = rt_genid_ipv4(net);
  rth->rt_flags  = flags|RTCF_LOCAL;
  rth->rt_type = res.type;
  rth->rt_is_input = 1;
@@ -1910,7 +1910,7 @@ add:
 
  rth->dst.output = ip_output;
 
- rth->rt_genid = rt_genid(dev_net(dev_out));
+ rth->rt_genid = rt_genid_ipv4(dev_net(dev_out));
  rth->rt_flags = flags;
  rth->rt_type = type;
  rth->rt_is_input = 0;
@@ -2192,7 +2192,7 @@ struct dst_entry *ipv4_blackhole_route(struct net *net, struct dst_entry *dst_or
   rt->rt_iif = ort->rt_iif;
   rt->rt_pmtu = ort->rt_pmtu;
 
-  rt->rt_genid = rt_genid(net);
+  rt->rt_genid = rt_genid_ipv4(net);
   rt->rt_flags = ort->rt_flags;
   rt->rt_type = ort->rt_type;
   rt->rt_gateway = ort->rt_gateway;
diff --git a/net/ipv6/af_inet6.c b/net/ipv6/af_inet6.c
index 92b5ad4..aa008b0 100644
--- a/net/ipv6/af_inet6.c
+++ b/net/ipv6/af_inet6.c
@@ -763,6 +763,7 @@ static int __net_init inet6_net_init(struct net *net)
 
  net->ipv6.sysctl.bindv6only = 0;
  net->ipv6.sysctl.icmpv6_time = 1*HZ;
+ atomic_set(&net->rt6_genid, 0);
 
  err = ipv6_init_mibs(net);
  if (err)
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index 69d344f..b2ad54b 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -283,7 +283,7 @@ static inline struct rt6_info *ip6_dst_alloc(struct net *net,
 
   memset(dst + 1, 0, sizeof(*rt) - sizeof(*dst));
   rt6_init_peer(rt, table ? &table->tb6_peers : net->ipv6.peers);
-  rt->rt6i_genid = rt_genid(net);
+  rt->rt6i_genid = rt_genid_ipv6(net);
   INIT_LIST_HEAD(&rt->rt6i_siblings);
   rt->rt6i_nsiblings = 0;
  }
@@ -1088,7 +1088,7 @@ static struct dst_entry *ip6_dst_check(struct dst_entry *dst, u32 cookie)
   * DST_OBSOLETE_FORCE_CHK which forces validation calls down
   * into this function always.
   */
- if (rt->rt6i_genid != rt_genid(dev_net(rt->dst.dev)))
+ if (rt->rt6i_genid != rt_genid_ipv6(dev_net(rt->dst.dev)))
   return NULL;
 
  if (!rt->rt6i_node || (rt->rt6i_node->fn_sernum != cookie))
diff --git a/net/xfrm/xfrm_policy.c b/net/xfrm/xfrm_policy.c
index 5b1af27..f93ccd6 100644
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@ -658,7 +658,13 @@ int xfrm_policy_insert(int dir, struct xfrm_policy *policy, int excl)
  xfrm_pol_hold(policy);
  net->xfrm.policy_count[dir]++;
  atomic_inc(&flow_cache_genid);
- rt_genid_bump(net);
+
+ /* After previous checking, family can either be AF_INET or AF_INET6 */
+ if (policy->family == AF_INET)
+  rt_genid_bump_ipv4(net);
+ else
+  rt_genid_bump_ipv6(net);
+
  if (delpol) {
   xfrm_policy_requeue(delpol, policy);
   __xfrm_policy_unlink(delpol, dir);
diff --git a/security/selinux/include/xfrm.h b/security/selinux/include/xfrm.h
index 3ffdadc..c1af4e1 100644
--- a/security/selinux/include/xfrm.h
+++ b/security/selinux/include/xfrm.h
@@ -51,8 +51,13 @@ int selinux_xfrm_skb_sid(struct sk_buff *skb, u32 *sid);
 
 static inline void selinux_xfrm_notify_policyload(void)
 {
+ struct net *net;
+
  atomic_inc(&flow_cache_genid);
- rt_genid_bump(&init_net);
+ rtnl_lock();
+ for_each_net(net)
+  rt_genid_bump_all(net);
+ rtnl_unlock();
 }
 #else
 static inline int selinux_xfrm_enabled(void)
-- 
1.7.1