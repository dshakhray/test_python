From d670c8c5f036b82f50de858c0e347c238f6d516b Mon Sep 17 00:00:00 2001
From: Sachin Prabhu <sprabhu@redhat.com>
Date: Mon, 28 Jul 2014 12:16:40 -0400
Subject: [fs] cifs: Fix too big maxBuf size for SMB3 mounts

Message-id: <1406549822-10376-48-git-send-email-sprabhu@redhat.com>
Patchwork-id: 86751
O-Subject: [RHEL7.1 PATCH 47/69] [bz1082049]CIFS: Fix too big maxBuf size for SMB3 mounts
Bugzilla: 1082049
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Pavel Shilovsky <piastry@etersoft.ru>

SMB3 servers can respond with MaxTransactSize of more than 4M
that can cause a memory allocation error returned from kmalloc
in a lock codepath. Also the client doesn't support multicredit
requests now and allows buffer sizes of 65536 bytes only. Set
MaxTransactSize to this maximum supported value.

Cc: stable@vger.kernel.org # 3.7+
Signed-off-by: Pavel Shilovsky <piastry@etersoft.ru>
Acked-by: Jeff Layton <jlayton@redhat.com>
Signed-off-by: Steve French <smfrench@gmail.com>
(cherry picked from commit 2365c4eaf077c48574ab6f143960048fc0f31518)
Signed-off-by: Sachin Prabhu <sprabhu@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/cifs/smb2glob.h b/fs/cifs/smb2glob.h
index c383508..bc0bb9c 100644
--- a/fs/cifs/smb2glob.h
+++ b/fs/cifs/smb2glob.h
@@ -57,4 +57,7 @@
 #define SMB2_CMACAES_SIZE (16)
 #define SMB3_SIGNKEY_SIZE (16)
 
+/* Maximum buffer size value we can send with 1 credit */
+#define SMB2_MAX_BUFFER_SIZE 65536
+
 #endif /* _SMB2_GLOB_H */
diff --git a/fs/cifs/smb2ops.c b/fs/cifs/smb2ops.c
index 21ca6f7..35ddc3e 100644
--- a/fs/cifs/smb2ops.c
+++ b/fs/cifs/smb2ops.c
@@ -182,11 +182,8 @@ smb2_negotiate_wsize(struct cifs_tcon *tcon, struct smb_vol *volume_info)
  /* start with specified wsize, or default */
  wsize = volume_info->wsize ? volume_info->wsize : CIFS_DEFAULT_IOSIZE;
  wsize = min_t(unsigned int, wsize, server->max_write);
- /*
-  * limit write size to 2 ** 16, because we don't support multicredit
-  * requests now.
-  */
- wsize = min_t(unsigned int, wsize, 2 << 15);
+ /* set it to the maximum buffer size value we can send with 1 credit */
+ wsize = min_t(unsigned int, wsize, SMB2_MAX_BUFFER_SIZE);
 
  return wsize;
 }
@@ -200,11 +197,8 @@ smb2_negotiate_rsize(struct cifs_tcon *tcon, struct smb_vol *volume_info)
  /* start with specified rsize, or default */
  rsize = volume_info->rsize ? volume_info->rsize : CIFS_DEFAULT_IOSIZE;
  rsize = min_t(unsigned int, rsize, server->max_read);
- /*
-  * limit write size to 2 ** 16, because we don't support multicredit
-  * requests now.
-  */
- rsize = min_t(unsigned int, rsize, 2 << 15);
+ /* set it to the maximum buffer size value we can send with 1 credit */
+ rsize = min_t(unsigned int, rsize, SMB2_MAX_BUFFER_SIZE);
 
  return rsize;
 }
diff --git a/fs/cifs/smb2pdu.c b/fs/cifs/smb2pdu.c
index a3f7a9c..8603447 100644
--- a/fs/cifs/smb2pdu.c
+++ b/fs/cifs/smb2pdu.c
@@ -413,7 +413,9 @@ SMB2_negotiate(const unsigned int xid, struct cifs_ses *ses)
 
  /* SMB2 only has an extended negflavor */
  server->negflavor = CIFS_NEGFLAVOR_EXTENDED;
- server->maxBuf = le32_to_cpu(rsp->MaxTransactSize);
+ /* set it to the maximum buffer size value we can send with 1 credit */
+ server->maxBuf = min_t(unsigned int, le32_to_cpu(rsp->MaxTransactSize),
+          SMB2_MAX_BUFFER_SIZE);
  server->max_read = le32_to_cpu(rsp->MaxReadSize);
  server->max_write = le32_to_cpu(rsp->MaxWriteSize);
  /* BB Do we need to validate the SecurityMode? */
-- 
1.7.1