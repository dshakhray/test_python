From 1e5ec026cc49e8d7b99d9a08fd06dcd01fef0e2a Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:51:48 -0400
Subject: [fs] nfsd: simplify server xdr->next_page use

Message-id: <1403560314-32525-167-git-send-email-bfields@redhat.com>
Patchwork-id: 84564
O-Subject: [Patch RHEL7 166/172] nfsd4: simplify server xdr->next_page use
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

The rpc code makes available to the NFS server an array of pages to
encod into.  The server represents its reply as an xdr buf, with the
head pointing into the first page in that array, the pages ** array
starting just after that, and the tail (if any) sharing any leftover
space in the page used by the head.

While encoding, we use xdr_stream->page_ptr to keep track of which page
we're currently using.

Currently we set xdr_stream->page_ptr to buf->pages, which makes the
head a weird exception to the rule that page_ptr always points to the
page we're currently encoding into.  So, instead set it to buf->pages -
1 (the page actually containing the head), and remove the need for a
little unintuitive logic in xdr_get_next_encode_buffer() and
xdr_truncate_encode.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 05638dc73af2586517468b1159d4b76e90607359
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4proc.c b/fs/nfsd/nfs4proc.c
index 3aab35e..0c8c9cb 100644
--- a/fs/nfsd/nfs4proc.c
+++ b/fs/nfsd/nfs4proc.c
@@ -1263,7 +1263,7 @@ static void svcxdr_init_encode(struct svc_rqst *rqstp,
  /* Tail and page_len should be zero at this point: */
  buf->len = buf->head[0].iov_len;
  xdr->scratch.iov_len = 0;
- xdr->page_ptr = buf->pages;
+ xdr->page_ptr = buf->pages - 1;
  buf->buflen = PAGE_SIZE * (1 + rqstp->rq_page_end - buf->pages)
   - rqstp->rq_auth_slack;
 }
diff --git a/net/sunrpc/xdr.c b/net/sunrpc/xdr.c
index 97f888c..5c665a6 100644
--- a/net/sunrpc/xdr.c
+++ b/net/sunrpc/xdr.c
@@ -523,10 +523,9 @@ __be32 *xdr_get_next_encode_buffer(struct xdr_stream *xdr, size_t nbytes)
  frag2bytes = nbytes - frag1bytes;
  if (xdr->iov)
   xdr->iov->iov_len += frag1bytes;
- else {
+ else
   xdr->buf->page_len += frag1bytes;
-  xdr->page_ptr++;
- }
+ xdr->page_ptr++;
  xdr->iov = NULL;
  /*
   * If the last encode didn't end exactly on a page boundary, the
@@ -638,8 +637,10 @@ void xdr_truncate_encode(struct xdr_stream *xdr, size_t len)
   /* xdr->iov should already be NULL */
   return;
  }
- if (fraglen)
+ if (fraglen) {
   xdr->end = head->iov_base + head->iov_len;
+  xdr->page_ptr--;
+ }
  /* (otherwise assume xdr->end is already set) */
  head->iov_len = len;
  buf->len = len;
-- 
1.7.1