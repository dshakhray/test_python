From 0de2c0e1b2dbad8221be0aad096573133a2ffac3 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:50:48 -0400
Subject: [fs] nfsd: allow space for final error return

Message-id: <1403560314-32525-107-git-send-email-bfields@redhat.com>
Patchwork-id: 84484
O-Subject: [Patch RHEL7 106/172] nfsd4: allow space for final error return
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

This post-encoding check should be taking into account the need to
encode at least an out-of-space error to the following op (if any).

Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 5f4ab9458755eddc66912a15319363bf311f7fc8
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 24ba652..2ed8036 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -3636,6 +3636,7 @@ void
 nfsd4_encode_operation(struct nfsd4_compoundres *resp, struct nfsd4_op *op)
 {
  struct nfs4_stateowner *so = resp->cstate.replay_owner;
+ struct svc_rqst *rqstp = resp->rqstp;
  __be32 *statp;
  nfsd4_enc encoder;
  __be32 *p;
@@ -3652,8 +3653,12 @@ nfsd4_encode_operation(struct nfsd4_compoundres *resp, struct nfsd4_op *op)
  encoder = nfsd4_enc_ops[op->opnum];
  op->status = encoder(resp, op->status, &op->u);
  /* nfsd4_check_resp_size guarantees enough room for error status */
- if (!op->status)
-  op->status = nfsd4_check_resp_size(resp, 0);
+ if (!op->status) {
+  int space_needed = 0;
+  if (!nfsd4_last_compound_op(rqstp))
+   space_needed = COMPOUND_ERR_SLACK_SPACE;
+  op->status = nfsd4_check_resp_size(resp, space_needed);
+ }
  if (op->status == nfserr_resource ||
      op->status == nfserr_rep_too_big ||
      op->status == nfserr_rep_too_big_to_cache) {
-- 
1.7.1