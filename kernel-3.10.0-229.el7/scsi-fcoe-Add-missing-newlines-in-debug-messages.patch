From f88db848b541dc1be2f429f0182f706ec228b55b Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@redhat.com>
Date: Wed, 22 Oct 2014 19:19:16 -0400
Subject: [scsi] fcoe: Add missing newlines in debug messages

Message-id: <1414005562-16279-3-git-send-email-nhorman@redhat.com>
Patchwork-id: 98081
O-Subject: [RHEL7.1 v2 PATCH 2/8] fcoe: Add missing newlines in debug messages
Bugzilla: 1087099
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tomas Henzl <thenzl@redhat.com>

FCoE debug statements must end in a newline. Add one where it is missing.

Signed-off-by: Bart Van Assche <bvanassche@acm.org>
Cc: Neil Horman <nhorman@tuxdriver.com>
Signed-off-by: Robert Love <robert.w.love@intel.com>
(cherry picked from commit 465b87bfe96a5b257804fd89aa982319e8c58064)

BZ: 1087099
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8150961
Testing: Tested by Intel
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/fcoe/fcoe.c b/drivers/scsi/fcoe/fcoe.c
index ded9a0f..4a8530a 100644
--- a/drivers/scsi/fcoe/fcoe.c
+++ b/drivers/scsi/fcoe/fcoe.c
@@ -1437,14 +1437,14 @@ static int fcoe_rcv(struct sk_buff *skb, struct net_device *netdev,
  ctlr = fcoe_to_ctlr(fcoe);
  lport = ctlr->lp;
  if (unlikely(!lport)) {
-  FCOE_NETDEV_DBG(netdev, "Cannot find hba structure");
+  FCOE_NETDEV_DBG(netdev, "Cannot find hba structure\n");
   goto err2;
  }
  if (!lport->link_up)
   goto err2;
 
- FCOE_NETDEV_DBG(netdev, "skb_info: len:%d data_len:%d head:%p "
-   "data:%p tail:%p end:%p sum:%d dev:%s",
+ FCOE_NETDEV_DBG(netdev,
+   "skb_info: len:%d data_len:%d head:%p data:%p tail:%p end:%p sum:%d dev:%s\n",
    skb->len, skb->data_len, skb->head, skb->data,
    skb_tail_pointer(skb), skb_end_pointer(skb),
    skb->csum, skb->dev ? skb->dev->name : "<NULL>");
@@ -1791,13 +1791,13 @@ static void fcoe_recv_frame(struct sk_buff *skb)
  lport = fr->fr_dev;
  if (unlikely(!lport)) {
   if (skb->destructor != fcoe_percpu_flush_done)
-   FCOE_NETDEV_DBG(skb->dev, "NULL lport in skb");
+   FCOE_NETDEV_DBG(skb->dev, "NULL lport in skb\n");
   kfree_skb(skb);
   return;
  }
 
- FCOE_NETDEV_DBG(skb->dev, "skb_info: len:%d data_len:%d "
-   "head:%p data:%p tail:%p end:%p sum:%d dev:%s",
+ FCOE_NETDEV_DBG(skb->dev,
+   "skb_info: len:%d data_len:%d head:%p data:%p tail:%p end:%p sum:%d dev:%s\n",
    skb->len, skb->data_len,
    skb->head, skb->data, skb_tail_pointer(skb),
    skb_end_pointer(skb), skb->csum,
diff --git a/drivers/scsi/fcoe/fcoe_sysfs.c b/drivers/scsi/fcoe/fcoe_sysfs.c
index 8c05ae0..5654b8b 100644
--- a/drivers/scsi/fcoe/fcoe_sysfs.c
+++ b/drivers/scsi/fcoe/fcoe_sysfs.c
@@ -300,29 +300,29 @@ static ssize_t store_ctlr_mode(struct device *dev,
 
  switch (ctlr->enabled) {
  case FCOE_CTLR_ENABLED:
-  LIBFCOE_SYSFS_DBG(ctlr, "Cannot change mode when enabled.");
+  LIBFCOE_SYSFS_DBG(ctlr, "Cannot change mode when enabled.\n");
   return -EBUSY;
  case FCOE_CTLR_DISABLED:
   if (!ctlr->f->set_fcoe_ctlr_mode) {
    LIBFCOE_SYSFS_DBG(ctlr,
-       "Mode change not supported by LLD.");
+       "Mode change not supported by LLD.\n");
    return -ENOTSUPP;
   }
 
   ctlr->mode = fcoe_parse_mode(mode);
   if (ctlr->mode == FIP_CONN_TYPE_UNKNOWN) {
-   LIBFCOE_SYSFS_DBG(ctlr,
-       "Unknown mode %s provided.", buf);
+   LIBFCOE_SYSFS_DBG(ctlr, "Unknown mode %s provided.\n",
+       buf);
    return -EINVAL;
   }
 
   ctlr->f->set_fcoe_ctlr_mode(ctlr);
-  LIBFCOE_SYSFS_DBG(ctlr, "Mode changed to %s.", buf);
+  LIBFCOE_SYSFS_DBG(ctlr, "Mode changed to %s.\n", buf);
 
   return count;
  case FCOE_CTLR_UNUSED:
  default:
-  LIBFCOE_SYSFS_DBG(ctlr, "Mode change not supported.");
+  LIBFCOE_SYSFS_DBG(ctlr, "Mode change not supported.\n");
   return -ENOTSUPP;
  };
 }
-- 
1.7.1