From 3a69c061716d1cff3ec55d5e02f753cb40591038 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Wed, 11 Jun 2014 11:53:12 -0400
Subject: [kernel] smp: Move __smp_call_function_single() below its safe version

Message-id: <1402487594-26332-13-git-send-email-prarit@redhat.com>
Patchwork-id: 83639
O-Subject: [RHEL7.1 PATCH BZ 1105192 12/14] smp: Move __smp_call_function_single() below its safe version
Bugzilla: 1105192
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

commit d7877c03f1b62de06f9c00417952f39f56c1ab00
Author: Frederic Weisbecker <fweisbec@gmail.com>
Date:   Mon Feb 24 16:39:59 2014 +0100

    smp: Move __smp_call_function_single() below its safe version

    Move this function closer to __smp_call_function_single(). These functions
    have very similar behavior and should be displayed in the same block
    for clarity.

    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Jens Axboe <axboe@fb.com>
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/smp.c b/kernel/smp.c
index 5e208b3..d556882 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -238,6 +238,38 @@ int smp_call_function_single(int cpu, smp_call_func_t func, void *info,
 }
 EXPORT_SYMBOL(smp_call_function_single);
 
+/**
+ * __smp_call_function_single(): Run a function on a specific CPU
+ * @cpu: The CPU to run on.
+ * @csd: Pre-allocated and setup data structure
+ * @wait: If true, wait until function has completed on specified CPU.
+ *
+ * Like smp_call_function_single(), but allow caller to pass in a
+ * pre-allocated data structure. Useful for embedding @data inside
+ * other structures, for instance.
+ */
+int __smp_call_function_single(int cpu, struct call_single_data *csd, int wait)
+{
+ int err = 0;
+ int this_cpu;
+
+ this_cpu = get_cpu();
+ /*
+  * Can deadlock when called with interrupts disabled.
+  * We allow cpu's that are not yet online though, as no one else can
+  * send smp call function interrupt to this cpu and as such deadlocks
+  * can't happen.
+  */
+ WARN_ON_ONCE(cpu_online(this_cpu) && wait && irqs_disabled()
+       && !oops_in_progress);
+
+ err = generic_exec_single(cpu, csd, csd->func, csd->info, wait);
+ put_cpu();
+
+ return err;
+}
+EXPORT_SYMBOL_GPL(__smp_call_function_single);
+
 /*
  * smp_call_function_any - Run a function on any of the given cpus
  * @mask: The mask of cpus it can run on.
@@ -282,38 +314,6 @@ call:
 EXPORT_SYMBOL_GPL(smp_call_function_any);
 
 /**
- * __smp_call_function_single(): Run a function on a specific CPU
- * @cpu: The CPU to run on.
- * @csd: Pre-allocated and setup data structure
- * @wait: If true, wait until function has completed on specified CPU.
- *
- * Like smp_call_function_single(), but allow caller to pass in a
- * pre-allocated data structure. Useful for embedding @data inside
- * other structures, for instance.
- */
-int __smp_call_function_single(int cpu, struct call_single_data *csd, int wait)
-{
- int err = 0;
- int this_cpu;
-
- this_cpu = get_cpu();
- /*
-  * Can deadlock when called with interrupts disabled.
-  * We allow cpu's that are not yet online though, as no one else can
-  * send smp call function interrupt to this cpu and as such deadlocks
-  * can't happen.
-  */
- WARN_ON_ONCE(cpu_online(this_cpu) && wait && irqs_disabled()
-       && !oops_in_progress);
-
- err = generic_exec_single(cpu, csd, csd->func, csd->info, wait);
- put_cpu();
-
- return err;
-}
-EXPORT_SYMBOL(__smp_call_function_single);
-
-/**
  * smp_call_function_many(): Run a function on a set of other CPUs.
  * @mask: The set of cpus to run on (only runs on online subset).
  * @func: The function to run. This must be fast and non-blocking.
-- 
1.7.1