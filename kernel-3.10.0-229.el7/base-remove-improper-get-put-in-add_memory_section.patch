From 1bafc174bfd273452691b1d66aab7fe7a1d5fd03 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:04:59 -0400
Subject: [base] remove improper get/put in add_memory_section()

Message-id: <20140710010459.22146.67449.stgit@gir.stowe>
Patchwork-id: 85604
O-Subject: [RHEL7.1 PATCH 065/105] drivers: base: remove improper get/put in add_memory_section()
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 37171e3cb7a2f6fc594b524c940beb1ce85cc935

commit 37171e3cb7a2f6fc594b524c940beb1ce85cc935
Author: Seth Jennings <sjenning@linux.vnet.ibm.com>
Date:   Tue Aug 20 12:13:02 2013 -0500

    drivers: base: remove improper get/put in add_memory_section()

    The path through add_memory_section() when the memory block already
    exists uses flawed refcounting logic.  A get_device() is done on a
    memory block using a pointer that might not be valid as we dropped
    our previous reference and didn't obtain a new reference in the
    proper way.

    Lets stop pretending and just remove the get/put.  The
    mem_sysfs_mutex, which we hold over the entire init loop now, will
    prevent the memory blocks from disappearing from under us.

    Signed-off-by: Seth Jennings <sjenning@linux.vnet.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/base/memory.c b/drivers/base/memory.c
index 1d15da3..3de685d 100644
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@ -615,14 +615,12 @@ static int add_memory_section(struct mem_section *section,
   if (scn_nr >= (*mem_p)->start_section_nr &&
       scn_nr <= (*mem_p)->end_section_nr) {
    mem = *mem_p;
-   get_device(&mem->dev);
   }
  }
 
- if (mem) {
+ if (mem)
   mem->section_count++;
-  put_device(&mem->dev);
- } else {
+ else {
   ret = init_memory_block(&mem, section, MEM_ONLINE);
   /* store memory_block pointer for next loop */
   if (!ret && mem_p)
-- 
1.7.1