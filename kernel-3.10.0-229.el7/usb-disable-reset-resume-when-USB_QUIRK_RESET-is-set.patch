From cfa821e86111c79423df3efdfa3b85717adfdfa1 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:07:14 -0400
Subject: [usb] disable reset-resume when USB_QUIRK_RESET is set

Message-id: <1410887463-20674-363-git-send-email-dzickus@redhat.com>
Patchwork-id: 95568
O-Subject: [RHEL7 PATCH 362/591] USB: disable reset-resume when USB_QUIRK_RESET is set
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 1d10255c1c496557a5674e651c4ebbe0f61279f2
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Mar 18 10:39:05 2014 -0400

    USB: disable reset-resume when USB_QUIRK_RESET is set

    The USB_QUIRK_RESET flag indicates that a USB device changes its
    identity in some way when it is reset.  It may lose its firmware, its
    descriptors may change, or it may switch back to a default mode of
    operation.

    If a device does this, the kernel needs to avoid resetting it.  Resets
    are likely to fail, or worse, succeed while changing the device's
    state in a way the system can't detect.

    This means we should disable the reset-resume mechanism whenever this
    quirk flag is present.  An attempted reset-resume will fail, the
    device will be logically disconnected, and later on the hub driver
    will rediscover and re-enumerate the device.  This will cause the
    appropriate udev events to be generated, so that userspace will have a
    chance to switch the device into its normal operating mode, if
    necessary.

    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: Oliver Neukum <oliver@neukum.org>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index ed7b37e..740a1a0 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -3101,9 +3101,19 @@ static int finish_port_resume(struct usb_device *udev)
   * operation is carried out here, after the port has been
   * resumed.
   */
- if (udev->reset_resume)
+ if (udev->reset_resume) {
+  /*
+   * If the device morphs or switches modes when it is reset,
+   * we don't want to perform a reset-resume.  We'll fail the
+   * resume, which will cause a logical disconnect, and then
+   * the device will be rediscovered.
+   */
  retry_reset_resume:
-  status = usb_reset_and_verify_device(udev);
+  if (udev->quirks & USB_QUIRK_RESET)
+   status = -ENODEV;
+  else
+   status = usb_reset_and_verify_device(udev);
+ }
 
  /* 10.5.4.5 says be sure devices in the tree are still there.
   * For now let's assume the device didn't go crazy on resume,
-- 
1.7.1