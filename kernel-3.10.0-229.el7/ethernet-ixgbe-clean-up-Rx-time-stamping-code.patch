From bd758dac2751bd9cb39e243a301a8e9cf1600725 Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Wed, 10 Sep 2014 18:29:09 -0400
Subject: [ethernet] ixgbe: clean up Rx time stamping code

Message-id: <1410373750-11341-50-git-send-email-jogreene@redhat.com>
Patchwork-id: 93545
O-Subject: [RHEL7.1 PATCH 49/50] ixgbe: clean up Rx time stamping code
Bugzilla: 1091123
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

BZ: 1091123
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7919168
Tested: In beaker. See BZ for details

Time stamping resources are per-interface so there is no need
to keep separate last_rx_timestamp for each Rx ring, move
last_rx_timestamp to the adapter structure.

With last_rx_timestamp inside adapter, ixgbe_ptp_rx_hwtstamp()
inline function is reduced to a single if statement so it is
no longer necessary. If statement is placed directly in
ixgbe_process_skb_fields() fixing likely/unlikely marking.

Checks for q_vector or adapter to be NULL are superfluous.

Comment about taking I/O hit is a leftover from previous design.

Signed-off-by: Jakub Kicinski <kubakici@wp.pl>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit eda183c21a444aef5800cef98d63d62914d2a81a)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe.h b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
index bf850f6..a7d620c 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
@@ -246,7 +246,6 @@ struct ixgbe_ring {
   struct ixgbe_tx_buffer *tx_buffer_info;
   struct ixgbe_rx_buffer *rx_buffer_info;
  };
- unsigned long last_rx_timestamp;
  unsigned long state;
  u8 __iomem *tail;
  dma_addr_t dma;   /* phys. address of descriptor ring */
@@ -752,6 +751,7 @@ struct ixgbe_adapter {
  unsigned long ptp_tx_start;
  unsigned long last_overflow_check;
  unsigned long last_rx_ptp_check;
+ unsigned long last_rx_timestamp;
  spinlock_t tmreg_lock;
  struct cyclecounter cc;
  struct timecounter tc;
@@ -925,24 +925,7 @@ void ixgbe_ptp_init(struct ixgbe_adapter *adapter);
 void ixgbe_ptp_stop(struct ixgbe_adapter *adapter);
 void ixgbe_ptp_overflow_check(struct ixgbe_adapter *adapter);
 void ixgbe_ptp_rx_hang(struct ixgbe_adapter *adapter);
-void __ixgbe_ptp_rx_hwtstamp(struct ixgbe_q_vector *q_vector,
-        struct sk_buff *skb);
-static inline void ixgbe_ptp_rx_hwtstamp(struct ixgbe_ring *rx_ring,
-      union ixgbe_adv_rx_desc *rx_desc,
-      struct sk_buff *skb)
-{
- if (unlikely(!ixgbe_test_staterr(rx_desc, IXGBE_RXDADV_STAT_TS)))
-  return;
-
- __ixgbe_ptp_rx_hwtstamp(rx_ring->q_vector, skb);
-
- /*
-  * Update the last_rx_timestamp timer in order to enable watchdog check
-  * for error case of latched timestamp on a dropped packet.
-  */
- rx_ring->last_rx_timestamp = jiffies;
-}
-
+void ixgbe_ptp_rx_hwtstamp(struct ixgbe_adapter *adapter, struct sk_buff *skb);
 int ixgbe_ptp_set_ts_config(struct ixgbe_adapter *adapter, struct ifreq *ifr);
 int ixgbe_ptp_get_ts_config(struct ixgbe_adapter *adapter, struct ifreq *ifr);
 void ixgbe_ptp_start_cyclecounter(struct ixgbe_adapter *adapter);
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index 1305c64..6a0ea83 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -1658,7 +1658,8 @@ static void ixgbe_process_skb_fields(struct ixgbe_ring *rx_ring,
 
  ixgbe_rx_checksum(rx_ring, rx_desc, skb);
 
- ixgbe_ptp_rx_hwtstamp(rx_ring, rx_desc, skb);
+ if (unlikely(ixgbe_test_staterr(rx_desc, IXGBE_RXDADV_STAT_TS)))
+  ixgbe_ptp_rx_hwtstamp(rx_ring->q_vector->adapter, skb);
 
  if ((dev->features & NETIF_F_HW_VLAN_CTAG_RX) &&
      ixgbe_test_staterr(rx_desc, IXGBE_RXD_STAT_VP)) {
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c
index 63515a6..c247a22 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c
@@ -435,10 +435,8 @@ void ixgbe_ptp_overflow_check(struct ixgbe_adapter *adapter)
 void ixgbe_ptp_rx_hang(struct ixgbe_adapter *adapter)
 {
  struct ixgbe_hw *hw = &adapter->hw;
- struct ixgbe_ring *rx_ring;
  u32 tsyncrxctl = IXGBE_READ_REG(hw, IXGBE_TSYNCRXCTL);
  unsigned long rx_event;
- int n;
 
  /* if we don't have a valid timestamp in the registers, just update the
   * timeout counter and exit
@@ -450,11 +448,8 @@ void ixgbe_ptp_rx_hang(struct ixgbe_adapter *adapter)
 
  /* determine the most recent watchdog or rx_timestamp event */
  rx_event = adapter->last_rx_ptp_check;
- for (n = 0; n < adapter->num_rx_queues; n++) {
-  rx_ring = adapter->rx_ring[n];
-  if (time_after(rx_ring->last_rx_timestamp, rx_event))
-   rx_event = rx_ring->last_rx_timestamp;
- }
+ if (time_after(adapter->last_rx_timestamp, rx_event))
+  rx_event = adapter->last_rx_timestamp;
 
  /* only need to read the high RXSTMP register to clear the lock */
  if (time_is_before_jiffies(rx_event + 5*HZ)) {
@@ -530,35 +525,22 @@ static void ixgbe_ptp_tx_hwtstamp_work(struct work_struct *work)
 }
 
 /**
- * __ixgbe_ptp_rx_hwtstamp - utility function which checks for RX time stamp
- * @q_vector: structure containing interrupt and ring information
+ * ixgbe_ptp_rx_hwtstamp - utility function which checks for RX time stamp
+ * @adapter: pointer to adapter struct
  * @skb: particular skb to send timestamp with
  *
  * if the timestamp is valid, we convert it into the timecounter ns
  * value, then store that result into the shhwtstamps structure which
  * is passed up the network stack
  */
-void __ixgbe_ptp_rx_hwtstamp(struct ixgbe_q_vector *q_vector,
-        struct sk_buff *skb)
+void ixgbe_ptp_rx_hwtstamp(struct ixgbe_adapter *adapter, struct sk_buff *skb)
 {
- struct ixgbe_adapter *adapter;
- struct ixgbe_hw *hw;
+ struct ixgbe_hw *hw = &adapter->hw;
  struct skb_shared_hwtstamps *shhwtstamps;
  u64 regval = 0, ns;
  u32 tsyncrxctl;
  unsigned long flags;
 
- /* we cannot process timestamps on a ring without a q_vector */
- if (!q_vector || !q_vector->adapter)
-  return;
-
- adapter = q_vector->adapter;
- hw = &adapter->hw;
-
- /*
-  * Read the tsyncrxctl register afterwards in order to prevent taking an
-  * I/O hit on every packet.
-  */
  tsyncrxctl = IXGBE_READ_REG(hw, IXGBE_TSYNCRXCTL);
  if (!(tsyncrxctl & IXGBE_TSYNCRXCTL_VALID))
   return;
@@ -566,13 +548,17 @@ void __ixgbe_ptp_rx_hwtstamp(struct ixgbe_q_vector *q_vector,
  regval |= (u64)IXGBE_READ_REG(hw, IXGBE_RXSTMPL);
  regval |= (u64)IXGBE_READ_REG(hw, IXGBE_RXSTMPH) << 32;
 
-
  spin_lock_irqsave(&adapter->tmreg_lock, flags);
  ns = timecounter_cyc2time(&adapter->tc, regval);
  spin_unlock_irqrestore(&adapter->tmreg_lock, flags);
 
  shhwtstamps = skb_hwtstamps(skb);
  shhwtstamps->hwtstamp = ns_to_ktime(ns);
+
+ /* Update the last_rx_timestamp timer in order to enable watchdog check
+  * for error case of latched timestamp on a dropped packet.
+  */
+ adapter->last_rx_timestamp = jiffies;
 }
 
 int ixgbe_ptp_get_ts_config(struct ixgbe_adapter *adapter, struct ifreq *ifr)
-- 
1.7.1