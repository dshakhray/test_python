From f65f7af283879723e8d26bcdac52f950a70010a0 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:07:01 -0400
Subject: [tools] perf: Allocate thread map_groups's dynamically

Message-id: <1410181752-25631-177-git-send-email-jolsa@redhat.com>
Patchwork-id: 91797
O-Subject: [PATCH RHEL7.1 BZ1134356 176/307] perf tools: Allocate thread map_groups's dynamically
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 93d5731dcb5b8cb7fa56ee11a5891f10c96c2a45
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Fri Mar 21 17:57:01 2014 -0300

RHEL7
=====
Keeping MAP__VARIABLE in the first hunk, because the fix:
  9a126728165e perf tests x86: Fix stack map lookup in dwarf unwind test

got in earlier before this change and also caused merge
conflicts in upstream:
  aeffe2abc894 Merge branch 'perf/urgent' into perf/core, to resolve conflict

description
===========
Moving towards sharing map groups within a process threads.

Because of this we need the map groups to be dynamically allocated. No
other functional change is intended in here.

Based on a patch by Jiri Olsa, but this time _just_ making the
conversion from statically allocating thread->mg to turning it into a
pointer and instead of initializing it at thread's constructor,
introduce a constructor/destructor for the map_groups class and
call at thread creation time.

Later we will introduce the get/put methods when we move to sharing
those map_groups, when the get/put refcounting semantics will be needed.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/arch/x86/tests/dwarf-unwind.c b/tools/perf/arch/x86/tests/dwarf-unwind.c
index 83bc238..9f89f89 100644
--- a/tools/perf/arch/x86/tests/dwarf-unwind.c
+++ b/tools/perf/arch/x86/tests/dwarf-unwind.c
@@ -23,7 +23,7 @@ static int sample_ustack(struct perf_sample *sample,
 
  sp = (unsigned long) regs[PERF_REG_X86_SP];
 
- map = map_groups__find(&thread->mg, MAP__VARIABLE, (u64) sp);
+ map = map_groups__find(thread->mg, MAP__VARIABLE, (u64) sp);
  if (!map) {
   pr_debug("failed to get stack map\n");
   free(buf);
diff --git a/tools/perf/ui/stdio/hist.c b/tools/perf/ui/stdio/hist.c
index d59893e..9eccf7f 100644
--- a/tools/perf/ui/stdio/hist.c
+++ b/tools/perf/ui/stdio/hist.c
@@ -495,7 +495,7 @@ print_entries:
    break;
 
   if (h->ms.map == NULL && verbose > 1) {
-   __map_groups__fprintf_maps(&h->thread->mg,
+   __map_groups__fprintf_maps(h->thread->mg,
          MAP__FUNCTION, verbose, fp);
    fprintf(fp, "%.10s end\n", graph_dotted_line);
   }
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index 9d12aa6..dbcaea1 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -699,7 +699,7 @@ void thread__find_addr_map(struct thread *thread,
       enum map_type type, u64 addr,
       struct addr_location *al)
 {
- struct map_groups *mg = &thread->mg;
+ struct map_groups *mg = thread->mg;
  bool load_map = false;
 
  al->machine = machine;
diff --git a/tools/perf/util/map.c b/tools/perf/util/map.c
index 39cd2d0..ae4c5e1 100644
--- a/tools/perf/util/map.c
+++ b/tools/perf/util/map.c
@@ -358,6 +358,22 @@ void map_groups__exit(struct map_groups *mg)
  }
 }
 
+struct map_groups *map_groups__new(void)
+{
+ struct map_groups *mg = malloc(sizeof(*mg));
+
+ if (mg != NULL)
+  map_groups__init(mg);
+
+ return mg;
+}
+
+void map_groups__delete(struct map_groups *mg)
+{
+ map_groups__exit(mg);
+ free(mg);
+}
+
 void map_groups__flush(struct map_groups *mg)
 {
  int type;
diff --git a/tools/perf/util/map.h b/tools/perf/util/map.h
index f00f058..1073e2d 100644
--- a/tools/perf/util/map.h
+++ b/tools/perf/util/map.h
@@ -61,6 +61,9 @@ struct map_groups {
  struct machine  *machine;
 };
 
+struct map_groups *map_groups__new(void);
+void map_groups__delete(struct map_groups *mg);
+
 static inline struct kmap *map__kmap(struct map *map)
 {
  return (struct kmap *)(map + 1);
diff --git a/tools/perf/util/thread.c b/tools/perf/util/thread.c
index 3ce0498..dc51d16 100644
--- a/tools/perf/util/thread.c
+++ b/tools/perf/util/thread.c
@@ -15,7 +15,10 @@ struct thread *thread__new(pid_t pid, pid_t tid)
  struct thread *thread = zalloc(sizeof(*thread));
 
  if (thread != NULL) {
-  map_groups__init(&thread->mg);
+  thread->mg = map_groups__new();
+  if (thread->mg == NULL)
+   goto out_free;
+
   thread->pid_ = pid;
   thread->tid = tid;
   thread->ppid = -1;
@@ -37,6 +40,8 @@ struct thread *thread__new(pid_t pid, pid_t tid)
  return thread;
 
 err_thread:
+ map_groups__delete(thread->mg);
+out_free:
  free(thread);
  return NULL;
 }
@@ -45,7 +50,8 @@ void thread__delete(struct thread *thread)
 {
  struct comm *comm, *tmp;
 
- map_groups__exit(&thread->mg);
+ map_groups__delete(thread->mg);
+ thread->mg = NULL;
  list_for_each_entry_safe(comm, tmp, &thread->comm_list, list) {
   list_del(&comm->list);
   comm__free(comm);
@@ -111,13 +117,13 @@ int thread__comm_len(struct thread *thread)
 size_t thread__fprintf(struct thread *thread, FILE *fp)
 {
  return fprintf(fp, "Thread %d %s\n", thread->tid, thread__comm_str(thread)) +
-        map_groups__fprintf(&thread->mg, verbose, fp);
+        map_groups__fprintf(thread->mg, verbose, fp);
 }
 
 void thread__insert_map(struct thread *thread, struct map *map)
 {
- map_groups__fixup_overlappings(&thread->mg, map, verbose, stderr);
- map_groups__insert(&thread->mg, map);
+ map_groups__fixup_overlappings(thread->mg, map, verbose, stderr);
+ map_groups__insert(thread->mg, map);
 }
 
 int thread__fork(struct thread *thread, struct thread *parent, u64 timestamp)
@@ -135,7 +141,7 @@ int thread__fork(struct thread *thread, struct thread *parent, u64 timestamp)
  }
 
  for (i = 0; i < MAP__NR_TYPES; ++i)
-  if (map_groups__clone(&thread->mg, &parent->mg, i) < 0)
+  if (map_groups__clone(thread->mg, parent->mg, i) < 0)
    return -ENOMEM;
 
  thread->ppid = parent->tid;
diff --git a/tools/perf/util/thread.h b/tools/perf/util/thread.h
index 9b29f08..bee1eb0 100644
--- a/tools/perf/util/thread.h
+++ b/tools/perf/util/thread.h
@@ -13,7 +13,7 @@ struct thread {
   struct rb_node  rb_node;
   struct list_head node;
  };
- struct map_groups mg;
+ struct map_groups *mg;
  pid_t   pid_; /* Not all tools update this */
  pid_t   tid;
  pid_t   ppid;
-- 
1.7.1