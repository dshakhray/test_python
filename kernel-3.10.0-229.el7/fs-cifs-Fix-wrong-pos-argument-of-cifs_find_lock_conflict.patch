From 7f3ba39fc54beb918768102f2913e2b406a8406d Mon Sep 17 00:00:00 2001
From: Sachin Prabhu <sprabhu@redhat.com>
Date: Mon, 28 Jul 2014 12:15:54 -0400
Subject: [fs] cifs: Fix wrong pos argument of cifs_find_lock_conflict

Message-id: <1406549822-10376-2-git-send-email-sprabhu@redhat.com>
Patchwork-id: 86771
O-Subject: [RHEL7.1 PATCH 01/69] [bz1082049]CIFS: Fix wrong pos argument of cifs_find_lock_conflict
Bugzilla: 1082049
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

and use generic_file_aio_write rather than __generic_file_aio_write
in cifs_writev.

Signed-off-by: Pavel Shilovsky <piastry@etersoft.ru>
Reported-by: Al Viro <viro@ZenIV.linux.org.uk>
Signed-off-by: Steve French <smfrench@gmail.com>
(cherry picked from commit 6b1168e1617d9d4db73ef5276490627abf5adec4)

The patch is slightly different to upstream since RHEL 7 doesn't contain
commits
02afc27faec94c9e068517a22acf55400976c698
d311d79de305f1ada47cadd672e6ed1b28a949eb
These changes specificically for cifs can be ignored in the context of
this patch.

The patch was successfully compiled against the RHEL 7 kernel and was
sanity tested.

Signed-off-by: Sachin Prabhu <sprabhu@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/cifs/file.c b/fs/cifs/file.c
index 049a583..2821b42 100644
--- a/fs/cifs/file.c
+++ b/fs/cifs/file.c
@@ -2579,31 +2579,19 @@ cifs_writev(struct kiocb *iocb, const struct iovec *iov,
  struct cifsInodeInfo *cinode = CIFS_I(inode);
  struct TCP_Server_Info *server = tlink_tcon(cfile->tlink)->ses->server;
  ssize_t rc = -EACCES;
+ loff_t lock_pos = pos;
 
- BUG_ON(iocb->ki_pos != pos);
-
+ if (file->f_flags & O_APPEND)
+  lock_pos = i_size_read(inode);
  /*
   * We need to hold the sem to be sure nobody modifies lock list
   * with a brlock that prevents writing.
   */
  down_read(&cinode->lock_sem);
- if (!cifs_find_lock_conflict(cfile, pos, iov_length(iov, nr_segs),
+ if (!cifs_find_lock_conflict(cfile, lock_pos, iov_length(iov, nr_segs),
          server->vals->exclusive_lock_type, NULL,
-         CIFS_WRITE_OP)) {
-  mutex_lock(&inode->i_mutex);
-  rc = __generic_file_aio_write(iocb, iov, nr_segs,
-            &iocb->ki_pos);
-  mutex_unlock(&inode->i_mutex);
- }
-
- if (rc > 0 || rc == -EIOCBQUEUED) {
-  ssize_t err;
-
-  err = generic_write_sync(file, pos, rc);
-  if (err < 0 && rc > 0)
-   rc = err;
- }
-
+         CIFS_WRITE_OP))
+  rc = generic_file_aio_write(iocb, iov, nr_segs, pos);
  up_read(&cinode->lock_sem);
  return rc;
 }
-- 
1.7.1