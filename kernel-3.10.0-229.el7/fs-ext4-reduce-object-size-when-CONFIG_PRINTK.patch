From 086954c2d32116d5c2ea4c3436dfc7e3d65eaa00 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:11 -0400
Subject: [fs] ext4: reduce object size when !CONFIG_PRINTK

Message-id: <1414058125-4183-38-git-send-email-lczerner@redhat.com>
Patchwork-id: 98138
O-Subject: [RHEL 7.1 PATCH v2 037/171] ext4: reduce object size when !CONFIG_PRINTK
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Joe Perches <joe@perches.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit e7c96e8e47baf263d93a8dbbebca7216a912ca05

 Reduce the object size ~10% could be useful for embedded systems.

 Add #ifdef CONFIG_PRINTK #else #endif blocks to hold formats and
 arguments, passing " " to functions when !CONFIG_PRINTK and still
 verifying format and arguments with no_printk.

 $ size fs/ext4/built-in.o*
    text    data     bss     dec     hex filename
  239375     610     888  240873   3ace9 fs/ext4/built-in.o.new
  264167     738     888  265793   40e41 fs/ext4/built-in.o.old

     $ grep -E "CONFIG_EXT4|CONFIG_PRINTK" .config
     # CONFIG_PRINTK is not set
     CONFIG_EXT4_FS=y
     CONFIG_EXT4_USE_FOR_EXT23=y
     CONFIG_EXT4_FS_POSIX_ACL=y
     # CONFIG_EXT4_FS_SECURITY is not set
     # CONFIG_EXT4_DEBUG is not set

 Signed-off-by: Joe Perches <joe@perches.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 10bcca9..de42413 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2177,42 +2177,96 @@ extern int ext4_alloc_flex_bg_array(struct super_block *sb,
         ext4_group_t ngroup);
 extern const char *ext4_decode_error(struct super_block *sb, int errno,
          char nbuf[16]);
+
 extern __printf(4, 5)
 void __ext4_error(struct super_block *, const char *, unsigned int,
     const char *, ...);
-#define ext4_error(sb, message...) __ext4_error(sb, __func__, \
-           __LINE__, ## message)
 extern __printf(5, 6)
-void ext4_error_inode(struct inode *, const char *, unsigned int, ext4_fsblk_t,
+void __ext4_error_inode(struct inode *, const char *, unsigned int, ext4_fsblk_t,
         const char *, ...);
 extern __printf(5, 6)
-void ext4_error_file(struct file *, const char *, unsigned int, ext4_fsblk_t,
+void __ext4_error_file(struct file *, const char *, unsigned int, ext4_fsblk_t,
        const char *, ...);
 extern void __ext4_std_error(struct super_block *, const char *,
         unsigned int, int);
 extern __printf(4, 5)
 void __ext4_abort(struct super_block *, const char *, unsigned int,
     const char *, ...);
-#define ext4_abort(sb, message...) __ext4_abort(sb, __func__, \
-             __LINE__, ## message)
 extern __printf(4, 5)
 void __ext4_warning(struct super_block *, const char *, unsigned int,
       const char *, ...);
-#define ext4_warning(sb, message...) __ext4_warning(sb, __func__, \
-             __LINE__, ## message)
 extern __printf(3, 4)
-void ext4_msg(struct super_block *, const char *, const char *, ...);
+void __ext4_msg(struct super_block *, const char *, const char *, ...);
 extern void __dump_mmp_msg(struct super_block *, struct mmp_struct *mmp,
       const char *, unsigned int, const char *);
-#define dump_mmp_msg(sb, mmp, msg) __dump_mmp_msg(sb, mmp, __func__, \
-             __LINE__, msg)
 extern __printf(7, 8)
 void __ext4_grp_locked_error(const char *, unsigned int,
         struct super_block *, ext4_group_t,
         unsigned long, ext4_fsblk_t,
         const char *, ...);
-#define ext4_grp_locked_error(sb, grp, message...) \
- __ext4_grp_locked_error(__func__, __LINE__, (sb), (grp), ## message)
+
+#ifdef CONFIG_PRINTK
+
+#define ext4_error_inode(inode, func, line, block, fmt, ...)  \
+ __ext4_error_inode(inode, func, line, block, fmt, ##__VA_ARGS__)
+#define ext4_error_file(file, func, line, block, fmt, ...)  \
+ __ext4_error_file(file, func, line, block, fmt, ##__VA_ARGS__)
+#define ext4_error(sb, fmt, ...)     \
+ __ext4_error(sb, __func__, __LINE__, fmt, ##__VA_ARGS__)
+#define ext4_abort(sb, fmt, ...)     \
+ __ext4_abort(sb, __func__, __LINE__, fmt, ##__VA_ARGS__)
+#define ext4_warning(sb, fmt, ...)     \
+ __ext4_warning(sb, __func__, __LINE__, fmt, ##__VA_ARGS__)
+#define ext4_msg(sb, level, fmt, ...)    \
+ __ext4_msg(sb, level, fmt, ##__VA_ARGS__)
+#define dump_mmp_msg(sb, mmp, msg)     \
+ __dump_mmp_msg(sb, mmp, __func__, __LINE__, msg)
+#define ext4_grp_locked_error(sb, grp, ino, block, fmt, ...)  \
+ __ext4_grp_locked_error(__func__, __LINE__, sb, grp, ino, block, \
+    fmt, ##__VA_ARGS__)
+
+#else
+
+#define ext4_error_inode(inode, func, line, block, fmt, ...)  \
+do {         \
+ no_printk(fmt, ##__VA_ARGS__);     \
+ __ext4_error_inode(inode, "", 0, block, " ");   \
+} while (0)
+#define ext4_error_file(file, func, line, block, fmt, ...)  \
+do {         \
+ no_printk(fmt, ##__VA_ARGS__);     \
+ __ext4_error_file(file, "", 0, block, " ");   \
+} while (0)
+#define ext4_error(sb, fmt, ...)     \
+do {         \
+ no_printk(fmt, ##__VA_ARGS__);     \
+ __ext4_error(sb, "", 0, " ");     \
+} while (0)
+#define ext4_abort(sb, fmt, ...)     \
+do {         \
+ no_printk(fmt, ##__VA_ARGS__);     \
+ __ext4_abort(sb, "", 0, " ");     \
+} while (0)
+#define ext4_warning(sb, fmt, ...)     \
+do {         \
+ no_printk(fmt, ##__VA_ARGS__);     \
+ __ext4_warning(sb, "", 0, " ");     \
+} while (0)
+#define ext4_msg(sb, level, fmt, ...)     \
+do {         \
+ no_printk(fmt, ##__VA_ARGS__);     \
+ __ext4_msg(sb, "", " ");     \
+} while (0)
+#define dump_mmp_msg(sb, mmp, msg)     \
+ __dump_mmp_msg(sb, mmp, "", 0, "")
+#define ext4_grp_locked_error(sb, grp, ino, block, fmt, ...)  \
+do {         \
+ no_printk(fmt, ##__VA_ARGS__);    \
+ __ext4_grp_locked_error("", 0, sb, grp, ino, block, " "); \
+} while (0)
+
+#endif
+
 extern void ext4_update_dynamic_rev(struct super_block *sb);
 extern int ext4_update_compat_feature(handle_t *handle, struct super_block *sb,
      __u32 compat);
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 23afe93..e924263 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -434,9 +434,9 @@ void __ext4_error(struct super_block *sb, const char *function,
  ext4_handle_error(sb);
 }
 
-void ext4_error_inode(struct inode *inode, const char *function,
-        unsigned int line, ext4_fsblk_t block,
-        const char *fmt, ...)
+void __ext4_error_inode(struct inode *inode, const char *function,
+   unsigned int line, ext4_fsblk_t block,
+   const char *fmt, ...)
 {
  va_list args;
  struct va_format vaf;
@@ -464,9 +464,9 @@ void ext4_error_inode(struct inode *inode, const char *function,
  ext4_handle_error(inode->i_sb);
 }
 
-void ext4_error_file(struct file *file, const char *function,
-       unsigned int line, ext4_fsblk_t block,
-       const char *fmt, ...)
+void __ext4_error_file(struct file *file, const char *function,
+         unsigned int line, ext4_fsblk_t block,
+         const char *fmt, ...)
 {
  va_list args;
  struct va_format vaf;
@@ -601,7 +601,8 @@ void __ext4_abort(struct super_block *sb, const char *function,
   panic("EXT4-fs panic from previous error\n");
 }
 
-void ext4_msg(struct super_block *sb, const char *prefix, const char *fmt, ...)
+void __ext4_msg(struct super_block *sb,
+  const char *prefix, const char *fmt, ...)
 {
  struct va_format vaf;
  va_list args;
-- 
1.7.1