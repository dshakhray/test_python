From 583a614d8fe9e42e425572236de098b6552fe3ed Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Thu, 16 Oct 2014 16:02:02 -0400
Subject: [scsi] mpt3sas: Rework the MSI-X grouping code

Message-id: <1413475335-14737-20-git-send-email-thenzl@redhat.com>
Patchwork-id: 97603
O-Subject: [RHEL7.1 e-stor PATCH 19/32] mpt3sas: Rework the MSI-X grouping code
Bugzilla: 1088524
RH-Acked-by: Maurizio Lombardi <mlombard@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

On systems with a non power-of-two CPU count the existing MSI-X grouping
code failed to distribute interrupts correctly. Rework the code to
handle arbitrary processor counts.

Also remove the hardcoded upper limit on the number of processors so we
can boot on large systems.

Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
Acked-by: Sreekanth Reddy <Sreekanth.reddy@avagotech.com>
Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 91b265bf0b5733a6c4865e809c93a2a812de46e8)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/mpt3sas/mpt3sas_base.c b/drivers/scsi/mpt3sas/mpt3sas_base.c
index 0cf4f70..c608a61 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_base.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.c
@@ -1624,66 +1624,35 @@ _base_request_irq(struct MPT3SAS_ADAPTER *ioc, u8 index, u32 vector)
 static void
 _base_assign_reply_queues(struct MPT3SAS_ADAPTER *ioc)
 {
- struct adapter_reply_queue *reply_q;
- int cpu_id;
- int cpu_grouping, loop, grouping, grouping_mod;
- int reply_queue;
+ unsigned int cpu, nr_cpus, nr_msix, index = 0;
 
  if (!_base_is_controller_msix_enabled(ioc))
   return;
 
  memset(ioc->cpu_msix_table, 0, ioc->cpu_msix_table_sz);
 
- /* NUMA Hardware bug workaround - drop to less reply queues */
- if (ioc->reply_queue_count > ioc->facts.MaxMSIxVectors) {
-  ioc->reply_queue_count = ioc->facts.MaxMSIxVectors;
-  reply_queue = 0;
-  list_for_each_entry(reply_q, &ioc->reply_queue_list, list) {
-   reply_q->msix_index = reply_queue;
-   if (++reply_queue == ioc->reply_queue_count)
-    reply_queue = 0;
-  }
- }
+ nr_cpus = num_online_cpus();
+ nr_msix = ioc->reply_queue_count = min(ioc->reply_queue_count,
+            ioc->facts.MaxMSIxVectors);
+ if (!nr_msix)
+  return;
 
- /* when there are more cpus than available msix vectors,
-  * then group cpus togeather on same irq
-  */
- if (ioc->cpu_count > ioc->msix_vector_count) {
-  grouping = ioc->cpu_count / ioc->msix_vector_count;
-  grouping_mod = ioc->cpu_count % ioc->msix_vector_count;
-  if (grouping < 2 || (grouping == 2 && !grouping_mod))
-   cpu_grouping = 2;
-  else if (grouping < 4 || (grouping == 4 && !grouping_mod))
-   cpu_grouping = 4;
-  else if (grouping < 8 || (grouping == 8 && !grouping_mod))
-   cpu_grouping = 8;
-  else
-   cpu_grouping = 16;
- } else
-  cpu_grouping = 0;
-
- loop = 0;
- reply_q = list_entry(ioc->reply_queue_list.next,
-      struct adapter_reply_queue, list);
- for_each_online_cpu(cpu_id) {
-  if (!cpu_grouping) {
-   ioc->cpu_msix_table[cpu_id] = reply_q->msix_index;
-   reply_q = list_entry(reply_q->list.next,
-       struct adapter_reply_queue, list);
-  } else {
-   if (loop < cpu_grouping) {
-    ioc->cpu_msix_table[cpu_id] =
-        reply_q->msix_index;
-    loop++;
-   } else {
-    reply_q = list_entry(reply_q->list.next,
-        struct adapter_reply_queue, list);
-    ioc->cpu_msix_table[cpu_id] =
-        reply_q->msix_index;
-    loop = 1;
-   }
+ cpu = cpumask_first(cpu_online_mask);
+
+ do {
+  unsigned int i, group = nr_cpus / nr_msix;
+
+  if (index < nr_cpus % nr_msix)
+   group++;
+
+  for (i = 0 ; i < group ; i++) {
+   ioc->cpu_msix_table[cpu] = index;
+   cpu = cpumask_next(cpu, cpu_online_mask);
   }
- }
+
+  index++;
+
+ } while (cpu < nr_cpus);
 }
 
 /**
-- 
1.7.1