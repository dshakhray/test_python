From e8b9f056ba296823910e802efe887436ae422265 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Wed, 3 Sep 2014 15:16:01 -0400
Subject: [ethernet] bna: Support TSO and partial checksum with non-accelerated vlans

Message-id: <1409757361-26781-14-git-send-email-ivecera@redhat.com>
Patchwork-id: 91173
O-Subject: [RHEL7.1 PATCH 13/13] bna: Support TSO and partial checksum with non-accelerated vlans.
Bugzilla: 1136912
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

BZ: #1136912

Upstream commit(s):
commit 1c53730a04fb651e35af0a12bd35f6a00481f53c
Author: Vlad Yasevich <vyasevich@gmail.com>
Date:   Mon Aug 25 10:34:50 2014 -0400

    bna: Support TSO and partial checksum with non-accelerated vlans.

    This device claims TSO and checksum support for vlans.  It also
    allows a user to control vlan acceleration offloading.  As such,
    it is possible to turn off vlan acceleration and configure a vlan
    which will continue to support TSO.

    In such situation the packet passed down the the device will contain
    a vlan header and skb->protocol will be set to ETH_P_8021Q.
    The device assumes that skb->protocol contains network protocol
    value and uses that value to set up TSO information.  This results
    in corrupted frames sent on the wire.

    This patch extract the protocol value correctly and corrects TSO
    and checksums for non-accelerated traffic.

    Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/brocade/bna/bnad.c b/drivers/net/ethernet/brocade/bna/bnad.c
index e1c3ce5..02054a7 100644
--- a/drivers/net/ethernet/brocade/bna/bnad.c
+++ b/drivers/net/ethernet/brocade/bna/bnad.c
@@ -2506,7 +2506,7 @@ bnad_tso_prepare(struct bnad *bnad, struct sk_buff *skb)
   * For TSO, the TCP checksum field is seeded with pseudo-header sum
   * excluding the length field.
   */
- if (skb->protocol == htons(ETH_P_IP)) {
+ if (vlan_get_protocol(skb) == htons(ETH_P_IP)) {
   struct iphdr *iph = ip_hdr(skb);
 
   /* Do we really need these? */
@@ -2870,12 +2870,13 @@ bnad_txq_wi_prepare(struct bnad *bnad, struct bna_tcb *tcb,
   }
 
   if (skb->ip_summed == CHECKSUM_PARTIAL) {
+   __be16 net_proto = vlan_get_protocol(skb);
    u8 proto = 0;
 
-   if (skb->protocol == htons(ETH_P_IP))
+   if (net_proto == htons(ETH_P_IP))
     proto = ip_hdr(skb)->protocol;
 #ifdef NETIF_F_IPV6_CSUM
-   else if (skb->protocol == htons(ETH_P_IPV6)) {
+   else if (net_proto == htons(ETH_P_IPV6)) {
     /* nexthdr may not be TCP immediately. */
     proto = ipv6_hdr(skb)->nexthdr;
    }
-- 
1.7.1