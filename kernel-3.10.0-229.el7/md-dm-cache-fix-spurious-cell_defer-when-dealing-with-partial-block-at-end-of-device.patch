From 3af3c319e8f19b3b7e25f3b68ac5efef4dc0aa68 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 28 Nov 2014 16:18:38 -0500
Subject: [md] dm-cache: fix spurious cell_defer when dealing with partial block at end of device

Message-id: <1417191518-16689-10-git-send-email-snitzer@redhat.com>
Patchwork-id: 101011
O-Subject: [RHEL7.1 PATCH 9/9] dm cache: fix spurious cell_defer when dealing with partial block at end of device
Bugzilla: 1165050
RH-Acked-by: Joe Thornber <thornber@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1165050

Upstream linux-dm.git commit b586694b0dc456ed3118c9b4247e2f72fa5a26c7
Author: Joe Thornber <ejt@redhat.com>
Date:   Fri Nov 28 09:48:25 2014 +0000

    dm cache: fix spurious cell_defer when dealing with partial block at end of device

    We never bother caching a partial block that is at the back end of the
    origin device.  No cell ever gets locked, but the calling code was
    assuming it was and trying to release it.

    Now the code only releases if the cell has been set to a non NULL
    value.

    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-cache-target.c b/drivers/md/dm-cache-target.c
index 2d08b86..c26803e 100644
--- a/drivers/md/dm-cache-target.c
+++ b/drivers/md/dm-cache-target.c
@@ -2684,11 +2684,11 @@ static int __cache_map(struct cache *cache, struct bio *bio, struct dm_bio_priso
 static int cache_map(struct dm_target *ti, struct bio *bio)
 {
  int r;
- struct dm_bio_prison_cell *cell;
+ struct dm_bio_prison_cell *cell = NULL;
  struct cache *cache = ti->private;
 
  r = __cache_map(cache, bio, &cell);
- if (r == DM_MAPIO_REMAPPED) {
+ if (r == DM_MAPIO_REMAPPED && cell) {
   inc_ds(cache, bio, cell);
   cell_defer(cache, cell, false);
  }
-- 
1.7.1