From d1aefcc8585ba9b60213b2c9d3b5c23bdf9d9666 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:27:19 -0400
Subject: [tools] perf/fs: Rename NAME_find_mountpoint() to NAME__mountpoint()

Message-id: <1408462094-14194-271-git-send-email-jolsa@redhat.com>
Patchwork-id: 88232
O-Subject: [PATCH RHEL7.1 BZ1131394 270/325] perf fs: Rename NAME_find_mountpoint() to NAME__mountpoint()
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit cf38fadade52df937521dd70d4437df1a9354cd9
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Tue Nov 5 14:48:50 2013 -0300

description
===========
Shorten it, "finding" it is an implementation detail, what callers want
is the pathname, not to ask for it to _always_ do the lookup.

And the existing implementation already caches it, i.e. it doesn't
"finds" it on every call.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/tests/parse-events.c b/tools/perf/tests/parse-events.c
index f47bf45..ef671cd 100644
--- a/tools/perf/tests/parse-events.c
+++ b/tools/perf/tests/parse-events.c
@@ -1456,7 +1456,7 @@ static int test_pmu(void)
  int ret;
 
  snprintf(path, PATH_MAX, "%s/bus/event_source/devices/cpu/format/",
-   sysfs_find_mountpoint());
+   sysfs__mountpoint());
 
  ret = stat(path, &st);
  if (ret)
@@ -1473,7 +1473,7 @@ static int test_pmu_events(void)
  int ret;
 
  snprintf(path, PATH_MAX, "%s/bus/event_source/devices/cpu/events/",
-   sysfs_find_mountpoint());
+   sysfs__mountpoint());
 
  ret = stat(path, &st);
  if (ret) {
diff --git a/tools/perf/util/cpumap.c b/tools/perf/util/cpumap.c
index 4af5a23..a9b48c4 100644
--- a/tools/perf/util/cpumap.c
+++ b/tools/perf/util/cpumap.c
@@ -216,7 +216,7 @@ int cpu_map__get_socket(struct cpu_map *map, int idx)
 
  cpu = map->map[idx];
 
- mnt = sysfs_find_mountpoint();
+ mnt = sysfs__mountpoint();
  if (!mnt)
   return -1;
 
@@ -279,7 +279,7 @@ int cpu_map__get_core(struct cpu_map *map, int idx)
 
  cpu = map->map[idx];
 
- mnt = sysfs_find_mountpoint();
+ mnt = sysfs__mountpoint();
  if (!mnt)
   return -1;
 
diff --git a/tools/perf/util/fs.c b/tools/perf/util/fs.c
index a2413e8..77bac4e 100644
--- a/tools/perf/util/fs.c
+++ b/tools/perf/util/fs.c
@@ -88,7 +88,7 @@ static const char *fs__get_mountpoint(struct fs *fs)
  return fs__read_mounts(fs) ? fs->path : NULL;
 }
 
-static const char *fs__find_mountpoint(int idx)
+static const char *fs__mountpoint(int idx)
 {
  struct fs *fs = &fs__entries[idx];
 
@@ -98,10 +98,10 @@ static const char *fs__find_mountpoint(int idx)
  return fs__get_mountpoint(fs);
 }
 
-#define FIND_MOUNTPOINT(name, idx)  \
-const char *name##_find_mountpoint(void) \
-{      \
- return fs__find_mountpoint(idx); \
+#define FS__MOUNTPOINT(name, idx) \
+const char *name##__mountpoint(void) \
+{     \
+ return fs__mountpoint(idx); \
 }
 
-FIND_MOUNTPOINT(sysfs, FS__SYSFS);
+FS__MOUNTPOINT(sysfs, FS__SYSFS);
diff --git a/tools/perf/util/fs.h b/tools/perf/util/fs.h
index 082edbd..a7561c8 100644
--- a/tools/perf/util/fs.h
+++ b/tools/perf/util/fs.h
@@ -1,6 +1,6 @@
 #ifndef __PERF_FS
 #define __PERF_FS
 
-const char *sysfs_find_mountpoint(void);
+const char *sysfs__mountpoint(void);
 
 #endif /* __PERF_FS */
diff --git a/tools/perf/util/pmu.c b/tools/perf/util/pmu.c
index 45b42df..c232d8d 100644
--- a/tools/perf/util/pmu.c
+++ b/tools/perf/util/pmu.c
@@ -77,9 +77,8 @@ static int pmu_format(const char *name, struct list_head *format)
 {
  struct stat st;
  char path[PATH_MAX];
- const char *sysfs;
+ const char *sysfs = sysfs__mountpoint();
 
- sysfs = sysfs_find_mountpoint();
  if (!sysfs)
   return -1;
 
@@ -166,9 +165,8 @@ static int pmu_aliases(const char *name, struct list_head *head)
 {
  struct stat st;
  char path[PATH_MAX];
- const char *sysfs;
+ const char *sysfs = sysfs__mountpoint();
 
- sysfs = sysfs_find_mountpoint();
  if (!sysfs)
   return -1;
 
@@ -212,11 +210,10 @@ static int pmu_type(const char *name, __u32 *type)
 {
  struct stat st;
  char path[PATH_MAX];
- const char *sysfs;
  FILE *file;
  int ret = 0;
+ const char *sysfs = sysfs__mountpoint();
 
- sysfs = sysfs_find_mountpoint();
  if (!sysfs)
   return -1;
 
@@ -241,11 +238,10 @@ static int pmu_type(const char *name, __u32 *type)
 static void pmu_read_sysfs(void)
 {
  char path[PATH_MAX];
- const char *sysfs;
  DIR *dir;
  struct dirent *dent;
+ const char *sysfs = sysfs__mountpoint();
 
- sysfs = sysfs_find_mountpoint();
  if (!sysfs)
   return;
 
@@ -270,11 +266,10 @@ static struct cpu_map *pmu_cpumask(const char *name)
 {
  struct stat st;
  char path[PATH_MAX];
- const char *sysfs;
  FILE *file;
  struct cpu_map *cpus;
+ const char *sysfs = sysfs__mountpoint();
 
- sysfs = sysfs_find_mountpoint();
  if (!sysfs)
   return NULL;
 
-- 
1.7.1