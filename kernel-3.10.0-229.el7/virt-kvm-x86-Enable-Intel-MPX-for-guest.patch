From 91c4cc51c9fa542aa0f472568ee9c91cc85f6a51 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:39:06 -0400
Subject: [virt] kvm/x86: Enable Intel MPX for guest

Message-id: <1406040016-3289-152-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86230
O-Subject: [RHEL7 PATCH v2 151/221] KVM: x86: Enable Intel MPX for guest
Bugzilla: 1076194 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Liu, Jinsong" <jinsong.liu@intel.com>

This patch enable Intel MPX feature to guest.

Signed-off-by: Xudong Hao <xudong.hao@intel.com>
Signed-off-by: Liu Jinsong <jinsong.liu@intel.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 390bd528ae1c14d0b7f5db8225984f98617b3357)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/cpuid.c b/arch/x86/kvm/cpuid.c
index 89906d3..2e959cb 100644
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@ -259,6 +259,8 @@ static inline int __do_cpuid_ent(struct kvm_cpuid_entry2 *entry, u32 function,
 #endif
  unsigned f_rdtscp = kvm_x86_ops->rdtscp_supported() ? F(RDTSCP) : 0;
  unsigned f_invpcid = kvm_x86_ops->invpcid_supported() ? F(INVPCID) : 0;
+ unsigned f_mpx = kvm_x86_ops->mpx_supported ?
+    (kvm_x86_ops->mpx_supported() ? F(MPX) : 0) : 0;
 
  /* cpuid 1.edx */
  const u32 kvm_supported_word0_x86_features =
@@ -306,7 +308,7 @@ static inline int __do_cpuid_ent(struct kvm_cpuid_entry2 *entry, u32 function,
  /* cpuid 7.0.ebx */
  const u32 kvm_supported_word9_x86_features =
   F(FSGSBASE) | F(BMI1) | F(HLE) | F(AVX2) | F(SMEP) |
-  F(BMI2) | F(ERMS) | f_invpcid | F(RTM) | F(RDSEED) |
+  F(BMI2) | F(ERMS) | f_invpcid | F(RTM) | f_mpx | F(RDSEED) |
   F(ADX);
 
  /* all calls to cpuid_count() should be made on the same cpu */
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 39f56cf..46dd031 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -618,6 +618,9 @@ int __kvm_set_xcr(struct kvm_vcpu *vcpu, u32 index, u64 xcr)
  if (xcr0 & ~valid_bits)
   return 1;
 
+ if ((!(xcr0 & XSTATE_BNDREGS)) != (!(xcr0 & XSTATE_BNDCSR)))
+  return 1;
+
  kvm_put_guest_xcr0(vcpu);
  vcpu->arch.xcr0 = xcr0;
 
diff --git a/arch/x86/kvm/x86.h b/arch/x86/kvm/x86.h
index dc16a82..8c97bac 100644
--- a/arch/x86/kvm/x86.h
+++ b/arch/x86/kvm/x86.h
@@ -122,7 +122,8 @@ int kvm_write_guest_virt_system(struct x86_emulate_ctxt *ctxt,
  gva_t addr, void *val, unsigned int bytes,
  struct x86_exception *exception);
 
-#define KVM_SUPPORTED_XCR0 (XSTATE_FP | XSTATE_SSE | XSTATE_YMM)
+#define KVM_SUPPORTED_XCR0     (XSTATE_FP | XSTATE_SSE | XSTATE_YMM \
+    | XSTATE_BNDREGS | XSTATE_BNDCSR)
 extern u64 host_xcr0;
 
 extern u64 kvm_supported_xcr0(void);
-- 
1.7.1