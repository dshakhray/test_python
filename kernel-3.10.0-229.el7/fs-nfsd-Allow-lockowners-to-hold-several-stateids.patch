From dfe0c88f2a14405efb2ee27a24edee6a6438b5c9 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:18:36 -0400
Subject: [fs] nfsd: Allow lockowners to hold several stateids

Message-id: <1410898849-22126-33-git-send-email-bfields@redhat.com>
Patchwork-id: 95720
O-Subject: [Patch RHEL7 032/165] nfsd: Allow lockowners to hold several stateids
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Jeff Layton <jlayton@primarydata.com>

A lockowner can have more than one lock stateid. For instance, if a
process has more than one file open and has locks on both, then the same
lockowner has more than one stateid associated with it. Change it so
that this reality is better reflected by the objects that nfsd uses.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Signed-off-by: Jeff Layton <jlayton@primarydata.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: c53530da4dfede2f080129b58a89ef907e5a0dfd
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index 137fdcc..9b6a4f3 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -3870,12 +3870,7 @@ nfsd4_free_lock_stateid(struct nfs4_ol_stateid *stp)
 
  if (check_for_locks(stp->st_file, lo))
   return nfserr_locks_held;
- /*
-  * Currently there's a 1-1 lock stateid<->lockowner
-  * correspondance, and we have to delete the lockowner when we
-  * delete the lock stateid:
-  */
- release_lockowner(lo);
+ release_lockowner_if_empty(lo);
  return nfs_ok;
 }
 
@@ -4397,6 +4392,19 @@ alloc_init_lock_stateid(struct nfs4_lockowner *lo, struct nfs4_file *fp, struct
  return stp;
 }
 
+static struct nfs4_ol_stateid *
+find_lock_stateid(struct nfs4_lockowner *lo, struct nfs4_file *fp)
+{
+ struct nfs4_ol_stateid *lst;
+
+ list_for_each_entry(lst, &lo->lo_owner.so_stateids, st_perstateowner) {
+  if (lst->st_file == fp)
+   return lst;
+ }
+ return NULL;
+}
+
+
 static int
 check_lock_length(u64 offset, u64 length)
 {
@@ -4426,25 +4434,28 @@ static __be32 lookup_or_create_lock_state(struct nfsd4_compound_state *cstate, s
 
  lo = find_lockowner_str(fi->fi_inode, &cl->cl_clientid,
     &lock->v.new.owner, nn);
- if (lo) {
-  if (!cstate->minorversion)
+ if (!lo) {
+  strhashval = ownerstr_hashval(cl->cl_clientid.cl_id,
+    &lock->v.new.owner);
+  lo = alloc_init_lock_stateowner(strhashval, cl, ost, lock);
+  if (lo == NULL)
+   return nfserr_jukebox;
+ } else {
+  /* with an existing lockowner, seqids must be the same */
+  if (!cstate->minorversion &&
+      lock->lk_new_lock_seqid != lo->lo_owner.so_seqid)
    return nfserr_bad_seqid;
-  /* XXX: a lockowner always has exactly one stateid: */
-  *lst = list_first_entry(&lo->lo_owner.so_stateids,
-    struct nfs4_ol_stateid, st_perstateowner);
-  return nfs_ok;
  }
- strhashval = ownerstr_hashval(cl->cl_clientid.cl_id,
-   &lock->v.new.owner);
- lo = alloc_init_lock_stateowner(strhashval, cl, ost, lock);
- if (lo == NULL)
-  return nfserr_jukebox;
- *lst = alloc_init_lock_stateid(lo, fi, ost);
+
+ *lst = find_lock_stateid(lo, fi);
  if (*lst == NULL) {
-  release_lockowner(lo);
-  return nfserr_jukebox;
+  *lst = alloc_init_lock_stateid(lo, fi, ost);
+  if (*lst == NULL) {
+   release_lockowner_if_empty(lo);
+   return nfserr_jukebox;
+  }
+  *new = true;
  }
- *new = true;
  return nfs_ok;
 }
 
@@ -4601,7 +4612,7 @@ nfsd4_lock(struct svc_rqst *rqstp, struct nfsd4_compound_state *cstate,
  }
 out:
  if (status && new_state)
-  release_lockowner(lock_sop);
+  release_lock_stateid(lock_stp);
  nfsd4_bump_seqid(cstate, status);
  if (!cstate->replay_owner)
   nfs4_unlock_state();
-- 
1.7.1