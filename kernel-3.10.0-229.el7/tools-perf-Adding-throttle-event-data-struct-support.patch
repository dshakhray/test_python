From f21032ca44306e7753688787d592800399116703 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:24:49 -0400
Subject: [tools] perf: Adding throttle event data struct support

Message-id: <1408462094-14194-121-git-send-email-jolsa@redhat.com>
Patchwork-id: 88088
O-Subject: [PATCH RHEL7.1 BZ1131394 120/325] perf tools: Adding throttle event data struct support
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit dd96c46b5c765a779d8c35cc7d1df7515b4c7baf
Author: Jiri Olsa <jolsa@redhat.com>
Date: Sun Sep 1 12:36:15 2013 +0200

description
===========
Moving 'struct throttle_event' out of python code and making it global
as any other event.

There's no usage of throttling events in any perf commands so far
(besides python support), but we'll need this event data backup for
upcoming test.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
index 17d9e16..9b7d4d3 100644
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@ -61,6 +61,12 @@ struct read_event {
  u64 id;
 };
 
+struct throttle_event {
+ struct perf_event_header header;
+ u64 time;
+ u64 id;
+ u64 stream_id;
+};
 
 #define PERF_SAMPLE_MASK    \
  (PERF_SAMPLE_IP | PERF_SAMPLE_TID |  \
@@ -178,6 +184,7 @@ union perf_event {
  struct fork_event  fork;
  struct lost_event  lost;
  struct read_event  read;
+ struct throttle_event  throttle;
  struct sample_event  sample;
  struct attr_event  attr;
  struct event_type_event  event_type;
diff --git a/tools/perf/util/python.c b/tools/perf/util/python.c
index 07b0fd5..4bf8ace 100644
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@ -33,13 +33,6 @@ int eprintf(int level, const char *fmt, ...)
 # define PyVarObject_HEAD_INIT(type, size) PyObject_HEAD_INIT(type) size,
 #endif
 
-struct throttle_event {
- struct perf_event_header header;
- u64    time;
- u64    id;
- u64    stream_id;
-};
-
 PyMODINIT_FUNC initperf(void);
 
 #define member_def(type, member, ptype, help) \
diff --git a/tools/perf/util/session.c b/tools/perf/util/session.c
index dc7b778..d974208 100644
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@ -397,6 +397,17 @@ static void perf_event__read_swap(union perf_event *event, bool sample_id_all)
   swap_sample_id_all(event, &event->read + 1);
 }
 
+static void perf_event__throttle_swap(union perf_event *event,
+          bool sample_id_all)
+{
+ event->throttle.time   = bswap_64(event->throttle.time);
+ event->throttle.id   = bswap_64(event->throttle.id);
+ event->throttle.stream_id = bswap_64(event->throttle.stream_id);
+
+ if (sample_id_all)
+  swap_sample_id_all(event, &event->throttle + 1);
+}
+
 static u8 revbyte(u8 b)
 {
  int rev = (b >> 4) | ((b & 0xf) << 4);
@@ -482,6 +493,8 @@ static perf_event__swap_op perf_event__swap_ops[] = {
  [PERF_RECORD_EXIT]    = perf_event__task_swap,
  [PERF_RECORD_LOST]    = perf_event__all64_swap,
  [PERF_RECORD_READ]    = perf_event__read_swap,
+ [PERF_RECORD_THROTTLE]    = perf_event__throttle_swap,
+ [PERF_RECORD_UNTHROTTLE]   = perf_event__throttle_swap,
  [PERF_RECORD_SAMPLE]    = perf_event__all64_swap,
  [PERF_RECORD_HEADER_ATTR]   = perf_event__hdr_attr_swap,
  [PERF_RECORD_HEADER_EVENT_TYPE]   = perf_event__event_type_swap,
-- 
1.7.1