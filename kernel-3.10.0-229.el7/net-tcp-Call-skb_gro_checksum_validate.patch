From 33a7fc367dd7b87764b905c032aa757ee5c923e4 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:15:06 -0400
Subject: [net] tcp: Call skb_gro_checksum_validate

Message-id: <1409652920-431-44-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90153
O-Subject: [PATCH 43/57] [RHEL7.1 net] tcp: Call skb_gro_checksum_validate
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

commit 149d0774a729497c6a876260d3884826088724b6
Author: Tom Herbert <therbert@google.com>
Date:   Fri Aug 22 13:34:30 2014 -0700

    tcp: Call skb_gro_checksum_validate

    In tcp[64]_gro_receive call skb_gro_checksum_validate to validate TCP
    checksum in the gro context.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/tcp_offload.c b/net/ipv4/tcp_offload.c
index 4e86c59..2be7fcf 100644
--- a/net/ipv4/tcp_offload.c
+++ b/net/ipv4/tcp_offload.c
@@ -270,35 +270,14 @@ static int tcp_v4_gso_send_check(struct sk_buff *skb)
 
 static struct sk_buff **tcp4_gro_receive(struct sk_buff **head, struct sk_buff *skb)
 {
- /* Use the IP hdr immediately proceeding for this transport */
- const struct iphdr *iph = skb_gro_network_header(skb);
- __wsum wsum;
-
  /* Don't bother verifying checksum if we're going to flush anyway. */
- if (NAPI_GRO_CB(skb)->flush)
-  goto skip_csum;
-
- wsum = NAPI_GRO_CB(skb)->csum;
-
- switch (skb->ip_summed) {
- case CHECKSUM_NONE:
-  wsum = skb_checksum(skb, skb_gro_offset(skb), skb_gro_len(skb),
-        0);
-
-  /* fall through */
-
- case CHECKSUM_COMPLETE:
-  if (!tcp_v4_check(skb_gro_len(skb), iph->saddr, iph->daddr,
-      wsum)) {
-   skb->ip_summed = CHECKSUM_UNNECESSARY;
-   break;
-  }
-
+ if (!NAPI_GRO_CB(skb)->flush &&
+     skb_gro_checksum_validate(skb, IPPROTO_TCP,
+          inet_gro_compute_pseudo)) {
   NAPI_GRO_CB(skb)->flush = 1;
   return NULL;
  }
 
-skip_csum:
  return tcp_gro_receive(head, skb);
 }
 
diff --git a/net/ipv6/tcpv6_offload.c b/net/ipv6/tcpv6_offload.c
index 8517d3c..fea6e74 100644
--- a/net/ipv6/tcpv6_offload.c
+++ b/net/ipv6/tcpv6_offload.c
@@ -35,34 +35,14 @@ static int tcp_v6_gso_send_check(struct sk_buff *skb)
 static struct sk_buff **tcp6_gro_receive(struct sk_buff **head,
       struct sk_buff *skb)
 {
- const struct ipv6hdr *iph = skb_gro_network_header(skb);
- __wsum wsum;
-
  /* Don't bother verifying checksum if we're going to flush anyway. */
- if (NAPI_GRO_CB(skb)->flush)
-  goto skip_csum;
-
- wsum = NAPI_GRO_CB(skb)->csum;
-
- switch (skb->ip_summed) {
- case CHECKSUM_NONE:
-  wsum = skb_checksum(skb, skb_gro_offset(skb), skb_gro_len(skb),
-        wsum);
-
-  /* fall through */
-
- case CHECKSUM_COMPLETE:
-  if (!tcp_v6_check(skb_gro_len(skb), &iph->saddr, &iph->daddr,
-      wsum)) {
-   skb->ip_summed = CHECKSUM_UNNECESSARY;
-   break;
-  }
-
+ if (!NAPI_GRO_CB(skb)->flush &&
+     skb_gro_checksum_validate(skb, IPPROTO_TCP,
+          ip6_gro_compute_pseudo)) {
   NAPI_GRO_CB(skb)->flush = 1;
   return NULL;
  }
 
-skip_csum:
  return tcp_gro_receive(head, skb);
 }
 
-- 
1.7.1