From a7b9255d620cf66c2d1ef20e7360838e4c4fbdd9 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 12:29:13 -0400
Subject: [acpi] hotplug/pci: Rework the handling of eject requests

Message-id: <1411129776-21656-39-git-send-email-prarit@redhat.com>
Patchwork-id: 96356
O-Subject: [RHEL7.1 PATCH BZ 1141846 38/61] ACPI / hotplug / PCI: Rework the handling of eject requests
Bugzilla: 1141846
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit dd2151be28b9ed734fc5738ac675ed7e234847e3
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Feb 4 00:44:02 2014 +0100

    ACPI / hotplug / PCI: Rework the handling of eject requests

    To avoid the need to install a hotplug notify handler for each ACPI
    namespace node representing a device and having a matching scan
    handler, move the check whether or not the ejection of the given
    device is enabled through its scan handler from acpi_hotplug_notify_cb()
    to acpi_generic_hotplug_event().  Also, move the execution of
    ACPI_OST_SC_EJECT_IN_PROGRESS _OST to acpi_generic_hotplug_event(),
    because in acpi_hotplug_notify_cb() or in acpi_eject_store() we really
    don't know whether or not the eject is going to be in progress (for
    example, acpi_hotplug_execute() may still fail without queuing up the
    work item).

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Stefan Assmann <sassmann@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 0f6fa58..ed8162f 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -400,6 +400,12 @@ static int acpi_generic_hotplug_event(struct acpi_device *adev, u32 type)
   return acpi_scan_device_check(adev);
  case ACPI_NOTIFY_EJECT_REQUEST:
  case ACPI_OST_EC_OSPM_EJECT:
+  if (adev->handler && !adev->handler->hotplug.enabled) {
+   dev_info(&adev->dev, "Eject disabled\n");
+   return -EPERM;
+  }
+  acpi_evaluate_hotplug_ost(adev->handle, ACPI_NOTIFY_EJECT_REQUEST,
+       ACPI_OST_SC_EJECT_IN_PROGRESS, NULL);
   return acpi_scan_hot_remove(adev);
  }
  return -EINVAL;
@@ -424,6 +430,10 @@ static void acpi_device_hotplug(void *data, u32 src)
 
  if (adev->flags.hotplug_notify) {
   error = acpi_generic_hotplug_event(adev, src);
+  if (error == -EPERM) {
+   ost_code = ACPI_OST_SC_EJECT_NOT_SUPPORTED;
+   goto err_out;
+  }
  } else {
   int (*event)(struct acpi_device *, u32);
 
@@ -472,13 +482,6 @@ static void acpi_hotplug_notify_cb(acpi_handle handle, u32 type, void *data)
 
  case ACPI_NOTIFY_EJECT_REQUEST:
   acpi_handle_debug(handle, "ACPI_NOTIFY_EJECT_REQUEST event\n");
-  if (!adev->handler && !handler->hotplug.enabled) {
-   acpi_handle_err(handle, "Eject disabled\n");
-   ost_code = ACPI_OST_SC_EJECT_NOT_SUPPORTED;
-   goto out;
-  }
-  acpi_evaluate_hotplug_ost(handle, ACPI_NOTIFY_EJECT_REQUEST,
-       ACPI_OST_SC_EJECT_IN_PROGRESS, NULL);
   break;
 
  case ACPI_NOTIFY_DEVICE_WAKE:
@@ -573,8 +576,6 @@ acpi_eject_store(struct device *d, struct device_attribute *attr,
  if (ACPI_FAILURE(status) || !acpi_device->flags.ejectable)
   return -ENODEV;
 
- acpi_evaluate_hotplug_ost(acpi_device->handle, ACPI_OST_EC_OSPM_EJECT,
-      ACPI_OST_SC_EJECT_IN_PROGRESS, NULL);
  get_device(&acpi_device->dev);
  status = acpi_hotplug_execute(acpi_device_hotplug, acpi_device,
           ACPI_OST_EC_OSPM_EJECT);
-- 
1.7.1