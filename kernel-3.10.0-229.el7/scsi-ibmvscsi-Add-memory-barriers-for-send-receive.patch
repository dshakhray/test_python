From f9bdbd2efc9c3b67b78d7ec27319c41f879c56ff Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Mon, 27 Oct 2014 19:36:26 -0400
Subject: [scsi] ibmvscsi: Add memory barriers for send / receive

Message-id: <1414438587-32612-2-git-send-email-gduarte@redhat.com>
Patchwork-id: 98482
O-Subject: [RHEL7.1 PATCH BZ 1105496 1/2] ibmvscsi: Add memory barriers for send / receive
Bugzilla: 1105496
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1105496
Upstream Status: 7114aae02742d6b5c5a0d39a41deb61d415d3717

commit 7114aae02742d6b5c5a0d39a41deb61d415d3717
Author: Brian King <brking@linux.vnet.ibm.com>
Date:   Fri May 23 10:52:11 2014 -0500

    ibmvscsi: Add memory barriers for send / receive

    Add a memory barrier prior to sending a new command to the VIOS
    to ensure the VIOS does not receive stale data in the command buffer.
    Also add a memory barrier when processing the CRQ for completed commands.

    Signed-off-by: Brian King <brking@linux.vnet.ibm.com>
    Acked-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Christoph Hellwig <hch@lst.de>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/ibmvscsi/ibmvscsi.c b/drivers/scsi/ibmvscsi/ibmvscsi.c
index fa76440..fb7b663 100644
--- a/drivers/scsi/ibmvscsi/ibmvscsi.c
+++ b/drivers/scsi/ibmvscsi/ibmvscsi.c
@@ -185,6 +185,11 @@ static struct viosrp_crq *crq_queue_next_crq(struct crq_queue *queue)
  if (crq->valid & 0x80) {
   if (++queue->cur == queue->size)
    queue->cur = 0;
+
+  /* Ensure the read of the valid bit occurs before reading any
+   * other bits of the CRQ entry
+   */
+  rmb();
  } else
   crq = NULL;
  spin_unlock_irqrestore(&queue->lock, flags);
@@ -203,6 +208,11 @@ static int ibmvscsi_send_crq(struct ibmvscsi_host_data *hostdata,
 {
  struct vio_dev *vdev = to_vio_dev(hostdata->dev);
 
+ /*
+  * Ensure the command buffer is flushed to memory before handing it
+  * over to the VIOS to prevent it from fetching any stale data.
+  */
+ mb();
  return plpar_hcall_norets(H_SEND_CRQ, vdev->unit_address, word1, word2);
 }
 
-- 
1.7.1