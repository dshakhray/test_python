From acd80767445002e1cd887be703a6f5b526097cf8 Mon Sep 17 00:00:00 2001
From: Andy Grover <agrover@redhat.com>
Date: Fri, 5 Sep 2014 16:36:00 -0400
Subject: [infiniband] ulp/isert: Fix iscsit_accept_np and rdma_cm racy flow

Message-id: <1409934989-29941-3-git-send-email-agrover@redhat.com>
Patchwork-id: 91490
O-Subject: [RHEL7.1 PATCH e-stor 02/31] Target/iser: Fix iscsit_accept_np and rdma_cm racy flow
Bugzilla: 1129387
RH-Acked-by: Chris Leech <cleech@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

From: Sagi Grimberg <sagig@mellanox.com>

RDMA CM and iSCSI target flows are asynchronous and completely
uncorrelated. Relying on the fact that iscsi_accept_np will be called
after CM connection request event and will wait for it is a mistake.

When attempting to login to a few targets this flow is racy and
unpredictable, but for parallel login to dozens of targets will
race and hang every time.

The correct synchronizing mechanism in this case is pending on
a semaphore rather than a wait_for_event. We keep the pending
interruptible for iscsi_np cleanup stage.

(Squash patch to remove dead code into parent - nab)

Reported-by: Slava Shwartsman <valyushash@gmail.com>
Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
Cc: stable@vger.kernel.org # 3.10+
Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/isert/ib_isert.c b/drivers/infiniband/ulp/isert/ib_isert.c
index 2b95493..3d8fe41 100644
--- a/drivers/infiniband/ulp/isert/ib_isert.c
+++ b/drivers/infiniband/ulp/isert/ib_isert.c
@@ -27,6 +27,7 @@
 #include <target/target_core_base.h>
 #include <target/target_core_fabric.h>
 #include <target/iscsi/iscsi_transport.h>
+#include <linux/semaphore.h>
 
 #include "isert_proto.h"
 #include "ib_isert.h"
@@ -466,8 +467,8 @@ isert_connect_request(struct rdma_cm_id *cma_id, struct rdma_cm_event *event)
  list_add_tail(&isert_conn->conn_accept_node, &isert_np->np_accept_list);
  mutex_unlock(&isert_np->np_accept_mutex);
 
- pr_debug("isert_connect_request() waking up np_accept_wq: %p\n", np);
- wake_up(&isert_np->np_accept_wq);
+ pr_debug("isert_connect_request() up np_sem np: %p\n", np);
+ up(&isert_np->np_sem);
  return 0;
 
 out_conn_dev:
@@ -2022,7 +2023,7 @@ isert_setup_np(struct iscsi_np *np,
   pr_err("Unable to allocate struct isert_np\n");
   return -ENOMEM;
  }
- init_waitqueue_head(&isert_np->np_accept_wq);
+ sema_init(&isert_np->np_sem, 0);
  mutex_init(&isert_np->np_accept_mutex);
  INIT_LIST_HEAD(&isert_np->np_accept_list);
  init_completion(&isert_np->np_login_comp);
@@ -2071,18 +2072,6 @@ out:
 }
 
 static int
-isert_check_accept_queue(struct isert_np *isert_np)
-{
- int empty;
-
- mutex_lock(&isert_np->np_accept_mutex);
- empty = list_empty(&isert_np->np_accept_list);
- mutex_unlock(&isert_np->np_accept_mutex);
-
- return empty;
-}
-
-static int
 isert_rdma_accept(struct isert_conn *isert_conn)
 {
  struct rdma_cm_id *cm_id = isert_conn->conn_cm_id;
@@ -2166,16 +2155,14 @@ isert_accept_np(struct iscsi_np *np, struct iscsi_conn *conn)
  int max_accept = 0, ret;
 
 accept_wait:
- ret = wait_event_interruptible(isert_np->np_accept_wq,
-   !isert_check_accept_queue(isert_np) ||
-   np->np_thread_state == ISCSI_NP_THREAD_RESET);
+ ret = down_interruptible(&isert_np->np_sem);
  if (max_accept > 5)
   return -ENODEV;
 
  spin_lock_bh(&np->np_thread_lock);
  if (np->np_thread_state == ISCSI_NP_THREAD_RESET) {
   spin_unlock_bh(&np->np_thread_lock);
-  pr_err("ISCSI_NP_THREAD_RESET for isert_accept_np\n");
+  pr_debug("ISCSI_NP_THREAD_RESET for isert_accept_np\n");
   return -ENODEV;
  }
  spin_unlock_bh(&np->np_thread_lock);
diff --git a/drivers/infiniband/ulp/isert/ib_isert.h b/drivers/infiniband/ulp/isert/ib_isert.h
index 5795c82..3941be5 100644
--- a/drivers/infiniband/ulp/isert/ib_isert.h
+++ b/drivers/infiniband/ulp/isert/ib_isert.h
@@ -131,7 +131,7 @@ struct isert_device {
 };
 
 struct isert_np {
- wait_queue_head_t np_accept_wq;
+ struct semaphore np_sem;
  struct rdma_cm_id *np_cm_id;
  struct mutex  np_accept_mutex;
  struct list_head np_accept_list;
-- 
1.7.1