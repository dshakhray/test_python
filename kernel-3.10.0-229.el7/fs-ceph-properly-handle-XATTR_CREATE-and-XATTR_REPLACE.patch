From 34aabc67d3a717f41e753e5b9b1eb0f756c33868 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:24:19 -0400
Subject: [fs] ceph: properly handle XATTR_CREATE and XATTR_REPLACE
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-153-git-send-email-sweil@redhat.com>
Patchwork-id: 89618
O-Subject: [PATCH 152/303] ceph: properly handle XATTR_CREATE and XATTR_REPLACE
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Yan, Zheng" <zheng.z.yan@intel.com>

return -EEXIST if XATTR_CREATE is set and xattr alread exists.
return -ENODATA if XATTR_REPLACE is set but xattr does not exist.

Signed-off-by: Yan, Zheng <zheng.z.yan@intel.com>
(cherry picked from commit fbc0b970ddfab4b35dad27ebaae712af680bdc7e)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/xattr.c b/fs/ceph/xattr.c
index be661d8..19ac346 100644
--- a/fs/ceph/xattr.c
+++ b/fs/ceph/xattr.c
@@ -305,8 +305,7 @@ static struct ceph_vxattr *ceph_match_vxattr(struct inode *inode,
 static int __set_xattr(struct ceph_inode_info *ci,
       const char *name, int name_len,
       const char *val, int val_len,
-      int dirty,
-      int should_free_name, int should_free_val,
+      int flags, int update_xattr,
       struct ceph_inode_xattr **newxattr)
 {
  struct rb_node **p;
@@ -335,12 +334,25 @@ static int __set_xattr(struct ceph_inode_info *ci,
   xattr = NULL;
  }
 
+ if (update_xattr) {
+  int err = 0;
+  if (xattr && (flags & XATTR_CREATE))
+   err = -EEXIST;
+  else if (!xattr && (flags & XATTR_REPLACE))
+   err = -ENODATA;
+  if (err) {
+   kfree(name);
+   kfree(val);
+   return err;
+  }
+ }
+
  if (!xattr) {
   new = 1;
   xattr = *newxattr;
   xattr->name = name;
   xattr->name_len = name_len;
-  xattr->should_free_name = should_free_name;
+  xattr->should_free_name = update_xattr;
 
   ci->i_xattrs.count++;
   dout("__set_xattr count=%d\n", ci->i_xattrs.count);
@@ -350,7 +362,7 @@ static int __set_xattr(struct ceph_inode_info *ci,
   if (xattr->should_free_val)
    kfree((void *)xattr->val);
 
-  if (should_free_name) {
+  if (update_xattr) {
    kfree((void *)name);
    name = xattr->name;
   }
@@ -365,8 +377,8 @@ static int __set_xattr(struct ceph_inode_info *ci,
   xattr->val = "";
 
  xattr->val_len = val_len;
- xattr->dirty = dirty;
- xattr->should_free_val = (val && should_free_val);
+ xattr->dirty = update_xattr;
+ xattr->should_free_val = (val && update_xattr);
 
  if (new) {
   rb_link_node(&xattr->node, parent, p);
@@ -574,7 +586,7 @@ start:
    p += len;
 
    err = __set_xattr(ci, name, namelen, val, len,
-       0, 0, 0, &xattrs[numattr]);
+       0, 0, &xattrs[numattr]);
 
    if (err < 0)
     goto bad;
@@ -871,7 +883,7 @@ int ceph_setxattr(struct dentry *dentry, const char *name,
  struct ceph_inode_info *ci = ceph_inode(inode);
  int issued;
  int err;
- int dirty;
+ int dirty = 0;
  int name_len = strlen(name);
  int val_len = size;
  char *newname = NULL;
@@ -936,11 +948,13 @@ retry:
  }
 
  err = __set_xattr(ci, newname, name_len, newval,
-     val_len, 1, 1, 1, &xattr);
+     val_len, flags, 1, &xattr);
 
- dirty = __ceph_mark_dirty_caps(ci, CEPH_CAP_XATTR_EXCL);
- ci->i_xattrs.dirty = true;
- inode->i_ctime = CURRENT_TIME;
+ if (!err) {
+  dirty = __ceph_mark_dirty_caps(ci, CEPH_CAP_XATTR_EXCL);
+  ci->i_xattrs.dirty = true;
+  inode->i_ctime = CURRENT_TIME;
+ }
 
  spin_unlock(&ci->i_ceph_lock);
  if (dirty)
-- 
1.7.1