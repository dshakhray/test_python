From 78c51e125d7e2f7449b879d341447472f4a33bd3 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:29 -0400
Subject: [tools] lib/traceevent: Use helper trace-seq in print functions like kernel does

Message-id: <1408953210-26343-22-git-send-email-jolsa@redhat.com>
Patchwork-id: 88738
O-Subject: [PATCH RHEL7.1 BZ1133083 021/322] tools lib traceevent: Use helper trace-seq in print functions like kernel does
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 12e55569a244996a23cb401e8116e5a060b664f0
Author: Steven Rostedt <rostedt@goodmis.org>
Date: Tue Nov 19 18:29:37 2013 -0500

description
===========
Jiri Olsa reported that his plugin for scsi was chopping off part of the
output. Investigating this, I found that Jiri used the same functions as
what is in the kernel, which adds the following:

 trace_seq_putc(p, 0);

This adds a '\0' to the output string. The reason this works in the
kernel is that the "p" that is passed to the function helper is a
temporary trace_seq. But in the libtraceevent library, it's the pointer
to the trace_seq used to output. By adding the '\0', it truncates the
line and nothing added after that will be printed.

We can solve this in two ways. One is to have the helper functions for
the library not add the unnecessary '\0'. The other is to change the
library to also use a helper trace_seq structure that gets copied to the
main trace_seq just like the kernel does.

The latter allows the helper functions in the plugins to be the same as
the kernel, which is the better solution.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/lib/traceevent/event-parse.c b/tools/lib/traceevent/event-parse.c
index 217c82e..900fca0 100644
--- a/tools/lib/traceevent/event-parse.c
+++ b/tools/lib/traceevent/event-parse.c
@@ -4099,6 +4099,7 @@ static void pretty_print(struct trace_seq *s, void *data, int size, struct event
  unsigned long long val;
  struct func_map *func;
  const char *saveptr;
+ struct trace_seq p;
  char *bprint_fmt = NULL;
  char format[32];
  int show_func;
@@ -4306,8 +4307,12 @@ static void pretty_print(struct trace_seq *s, void *data, int size, struct event
     format[len] = 0;
     if (!len_as_arg)
      len_arg = -1;
-    print_str_arg(s, data, size, event,
+    /* Use helper trace_seq */
+    trace_seq_init(&p);
+    print_str_arg(&p, data, size, event,
            format, len_arg, arg);
+    trace_seq_terminate(&p);
+    trace_seq_puts(s, p.buffer);
     arg = arg->next;
     break;
    default:
-- 
1.7.1