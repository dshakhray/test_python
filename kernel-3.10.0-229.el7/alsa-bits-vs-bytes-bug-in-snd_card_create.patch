From 290b1e1a2cffbd20f6152c822eff3577777115ed Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:14:26 -0400
Subject: [alsa] bits vs bytes bug in snd_card_create()

Message-id: <140972823573-43-patchset-jkysela@redhat.com>
Patchwork-id: 90743
O-Subject: [RHEL 7.1 PATCH 042/442] ALSA: bits vs bytes bug in snd_card_create()
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

The test here is intended intended to prevent shift wrapping bugs when
we do "1U << idx2".  We should consider the number of bits in a u32
instead of the number of bytes.

[fix another chunk similarly by tiwai]

Fixes: 7bb2491b35a2 ('ALSA: Add kconfig to specify the max card numbers')
Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: 4c3773eda49c872a3034382f8ec3080002e715bf)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/core/init.c b/sound/core/init.c
index 1351f22..e3c93cd 100644
--- a/sound/core/init.c
+++ b/sound/core/init.c
@@ -170,7 +170,7 @@ int snd_card_create(int idx, const char *xid,
  if (idx < 0) {
   for (idx2 = 0; idx2 < SNDRV_CARDS; idx2++) {
    /* idx == -1 == 0xffff means: take any free slot */
-   if (idx2 < sizeof(int) && !(idx & (1U << idx2)))
+   if (idx2 < 32 && !(idx & (1U << idx2)))
     continue;
    if (!test_bit(idx2, snd_cards_lock)) {
     if (module_slot_match(module, idx2)) {
@@ -183,7 +183,7 @@ int snd_card_create(int idx, const char *xid,
  if (idx < 0) {
   for (idx2 = 0; idx2 < SNDRV_CARDS; idx2++) {
    /* idx == -1 == 0xffff means: take any free slot */
-   if (idx2 < sizeof(int) && !(idx & (1U << idx2)))
+   if (idx2 < 32 && !(idx & (1U << idx2)))
     continue;
    if (!test_bit(idx2, snd_cards_lock)) {
     if (!slots[idx2] || !*slots[idx2]) {
-- 
1.7.1