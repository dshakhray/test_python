From ae43779e30a9482bda97e8d37f825d53b3d93fef Mon Sep 17 00:00:00 2001
From: Stanislaw Gruszka <sgruszka@redhat.com>
Date: Wed, 10 Dec 2014 10:29:32 -0500
Subject: [wireless] mac80211: fix typo in starting baserate for rts_cts_rate_idx

Message-id: <1418207389-7899-19-git-send-email-sgruszka@redhat.com>
Patchwork-id: 101590
O-Subject: [RHEL7.1 PATCH 18/35] mac80211: fix typo in starting baserate for rts_cts_rate_idx
Bugzilla: 1155538
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: John Greene <jogreene@redhat.com>

From: Karl Beldan <karl.beldan@rivierawaves.com>

BZ#1155538

commit c7abf25af0f41be4b50d44c5b185d52eea360cb8 upstream.

It affects non-(V)HT rates and can lead to selecting an rts_cts rate
that is not a basic rate or way superior to the reference rate (ATM
rates[0] used for the 1st attempt of the protected frame data).

E.g, assuming drivers register growing (bitrate) sorted tables of
ieee80211_rate-s, having :
- rates[0].idx == d'2 and basic_rates == b'10100
will select rts_cts idx b'10011 & ~d'(BIT(2)-1), i.e. 1, likewise
- rates[0].idx == d'2 and basic_rates == b'10001
will select rts_cts idx b'10000
The first is not a basic rate and the second is > rates[0].

Also, wrt severity of the addressed misbehavior, ATM we only have one
rts_cts_rate_idx rather than one per rate table entry, so this idx might
still point to bitrates > rates[1..MAX_RATES].

Fixes: 5253ffb8c9e1 ("mac80211: always pick a basic rate to tx RTS/CTS for pre-HT rates")
Signed-off-by: Karl Beldan <karl.beldan@rivierawaves.com>
Signed-off-by: Johannes Berg <johannes.berg@intel.com>
Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

Brew:
https://brewweb.devel.redhat.com/taskinfo?taskID=8330268

Testing:
Tested on Intel, Atheros and Ralink hardware.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/mac80211/rate.c b/net/mac80211/rate.c
index 8fdadfd..6081329 100644
--- a/net/mac80211/rate.c
+++ b/net/mac80211/rate.c
@@ -448,7 +448,7 @@ static void rate_fixup_ratelist(struct ieee80211_vif *vif,
   */
  if (!(rates[0].flags & IEEE80211_TX_RC_MCS)) {
   u32 basic_rates = vif->bss_conf.basic_rates;
-  s8 baserate = basic_rates ? ffs(basic_rates - 1) : 0;
+  s8 baserate = basic_rates ? ffs(basic_rates) - 1 : 0;
 
   rate = &sband->bitrates[rates[0].idx];
 
-- 
1.7.1