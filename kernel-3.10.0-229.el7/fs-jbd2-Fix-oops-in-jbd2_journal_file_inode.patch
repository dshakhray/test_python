From 6ccd30a8001886d3d1887541ac83dc6e6a10e37b Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Tue, 21 Oct 2014 13:26:47 -0400
Subject: [fs] jbd2: Fix oops in jbd2_journal_file_inode()

Message-id: <1413898007-15450-16-git-send-email-lczerner@redhat.com>
Patchwork-id: 97893
O-Subject: [RHEL 7.1 PATCH v2 15/15] jbd2: Fix oops in jbd2_journal_file_inode()
Bugzilla: 1144326
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1144326
https://bugzilla.redhat.com/show_bug.cgi?id=1144326

BREW 8095073
https://brewweb.devel.redhat.com/taskinfo?taskID=8095073

Upstream commit a361293f5fedea0016a10599f409631a15d47ee7

 Commit 0713ed0cde76438d05849f1537d3aab46e099475 added
 jbd2_journal_file_inode() call into ext4_block_zero_page_range().
 However that function gets called from truncate path and thus inode
 needn't have jinode attached - that happens in ext4_file_open() but
 the file needn't be ever open since mount. Calling
 jbd2_journal_file_inode() without jinode attached results in the oops.

 We fix the problem by attaching jinode to inode also in ext4_truncate()
 and ext4_punch_hole() when we are going to zero out partial blocks.

 Reported-by: majianpeng <majianpeng@gmail.com>
 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index b5d4899..3d0474c 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2088,6 +2088,7 @@ extern int  ext4_sync_inode(handle_t *, struct inode *);
 extern void ext4_dirty_inode(struct inode *, int);
 extern int ext4_change_inode_journal_flag(struct inode *, int);
 extern int ext4_get_inode_loc(struct inode *, struct ext4_iloc *);
+extern int ext4_inode_attach_jinode(struct inode *inode);
 extern int ext4_can_truncate(struct inode *inode);
 extern void ext4_truncate(struct inode *);
 extern int ext4_punch_hole(struct file *file, loff_t offset, loff_t length);
diff --git a/fs/ext4/file.c b/fs/ext4/file.c
index b19f0a4..582ff74 100644
--- a/fs/ext4/file.c
+++ b/fs/ext4/file.c
@@ -219,7 +219,6 @@ static int ext4_file_open(struct inode * inode, struct file * filp)
 {
  struct super_block *sb = inode->i_sb;
  struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
- struct ext4_inode_info *ei = EXT4_I(inode);
  struct vfsmount *mnt = filp->f_path.mnt;
  struct path path;
  char buf[64], *cp;
@@ -259,22 +258,10 @@ static int ext4_file_open(struct inode * inode, struct file * filp)
   * Set up the jbd2_inode if we are opening the inode for
   * writing and the journal is present
   */
- if (sbi->s_journal && !ei->jinode && (filp->f_mode & FMODE_WRITE)) {
-  struct jbd2_inode *jinode = jbd2_alloc_inode(GFP_KERNEL);
-
-  spin_lock(&inode->i_lock);
-  if (!ei->jinode) {
-   if (!jinode) {
-    spin_unlock(&inode->i_lock);
-    return -ENOMEM;
-   }
-   ei->jinode = jinode;
-   jbd2_journal_init_jbd_inode(ei->jinode, inode);
-   jinode = NULL;
-  }
-  spin_unlock(&inode->i_lock);
-  if (unlikely(jinode != NULL))
-   jbd2_free_inode(jinode);
+ if (filp->f_mode & FMODE_WRITE) {
+  int ret = ext4_inode_attach_jinode(inode);
+  if (ret < 0)
+   return ret;
  }
  return dquot_file_open(inode, filp);
 }
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index a1b452f..0504c4a 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -3607,6 +3607,18 @@ int ext4_punch_hole(struct file *file, loff_t offset, loff_t length)
      offset;
  }
 
+ if (offset & (sb->s_blocksize - 1) ||
+     (offset + length) & (sb->s_blocksize - 1)) {
+  /*
+   * Attach jinode to inode for jbd2 if we do any zeroing of
+   * partial block
+   */
+  ret = ext4_inode_attach_jinode(inode);
+  if (ret < 0)
+   goto out_mutex;
+
+ }
+
  first_block_offset = round_up(offset, sb->s_blocksize);
  last_block_offset = round_down((offset + length), sb->s_blocksize) - 1;
 
@@ -3678,6 +3690,31 @@ out_mutex:
  return ret;
 }
 
+int ext4_inode_attach_jinode(struct inode *inode)
+{
+ struct ext4_inode_info *ei = EXT4_I(inode);
+ struct jbd2_inode *jinode;
+
+ if (ei->jinode || !EXT4_SB(inode->i_sb)->s_journal)
+  return 0;
+
+ jinode = jbd2_alloc_inode(GFP_KERNEL);
+ spin_lock(&inode->i_lock);
+ if (!ei->jinode) {
+  if (!jinode) {
+   spin_unlock(&inode->i_lock);
+   return -ENOMEM;
+  }
+  ei->jinode = jinode;
+  jbd2_journal_init_jbd_inode(ei->jinode, inode);
+  jinode = NULL;
+ }
+ spin_unlock(&inode->i_lock);
+ if (unlikely(jinode != NULL))
+  jbd2_free_inode(jinode);
+ return 0;
+}
+
 /*
  * ext4_truncate()
  *
@@ -3744,6 +3781,12 @@ void ext4_truncate(struct inode *inode)
   */
  ext4_flush_unwritten_io(inode);
 
+ /* If we zero-out tail of the page, we have to create jinode for jbd2 */
+ if (inode->i_size & (inode->i_sb->s_blocksize - 1)) {
+  if (ext4_inode_attach_jinode(inode) < 0)
+   return;
+ }
+
  if (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS))
   credits = ext4_writepage_trans_blocks(inode);
  else
-- 
1.7.1