From e7e9247a8761a807e58966c536efae3eaf895d90 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:03:34 -0400
Subject: [fs] btrfs: send, avoid unnecessary inode item lookup in the btree

Message-id: <1407179109-13714-328-git-send-email-sandeen@redhat.com>
Patchwork-id: 87358
O-Subject: [RHEL7.1 PATCH 327/422] Btrfs: send, avoid unnecessary inode item lookup in the btree
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit b46ab97bcd4ae7954b3a150f642a82cdd1434f40
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Fri Mar 21 12:46:54 2014 +0000

    Btrfs: send, avoid unnecessary inode item lookup in the btree

    Regardless of whether the caller is interested or not in knowing the inode's
    generation (dir_gen != NULL), get_first_ref always does a btree lookup to get
    the inode item. Avoid this useless lookup if dir_gen parameter is NULL (which
    is in some cases).

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/send.c b/fs/btrfs/send.c
index c76400d..98e9e0c 100644
--- a/fs/btrfs/send.c
+++ b/fs/btrfs/send.c
@@ -1693,10 +1693,12 @@ static int get_first_ref(struct btrfs_root *root, u64 ino,
   goto out;
  btrfs_release_path(path);
 
- ret = get_inode_info(root, parent_dir, NULL, dir_gen, NULL, NULL,
-   NULL, NULL);
- if (ret < 0)
-  goto out;
+ if (dir_gen) {
+  ret = get_inode_info(root, parent_dir, NULL, dir_gen, NULL,
+         NULL, NULL, NULL);
+  if (ret < 0)
+   goto out;
+ }
 
  *dir = parent_dir;
 
@@ -1712,13 +1714,12 @@ static int is_first_ref(struct btrfs_root *root,
  int ret;
  struct fs_path *tmp_name;
  u64 tmp_dir;
- u64 tmp_dir_gen;
 
  tmp_name = fs_path_alloc();
  if (!tmp_name)
   return -ENOMEM;
 
- ret = get_first_ref(root, ino, &tmp_dir, &tmp_dir_gen, tmp_name);
+ ret = get_first_ref(root, ino, &tmp_dir, NULL, tmp_name);
  if (ret < 0)
   goto out;
 
-- 
1.7.1