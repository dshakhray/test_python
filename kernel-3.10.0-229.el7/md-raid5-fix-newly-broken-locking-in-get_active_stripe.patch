From 6661f6cd18b79d44ad2fdda1c1d30ae32c7acb2c Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:25:39 -0400
Subject: [md] raid5: fix newly-broken locking in get_active_stripe

Message-id: <1409563584-9000-38-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 89970
O-Subject: [RHEL7.1 PATCH 37/82] md/raid5: fix newly-broken locking in get_active_stripe.
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: NeilBrown <neilb@suse.de>

commit 566c09c53455d7c4f1 raid5: relieve lock contention in get_active_stripe()

modified the locking in get_active_stripe() reducing the range
protected by the (highly contended) device_lock.
Unfortunately it reduced the range too much opening up some races.

One race can occur if get_priority_stripe runs between the
test on sh->count and device_lock being taken.
This will mean that sh->lru is not empty while get_active_stripe
thinks ->count is zero resulting in a 'BUG' firing.

Another race happens if __release_stripe is called immediately
after sh->count is tested and found to be non-zero.  If STRIPE_HANDLE
is not set, get_active_stripe should increment ->active_stripes
when it increments ->count from 0, but as it didn't think it was 0,
it doesn't.

Extending device_lock to cover the test on sh->count close these
races.

While we are here, fix the two BUG tests:
 -If count is zero, then lru really must not be empty, or we've
  lock the stripe_head somehow - no other tests are relevant.
 -STRIPE_ON_RELEASE_LIST is completely independent of ->lru so
  testing it is pointless.

Reported-and-tested-by: Brassow Jonathan <jbrassow@redhat.com>
Reviewed-by: Shaohua Li <shli@kernel.org>
Fixes: 566c09c53455d7c4f1
Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit 6d183de4077191d1201283a9035ce57a9b05254d)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index a059260..ab595b2 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -678,26 +678,23 @@ get_active_stripe(struct r5conf *conf, sector_t sector,
    } else
     init_stripe(sh, sector, previous);
   } else {
+   spin_lock(&conf->device_lock);
    if (atomic_read(&sh->count)) {
     BUG_ON(!list_empty(&sh->lru)
         && !test_bit(STRIPE_EXPANDING, &sh->state)
         && !test_bit(STRIPE_ON_UNPLUG_LIST, &sh->state)
-        && !test_bit(STRIPE_ON_RELEASE_LIST, &sh->state));
+     );
    } else {
-    spin_lock(&conf->device_lock);
     if (!test_bit(STRIPE_HANDLE, &sh->state))
      atomic_inc(&conf->active_stripes);
-    if (list_empty(&sh->lru) &&
-        !test_bit(STRIPE_ON_RELEASE_LIST, &sh->state) &&
-        !test_bit(STRIPE_EXPANDING, &sh->state))
-     BUG();
+    BUG_ON(list_empty(&sh->lru));
     list_del_init(&sh->lru);
     if (sh->group) {
      sh->group->stripes_cnt--;
      sh->group = NULL;
     }
-    spin_unlock(&conf->device_lock);
    }
+   spin_unlock(&conf->device_lock);
   }
  } while (sh == NULL);
 
-- 
1.7.1