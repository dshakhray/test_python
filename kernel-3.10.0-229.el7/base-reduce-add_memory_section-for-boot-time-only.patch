From 291837195df650eac9e26f7755a5dff70c33433a Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:04:53 -0400
Subject: [base] reduce add_memory_section() for boot-time only

Message-id: <20140710010453.22146.8959.stgit@gir.stowe>
Patchwork-id: 85603
O-Subject: [RHEL7.1 PATCH 064/105] drivers: base: reduce add_memory_section() for boot-time only
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 37a7bd6255b415afe197489b5cd1f9568a7ae058

commit 37a7bd6255b415afe197489b5cd1f9568a7ae058
Author: Seth Jennings <sjenning@linux.vnet.ibm.com>
Date:   Tue Aug 20 12:13:01 2013 -0500

    drivers: base: reduce add_memory_section() for boot-time only

    Now that add_memory_section() is only called from boot time, reduce
    the logic and remove the enum.

    Signed-off-by: Seth Jennings <sjenning@linux.vnet.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/base/memory.c b/drivers/base/memory.c
index 7bbd4f7..1d15da3 100644
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@ -604,40 +604,29 @@ static int init_memory_block(struct memory_block **memory,
  return ret;
 }
 
-static int add_memory_section(int nid, struct mem_section *section,
-   struct memory_block **mem_p,
-   unsigned long state, enum mem_add_context context)
+static int add_memory_section(struct mem_section *section,
+   struct memory_block **mem_p)
 {
  struct memory_block *mem = NULL;
  int scn_nr = __section_nr(section);
  int ret = 0;
 
- if (context == BOOT) {
-  /* same memory block ? */
-  if (mem_p && *mem_p)
-   if (scn_nr >= (*mem_p)->start_section_nr &&
-       scn_nr <= (*mem_p)->end_section_nr) {
-    mem = *mem_p;
-    get_device(&mem->dev);
-   }
- } else
-  mem = find_memory_block(section);
+ if (mem_p && *mem_p) {
+  if (scn_nr >= (*mem_p)->start_section_nr &&
+      scn_nr <= (*mem_p)->end_section_nr) {
+   mem = *mem_p;
+   get_device(&mem->dev);
+  }
+ }
 
  if (mem) {
   mem->section_count++;
   put_device(&mem->dev);
  } else {
-  ret = init_memory_block(&mem, section, state);
+  ret = init_memory_block(&mem, section, MEM_ONLINE);
   /* store memory_block pointer for next loop */
-  if (!ret && context == BOOT)
-   if (mem_p)
-    *mem_p = mem;
- }
-
- if (!ret) {
-  if (context == HOTPLUG &&
-      mem->section_count == sections_per_block)
-   ret = register_mem_sect_under_node(mem, nid);
+  if (!ret && mem_p)
+   *mem_p = mem;
  }
 
  return ret;
@@ -766,10 +755,8 @@ int __init memory_dev_init(void)
   if (!present_section_nr(i))
    continue;
   /* don't need to reuse memory_block if only one per block */
-  err = add_memory_section(0, __nr_to_section(i),
-     (sections_per_block == 1) ? NULL : &mem,
-      MEM_ONLINE,
-      BOOT);
+  err = add_memory_section(__nr_to_section(i),
+     (sections_per_block == 1) ? NULL : &mem);
   if (!ret)
    ret = err;
  }
diff --git a/include/linux/memory.h b/include/linux/memory.h
index 85c31a8..4c89fb0 100644
--- a/include/linux/memory.h
+++ b/include/linux/memory.h
@@ -125,7 +125,6 @@ extern struct memory_block *find_memory_block_hinted(struct mem_section *,
        struct memory_block *);
 extern struct memory_block *find_memory_block(struct mem_section *);
 #define CONFIG_MEM_BLOCK_SIZE (PAGES_PER_SECTION<<PAGE_SHIFT)
-enum mem_add_context { BOOT, HOTPLUG };
 #endif /* CONFIG_MEMORY_HOTPLUG_SPARSE */
 
 #ifdef CONFIG_MEMORY_HOTPLUG
-- 
1.7.1