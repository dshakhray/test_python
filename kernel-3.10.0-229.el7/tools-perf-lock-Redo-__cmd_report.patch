From 71ecc2c5a4fbcfa454f2596d944c2077d82d3a23 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:24:43 -0400
Subject: [tools] perf/lock: Redo __cmd_report

Message-id: <1408462094-14194-115-git-send-email-jolsa@redhat.com>
Patchwork-id: 88083
O-Subject: [PATCH RHEL7.1 BZ1131394 114/325] perf lock: Redo __cmd_report
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 375eb2be5584b8182a917124ca217b74e43d2dc4
Author: Davidlohr Bueso <davidlohr@hp.com>
Date: Sun Sep 8 19:19:16 2013 -0700

description
===========
This function should be straightforward, and we can remove some trivial
logic by moving the functionality of read_events() into __cmd_report() -
thus allowing a new session to be properly deleted.

Since the 'info' subcommand also needs to process the recorded events,
add a 'display_info' flag to differentiate between report and info
commands.

Furthermore, this patch also calls perf_session__has_traces(), making
sure that we don't compare apples and oranges, fixing a segfault when
using an perf.data file generated by a different subcommand. ie:

./perf mem record sleep 1
[ perf record: Woken up 1 times to write data ]
[ perf record: Captured and wrote 0.017 MB perf.data (~724 samples) ]

./perf lock report
Segmentation fault (core dumped)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-lock.c b/tools/perf/builtin-lock.c
index 7784347..780484f 100644
--- a/tools/perf/builtin-lock.c
+++ b/tools/perf/builtin-lock.c
@@ -818,6 +818,18 @@ static int process_sample_event(struct perf_tool *tool __maybe_unused,
  return 0;
 }
 
+static void sort_result(void)
+{
+ unsigned int i;
+ struct lock_stat *st;
+
+ for (i = 0; i < LOCKHASH_SIZE; i++) {
+  list_for_each_entry(st, &lockhash_table[i], hash_entry) {
+   insert_to_result(st, compare);
+  }
+ }
+}
+
 static const struct perf_evsel_str_handler lock_tracepoints[] = {
  { "lock:lock_acquire",  perf_evsel__process_lock_acquire,   }, /* CONFIG_LOCKDEP */
  { "lock:lock_acquired",  perf_evsel__process_lock_acquired,  }, /* CONFIG_LOCKDEP, CONFIG_LOCK_STAT */
@@ -825,51 +837,47 @@ static const struct perf_evsel_str_handler lock_tracepoints[] = {
  { "lock:lock_release",  perf_evsel__process_lock_release,   }, /* CONFIG_LOCKDEP */
 };
 
-static int read_events(void)
+static int __cmd_report(bool display_info)
 {
+ int err = -EINVAL;
  struct perf_tool eops = {
   .sample   = process_sample_event,
   .comm   = perf_event__process_comm,
   .ordered_samples = true,
  };
+
  session = perf_session__new(input_name, O_RDONLY, 0, false, &eops);
  if (!session) {
   pr_err("Initializing perf session failed\n");
-  return -1;
+  return -ENOMEM;
  }
 
+ if (!perf_session__has_traces(session, "lock record"))
+  goto out_delete;
+
  if (perf_session__set_tracepoints_handlers(session, lock_tracepoints)) {
   pr_err("Initializing perf session tracepoint handlers failed\n");
-  return -1;
+  goto out_delete;
  }
 
- return perf_session__process_events(session, &eops);
-}
+ if (select_key())
+  goto out_delete;
 
-static void sort_result(void)
-{
- unsigned int i;
- struct lock_stat *st;
-
- for (i = 0; i < LOCKHASH_SIZE; i++) {
-  list_for_each_entry(st, &lockhash_table[i], hash_entry) {
-   insert_to_result(st, compare);
-  }
- }
-}
+ err = perf_session__process_events(session, &eops);
+ if (err)
+  goto out_delete;
 
-static int __cmd_report(void)
-{
  setup_pager();
+ if (display_info) /* used for info subcommand */
+  err = dump_info();
+ else {
+  sort_result();
+  print_result();
+ }
 
- if ((select_key() != 0) ||
-     (read_events() != 0))
-  return -1;
-
- sort_result();
- print_result();
-
- return 0;
+out_delete:
+ perf_session__delete(session);
+ return err;
 }
 
 static int __cmd_record(int argc, const char **argv)
@@ -970,7 +978,7 @@ int cmd_lock(int argc, const char **argv, const char *prefix __maybe_unused)
    if (argc)
     usage_with_options(report_usage, report_options);
   }
-  __cmd_report();
+  rc = __cmd_report(false);
  } else if (!strcmp(argv[0], "script")) {
   /* Aliased to 'perf script' */
   return cmd_script(argc, argv, prefix);
@@ -983,11 +991,7 @@ int cmd_lock(int argc, const char **argv, const char *prefix __maybe_unused)
   }
   /* recycling report_lock_ops */
   trace_handler = &report_lock_ops;
-  setup_pager();
-  if (read_events() != 0)
-   rc = -1;
-  else
-   rc = dump_info();
+  rc = __cmd_report(true);
  } else {
   usage_with_options(lock_usage, lock_options);
  }
-- 
1.7.1