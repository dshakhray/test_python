From 8a895b5d3f28a5b5c32fae930025cc4a60bda3ad Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:26:24 -0400
Subject: [tools] perf/session: Separating data file properties from session

Message-id: <1408462094-14194-216-git-send-email-jolsa@redhat.com>
Patchwork-id: 88200
O-Subject: [PATCH RHEL7.1 BZ1131394 215/325] perf session: Separating data file properties from session
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit cc9784bd9fa9d8e27fdea61142398cb85ce401a8
Author: Jiri Olsa <jolsa@redhat.com>
Date: Tue Oct 15 16:27:34 2013 +0200

description
===========
Removing 'fd, fd_pipe, filename, size' from struct perf_session and
replacing them with struct perf_data_file object.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-annotate.c b/tools/perf/builtin-annotate.c
index 95df683..03cfa59 100644
--- a/tools/perf/builtin-annotate.c
+++ b/tools/perf/builtin-annotate.c
@@ -259,7 +259,7 @@ static int __cmd_annotate(struct perf_annotate *ann)
  }
 
  if (total_nr_samples == 0) {
-  ui__error("The %s file has no samples!\n", session->filename);
+  ui__error("The %s file has no samples!\n", file.path);
   goto out_delete;
  }
 
diff --git a/tools/perf/builtin-buildid-list.c b/tools/perf/builtin-buildid-list.c
index 0164c1c..ed3873b 100644
--- a/tools/perf/builtin-buildid-list.c
+++ b/tools/perf/builtin-buildid-list.c
@@ -73,7 +73,7 @@ static int perf_session__list_build_ids(bool force, bool with_hits)
   * in pipe-mode, the only way to get the buildids is to parse
   * the record stream. Buildids are stored as RECORD_HEADER_BUILD_ID
   */
- if (with_hits || session->fd_pipe)
+ if (with_hits || perf_data_file__is_pipe(&file))
   perf_session__process_events(session, &build_id__mark_dso_hit_ops);
 
  perf_session__fprintf_dsos_buildid(session, stdout, dso__skip_buildid, with_hits);
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 3a97e07..8b45fce 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -257,7 +257,6 @@ static int process_buildids(struct perf_record *rec)
  if (size == 0)
   return 0;
 
- session->fd = file->fd;
  return __perf_session__process_events(session, rec->post_processing_offset,
            size - rec->post_processing_offset,
            size, &build_id__mark_dso_hit_ops);
diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index 60d7f8e..fa68a36 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -368,8 +368,9 @@ static int perf_report__setup_sample_type(struct perf_report *rep)
 {
  struct perf_session *self = rep->session;
  u64 sample_type = perf_evlist__combined_sample_type(self->evlist);
+ bool is_pipe = perf_data_file__is_pipe(self->file);
 
- if (!self->fd_pipe && !(sample_type & PERF_SAMPLE_CALLCHAIN)) {
+ if (!is_pipe && !(sample_type & PERF_SAMPLE_CALLCHAIN)) {
   if (sort__has_parent) {
    ui__error("Selected --sort parent, but no "
         "callchain data. Did you call "
@@ -392,7 +393,7 @@ static int perf_report__setup_sample_type(struct perf_report *rep)
  }
 
  if (sort__mode == SORT_MODE__BRANCH) {
-  if (!self->fd_pipe &&
+  if (!is_pipe &&
       !(sample_type & PERF_SAMPLE_BRANCH_STACK)) {
    ui__error("Selected -b but no branch data. "
       "Did you call perf record without -b?\n");
@@ -488,6 +489,7 @@ static int __cmd_report(struct perf_report *rep)
  struct map *kernel_map;
  struct kmap *kernel_kmap;
  const char *help = "For a higher level overview, try: perf report --sort comm,dso";
+ struct perf_data_file *file = session->file;
 
  signal(SIGINT, sig_handler);
 
@@ -572,7 +574,7 @@ static int __cmd_report(struct perf_report *rep)
   return 0;
 
  if (nr_samples == 0) {
-  ui__error("The %s file has no samples!\n", session->filename);
+  ui__error("The %s file has no samples!\n", file->path);
   return 0;
  }
 
diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c
index f0c77a1..27de606 100644
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@ -1525,7 +1525,7 @@ int cmd_script(int argc, const char **argv, const char *prefix __maybe_unused)
    return -1;
   }
 
-  input = open(session->filename, O_RDONLY); /* input_name */
+  input = open(file.path, O_RDONLY); /* input_name */
   if (input < 0) {
    perror("failed to open file");
    return -1;
diff --git a/tools/perf/util/data.h b/tools/perf/util/data.h
index d6c262e..8c2df80 100644
--- a/tools/perf/util/data.h
+++ b/tools/perf/util/data.h
@@ -27,6 +27,21 @@ static inline bool perf_data_file__is_write(struct perf_data_file *file)
  return file->mode == PERF_DATA_MODE_WRITE;
 }
 
+static inline int perf_data_file__is_pipe(struct perf_data_file *file)
+{
+ return file->is_pipe;
+}
+
+static inline int perf_data_file__fd(struct perf_data_file *file)
+{
+ return file->fd;
+}
+
+static inline unsigned long perf_data_file__size(struct perf_data_file *file)
+{
+ return file->size;
+}
+
 int perf_data_file__open(struct perf_data_file *file);
 void perf_data_file__close(struct perf_data_file *file);
 
diff --git a/tools/perf/util/header.c b/tools/perf/util/header.c
index c3e5a3b..26d9520 100644
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@ -22,6 +22,7 @@
 #include "vdso.h"
 #include "strbuf.h"
 #include "build-id.h"
+#include "data.h"
 
 static bool no_buildid_cache = false;
 
@@ -2189,7 +2190,7 @@ int perf_header__fprintf_info(struct perf_session *session, FILE *fp, bool full)
 {
  struct header_print_data hd;
  struct perf_header *header = &session->header;
- int fd = session->fd;
+ int fd = perf_data_file__fd(session->file);
  hd.fp = fp;
  hd.full = full;
 
@@ -2650,7 +2651,8 @@ static int perf_header__read_pipe(struct perf_session *session)
  struct perf_header *header = &session->header;
  struct perf_pipe_file_header f_header;
 
- if (perf_file_header__read_pipe(&f_header, header, session->fd,
+ if (perf_file_header__read_pipe(&f_header, header,
+     perf_data_file__fd(session->file),
      session->repipe) < 0) {
   pr_debug("incompatible file format\n");
   return -EINVAL;
@@ -2751,18 +2753,19 @@ static int perf_evlist__prepare_tracepoint_events(struct perf_evlist *evlist,
 
 int perf_session__read_header(struct perf_session *session)
 {
+ struct perf_data_file *file = session->file;
  struct perf_header *header = &session->header;
  struct perf_file_header f_header;
  struct perf_file_attr f_attr;
  u64   f_id;
  int nr_attrs, nr_ids, i, j;
- int fd = session->fd;
+ int fd = perf_data_file__fd(file);
 
  session->evlist = perf_evlist__new();
  if (session->evlist == NULL)
   return -ENOMEM;
 
- if (session->fd_pipe)
+ if (perf_data_file__is_pipe(file))
   return perf_header__read_pipe(session);
 
  if (perf_file_header__read(&f_header, header, fd) < 0)
@@ -2777,7 +2780,7 @@ int perf_session__read_header(struct perf_session *session)
  if (f_header.data.size == 0) {
   pr_warning("WARNING: The %s file's data size field is 0 which is unexpected.\n"
       "Was the 'perf record' command properly terminated?\n",
-      session->filename);
+      file->path);
  }
 
  nr_attrs = f_header.attrs.size / f_header.attr_size;
@@ -2990,18 +2993,19 @@ int perf_event__process_tracing_data(struct perf_tool *tool __maybe_unused,
          struct perf_session *session)
 {
  ssize_t size_read, padding, size = event->tracing_data.size;
- off_t offset = lseek(session->fd, 0, SEEK_CUR);
+ int fd = perf_data_file__fd(session->file);
+ off_t offset = lseek(fd, 0, SEEK_CUR);
  char buf[BUFSIZ];
 
  /* setup for reading amidst mmap */
- lseek(session->fd, offset + sizeof(struct tracing_data_event),
+ lseek(fd, offset + sizeof(struct tracing_data_event),
        SEEK_SET);
 
- size_read = trace_report(session->fd, &session->pevent,
+ size_read = trace_report(fd, &session->pevent,
      session->repipe);
  padding = PERF_ALIGN(size_read, sizeof(u64)) - size_read;
 
- if (readn(session->fd, buf, padding) < 0) {
+ if (readn(fd, buf, padding) < 0) {
   pr_err("%s: reading input file", __func__);
   return -1;
  }
diff --git a/tools/perf/util/session.c b/tools/perf/util/session.c
index 707bb48..b64d5c3 100644
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@ -18,17 +18,16 @@
 
 static int perf_session__open(struct perf_session *self)
 {
- if (self->fd_pipe) {
-  if (perf_session__read_header(self) < 0)
-   pr_err("incompatible file format (rerun with -v to learn more)");
-  return 0;
- }
+ struct perf_data_file *file = self->file;
 
  if (perf_session__read_header(self) < 0) {
   pr_err("incompatible file format (rerun with -v to learn more)");
   return -1;
  }
 
+ if (perf_data_file__is_pipe(file))
+  return 0;
+
  if (!perf_evlist__valid_sample_type(self->evlist)) {
   pr_err("non matching sample_type");
   return -1;
@@ -87,10 +86,7 @@ struct perf_session *perf_session__new(struct perf_data_file *file,
   if (perf_data_file__open(file))
    goto out_delete;
 
-  self->fd       = file->fd;
-  self->fd_pipe  = file->is_pipe;
-  self->filename = file->path;
-  self->size     = file->size;
+  self->file = file;
 
   if (perf_data_file__is_read(file)) {
    if (perf_session__open(self) < 0)
@@ -158,7 +154,8 @@ void perf_session__delete(struct perf_session *self)
  perf_session__delete_threads(self);
  perf_session_env__delete(&self->header.env);
  machines__exit(&self->machines);
- close(self->fd);
+ if (self->file)
+  perf_data_file__close(self->file);
  free(self);
  vdso__exit();
 }
@@ -1020,6 +1017,7 @@ static int perf_session_deliver_event(struct perf_session *session,
 static int perf_session__process_user_event(struct perf_session *session, union perf_event *event,
          struct perf_tool *tool, u64 file_offset)
 {
+ int fd = perf_data_file__fd(session->file);
  int err;
 
  dump_event(session, event, file_offset, NULL);
@@ -1033,7 +1031,7 @@ static int perf_session__process_user_event(struct perf_session *session, union
   return err;
  case PERF_RECORD_HEADER_TRACING_DATA:
   /* setup for reading amidst mmap */
-  lseek(session->fd, file_offset, SEEK_SET);
+  lseek(fd, file_offset, SEEK_SET);
   return tool->tracing_data(tool, event, session);
  case PERF_RECORD_HEADER_BUILD_ID:
   return tool->build_id(tool, event, session);
@@ -1159,6 +1157,7 @@ volatile int session_done;
 static int __perf_session__process_pipe_events(struct perf_session *self,
             struct perf_tool *tool)
 {
+ int fd = perf_data_file__fd(self->file);
  union perf_event *event;
  uint32_t size, cur_size = 0;
  void *buf = NULL;
@@ -1177,7 +1176,7 @@ static int __perf_session__process_pipe_events(struct perf_session *self,
   return -errno;
 more:
  event = buf;
- err = readn(self->fd, event, sizeof(struct perf_event_header));
+ err = readn(fd, event, sizeof(struct perf_event_header));
  if (err <= 0) {
   if (err == 0)
    goto done;
@@ -1209,7 +1208,7 @@ more:
  p += sizeof(struct perf_event_header);
 
  if (size - sizeof(struct perf_event_header)) {
-  err = readn(self->fd, p, size - sizeof(struct perf_event_header));
+  err = readn(fd, p, size - sizeof(struct perf_event_header));
   if (err <= 0) {
    if (err == 0) {
     pr_err("unexpected end of event stream\n");
@@ -1290,6 +1289,7 @@ int __perf_session__process_events(struct perf_session *session,
        u64 data_offset, u64 data_size,
        u64 file_size, struct perf_tool *tool)
 {
+ int fd = perf_data_file__fd(session->file);
  u64 head, page_offset, file_offset, file_pos, progress_next;
  int err, mmap_prot, mmap_flags, map_idx = 0;
  size_t mmap_size;
@@ -1322,7 +1322,7 @@ int __perf_session__process_events(struct perf_session *session,
   mmap_flags = MAP_PRIVATE;
  }
 remap:
- buf = mmap(NULL, mmap_size, mmap_prot, mmap_flags, session->fd,
+ buf = mmap(NULL, mmap_size, mmap_prot, mmap_flags, fd,
      file_offset);
  if (buf == MAP_FAILED) {
   pr_err("failed to mmap file\n");
@@ -1387,16 +1387,17 @@ out_err:
 int perf_session__process_events(struct perf_session *self,
      struct perf_tool *tool)
 {
+ u64 size = perf_data_file__size(self->file);
  int err;
 
  if (perf_session__register_idle_thread(self) == NULL)
   return -ENOMEM;
 
- if (!self->fd_pipe)
+ if (!perf_data_file__is_pipe(self->file))
   err = __perf_session__process_events(self,
            self->header.data_offset,
            self->header.data_size,
-           self->size, tool);
+           size, tool);
  else
   err = __perf_session__process_pipe_events(self, tool);
 
@@ -1620,13 +1621,14 @@ int perf_session__cpu_bitmap(struct perf_session *session,
 void perf_session__fprintf_info(struct perf_session *session, FILE *fp,
     bool full)
 {
+ int fd = perf_data_file__fd(session->file);
  struct stat st;
  int ret;
 
  if (session == NULL || fp == NULL)
   return;
 
- ret = fstat(session->fd, &st);
+ ret = fstat(fd, &st);
  if (ret == -1)
   return;
 
diff --git a/tools/perf/util/session.h b/tools/perf/util/session.h
index e1ca2d0..27c74d3 100644
--- a/tools/perf/util/session.h
+++ b/tools/perf/util/session.h
@@ -30,16 +30,13 @@ struct ordered_samples {
 
 struct perf_session {
  struct perf_header header;
- unsigned long  size;
  struct machines  machines;
  struct perf_evlist *evlist;
  struct pevent  *pevent;
  struct events_stats stats;
- int   fd;
- bool   fd_pipe;
  bool   repipe;
  struct ordered_samples ordered_samples;
- const char  *filename;
+ struct perf_data_file *file;
 };
 
 #define PRINT_IP_OPT_IP  (1<<0)
-- 
1.7.1