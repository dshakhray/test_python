From b410cf5839e341d814144f7ff8a0a803946de06b Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:07 -0400
Subject: [fs] ext4: retry allocation when inline->extent conversion failed

Message-id: <1414058125-4183-94-git-send-email-lczerner@redhat.com>
Patchwork-id: 98194
O-Subject: [RHEL 7.1 PATCH v2 093/171] ext4: retry allocation when inline->extent conversion failed
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit bc0ca9df3b2abb13f7da9d8d255ec60718badd84

 Similarly as other ->write_begin functions in ext4, also
 ext4_da_write_inline_data_begin() should retry allocation if the
 conversion failed because of ENOSPC. This avoids returning ENOSPC
 prematurely because of uncommitted block deletions.

 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inline.c b/fs/ext4/inline.c
index 0559ed4..c1a1d08 100644
--- a/fs/ext4/inline.c
+++ b/fs/ext4/inline.c
@@ -849,11 +849,13 @@ int ext4_da_write_inline_data_begin(struct address_space *mapping,
  handle_t *handle;
  struct page *page;
  struct ext4_iloc iloc;
+ int retries;
 
  ret = ext4_get_inode_loc(inode, &iloc);
  if (ret)
   return ret;
 
+retry_journal:
  handle = ext4_journal_start(inode, EXT4_HT_INODE, 1);
  if (IS_ERR(handle)) {
   ret = PTR_ERR(handle);
@@ -875,6 +877,11 @@ int ext4_da_write_inline_data_begin(struct address_space *mapping,
            inode,
            flags,
            fsdata);
+  ext4_journal_stop(handle);
+  handle = NULL;
+  if (ret == -ENOSPC &&
+      ext4_should_retry_alloc(inode->i_sb, &retries))
+   goto retry_journal;
   goto out;
  }
 
-- 
1.7.1