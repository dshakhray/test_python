From c869f5ce7ee7705c3768eec476c41b282de869c6 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 2 May 2014 14:37:39 -0400
Subject: [misc] mei: me: do not reset when less than expected data is received

Message-id: <1399041470-21330-67-git-send-email-prarit@redhat.com>
Patchwork-id: 79351
O-Subject: [RHEL7.1 PATCH BZ 1088953 66/77] mei: me: do not reset when less than expected data is received
Bugzilla: 1088953
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit b1b94b5d387e3a1f034c308e22f9295828d7174a
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Mon Mar 3 00:21:28 2014 +0200

    mei: me: do not reset when less than expected data is received

    There is a race in ME hardware between data copy for host and interrupt
    delivery. An interrupt can be delivered prior to whole data copied for the
    host to read but rather then going trough the reset we just merely need to
    wait for the next interrupt.

    The bug is visible in read/write stress with multiple connections per client

    This is a regression caused as a side effect of the commit:
    commit 544f94601409653f07ae6e22d4a39e3a90dceead
    mei: do not run reset flow from the interrupt thread

    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Cc: stable <stable@vger.kernel.org> # 3.14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/hw-me.c b/drivers/misc/mei/hw-me.c
index f8a96c4..1f54b4b 100644
--- a/drivers/misc/mei/hw-me.c
+++ b/drivers/misc/mei/hw-me.c
@@ -508,7 +508,16 @@ irqreturn_t mei_me_irq_thread_handler(int irq, void *dev_id)
  while (slots > 0) {
   dev_dbg(&dev->pdev->dev, "slots to read = %08x\n", slots);
   rets = mei_irq_read_handler(dev, &complete_list, &slots);
+  /* There is a race between ME write and interrupt delivery:
+   * Not all data is always available immediately after the
+   * interrupt, so try to read again on the next interrupt.
+   */
+  if (rets == -ENODATA)
+   break;
+
   if (rets && dev->dev_state != MEI_DEV_RESETTING) {
+   dev_err(&dev->pdev->dev, "mei_irq_read_handler ret = %d.\n",
+      rets);
    schedule_work(&dev->reset_work);
    goto end;
   }
diff --git a/drivers/misc/mei/interrupt.c b/drivers/misc/mei/interrupt.c
index 2fbf0c0..f38a32a 100644
--- a/drivers/misc/mei/interrupt.c
+++ b/drivers/misc/mei/interrupt.c
@@ -351,7 +351,7 @@ int mei_irq_read_handler(struct mei_device *dev,
   dev_err(&dev->pdev->dev, "less data available than length=%08x.\n",
     *slots);
   /* we can't read the message */
-  ret = -EBADMSG;
+  ret = -ENODATA;
   goto end;
  }
 
-- 
1.7.1