From b8d95823baadc649f898ed249af9e9f55e89dda7 Mon Sep 17 00:00:00 2001
From: Vlad Yasevich <vyasevic@redhat.com>
Date: Wed, 10 Sep 2014 15:16:19 -0400
Subject: [net] bridge: Fix double free and memory leak around br_allowed_ingress

Message-id: <1410362181-9327-7-git-send-email-vyasevic@redhat.com>
Patchwork-id: 93476
O-Subject: [RHEL7 PATCH 6/8] bridge: Fix double free and memory leak around br_allowed_ingress
Bugzilla: 1139809
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>

Bugzilla: 1139809
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7936510

commit eb7076182d1ae4bc4641534134ed707100d76acc
From: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date: Wed, 9 Apr 2014 17:00:30 +0900

    bridge: Fix double free and memory leak around br_allowed_ingress

    br_allowed_ingress() has two problems.

    1. If br_allowed_ingress() is called by br_handle_frame_finish() and
    vlan_untag() in br_allowed_ingress() fails, skb will be freed by both
    vlan_untag() and br_handle_frame_finish().

    2. If br_allowed_ingress() is called by br_dev_xmit() and
    br_allowed_ingress() fails, the skb will not be freed.

    Fix these two problems by freeing the skb in br_allowed_ingress()
    if it fails.

    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index 67fbea0..ab67640 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -73,7 +73,7 @@ int br_handle_frame_finish(struct sk_buff *skb)
   goto drop;
 
  if (!br_allowed_ingress(p->br, nbp_get_vlan_info(p), skb, &vid))
-  goto drop;
+  goto out;
 
  /* insert into forwarding database after filtering to avoid spoofing */
  br = p->br;
diff --git a/net/bridge/br_vlan.c b/net/bridge/br_vlan.c
index 8fbf57b..b5cbf85 100644
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@ -170,7 +170,7 @@ bool br_allowed_ingress(struct net_bridge *br, struct net_port_vlans *v,
   * rejected.
   */
  if (!v)
-  return false;
+  goto drop;
 
  /* If vlan tx offload is disabled on bridge device and frame was
   * sent from vlan device on the bridge device, it does not have
@@ -193,7 +193,7 @@ bool br_allowed_ingress(struct net_bridge *br, struct net_port_vlans *v,
    * vlan untagged or priority-tagged traffic belongs to.
    */
   if (pvid == VLAN_N_VID)
-   return false;
+   goto drop;
 
   /* PVID is set on this port.  Any untagged or priority-tagged
    * ingress frame is considered to belong to this vlan.
@@ -216,7 +216,8 @@ bool br_allowed_ingress(struct net_bridge *br, struct net_port_vlans *v,
  /* Frame had a valid vlan tag.  See if vlan is allowed */
  if (test_bit(*vid, v->vlan_bitmap))
   return true;
-
+drop:
+ kfree_skb(skb);
  return false;
 }
 
-- 
1.7.1