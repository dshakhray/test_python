From 13bcbc13ffe52a4aba34fb8d873d7aa3ab0b3857 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Wed, 29 Oct 2014 16:34:14 -0400
Subject: [fs] ext4: check inline directory before converting

Message-id: <1414600485-1929-25-git-send-email-lczerner@redhat.com>
Patchwork-id: 98563
O-Subject: [RHEL 7.1 PATCH v2 24/55] ext4: check inline directory before converting
Bugzilla: 1156096
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: "Darrick J. Wong" <darrick.wong@oracle.com>

BZ 1156096
https://bugzilla.redhat.com/show_bug.cgi?id=1156096

BREW 8169722
https://brewweb.devel.redhat.com/taskinfo?taskID=8169722

Upstream commit 40b163f1c45f52752677e66d2fd273dbfd273a22

 Before converting an inline directory to a regular directory, check
 the directory entries to make sure they're not obviously broken.
 This helps us to avoid a BUG_ON if one of the dirents is trashed.

 Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Reviewed-by: Andreas Dilger <adilger@dilger.ca>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/dir.c b/fs/ext4/dir.c
index 1b17b54..fcd4d19 100644
--- a/fs/ext4/dir.c
+++ b/fs/ext4/dir.c
@@ -621,6 +621,31 @@ static int ext4_release_dir(struct inode *inode, struct file *filp)
  return 0;
 }
 
+int ext4_check_all_de(struct inode *dir, struct buffer_head *bh, void *buf,
+        int buf_size)
+{
+ struct ext4_dir_entry_2 *de;
+ int nlen, rlen;
+ unsigned int offset = 0;
+ char *top;
+
+ de = (struct ext4_dir_entry_2 *)buf;
+ top = buf + buf_size;
+ while ((char *) de < top) {
+  if (ext4_check_dir_entry(dir, NULL, de, bh,
+      buf, buf_size, offset))
+   return -EIO;
+  nlen = EXT4_DIR_REC_LEN(de->name_len);
+  rlen = ext4_rec_len_from_disk(de->rec_len, buf_size);
+  de = (struct ext4_dir_entry_2 *)((char *)de + rlen);
+  offset += rlen;
+ }
+ if ((char *) de > top)
+  return -EIO;
+
+ return 0;
+}
+
 const struct file_operations ext4_dir_operations = {
  .llseek  = ext4_dir_llseek,
  .read  = generic_read_dir,
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 4b7816f..512579d 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2037,6 +2037,8 @@ static inline  unsigned char get_dtype(struct super_block *sb, int filetype)
 
  return ext4_filetype_table[filetype];
 }
+extern int ext4_check_all_de(struct inode *dir, struct buffer_head *bh,
+        void *buf, int buf_size);
 
 /* fsync.c */
 extern int ext4_sync_file(struct file *, loff_t, loff_t, int);
diff --git a/fs/ext4/inline.c b/fs/ext4/inline.c
index 8c1467c..a1d34fa 100644
--- a/fs/ext4/inline.c
+++ b/fs/ext4/inline.c
@@ -1168,6 +1168,18 @@ static int ext4_convert_inline_data_nolock(handle_t *handle,
  if (error < 0)
   goto out;
 
+ /*
+  * Make sure the inline directory entries pass checks before we try to
+  * convert them, so that we avoid touching stuff that needs fsck.
+  */
+ if (S_ISDIR(inode->i_mode)) {
+  error = ext4_check_all_de(inode, iloc->bh,
+     buf + EXT4_INLINE_DOTDOT_SIZE,
+     inline_size - EXT4_INLINE_DOTDOT_SIZE);
+  if (error)
+   goto out;
+ }
+
  error = ext4_destroy_inline_data_nolock(handle, inode);
  if (error)
   goto out;
-- 
1.7.1