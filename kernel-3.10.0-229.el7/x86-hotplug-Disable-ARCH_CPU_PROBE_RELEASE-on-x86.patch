From 290e86b1b7b85505c246c8833b5d58e96e2fdb52 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:06:32 -0400
Subject: [x86] hotplug: Disable ARCH_CPU_PROBE_RELEASE on x86

Message-id: <20140710010632.22146.12403.stgit@gir.stowe>
Patchwork-id: 85619
O-Subject: [RHEL7.1 PATCH 080/105] hotplug / x86: Disable ARCH_CPU_PROBE_RELEASE on x86
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 1cad5e9a3978d182aa9b0e909fb0379da5ba45af

commit 1cad5e9a3978d182aa9b0e909fb0379da5ba45af
Author: Toshi Kani <toshi.kani@hp.com>
Date:   Thu Aug 29 18:22:08 2013 -0600

    hotplug / x86: Disable ARCH_CPU_PROBE_RELEASE on x86

    Commit d7c53c9e enabled ARCH_CPU_PROBE_RELEASE on x86 in order to
    serialize CPU online/offline operations.  Although it is the config
    option to enable CPU hotplug test interfaces, probe & release, it is
    also the option to enable cpu_hotplug_driver_lock() as well.  Therefore,
    this option had to be enabled on x86 with dummy arch_cpu_probe() and
    arch_cpu_release().

    Since then, lock_device_hotplug() was introduced to serialize CPU
    online/offline & hotplug operations.  Therefore, this config option
    is no longer required for the serialization.  This patch disables
    this config option on x86 and revert the changes made by commit
    d7c53c9e.

    Signed-off-by: Toshi Kani <toshi.kani@hp.com>
    Acked-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index a957884..0c66569 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -247,10 +247,6 @@ config ARCH_HWEIGHT_CFLAGS
  default "-fcall-saved-ecx -fcall-saved-edx" if X86_32
  default "-fcall-saved-rdi -fcall-saved-rsi -fcall-saved-rdx -fcall-saved-rcx -fcall-saved-r8 -fcall-saved-r9 -fcall-saved-r10 -fcall-saved-r11" if X86_64
 
-config ARCH_CPU_PROBE_RELEASE
- def_bool y
- depends on HOTPLUG_CPU
-
 config ARCH_SUPPORTS_UPROBES
  def_bool y
 
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 81956c1..4e3f1cf 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -82,27 +82,6 @@
 /* State of each CPU */
 DEFINE_PER_CPU(int, cpu_state) = { 0 };
 
-#ifdef CONFIG_HOTPLUG_CPU
-/*
- * We need this for trampoline_base protection from concurrent accesses when
- * off- and onlining cores wildly.
- */
-static DEFINE_MUTEX(x86_cpu_hotplug_driver_mutex);
-
-void cpu_hotplug_driver_lock(void)
-{
- mutex_lock(&x86_cpu_hotplug_driver_mutex);
-}
-
-void cpu_hotplug_driver_unlock(void)
-{
- mutex_unlock(&x86_cpu_hotplug_driver_mutex);
-}
-
-ssize_t arch_cpu_probe(const char *buf, size_t count) { return -1; }
-ssize_t arch_cpu_release(const char *buf, size_t count) { return -1; }
-#endif
-
 /* Number of siblings per CPU package */
 int smp_num_siblings = 1;
 EXPORT_SYMBOL(smp_num_siblings);
-- 
1.7.1