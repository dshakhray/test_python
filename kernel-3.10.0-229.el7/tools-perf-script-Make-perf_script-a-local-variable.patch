From 5aca5db8b5706a4fe1040a4dfb6d311fe0f47955 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:26:35 -0400
Subject: [tools] perf/script: Make perf_script a local variable

Message-id: <1408462094-14194-227-git-send-email-jolsa@redhat.com>
Patchwork-id: 88281
O-Subject: [PATCH RHEL7.1 BZ1131394 226/325] perf script: Make perf_script a local variable
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 6f3e5eda9d6cc74538430d8f9e8e4baa01249160
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Tue Oct 22 10:34:07 2013 +0300

description
===========
Change perf_script from being global to being local.

[ Made the minor consistency changes suggested by David Ahern ]
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c
index 27de606..0ae88c2 100644
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@ -542,18 +542,9 @@ static int process_sample_event(struct perf_tool *tool __maybe_unused,
  return 0;
 }
 
-static struct perf_tool perf_script = {
- .sample   = process_sample_event,
- .mmap   = perf_event__process_mmap,
- .mmap2   = perf_event__process_mmap2,
- .comm   = perf_event__process_comm,
- .exit   = perf_event__process_exit,
- .fork   = perf_event__process_fork,
- .attr   = perf_event__process_attr,
- .tracing_data  = perf_event__process_tracing_data,
- .build_id  = perf_event__process_build_id,
- .ordered_samples = true,
- .ordering_requires_timestamps = true,
+struct perf_script {
+ struct perf_tool tool;
+ struct perf_session *session;
 };
 
 static void sig_handler(int sig __maybe_unused)
@@ -561,13 +552,13 @@ static void sig_handler(int sig __maybe_unused)
  session_done = 1;
 }
 
-static int __cmd_script(struct perf_session *session)
+static int __cmd_script(struct perf_script *script)
 {
  int ret;
 
  signal(SIGINT, sig_handler);
 
- ret = perf_session__process_events(session, &perf_script);
+ ret = perf_session__process_events(script->session, &script->tool);
 
  if (debug_mode)
   pr_err("Misordered timestamps: %" PRIu64 "\n", nr_unordered);
@@ -1273,6 +1264,21 @@ int cmd_script(int argc, const char **argv, const char *prefix __maybe_unused)
  char *script_path = NULL;
  const char **__argv;
  int i, j, err;
+ struct perf_script script = {
+  .tool = {
+   .sample   = process_sample_event,
+   .mmap   = perf_event__process_mmap,
+   .mmap2   = perf_event__process_mmap2,
+   .comm   = perf_event__process_comm,
+   .exit   = perf_event__process_exit,
+   .fork   = perf_event__process_fork,
+   .attr   = perf_event__process_attr,
+   .tracing_data  = perf_event__process_tracing_data,
+   .build_id  = perf_event__process_build_id,
+   .ordered_samples = true,
+   .ordering_requires_timestamps = true,
+  },
+ };
  const struct option options[] = {
  OPT_BOOLEAN('D', "dump-raw-trace", &dump_trace,
       "dump raw trace in ASCII"),
@@ -1498,10 +1504,12 @@ int cmd_script(int argc, const char **argv, const char *prefix __maybe_unused)
  if (!script_name)
   setup_pager();
 
- session = perf_session__new(&file, false, &perf_script);
+ session = perf_session__new(&file, false, &script.tool);
  if (session == NULL)
   return -ENOMEM;
 
+ script.session = session;
+
  if (cpu_list) {
   if (perf_session__cpu_bitmap(session, cpu_list, cpu_bitmap))
    return -1;
@@ -1565,7 +1573,7 @@ int cmd_script(int argc, const char **argv, const char *prefix __maybe_unused)
  if (err < 0)
   goto out;
 
- err = __cmd_script(session);
+ err = __cmd_script(&script);
 
  perf_session__delete(session);
  cleanup_scripting();
-- 
1.7.1