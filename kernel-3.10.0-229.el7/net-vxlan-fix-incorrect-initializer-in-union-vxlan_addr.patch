From 6ca4e1b851d3998c0c0ae47dd1afb13595011c87 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Tue, 16 Sep 2014 15:04:44 -0400
Subject: [net] vxlan: fix incorrect initializer in union vxlan_addr

Message-id: <2d24296d23c44bf13f2d75d10d3d79d3b6948b91.1410441647.git.dborkman@redhat.com>
Patchwork-id: 95088
O-Subject: [RHEL7.1 PATCH net 7/7] vxlan: fix incorrect initializer in union vxlan_addr
Bugzilla: 1130643
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1130643
Upstream Status: a45e92a599e77ee6a850eabdd0141633fde03915
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7947483
Tested: verified by IBM and myself

Upstream Commit:
commit a45e92a599e77ee6a850eabdd0141633fde03915
Author: Gerhard Stenzel <gstenzel@linux.vnet.ibm.com>
Date:   Fri Aug 22 21:34:16 2014 +0200

    vxlan: fix incorrect initializer in union vxlan_addr

    The first initializer in the following

            union vxlan_addr ipa = {
                .sin.sin_addr.s_addr = tip,
                .sa.sa_family = AF_INET,
            };

    is optimised away by the compiler, due to the second initializer,
    therefore initialising .sin.sin_addr.s_addr always to 0.
    This results in netlink messages indicating a L3 miss never contain the
    missed IP address. This was observed with GCC 4.8 and 4.9. I do not know about previous versions.
    The problem affects user space programs relying on an IP address being
    sent as part of a netlink message indicating a L3 miss.

    Changing
                .sa.sa_family = AF_INET,
    to
                .sin.sin_family = AF_INET,
    fixes the problem.

    Signed-off-by: Gerhard Stenzel <gerhard.stenzel@de.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 37a5be3..dd436d1 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -1309,7 +1309,7 @@ static int arp_reduce(struct net_device *dev, struct sk_buff *skb)
  } else if (vxlan->flags & VXLAN_F_L3MISS) {
   union vxlan_addr ipa = {
    .sin.sin_addr.s_addr = tip,
-   .sa.sa_family = AF_INET,
+   .sin.sin_family = AF_INET,
   };
 
   vxlan_ip_miss(dev, &ipa);
@@ -1470,7 +1470,7 @@ static int neigh_reduce(struct net_device *dev, struct sk_buff *skb)
  } else if (vxlan->flags & VXLAN_F_L3MISS) {
   union vxlan_addr ipa = {
    .sin6.sin6_addr = msg->target,
-   .sa.sa_family = AF_INET6,
+   .sin6.sin6_family = AF_INET6,
   };
 
   vxlan_ip_miss(dev, &ipa);
@@ -1503,7 +1503,7 @@ static bool route_shortcircuit(struct net_device *dev, struct sk_buff *skb)
   if (!n && (vxlan->flags & VXLAN_F_L3MISS)) {
    union vxlan_addr ipa = {
     .sin.sin_addr.s_addr = pip->daddr,
-    .sa.sa_family = AF_INET,
+    .sin.sin_family = AF_INET,
    };
 
    vxlan_ip_miss(dev, &ipa);
@@ -1524,7 +1524,7 @@ static bool route_shortcircuit(struct net_device *dev, struct sk_buff *skb)
   if (!n && (vxlan->flags & VXLAN_F_L3MISS)) {
    union vxlan_addr ipa = {
     .sin6.sin6_addr = pip6->daddr,
-    .sa.sa_family = AF_INET6,
+    .sin6.sin6_family = AF_INET6,
    };
 
    vxlan_ip_miss(dev, &ipa);
-- 
1.7.1