From da9ef8fb3cb7c0246d3ce322ed6fd06418e26eef Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:27:51 -0400
Subject: [lib] rhashtable: fix annotations for rht_for_each_entry_rcu()

Message-id: <8c77d642fcb0bbba4ae1d9a5f85b6cbd5a1e04c7.1410528971.git.jbenc@redhat.com>
Patchwork-id: 93971
O-Subject: [RHEL7.1 net PATCH 08/14] rhashtable: fix annotations for rht_for_each_entry_rcu()
Bugzilla: 1140661
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140661
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit 93f560811e80216e98f3fcec220aa0f8836b09af
Author: Thomas Graf <tgraf@suug.ch>
Date:   Wed Aug 13 16:38:31 2014 +0200

    rhashtable: fix annotations for rht_for_each_entry_rcu()

    Call rcu_deference_raw() directly from within rht_for_each_entry_rcu()
    as list_for_each_entry_rcu() does.

    Fixes the following sparse warnings:
    net/netlink/af_netlink.c:2906:25:    expected struct rhash_head const *__mptr
    net/netlink/af_netlink.c:2906:25:    got struct rhash_head [noderef] <asn:4>*<noident>

    Fixes: e341694e3eb57fc ("netlink: Convert netlink_lookup() to use RCU protected hash table")
    Signed-off-by: Thomas Graf <tgraf@suug.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/rhashtable.h b/include/linux/rhashtable.h
index af967c4..36826c0 100644
--- a/include/linux/rhashtable.h
+++ b/include/linux/rhashtable.h
@@ -123,11 +123,6 @@ void rhashtable_destroy(const struct rhashtable *ht);
  typeof(ptr) __ptr = (ptr); \
     __ptr ? rht_entry(__ptr, type, member) : NULL; \
 })
-#define rht_entry_safe_rcu(ptr, type, member) \
-({ \
- typeof(*ptr) __rcu *__ptr = (typeof(*ptr) __rcu __force *)ptr; \
- __ptr ? container_of((typeof(ptr))rcu_dereference_raw(__ptr), type, member) : NULL; \
-})
 
 #define rht_next_entry_safe(pos, ht, member) \
 ({ \
@@ -204,9 +199,10 @@ void rhashtable_destroy(const struct rhashtable *ht);
  * traversal is guarded by rcu_read_lock().
  */
 #define rht_for_each_entry_rcu(pos, head, member) \
- for (pos = rht_entry_safe_rcu(head, typeof(*(pos)), member); \
+ for (pos = rht_entry_safe(rcu_dereference_raw(head), \
+      typeof(*(pos)), member); \
       pos; \
-      pos = rht_entry_safe_rcu((pos)->member.next, \
-          typeof(*(pos)), member))
+      pos = rht_entry_safe(rcu_dereference_raw((pos)->member.next), \
+      typeof(*(pos)), member))
 
 #endif /* _LINUX_RHASHTABLE_H */
-- 
1.7.1