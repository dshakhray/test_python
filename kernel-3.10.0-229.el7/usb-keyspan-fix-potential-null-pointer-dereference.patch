From fdbc67bc8fa8d802f434b764d221a4bbf6f67bef Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:09:18 -0400
Subject: [usb] keyspan: fix potential null pointer dereference

Message-id: <1410887463-20674-487-git-send-email-dzickus@redhat.com>
Patchwork-id: 95615
O-Subject: [RHEL7 PATCH 486/591] USB: keyspan: fix potential null pointer dereference
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit d5afce82e131eb5a171afeba0bc5fefbe2417ad9
Author: Rickard Strandqvist <rickard_strandqvist@spectrumdigital.se>
Date:   Fri May 16 17:39:13 2014 +0200

    USB: keyspan: fix potential null pointer dereference

    Move control-urb dereference to after NULL-check. There is otherwise a
    risk of a possible null pointer dereference.

    Was largely found by using a static code analysis program called
    cppcheck.

    [Johan: modify commit message somewhat ]
    [gkh: remove stable tag as it's not a real problem that anyone has ever hit]

    Signed-off-by: Rickard Strandqvist <rickard_strandqvist@spectrumdigital.se>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/keyspan.c b/drivers/usb/serial/keyspan.c
index d3acaea..93cb7ce 100644
--- a/drivers/usb/serial/keyspan.c
+++ b/drivers/usb/serial/keyspan.c
@@ -1535,14 +1535,14 @@ static int keyspan_usa26_send_setup(struct usb_serial *serial,
 
  this_urb = p_priv->outcont_urb;
 
- dev_dbg(&port->dev, "%s - endpoint %d\n", __func__, usb_pipeendpoint(this_urb->pipe));
-
   /* Make sure we have an urb then send the message */
  if (this_urb == NULL) {
   dev_dbg(&port->dev, "%s - oops no urb.\n", __func__);
   return -1;
  }
 
+ dev_dbg(&port->dev, "%s - endpoint %d\n", __func__, usb_pipeendpoint(this_urb->pipe));
+
  /* Save reset port val for resend.
     Don't overwrite resend for open/close condition. */
  if ((reset_port + 1) > p_priv->resend_cont)
-- 
1.7.1