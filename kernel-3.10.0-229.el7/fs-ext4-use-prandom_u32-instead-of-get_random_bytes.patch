From 0283944e05106b0a4f35fa2beaa5d222fe3ab6f8 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:52 -0400
Subject: [fs] ext4: use prandom_u32() instead of get_random_bytes()

Message-id: <1414058125-4183-79-git-send-email-lczerner@redhat.com>
Patchwork-id: 98184
O-Subject: [RHEL 7.1 PATCH v2 078/171] ext4: use prandom_u32() instead of get_random_bytes()
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit dd1f723bf56bd96efc9d90e9e60dc511c79de48f

 Many of the uses of get_random_bytes() do not actually need
 cryptographically secure random numbers.  Replace those uses with a
 call to prandom_u32(), which is faster and which doesn't consume
 entropy from the /dev/random driver.

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ialloc.c b/fs/ext4/ialloc.c
index 137193f..0ee59a6 100644
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -432,7 +432,7 @@ static int find_group_orlov(struct super_block *sb, struct inode *parent,
    ext4fs_dirhash(qstr->name, qstr->len, &hinfo);
    grp = hinfo.hash;
   } else
-   get_random_bytes(&grp, sizeof(grp));
+   grp = prandom_u32();
   parent_group = (unsigned)grp % ngroups;
   for (i = 0; i < ngroups; i++) {
    g = (parent_group + i) % ngroups;
diff --git a/fs/ext4/mmp.c b/fs/ext4/mmp.c
index 214461e..04434ad 100644
--- a/fs/ext4/mmp.c
+++ b/fs/ext4/mmp.c
@@ -259,7 +259,7 @@ static unsigned int mmp_new_seq(void)
  u32 new_seq;
 
  do {
-  get_random_bytes(&new_seq, sizeof(u32));
+  new_seq = prandom_u32();
  } while (new_seq > EXT4_MMP_SEQ_MAX);
 
  return new_seq;
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 7a11e3c..287bc34 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -3072,7 +3072,6 @@ static struct ext4_li_request *ext4_li_request_new(struct super_block *sb,
 {
  struct ext4_sb_info *sbi = EXT4_SB(sb);
  struct ext4_li_request *elr;
- unsigned long rnd;
 
  elr = kzalloc(sizeof(*elr), GFP_KERNEL);
  if (!elr)
@@ -3087,10 +3086,8 @@ static struct ext4_li_request *ext4_li_request_new(struct super_block *sb,
   * spread the inode table initialization requests
   * better.
   */
- get_random_bytes(&rnd, sizeof(rnd));
- elr->lr_next_sched = jiffies + (unsigned long)rnd %
-        (EXT4_DEF_LI_MAX_START_DELAY * HZ);
-
+ elr->lr_next_sched = jiffies + (prandom_u32() %
+    (EXT4_DEF_LI_MAX_START_DELAY * HZ));
  return elr;
 }
 
-- 
1.7.1