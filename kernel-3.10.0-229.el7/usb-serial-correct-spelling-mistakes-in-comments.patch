From 69ece0db92904bfa332b06b99f92c81c155fd25f Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:05:08 -0400
Subject: [usb] serial: correct spelling mistakes in comments

Message-id: <1410887463-20674-237-git-send-email-dzickus@redhat.com>
Patchwork-id: 95231
O-Subject: [RHEL7 PATCH 236/591] USB: serial: correct spelling mistakes in comments
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit cd8c50532a42065339be1fe550e66b89d7ffd14f
Author: Rahul Bedarkar <rahulbedarkar89@gmail.com>
Date:   Thu Jan 2 19:29:24 2014 +0530

    USB: serial: correct spelling mistakes in comments

    Signed-off-by: Rahul Bedarkar <rahulbedarkar89@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/aircable.c b/drivers/usb/serial/aircable.c
index 6e320ce..80a9845 100644
--- a/drivers/usb/serial/aircable.c
+++ b/drivers/usb/serial/aircable.c
@@ -10,9 +10,9 @@
  *
  * The device works as an standard CDC device, it has 2 interfaces, the first
  * one is for firmware access and the second is the serial one.
- * The protocol is very simply, there are two posibilities reading or writing.
+ * The protocol is very simply, there are two possibilities reading or writing.
  * When writing the first urb must have a Header that starts with 0x20 0x29 the
- * next two bytes must say how much data will be sended.
+ * next two bytes must say how much data will be sent.
  * When reading the process is almost equal except that the header starts with
  * 0x00 0x20.
  *
@@ -31,15 +31,15 @@
  *
  * The driver registers himself with the USB-serial core and the USB Core. I had
  * to implement a probe function against USB-serial, because other way, the
- * driver was attaching himself to both interfaces. I have tryed with different
+ * driver was attaching himself to both interfaces. I have tried with different
  * configurations of usb_serial_driver with out exit, only the probe function
  * could handle this correctly.
  *
  * I have taken some info from a Greg Kroah-Hartman article:
  * http://www.linuxjournal.com/article/6573
  * And from Linux Device Driver Kit CD, which is a great work, the authors taken
- * the work to recompile lots of information an knowladge in drivers development
- * and made it all avaible inside a cd.
+ * the work to recompile lots of information an knowledge in drivers development
+ * and made it all available inside a cd.
  * URL: http://kernel.org/pub/linux/kernel/people/gregkh/ddk/
  *
  */
diff --git a/drivers/usb/serial/ark3116.c b/drivers/usb/serial/ark3116.c
index bc77e95..9d90926 100644
--- a/drivers/usb/serial/ark3116.c
+++ b/drivers/usb/serial/ark3116.c
@@ -71,7 +71,7 @@ struct ark3116_private {
  __u32   lcr; /* line control register value */
  __u32   hcr; /* handshake control register (0x8)
       * value */
- __u32   mcr; /* modem contol register value */
+ __u32   mcr; /* modem control register value */
 
  /* protects the status values below */
  spinlock_t  status_lock;
@@ -609,7 +609,7 @@ static void ark3116_read_int_callback(struct urb *urb)
 }
 
 
-/* Data comes in via the bulk (data) URB, erors/interrupts via the int URB.
+/* Data comes in via the bulk (data) URB, errors/interrupts via the int URB.
  * This means that we cannot be sure which data byte has an associated error
  * condition, so we report an error for all data in the next bulk read.
  *
diff --git a/drivers/usb/serial/belkin_sa.c b/drivers/usb/serial/belkin_sa.c
index 84217e7..336a105 100644
--- a/drivers/usb/serial/belkin_sa.c
+++ b/drivers/usb/serial/belkin_sa.c
@@ -18,7 +18,7 @@
  * driver
  *
  * TODO:
- * -- Add true modem contol line query capability.  Currently we track the
+ * -- Add true modem control line query capability.  Currently we track the
  *    states reported by the interrupt and the states we request.
  * -- Add support for flush commands
  */
diff --git a/drivers/usb/serial/cyberjack.c b/drivers/usb/serial/cyberjack.c
index 6e1b69d..1a71363 100644
--- a/drivers/usb/serial/cyberjack.c
+++ b/drivers/usb/serial/cyberjack.c
@@ -285,7 +285,7 @@ static void cyberjack_read_int_callback(struct urb *urb)
    goto resubmit;
   }
 
-  /* "+=" is probably more fault tollerant than "=" */
+  /* "+=" is probably more fault tolerant than "=" */
   priv->rdtodo += size;
 
   dev_dbg(dev, "%s - rdtodo: %d\n", __func__, priv->rdtodo);
diff --git a/drivers/usb/serial/garmin_gps.c b/drivers/usb/serial/garmin_gps.c
index f4ee74d..fac8f09 100644
--- a/drivers/usb/serial/garmin_gps.c
+++ b/drivers/usb/serial/garmin_gps.c
@@ -275,7 +275,7 @@ static int pkt_add(struct garmin_data *garmin_data_p,
  unsigned long flags;
  struct garmin_packet *pkt;
 
- /* process only packets containg data ... */
+ /* process only packets containing data ... */
  if (data_length) {
   pkt = kmalloc(sizeof(struct garmin_packet)+data_length,
         GFP_ATOMIC);
@@ -1144,7 +1144,7 @@ static void garmin_read_process(struct garmin_data *garmin_data_p,
  unsigned long flags;
 
  if (garmin_data_p->flags & FLAGS_DROP_DATA) {
-  /* abort-transfer cmd is actice */
+  /* abort-transfer cmd is active */
   dev_dbg(&garmin_data_p->port->dev, "%s - pkt dropped\n", __func__);
  } else if (garmin_data_p->state != STATE_DISCONNECTED &&
   garmin_data_p->state != STATE_RESET) {
diff --git a/drivers/usb/serial/iuu_phoenix.c b/drivers/usb/serial/iuu_phoenix.c
index 57c439a..fa0c3c1 100644
--- a/drivers/usb/serial/iuu_phoenix.c
+++ b/drivers/usb/serial/iuu_phoenix.c
@@ -770,7 +770,7 @@ uart_enable_failed:
  return status;
 }
 
-/*  Diables the IUU UART (a.k.a. the Phoenix voiderface) */
+/*  Disables the IUU UART (a.k.a. the Phoenix voiderface) */
 static int iuu_uart_off(struct usb_serial_port *port)
 {
  int status;
diff --git a/drivers/usb/serial/keyspan.c b/drivers/usb/serial/keyspan.c
index 6125fce..b0f6f5e 100644
--- a/drivers/usb/serial/keyspan.c
+++ b/drivers/usb/serial/keyspan.c
@@ -165,7 +165,7 @@ static void keyspan_set_termios(struct tty_struct *tty,
  if (d_details->calculate_baud_rate(port, baud_rate, d_details->baudclk,
     NULL, NULL, NULL, device_port) == KEYSPAN_BAUD_RATE_OK) {
   /* FIXME - more to do here to ensure rate changes cleanly */
-  /* FIXME - calcuate exact rate from divisor ? */
+  /* FIXME - calculate exact rate from divisor ? */
   p_priv->baud = baud_rate;
  } else
   baud_rate = tty_termios_baud_rate(old_termios);
diff --git a/drivers/usb/serial/keyspan_usa26msg.h b/drivers/usb/serial/keyspan_usa26msg.h
index 3808727..09e21e8 100644
--- a/drivers/usb/serial/keyspan_usa26msg.h
+++ b/drivers/usb/serial/keyspan_usa26msg.h
@@ -62,7 +62,7 @@
  or:
 
   (b) 0x80 bit set
-   indiates that the bytes following alternate data and
+   indicates that the bytes following alternate data and
    status bytes:
 
     STAT DATA STAT DATA STAT DATA STAT DATA ...
diff --git a/drivers/usb/serial/mos7720.c b/drivers/usb/serial/mos7720.c
index 1a2528a..b9b82ef 100644
--- a/drivers/usb/serial/mos7720.c
+++ b/drivers/usb/serial/mos7720.c
@@ -1,6 +1,6 @@
 /*
  * mos7720.c
- *   Controls the Moschip 7720 usb to dual port serial convertor
+ *   Controls the Moschip 7720 usb to dual port serial converter
  *
  * Copyright 2006 Moschip Semiconductor Tech. Ltd.
  *
@@ -46,7 +46,7 @@
 #define MOS_WRITE 0x0E
 #define MOS_READ 0x0D
 
-/* Interrupt Rotinue Defines */
+/* Interrupt Routines Defines */
 #define SERIAL_IIR_RLS 0x06
 #define SERIAL_IIR_RDA 0x04
 #define SERIAL_IIR_CTI 0x0c
@@ -438,7 +438,7 @@ static int write_parport_reg_nonblock(struct mos7715_parport *mos_parport,
  * not called the release function yet because someone has a serial port open.
  * The shared release_lock prevents the first, and the mutex and disconnected
  * flag maintained by usbserial covers the second.  We also use the msg_pending
- * flag to ensure that all synchronous usb messgage calls have completed before
+ * flag to ensure that all synchronous usb message calls have completed before
  * our release function can return.
  */
 static int parport_prologue(struct parport *pp)
@@ -469,7 +469,7 @@ static int parport_prologue(struct parport *pp)
 }
 
 /*
- * This is the the common bottom part of all parallel port functions that send
+ * This is the common bottom part of all parallel port functions that send
  * synchronous messages to the device.
  */
 static inline void parport_epilogue(struct parport *pp)
diff --git a/drivers/usb/serial/opticon.c b/drivers/usb/serial/opticon.c
index 90c77b2..e403bda 100644
--- a/drivers/usb/serial/opticon.c
+++ b/drivers/usb/serial/opticon.c
@@ -139,7 +139,7 @@ static int opticon_open(struct tty_struct *tty, struct usb_serial_port *port)
  /* Clear RTS line */
  send_control_msg(port, CONTROL_RTS, 0);
 
- /* clear the halt status of the enpoint */
+ /* clear the halt status of the endpoint */
  usb_clear_halt(port->serial->dev, port->read_urb->pipe);
 
  res = usb_serial_generic_open(tty, port);
@@ -214,7 +214,7 @@ static int opticon_write(struct tty_struct *tty, struct usb_serial_port *port,
 
  usb_serial_debug_data(&port->dev, __func__, count, buffer);
 
- /* The conncected devices do not have a bulk write endpoint,
+ /* The connected devices do not have a bulk write endpoint,
   * to transmit data to de barcode device the control endpoint is used */
  dr = kmalloc(sizeof(struct usb_ctrlrequest), GFP_NOIO);
  if (!dr) {
diff --git a/drivers/usb/serial/visor.h b/drivers/usb/serial/visor.h
index 88db4d0..4c456dd 100644
--- a/drivers/usb/serial/visor.h
+++ b/drivers/usb/serial/visor.h
@@ -136,7 +136,7 @@ struct visor_connection_info {
  * connections.end_point_info is non-zero.  If value is 0, then
  * connections.port contains the endpoint number, which is the same for in
  * and out.
- * @port_function_id: contains the creator id of the applicaton that opened
+ * @port_function_id: contains the creator id of the application that opened
  * this connection.
  * @port: contains the in/out endpoint number.  Is 0 if in and out endpoint
  * numbers are different.
diff --git a/drivers/usb/serial/zte_ev.c b/drivers/usb/serial/zte_ev.c
index eae2c87..288d265 100644
--- a/drivers/usb/serial/zte_ev.c
+++ b/drivers/usb/serial/zte_ev.c
@@ -53,7 +53,7 @@ static int zte_ev_usb_serial_open(struct tty_struct *tty,
      USB_CTRL_GET_TIMEOUT);
  dev_dbg(dev, "result = %d\n", result);
 
- /* send  2st cmd and recieve data */
+ /* send 2st cmd and receive data */
  /*
   * 16.0  CTL    a1 21 00 00  00 00 07 00   CLASS              25.1.0(5)
   * 16.0  DI     00 96 00 00  00 00 08
@@ -65,7 +65,7 @@ static int zte_ev_usb_serial_open(struct tty_struct *tty,
      USB_CTRL_GET_TIMEOUT);
  debug_data(dev, __func__, len, buf, result);
 
- /* send 3 cmd */
+ /* send 3rd cmd */
  /*
   * 16.0 CTL    21 20 00 00  00 00 07 00    CLASS                30.1.0
   * 16.0 DO     80 25 00 00  00 00 08       .%.....              30.2.0
@@ -84,7 +84,7 @@ static int zte_ev_usb_serial_open(struct tty_struct *tty,
      USB_CTRL_GET_TIMEOUT);
  debug_data(dev, __func__, len, buf, result);
 
- /* send 4 cmd */
+ /* send 4th cmd */
  /*
   * 16.0 CTL    21 22 03 00  00 00 00 00
   */
@@ -95,7 +95,7 @@ static int zte_ev_usb_serial_open(struct tty_struct *tty,
      USB_CTRL_GET_TIMEOUT);
  dev_dbg(dev, "result = %d\n", result);
 
- /* send 5 cmd */
+ /* send 5th cmd */
  /*
   * 16.0  CTL    a1 21 00 00  00 00 07 00   CLASS               33.1.0
   * 16.0  DI     80 25 00 00  00 00 08
@@ -107,7 +107,7 @@ static int zte_ev_usb_serial_open(struct tty_struct *tty,
      USB_CTRL_GET_TIMEOUT);
  debug_data(dev, __func__, len, buf, result);
 
- /* send 6 cmd */
+ /* send 6th cmd */
  /*
   * 16.0  CTL    21 20 00 00  00 00 07 00    CLASS               34.1.0
   * 16.0  DO     80 25 00 00  00 00 08
@@ -195,7 +195,7 @@ static void zte_ev_usb_serial_close(struct usb_serial_port *port)
      USB_CTRL_GET_TIMEOUT);
  debug_data(dev, __func__, len, buf, result);
 
- /* send 4 cmd */
+ /* send 4th cmd */
  /*
   * 16.0 CTL    21 20 00 00  00 00 07 00      CLASS            30.1.0
   * 16.0  DO    00 c2 01 00  00 00 08         .%.....          30.2.0
@@ -214,7 +214,7 @@ static void zte_ev_usb_serial_close(struct usb_serial_port *port)
      USB_CTRL_GET_TIMEOUT);
  debug_data(dev, __func__, len, buf, result);
 
- /* send 5 cmd */
+ /* send 5th cmd */
  /*
   * 16.0 CTL    21 22 03 00  00 00 00 00
   */
@@ -225,7 +225,7 @@ static void zte_ev_usb_serial_close(struct usb_serial_port *port)
      USB_CTRL_GET_TIMEOUT);
  dev_dbg(dev, "result = %d\n", result);
 
- /* send 6 cmd */
+ /* send 6th cmd */
  /*
   * 16.0  CTL    a1 21 00 00  00 00 07 00        CLASS          33.1.0
   * 16.0  DI     00 c2 01 00  00 00 08
@@ -237,7 +237,7 @@ static void zte_ev_usb_serial_close(struct usb_serial_port *port)
      USB_CTRL_GET_TIMEOUT);
  debug_data(dev, __func__, len, buf, result);
 
- /* send 7 cmd */
+ /* send 7th cmd */
  /*
   * 16.0  CTL    21 20 00 00  00 00 07 00  CLASS               354.1.0
   * 16.0  DO     00 c2 01 00  00 00 08     .......             354.2.0
@@ -256,7 +256,7 @@ static void zte_ev_usb_serial_close(struct usb_serial_port *port)
      USB_CTRL_GET_TIMEOUT);
  debug_data(dev, __func__, len, buf, result);
 
- /* send 8 cmd */
+ /* send 8th cmd */
  /*
   * 16.0 CTL    21 22 03 00  00 00 00 00
   */
-- 
1.7.1