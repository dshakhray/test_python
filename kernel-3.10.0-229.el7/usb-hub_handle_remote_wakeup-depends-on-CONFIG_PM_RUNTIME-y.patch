From ecd0210daf9f91429800a72758ee00917ad5c3f4 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:09:52 -0400
Subject: [usb] hub_handle_remote_wakeup() depends on CONFIG_PM_RUNTIME=y

Message-id: <1410887463-20674-521-git-send-email-dzickus@redhat.com>
Patchwork-id: 95434
O-Subject: [RHEL7 PATCH 520/591] usb: hub_handle_remote_wakeup() depends on CONFIG_PM_RUNTIME=y
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=821903

commit 7e73be227b1510a2ba1391185be7cc357e2226ef
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue May 20 18:09:31 2014 -0700

    usb: hub_handle_remote_wakeup() depends on CONFIG_PM_RUNTIME=y

    Per Alan:
    "You mean from within hub_handle_remote_wakeup()?  That routine will
    never get called if CONFIG_PM_RUNTIME isn't enabled, because khubd
    never sees wakeup requests if they arise during system suspend.

    In fact, that routine ought to go inside the "#ifdef CONFIG_PM_RUNTIME"
    portion of hub.c, along with the other suspend/resume code."

    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 292cd5d..7b40bd9 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -3353,6 +3353,55 @@ int usb_remote_wakeup(struct usb_device *udev)
  return status;
 }
 
+/* Returns 1 if there was a remote wakeup and a connect status change. */
+static int hub_handle_remote_wakeup(struct usb_hub *hub, unsigned int port,
+  u16 portstatus, u16 portchange)
+  __must_hold(&port_dev->status_lock)
+{
+ struct usb_port *port_dev = hub->ports[port - 1];
+ struct usb_device *hdev;
+ struct usb_device *udev;
+ int connect_change = 0;
+ int ret;
+
+ hdev = hub->hdev;
+ udev = port_dev->child;
+ if (!hub_is_superspeed(hdev)) {
+  if (!(portchange & USB_PORT_STAT_C_SUSPEND))
+   return 0;
+  usb_clear_port_feature(hdev, port, USB_PORT_FEAT_C_SUSPEND);
+ } else {
+  if (!udev || udev->state != USB_STATE_SUSPENDED ||
+     (portstatus & USB_PORT_STAT_LINK_STATE) !=
+     USB_SS_PORT_LS_U0)
+   return 0;
+ }
+
+ if (udev) {
+  /* TRSMRCY = 10 msec */
+  msleep(10);
+
+  usb_unlock_port(port_dev);
+  ret = usb_remote_wakeup(udev);
+  usb_lock_port(port_dev);
+  if (ret < 0)
+   connect_change = 1;
+ } else {
+  ret = -ENODEV;
+  hub_port_disable(hub, port, 1);
+ }
+ dev_dbg(&port_dev->dev, "resume, status %d\n", ret);
+ return connect_change;
+}
+
+#else
+
+static int hub_handle_remote_wakeup(struct usb_hub *hub, unsigned int port,
+  u16 portstatus, u16 portchange)
+{
+ return 0;
+}
+
 #endif
 
 static int check_ports_changed(struct usb_hub *hub)
@@ -4699,47 +4748,6 @@ static void hub_port_connect_change(struct usb_hub *hub, int port1,
  usb_lock_port(port_dev);
 }
 
-/* Returns 1 if there was a remote wakeup and a connect status change. */
-static int hub_handle_remote_wakeup(struct usb_hub *hub, unsigned int port,
-  u16 portstatus, u16 portchange)
-  __must_hold(&port_dev->status_lock)
-{
- struct usb_port *port_dev = hub->ports[port - 1];
- struct usb_device *hdev;
- struct usb_device *udev;
- int connect_change = 0;
- int ret;
-
- hdev = hub->hdev;
- udev = port_dev->child;
- if (!hub_is_superspeed(hdev)) {
-  if (!(portchange & USB_PORT_STAT_C_SUSPEND))
-   return 0;
-  usb_clear_port_feature(hdev, port, USB_PORT_FEAT_C_SUSPEND);
- } else {
-  if (!udev || udev->state != USB_STATE_SUSPENDED ||
-     (portstatus & USB_PORT_STAT_LINK_STATE) !=
-     USB_SS_PORT_LS_U0)
-   return 0;
- }
-
- if (udev) {
-  /* TRSMRCY = 10 msec */
-  msleep(10);
-
-  usb_unlock_port(port_dev);
-  ret = usb_remote_wakeup(udev);
-  usb_lock_port(port_dev);
-  if (ret < 0)
-   connect_change = 1;
- } else {
-  ret = -ENODEV;
-  hub_port_disable(hub, port, 1);
- }
- dev_dbg(&port_dev->dev, "resume, status %d\n", ret);
- return connect_change;
-}
-
 static void port_event(struct usb_hub *hub, int port1)
   __must_hold(&port_dev->status_lock)
 {
diff --git a/drivers/usb/core/usb.h b/drivers/usb/core/usb.h
index dba7bf3..19159d6 100644
--- a/drivers/usb/core/usb.h
+++ b/drivers/usb/core/usb.h
@@ -111,11 +111,6 @@ static inline int usb_autoresume_device(struct usb_device *udev)
  return 0;
 }
 
-static inline int usb_remote_wakeup(struct usb_device *udev)
-{
- return 0;
-}
-
 static inline int usb_set_usb2_hardware_lpm(struct usb_device *udev, int enable)
 {
  return 0;
-- 
1.7.1