From b3ce79a83d06b9ace4bfdf7c91ee90f8b4381e9a Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:08:38 -0400
Subject: [powerpc] Fix endian issues in kexec and crash dump code

Message-id: <1410545655-205645-290-git-send-email-dzickus@redhat.com>
Patchwork-id: 94419
O-Subject: [RHEL7 PATCH 289/626] powerpc: Fix endian issues in kexec and crash dump code
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit ea961a828fe7250e954f086d74d9323c3d44c3e4
Author: Anton Blanchard <anton@samba.org>
Date:   Wed Jan 22 08:40:28 2014 +1100

    powerpc: Fix endian issues in kexec and crash dump code

    We expose a number of OF properties in the kexec and crash dump code
    and these need to be big endian.

    Cc: stable@vger.kernel.org # v3.13
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/machine_kexec.c b/arch/powerpc/kernel/machine_kexec.c
index 6c4e4d6..506bc24 100644
--- a/arch/powerpc/kernel/machine_kexec.c
+++ b/arch/powerpc/kernel/machine_kexec.c
@@ -235,7 +235,9 @@ int overlaps_crashkernel(unsigned long start, unsigned long size)
 
 /* Values we need to export to the second kernel via the device tree. */
 static phys_addr_t kernel_end;
+static phys_addr_t crashk_base;
 static phys_addr_t crashk_size;
+static unsigned long long mem_limit;
 
 static struct property kernel_end_prop = {
  .name = "linux,kernel-end",
@@ -246,7 +248,7 @@ static struct property kernel_end_prop = {
 static struct property crashk_base_prop = {
  .name = "linux,crashkernel-base",
  .length = sizeof(phys_addr_t),
- .value = &crashk_res.start,
+ .value = &crashk_base
 };
 
 static struct property crashk_size_prop = {
@@ -258,9 +260,11 @@ static struct property crashk_size_prop = {
 static struct property memory_limit_prop = {
  .name = "linux,memory-limit",
  .length = sizeof(unsigned long long),
- .value = &memory_limit,
+ .value = &mem_limit,
 };
 
+#define cpu_to_be_ulong __PASTE(cpu_to_be, BITS_PER_LONG)
+
 static void __init export_crashk_values(struct device_node *node)
 {
  struct property *prop;
@@ -276,8 +280,9 @@ static void __init export_crashk_values(struct device_node *node)
   of_remove_property(node, prop);
 
  if (crashk_res.start != 0) {
+  crashk_base = cpu_to_be_ulong(crashk_res.start),
   of_add_property(node, &crashk_base_prop);
-  crashk_size = resource_size(&crashk_res);
+  crashk_size = cpu_to_be_ulong(resource_size(&crashk_res));
   of_add_property(node, &crashk_size_prop);
  }
 
@@ -285,6 +290,7 @@ static void __init export_crashk_values(struct device_node *node)
   * memory_limit is required by the kexec-tools to limit the
   * crash regions to the actual memory used.
   */
+ mem_limit = cpu_to_be_ulong(memory_limit);
  of_update_property(node, &memory_limit_prop);
 }
 
@@ -303,7 +309,7 @@ static int __init kexec_setup(void)
   of_remove_property(node, prop);
 
  /* information needed by userspace when using default_machine_kexec */
- kernel_end = __pa(_end);
+ kernel_end = cpu_to_be_ulong(__pa(_end));
  of_add_property(node, &kernel_end_prop);
 
  export_crashk_values(node);
diff --git a/arch/powerpc/kernel/machine_kexec_64.c b/arch/powerpc/kernel/machine_kexec_64.c
index be4e6d6..59d229a 100644
--- a/arch/powerpc/kernel/machine_kexec_64.c
+++ b/arch/powerpc/kernel/machine_kexec_64.c
@@ -369,6 +369,7 @@ void default_machine_kexec(struct kimage *image)
 
 /* Values we need to export to the second kernel via the device tree. */
 static unsigned long htab_base;
+static unsigned long htab_size;
 
 static struct property htab_base_prop = {
  .name = "linux,htab-base",
@@ -379,7 +380,7 @@ static struct property htab_base_prop = {
 static struct property htab_size_prop = {
  .name = "linux,htab-size",
  .length = sizeof(unsigned long),
- .value = &htab_size_bytes,
+ .value = &htab_size,
 };
 
 static int __init export_htab_values(void)
@@ -403,8 +404,9 @@ static int __init export_htab_values(void)
  if (prop)
   of_remove_property(node, prop);
 
- htab_base = __pa(htab_address);
+ htab_base = cpu_to_be64(__pa(htab_address));
  of_add_property(node, &htab_base_prop);
+ htab_size = cpu_to_be64(htab_size_bytes);
  of_add_property(node, &htab_size_prop);
 
  of_node_put(node);
-- 
1.7.1