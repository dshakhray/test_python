From 82d016fa72888936761465f0ba42c4e126d2e5ac Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:04:31 -0400
Subject: [powerpc] Convert platforms to smp_generic_cpu_bootable

Message-id: <1410545655-205645-43-git-send-email-dzickus@redhat.com>
Patchwork-id: 94138
O-Subject: [RHEL7 PATCH 042/626] powerpc: Convert platforms to smp_generic_cpu_bootable
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 39fd40274d1f3a52152ae6fc22f428d93f1a8363
Author: Andy Fleming <afleming@freescale.com>
Date:   Mon Aug 5 14:58:35 2013 -0500

    powerpc: Convert platforms to smp_generic_cpu_bootable

    T4, Cell, powernv, and pseries had the same implementation, so switch
    them to use a generic version. A2 apparently had a version, but
    removed it at some point, so we remove the declaration, too.

    Signed-off-by: Andy Fleming <afleming@freescale.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/platforms/85xx/smp.c b/arch/powerpc/platforms/85xx/smp.c
index 5ced4f5..ea9c626 100644
--- a/arch/powerpc/platforms/85xx/smp.c
+++ b/arch/powerpc/platforms/85xx/smp.c
@@ -255,6 +255,7 @@ out:
 
 struct smp_ops_t smp_85xx_ops = {
  .kick_cpu = smp_85xx_kick_cpu,
+ .cpu_bootable = smp_generic_cpu_bootable,
 #ifdef CONFIG_HOTPLUG_CPU
  .cpu_disable = generic_cpu_disable,
  .cpu_die = generic_cpu_die,
diff --git a/arch/powerpc/platforms/cell/smp.c b/arch/powerpc/platforms/cell/smp.c
index f75f6fc..90745ea 100644
--- a/arch/powerpc/platforms/cell/smp.c
+++ b/arch/powerpc/platforms/cell/smp.c
@@ -136,25 +136,12 @@ static int smp_cell_kick_cpu(int nr)
  return 0;
 }
 
-static int smp_cell_cpu_bootable(unsigned int nr)
-{
- /* Special case - we inhibit secondary thread startup
-  * during boot if the user requests it.  Odd-numbered
-  * cpus are assumed to be secondary threads.
-  */
- if (system_state == SYSTEM_BOOTING &&
-     cpu_has_feature(CPU_FTR_SMT) &&
-     !smt_enabled_at_boot && cpu_thread_in_core(nr) != 0)
-  return 0;
-
- return 1;
-}
 static struct smp_ops_t bpa_iic_smp_ops = {
  .message_pass = iic_message_pass,
  .probe  = smp_iic_probe,
  .kick_cpu = smp_cell_kick_cpu,
  .setup_cpu = smp_cell_setup_cpu,
- .cpu_bootable = smp_cell_cpu_bootable,
+ .cpu_bootable = smp_generic_cpu_bootable,
 };
 
 /* This is called very early */
diff --git a/arch/powerpc/platforms/powernv/smp.c b/arch/powerpc/platforms/powernv/smp.c
index 89e3857..908672b 100644
--- a/arch/powerpc/platforms/powernv/smp.c
+++ b/arch/powerpc/platforms/powernv/smp.c
@@ -46,22 +46,6 @@ static void pnv_smp_setup_cpu(int cpu)
   xics_setup_cpu();
 }
 
-static int pnv_smp_cpu_bootable(unsigned int nr)
-{
- /* Special case - we inhibit secondary thread startup
-  * during boot if the user requests it.
-  */
- if (system_state == SYSTEM_BOOTING && cpu_has_feature(CPU_FTR_SMT)) {
-  if (!smt_enabled_at_boot && cpu_thread_in_core(nr) != 0)
-   return 0;
-  if (smt_enabled_at_boot
-      && cpu_thread_in_core(nr) >= smt_enabled_at_boot)
-   return 0;
- }
-
- return 1;
-}
-
 int pnv_smp_kick_cpu(int nr)
 {
  unsigned int pcpu = get_hard_smp_processor_id(nr);
@@ -195,7 +179,7 @@ static struct smp_ops_t pnv_smp_ops = {
  .probe  = xics_smp_probe,
  .kick_cpu = pnv_smp_kick_cpu,
  .setup_cpu = pnv_smp_setup_cpu,
- .cpu_bootable = pnv_smp_cpu_bootable,
+ .cpu_bootable = smp_generic_cpu_bootable,
 #ifdef CONFIG_HOTPLUG_CPU
  .cpu_disable = pnv_smp_cpu_disable,
  .cpu_die = generic_cpu_die,
diff --git a/arch/powerpc/platforms/pseries/smp.c b/arch/powerpc/platforms/pseries/smp.c
index d98394c..2c27f5d 100644
--- a/arch/powerpc/platforms/pseries/smp.c
+++ b/arch/powerpc/platforms/pseries/smp.c
@@ -187,22 +187,6 @@ static int smp_pSeries_kick_cpu(int nr)
  return 0;
 }
 
-static int smp_pSeries_cpu_bootable(unsigned int nr)
-{
- /* Special case - we inhibit secondary thread startup
-  * during boot if the user requests it.
-  */
- if (system_state == SYSTEM_BOOTING && cpu_has_feature(CPU_FTR_SMT)) {
-  if (!smt_enabled_at_boot && cpu_thread_in_core(nr) != 0)
-   return 0;
-  if (smt_enabled_at_boot
-      && cpu_thread_in_core(nr) >= smt_enabled_at_boot)
-   return 0;
- }
-
- return 1;
-}
-
 /* Only used on systems that support multiple IPI mechanisms */
 static void pSeries_cause_ipi_mux(int cpu, unsigned long data)
 {
@@ -237,7 +221,7 @@ static struct smp_ops_t pSeries_xics_smp_ops = {
  .probe  = pSeries_smp_probe,
  .kick_cpu = smp_pSeries_kick_cpu,
  .setup_cpu = smp_xics_setup_cpu,
- .cpu_bootable = smp_pSeries_cpu_bootable,
+ .cpu_bootable = smp_generic_cpu_bootable,
 };
 
 /* This is called very early */
diff --git a/arch/powerpc/platforms/wsp/wsp.h b/arch/powerpc/platforms/wsp/wsp.h
index 62ef21a..a563a8a 100644
--- a/arch/powerpc/platforms/wsp/wsp.h
+++ b/arch/powerpc/platforms/wsp/wsp.h
@@ -17,7 +17,6 @@ extern void scom_init_wsp(void);
 extern void a2_setup_smp(void);
 extern int a2_scom_startup_cpu(unsigned int lcpu, int thr_idx,
           struct device_node *np);
-extern int smp_a2_cpu_bootable(unsigned int nr);
 extern int smp_a2_kick_cpu(int nr);
 
 extern void opb_pic_init(void);
-- 
1.7.1