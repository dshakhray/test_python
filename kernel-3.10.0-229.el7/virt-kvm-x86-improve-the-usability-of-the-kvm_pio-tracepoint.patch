From abb0bcd872719726116f4fbe46ce76fb0fecf039 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:39:47 -0400
Subject: [virt] kvm/x86: improve the usability of the 'kvm_pio' tracepoint

Message-id: <1406040016-3289-193-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86271
O-Subject: [RHEL7 PATCH v2 192/221] KVM: x86: improve the usability of the 'kvm_pio' tracepoint
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ulrich Obergfell <uobergfe@redhat.com>

This patch moves the 'kvm_pio' tracepoint to emulator_pio_in_emulated()
and emulator_pio_out_emulated(), and it adds an argument (a pointer to
the 'pio_data'). A single 8-bit or 16-bit or 32-bit data item is fetched
from 'pio_data' (depending on 'size'), and the value is included in the
trace record ('val'). If 'count' is greater than one, this is indicated
by the string "(...)" in the trace output.

Signed-off-by: Ulrich Obergfell <uobergfe@redhat.com>
Reviewed-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 1171903d899b1930f502b4c10a2a3565d6603c71)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/trace.h b/arch/x86/kvm/trace.h
index 545245d..33574c9 100644
--- a/arch/x86/kvm/trace.h
+++ b/arch/x86/kvm/trace.h
@@ -91,16 +91,21 @@ TRACE_EVENT(kvm_hv_hypercall,
 /*
  * Tracepoint for PIO.
  */
+
+#define KVM_PIO_IN   0
+#define KVM_PIO_OUT  1
+
 TRACE_EVENT(kvm_pio,
  TP_PROTO(unsigned int rw, unsigned int port, unsigned int size,
-   unsigned int count),
- TP_ARGS(rw, port, size, count),
+   unsigned int count, void *data),
+ TP_ARGS(rw, port, size, count, data),
 
  TP_STRUCT__entry(
   __field( unsigned int,  rw  )
   __field( unsigned int,  port  )
   __field( unsigned int,  size  )
   __field( unsigned int, count  )
+  __field( unsigned int, val  )
  ),
 
  TP_fast_assign(
@@ -108,11 +113,18 @@ TRACE_EVENT(kvm_pio,
   __entry->port  = port;
   __entry->size  = size;
   __entry->count  = count;
+  if (size == 1)
+   __entry->val = *(unsigned char *)data;
+  else if (size == 2)
+   __entry->val = *(unsigned short *)data;
+  else
+   __entry->val = *(unsigned int *)data;
  ),
 
- TP_printk("pio_%s at 0x%x size %d count %d",
+ TP_printk("pio_%s at 0x%x size %d count %d val 0x%x %s",
     __entry->rw ? "write" : "read",
-    __entry->port, __entry->size, __entry->count)
+    __entry->port, __entry->size, __entry->count, __entry->val,
+    __entry->count > 1 ? "(...)" : "")
 );
 
 /*
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index da571a9..0859978 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -4474,8 +4474,6 @@ static int emulator_pio_in_out(struct kvm_vcpu *vcpu, int size,
           unsigned short port, void *val,
           unsigned int count, bool in)
 {
- trace_kvm_pio(!in, port, size, count);
-
  vcpu->arch.pio.port = port;
  vcpu->arch.pio.in = in;
  vcpu->arch.pio.count  = count;
@@ -4510,6 +4508,7 @@ static int emulator_pio_in_emulated(struct x86_emulate_ctxt *ctxt,
  if (ret) {
 data_avail:
   memcpy(val, vcpu->arch.pio_data, size * count);
+  trace_kvm_pio(KVM_PIO_IN, port, size, count, vcpu->arch.pio_data);
   vcpu->arch.pio.count = 0;
   return 1;
  }
@@ -4524,6 +4523,7 @@ static int emulator_pio_out_emulated(struct x86_emulate_ctxt *ctxt,
  struct kvm_vcpu *vcpu = emul_to_vcpu(ctxt);
 
  memcpy(vcpu->arch.pio_data, val, size * count);
+ trace_kvm_pio(KVM_PIO_OUT, port, size, count, vcpu->arch.pio_data);
  return emulator_pio_in_out(vcpu, size, port, (void *)val, count, false);
 }
 
-- 
1.7.1