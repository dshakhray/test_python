From 75fd43467494162b7b098a279f86cb3de6704d63 Mon Sep 17 00:00:00 2001
From: Vivek Goyal <vgoyal@redhat.com>
Date: Tue, 19 Aug 2014 22:02:52 -0400
Subject: [crypto] Revert: keys: verify a certificate is signed by a 'trusted' key

Message-id: <1408485785-777-21-git-send-email-vgoyal@redhat.com>
Patchwork-id: 88390
O-Subject: [RHEL7.1 PATCH 20/33] Revert "KEYS: verify a certificate is signed by a 'trusted' key"
Bugzilla: 1129779
RH-Acked-by: David Howells <dhowells@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

BZ:1129779

commit 4c1cc40a2d49500d84038ff751bc6cd183e729b5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date: Sat, 23 Nov 2013 16:38:17 -0800

This reverts commit 09fbc47373826d67531380662b516de2da120545, which
caused the following build errors:

  crypto/asymmetric_keys/x509_public_key.c: In function 'x509_key_preparse':
  crypto/asymmetric_keys/x509_public_key.c:237:35: error: 'system_trusted_keyring' undeclared (first use in this function)
   ret = x509_validate_trust(cert, system_trusted_keyring);
                                   ^
  crypto/asymmetric_keys/x509_public_key.c:237:35: note: each undeclared identifier is reported only once for each function it appears in

reported by Jim Davis. Mimi says:

 "I made the classic mistake of requesting this patch to be upstreamed
  at the last second, rather than waiting until the next open window.

  At this point, the best course would probably be to revert the two
  commits and fix them for the next open window"

Reported-by: Jim Davis <jim.epost@gmail.com>
Acked-by: Mimi Zohar <zohar@linux.vnet.ibm.com>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/crypto/asymmetric_keys/x509_public_key.c b/crypto/asymmetric_keys/x509_public_key.c
index 0a6bfad..2fcf47e 100644
--- a/crypto/asymmetric_keys/x509_public_key.c
+++ b/crypto/asymmetric_keys/x509_public_key.c
@@ -18,60 +18,12 @@
 #include <linux/asn1_decoder.h>
 #include <keys/asymmetric-subtype.h>
 #include <keys/asymmetric-parser.h>
-#include <keys/system_keyring.h>
 #include <crypto/hash.h>
 #include "asymmetric_keys.h"
 #include "public_key.h"
 #include "x509_parser.h"
 
 /*
- * Find a key in the given keyring by issuer and authority.
- */
-static struct key *x509_request_asymmetric_key(
- struct key *keyring,
- const char *signer, size_t signer_len,
- const char *authority, size_t auth_len)
-{
- key_ref_t key;
- char *id;
-
- /* Construct an identifier. */
- id = kmalloc(signer_len + 2 + auth_len + 1, GFP_KERNEL);
- if (!id)
-  return ERR_PTR(-ENOMEM);
-
- memcpy(id, signer, signer_len);
- id[signer_len + 0] = ':';
- id[signer_len + 1] = ' ';
- memcpy(id + signer_len + 2, authority, auth_len);
- id[signer_len + 2 + auth_len] = 0;
-
- pr_debug("Look up: \"%s\"\n", id);
-
- key = keyring_search(make_key_ref(keyring, 1),
-        &key_type_asymmetric, id);
- if (IS_ERR(key))
-  pr_debug("Request for module key '%s' err %ld\n",
-    id, PTR_ERR(key));
- kfree(id);
-
- if (IS_ERR(key)) {
-  switch (PTR_ERR(key)) {
-   /* Hide some search errors */
-  case -EACCES:
-  case -ENOTDIR:
-  case -EAGAIN:
-   return ERR_PTR(-ENOKEY);
-  default:
-   return ERR_CAST(key);
-  }
- }
-
- pr_devel("<==%s() = 0 [%x]\n", __func__, key_serial(key_ref_to_ptr(key)));
- return key_ref_to_ptr(key);
-}
-
-/*
  * Set up the signature parameters in an X.509 certificate.  This involves
  * digesting the signed data and extracting the signature.
  */
@@ -151,33 +103,6 @@ int x509_check_signature(const struct public_key *pub,
 EXPORT_SYMBOL_GPL(x509_check_signature);
 
 /*
- * Check the new certificate against the ones in the trust keyring.  If one of
- * those is the signing key and validates the new certificate, then mark the
- * new certificate as being trusted.
- *
- * Return 0 if the new certificate was successfully validated, 1 if we couldn't
- * find a matching parent certificate in the trusted list and an error if there
- * is a matching certificate but the signature check fails.
- */
-static int x509_validate_trust(struct x509_certificate *cert,
-          struct key *trust_keyring)
-{
- const struct public_key *pk;
- struct key *key;
- int ret = 1;
-
- key = x509_request_asymmetric_key(trust_keyring,
-       cert->issuer, strlen(cert->issuer),
-       cert->authority,
-       strlen(cert->authority));
- if (!IS_ERR(key))  {
-  pk = key->payload.data;
-  ret = x509_check_signature(pk, cert);
- }
- return ret;
-}
-
-/*
  * Attempt to parse a data blob for a key as an X509 certificate.
  */
 static int x509_key_preparse(struct key_preparsed_payload *prep)
@@ -229,13 +154,9 @@ static int x509_key_preparse(struct key_preparsed_payload *prep)
  /* Check the signature on the key if it appears to be self-signed */
  if (!cert->authority ||
      strcmp(cert->fingerprint, cert->authority) == 0) {
-  ret = x509_check_signature(cert->pub, cert); /* self-signed */
+  ret = x509_check_signature(cert->pub, cert);
   if (ret < 0)
    goto error_free_cert;
- } else {
-  ret = x509_validate_trust(cert, system_trusted_keyring);
-  if (!ret)
-   prep->trusted = 1;
  }
 
  /* Propose a description */
-- 
1.7.1