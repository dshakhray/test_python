From 702133444e7c2ec564fca82c2eaaa66cb89a5c13 Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 17 Dec 2014 21:39:39 -0500
Subject: [drm] i915: tame the chattermouth

Message-id: <1418852380-13061-89-git-send-email-rclark@redhat.com>
Patchwork-id: 102207
O-Subject: [RHEL7 drm 88/89] drm/i915: tame the chattermouth (v2)
Bugzilla: 1173317
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

From: Rob Clark <robdclark@gmail.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1173317
Upstream: drm-intel-nightly

Many distro's have mechanism in place to collect and automatically file
bugs for failed WARN()s.  And since i915 has a lot of hw state sanity
checks which result in WARN(), it generates quite a lot of noise which
is somewhat disconcerting to the end user.

Separate out the internal hw-is-in-the-state-I-expected checks into
I915_STATE_WARN()s and allow configuration via i915.verbose_checks module
param about whether this will generate a full blown stacktrace or just
DRM_ERROR().  The new moduleparam defaults to true, so by default there
is no change in behavior.  And even when disabled, you will still get
an error message logged.

v2: paint the macro names blue, clarify that the default behavior
    remains the same as before

Signed-off-by: Rob Clark <robdclark@gmail.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index a7eb3eb..5e3020c 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -55,6 +55,35 @@
 #define DRIVER_DESC  "Intel Graphics"
 #define DRIVER_DATE  "20080730"
 
+/* Use I915_STATE_WARN(x) and I915_STATE_WARN_ON() (rather than WARN() and
+ * WARN_ON()) for hw state sanity checks to check for unexpected conditions
+ * which may not necessarily be a user visible problem.  This will either
+ * WARN() or DRM_ERROR() depending on the verbose_checks moduleparam, to
+ * enable distros and users to tailor their preferred amount of i915 abrt
+ * spam.
+ */
+#define I915_STATE_WARN(condition, format...) ({   \
+ int __ret_warn_on = !!(condition);    \
+ if (unlikely(__ret_warn_on)) {     \
+  if (i915.verbose_state_checks)    \
+   __WARN_printf(format);    \
+  else        \
+   DRM_ERROR(format);    \
+ }        \
+ unlikely(__ret_warn_on);     \
+})
+
+#define I915_STATE_WARN_ON(condition) ({    \
+ int __ret_warn_on = !!(condition);    \
+ if (unlikely(__ret_warn_on)) {     \
+  if (i915.verbose_state_checks)    \
+   __WARN_printf("WARN_ON(" #condition ")\n"); \
+  else        \
+   DRM_ERROR("WARN_ON(" #condition ")\n");  \
+ }        \
+ unlikely(__ret_warn_on);     \
+})
+
 enum pipe {
  INVALID_PIPE = -1,
  PIPE_A = 0,
@@ -2055,6 +2084,7 @@ struct i915_params {
  bool reset;
  bool disable_display;
  bool disable_vtd_wa;
+ bool verbose_state_checks;
 };
 extern struct i915_params i915 __read_mostly;
 
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index d05a2af..2a0c8d1 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -48,6 +48,7 @@ struct i915_params i915 __read_mostly = {
  .disable_display = 0,
  .enable_cmd_parser = 1,
  .disable_vtd_wa = 0,
+ .verbose_state_checks = 0,
 };
 
 module_param_named(modeset, i915.modeset, int, 0400);
@@ -156,3 +157,7 @@ MODULE_PARM_DESC(disable_vtd_wa, "Disable all VT-d workarounds (default: false)"
 module_param_named(enable_cmd_parser, i915.enable_cmd_parser, int, 0600);
 MODULE_PARM_DESC(enable_cmd_parser,
    "Enable command parsing (1=enabled [default], 0=disabled)");
+
+module_param_named(verbose_state_checks, i915.verbose_state_checks, bool, 0600);
+MODULE_PARM_DESC(verbose_state_checks,
+ "Enable verbose logs (ie. WARN_ON()) in case of unexpected hw state conditions.");
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 46d11ed..317cab4 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -1027,7 +1027,7 @@ void assert_pll(struct drm_i915_private *dev_priv,
  reg = DPLL(pipe);
  val = I915_READ(reg);
  cur_state = !!(val & DPLL_VCO_ENABLE);
- WARN(cur_state != state,
+ I915_STATE_WARN(cur_state != state,
       "PLL state assertion failure (expected %s, current %s)\n",
       state_string(state), state_string(cur_state));
 }
@@ -1043,7 +1043,7 @@ static void assert_dsi_pll(struct drm_i915_private *dev_priv, bool state)
  mutex_unlock(&dev_priv->dpio_lock);
 
  cur_state = val & DSI_PLL_VCO_EN;
- WARN(cur_state != state,
+ I915_STATE_WARN(cur_state != state,
       "DSI PLL state assertion failure (expected %s, current %s)\n",
       state_string(state), state_string(cur_state));
 }
@@ -1079,7 +1079,7 @@ void assert_shared_dpll(struct drm_i915_private *dev_priv,
   return;
 
  cur_state = pll->get_hw_state(dev_priv, pll, &hw_state);
- WARN(cur_state != state,
+ I915_STATE_WARN(cur_state != state,
       "%s assertion failure (expected %s, current %s)\n",
       pll->name, state_string(state), state_string(cur_state));
 }
@@ -1103,7 +1103,7 @@ static void assert_fdi_tx(struct drm_i915_private *dev_priv,
   val = I915_READ(reg);
   cur_state = !!(val & FDI_TX_ENABLE);
  }
- WARN(cur_state != state,
+ I915_STATE_WARN(cur_state != state,
       "FDI TX state assertion failure (expected %s, current %s)\n",
       state_string(state), state_string(cur_state));
 }
@@ -1120,7 +1120,7 @@ static void assert_fdi_rx(struct drm_i915_private *dev_priv,
  reg = FDI_RX_CTL(pipe);
  val = I915_READ(reg);
  cur_state = !!(val & FDI_RX_ENABLE);
- WARN(cur_state != state,
+ I915_STATE_WARN(cur_state != state,
       "FDI RX state assertion failure (expected %s, current %s)\n",
       state_string(state), state_string(cur_state));
 }
@@ -1143,7 +1143,7 @@ static void assert_fdi_tx_pll_enabled(struct drm_i915_private *dev_priv,
 
  reg = FDI_TX_CTL(pipe);
  val = I915_READ(reg);
- WARN(!(val & FDI_TX_PLL_ENABLE), "FDI TX PLL assertion failure, should be active but is disabled\n");
+ I915_STATE_WARN(!(val & FDI_TX_PLL_ENABLE), "FDI TX PLL assertion failure, should be active but is disabled\n");
 }
 
 void assert_fdi_rx_pll(struct drm_i915_private *dev_priv,
@@ -1156,7 +1156,7 @@ void assert_fdi_rx_pll(struct drm_i915_private *dev_priv,
  reg = FDI_RX_CTL(pipe);
  val = I915_READ(reg);
  cur_state = !!(val & FDI_RX_PLL_ENABLE);
- WARN(cur_state != state,
+ I915_STATE_WARN(cur_state != state,
       "FDI RX PLL assertion failure (expected %s, current %s)\n",
       state_string(state), state_string(cur_state));
 }
@@ -1185,7 +1185,7 @@ static void assert_panel_unlocked(struct drm_i915_private *dev_priv,
  if (I915_READ(lvds_reg) & LVDS_PIPEB_SELECT)
   panel_pipe = PIPE_B;
 
- WARN(panel_pipe == pipe && locked,
+ I915_STATE_WARN(panel_pipe == pipe && locked,
       "panel assertion failure, pipe %c regs locked\n",
       pipe_name(pipe));
 }
@@ -1201,7 +1201,7 @@ static void assert_cursor(struct drm_i915_private *dev_priv,
  else
   cur_state = I915_READ(CURCNTR(pipe)) & CURSOR_MODE;
 
- WARN(cur_state != state,
+ I915_STATE_WARN(cur_state != state,
       "cursor on pipe %c assertion failure (expected %s, current %s)\n",
       pipe_name(pipe), state_string(state), state_string(cur_state));
 }
@@ -1230,7 +1230,7 @@ void assert_pipe(struct drm_i915_private *dev_priv,
   cur_state = !!(val & PIPECONF_ENABLE);
  }
 
- WARN(cur_state != state,
+ I915_STATE_WARN(cur_state != state,
       "pipe %c assertion failure (expected %s, current %s)\n",
       pipe_name(pipe), state_string(state), state_string(cur_state));
 }
@@ -1245,7 +1245,7 @@ static void assert_plane(struct drm_i915_private *dev_priv,
  reg = DSPCNTR(plane);
  val = I915_READ(reg);
  cur_state = !!(val & DISPLAY_PLANE_ENABLE);
- WARN(cur_state != state,
+ I915_STATE_WARN(cur_state != state,
       "plane %c assertion failure (expected %s, current %s)\n",
       plane_name(plane), state_string(state), state_string(cur_state));
 }
@@ -1265,7 +1265,7 @@ static void assert_planes_disabled(struct drm_i915_private *dev_priv,
  if (INTEL_INFO(dev)->gen >= 4) {
   reg = DSPCNTR(pipe);
   val = I915_READ(reg);
-  WARN(val & DISPLAY_PLANE_ENABLE,
+  I915_STATE_WARN(val & DISPLAY_PLANE_ENABLE,
        "plane %c assertion failure, should be disabled but not\n",
        plane_name(pipe));
   return;
@@ -1277,7 +1277,7 @@ static void assert_planes_disabled(struct drm_i915_private *dev_priv,
   val = I915_READ(reg);
   cur_pipe = (val & DISPPLANE_SEL_PIPE_MASK) >>
    DISPPLANE_SEL_PIPE_SHIFT;
-  WARN((val & DISPLAY_PLANE_ENABLE) && pipe == cur_pipe,
+  I915_STATE_WARN((val & DISPLAY_PLANE_ENABLE) && pipe == cur_pipe,
        "plane %c assertion failure, should be off on pipe %c but is still active\n",
        plane_name(i), pipe_name(pipe));
  }
@@ -1294,20 +1294,20 @@ static void assert_sprites_disabled(struct drm_i915_private *dev_priv,
   for_each_sprite(pipe, sprite) {
    reg = SPCNTR(pipe, sprite);
    val = I915_READ(reg);
-   WARN(val & SP_ENABLE,
+   I915_STATE_WARN(val & SP_ENABLE,
         "sprite %c assertion failure, should be off on pipe %c but is still active\n",
         sprite_name(pipe, sprite), pipe_name(pipe));
   }
  } else if (INTEL_INFO(dev)->gen >= 7) {
   reg = SPRCTL(pipe);
   val = I915_READ(reg);
-  WARN(val & SPRITE_ENABLE,
+  I915_STATE_WARN(val & SPRITE_ENABLE,
        "sprite %c assertion failure, should be off on pipe %c but is still active\n",
        plane_name(pipe), pipe_name(pipe));
  } else if (INTEL_INFO(dev)->gen >= 5) {
   reg = DVSCNTR(pipe);
   val = I915_READ(reg);
-  WARN(val & DVS_ENABLE,
+  I915_STATE_WARN(val & DVS_ENABLE,
        "sprite %c assertion failure, should be off on pipe %c but is still active\n",
        plane_name(pipe), pipe_name(pipe));
  }
@@ -1318,12 +1318,12 @@ static void ibx_assert_pch_refclk_enabled(struct drm_i915_private *dev_priv)
  u32 val;
  bool enabled;
 
- WARN_ON(!(HAS_PCH_IBX(dev_priv->dev) || HAS_PCH_CPT(dev_priv->dev)));
+ I915_STATE_WARN_ON(!(HAS_PCH_IBX(dev_priv->dev) || HAS_PCH_CPT(dev_priv->dev)));
 
  val = I915_READ(PCH_DREF_CONTROL);
  enabled = !!(val & (DREF_SSC_SOURCE_MASK | DREF_NONSPREAD_SOURCE_MASK |
        DREF_SUPERSPREAD_SOURCE_MASK));
- WARN(!enabled, "PCH refclk assertion failure, should be active but is disabled\n");
+ I915_STATE_WARN(!enabled, "PCH refclk assertion failure, should be active but is disabled\n");
 }
 
 static void assert_pch_transcoder_disabled(struct drm_i915_private *dev_priv,
@@ -1336,7 +1336,7 @@ static void assert_pch_transcoder_disabled(struct drm_i915_private *dev_priv,
  reg = PCH_TRANSCONF(pipe);
  val = I915_READ(reg);
  enabled = !!(val & TRANS_ENABLE);
- WARN(enabled,
+ I915_STATE_WARN(enabled,
       "transcoder assertion failed, should be off on pipe %c but is still active\n",
       pipe_name(pipe));
 }
@@ -1416,11 +1416,11 @@ static void assert_pch_dp_disabled(struct drm_i915_private *dev_priv,
        enum pipe pipe, int reg, u32 port_sel)
 {
  u32 val = I915_READ(reg);
- WARN(dp_pipe_enabled(dev_priv, pipe, port_sel, val),
+ I915_STATE_WARN(dp_pipe_enabled(dev_priv, pipe, port_sel, val),
       "PCH DP (0x%08x) enabled on transcoder %c, should be disabled\n",
       reg, pipe_name(pipe));
 
- WARN(HAS_PCH_IBX(dev_priv->dev) && (val & DP_PORT_EN) == 0
+ I915_STATE_WARN(HAS_PCH_IBX(dev_priv->dev) && (val & DP_PORT_EN) == 0
       && (val & DP_PIPEB_SELECT),
       "IBX PCH dp port still using transcoder B\n");
 }
@@ -1429,11 +1429,11 @@ static void assert_pch_hdmi_disabled(struct drm_i915_private *dev_priv,
          enum pipe pipe, int reg)
 {
  u32 val = I915_READ(reg);
- WARN(hdmi_pipe_enabled(dev_priv, pipe, val),
+ I915_STATE_WARN(hdmi_pipe_enabled(dev_priv, pipe, val),
       "PCH HDMI (0x%08x) enabled on transcoder %c, should be disabled\n",
       reg, pipe_name(pipe));
 
- WARN(HAS_PCH_IBX(dev_priv->dev) && (val & SDVO_ENABLE) == 0
+ I915_STATE_WARN(HAS_PCH_IBX(dev_priv->dev) && (val & SDVO_ENABLE) == 0
       && (val & SDVO_PIPE_B_SELECT),
       "IBX PCH hdmi port still using transcoder B\n");
 }
@@ -1450,13 +1450,13 @@ static void assert_pch_ports_disabled(struct drm_i915_private *dev_priv,
 
  reg = PCH_ADPA;
  val = I915_READ(reg);
- WARN(adpa_pipe_enabled(dev_priv, pipe, val),
+ I915_STATE_WARN(adpa_pipe_enabled(dev_priv, pipe, val),
       "PCH VGA enabled on transcoder %c, should be disabled\n",
       pipe_name(pipe));
 
  reg = PCH_LVDS;
  val = I915_READ(reg);
- WARN(lvds_pipe_enabled(dev_priv, pipe, val),
+ I915_STATE_WARN(lvds_pipe_enabled(dev_priv, pipe, val),
       "PCH LVDS enabled on transcoder %c, should be disabled\n",
       pipe_name(pipe));
 
@@ -4966,25 +4966,25 @@ static void intel_connector_check_state(struct intel_connector *connector)
   if (connector->mst_port)
    return;
 
-  WARN(connector->base.dpms == DRM_MODE_DPMS_OFF,
+  I915_STATE_WARN(connector->base.dpms == DRM_MODE_DPMS_OFF,
        "wrong connector dpms state\n");
-  WARN(connector->base.encoder != &encoder->base,
+  I915_STATE_WARN(connector->base.encoder != &encoder->base,
        "active connector not linked to encoder\n");
 
   if (encoder) {
-   WARN(!encoder->connectors_active,
+   I915_STATE_WARN(!encoder->connectors_active,
         "encoder->connectors_active not set\n");
 
    encoder_enabled = encoder->get_hw_state(encoder, &pipe);
-   WARN(!encoder_enabled, "encoder not enabled\n");
-   if (WARN_ON(!encoder->base.crtc))
+   I915_STATE_WARN(!encoder_enabled, "encoder not enabled\n");
+   if (I915_STATE_WARN_ON(!encoder->base.crtc))
     return;
 
    crtc = encoder->base.crtc;
 
-   WARN(!crtc->enabled, "crtc not enabled\n");
-   WARN(!to_intel_crtc(crtc)->active, "crtc not active\n");
-   WARN(pipe != to_intel_crtc(crtc)->pipe,
+   I915_STATE_WARN(!crtc->enabled, "crtc not enabled\n");
+   I915_STATE_WARN(!to_intel_crtc(crtc)->active, "crtc not active\n");
+   I915_STATE_WARN(pipe != to_intel_crtc(crtc)->pipe,
         "encoder active on the wrong pipe\n");
   }
  }
@@ -7271,23 +7271,23 @@ static void assert_can_disable_lcpll(struct drm_i915_private *dev_priv)
  struct intel_crtc *crtc;
 
  for_each_intel_crtc(dev, crtc)
-  WARN(crtc->active, "CRTC for pipe %c enabled\n",
+  I915_STATE_WARN(crtc->active, "CRTC for pipe %c enabled\n",
        pipe_name(crtc->pipe));
 
- WARN(I915_READ(HSW_PWR_WELL_DRIVER), "Power well on\n");
- WARN(plls->spll_refcount, "SPLL enabled\n");
- WARN(plls->wrpll1_refcount, "WRPLL1 enabled\n");
- WARN(plls->wrpll2_refcount, "WRPLL2 enabled\n");
- WARN(I915_READ(PCH_PP_STATUS) & PP_ON, "Panel power on\n");
- WARN(I915_READ(BLC_PWM_CPU_CTL2) & BLM_PWM_ENABLE,
+ I915_STATE_WARN(I915_READ(HSW_PWR_WELL_DRIVER), "Power well on\n");
+ I915_STATE_WARN(plls->spll_refcount, "SPLL enabled\n");
+ I915_STATE_WARN(plls->wrpll1_refcount, "WRPLL1 enabled\n");
+ I915_STATE_WARN(plls->wrpll2_refcount, "WRPLL2 enabled\n");
+ I915_STATE_WARN(I915_READ(PCH_PP_STATUS) & PP_ON, "Panel power on\n");
+ I915_STATE_WARN(I915_READ(BLC_PWM_CPU_CTL2) & BLM_PWM_ENABLE,
       "CPU PWM1 enabled\n");
- WARN(I915_READ(HSW_BLC_PWM2_CTL) & BLM_PWM_ENABLE,
+ I915_STATE_WARN(I915_READ(HSW_BLC_PWM2_CTL) & BLM_PWM_ENABLE,
       "CPU PWM2 enabled\n");
- WARN(I915_READ(BLC_PWM_PCH_CTL1) & BLM_PCH_PWM_ENABLE,
+ I915_STATE_WARN(I915_READ(BLC_PWM_PCH_CTL1) & BLM_PCH_PWM_ENABLE,
       "PCH PWM1 enabled\n");
- WARN(I915_READ(UTIL_PIN_CTL) & UTIL_PIN_ENABLE,
+ I915_STATE_WARN(I915_READ(UTIL_PIN_CTL) & UTIL_PIN_ENABLE,
       "Utility pin enabled\n");
- WARN(I915_READ(PCH_GTC_CTL) & PCH_GTC_ENABLE, "PCH GTC enabled\n");
+ I915_STATE_WARN(I915_READ(PCH_GTC_CTL) & PCH_GTC_ENABLE, "PCH GTC enabled\n");
 
  /*
   * In theory we can still leave IRQs enabled, as long as only the HPD
@@ -7295,7 +7295,7 @@ static void assert_can_disable_lcpll(struct drm_i915_private *dev_priv)
   * gen-specific and since we only disable LCPLL after we fully disable
   * the interrupts, the check below should be enough.
   */
- WARN(!dev_priv->pm.irqs_disabled, "IRQs enabled\n");
+ I915_STATE_WARN(!dev_priv->pm.irqs_disabled, "IRQs enabled\n");
 }
 
 static void hsw_write_dcomp(struct drm_i915_private *dev_priv, uint32_t val)
@@ -10086,7 +10086,7 @@ check_connector_state(struct drm_device *dev)
    * ->get_hw_state callbacks. */
   intel_connector_check_state(connector);
 
-  WARN(&connector->new_encoder->base != connector->base.encoder,
+  I915_STATE_WARN(&connector->new_encoder->base != connector->base.encoder,
        "connector's staged encoder doesn't match current encoder\n");
  }
 }
@@ -10107,9 +10107,9 @@ check_encoder_state(struct drm_device *dev)
          encoder->base.base.id,
          encoder->base.name);
 
-  WARN(&encoder->new_crtc->base != encoder->base.crtc,
+  I915_STATE_WARN(&encoder->new_crtc->base != encoder->base.crtc,
        "encoder's stage crtc doesn't match current crtc\n");
-  WARN(encoder->connectors_active && !encoder->base.crtc,
+  I915_STATE_WARN(encoder->connectors_active && !encoder->base.crtc,
        "encoder's active_connectors set, but no crtc\n");
 
   list_for_each_entry(connector, &dev->mode_config.connector_list,
@@ -10128,19 +10128,19 @@ check_encoder_state(struct drm_device *dev)
   if (!enabled && encoder->base.encoder_type == DRM_MODE_ENCODER_DPMST)
    continue;
 
-  WARN(!!encoder->base.crtc != enabled,
+  I915_STATE_WARN(!!encoder->base.crtc != enabled,
        "encoder's enabled state mismatch "
        "(expected %i, found %i)\n",
        !!encoder->base.crtc, enabled);
-  WARN(active && !encoder->base.crtc,
+  I915_STATE_WARN(active && !encoder->base.crtc,
        "active encoder with no crtc\n");
 
-  WARN(encoder->connectors_active != active,
+  I915_STATE_WARN(encoder->connectors_active != active,
        "encoder's computed active state doesn't match tracked active state "
        "(expected %i, found %i)\n", active, encoder->connectors_active);
 
   active = encoder->get_hw_state(encoder, &pipe);
-  WARN(active != encoder->connectors_active,
+  I915_STATE_WARN(active != encoder->connectors_active,
        "encoder's hw state doesn't match sw tracking "
        "(expected %i, found %i)\n",
        encoder->connectors_active, active);
@@ -10149,7 +10149,7 @@ check_encoder_state(struct drm_device *dev)
    continue;
 
   tracked_pipe = to_intel_crtc(encoder->base.crtc)->pipe;
-  WARN(active && pipe != tracked_pipe,
+  I915_STATE_WARN(active && pipe != tracked_pipe,
        "active encoder's pipe doesn't match"
        "(expected %i, found %i)\n",
        tracked_pipe, pipe);
@@ -10174,7 +10174,7 @@ check_crtc_state(struct drm_device *dev)
   DRM_DEBUG_KMS("[CRTC:%d]\n",
          crtc->base.base.id);
 
-  WARN(crtc->active && !crtc->base.enabled,
+  I915_STATE_WARN(crtc->active && !crtc->base.enabled,
        "active crtc, but not enabled in sw tracking\n");
 
   list_for_each_entry(encoder, &dev->mode_config.encoder_list,
@@ -10186,10 +10186,10 @@ check_crtc_state(struct drm_device *dev)
     active = true;
   }
 
-  WARN(active != crtc->active,
+  I915_STATE_WARN(active != crtc->active,
        "crtc's computed active state doesn't match tracked active state "
        "(expected %i, found %i)\n", active, crtc->active);
-  WARN(enabled != crtc->base.enabled,
+  I915_STATE_WARN(enabled != crtc->base.enabled,
        "crtc's computed enabled state doesn't match tracked enabled state "
        "(expected %i, found %i)\n", enabled, crtc->base.enabled);
 
@@ -10209,13 +10209,13 @@ check_crtc_state(struct drm_device *dev)
     encoder->get_config(encoder, &pipe_config);
   }
 
-  WARN(crtc->active != active,
+  I915_STATE_WARN(crtc->active != active,
        "crtc active state doesn't match with hw state "
        "(expected %i, found %i)\n", crtc->active, active);
 
   if (active &&
       !intel_pipe_config_compare(dev, &crtc->config, &pipe_config)) {
-   WARN(1, "pipe state doesn't match!\n");
+   I915_STATE_WARN(1, "pipe state doesn't match!\n");
    intel_dump_pipe_config(crtc, &pipe_config,
             "[hw state]");
    intel_dump_pipe_config(crtc, &crtc->config,
@@ -10243,14 +10243,14 @@ check_shared_dpll_state(struct drm_device *dev)
 
   active = pll->get_hw_state(dev_priv, pll, &dpll_hw_state);
 
-  WARN(pll->active > pll->refcount,
+  I915_STATE_WARN(pll->active > pll->refcount,
        "more active pll users than references: %i vs %i\n",
        pll->active, pll->refcount);
-  WARN(pll->active && !pll->on,
+  I915_STATE_WARN(pll->active && !pll->on,
        "pll in active use but not on in sw tracking\n");
-  WARN(pll->on && !pll->active,
+  I915_STATE_WARN(pll->on && !pll->active,
        "pll in on but not on in use in sw tracking\n");
-  WARN(pll->on != active,
+  I915_STATE_WARN(pll->on != active,
        "pll on state mismatch (expected %i, found %i)\n",
        pll->on, active);
 
@@ -10260,14 +10260,14 @@ check_shared_dpll_state(struct drm_device *dev)
    if (crtc->active && intel_crtc_to_shared_dpll(crtc) == pll)
     active_crtcs++;
   }
-  WARN(pll->active != active_crtcs,
+  I915_STATE_WARN(pll->active != active_crtcs,
        "pll active crtcs mismatch (expected %i, found %i)\n",
        pll->active, active_crtcs);
-  WARN(pll->refcount != enabled_crtcs,
+  I915_STATE_WARN(pll->refcount != enabled_crtcs,
        "pll enabled crtcs mismatch (expected %i, found %i)\n",
        pll->refcount, enabled_crtcs);
 
-  WARN(pll->on && memcmp(&pll->hw_state, &dpll_hw_state,
+  I915_STATE_WARN(pll->on && memcmp(&pll->hw_state, &dpll_hw_state,
            sizeof(dpll_hw_state)),
        "pll hw state mismatch\n");
  }
diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
index 0cd7537..8eaea9c 100644
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -1215,7 +1215,7 @@ void intel_edp_panel_vdd_on(struct intel_dp *intel_dp)
  if (is_edp(intel_dp)) {
   bool vdd = _edp_panel_vdd_on(intel_dp);
 
-  WARN(!vdd, "eDP VDD already requested on\n");
+  I915_STATE_WARN(!vdd, "eDP VDD already requested on\n");
  }
 }
 
@@ -1273,7 +1273,7 @@ static void edp_panel_vdd_off(struct intel_dp *intel_dp, bool sync)
  if (!is_edp(intel_dp))
   return;
 
- WARN(!intel_dp->want_panel_vdd, "eDP VDD not forced on");
+ I915_STATE_WARN(!intel_dp->want_panel_vdd, "eDP VDD not forced on");
 
  intel_dp->want_panel_vdd = false;
 
-- 
1.7.1