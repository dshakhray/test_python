From 9cb4b15f04b9bc1227c17bac3eacdc4491d887dc Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:50 -0400
Subject: [tools] perf/symbols: Move idle syms check from top to generic function

Message-id: <1408953210-26343-43-git-send-email-jolsa@redhat.com>
Patchwork-id: 88752
O-Subject: [PATCH RHEL7.1 BZ1133083 042/322] perf symbols: Move idle syms check from top to generic function
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 82d1deb0546a4af7a2ddbcfed99690b3a61776c5
Author: David Ahern <dsahern@gmail.com>
Date: Mon Nov 18 13:32:45 2013 -0700

description
===========
Allows list of idle symbols to be leveraged by other commands, such as
the upcoming timehist command.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 531522d..03d37a7 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -634,26 +634,9 @@ repeat:
  return NULL;
 }
 
-/* Tag samples to be skipped. */
-static const char *skip_symbols[] = {
- "intel_idle",
- "default_idle",
- "native_safe_halt",
- "cpu_idle",
- "enter_idle",
- "exit_idle",
- "mwait_idle",
- "mwait_idle_with_hints",
- "poll_idle",
- "ppc64_runlatch_off",
- "pseries_dedicated_idle_sleep",
- NULL
-};
-
 static int symbol_filter(struct map *map __maybe_unused, struct symbol *sym)
 {
  const char *name = sym->name;
- int i;
 
  /*
   * ppc64 uses function descriptors and appends a '.' to the
@@ -671,12 +654,8 @@ static int symbol_filter(struct map *map __maybe_unused, struct symbol *sym)
      strstr(name, "_text_end"))
   return 1;
 
- for (i = 0; skip_symbols[i]; i++) {
-  if (!strcmp(skip_symbols[i], name)) {
-   sym->ignore = true;
-   break;
-  }
- }
+ if (symbol__is_idle(sym))
+  sym->ignore = true;
 
  return 0;
 }
diff --git a/tools/perf/util/symbol.c b/tools/perf/util/symbol.c
index c0c3696..f55c18d 100644
--- a/tools/perf/util/symbol.c
+++ b/tools/perf/util/symbol.c
@@ -573,6 +573,36 @@ static u8 kallsyms2elf_type(char type)
  return isupper(type) ? STB_GLOBAL : STB_LOCAL;
 }
 
+bool symbol__is_idle(struct symbol *sym)
+{
+ const char * const idle_symbols[] = {
+  "cpu_idle",
+  "intel_idle",
+  "default_idle",
+  "native_safe_halt",
+  "enter_idle",
+  "exit_idle",
+  "mwait_idle",
+  "mwait_idle_with_hints",
+  "poll_idle",
+  "ppc64_runlatch_off",
+  "pseries_dedicated_idle_sleep",
+  NULL
+ };
+
+ int i;
+
+ if (!sym)
+  return false;
+
+ for (i = 0; idle_symbols[i]; i++) {
+  if (!strcmp(idle_symbols[i], sym->name))
+   return true;
+ }
+
+ return false;
+}
+
 static int map__process_kallsym_symbol(void *arg, const char *name,
            char type, u64 start)
 {
diff --git a/tools/perf/util/symbol.h b/tools/perf/util/symbol.h
index 07de8fe..ad13c5d 100644
--- a/tools/perf/util/symbol.h
+++ b/tools/perf/util/symbol.h
@@ -240,6 +240,7 @@ size_t symbol__fprintf(struct symbol *sym, FILE *fp);
 bool symbol_type__is_a(char symbol_type, enum map_type map_type);
 bool symbol__restricted_filename(const char *filename,
      const char *restricted_filename);
+bool symbol__is_idle(struct symbol *sym);
 
 int dso__load_sym(struct dso *dso, struct map *map, struct symsrc *syms_ss,
     struct symsrc *runtime_ss, symbol_filter_t filter,
-- 
1.7.1