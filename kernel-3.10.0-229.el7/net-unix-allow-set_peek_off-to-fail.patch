From 82ee2ccfae4f1a96453b27ab1ef14a39354677f4 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Thu, 18 Dec 2014 13:43:12 -0500
Subject: [net] unix: allow set_peek_off to fail

Message-id: <610aaa1ee9d6fdca724e634618fdcbbed95c6c03.1418910188.git.jbenc@redhat.com>
Patchwork-id: 102282
O-Subject: [RHEL7.1 net PATCH] net: unix: allow set_peek_off to fail
Bugzilla: 1123777
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Marcelo Leitner <mleitner@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1123777
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8400337
Tested: using the reproducer from bugzilla

This fixes hangs triggered by trinity.

The upstream patch causes kABI breakage through struct socket (which
contains pointer to struct proto_ops). However, there can be no supported
3rd party modules that are setting socket->ops at this time, as we have no
socket type registration function whitelisted (such functions would be
sock_register, inet*_register_protosw and few others). The symbols checksum
changes are currently only a side effect and are safe to be ignored.

commit 12663bfc97c8b3fdb292428105dd92d563164050
Author: Sasha Levin <sasha.levin@oracle.com>
Date:   Sat Dec 7 17:26:27 2013 -0500

    net: unix: allow set_peek_off to fail

    unix_dgram_recvmsg() will hold the readlock of the socket until recv
    is complete.

    In the same time, we may try to setsockopt(SO_PEEK_OFF) which will hang until
    unix_dgram_recvmsg() will complete (which can take a while) without allowing
    us to break out of it, triggering a hung task spew.

    Instead, allow set_peek_off to fail, this way userspace will not hang.

    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
    Acked-by: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/net.h b/include/linux/net.h
index 0c4ae5d..d3d63a4 100644
--- a/include/linux/net.h
+++ b/include/linux/net.h
@@ -26,6 +26,8 @@
 #include <linux/rcupdate.h>
 #include <uapi/linux/net.h>
 
+#include <linux/rh_kabi.h>
+
 struct poll_table_struct;
 struct pipe_inode_info;
 struct inode;
@@ -180,7 +182,8 @@ struct proto_ops {
           int offset, size_t size, int flags);
  ssize_t  (*splice_read)(struct socket *sock,  loff_t *ppos,
            struct pipe_inode_info *pipe, size_t len, unsigned int flags);
- void  (*set_peek_off)(struct sock *sk, int val);
+ RH_KABI_REPLACE_P(void  (*set_peek_off)(struct sock *sk, int val),
+     int  (*set_peek_off)(struct sock *sk, int val))
 };
 
 #define DECLARE_SOCKADDR(type, dst, src) \
diff --git a/net/core/sock.c b/net/core/sock.c
index 891af77..cfda9ff 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -887,7 +887,7 @@ set_rcvbuf:
 
  case SO_PEEK_OFF:
   if (sock->ops->set_peek_off)
-   sock->ops->set_peek_off(sk, val);
+   ret = sock->ops->set_peek_off(sk, val);
   else
    ret = -EOPNOTSUPP;
   break;
diff --git a/net/unix/af_unix.c b/net/unix/af_unix.c
index 8e33cac..685bedc 100644
--- a/net/unix/af_unix.c
+++ b/net/unix/af_unix.c
@@ -529,13 +529,17 @@ static int unix_seqpacket_sendmsg(struct kiocb *, struct socket *,
 static int unix_seqpacket_recvmsg(struct kiocb *, struct socket *,
       struct msghdr *, size_t, int);
 
-static void unix_set_peek_off(struct sock *sk, int val)
+static int unix_set_peek_off(struct sock *sk, int val)
 {
  struct unix_sock *u = unix_sk(sk);
 
- mutex_lock(&u->readlock);
+ if (mutex_lock_interruptible(&u->readlock))
+  return -EINTR;
+
  sk->sk_peek_off = val;
  mutex_unlock(&u->readlock);
+
+ return 0;
 }
 
 
-- 
1.7.1