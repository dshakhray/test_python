From e4e30df5123294d05bab4fb0c07b3b7676e6946f Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:03:10 -0400
Subject: [fs] btrfs: send, fix corrupted path strings for long paths

Message-id: <1407179109-13714-304-git-send-email-sandeen@redhat.com>
Patchwork-id: 87219
O-Subject: [RHEL7.1 PATCH 303/422] Btrfs: send, fix corrupted path strings for long paths
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit 01a9a8a9e20012f5676ec9cd16b6aed08b267066
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Wed May 21 17:38:13 2014 +0100

    Btrfs: send, fix corrupted path strings for long paths

    If a path has more than 230 characters, we allocate a new buffer to
    use for the path, but we were forgotting to copy the contents of the
    previous buffer into the new one, which has random content from the
    kmalloc call.

    Test:

        mkfs.btrfs -f /dev/sdd
        mount /dev/sdd /mnt

        TEST_PATH="/mnt/fdmanana/.config/google-chrome-mysetup/Default/Pepper_Data/Shockwave_Flash/WritableRoot/#SharedObjects/JSHJ4ZKN/s.wsj.net/[[IMPORT]]/players.edgesuite.net/flash/plugins/osmf/advanced-streaming-plugin/v2.7/osmf1.6/Ak#"
        mkdir -p $TEST_PATH
        echo "hello world" > $TEST_PATH/amaiAdvancedStreamingPlugin.txt

        btrfs subvolume snapshot -r /mnt /mnt/mysnap1
        btrfs send /mnt/mysnap1 -f /tmp/1.snap

    A test for xfstests follows.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Cc: Marc Merlin <marc@merlins.org>
    Tested-by: Marc MERLIN <marc@merlins.org>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/send.c b/fs/btrfs/send.c
index fd38b50..484aaca 100644
--- a/fs/btrfs/send.c
+++ b/fs/btrfs/send.c
@@ -360,10 +360,13 @@ static int fs_path_ensure_buf(struct fs_path *p, int len)
  /*
   * First time the inline_buf does not suffice
   */
- if (p->buf == p->inline_buf)
+ if (p->buf == p->inline_buf) {
   tmp_buf = kmalloc(len, GFP_NOFS);
- else
+  if (tmp_buf)
+   memcpy(tmp_buf, p->buf, old_buf_len);
+ } else {
   tmp_buf = krealloc(p->buf, len, GFP_NOFS);
+ }
  if (!tmp_buf)
   return -ENOMEM;
  p->buf = tmp_buf;
-- 
1.7.1