From 4256b6a54683157941e2c16ef80a877280dbd687 Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Tue, 21 Oct 2014 17:05:39 -0400
Subject: [net] ipv4: irq safe sk_dst_[re]set() and ipv4_sk_update_pmtu() fix

Message-id: <6e5c04017e1ac64fb601b518b2866e9ba1adf670.1413910820.git.hannes@redhat.com>
Patchwork-id: 98024
O-Subject: [RHEL7.1 net PATCH 3/4] ipv4: irq safe sk_dst_[re]set() and ipv4_sk_update_pmtu() fix
Bugzilla: 1155155
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1155155
Upstream Status: 7f502361531e9eecb396cf99bdc9e9a59f7ebd7f
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8142603

Conflict resolution:
We don't have ip_sk_accept_pmtu in our tree, so massage the patch a bit.

Upstream Commit:
commit 7f502361531e9eecb396cf99bdc9e9a59f7ebd7f
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jun 30 01:26:23 2014 -0700

    ipv4: irq safe sk_dst_[re]set() and ipv4_sk_update_pmtu() fix

    We have two different ways to handle changes to sk->sk_dst

    First way (used by TCP) assumes socket lock is owned by caller, and use
    no extra lock : __sk_dst_set() & __sk_dst_reset()

    Another way (used by UDP) uses sk_dst_lock because socket lock is not
    always taken. Note that sk_dst_lock is not softirq safe.

    These ways are not inter changeable for a given socket type.

    ipv4_sk_update_pmtu(), added in linux-3.8, added a race, as it used
    the socket lock as synchronization, but users might be UDP sockets.

    Instead of converting sk_dst_lock to a softirq safe version, use xchg()
    as we did for sk_rx_dst in commit e47eb5dfb296b ("udp: ipv4: do not use
    sk_dst_lock from softirq context")

    In a follow up patch, we probably can remove sk_dst_lock, as it is
    only used in IPv6.

    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Fixes: 9cb3a50c5f63e ("ipv4: Invalidate the socket cached route on pmtu events if possible")
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/sock.h b/include/net/sock.h
index e2b9c8a..aa26b39 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1814,9 +1814,11 @@ __sk_dst_set(struct sock *sk, struct dst_entry *dst)
 static inline void
 sk_dst_set(struct sock *sk, struct dst_entry *dst)
 {
- spin_lock(&sk->sk_dst_lock);
- __sk_dst_set(sk, dst);
- spin_unlock(&sk->sk_dst_lock);
+ struct dst_entry *old_dst;
+
+ sk_tx_queue_clear(sk);
+ old_dst = xchg(&sk->sk_dst_cache, dst);
+ dst_release(old_dst);
 }
 
 static inline void
@@ -1828,9 +1830,7 @@ __sk_dst_reset(struct sock *sk)
 static inline void
 sk_dst_reset(struct sock *sk)
 {
- spin_lock(&sk->sk_dst_lock);
- __sk_dst_reset(sk);
- spin_unlock(&sk->sk_dst_lock);
+ sk_dst_set(sk, NULL);
 }
 
 extern struct dst_entry *__sk_dst_check(struct sock *sk, u32 cookie);
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 4b518ee..c81528f 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -1009,20 +1009,21 @@ void ipv4_sk_update_pmtu(struct sk_buff *skb, struct sock *sk, u32 mtu)
  const struct iphdr *iph = (const struct iphdr *) skb->data;
  struct flowi4 fl4;
  struct rtable *rt;
- struct dst_entry *dst;
+ struct dst_entry *odst = NULL;
  bool new = false;
 
  bh_lock_sock(sk);
- rt = (struct rtable *) __sk_dst_get(sk);
+ odst = sk_dst_get(sk);
 
- if (sock_owned_by_user(sk) || !rt) {
+ if (sock_owned_by_user(sk) || !odst) {
   __ipv4_sk_update_pmtu(skb, sk, mtu);
   goto out;
  }
 
  __build_flow_key(&fl4, sk, iph, 0, 0, 0, 0, 0);
 
- if (!__sk_dst_check(sk, 0)) {
+ rt = (struct rtable *)odst;
+ if (odst->obsolete && odst->ops->check(odst, 0) == NULL) {
   rt = ip_route_output_flow(sock_net(sk), &fl4, sk);
   if (IS_ERR(rt))
    goto out;
@@ -1032,8 +1033,7 @@ void ipv4_sk_update_pmtu(struct sk_buff *skb, struct sock *sk, u32 mtu)
 
  __ip_rt_update_pmtu((struct rtable *) rt->dst.path, &fl4, mtu);
 
- dst = dst_check(&rt->dst, 0);
- if (!dst) {
+ if (!dst_check(&rt->dst, 0)) {
   if (new)
    dst_release(&rt->dst);
 
@@ -1045,10 +1045,11 @@ void ipv4_sk_update_pmtu(struct sk_buff *skb, struct sock *sk, u32 mtu)
  }
 
  if (new)
-  __sk_dst_set(sk, &rt->dst);
+  sk_dst_set(sk, &rt->dst);
 
 out:
  bh_unlock_sock(sk);
+ dst_release(odst);
 }
 EXPORT_SYMBOL_GPL(ipv4_sk_update_pmtu);
 
-- 
1.7.1