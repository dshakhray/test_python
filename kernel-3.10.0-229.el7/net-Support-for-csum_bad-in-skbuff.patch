From c7b0ea058a0d6c6b79b015e26f6b948fba6fb520 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Sun, 14 Sep 2014 19:49:53 -0400
Subject: [net] Support for csum_bad in skbuff

Message-id: <1410724197-31885-4-git-send-email-fwestpha@redhat.com>
Patchwork-id: 94693
O-Subject: [PATCH 52/57 RHEL7.1 net v2] net: Support for csum_bad in skbuff
Bugzilla: 1131999
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>

BZ: 1131999
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7951596

conflict in skbuff.h due to earlier rhel7 kabi
workarounds: flag3 is at different location.

commit 5a21232983aa7acfe7fd26170832a9e0a4a7b4ae
Author: Tom Herbert <therbert@google.com>
Date:   Sun Aug 31 15:12:41 2014 -0700

    net: Support for csum_bad in skbuff

    This flag indicates that an invalid checksum was detected in the
    packet. __skb_mark_checksum_bad helper function was added to set this.

    Checksums can be marked bad from a driver or the GRO path (the latter
    is implemented in this patch). csum_bad is checked in
    __skb_checksum_validate_complete (i.e. calling that when ip_summed ==
    CHECKSUM_NONE).

    csum_bad works in conjunction with ip_summed value. In the case that
    ip_summed is CHECKSUM_NONE and csum_bad is set, this implies that the
    first (or next) checksum encountered in the packet is bad. When
    ip_summed is CHECKSUM_UNNECESSARY, the first checksum after the last
    one validated is bad. For example, if ip_summed == CHECKSUM_UNNECESSARY,
    csum_level == 1, and csum_bad is set-- then the third checksum in the
    packet is bad. In the normal path, the packet will be dropped when
    processing the protocol layer of the bad checksum:
    __skb_decr_checksum_unnecessary called twice for the good checksums
    changing ip_summed to CHECKSUM_NONE so that
    __skb_checksum_validate_complete is called to validate the third
    checksum and that will fail since csum_bad is set.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
---
 Changes since v1: adjust for changes in previous patch
 (added rh_csum_pad:1 in sk_buff).

 include/linux/netdevice.h |    4 +++-
 include/linux/skbuff.h    |   21 ++++++++++++++++++++-
 net/core/dev.c            |    2 +-
 3 files changed, 24 insertions(+), 3 deletions(-)

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 21195ad..0a5830f 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1946,7 +1946,9 @@ static inline void skb_gro_incr_csum_unnecessary(struct sk_buff *skb)
  if (__skb_gro_checksum_validate_needed(skb, zero_okay, check)) \
   __ret = __skb_gro_checksum_validate_complete(skb, \
     compute_pseudo(skb, proto));  \
- if (!__ret)       \
+ if (__ret)       \
+  __skb_mark_checksum_bad(skb);    \
+ else        \
   skb_gro_incr_csum_unnecessary(skb);   \
  __ret;        \
 })
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 27a38fd..f5e2f89 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -569,7 +569,8 @@ struct sk_buff {
  kmemcheck_bitfield_begin(flags3);
  __u8   csum_level:2;
  __u8   rh_csum_pad:1;
- /* 13 bit hole */
+ __u8   csum_bad:1;
+ /* 12 bit hole */
  kmemcheck_bitfield_end(flags3);
 #endif
  /* RHEL SPECIFIC
@@ -2738,6 +2739,21 @@ static inline void __skb_incr_checksum_unnecessary(struct sk_buff *skb)
  }
 }
 
+static inline void __skb_mark_checksum_bad(struct sk_buff *skb)
+{
+ /* Mark current checksum as bad (typically called from GRO
+  * path). In the case that ip_summed is CHECKSUM_NONE
+  * this must be the first checksum encountered in the packet.
+  * When ip_summed is CHECKSUM_UNNECESSARY, this is the first
+  * checksum after the last one validated. For UDP, a zero
+  * checksum can not be marked as bad.
+  */
+
+ if (skb->ip_summed == CHECKSUM_NONE ||
+     skb->ip_summed == CHECKSUM_UNNECESSARY)
+  skb->csum_bad = 1;
+}
+
 /* Check if we need to perform checksum complete validation.
  *
  * Returns true if checksum complete is needed, false otherwise
@@ -2779,6 +2795,9 @@ static inline __sum16 __skb_checksum_validate_complete(struct sk_buff *skb,
    skb->csum_valid = 1;
    return 0;
   }
+ } else if (skb->csum_bad) {
+  /* ip_summed == CHECKSUM_NONE in this case */
+  return 1;
  }
 
  skb->csum = psum;
diff --git a/net/core/dev.c b/net/core/dev.c
index aa616cf..b3d7e6b 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3783,7 +3783,7 @@ static enum gro_result dev_gro_receive(struct napi_struct *napi, struct sk_buff
  if (!(skb->dev->features & NETIF_F_GRO) || netpoll_rx_on(skb))
   goto normal;
 
- if (skb_is_gso(skb) || skb_has_frag_list(skb))
+ if (skb_is_gso(skb) || skb_has_frag_list(skb) || skb->csum_bad)
   goto normal;
 
  gro_list_prepare(napi, skb);
-- 
1.7.1