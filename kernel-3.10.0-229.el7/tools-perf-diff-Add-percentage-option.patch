From f811e7182ef3b0c08a5eec74f9c1cf968fcc8ed3 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:06:34 -0400
Subject: [tools] perf/diff: Add --percentage option

Message-id: <1410181752-25631-150-git-send-email-jolsa@redhat.com>
Patchwork-id: 91847
O-Subject: [PATCH RHEL7.1 BZ1134356 149/307] perf diff: Add --percentage option
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 8810f6ced73556c1a63b6269a6cdad8d630aaaf0
Author: Namhyung Kim <namhyung@kernel.org>
Date: Fri Feb 7 12:06:07 2014 +0900

description
===========
The --percentage option is for controlling overhead percentage
displayed.  It can only receive either of "relative" or "absolute" and
affects -c delta output only.

For more information, please see previous commit same thing done to
"perf report".
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/Documentation/perf-diff.txt b/tools/perf/Documentation/perf-diff.txt
index fdfceee..fbfa119 100644
--- a/tools/perf/Documentation/perf-diff.txt
+++ b/tools/perf/Documentation/perf-diff.txt
@@ -33,17 +33,20 @@ OPTIONS
 -d::
 --dsos=::
  Only consider symbols in these dsos. CSV that understands
- file://filename entries.
+ file://filename entries.  This option will affect the percentage
+ of the Baseline/Delta column.  See --percentage for more info.
 
 -C::
 --comms=::
  Only consider symbols in these comms. CSV that understands
- file://filename entries.
+ file://filename entries.  This option will affect the percentage
+ of the Baseline/Delta column.  See --percentage for more info.
 
 -S::
 --symbols=::
  Only consider these symbols. CSV that understands
- file://filename entries.
+ file://filename entries.  This option will affect the percentage
+ of the Baseline/Delta column.  See --percentage for more info.
 
 -s::
 --sort=::
@@ -89,6 +92,14 @@ OPTIONS
 --order::
        Specify compute sorting column number.
 
+--percentage::
+ Determine how to display the overhead percentage of filtered entries.
+ Filters can be applied by --comms, --dsos and/or --symbols options.
+
+ "relative" means it's relative to filtered entries only so that the
+ sum of shown entries will be always 100%.  "absolute" means it retains
+ the original value before and after the filter is applied.
+
 COMPARISON
 ----------
 The comparison is governed by the baseline file. The baseline perf.data
@@ -157,6 +168,10 @@ with:
   - period_percent being the % of the hist entry period value within
     single data file
 
+  - with filtering by -C, -d and/or -S, period_percent might be changed
+    relative to how entries are filtered.  Use --percentage=absolute to
+    prevent such fluctuation.
+
 ratio
 ~~~~~
 If specified the 'Ratio' column is displayed with value 'r' computed as:
diff --git a/tools/perf/builtin-diff.c b/tools/perf/builtin-diff.c
index 204fffe..c903fe1 100644
--- a/tools/perf/builtin-diff.c
+++ b/tools/perf/builtin-diff.c
@@ -220,7 +220,8 @@ static int setup_compute(const struct option *opt, const char *str,
 
 static double period_percent(struct hist_entry *he, u64 period)
 {
- u64 total = he->hists->stats.total_period;
+ u64 total = hists__total_period(he->hists);
+
  return (period * 100.0) / total;
 }
 
@@ -259,11 +260,18 @@ static s64 compute_wdiff(struct hist_entry *he, struct hist_entry *pair)
 static int formula_delta(struct hist_entry *he, struct hist_entry *pair,
     char *buf, size_t size)
 {
+ u64 he_total = he->hists->stats.total_period;
+ u64 pair_total = pair->hists->stats.total_period;
+
+ if (symbol_conf.filter_relative) {
+  he_total = he->hists->stats.total_non_filtered_period;
+  pair_total = pair->hists->stats.total_non_filtered_period;
+ }
  return scnprintf(buf, size,
     "(%" PRIu64 " * 100 / %" PRIu64 ") - "
     "(%" PRIu64 " * 100 / %" PRIu64 ")",
-     pair->stat.period, pair->hists->stats.total_period,
-     he->stat.period, he->hists->stats.total_period);
+    pair->stat.period, pair_total,
+    he->stat.period, he_total);
 }
 
 static int formula_ratio(struct hist_entry *he, struct hist_entry *pair,
@@ -327,15 +335,16 @@ static int diff__process_sample_event(struct perf_tool *tool __maybe_unused,
   return -1;
  }
 
- if (al.filtered)
-  return 0;
-
  if (hists__add_entry(&evsel->hists, &al, sample->period,
         sample->weight, sample->transaction)) {
   pr_warning("problem incrementing symbol period, skipping event\n");
   return -1;
  }
 
+ if (al.filtered == 0) {
+  evsel->hists.stats.total_non_filtered_period += sample->period;
+  evsel->hists.nr_non_filtered_entries++;
+ }
  evsel->hists.stats.total_period += sample->period;
  return 0;
 }
@@ -565,7 +574,9 @@ static void hists__compute_resort(struct hists *hists)
  next = rb_first(root);
 
  hists->nr_entries = 0;
+ hists->nr_non_filtered_entries = 0;
  hists->stats.total_period = 0;
+ hists->stats.total_non_filtered_period = 0;
  hists__reset_col_len(hists);
 
  while (next != NULL) {
@@ -732,13 +743,16 @@ static const struct option options[] = {
  OPT_STRING(0, "symfs", &symbol_conf.symfs, "directory",
       "Look for files with symbols relative to this directory"),
  OPT_UINTEGER('o', "order", &sort_compute, "Specify compute sorting."),
+ OPT_CALLBACK(0, "percentage", NULL, "relative|absolute",
+       "How to display percentage of filtered entries", parse_filter_percentage),
  OPT_END()
 };
 
 static double baseline_percent(struct hist_entry *he)
 {
- struct hists *hists = he->hists;
- return 100.0 * he->stat.period / hists->stats.total_period;
+ u64 total = hists__total_period(he->hists);
+
+ return 100.0 * he->stat.period / total;
 }
 
 static int hpp__color_baseline(struct perf_hpp_fmt *fmt,
-- 
1.7.1