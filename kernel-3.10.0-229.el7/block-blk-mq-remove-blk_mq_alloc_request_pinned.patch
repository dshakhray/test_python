From ed13b68028dc849c293f1e9915a20037fbfac80f Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:19 -0400
Subject: [block] blk-mq: remove blk_mq_alloc_request_pinned

Message-id: <1402670238-13916-92-git-send-email-snitzer@redhat.com>
Patchwork-id: 83850
O-Subject: [RHEL7.1 PATCH 091/150] blk-mq: remove blk_mq_alloc_request_pinned
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit d852564f8c88b0604490234fdeeb6fb47e4bcc7a
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue May 27 20:59:50 2014 +0200

    blk-mq: remove blk_mq_alloc_request_pinned

    We now only have one caller left and can open code it there in a cleaner
    way.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 43f0c8f..ae14749 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -264,46 +264,30 @@ __blk_mq_alloc_request(struct request_queue *q, struct blk_mq_hw_ctx *hctx,
  return NULL;
 }
 
-static struct request *blk_mq_alloc_request_pinned(struct request_queue *q,
-         int rw, gfp_t gfp,
-         bool reserved)
-{
- bool gfp_mask = gfp & ~__GFP_WAIT;
- struct request *rq;
-
- do {
-  struct blk_mq_ctx *ctx = blk_mq_get_ctx(q);
-  struct blk_mq_hw_ctx *hctx = q->mq_ops->map_queue(q, ctx->cpu);
-
-  rq = __blk_mq_alloc_request(q, hctx, ctx, rw, gfp_mask,
-      reserved);
-  if (rq)
-   break;
-
-  if (!(gfp & __GFP_WAIT)) {
-   blk_mq_put_ctx(ctx);
-   break;
-  }
-
-  __blk_mq_run_hw_queue(hctx);
-  blk_mq_put_ctx(ctx);
-  gfp_mask = gfp;
- } while (1);
-
- return rq;
-}
-
 struct request *blk_mq_alloc_request(struct request_queue *q, int rw, gfp_t gfp,
   bool reserved)
 {
+ struct blk_mq_ctx *ctx;
+ struct blk_mq_hw_ctx *hctx;
  struct request *rq;
 
  if (blk_mq_queue_enter(q))
   return NULL;
 
- rq = blk_mq_alloc_request_pinned(q, rw, gfp, reserved);
- if (rq)
-  blk_mq_put_ctx(rq->mq_ctx);
+ ctx = blk_mq_get_ctx(q);
+ hctx = q->mq_ops->map_queue(q, ctx->cpu);
+
+ rq = __blk_mq_alloc_request(q, hctx, ctx, rw, gfp & ~__GFP_WAIT,
+        reserved);
+ if (!rq && (gfp & __GFP_WAIT)) {
+  __blk_mq_run_hw_queue(hctx);
+  blk_mq_put_ctx(ctx);
+
+  ctx = blk_mq_get_ctx(q);
+  hctx = q->mq_ops->map_queue(q, ctx->cpu);
+  rq =  __blk_mq_alloc_request(q, hctx, ctx, rw, gfp, reserved);
+ }
+ blk_mq_put_ctx(ctx);
  return rq;
 }
 EXPORT_SYMBOL(blk_mq_alloc_request);
-- 
1.7.1