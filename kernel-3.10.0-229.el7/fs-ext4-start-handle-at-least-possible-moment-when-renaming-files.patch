From 81f6f33326eb470df422bd00b98bd98ba23c8a89 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:29 -0400
Subject: [fs] ext4: start handle at least possible moment when renaming files

Message-id: <1414058125-4183-56-git-send-email-lczerner@redhat.com>
Patchwork-id: 98149
O-Subject: [RHEL 7.1 PATCH v2 055/171] ext4: start handle at least possible moment when renaming files
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 5b61de757535095c99212c1ed857c3a0e0bbe386

 In ext4_rename(), don't start the journal handle until the the
 directory entries have been successfully looked up.

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index ab2f6dc..f57980c 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -2965,7 +2965,7 @@ static struct buffer_head *ext4_get_first_dir_block(handle_t *handle,
 static int ext4_rename(struct inode *old_dir, struct dentry *old_dentry,
          struct inode *new_dir, struct dentry *new_dentry)
 {
- handle_t *handle;
+ handle_t *handle = NULL;
  struct inode *old_inode, *new_inode;
  struct buffer_head *old_bh, *new_bh, *dir_bh;
  struct ext4_dir_entry_2 *old_de, *new_de;
@@ -2982,14 +2982,6 @@ static int ext4_rename(struct inode *old_dir, struct dentry *old_dentry,
   * in separate transaction */
  if (new_dentry->d_inode)
   dquot_initialize(new_dentry->d_inode);
- handle = ext4_journal_start(old_dir, EXT4_HT_DIR,
-  (2 * EXT4_DATA_TRANS_BLOCKS(old_dir->i_sb) +
-   EXT4_INDEX_EXTRA_TRANS_BLOCKS + 2));
- if (IS_ERR(handle))
-  return PTR_ERR(handle);
-
- if (IS_DIRSYNC(old_dir) || IS_DIRSYNC(new_dir))
-  ext4_handle_sync(handle);
 
  old_bh = ext4_find_entry(old_dir, &old_dentry->d_name, &old_de, NULL);
  /*
@@ -3012,6 +3004,16 @@ static int ext4_rename(struct inode *old_dir, struct dentry *old_dentry,
    new_bh = NULL;
   }
  }
+
+ handle = ext4_journal_start(old_dir, EXT4_HT_DIR,
+  (2 * EXT4_DATA_TRANS_BLOCKS(old_dir->i_sb) +
+   EXT4_INDEX_EXTRA_TRANS_BLOCKS + 2));
+ if (IS_ERR(handle))
+  return PTR_ERR(handle);
+
+ if (IS_DIRSYNC(old_dir) || IS_DIRSYNC(new_dir))
+  ext4_handle_sync(handle);
+
  if (S_ISDIR(old_inode->i_mode)) {
   if (new_inode) {
    retval = -ENOTEMPTY;
@@ -3151,7 +3153,8 @@ end_rename:
  brelse(dir_bh);
  brelse(old_bh);
  brelse(new_bh);
- ext4_journal_stop(handle);
+ if (handle)
+  ext4_journal_stop(handle);
  if (retval == 0 && force_da_alloc)
   ext4_alloc_da_blocks(old_inode);
  return retval;
-- 
1.7.1