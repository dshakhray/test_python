From 499c0b4a4634ebb25f6f0c7271747bacdd0d78ed Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Wed, 20 Aug 2014 18:59:27 -0400
Subject: [scsi] scsi_debug: fix sparse warnings related to data integrity field

Message-id: <1408561176-18133-49-git-send-email-emilne@redhat.com>
Patchwork-id: 88450
O-Subject: [RHEL7.1 PATCH e-stor 48/57] [SCSI] scsi_debug: fix sparse warnings related to data integrity field
Bugzilla: 1132100
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Ewan D. Milne" <emilne@redhat.com>

upstream commit 51d648af5892219cbe97305efb300d3e56746591

Tested by Ewan D. Milne and Barry Donahue with a combination
of manual and automated testing.  No issues seen.

upstream commit 51d648af5892219cbe97305efb300d3e56746591
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Wed Sep 18 21:27:28 2013 +0900

    [SCSI] scsi_debug: fix sparse warnings related to data integrity field

    Each member in data integrity field tuple is big-endian.  But the
    endianness of the values being compared with these members are not
    annotated.  So this fixes these sparse warnings.

    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Acked-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

Signed-off-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/scsi_debug.c b/drivers/scsi/scsi_debug.c
index a21322d..80b8b10 100644
--- a/drivers/scsi/scsi_debug.c
+++ b/drivers/scsi/scsi_debug.c
@@ -1745,25 +1745,22 @@ static int do_device_access(struct scsi_cmnd *scmd,
  return ret;
 }
 
-static u16 dif_compute_csum(const void *buf, int len)
+static __be16 dif_compute_csum(const void *buf, int len)
 {
- u16 csum;
+ __be16 csum;
 
- switch (scsi_debug_guard) {
- case 1:
-  csum = ip_compute_csum(buf, len);
-  break;
- case 0:
+ if (scsi_debug_guard)
+  csum = (__force __be16)ip_compute_csum(buf, len);
+ else
   csum = cpu_to_be16(crc_t10dif(buf, len));
-  break;
- }
+
  return csum;
 }
 
 static int dif_verify(struct sd_dif_tuple *sdt, const void *data,
         sector_t sector, u32 ei_lba)
 {
- u16 csum = dif_compute_csum(data, scsi_debug_sector_size);
+ __be16 csum = dif_compute_csum(data, scsi_debug_sector_size);
 
  if (sdt->guard_tag != csum) {
   pr_err("%s: GUARD check failed on sector %lu rcvd 0x%04x, data 0x%04x\n",
@@ -1841,7 +1838,7 @@ static int prot_verify_read(struct scsi_cmnd *SCpnt, sector_t start_sec,
   sector = start_sec + i;
   sdt = dif_store(sector);
 
-  if (sdt->app_tag == 0xffff)
+  if (sdt->app_tag == cpu_to_be16(0xffff))
    continue;
 
   ret = dif_verify(sdt, fake_store(sector), sector, ei_lba);
-- 
1.7.1