From cd93df5335db6d61a2ea042b2dff0f721b2edc26 Mon Sep 17 00:00:00 2001
From: Oleg Nesterov <oleg@redhat.com>
Date: Mon, 16 Jun 2014 16:02:22 -0400
Subject: [kernel] uprobes: Kill the "autask" arg of riprel_pre_xol()

Message-id: <20140616160222.GA15530@redhat.com>
Patchwork-id: 84097
O-Subject: [PATCH RHEL7 BZ 1073627 32/36] uprobes/x86: Kill the "autask" arg of riprel_pre_xol()
Bugzilla: 1073627
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

RHBZ: 1073627

default_pre_xol_op() passes &current->utask->autask to riprel_pre_xol()
and this is just ugly because it still needs to load current->utask to
read ->vaddr.

Remove this argument, change riprel_pre_xol() to use current->utask.

Signed-off-by: Oleg Nesterov <oleg@redhat.com>
Acked-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
(cherry picked from commit 7f55e82bacaaa2c41b8e14d6bc78129b096b67b8)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/uprobes.c b/arch/x86/kernel/uprobes.c
index 187be0e..5df1bca 100644
--- a/arch/x86/kernel/uprobes.c
+++ b/arch/x86/kernel/uprobes.c
@@ -330,16 +330,17 @@ static void riprel_analyze(struct arch_uprobe *auprobe, struct insn *insn)
  * If we're emulating a rip-relative instruction, save the contents
  * of the scratch register and store the target address in that register.
  */
-static void riprel_pre_xol(struct arch_uprobe *auprobe, struct pt_regs *regs,
-    struct arch_uprobe_task *autask)
+static void riprel_pre_xol(struct arch_uprobe *auprobe, struct pt_regs *regs)
 {
+ struct uprobe_task *utask = current->utask;
+
  if (auprobe->def.fixups & UPROBE_FIX_RIP_AX) {
-  autask->saved_scratch_register = regs->ax;
-  regs->ax = current->utask->vaddr;
+  utask->autask.saved_scratch_register = regs->ax;
+  regs->ax = utask->vaddr;
   regs->ax += auprobe->def.riprel_target;
  } else if (auprobe->def.fixups & UPROBE_FIX_RIP_CX) {
-  autask->saved_scratch_register = regs->cx;
-  regs->cx = current->utask->vaddr;
+  utask->autask.saved_scratch_register = regs->cx;
+  regs->cx = utask->vaddr;
   regs->cx += auprobe->def.riprel_target;
  }
 }
@@ -377,8 +378,7 @@ static inline bool is_64bit_mm(struct mm_struct *mm)
 static void riprel_analyze(struct arch_uprobe *auprobe, struct insn *insn)
 {
 }
-static void riprel_pre_xol(struct arch_uprobe *auprobe, struct pt_regs *regs,
-    struct arch_uprobe_task *autask)
+static void riprel_pre_xol(struct arch_uprobe *auprobe, struct pt_regs *regs)
 {
 }
 static void riprel_post_xol(struct arch_uprobe *auprobe, struct pt_regs *regs,
@@ -401,7 +401,7 @@ static inline int sizeof_long(void)
 
 static int default_pre_xol_op(struct arch_uprobe *auprobe, struct pt_regs *regs)
 {
- riprel_pre_xol(auprobe, regs, &current->utask->autask);
+ riprel_pre_xol(auprobe, regs);
  return 0;
 }
 
-- 
1.7.1