From 8b7acb4630d535ff53db40e7198ce56b08bfa8d2 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:38:05 -0400
Subject: [virt] kvm: protect kvm_usage_count with its own spinlock

Message-id: <1406040016-3289-91-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86169
O-Subject: [RHEL7 PATCH v2 090/221] KVM: protect kvm_usage_count with its own spinlock
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

The VM list need not be protected by a raw spinlock.  Separate the
two so that kvm_lock can be made non-raw.

Cc: kvm@vger.kernel.org
Cc: gleb@redhat.com
Cc: jan.kiszka@siemens.com
Reviewed-by: Gleb Natapov <gleb@redhat.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 virt/kvm/kvm_main.c [guest count uevent not upstream]
(cherry picked from commit 4a937f96f3a29c58b7edd349d2e4dfac371efdf2)
---

diff --git a/Documentation/virtual/kvm/locking.txt b/Documentation/virtual/kvm/locking.txt
index caaf635..4879975 100644
--- a/Documentation/virtual/kvm/locking.txt
+++ b/Documentation/virtual/kvm/locking.txt
@@ -135,7 +135,11 @@ Name:  kvm_lock
 Type:  raw_spinlock
 Arch:  any
 Protects: - vm_list
-  - hardware virtualization enable/disable
+
+Name:  kvm_count_lock
+Type:  raw_spinlock_t
+Arch:  any
+Protects: - hardware virtualization enable/disable
 Comment: 'raw' because hardware enabling/disabling must be atomic /wrt
   migration.
 
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index c8e1d5c..eb4169f 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -71,6 +71,7 @@ MODULE_LICENSE("GPL");
  */
 
 DEFINE_RAW_SPINLOCK(kvm_lock);
+static DEFINE_RAW_SPINLOCK(kvm_count_lock);
 LIST_HEAD(vm_list);
 
 static cpumask_var_t cpus_hardware_enabled;
@@ -2661,10 +2662,10 @@ static void hardware_enable_nolock(void *junk)
 
 static void hardware_enable(void)
 {
- raw_spin_lock(&kvm_lock);
+ raw_spin_lock(&kvm_count_lock);
  if (kvm_usage_count)
   hardware_enable_nolock(NULL);
- raw_spin_unlock(&kvm_lock);
+ raw_spin_unlock(&kvm_count_lock);
 }
 
 static void hardware_disable_nolock(void *junk)
@@ -2679,10 +2680,10 @@ static void hardware_disable_nolock(void *junk)
 
 static void hardware_disable(void)
 {
- raw_spin_lock(&kvm_lock);
+ raw_spin_lock(&kvm_count_lock);
  if (kvm_usage_count)
   hardware_disable_nolock(NULL);
- raw_spin_unlock(&kvm_lock);
+ raw_spin_unlock(&kvm_count_lock);
 }
 
 static void hardware_disable_all_nolock(void)
@@ -2701,10 +2702,10 @@ static void hardware_disable_all(void)
  char event_string[] = "EVENT=terminate";
  char *envp[] = { event_string, count_string, NULL };
 
- raw_spin_lock(&kvm_lock);
+ raw_spin_lock(&kvm_count_lock);
  hardware_disable_all_nolock();
  count = kvm_usage_count;
- raw_spin_unlock(&kvm_lock);
+ raw_spin_unlock(&kvm_count_lock);
 
  sprintf(count_string, "COUNT=%d", count);
  kobject_uevent_env(&kvm_dev.this_device->kobj, KOBJ_CHANGE, envp);
@@ -2715,7 +2716,7 @@ static int hardware_enable_all(void)
  int r = 0;
  int count;
 
- raw_spin_lock(&kvm_lock);
+ raw_spin_lock(&kvm_count_lock);
 
  count = ++kvm_usage_count;
  if (kvm_usage_count == 1) {
@@ -2728,7 +2729,7 @@ static int hardware_enable_all(void)
   }
  }
 
- raw_spin_unlock(&kvm_lock);
+ raw_spin_unlock(&kvm_count_lock);
 
  if (r == 0) {
   char count_string[20];
@@ -3099,7 +3100,7 @@ static int kvm_suspend(void)
 static void kvm_resume(void)
 {
  if (kvm_usage_count) {
-  WARN_ON(raw_spin_is_locked(&kvm_lock));
+  WARN_ON(raw_spin_is_locked(&kvm_count_lock));
   hardware_enable_nolock(NULL);
  }
 }
-- 
1.7.1