From 5c7bd3470b14c26d631d990b53c82b28a5d8a880 Mon Sep 17 00:00:00 2001
From: Larry Woodman <lwoodman@redhat.com>
Date: Fri, 30 May 2014 11:22:38 -0400
Subject: [kernel] mutexes: Give more informative mutex warning in the !lock->owner case

Message-id: <1401448958-5278-11-git-send-email-lwoodman@redhat.com>
Patchwork-id: 81239
O-Subject: [RHEL7.1 PATCH 10/10] mutexes: Give more informative mutex warning in the !lock->owner case
Bugzilla: 1087655 1087919 1087922
RH-Acked-by: Rafael Aquini <aquini@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

commit 91f30a17024ff0d8345e11228af33ee938b13426
 Author: Chuansheng Liu <chuansheng.liu@intel.com>
 Date:   Wed Dec 4 13:58:13 2013 +0800

    mutexes: Give more informative mutex warning in the !lock->owner case

    When mutex debugging is enabled and an imbalanced mutex_unlock()
    is called, we get the following, slightly confusing warning:

      [  364.208284] DEBUG_LOCKS_WARN_ON(lock->owner != current)

    But in that case the warning is due to an imbalanced mutex_unlock() call,
    and the lock->owner is NULL - so the message is misleading.

    So improve the message by testing for this case specifically:

       DEBUG_LOCKS_WARN_ON(!lock->owner)

    Signed-off-by: Liu, Chuansheng <chuansheng.liu@intel.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Link: http://lkml.kernel.org/r/1386136693.3650.48.camel@cliu38-desktop-build
    [ Improved the changelog, changed the patch to use !lock->owner consistently. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/mutex-debug.c b/kernel/mutex-debug.c
index 974e28a..e06b8b4 100644
--- a/kernel/mutex-debug.c
+++ b/kernel/mutex-debug.c
@@ -73,7 +73,12 @@ void debug_mutex_unlock(struct mutex *lock)
 {
  if (likely(debug_locks)) {
   DEBUG_LOCKS_WARN_ON(lock->magic != lock);
-  DEBUG_LOCKS_WARN_ON(lock->owner != current);
+
+  if (!lock->owner)
+   DEBUG_LOCKS_WARN_ON(!lock->owner);
+  else
+   DEBUG_LOCKS_WARN_ON(lock->owner != current);
+
   DEBUG_LOCKS_WARN_ON(!lock->wait_list.prev &&
         !lock->wait_list.next);
   mutex_clear_owner(lock);
-- 
1.7.1