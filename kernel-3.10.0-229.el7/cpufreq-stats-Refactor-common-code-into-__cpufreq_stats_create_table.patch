From f63318f8be88eeb8c972aaf691da6b501c920847 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:28 -0400
Subject: [cpufreq] stats: Refactor common code into __cpufreq_stats_create_table()

Message-id: <1409235879-1283-115-git-send-email-prarit@redhat.com>
Patchwork-id: 89452
O-Subject: [RHEL7.1 PATCH BZ 1134639 114/185] cpufreq: stats: Refactor common code into __cpufreq_stats_create_table()
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit ad4c2302c20a6906eb2f10defdb0e982bab5eb0b
Author: Saravana Kannan <skannan@codeaurora.org>
Date:   Thu Feb 27 17:58:36 2014 -0800

    cpufreq: stats: Refactor common code into __cpufreq_stats_create_table()

    cpufreq_frequency_get_table() is called from all callers of
    __cpufreq_stats_create_table(). So, move it inside.

    Suggested-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Saravana Kannan <skannan@codeaurora.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index 568f1d5..782679f 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -181,14 +181,19 @@ static void cpufreq_stats_free_table(unsigned int cpu)
  cpufreq_cpu_put(policy);
 }
 
-static int __cpufreq_stats_create_table(struct cpufreq_policy *policy,
-  struct cpufreq_frequency_table *table)
+static int __cpufreq_stats_create_table(struct cpufreq_policy *policy)
 {
  unsigned int i, j, count = 0, ret = 0;
  struct cpufreq_stats *stat;
  struct cpufreq_policy *current_policy;
  unsigned int alloc_size;
  unsigned int cpu = policy->cpu;
+ struct cpufreq_frequency_table *table;
+
+ table = cpufreq_frequency_get_table(cpu);
+ if (unlikely(!table))
+  return 0;
+
  if (per_cpu(cpufreq_stats_table, cpu))
   return -EBUSY;
  stat = kzalloc(sizeof(struct cpufreq_stats), GFP_KERNEL);
@@ -259,7 +264,6 @@ error_get_fail:
 static void cpufreq_stats_create_table(unsigned int cpu)
 {
  struct cpufreq_policy *policy;
- struct cpufreq_frequency_table *table;
 
  /*
   * "likely(!policy)" because normally cpufreq_stats will be registered
@@ -269,9 +273,7 @@ static void cpufreq_stats_create_table(unsigned int cpu)
  if (likely(!policy))
   return;
 
- table = cpufreq_frequency_get_table(policy->cpu);
- if (likely(table))
-  __cpufreq_stats_create_table(policy, table);
+ __cpufreq_stats_create_table(policy);
 
  cpufreq_cpu_put(policy);
 }
@@ -294,20 +296,14 @@ static int cpufreq_stat_notifier_policy(struct notifier_block *nb,
 {
  int ret = 0;
  struct cpufreq_policy *policy = data;
- struct cpufreq_frequency_table *table;
- unsigned int cpu = policy->cpu;
 
  if (val == CPUFREQ_UPDATE_POLICY_CPU) {
   cpufreq_stats_update_policy_cpu(policy);
   return 0;
  }
 
- table = cpufreq_frequency_get_table(cpu);
- if (!table)
-  return 0;
-
  if (val == CPUFREQ_CREATE_POLICY)
-  ret = __cpufreq_stats_create_table(policy, table);
+  ret = __cpufreq_stats_create_table(policy);
  else if (val == CPUFREQ_REMOVE_POLICY)
   __cpufreq_stats_free_table(policy);
 
-- 
1.7.1