From f882c93ecf4c7e0217a6600dca0ca6e20831b4d0 Mon Sep 17 00:00:00 2001
From: Larry Woodman <lwoodman@redhat.com>
Date: Tue, 23 Sep 2014 19:40:13 -0400
Subject: [kernel] sched/balancing: Reduce the rate of needless idle load balancing

Message-id: <1411501213-15939-4-git-send-email-lwoodman@redhat.com>
Patchwork-id: 96503
O-Subject: [RHEL7.1 PATCH 3/3] sched/balancing: Reduce the rate of needless idle load balancing
Bugzilla: 1120318
RH-Acked-by: Aristeu Rozanski <aris@redhat.com>

commit ed61bbc69c773465782476c7e5869fa5607fa73a
 Author: Tim Chen <tim.c.chen@linux.intel.com>
 Date:   Tue May 20 14:39:27 2014 -0700

 sched/balancing: Reduce the rate of needless idle load balancing

 The current no_hz idle load balancer do load balancing for *all* idle
 cpus, even though the time due to load balance for a particular
 idle cpu could be still a while in the future.  This introduces a much
 higher load balancing rate than what is necessary.  The patch
 changes the behavior by only doing idle load balancing on
 behalf of an idle cpu only when it is due for load balancing.

 On SGI's systems with over 3000 cores, the cpu responsible for idle
 balancing got overwhelmed with idle balancing, and introduces a lot of
 OS noise to workloads.  This patch fixes the issue.

Signed-off-by: Tim Chen <tim.c.chen@linux.intel.com>
Acked-by: Russ Anderson <rja@sgi.com>
Reviewed-by: Rik van Riel <riel@redhat.com>
Reviewed-by: Jason Low <jason.low2@hp.com>
Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Len Brown <len.brown@intel.com>
Cc: Dimitri Sivanich <sivanich@sgi.com>
Cc: Hedi Berriche <hedi@sgi.com>
Cc: Andi Kleen <andi@firstfloor.org>
Cc: MichelLespinasse <walken@google.com>
Cc: Peter Hurley <peter@hurleysoftware.com>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/1400621967.2970.280.camel@schen9-DESK
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 5ffa7a2..7940646 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6866,12 +6866,17 @@ static void nohz_idle_balance(int this_cpu, enum cpu_idle_type idle)
 
   rq = cpu_rq(balance_cpu);
 
-  raw_spin_lock_irq(&rq->lock);
-  update_rq_clock(rq);
-  update_idle_cpu_load(rq);
-  raw_spin_unlock_irq(&rq->lock);
-
-  rebalance_domains(balance_cpu, CPU_IDLE);
+  /*
+   * If time for next balance is due,
+   * do the balance.
+   */
+  if (time_after_eq(jiffies, rq->next_balance)) {
+   raw_spin_lock_irq(&rq->lock);
+   update_rq_clock(rq);
+   update_idle_cpu_load(rq);
+   raw_spin_unlock_irq(&rq->lock);
+   rebalance_domains(balance_cpu, CPU_IDLE);
+  }
 
   if (time_after(this_rq->next_balance, rq->next_balance))
    this_rq->next_balance = rq->next_balance;
-- 
1.7.1