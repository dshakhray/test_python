From 8ff98242a9f6819a8db1b15d72ef76483dbfdfc7 Mon Sep 17 00:00:00 2001
From: Andrea Arcangeli <aarcange@redhat.com>
Date: Tue, 9 Sep 2014 01:16:34 -0400
Subject: [mm] slub: do not VM_BUG_ON_PAGE() for temporary on-stack pages

Message-id: <1410225399-8094-18-git-send-email-aarcange@redhat.com>
Patchwork-id: 93375
O-Subject: [RHEL7.1 PATCH 17/22] mm/slub.c: do not VM_BUG_ON_PAGE() for temporary on-stack pages
Bugzilla: 1135506
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Rafael Aquini <aquini@redhat.com>

From: Dave Hansen <dave.hansen@linux.intel.com>

Commit 309381feaee5 ("mm: dump page when hitting a VM_BUG_ON using
VM_BUG_ON_PAGE") added a bunch of VM_BUG_ON_PAGE() calls.

But, most of the ones in the slub code are for _temporary_ 'struct
page's which are declared on the stack and likely have lots of gunk in
them.  Dumping their contents out will just confuse folks looking at
bad_page() output.  Plus, if we try to page_to_pfn() on them or
soemthing, we'll probably oops anyway.

Turn them back in to VM_BUG_ON()s.

Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
Cc: Sasha Levin <sasha.levin@oracle.com>
Cc: "Kirill A. Shutemov" <kirill@shutemov.name>
Cc: Pekka Enberg <penberg@kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/mm/slub.c b/mm/slub.c
index 97bdd2a..44f154c 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -1531,7 +1531,7 @@ static inline void *acquire_slab(struct kmem_cache *s,
   new.freelist = freelist;
  }
 
- VM_BUG_ON_PAGE(new.frozen, &new);
+ VM_BUG_ON(new.frozen);
  new.frozen = 1;
 
  if (!__cmpxchg_double_slab(s, page,
@@ -1782,7 +1782,7 @@ static void deactivate_slab(struct kmem_cache *s, struct page *page, void *freel
    set_freepointer(s, freelist, prior);
    new.counters = counters;
    new.inuse--;
-   VM_BUG_ON_PAGE(!new.frozen, &new);
+   VM_BUG_ON(!new.frozen);
 
   } while (!__cmpxchg_double_slab(s, page,
    prior, counters,
@@ -1810,7 +1810,7 @@ redo:
 
  old.freelist = page->freelist;
  old.counters = page->counters;
- VM_BUG_ON_PAGE(!old.frozen, &old);
+ VM_BUG_ON(!old.frozen);
 
  /* Determine target state of the slab */
  new.counters = old.counters;
@@ -1921,7 +1921,7 @@ static void unfreeze_partials(struct kmem_cache *s,
 
    old.freelist = page->freelist;
    old.counters = page->counters;
-   VM_BUG_ON_PAGE(!old.frozen, &old);
+   VM_BUG_ON(!old.frozen);
 
    new.counters = old.counters;
    new.freelist = old.freelist;
@@ -2190,7 +2190,7 @@ static inline void *get_freelist(struct kmem_cache *s, struct page *page)
   counters = page->counters;
 
   new.counters = counters;
-  VM_BUG_ON_PAGE(!new.frozen, &new);
+  VM_BUG_ON(!new.frozen);
 
   new.inuse = page->objects;
   new.frozen = freelist != NULL;
@@ -2284,7 +2284,7 @@ load_freelist:
   * page is pointing to the page from which the objects are obtained.
   * That page must be frozen for per cpu allocations to work.
   */
- VM_BUG_ON_PAGE(!c->page->frozen, c->page);
+ VM_BUG_ON(!c->page->frozen);
  c->freelist = get_freepointer(s, freelist);
  c->tid = next_tid(c->tid);
  local_irq_restore(flags);
-- 
1.7.1