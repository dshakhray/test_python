From 322821c8ec7d08ad57895d08548b5847129d8a76 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:36:31 -0400
Subject: [ethernet] i40e: make string references to q be queue

Message-id: <1409658042-22689-31-git-send-email-sassmann@redhat.com>
Patchwork-id: 90225
O-Subject: [RHEL7.1 PATCH 030/281] i40e: make string references to q be queue
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jesse Brandeburg <jesse.brandeburg@intel.com>

This cleans up strings for consistency, q is replaced with queue.

Change-ID: Ia5f9dfae9af261f4c24485854264e02363729cf3
Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
Signed-off-by: Catherine Sullivan <catherine.sullivan@intel.com>
Tested-by: Kavindya Deegala <kavindya.s.deegala@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit f29eaa3d08d4f0740256253cc6f5d6c7486a3c17)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index a3f122e..acf0b20 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -2582,7 +2582,7 @@ static void i40e_configure_msi_and_legacy(struct i40e_vsi *vsi)
  /* FIRSTQ_INDX = 0, FIRSTQ_TYPE = 0 (rx) */
  wr32(hw, I40E_PFINT_LNKLST0, 0);
 
- /* Associate the queue pair to the vector and enable the q int */
+ /* Associate the queue pair to the vector and enable the queue int */
  val = I40E_QINT_RQCTL_CAUSE_ENA_MASK        |
        (I40E_RX_ITR << I40E_QINT_RQCTL_ITR_INDX_SHIFT) |
        (I40E_QUEUE_TYPE_TX << I40E_QINT_TQCTL_NEXTQ_TYPE_SHIFT);
@@ -5442,7 +5442,7 @@ static void i40e_handle_mdd_event(struct i40e_pf *pf)
   u8 queue = (reg & I40E_GL_MDET_TX_QUEUE_MASK)
     >> I40E_GL_MDET_TX_QUEUE_SHIFT;
   dev_info(&pf->pdev->dev,
-    "Malicious Driver Detection TX event 0x%02x on q %d of function 0x%02x\n",
+    "Malicious Driver Detection event 0x%02x on TX queue %d of function 0x%02x\n",
     event, queue, func);
   wr32(hw, I40E_GL_MDET_TX, 0xffffffff);
   mdd_detected = true;
@@ -5456,7 +5456,7 @@ static void i40e_handle_mdd_event(struct i40e_pf *pf)
   u8 queue = (reg & I40E_GL_MDET_RX_QUEUE_MASK)
     >> I40E_GL_MDET_RX_QUEUE_SHIFT;
   dev_info(&pf->pdev->dev,
-    "Malicious Driver Detection RX event 0x%02x on q %d of function 0x%02x\n",
+    "Malicious Driver Detection event 0x%02x on RX queue %d of function 0x%02x\n",
     event, queue, func);
   wr32(hw, I40E_GL_MDET_RX, 0xffffffff);
   mdd_detected = true;
@@ -6882,8 +6882,7 @@ static int i40e_vsi_setup_vectors(struct i40e_vsi *vsi)
  }
 
  if (vsi->base_vector) {
-  dev_info(&pf->pdev->dev,
-    "VSI %d has non-zero base vector %d\n",
+  dev_info(&pf->pdev->dev, "VSI %d has non-zero base vector %d\n",
     vsi->seid, vsi->base_vector);
   return -EEXIST;
  }
@@ -6902,7 +6901,7 @@ static int i40e_vsi_setup_vectors(struct i40e_vsi *vsi)
        vsi->num_q_vectors, vsi->idx);
  if (vsi->base_vector < 0) {
   dev_info(&pf->pdev->dev,
-    "failed to get q tracking for VSI %d, err=%d\n",
+    "failed to get queue tracking for VSI %d, err=%d\n",
     vsi->seid, vsi->base_vector);
   i40e_vsi_free_q_vectors(vsi);
   ret = -ENOENT;
-- 
1.7.1