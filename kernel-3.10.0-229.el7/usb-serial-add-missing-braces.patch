From 8b4d1f2438bfb79dea7b38fe957839e79ff4d78a Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:07:10 -0400
Subject: [usb] serial: add missing braces

Message-id: <1410887463-20674-359-git-send-email-dzickus@redhat.com>
Patchwork-id: 95561
O-Subject: [RHEL7 PATCH 358/591] USB: serial: add missing braces
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit ca0400d2caf0d6f18445feea79c8c5a4ccf77e61
Author: Johan Hovold <jhovold@gmail.com>
Date:   Wed Mar 12 19:09:41 2014 +0100

    USB: serial: add missing braces

    Add missing braces to conditional branches and one loop in usb-serial
    core and generic implementation.

    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/generic.c b/drivers/usb/serial/generic.c
index 33d7f40..1bd1922 100644
--- a/drivers/usb/serial/generic.c
+++ b/drivers/usb/serial/generic.c
@@ -332,9 +332,9 @@ void usb_serial_generic_process_read_urb(struct urb *urb)
   * stuff like 3G modems, so shortcircuit it in the 99.9999999% of
   * cases where the USB serial is not a console anyway.
   */
- if (!port->port.console || !port->sysrq)
+ if (!port->port.console || !port->sysrq) {
   tty_insert_flip_string(&port->port, ch, urb->actual_length);
- else {
+ } else {
   for (i = 0; i < urb->actual_length; i++, ch++) {
    if (!usb_serial_handle_sysrq_char(port, *ch))
     tty_insert_flip_char(&port->port, *ch, TTY_NORMAL);
@@ -388,8 +388,9 @@ resubmit:
  if (!port->throttled) {
   spin_unlock_irqrestore(&port->lock, flags);
   usb_serial_generic_submit_read_urb(port, i, GFP_ATOMIC);
- } else
+ } else {
   spin_unlock_irqrestore(&port->lock, flags);
+ }
 }
 EXPORT_SYMBOL_GPL(usb_serial_generic_read_bulk_callback);
 
@@ -399,10 +400,10 @@ void usb_serial_generic_write_bulk_callback(struct urb *urb)
  struct usb_serial_port *port = urb->context;
  int i;
 
- for (i = 0; i < ARRAY_SIZE(port->write_urbs); ++i)
+ for (i = 0; i < ARRAY_SIZE(port->write_urbs); ++i) {
   if (port->write_urbs[i] == urb)
    break;
-
+ }
  spin_lock_irqsave(&port->lock, flags);
  port->tx_bytes -= urb->transfer_buffer_length;
  set_bit(i, &port->write_urbs_free);
diff --git a/drivers/usb/serial/usb-serial.c b/drivers/usb/serial/usb-serial.c
index c68fc9f..4c3aeaf 100644
--- a/drivers/usb/serial/usb-serial.c
+++ b/drivers/usb/serial/usb-serial.c
@@ -1160,9 +1160,9 @@ static int usb_serial_reset_resume(struct usb_interface *intf)
  usb_serial_unpoison_port_urbs(serial);
 
  serial->suspending = 0;
- if (serial->type->reset_resume)
+ if (serial->type->reset_resume) {
   rv = serial->type->reset_resume(serial);
- else {
+ } else {
   rv = -EOPNOTSUPP;
   intf->needs_binding = 1;
  }
@@ -1337,9 +1337,9 @@ static int usb_serial_register(struct usb_serial_driver *driver)
  if (retval) {
   pr_err("problem %d when registering driver %s\n", retval, driver->description);
   list_del(&driver->driver_list);
- } else
+ } else {
   pr_info("USB Serial support registered for %s\n", driver->description);
-
+ }
  mutex_unlock(&table_lock);
  return retval;
 }
-- 
1.7.1