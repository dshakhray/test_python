From 28f87f390c0f34617096638aa5030da3c9c26106 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:26:59 -0400
Subject: [net] genetlink: add and use genl_set_err()

Message-id: <73bda723bfb68c95561b97fa45cfe55bf83717a3.1410528958.git.jbenc@redhat.com>
Patchwork-id: 93968
O-Subject: [RHEL7.1 net PATCH 17/23] genetlink: add and use genl_set_err()
Bugzilla: 1140656
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140656
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit 62b68e99faa802352e9cb2ae91adecd8dfddf1b8
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Nov 19 15:19:37 2013 +0100

    genetlink: add and use genl_set_err()

    Add a static inline to generic netlink to wrap netlink_set_err()
    to make it easier to use here - use it in openvswitch (the only
    generic netlink user of netlink_set_err()).

    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/genetlink.h b/include/net/genetlink.h
index 96a6090..d626f30 100644
--- a/include/net/genetlink.h
+++ b/include/net/genetlink.h
@@ -362,5 +362,19 @@ static inline struct sk_buff *genlmsg_new(size_t payload, gfp_t flags)
  return nlmsg_new(genlmsg_total_size(payload), flags);
 }
 
+/**
+ * genl_set_err - report error to genetlink broadcast listeners
+ * @net: the network namespace to report the error to
+ * @portid: the PORTID of a process that we want to skip (if any)
+ * @group: the broadcast group that will notice the error
+ * @code: error code, must be negative (as usual in kernelspace)
+ *
+ * This function returns the number of broadcast listeners that have set the
+ * NETLINK_RECV_NO_ENOBUFS socket option.
+ */
+static inline int genl_set_err(struct net *net, u32 portid, u32 group, int code)
+{
+ return netlink_set_err(net->genl_sock, portid, group, code);
+}
 
 #endif /* __NET_GENERIC_NETLINK_H */
diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index 174705b..4188edb 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -883,8 +883,8 @@ static int ovs_flow_cmd_new_or_set(struct sk_buff *skb, struct genl_info *info)
  if (!IS_ERR(reply))
   ovs_notify(reply, info, &ovs_dp_flow_multicast_group);
  else
-  netlink_set_err(sock_net(skb->sk)->genl_sock, 0,
-    ovs_dp_flow_multicast_group.id, PTR_ERR(reply));
+  genl_set_err(sock_net(skb->sk), 0,
+        ovs_dp_flow_multicast_group.id, PTR_ERR(reply));
  return 0;
 
 err_flow_free:
@@ -1365,8 +1365,8 @@ static int ovs_dp_cmd_set(struct sk_buff *skb, struct genl_info *info)
  reply = ovs_dp_cmd_build_info(dp, info, OVS_DP_CMD_NEW);
  if (IS_ERR(reply)) {
   err = PTR_ERR(reply);
-  netlink_set_err(sock_net(skb->sk)->genl_sock, 0,
-    ovs_dp_datapath_multicast_group.id, err);
+  genl_set_err(sock_net(skb->sk), 0,
+        ovs_dp_datapath_multicast_group.id, err);
   err = 0;
   goto unlock;
  }
diff --git a/net/openvswitch/dp_notify.c b/net/openvswitch/dp_notify.c
index 92b8af6..9e3111a 100644
--- a/net/openvswitch/dp_notify.c
+++ b/net/openvswitch/dp_notify.c
@@ -34,9 +34,9 @@ static void dp_detach_port_notify(struct vport *vport)
        OVS_VPORT_CMD_DEL);
  ovs_dp_detach_port(vport);
  if (IS_ERR(notify)) {
-  netlink_set_err(ovs_dp_get_net(dp)->genl_sock, 0,
-    ovs_dp_vport_multicast_group.id,
-    PTR_ERR(notify));
+  genl_set_err(ovs_dp_get_net(dp), 0,
+        ovs_dp_vport_multicast_group.id,
+        PTR_ERR(notify));
   return;
  }
 
-- 
1.7.1