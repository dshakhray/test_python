From 3df67539e5140ddf01d9983f173cda222c5f8711 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Sat, 22 Nov 2014 23:56:47 -0500
Subject: [md] dm: add presuspend_undo hook to target_type

Message-id: <1416700613-25142-8-git-send-email-snitzer@redhat.com>
Patchwork-id: 100841
O-Subject: [RHEL7.1 PATCH 07/13] dm: add presuspend_undo hook to target_type
Bugzilla: 1165246
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1165246

Upstream linux-dm.git commit d67ee213fa5700c7da526fe5bcccd485cfa63d8b
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Tue Oct 28 20:13:31 2014 -0400

    dm: add presuspend_undo hook to target_type

    The DM thin-pool target now must undo the changes performed during
    pool_presuspend() so introduce presuspend_undo hook in target_type.

    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Acked-by: Joe Thornber <ejt@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-table.c b/drivers/md/dm-table.c
index 6fedc39..2801e11 100644
--- a/drivers/md/dm-table.c
+++ b/drivers/md/dm-table.c
@@ -1540,18 +1540,32 @@ fmode_t dm_table_get_mode(struct dm_table *t)
 }
 EXPORT_SYMBOL(dm_table_get_mode);
 
-static void suspend_targets(struct dm_table *t, unsigned postsuspend)
+enum suspend_mode {
+ PRESUSPEND,
+ PRESUSPEND_UNDO,
+ POSTSUSPEND,
+};
+
+static void suspend_targets(struct dm_table *t, enum suspend_mode mode)
 {
  int i = t->num_targets;
  struct dm_target *ti = t->targets;
 
  while (i--) {
-  if (postsuspend) {
+  switch (mode) {
+  case PRESUSPEND:
+   if (ti->type->presuspend)
+    ti->type->presuspend(ti);
+   break;
+  case PRESUSPEND_UNDO:
+   if (ti->type->presuspend_undo)
+    ti->type->presuspend_undo(ti);
+   break;
+  case POSTSUSPEND:
    if (ti->type->postsuspend)
     ti->type->postsuspend(ti);
-  } else if (ti->type->presuspend)
-   ti->type->presuspend(ti);
-
+   break;
+  }
   ti++;
  }
 }
@@ -1561,7 +1575,15 @@ void dm_table_presuspend_targets(struct dm_table *t)
  if (!t)
   return;
 
- suspend_targets(t, 0);
+ suspend_targets(t, PRESUSPEND);
+}
+
+void dm_table_presuspend_undo_targets(struct dm_table *t)
+{
+ if (!t)
+  return;
+
+ suspend_targets(t, PRESUSPEND_UNDO);
 }
 
 void dm_table_postsuspend_targets(struct dm_table *t)
@@ -1569,7 +1591,7 @@ void dm_table_postsuspend_targets(struct dm_table *t)
  if (!t)
   return;
 
- suspend_targets(t, 1);
+ suspend_targets(t, POSTSUSPEND);
 }
 
 int dm_table_resume_targets(struct dm_table *t)
diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index bdf680d..70dabb8 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -2852,7 +2852,10 @@ int dm_suspend(struct mapped_device *md, unsigned suspend_flags)
  if (noflush)
   set_bit(DMF_NOFLUSH_SUSPENDING, &md->flags);
 
- /* This does not get reverted if there's an error later. */
+ /*
+  * This gets reverted if there's an error later and the targets
+  * provide the .presuspend_undo hook.
+  */
  dm_table_presuspend_targets(map);
 
  /*
@@ -2863,8 +2866,10 @@ int dm_suspend(struct mapped_device *md, unsigned suspend_flags)
   */
  if (!noflush && do_lockfs) {
   r = lock_fs(md);
-  if (r)
+  if (r) {
+   dm_table_presuspend_undo_targets(map);
    goto out_unlock;
+  }
  }
 
  /*
@@ -2912,6 +2917,7 @@ int dm_suspend(struct mapped_device *md, unsigned suspend_flags)
    start_queue(md->queue);
 
   unlock_fs(md);
+  dm_table_presuspend_undo_targets(map);
   goto out_unlock; /* pushback list is already flushed, so skip flush */
  }
 
diff --git a/drivers/md/dm.h b/drivers/md/dm.h
index 988c7fb..7819940 100644
--- a/drivers/md/dm.h
+++ b/drivers/md/dm.h
@@ -65,6 +65,7 @@ void dm_table_set_restrictions(struct dm_table *t, struct request_queue *q,
           struct queue_limits *limits);
 struct list_head *dm_table_get_devices(struct dm_table *t);
 void dm_table_presuspend_targets(struct dm_table *t);
+void dm_table_presuspend_undo_targets(struct dm_table *t);
 void dm_table_postsuspend_targets(struct dm_table *t);
 int dm_table_resume_targets(struct dm_table *t);
 int dm_table_any_congested(struct dm_table *t, int bdi_bits);
diff --git a/include/linux/device-mapper.h b/include/linux/device-mapper.h
index 0268840..293cf99 100644
--- a/include/linux/device-mapper.h
+++ b/include/linux/device-mapper.h
@@ -64,6 +64,7 @@ typedef int (*dm_request_endio_fn) (struct dm_target *ti,
         union map_info *map_context);
 
 typedef void (*dm_presuspend_fn) (struct dm_target *ti);
+typedef void (*dm_presuspend_undo_fn) (struct dm_target *ti);
 typedef void (*dm_postsuspend_fn) (struct dm_target *ti);
 typedef int (*dm_preresume_fn) (struct dm_target *ti);
 typedef void (*dm_resume_fn) (struct dm_target *ti);
@@ -145,6 +146,7 @@ struct target_type {
  dm_endio_fn end_io;
  dm_request_endio_fn rq_end_io;
  dm_presuspend_fn presuspend;
+ dm_presuspend_undo_fn presuspend_undo;
  dm_postsuspend_fn postsuspend;
  dm_preresume_fn preresume;
  dm_resume_fn resume;
diff --git a/include/uapi/linux/dm-ioctl.h b/include/uapi/linux/dm-ioctl.h
index 3315ab2..2be66f4 100644
--- a/include/uapi/linux/dm-ioctl.h
+++ b/include/uapi/linux/dm-ioctl.h
@@ -267,9 +267,9 @@ enum {
 #define DM_DEV_SET_GEOMETRY _IOWR(DM_IOCTL, DM_DEV_SET_GEOMETRY_CMD, struct dm_ioctl)
 
 #define DM_VERSION_MAJOR 4
-#define DM_VERSION_MINOR 28
+#define DM_VERSION_MINOR 29
 #define DM_VERSION_PATCHLEVEL 0
-#define DM_VERSION_EXTRA "-ioctl (2014-09-17)"
+#define DM_VERSION_EXTRA "-ioctl (2014-10-28)"
 
 /* Status bits */
 #define DM_READONLY_FLAG (1 << 0) /* In/Out */
-- 
1.7.1