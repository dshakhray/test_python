From 3cbaf259fff47ea9e4b8da5bc7e146a42ddbaa3b Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:27:53 -0400
Subject: [tools] perf/traceevent: Add direct access to dynamic arrays

Message-id: <1408462094-14194-305-git-send-email-jolsa@redhat.com>
Patchwork-id: 88273
O-Subject: [PATCH RHEL7.1 BZ1131394 304/325] tools lib traceevent: Add direct access to dynamic arrays
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 0497a9ebaf7ae4d573497b3e053ad4c3d5c9921d
Author: Steven Rostedt <rostedt@goodmis.org>
Date: Mon Nov 11 16:08:10 2013 -0500

description
===========
Jiri Olsa was writing a plugin for the cfg80211_tx_mlme_mgmt trace
event, and was not able to get the implemented function working.
The event's print fmt looks like:

   "netdev:%s(%d), ftype:0x%.2x", REC->name, REC->ifindex,
            __le16_to_cpup((__le16 *)__get_dynamic_array(frame))

As there's no helper function for __le16_to_cpup(), Jiri was creating one
with a plugin. But unfortunately, it would not work even though he set
up the plugin correctly.

The problem is that the function parameters do not handle the helper
function "__get_dynamic_array()", and that passes in a NULL pointer.

Adding PRINT_DYNAMIC_ARRAY direct support to eval_num_arg() allows the
use of __get_dynamic_array() in function parameters.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/lib/traceevent/event-parse.c b/tools/lib/traceevent/event-parse.c
index 8f450ad..0362d57 100644
--- a/tools/lib/traceevent/event-parse.c
+++ b/tools/lib/traceevent/event-parse.c
@@ -3435,6 +3435,19 @@ eval_num_arg(void *data, int size, struct event_format *event, struct print_arg
    goto out_warning_op;
   }
   break;
+ case PRINT_DYNAMIC_ARRAY:
+  /* Without [], we pass the address to the dynamic data */
+  offset = pevent_read_number(pevent,
+         data + arg->dynarray.field->offset,
+         arg->dynarray.field->size);
+  /*
+   * The actual length of the dynamic array is stored
+   * in the top half of the field, and the offset
+   * is in the bottom half of the 32 bit field.
+   */
+  offset &= 0xffff;
+  val = (unsigned long long)(data + offset);
+  break;
  default: /* not sure what to do there */
   return 0;
  }
-- 
1.7.1