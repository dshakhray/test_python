From 089a96bd054ad0362b62270062f95178d5c0b173 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:29 -0400
Subject: [cpufreq] stats: Remove redundant cpufreq_cpu_get() call

Message-id: <1409235879-1283-116-git-send-email-prarit@redhat.com>
Patchwork-id: 89421
O-Subject: [RHEL7.1 PATCH BZ 1134639 115/185] cpufreq: stats: Remove redundant cpufreq_cpu_get() call
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit b24a5b6512a6fb89f3b99b9b0f829b4448e62db0
Author: Saravana Kannan <skannan@codeaurora.org>
Date:   Thu Feb 27 17:58:34 2014 -0800

    cpufreq: stats: Remove redundant cpufreq_cpu_get() call

    __cpufreq_stats_create_table always gets pass the valid and real policy
    struct. So, there's no need to call cpufreq_cpu_get() to get the policy
    again.

    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Saravana Kannan <skannan@codeaurora.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index 782679f..d5be180 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -185,7 +185,6 @@ static int __cpufreq_stats_create_table(struct cpufreq_policy *policy)
 {
  unsigned int i, j, count = 0, ret = 0;
  struct cpufreq_stats *stat;
- struct cpufreq_policy *current_policy;
  unsigned int alloc_size;
  unsigned int cpu = policy->cpu;
  struct cpufreq_frequency_table *table;
@@ -200,13 +199,7 @@ static int __cpufreq_stats_create_table(struct cpufreq_policy *policy)
  if ((stat) == NULL)
   return -ENOMEM;
 
- current_policy = cpufreq_cpu_get(cpu);
- if (current_policy == NULL) {
-  ret = -EINVAL;
-  goto error_get_fail;
- }
-
- ret = sysfs_create_group(&current_policy->kobj, &stats_attr_group);
+ ret = sysfs_create_group(&policy->kobj, &stats_attr_group);
  if (ret)
   goto error_out;
 
@@ -249,13 +242,10 @@ static int __cpufreq_stats_create_table(struct cpufreq_policy *policy)
  stat->last_time = get_jiffies_64();
  stat->last_index = freq_table_get_index(stat, policy->cur);
  spin_unlock(&cpufreq_stats_lock);
- cpufreq_cpu_put(current_policy);
  return 0;
 error_alloc:
  sysfs_remove_group(&policy->kobj, &stats_attr_group);
 error_out:
- cpufreq_cpu_put(current_policy);
-error_get_fail:
  kfree(stat);
  per_cpu(cpufreq_stats_table, cpu) = NULL;
  return ret;
-- 
1.7.1