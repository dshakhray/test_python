From 76a722bb040d540f587dc989c7594162ff80681d Mon Sep 17 00:00:00 2001
From: Robert S Peterson <rpeterso@redhat.com>
Date: Fri, 11 Jul 2014 13:40:49 -0400
Subject: [fs] GFS2: fix potential NULL pointer dereference

Message-id: <1303226971.6806828.1405086049184.JavaMail.zimbra@redhat.com>
Patchwork-id: 85698
O-Subject: [RHEL7.1 PATCH fs] GFS2: fix potential NULL pointer dereference
Bugzilla: 1095835
RH-Acked-by: Abhijith Das <adas@redhat.com>
RH-Acked-by: Steven Whitehouse <swhiteho@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>

Hi,

One of the patches I previously posted for bug #1095835 caused
a regression, so a third patch is needed (from upstream) to fix it.
The upstream patch is here:

http://git.kernel.org/cgit/linux/kernel/git/steve/gfs2-3.0-nmw.git/commit/fs/gfs2/glock.c?id=e3c4269d139db7471ee560fb30948179e180b3d4

The patch was tested on my gfs-i24c-01 system with a reliable
recreation method described in bz#1117352.

Patch description:

Commit [e66cf1610: GFS2: Use lockref for glocks] replaced call:
    atomic_read(&gi->gl->gl_ref) == 0
with:
    __lockref_is_dead(&gl->gl_lockref)
therefore changing how gl is accessed, from gi->gl to plan gl.
However, gl can be a NULL pointer, and so gi->gl needs to be
used instead (which is guaranteed not to be NULL because fo
the while loop checking that condition).

rhbz#1095835

Regards,

Bob Peterson
Red Hat File Systems

Signed-off-by: Bob Peterson <rpeterso@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/gfs2/glock.c b/fs/gfs2/glock.c
index e7f240b..fb862bd 100644
--- a/fs/gfs2/glock.c
+++ b/fs/gfs2/glock.c
@@ -1902,7 +1902,8 @@ static int gfs2_glock_iter_next(struct gfs2_glock_iter *gi)
    gi->nhash = 0;
   }
  /* Skip entries for other sb and dead entries */
- } while (gi->sdp != gi->gl->gl_sbd || __lockref_is_dead(&gl->gl_lockref));
+ } while (gi->sdp != gi->gl->gl_sbd ||
+   __lockref_is_dead(&gi->gl->gl_lockref));
 
  return 0;
 }
-- 
1.7.1