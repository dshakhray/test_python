From 923f75a62e09d0cc8b5583a42e0a69d566acc73c Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:34 -0400
Subject: [block] blk-mq: let blk_mq_tag_to_rq() take blk_mq_tags as the main parameter

Message-id: <1402670238-13916-107-git-send-email-snitzer@redhat.com>
Patchwork-id: 83897
O-Subject: [RHEL7.1 PATCH 106/150] blk-mq: let blk_mq_tag_to_rq() take blk_mq_tags as the main parameter
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 0e62f51f8753b048f391ee2d7f2af1f7297b0be5
Author: Jens Axboe <axboe@fb.com>
Date:   Wed Jun 4 10:23:49 2014 -0600

    blk-mq: let blk_mq_tag_to_rq() take blk_mq_tags as the main parameter

    We currently pass in the hardware queue, and get the tags from there.
    But from scsi-mq, with a shared tag space, it's a lot more convenient
    to pass in the blk_mq_tags instead as the hardware queue isn't always
    directly available. So instead of having to re-map to a given
    hardware queue from rq->mq_ctx, just pass in the tags structure.

    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 4e8e8cf..4e4cd62 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -529,15 +529,20 @@ void blk_mq_kick_requeue_list(struct request_queue *q)
 }
 EXPORT_SYMBOL(blk_mq_kick_requeue_list);
 
-struct request *blk_mq_tag_to_rq(struct blk_mq_hw_ctx *hctx, unsigned int tag)
+static inline bool is_flush_request(struct request *rq, unsigned int tag)
 {
- struct request_queue *q = hctx->queue;
+ return ((rq->cmd_flags & REQ_FLUSH_SEQ) &&
+   rq->q->flush_rq->tag == tag);
+}
 
- if ((q->flush_rq->cmd_flags & REQ_FLUSH_SEQ) &&
-     q->flush_rq->tag == tag)
-  return q->flush_rq;
+struct request *blk_mq_tag_to_rq(struct blk_mq_tags *tags, unsigned int tag)
+{
+ struct request *rq = tags->rqs[tag];
+
+ if (!is_flush_request(rq, tag))
+  return rq;
 
- return hctx->tags->rqs[tag];
+ return rq->q->flush_rq;
 }
 EXPORT_SYMBOL(blk_mq_tag_to_rq);
 
@@ -566,7 +571,7 @@ static void blk_mq_timeout_check(void *__data, unsigned long *free_tags)
   if (tag >= hctx->tags->nr_tags)
    break;
 
-  rq = blk_mq_tag_to_rq(hctx, tag++);
+  rq = blk_mq_tag_to_rq(hctx->tags, tag++);
   if (rq->q != hctx->queue)
    continue;
   if (!test_bit(REQ_ATOM_STARTED, &rq->atomic_flags))
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index b763fef..6673065 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -155,7 +155,7 @@ void blk_mq_free_request(struct request *rq);
 bool blk_mq_can_queue(struct blk_mq_hw_ctx *);
 struct request *blk_mq_alloc_request(struct request_queue *q, int rw,
   gfp_t gfp, bool reserved);
-struct request *blk_mq_tag_to_rq(struct blk_mq_hw_ctx *hctx, unsigned int tag);
+struct request *blk_mq_tag_to_rq(struct blk_mq_tags *tags, unsigned int tag);
 
 struct blk_mq_hw_ctx *blk_mq_map_queue(struct request_queue *, const int ctx_index);
 struct blk_mq_hw_ctx *blk_mq_alloc_single_hw_queue(struct blk_mq_tag_set *, unsigned int, int);
-- 
1.7.1