From bee622e10523d8001b06b142496b8f7177a59008 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:40:06 -0400
Subject: [ethernet] i40e: fix race conditions on queuing skb for HW time stamp

Message-id: <1409658042-22689-246-git-send-email-sassmann@redhat.com>
Patchwork-id: 90447
O-Subject: [RHEL7.1 PATCH 245/281] i40e: fix race conditions on queuing skb for HW time stamp
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jakub Kicinski <kubakici@wp.pl>

i40e has a single set of TX time stamping resources per NIC.
Use a simple bit lock to avoid race conditions and leaking skbs
when multiple TX rings try to claim time stamping.

Signed-off-by: Jakub Kicinski <kubakici@wp.pl>
Tested-By: Jim Young <jamesx.m.young@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 9ce34f023d6025af89087472f0327e0a81073167)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index f7bf69f..29cd81a 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -134,6 +134,7 @@ enum i40e_state_t {
  __I40E_EMP_RESET_REQUESTED,
  __I40E_FILTER_OVERFLOW_PROMISC,
  __I40E_SUSPENDED,
+ __I40E_PTP_TX_IN_PROGRESS,
  __I40E_BAD_EEPROM,
  __I40E_DOWN_REQUESTED,
 };
diff --git a/drivers/net/ethernet/intel/i40e/i40e_ptp.c b/drivers/net/ethernet/intel/i40e/i40e_ptp.c
index c364781..582704a 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_ptp.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ptp.c
@@ -314,6 +314,7 @@ void i40e_ptp_tx_hwtstamp(struct i40e_pf *pf)
  skb_tstamp_tx(pf->ptp_tx_skb, &shhwtstamps);
  dev_kfree_skb_any(pf->ptp_tx_skb);
  pf->ptp_tx_skb = NULL;
+ clear_bit_unlock(__I40E_PTP_TX_IN_PROGRESS, &pf->state);
 }
 
 /**
@@ -677,6 +678,7 @@ void i40e_ptp_stop(struct i40e_pf *pf)
  if (pf->ptp_tx_skb) {
   dev_kfree_skb_any(pf->ptp_tx_skb);
   pf->ptp_tx_skb = NULL;
+  clear_bit_unlock(__I40E_PTP_TX_IN_PROGRESS, &pf->state);
  }
 
  if (pf->ptp_clock) {
diff --git a/drivers/net/ethernet/intel/i40e/i40e_txrx.c b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
index f65d361..79489a8 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@ -1856,7 +1856,8 @@ static int i40e_tsyn(struct i40e_ring *tx_ring, struct sk_buff *skb,
   * we are not already transmitting a packet to be timestamped
   */
  pf = i40e_netdev_to_pf(tx_ring->netdev);
- if (pf->ptp_tx && !pf->ptp_tx_skb) {
+ if (pf->ptp_tx &&
+     !test_and_set_bit_lock(__I40E_PTP_TX_IN_PROGRESS, &pf->state)) {
   skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
   pf->ptp_tx_skb = skb_get(skb);
  } else {
-- 
1.7.1