From 05fd32a33d45f0f64a8dcae47ea5133269f32826 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 00:59:43 -0400
Subject: [acpi] dock: Walk list in reverse order during removal of devices

Message-id: <20140710005943.22146.28421.stgit@gir.stowe>
Patchwork-id: 85553
O-Subject: [RHEL7.1 PATCH 014/105] ACPI / dock: Walk list in reverse order during removal of devices
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 37f908778f20bbcc35ab9a98a5b584329c6abf08

commit 37f908778f20bbcc35ab9a98a5b584329c6abf08
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Jun 30 23:46:42 2013 +0200

    ACPI / dock: Walk list in reverse order during removal of devices

    If there are indirect dependencies between devices in a dock
    station's dependent devices list, they may be broken if the devices
    are removed in the same order in which they have been added.

    For this reason, make the code in handle_eject_request() walk the
    list of dependent devices in reverse order.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/dock.c b/drivers/acpi/dock.c
index 7c86d01..41c5d04 100644
--- a/drivers/acpi/dock.c
+++ b/drivers/acpi/dock.c
@@ -337,9 +337,29 @@ static void dock_remove_acpi_device(acpi_handle handle)
 }
 
 /**
- * hotplug_dock_devices - insert or remove devices on the dock station
+ * hot_remove_dock_devices - Remove dock station devices.
+ * @ds: Dock station.
+ */
+static void hot_remove_dock_devices(struct dock_station *ds)
+{
+ struct dock_dependent_device *dd;
+
+ /*
+  * Walk the list in reverse order so that devices that have been added
+  * last are removed first (in case there are some indirect dependencies
+  * between them).
+  */
+ list_for_each_entry_reverse(dd, &ds->dependent_devices, list)
+  dock_hotplug_event(dd, ACPI_NOTIFY_EJECT_REQUEST, false);
+
+ list_for_each_entry_reverse(dd, &ds->dependent_devices, list)
+  dock_remove_acpi_device(dd->handle);
+}
+
+/**
+ * hotplug_dock_devices - Insert devices on a dock station.
  * @ds: the dock station
- * @event: either bus check or eject request
+ * @event: either bus check or device check request
  *
  * Some devices on the dock station need to have drivers called
  * to perform hotplug operations after a dock event has occurred.
@@ -350,24 +370,17 @@ static void hotplug_dock_devices(struct dock_station *ds, u32 event)
 {
  struct dock_dependent_device *dd;
 
- /*
-  * First call driver specific hotplug functions
-  */
+ /* Call driver specific hotplug functions. */
  list_for_each_entry(dd, &ds->dependent_devices, list)
   dock_hotplug_event(dd, event, false);
 
  /*
-  * Now make sure that an acpi_device is created for each
-  * dependent device, or removed if this is an eject request.
-  * This will cause acpi_drivers to be stopped/started if they
-  * exist
+  * Now make sure that an acpi_device is created for each dependent
+  * device.  That will cause scan handlers to be attached to device
+  * objects or acpi_drivers to be stopped/started if they are present.
   */
- list_for_each_entry(dd, &ds->dependent_devices, list) {
-  if (event == ACPI_NOTIFY_EJECT_REQUEST)
-   dock_remove_acpi_device(dd->handle);
-  else
-   dock_create_acpi_device(dd->handle);
- }
+ list_for_each_entry(dd, &ds->dependent_devices, list)
+  dock_create_acpi_device(dd->handle);
 }
 
 static void dock_event(struct dock_station *ds, u32 event, int num)
@@ -588,7 +601,7 @@ static int handle_eject_request(struct dock_station *ds, u32 event)
   */
  dock_event(ds, event, UNDOCK_EVENT);
 
- hotplug_dock_devices(ds, ACPI_NOTIFY_EJECT_REQUEST);
+ hot_remove_dock_devices(ds);
  undock(ds);
  acpi_evaluate_lck(ds->handle, 0);
  acpi_evaluate_ej0(ds->handle);
-- 
1.7.1