From 253bfe4e3d7f024208f7c45c99db7f3e8de9a86c Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:41 -0400
Subject: [fs] nfs: Avoid infinite loop when RELEASE_LOCKOWNER getting expired error

Message-id: <1411050057-12417-79-git-send-email-steved@redhat.com>
Patchwork-id: 96235
O-Subject: [RHEL7.1 PATCH 78/94] NFS: Avoid infinite loop when RELEASE_LOCKOWNER getting expired error
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Kinglong Mee <kinglongmee@gmail.com>

Fix Commit 60ea681299 (NFS: Migration support for RELEASE_LOCKOWNER)
If getting expired error, client will enter a infinite loop as,

client                            server
   RELEASE_LOCKOWNER(old clid) ----->
                <--- expired error
   RENEW(old clid)             ----->
                <--- expired error
   SETCLIENTID                 ----->
                <--- a new clid
   SETCLIENTID_CONFIRM (new clid) -->
                <--- ok
   RELEASE_LOCKOWNER(old clid) ----->
                <--- expired error
   RENEW(new clid)             ----->
                <-- ok
   RELEASE_LOCKOWNER(old clid) ----->
                <--- expired error
   RENEW(new clid)             ----->
                <-- ok
                ... ...

Signed-off-by: Kinglong Mee <kinglongmee@gmail.com>
[Trond: replace call to nfs4_async_handle_error() with
 nfs4_schedule_lease_recovery()]
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 5b53dc88b064cb93274e7fb81f8df477287c80df
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 51d0fa7..59e8449 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -5942,8 +5942,10 @@ struct nfs_release_lockowner_data {
 static void nfs4_release_lockowner_prepare(struct rpc_task *task, void *calldata)
 {
  struct nfs_release_lockowner_data *data = calldata;
- nfs40_setup_sequence(data->server,
-    &data->args.seq_args, &data->res.seq_res, task);
+ struct nfs_server *server = data->server;
+ nfs40_setup_sequence(server, &data->args.seq_args,
+    &data->res.seq_res, task);
+ data->args.lock_owner.clientid = server->nfs_client->cl_clientid;
  data->timestamp = jiffies;
 }
 
@@ -5960,6 +5962,8 @@ static void nfs4_release_lockowner_done(struct rpc_task *task, void *calldata)
   break;
  case -NFS4ERR_STALE_CLIENTID:
  case -NFS4ERR_EXPIRED:
+  nfs4_schedule_lease_recovery(server->nfs_client);
+  break;
  case -NFS4ERR_LEASE_MOVED:
  case -NFS4ERR_DELAY:
   if (nfs4_async_handle_error(task, server, NULL) == -EAGAIN)
-- 
1.7.1