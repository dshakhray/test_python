From 7697f521cbbbccb3967d4bd202f71f4ebf09ab8e Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:22:12 -0400
Subject: [cpufreq] Remove temporary fix for race between CPU hotplug and sysfs-writes

Message-id: <1409235879-1283-39-git-send-email-prarit@redhat.com>
Patchwork-id: 89474
O-Subject: [RHEL7.1 PATCH BZ 1134639 038/185] cpufreq: Remove temporary fix for race between CPU hotplug and sysfs-writes
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 56d07db274b7b15ca38b60ea4a762d40de093000
Author: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
Date:   Sat Sep 7 01:23:55 2013 +0530

    cpufreq: Remove temporary fix for race between CPU hotplug and sysfs-writes

    Commit "cpufreq: serialize calls to __cpufreq_governor()" had been a temporary
    and partial solution to the race condition between writing to a cpufreq sysfs
    file and taking a CPU offline. Now that we have a proper and complete solution
    to that problem, remove the temporary fix.

    Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 8ec79af..fcfbccc 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1746,15 +1746,13 @@ static int __cpufreq_governor(struct cpufreq_policy *policy,
       policy->cpu, event);
 
  mutex_lock(&cpufreq_governor_lock);
- if (policy->governor_busy
-     || (policy->governor_enabled && event == CPUFREQ_GOV_START)
+ if ((policy->governor_enabled && event == CPUFREQ_GOV_START)
      || (!policy->governor_enabled
      && (event == CPUFREQ_GOV_LIMITS || event == CPUFREQ_GOV_STOP))) {
   mutex_unlock(&cpufreq_governor_lock);
   return -EBUSY;
  }
 
- policy->governor_busy = true;
  if (event == CPUFREQ_GOV_STOP)
   policy->governor_enabled = false;
  else if (event == CPUFREQ_GOV_START)
@@ -1783,9 +1781,6 @@ static int __cpufreq_governor(struct cpufreq_policy *policy,
    ((event == CPUFREQ_GOV_POLICY_EXIT) && !ret))
   module_put(policy->governor->owner);
 
- mutex_lock(&cpufreq_governor_lock);
- policy->governor_busy = false;
- mutex_unlock(&cpufreq_governor_lock);
  return ret;
 }
 
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index cf2b13a..756b0b3 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -106,7 +106,6 @@ struct cpufreq_policy {
  struct cpufreq_governor *governor; /* see below */
  void   *governor_data;
  bool   governor_enabled; /* governor start/stop flag */
- bool   governor_busy;
 
  struct work_struct update; /* if update_policy() needs to be
       * called, but you're in IRQ context */
-- 
1.7.1