From e745e4a408e01892a3838b357dfb9daa7889b648 Mon Sep 17 00:00:00 2001
From: Carlos Maiolino <cmaiolino@redhat.com>
Date: Mon, 11 Aug 2014 17:56:57 -0400
Subject: [fs] fuse: ignore entry-timeout LOOKUP_REVAL

Message-id: <1407779817-26809-3-git-send-email-cmaiolino@redhat.com>
Patchwork-id: 87644
O-Subject: [RHEL7 PATCH 2/2] fuse: ignore entry-timeout LOOKUP_REVAL
Bugzilla: 1124880
RH-Acked-by: Anand Avati <aavati@redhat.com>
RH-Acked-by: Brian Foster <bfoster@redhat.com>

BZ: 1124880
upstream: 154210ccb3a871e631bf39fdeb7a8731d98af87b
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7829648

The following test case demonstrates the bug:

sh# mount -t glusterfs localhost:meta-test /mnt/one
sh# mount -t glusterfs localhost:meta-test /mnt/two

sh# echo stuff > /mnt/one/file; rm -f /mnt/two/file; echo stuff > /mnt/one/file
bash: /mnt/one/file: Stale file handle

sh# echo stuff > /mnt/one/file; rm -f /mnt/two/file; sleep 1; echo stuff >
/mnt/one/file

On the second open() on /mnt/one, FUSE would have used the old nodeid
(file handle) trying to re-open it. Gluster is returning -ESTALE. The ESTALE
propagates back to namei.c:filename_lookup() where lookup is re-attempted with
LOOKUP_REVAL. The right behavior now, would be for FUSE to ignore the
entry-timeout and and do the up-call revalidation. Instead FUSE is ignoring
LOOKUP_REVAL, succeeding the revalidation (because entry-timeout has not
passed),
and open() is again retried on the old file handle and finally the ESTALE is
going back to the application.

Fix: if revalidation is happening with LOOKUP_REVAL, then ignore entry-timeout
and always do the up-call.

Signed-off-by: Anand Avati <avati@redhat.com>
Reviewed-by: Niels de Vos <ndevos@redhat.com>
Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
Signed-off-by: Carlos Maiolino <cmaiolino@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/fuse/dir.c b/fs/fuse/dir.c
index 60037f0..4936194 100644
--- a/fs/fuse/dir.c
+++ b/fs/fuse/dir.c
@@ -187,7 +187,8 @@ static int fuse_dentry_revalidate(struct dentry *entry, unsigned int flags)
  inode = ACCESS_ONCE(entry->d_inode);
  if (inode && is_bad_inode(inode))
   goto invalid;
- else if (time_before64(fuse_dentry_time(entry), get_jiffies_64())) {
+ else if (time_before64(fuse_dentry_time(entry), get_jiffies_64()) ||
+   (flags & LOOKUP_REVAL)) {
   int err;
   struct fuse_entry_out outarg;
   struct fuse_req *req;
-- 
1.7.1