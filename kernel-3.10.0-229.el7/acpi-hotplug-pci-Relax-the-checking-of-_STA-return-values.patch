From d32f9289caf11d5aeaf3a615302913ff4129fcb6 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 12:29:18 -0400
Subject: [acpi] hotplug/pci: Relax the checking of _STA return values

Message-id: <1411129776-21656-44-git-send-email-prarit@redhat.com>
Patchwork-id: 96367
O-Subject: [RHEL7.1 PATCH BZ 1141846 43/61] ACPI / hotplug / PCI: Relax the checking of _STA return values
Bugzilla: 1141846
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit 7282059489868e0ed1b0d79765730c6b233a8399
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Feb 11 12:42:37 2014 +0200

    ACPI / hotplug / PCI: Relax the checking of _STA return values

    The ACPI specification (ACPI 5.0A, Section 6.3.7) says:

     _STA may return bit 0 clear (not present) with bit 3 set (device is
     functional). This case is used to indicate a valid device for which
     no device driver should be loaded (for example, a bridge device.)
     Children of this device may be present and valid. OSPM should
     continue enumeration below a device whose _STA returns this bit
     combination.

    Evidently, some BIOSes follow that and return 0x0A from _STA, which
    causes problems to happen when they trigger bus check or device check
    notifications for those devices too.  Namely, ACPIPHP thinks that they
    are gone and may drop them, for example, if such a notification is
    triggered during a resume from system suspend.

    To fix that, modify ACPICA to regard devies as present and
    functioning if _STA returns both the ACPI_STA_DEVICE_ENABLED
    and ACPI_STA_DEVICE_FUNCTIONING bits set for them.

    Reported-and-tested-by: Peter Wu <lekensteyn@gmail.com>
    Cc: 3.12+ <stable@vger.kernel.org> # 3.12+
    [rjw: Subject and changelog, minor code modifications]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Myron Stowe <mstowe@redhat.com>
Cc: Andy Gospodarek <agospoda@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index c35447e..a64ebf9 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -651,6 +651,17 @@ static unsigned int get_slot_status(struct acpiphp_slot *slot)
  return (unsigned int)sta;
 }
 
+static inline bool device_status_valid(unsigned int sta)
+{
+ /*
+  * ACPI spec says that _STA may return bit 0 clear with bit 3 set
+  * if the device is valid but does not require a device driver to be
+  * loaded (Section 6.3.7 of ACPI 5.0A).
+  */
+ unsigned int mask = ACPI_STA_DEVICE_ENABLED | ACPI_STA_DEVICE_FUNCTIONING;
+ return (sta & mask) == mask;
+}
+
 /**
  * trim_stale_devices - remove PCI devices that are not responding.
  * @dev: PCI device to start walking the hierarchy from.
@@ -666,7 +677,7 @@ static void trim_stale_devices(struct pci_dev *dev)
   unsigned long long sta;
 
   status = acpi_evaluate_integer(adev->handle, "_STA", NULL, &sta);
-  alive = (ACPI_SUCCESS(status) && sta == ACPI_STA_ALL)
+  alive = (ACPI_SUCCESS(status) && device_status_valid(sta))
    || acpiphp_no_hotplug(adev);
  }
  if (!alive) {
@@ -712,7 +723,7 @@ static void acpiphp_check_bridge(struct acpiphp_bridge *bridge)
 
   if (slot_no_hotplug(slot)) {
    ; /* do nothing */
-  } else if (get_slot_status(slot) == ACPI_STA_ALL) {
+  } else if (device_status_valid(get_slot_status(slot))) {
    /* remove stale devices if any */
    list_for_each_entry_safe_reverse(dev, tmp,
         &bus->devices, bus_list)
-- 
1.7.1