From d1f4ebef634911423f9d4b6a040a7679ba52806b Mon Sep 17 00:00:00 2001
From: Amit Shah <amit.shah@redhat.com>
Date: Mon, 18 Aug 2014 10:00:26 -0400
Subject: [hwrng] add per-device entropy derating

Message-id: <df9b587d5720e1cdb99cc656176559711ebae7a3.1408347166.git.amit.shah@redhat.com>
Patchwork-id: 87840
O-Subject: [RHEL7.1 kernel PATCH 3/6] hwrng: add per-device entropy derating
Bugzilla: 1129195
RH-Acked-by: Amos Kong <akong@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Herbert Xu <herbert.xu@redhat.com>

From: Torsten Duwe <duwe@lst.de>

This patch introduces a derating factor to struct hwrng for
the random bits going into the kernel input pool, and a common
default derating for drivers which do not specify one.

Signed-off-by: Torsten Duwe <duwe@suse.de>
Signed-off-by: Theodore Ts'o <tytso@mit.edu>
Acked-by: H. Peter Anvin <hpa@zytor.com>
(cherry picked from commit 0f734e6e768b4b66737b3d3e13f1769a12ecff86)
Signed-off-by: Amit Shah <amit.shah@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/char/hw_random/core.c b/drivers/char/hw_random/core.c
index c2e9db5..e8b8d80 100644
--- a/drivers/char/hw_random/core.c
+++ b/drivers/char/hw_random/core.c
@@ -57,11 +57,15 @@ static LIST_HEAD(rng_list);
 static DEFINE_MUTEX(rng_mutex);
 static int data_avail;
 static u8 *rng_buffer, *rng_fillbuf;
-static unsigned short current_quality = 700; /* an arbitrary 70% */
+static unsigned short current_quality;
+static unsigned short default_quality; /* = 0; default to "off" */
 
 module_param(current_quality, ushort, 0644);
 MODULE_PARM_DESC(current_quality,
    "current hwrng entropy estimation per mill");
+module_param(default_quality, ushort, 0644);
+MODULE_PARM_DESC(default_quality,
+   "default entropy content of hwrng per mill");
 
 static void start_khwrngd(void);
 
@@ -94,6 +98,11 @@ static inline int hwrng_init(struct hwrng *rng)
  }
  add_early_randomness(rng);
 
+ current_quality = rng->quality ? : default_quality;
+ current_quality &= 1023;
+
+ if (current_quality == 0 && hwrng_fill)
+  kthread_stop(hwrng_fill);
  if (current_quality > 0 && !hwrng_fill)
   start_khwrngd();
 
diff --git a/include/linux/hw_random.h b/include/linux/hw_random.h
index 3f075ff..914bb08 100644
--- a/include/linux/hw_random.h
+++ b/include/linux/hw_random.h
@@ -29,6 +29,8 @@
  * @read:  New API. drivers can fill up to max bytes of data
  *   into the buffer. The buffer is aligned for any type.
  * @priv:  Private data, for use by the RNG driver.
+ * @quality:  Estimation of true entropy in RNG's bitstream
+ *   (per mill).
  */
 struct hwrng {
  const char *name;
@@ -38,6 +40,7 @@ struct hwrng {
  int (*data_read)(struct hwrng *rng, u32 *data);
  int (*read)(struct hwrng *rng, void *data, size_t max, bool wait);
  unsigned long priv;
+ unsigned short quality;
 
  /* internal. */
  struct list_head list;
-- 
1.7.1