From 4c610579a520f077946581287d26156e577bde98 Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:26:14 -0400
Subject: [md] raid1, raid10: always abort recover on write error

Message-id: <1409563584-9000-73-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 89993
O-Subject: [RHEL7.1 PATCH 72/82] md/raid1, raid10: always abort recover on write error.
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: NeilBrown <neilb@suse.de>

Currently we don't abort recovery on a write error if the write error
to the recovering device was triggerd by normal IO (as opposed to
recovery IO).

This means that for one bitmap region, the recovery might write to the
recovering device for a few sectors, then not bother for subsequent
sectors (as it never writes to failed devices).  In this case
the bitmap bit will be cleared, but it really shouldn't.

The result is that if the recovering device fails and is then re-added
(after fixing whatever hardware problem triggerred the failure),
the second recovery won't redo the region it was in the middle of,
so some of the device will not be recovered properly.

If we abort the recovery, the region being processes will be cancelled
(bit not cleared) and the whole region will be retried.

As the bug can result in data corruption the patch is suitable for
-stable.  For kernels prior to 3.11 there is a conflict in raid10.c
which will require care.

Original-from: jiao hui <jiaohui@bwstor.com.cn>
Reported-and-tested-by: jiao hui <jiaohui@bwstor.com.cn>
Signed-off-by: NeilBrown <neilb@suse.de>
Cc: stable@vger.kernel.org
(cherry picked from commit 2446dba03f9dabe0b477a126cbeb377854785b47)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/raid1.c b/drivers/md/raid1.c
index d0d13af..3966bd8 100644
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@ -1405,12 +1405,12 @@ static void error(struct mddev *mddev, struct md_rdev *rdev)
   mddev->degraded++;
   set_bit(Faulty, &rdev->flags);
   spin_unlock_irqrestore(&conf->device_lock, flags);
-  /*
-   * if recovery is running, make sure it aborts.
-   */
-  set_bit(MD_RECOVERY_INTR, &mddev->recovery);
  } else
   set_bit(Faulty, &rdev->flags);
+ /*
+  * if recovery is running, make sure it aborts.
+  */
+ set_bit(MD_RECOVERY_INTR, &mddev->recovery);
  set_bit(MD_CHANGE_DEVS, &mddev->flags);
  printk(KERN_ALERT
         "md/raid1:%s: Disk failure on %s, disabling device.\n"
diff --git a/drivers/md/raid10.c b/drivers/md/raid10.c
index 8d39d63..b7f6134 100644
--- a/drivers/md/raid10.c
+++ b/drivers/md/raid10.c
@@ -1698,13 +1698,12 @@ static void error(struct mddev *mddev, struct md_rdev *rdev)
   spin_unlock_irqrestore(&conf->device_lock, flags);
   return;
  }
- if (test_and_clear_bit(In_sync, &rdev->flags)) {
+ if (test_and_clear_bit(In_sync, &rdev->flags))
   mddev->degraded++;
-   /*
-   * if recovery is running, make sure it aborts.
-   */
-  set_bit(MD_RECOVERY_INTR, &mddev->recovery);
- }
+ /*
+  * If recovery is running, make sure it aborts.
+  */
+ set_bit(MD_RECOVERY_INTR, &mddev->recovery);
  set_bit(Blocked, &rdev->flags);
  set_bit(Faulty, &rdev->flags);
  set_bit(MD_CHANGE_DEVS, &mddev->flags);
-- 
1.7.1