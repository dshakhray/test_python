From 30ca5767b71247f2005690ed70b9559d2693c7fa Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:49:49 -0400
Subject: [tools] lib/traceevent: Remove malloc_or_die from plugin_function.c

Message-id: <1408953210-26343-102-git-send-email-jolsa@redhat.com>
Patchwork-id: 88829
O-Subject: [PATCH RHEL7.1 BZ1133083 101/322] tools lib traceevent: Remove malloc_or_die from plugin_function.c
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit d8e56c98b7ef96a31a64c69df24ab5d80f90e055
Author: Jiri Olsa <jolsa@redhat.com>
Date: Tue Dec 3 14:09:40 2013 +0100

description
===========
Removing malloc_or_die calls from plugin_function.c, replacing them and
factoring the code with standard realloc and error path.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/lib/traceevent/plugin_function.c b/tools/lib/traceevent/plugin_function.c
index 87acf9c..aad92ad 100644
--- a/tools/lib/traceevent/plugin_function.c
+++ b/tools/lib/traceevent/plugin_function.c
@@ -43,11 +43,17 @@ static void add_child(struct func_stack *stack, const char *child, int pos)
  if (pos < stack->size)
   free(stack->stack[pos]);
  else {
-  if (!stack->stack)
-   stack->stack = malloc_or_die(sizeof(char *) * STK_BLK);
-  else
-   stack->stack = realloc(stack->stack, sizeof(char *) *
-            (stack->size + STK_BLK));
+  char **ptr;
+
+  ptr = realloc(stack->stack, sizeof(char *) *
+         (stack->size + STK_BLK));
+  if (!ptr) {
+   warning("could not allocate plugin memory\n");
+   return;
+  }
+
+  stack->stack = ptr;
+
   for (i = stack->size; i < stack->size + STK_BLK; i++)
    stack->stack[i] = NULL;
   stack->size += STK_BLK;
@@ -64,10 +70,15 @@ static int add_and_get_index(const char *parent, const char *child, int cpu)
   return 0;
 
  if (cpu > cpus) {
-  if (fstack)
-   fstack = realloc(fstack, sizeof(*fstack) * (cpu + 1));
-  else
-   fstack = malloc_or_die(sizeof(*fstack) * (cpu + 1));
+  struct func_stack *ptr;
+
+  ptr = realloc(fstack, sizeof(*fstack) * (cpu + 1));
+  if (!ptr) {
+   warning("could not allocate plugin memory\n");
+   return 0;
+  }
+
+  fstack = ptr;
 
   /* Account for holes in the cpu count */
   for (i = cpus + 1; i <= cpu; i++)
-- 
1.7.1