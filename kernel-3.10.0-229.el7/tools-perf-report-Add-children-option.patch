From 7ea77e0ec4e071140fdf23be2b8e0fbf193e3afc Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:13 -0400
Subject: [tools] perf/report: Add --children option

Message-id: <1410181752-25631-249-git-send-email-jolsa@redhat.com>
Patchwork-id: 91834
O-Subject: [PATCH RHEL7.1 BZ1134356 248/307] perf report: Add --children option
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 793aaaabb79803a0154fc6a98c472a29bb6d5cc9
Author: Namhyung Kim <namhyung@kernel.org>
Date: Wed Oct 30 17:05:55 2013 +0900

description
===========
The --children option is for showing accumulated overhead (period)
value as well as self overhead.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/Documentation/perf-report.txt b/tools/perf/Documentation/perf-report.txt
index a1b5185..cefdf43 100644
--- a/tools/perf/Documentation/perf-report.txt
+++ b/tools/perf/Documentation/perf-report.txt
@@ -111,7 +111,7 @@ OPTIONS
 --fields=::
  Specify output field - multiple keys can be specified in CSV format.
  Following fields are available:
- overhead, overhead_sys, overhead_us, sample and period.
+ overhead, overhead_sys, overhead_us, overhead_children, sample and period.
  Also it can contain any sort key(s).
 
  By default, every sort keys not specified in -F will be appended
@@ -163,6 +163,11 @@ OPTIONS
 
  Default: fractal,0.5,callee,function.
 
+--children::
+ Accumulate callchain of children to parent entry so that then can
+ show up in the output.  The output will have a new "Children" column
+ and will be sorted on the data.  It requires callchains are recorded.
+
 --max-stack::
  Set the stack depth limit when parsing the callchain, anything
  beyond the specified depth will be ignored. This is a trade-off
diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index e8fa9fe..f27a8aa 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -185,6 +185,14 @@ static int report__setup_sample_type(struct report *rep)
    }
  }
 
+ if (symbol_conf.cumulate_callchain) {
+  /* Silently ignore if callchain is missing */
+  if (!(sample_type & PERF_SAMPLE_CALLCHAIN)) {
+   symbol_conf.cumulate_callchain = false;
+   perf_hpp__cancel_cumulate();
+  }
+ }
+
  if (sort__mode == SORT_MODE__BRANCH) {
   if (!is_pipe &&
       !(sample_type & PERF_SAMPLE_BRANCH_STACK)) {
@@ -568,6 +576,8 @@ int cmd_report(int argc, const char **argv, const char *prefix __maybe_unused)
  OPT_CALLBACK_DEFAULT('g', "call-graph", &report, "output_type,min_percent[,print_limit],call_order",
        "Display callchains using output_type (graph, flat, fractal, or none) , min percent threshold, optional print limit, callchain order, key (function or address). "
        "Default: fractal,0.5,callee,function", &report_parse_callchain_opt, callchain_default_opt),
+ OPT_BOOLEAN(0, "children", &symbol_conf.cumulate_callchain,
+      "Accumulate callchains of children and show total overhead as well"),
  OPT_INTEGER(0, "max-stack", &report.max_stack,
       "Set the maximum stack depth when parsing the callchain, "
       "anything beyond the specified depth will be ignored. "
@@ -660,8 +670,10 @@ repeat:
  has_br_stack = perf_header__has_feat(&session->header,
           HEADER_BRANCH_STACK);
 
- if (branch_mode == -1 && has_br_stack)
+ if (branch_mode == -1 && has_br_stack) {
   sort__mode = SORT_MODE__BRANCH;
+  symbol_conf.cumulate_callchain = false;
+ }
 
  if (report.mem_mode) {
   if (sort__mode == SORT_MODE__BRANCH) {
@@ -669,6 +681,7 @@ repeat:
    goto error;
   }
   sort__mode = SORT_MODE__MEMORY;
+  symbol_conf.cumulate_callchain = false;
  }
 
  if (setup_sorting() < 0) {
-- 
1.7.1