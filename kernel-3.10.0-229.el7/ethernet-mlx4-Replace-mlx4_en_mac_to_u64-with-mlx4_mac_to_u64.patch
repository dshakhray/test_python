From b61602f883219825959c384167f165a8bc0a1607 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 11:59:54 -0400
Subject: [ethernet] mlx4: Replace mlx4_en_mac_to_u64() with mlx4_mac_to_u64()

Message-id: <31c08f85fe29b777d6817bbb61e6a929e61be0ca.1410425016.git.avadai@redhat.com>
Patchwork-id: 93632
O-Subject: [Patch RHEL7.1 V1 058/197] net/mlx4: Replace mlx4_en_mac_to_u64() with mlx4_mac_to_u64()
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Eugenia Emantayev <eugenia@mellanox.com>

Currently, the EN driver uses a private static function
mlx4_en_mac_to_u64(). Move it to a common include file (driver.h)
for mlx4_en and mlx4_ib for further use.

Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
Signed-off-by: Amir Vadai <amirv@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9813337a4b16ea5b1701b1d00f7e410f5decdfa5)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index 2c0823b..3db5946 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@ -603,7 +603,7 @@ static int mlx4_en_get_qp(struct mlx4_en_priv *priv)
  int err = 0;
  u64 reg_id;
  int *qpn = &priv->base_qpn;
- u64 mac = mlx4_en_mac_to_u64(priv->dev->dev_addr);
+ u64 mac = mlx4_mac_to_u64(priv->dev->dev_addr);
 
  en_dbg(DRV, priv, "Registering MAC: %pM for adding\n",
         priv->dev->dev_addr);
@@ -672,7 +672,7 @@ static void mlx4_en_put_qp(struct mlx4_en_priv *priv)
  u64 mac;
 
  if (dev->caps.steering_mode == MLX4_STEERING_MODE_A0) {
-  mac = mlx4_en_mac_to_u64(priv->dev->dev_addr);
+  mac = mlx4_mac_to_u64(priv->dev->dev_addr);
   en_dbg(DRV, priv, "Registering MAC: %pM for deleting\n",
          priv->dev->dev_addr);
   mlx4_unregister_mac(dev, priv->port, mac);
@@ -685,7 +685,7 @@ static void mlx4_en_put_qp(struct mlx4_en_priv *priv)
   for (i = 0; i < MLX4_EN_MAC_HASH_SIZE; ++i) {
    bucket = &priv->mac_hash[i];
    hlist_for_each_entry_safe(entry, tmp, bucket, hlist) {
-    mac = mlx4_en_mac_to_u64(entry->mac);
+    mac = mlx4_mac_to_u64(entry->mac);
     en_dbg(DRV, priv, "Registering MAC: %pM for deleting\n",
            entry->mac);
     mlx4_en_uc_steer_release(priv, entry->mac,
@@ -715,14 +715,14 @@ static int mlx4_en_replace_mac(struct mlx4_en_priv *priv, int qpn,
  struct mlx4_en_dev *mdev = priv->mdev;
  struct mlx4_dev *dev = mdev->dev;
  int err = 0;
- u64 new_mac_u64 = mlx4_en_mac_to_u64(new_mac);
+ u64 new_mac_u64 = mlx4_mac_to_u64(new_mac);
 
  if (dev->caps.steering_mode != MLX4_STEERING_MODE_A0) {
   struct hlist_head *bucket;
   unsigned int mac_hash;
   struct mlx4_mac_entry *entry;
   struct hlist_node *tmp;
-  u64 prev_mac_u64 = mlx4_en_mac_to_u64(prev_mac);
+  u64 prev_mac_u64 = mlx4_mac_to_u64(prev_mac);
 
   bucket = &priv->mac_hash[prev_mac[MLX4_EN_MAC_HASH_IDX]];
   hlist_for_each_entry_safe(entry, tmp, bucket, hlist) {
@@ -751,18 +751,6 @@ static int mlx4_en_replace_mac(struct mlx4_en_priv *priv, int qpn,
  return __mlx4_replace_mac(dev, priv->port, qpn, new_mac_u64);
 }
 
-u64 mlx4_en_mac_to_u64(u8 *addr)
-{
- u64 mac = 0;
- int i;
-
- for (i = 0; i < ETH_ALEN; i++) {
-  mac <<= 8;
-  mac |= addr[i];
- }
- return mac;
-}
-
 static int mlx4_en_do_set_mac(struct mlx4_en_priv *priv)
 {
  int err = 0;
@@ -1081,7 +1069,7 @@ static void mlx4_en_do_multicast(struct mlx4_en_priv *priv,
   mlx4_en_cache_mclist(dev);
   netif_addr_unlock_bh(dev);
   list_for_each_entry(mclist, &priv->mc_list, list) {
-   mcast_addr = mlx4_en_mac_to_u64(mclist->addr);
+   mcast_addr = mlx4_mac_to_u64(mclist->addr);
    mlx4_SET_MCAST_FLTR(mdev->dev, priv->port,
          mcast_addr, 0, MLX4_MCAST_CONFIG);
   }
@@ -1173,7 +1161,7 @@ static void mlx4_en_do_uc_filter(struct mlx4_en_priv *priv,
     found = true;
 
    if (!found) {
-    mac = mlx4_en_mac_to_u64(entry->mac);
+    mac = mlx4_mac_to_u64(entry->mac);
     mlx4_en_uc_steer_release(priv, entry->mac,
         priv->base_qpn,
         entry->reg_id);
@@ -1216,7 +1204,7 @@ static void mlx4_en_do_uc_filter(struct mlx4_en_priv *priv,
     priv->flags |= MLX4_EN_FLAG_FORCE_PROMISC;
     break;
    }
-   mac = mlx4_en_mac_to_u64(ha->addr);
+   mac = mlx4_mac_to_u64(ha->addr);
    memcpy(entry->mac, ha->addr, ETH_ALEN);
    err = mlx4_register_mac(mdev->dev, priv->port, mac);
    if (err < 0) {
@@ -2206,7 +2194,7 @@ static int mlx4_en_set_vf_mac(struct net_device *dev, int queue, u8 *mac)
 {
  struct mlx4_en_priv *en_priv = netdev_priv(dev);
  struct mlx4_en_dev *mdev = en_priv->mdev;
- u64 mac_u64 = mlx4_en_mac_to_u64(mac);
+ u64 mac_u64 = mlx4_mac_to_u64(mac);
 
  if (!is_valid_ether_addr(mac))
   return -EINVAL;
@@ -2407,7 +2395,7 @@ int mlx4_en_init_netdev(struct mlx4_en_dev *mdev, int port,
   if (mlx4_is_slave(priv->mdev->dev)) {
    eth_hw_addr_random(dev);
    en_warn(priv, "Assigned random MAC address %pM\n", dev->dev_addr);
-   mac_u64 = mlx4_en_mac_to_u64(dev->dev_addr);
+   mac_u64 = mlx4_mac_to_u64(dev->dev_addr);
    mdev->dev->caps.def_mac[priv->port] = mac_u64;
   } else {
    en_err(priv, "Port: %d, invalid mac burned: %pM, quiting\n",
diff --git a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
index 14ca6bc..491c1fe 100644
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
@@ -796,7 +796,6 @@ void mlx4_en_cleanup_filters(struct mlx4_en_priv *priv);
 
 #define MLX4_EN_NUM_SELF_TEST 5
 void mlx4_en_ex_selftest(struct net_device *dev, u32 *flags, u64 *buf);
-u64 mlx4_en_mac_to_u64(u8 *addr);
 void mlx4_en_ptp_overflow_check(struct mlx4_en_dev *mdev);
 
 /*
diff --git a/include/linux/mlx4/driver.h b/include/linux/mlx4/driver.h
index c257e1b..022055c 100644
--- a/include/linux/mlx4/driver.h
+++ b/include/linux/mlx4/driver.h
@@ -64,4 +64,16 @@ void mlx4_unregister_interface(struct mlx4_interface *intf);
 
 void *mlx4_get_protocol_dev(struct mlx4_dev *dev, enum mlx4_protocol proto, int port);
 
+static inline u64 mlx4_mac_to_u64(u8 *addr)
+{
+ u64 mac = 0;
+ int i;
+
+ for (i = 0; i < ETH_ALEN; i++) {
+  mac <<= 8;
+  mac |= addr[i];
+ }
+ return mac;
+}
+
 #endif /* MLX4_DRIVER_H */
-- 
1.7.1