From 1a25d0a8c06ae6b8c74711a55acfa9b49bf9ca23 Mon Sep 17 00:00:00 2001
From: Paul Moore <pmoore@redhat.com>
Date: Fri, 8 Aug 2014 20:02:15 -0400
Subject: [net] netlabel: fix a problem when setting bits below the previously lowest bit

Message-id: <20140808200215.6323.58203.stgit@localhost>
Patchwork-id: 87559
O-Subject: [RHEL7 PATCH 1/4] netlabel: fix a problem when setting bits below the previously lowest bit
Bugzilla: 1119662
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1119662
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7799046
Upstream: Present in the SELinux and linux-security trees
Testing: Tested, see BZ

 commit: 41c3bd2039e0d7b3dc32313141773f20716ec524
 From: Paul Moore <pmoore@redhat.com>
 Date: 2014-08-01 11:17:03 -0400

 netlabel: fix a problem when setting bits below the previously lowest bit

 The NetLabel category (catmap) functions have a problem in that they
 assume categories will be set in an increasing manner, e.g. the next
 category set will always be larger than the last.  Unfortunately, this
 is not a valid assumption and could result in problems when attempting
 to set categories less than the startbit in the lowest catmap node.
 In some cases kernel panics and other nasties can result.

 This patch corrects the problem by checking for this and allocating a
 new catmap node instance and placing it at the front of the list.

 Cc: stable@vger.kernel.org
 Reported-by: Christian Evans <frodox@zoho.com>
 Signed-off-by: Paul Moore <pmoore@redhat.com>
 Tested-by: Casey Schaufler <casey@schaufler-ca.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/netlabel.h b/include/net/netlabel.h
index 2c95d55..28400bd 100644
--- a/include/net/netlabel.h
+++ b/include/net/netlabel.h
@@ -395,10 +395,10 @@ int netlbl_secattr_catmap_walk(struct netlbl_lsm_secattr_catmap *catmap,
           u32 offset);
 int netlbl_secattr_catmap_walk_rng(struct netlbl_lsm_secattr_catmap *catmap,
        u32 offset);
-int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap *catmap,
+int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap **catmap,
      u32 bit,
      gfp_t flags);
-int netlbl_secattr_catmap_setrng(struct netlbl_lsm_secattr_catmap *catmap,
+int netlbl_secattr_catmap_setrng(struct netlbl_lsm_secattr_catmap **catmap,
      u32 start,
      u32 end,
      gfp_t flags);
@@ -506,14 +506,14 @@ static inline int netlbl_secattr_catmap_walk_rng(
  return -ENOENT;
 }
 static inline int netlbl_secattr_catmap_setbit(
-                               struct netlbl_lsm_secattr_catmap *catmap,
+          struct netlbl_lsm_secattr_catmap **catmap,
           u32 bit,
           gfp_t flags)
 {
  return 0;
 }
 static inline int netlbl_secattr_catmap_setrng(
-                               struct netlbl_lsm_secattr_catmap *catmap,
+          struct netlbl_lsm_secattr_catmap **catmap,
           u32 start,
           u32 end,
           gfp_t flags)
diff --git a/net/ipv4/cipso_ipv4.c b/net/ipv4/cipso_ipv4.c
index 667c1d4..78856ca 100644
--- a/net/ipv4/cipso_ipv4.c
+++ b/net/ipv4/cipso_ipv4.c
@@ -974,7 +974,7 @@ static int cipso_v4_map_cat_rbm_ntoh(const struct cipso_v4_doi *doi_def,
     return -EPERM;
    break;
   }
-  ret_val = netlbl_secattr_catmap_setbit(secattr->attr.mls.cat,
+  ret_val = netlbl_secattr_catmap_setbit(&secattr->attr.mls.cat,
              host_spot,
              GFP_ATOMIC);
   if (ret_val != 0)
@@ -1076,7 +1076,7 @@ static int cipso_v4_map_cat_enum_ntoh(const struct cipso_v4_doi *doi_def,
  u32 iter;
 
  for (iter = 0; iter < net_cat_len; iter += 2) {
-  ret_val = netlbl_secattr_catmap_setbit(secattr->attr.mls.cat,
+  ret_val = netlbl_secattr_catmap_setbit(&secattr->attr.mls.cat,
     get_unaligned_be16(&net_cat[iter]),
     GFP_ATOMIC);
   if (ret_val != 0)
@@ -1218,7 +1218,7 @@ static int cipso_v4_map_cat_rng_ntoh(const struct cipso_v4_doi *doi_def,
   else
    cat_low = 0;
 
-  ret_val = netlbl_secattr_catmap_setrng(secattr->attr.mls.cat,
+  ret_val = netlbl_secattr_catmap_setrng(&secattr->attr.mls.cat,
              cat_low,
              cat_high,
              GFP_ATOMIC);
diff --git a/net/netlabel/netlabel_kapi.c b/net/netlabel/netlabel_kapi.c
index dce1beb..82c7fca 100644
--- a/net/netlabel/netlabel_kapi.c
+++ b/net/netlabel/netlabel_kapi.c
@@ -523,7 +523,7 @@ int netlbl_secattr_catmap_walk_rng(struct netlbl_lsm_secattr_catmap *catmap,
 
 /**
  * netlbl_secattr_catmap_setbit - Set a bit in a LSM secattr catmap
- * @catmap: the category bitmap
+ * @catmap: pointer to the category bitmap
  * @bit: the bit to set
  * @flags: memory allocation flags
  *
@@ -532,18 +532,25 @@ int netlbl_secattr_catmap_walk_rng(struct netlbl_lsm_secattr_catmap *catmap,
  * negative values on failure.
  *
  */
-int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap *catmap,
+int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap **catmap,
      u32 bit,
      gfp_t flags)
 {
- struct netlbl_lsm_secattr_catmap *iter = catmap;
+ struct netlbl_lsm_secattr_catmap *iter = *catmap;
  u32 node_bit;
  u32 node_idx;
 
  while (iter->next != NULL &&
         bit >= (iter->startbit + NETLBL_CATMAP_SIZE))
   iter = iter->next;
- if (bit >= (iter->startbit + NETLBL_CATMAP_SIZE)) {
+ if (bit < iter->startbit) {
+  iter = netlbl_secattr_catmap_alloc(flags);
+  if (iter == NULL)
+   return -ENOMEM;
+  iter->next = *catmap;
+  iter->startbit = bit & ~(NETLBL_CATMAP_SIZE - 1);
+  *catmap = iter;
+ } else if (bit >= (iter->startbit + NETLBL_CATMAP_SIZE)) {
   iter->next = netlbl_secattr_catmap_alloc(flags);
   if (iter->next == NULL)
    return -ENOMEM;
@@ -561,7 +568,7 @@ int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap *catmap,
 
 /**
  * netlbl_secattr_catmap_setrng - Set a range of bits in a LSM secattr catmap
- * @catmap: the category bitmap
+ * @catmap: pointer to the category bitmap
  * @start: the starting bit
  * @end: the last bit in the string
  * @flags: memory allocation flags
@@ -571,15 +578,16 @@ int netlbl_secattr_catmap_setbit(struct netlbl_lsm_secattr_catmap *catmap,
  * on success, negative values on failure.
  *
  */
-int netlbl_secattr_catmap_setrng(struct netlbl_lsm_secattr_catmap *catmap,
+int netlbl_secattr_catmap_setrng(struct netlbl_lsm_secattr_catmap **catmap,
      u32 start,
      u32 end,
      gfp_t flags)
 {
  int ret_val = 0;
- struct netlbl_lsm_secattr_catmap *iter = catmap;
+ struct netlbl_lsm_secattr_catmap *iter = *catmap;
  u32 iter_max_spot;
  u32 spot;
+ u32 orig_spot = iter->startbit;
 
  /* XXX - This could probably be made a bit faster by combining writes
   * to the catmap instead of setting a single bit each time, but for
@@ -597,7 +605,9 @@ int netlbl_secattr_catmap_setrng(struct netlbl_lsm_secattr_catmap *catmap,
    iter = iter->next;
    iter_max_spot = iter->startbit + NETLBL_CATMAP_SIZE;
   }
-  ret_val = netlbl_secattr_catmap_setbit(iter, spot, flags);
+  ret_val = netlbl_secattr_catmap_setbit(&iter, spot, flags);
+  if (iter->startbit < orig_spot)
+   *catmap = iter;
  }
 
  return ret_val;
diff --git a/security/smack/smack_access.c b/security/smack/smack_access.c
index 2e397a8..442d40f 100644
--- a/security/smack/smack_access.c
+++ b/security/smack/smack_access.c
@@ -408,7 +408,7 @@ int smk_netlbl_mls(int level, char *catset, struct netlbl_lsm_secattr *sap,
   for (m = 0x80; m != 0; m >>= 1, cat++) {
    if ((m & *cp) == 0)
     continue;
-   rc = netlbl_secattr_catmap_setbit(sap->attr.mls.cat,
+   rc = netlbl_secattr_catmap_setbit(&sap->attr.mls.cat,
          cat, GFP_ATOMIC);
    if (rc < 0) {
     netlbl_secattr_catmap_free(sap->attr.mls.cat);
-- 
1.7.1