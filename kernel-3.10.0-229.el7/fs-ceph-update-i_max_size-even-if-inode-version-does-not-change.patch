From 32e06f0b9175dcefe7c230d19b1fb12abfbd96d4 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:24:45 -0400
Subject: [fs] ceph: update i_max_size even if inode version does not change
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-179-git-send-email-sweil@redhat.com>
Patchwork-id: 89589
O-Subject: [PATCH 178/303] ceph: update i_max_size even if inode version does not change
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Yan, Zheng" <zheng.z.yan@intel.com>

handle following sequence of events:
 - client releases a inode with i_max_size > 0. The release message
   is queued. (is not sent to the auth MDS)
 - a 'lookup' request reply from non-auth MDS returns the same inode.
 - client opens the inode in write mode. The version of inode trace
   in 'open' request reply is equal to the cached inode's version.
 - client requests new max size. The MDS ignores the request because
   it does not affect client's write range

Signed-off-by: Yan, Zheng <zheng.z.yan@intel.com>
Reviewed-by: Sage Weil <sage@inktank.com>
(cherry picked from commit 8c93cd610c6c5a4c0dddfc6fe906814331b3af87)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/inode.c b/fs/ceph/inode.c
index 0c7b4bb..b10760e 100644
--- a/fs/ceph/inode.c
+++ b/fs/ceph/inode.c
@@ -647,14 +647,6 @@ static int fill_inode(struct inode *inode,
        le32_to_cpu(info->time_warp_seq),
        &ctime, &mtime, &atime);
 
- /* only update max_size on auth cap */
- if ((info->cap.flags & CEPH_CAP_FLAG_AUTH) &&
-     ci->i_max_size != le64_to_cpu(info->max_size)) {
-  dout("max_size %lld -> %llu\n", ci->i_max_size,
-       le64_to_cpu(info->max_size));
-  ci->i_max_size = le64_to_cpu(info->max_size);
- }
-
  ci->i_layout = info->layout;
  inode->i_blkbits = fls(le32_to_cpu(info->layout.fl_stripe_unit)) - 1;
 
@@ -742,6 +734,14 @@ static int fill_inode(struct inode *inode,
   ci->i_max_offset = 2;
  }
 no_change:
+ /* only update max_size on auth cap */
+ if ((info->cap.flags & CEPH_CAP_FLAG_AUTH) &&
+     ci->i_max_size != le64_to_cpu(info->max_size)) {
+  dout("max_size %lld -> %llu\n", ci->i_max_size,
+       le64_to_cpu(info->max_size));
+  ci->i_max_size = le64_to_cpu(info->max_size);
+ }
+
  spin_unlock(&ci->i_ceph_lock);
 
  /* queue truncate if we saw i_size decrease */
-- 
1.7.1