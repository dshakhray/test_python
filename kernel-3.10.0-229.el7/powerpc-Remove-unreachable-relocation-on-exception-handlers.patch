From 88a6d58db96e7aae0ed2dbed66850f58500b48fb Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:04:03 -0400
Subject: [powerpc] Remove unreachable relocation on exception handlers

Message-id: <1410545655-205645-15-git-send-email-dzickus@redhat.com>
Patchwork-id: 94072
O-Subject: [RHEL7 PATCH 014/626] powerpc: Remove unreachable relocation on exception handlers
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 1d567cb4bd42d560a7621cac6f6aebe87343689e
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Tue Jun 25 17:47:54 2013 +1000

    powerpc: Remove unreachable relocation on exception handlers

    We have relocation on exception handlers defined for h_data_storage and
    h_instr_storage. However we will never take relocation on exceptions for
    these because they can only come from a guest, and we never take
    relocation on exceptions when we transition from guest to host.

    We also have a handler for hmi_exception (Hypervisor Maintenance) which
    is defined in the architecture to never be delivered with relocation on,
    see see v2.07 Book III-S section 6.5.

    So remove the handlers, leaving a branch to self just to be double extra
    paranoid.

    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    CC: <stable@vger.kernel.org> [v3.9+]
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/exceptions-64s.S b/arch/powerpc/kernel/exceptions-64s.S
index 1f6a265..902ca3c 100644
--- a/arch/powerpc/kernel/exceptions-64s.S
+++ b/arch/powerpc/kernel/exceptions-64s.S
@@ -802,14 +802,10 @@ system_call_relon_pSeries:
  STD_RELON_EXCEPTION_PSERIES(0x4d00, 0xd00, single_step)
 
  . = 0x4e00
- SET_SCRATCH0(r13)
- EXCEPTION_PROLOG_0(PACA_EXGEN)
- b h_data_storage_relon_hv
+ b . /* Can't happen, see v2.07 Book III-S section 6.5 */
 
  . = 0x4e20
- SET_SCRATCH0(r13)
- EXCEPTION_PROLOG_0(PACA_EXGEN)
- b h_instr_storage_relon_hv
+ b . /* Can't happen, see v2.07 Book III-S section 6.5 */
 
  . = 0x4e40
  SET_SCRATCH0(r13)
@@ -817,9 +813,7 @@ system_call_relon_pSeries:
  b emulation_assist_relon_hv
 
  . = 0x4e60
- SET_SCRATCH0(r13)
- EXCEPTION_PROLOG_0(PACA_EXGEN)
- b hmi_exception_relon_hv
+ b . /* Can't happen, see v2.07 Book III-S section 6.5 */
 
  . = 0x4e80
  SET_SCRATCH0(r13)
@@ -1188,13 +1182,7 @@ END_FTR_SECTION_IFSET(CPU_FTR_VSX)
 __end_handlers:
 
  /* Equivalents to the above handlers for relocation-on interrupt vectors */
- STD_RELON_EXCEPTION_HV_OOL(0xe00, h_data_storage)
- KVM_HANDLER(PACA_EXGEN, EXC_HV, 0xe00)
- STD_RELON_EXCEPTION_HV_OOL(0xe20, h_instr_storage)
- KVM_HANDLER(PACA_EXGEN, EXC_HV, 0xe20)
  STD_RELON_EXCEPTION_HV_OOL(0xe40, emulation_assist)
- STD_RELON_EXCEPTION_HV_OOL(0xe60, hmi_exception)
- KVM_HANDLER(PACA_EXGEN, EXC_HV, 0xe60)
  MASKABLE_RELON_EXCEPTION_HV_OOL(0xe80, h_doorbell)
 
  STD_RELON_EXCEPTION_PSERIES_OOL(0xf00, performance_monitor)
-- 
1.7.1