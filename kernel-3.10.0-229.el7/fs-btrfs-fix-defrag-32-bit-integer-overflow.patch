From 007eea8e9e22b0adc3f6324ffae0c1b8ca72db15 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:00:17 -0400
Subject: [fs] btrfs: fix defrag 32-bit integer overflow

Message-id: <1407179109-13714-131-git-send-email-sandeen@redhat.com>
Patchwork-id: 87073
O-Subject: [RHEL7.1 PATCH 130/422] btrfs: fix defrag 32-bit integer overflow
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Justin Maggard <jmaggard10@gmail.com>

commit c41570c9d29764f797fa35490d72b7395a0105c3
Author: Justin Maggard <jmaggard10@gmail.com>
Date:   Tue Jan 21 11:18:29 2014 -0800

    btrfs: fix defrag 32-bit integer overflow

    When defragging a very large file, the cluster variable can wrap its 32-bit
    signed int type and become negative, which eventually gets passed to
    btrfs_force_ra() as a very large unsigned long value.  On 32-bit platforms,
    this eventually results in an Oops from the SLAB allocator.

    Change the cluster and max_cluster signed int variables to unsigned long to
    match the readahead functions.  This also allows the min() comparison in
    btrfs_defrag_file() to work as intended.

    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index 34bf84a..b013489 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -1036,7 +1036,7 @@ out:
 static int cluster_pages_for_defrag(struct inode *inode,
         struct page **pages,
         unsigned long start_index,
-        int num_pages)
+        unsigned long num_pages)
 {
  unsigned long file_end;
  u64 isize = i_size_read(inode);
@@ -1194,8 +1194,8 @@ int btrfs_defrag_file(struct inode *inode, struct file *file,
  int defrag_count = 0;
  int compress_type = BTRFS_COMPRESS_ZLIB;
  int extent_thresh = range->extent_thresh;
- int max_cluster = (256 * 1024) >> PAGE_CACHE_SHIFT;
- int cluster = max_cluster;
+ unsigned long max_cluster = (256 * 1024) >> PAGE_CACHE_SHIFT;
+ unsigned long cluster = max_cluster;
  u64 new_align = ~((u64)128 * 1024 - 1);
  struct page **pages = NULL;
 
-- 
1.7.1