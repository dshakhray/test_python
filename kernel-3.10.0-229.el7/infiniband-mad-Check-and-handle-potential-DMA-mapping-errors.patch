From 865d5e9db765c25b098b7753ede6819a57a13765 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 11:59:12 -0400
Subject: [infiniband] mad: Check and handle potential DMA mapping errors

Message-id: <47dc1a411512bd7280c1aa1708b692f9600127df.1410425016.git.avadai@redhat.com>
Patchwork-id: 93580
O-Subject: [Patch RHEL7.1 V1 016/197] IB/mad: Check and handle potential DMA mapping errors
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Yan Burman <yanb@mellanox.com>

Running with DMA_API_DEBUG enabled and not checking for DMA mapping
errors triggers a kernel stack trace with "DMA-API: device driver
failed to check map error" message.  Add these checks to the MAD
module, both to be be more robust and also eliminate these
false-positive stack traces.

Signed-off-by: Yan Burman <yanb@mellanox.com>
Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 2c34e68f426151bc6d16de6a187678f6693c0770)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/core/mad.c b/drivers/infiniband/core/mad.c
index 4c837e6..ab31f13 100644
--- a/drivers/infiniband/core/mad.c
+++ b/drivers/infiniband/core/mad.c
@@ -1022,12 +1022,21 @@ int ib_send_mad(struct ib_mad_send_wr_private *mad_send_wr)
      mad_send_wr->send_buf.mad,
      sge[0].length,
      DMA_TO_DEVICE);
+ if (unlikely(ib_dma_mapping_error(mad_agent->device, sge[0].addr)))
+  return -ENOMEM;
+
  mad_send_wr->header_mapping = sge[0].addr;
 
  sge[1].addr = ib_dma_map_single(mad_agent->device,
      ib_get_payload(mad_send_wr),
      sge[1].length,
      DMA_TO_DEVICE);
+ if (unlikely(ib_dma_mapping_error(mad_agent->device, sge[1].addr))) {
+  ib_dma_unmap_single(mad_agent->device,
+        mad_send_wr->header_mapping,
+        sge[0].length, DMA_TO_DEVICE);
+  return -ENOMEM;
+ }
  mad_send_wr->payload_mapping = sge[1].addr;
 
  spin_lock_irqsave(&qp_info->send_queue.lock, flags);
@@ -2590,6 +2599,11 @@ static int ib_mad_post_receive_mads(struct ib_mad_qp_info *qp_info,
        sizeof *mad_priv -
          sizeof mad_priv->header,
        DMA_FROM_DEVICE);
+  if (unlikely(ib_dma_mapping_error(qp_info->port_priv->device,
+        sg_list.addr))) {
+   ret = -ENOMEM;
+   break;
+  }
   mad_priv->header.mapping = sg_list.addr;
   recv_wr.wr_id = (unsigned long)&mad_priv->header.mad_list;
   mad_priv->header.mad_list.mad_queue = recv_queue;
-- 
1.7.1