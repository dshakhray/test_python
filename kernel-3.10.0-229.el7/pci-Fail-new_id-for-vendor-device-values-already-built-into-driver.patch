From bcbd079e2948dc315b39acd720fc7e8a335ac908 Mon Sep 17 00:00:00 2001
From: Bandan Das <bsd@redhat.com>
Date: Tue, 8 Jul 2014 03:42:14 -0400
Subject: [pci] Fail new_id for vendor/device values already built into driver

Message-id: <jpgvbr8fre1.fsf@redhat.com>
Patchwork-id: 85292
O-Subject: [RHEL7.1 kernel PATCH] PCI: Fail new_id for vendor/device values already built into driver
Bugzilla: 1055867
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1055867
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7674643
Upstream: 8895d3bcb8ba960b1b83f95d772b641352ea8e51

While using the sysfs new_id interface, the user can unintentionally feed
incorrect values if the driver static table has a matching entry.  This is
possible since only the device and vendor fields are mandatory and the rest
are optional.  As a result, store_new_id() will fill in default values that
are then passed on to the driver and can have unintended consequences.

As an example, consider the ixgbe driver and the 82599EB network card:

  echo "8086 10fb" > /sys/bus/pci/drivers/ixgbe/new_id

This will pass a pci_device_id with driver_data = 0 to ixgbe_probe(), which
uses that zero to index a table of card operations.  The zeroth entry of
the table does *not* correspond to the 82599 operations.

This change returns an error if the user attempts to add a dynid for a
vendor/device combination for which a static entry already exists.
However, if the user intentionally wants a different set of values, she
must provide all the 7 fields and that will be accepted.

RHEL Notes: Example: With this change,
echo "8086 10fb" > /sys/bus/pci/drivers/ixgbe/new_id will fail but
echo "8086 10fb ffffffff ffffffff 0 0 1" > /sys/bus/pci/drivers/ixgbe/new_id
will succeed

[bhelgaas: drop KVM text since the problem isn't KVM-specific]
Signed-off-by: Bandan Das <bsd@redhat.com>
Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
Reviewed-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit 8895d3bcb8ba960b1b83f95d772b641352ea8e51)

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/pci-driver.c b/drivers/pci/pci-driver.c
index 59987b3..f51b9f1 100644
--- a/drivers/pci/pci-driver.c
+++ b/drivers/pci/pci-driver.c
@@ -120,7 +120,7 @@ store_new_id(struct device_driver *driver, const char *buf, size_t count)
   subdevice=PCI_ANY_ID, class=0, class_mask=0;
  unsigned long driver_data=0;
  int fields=0;
- int retval;
+ int retval = 0;
 
  fields = sscanf(buf, "%x %x %x %x %x %x %lx",
    &vendor, &device, &subvendor, &subdevice,
@@ -128,6 +128,26 @@ store_new_id(struct device_driver *driver, const char *buf, size_t count)
  if (fields < 2)
   return -EINVAL;
 
+ if (fields != 7) {
+  struct pci_dev *pdev = kzalloc(sizeof(*pdev), GFP_KERNEL);
+  if (!pdev)
+   return -ENOMEM;
+
+  pdev->vendor = vendor;
+  pdev->device = device;
+  pdev->subsystem_vendor = subvendor;
+  pdev->subsystem_device = subdevice;
+  pdev->class = class;
+
+  if (pci_match_id(pdrv->id_table, pdev))
+   retval = -EEXIST;
+
+  kfree(pdev);
+
+  if (retval)
+   return retval;
+ }
+
  /* Only accept driver_data values that match an existing id_table
     entry */
  if (ids) {
-- 
1.7.1