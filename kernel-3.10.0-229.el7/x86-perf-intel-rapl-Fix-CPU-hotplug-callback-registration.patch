From 51fcd2a7fe9a46bf37af95bfaeebe1c0ab356a7a Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:15 -0400
Subject: [x86] perf/intel/rapl: Fix CPU hotplug callback registration

Message-id: <1410181752-25631-11-git-send-email-jolsa@redhat.com>
Patchwork-id: 91696
O-Subject: [PATCH RHEL7.1 BZ1134356 010/307] x86, intel, rapl: Fix CPU hotplug callback registration
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit fd537e56f65c61bb4cece99ac3a1a1bef6676df9
Author: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
Date: Tue Mar 11 02:08:09 2014 +0530

description
===========
Subsystems that want to register CPU hotplug callbacks, as well as perform
initialization for the CPUs that are already online, often do it as shown
below:

 get_online_cpus();

 for_each_online_cpu(cpu)
  init_cpu(cpu);

 register_cpu_notifier(&foobar_cpu_notifier);

 put_online_cpus();

This is wrong, since it is prone to ABBA deadlocks involving the
cpu_add_remove_lock and the cpu_hotplug.lock (when running concurrently
with CPU hotplug operations).

Instead, the correct and race-free way of performing the callback
registration is:

 cpu_notifier_register_begin();

 for_each_online_cpu(cpu)
  init_cpu(cpu);

 /* Note the use of the double underscored version of the API */
 __register_cpu_notifier(&foobar_cpu_notifier);

 cpu_notifier_register_done();

Fix the intel rapl code in x86 by using this latter form of callback
registration.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/cpu/perf_event_intel_rapl.c b/arch/x86/kernel/cpu/perf_event_intel_rapl.c
index 3cec947..4b9a9e9 100644
--- a/arch/x86/kernel/cpu/perf_event_intel_rapl.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_rapl.c
@@ -673,19 +673,20 @@ static int __init rapl_pmu_init(void)
   /* unsupported */
   return 0;
  }
- get_online_cpus();
+
+ cpu_notifier_register_begin();
 
  for_each_online_cpu(cpu) {
   rapl_cpu_prepare(cpu);
   rapl_cpu_init(cpu);
  }
 
- perf_cpu_notifier(rapl_cpu_notifier);
+ __perf_cpu_notifier(rapl_cpu_notifier);
 
  ret = perf_pmu_register(&rapl_pmu_class, "power", -1);
  if (WARN_ON(ret)) {
   pr_info("RAPL PMU detected, registration failed (%d), RAPL PMU disabled\n", ret);
-  put_online_cpus();
+  cpu_notifier_register_done();
   return -1;
  }
 
@@ -699,7 +700,7 @@ static int __init rapl_pmu_init(void)
   hweight32(rapl_cntr_mask),
   ktime_to_ms(pmu->timer_interval));
 
- put_online_cpus();
+ cpu_notifier_register_done();
 
  return 0;
 }
-- 
1.7.1