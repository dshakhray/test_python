From 90ca6f4e1ecfe5dc62a0de1312335aa97e983b1b Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:00:40 -0400
Subject: [fs] btrfs: don't loop forever if we can't run because of the tree mod log

Message-id: <1407179109-13714-154-git-send-email-sandeen@redhat.com>
Patchwork-id: 87085
O-Subject: [RHEL7.1 PATCH 153/422] Btrfs: don't loop forever if we can't run because of the tree mod log
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Josef Bacik <jbacik@fb.com>

commit 27a377db745ed4d11b3b9b340756857cb8dde07f
Author: Josef Bacik <jbacik@fb.com>
Date:   Fri Feb 7 13:57:59 2014 -0500

    Btrfs: don't loop forever if we can't run because of the tree mod log

    A user reported a 100% cpu hang with my new delayed ref code.  Turns out I
    forgot to increase the count check when we can't run a delayed ref because of
    the tree mod log.  If we can't run any delayed refs during this there is no
    point in continuing to look, and we need to break out.  Thanks,

    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/extent-tree.c b/fs/btrfs/extent-tree.c
index 9c9ecc9..32312e0 100644
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -2385,6 +2385,7 @@ static noinline int __btrfs_run_delayed_refs(struct btrfs_trans_handle *trans,
    spin_unlock(&delayed_refs->lock);
    locked_ref = NULL;
    cond_resched();
+   count++;
    continue;
   }
 
-- 
1.7.1