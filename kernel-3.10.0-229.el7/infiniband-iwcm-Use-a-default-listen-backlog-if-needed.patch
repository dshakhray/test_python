From 5214639e11b3658e9567ec049e8094a0ddaf6e46 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 11:59:27 -0400
Subject: [infiniband] iwcm: Use a default listen backlog if needed

Message-id: <1a7a898959e2b1dcda8d7ba87054ac3d42b6ae39.1410425016.git.avadai@redhat.com>
Patchwork-id: 93590
O-Subject: [Patch RHEL7.1 V1 031/197] RDMA/iwcm: Use a default listen backlog if needed
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Steve Wise <swise@opengridcomputing.com>

If the user creates a listening cm_id with backlog of 0 the IWCM ends
up not allowing any connection requests at all.  The correct behavior
is for the IWCM to pick a default value if the user backlog parameter
is zero.

Lustre from version 1.8.8 onward uses a backlog of 0, which breaks
iwarp support without this fix.

Signed-off-by: Steve Wise <swise@opengridcomputing.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 2f0304d21867476394cd51a54e97f7273d112261)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/core/iwcm.c b/drivers/infiniband/core/iwcm.c
index 3d2e489..ff9163d 100644
--- a/drivers/infiniband/core/iwcm.c
+++ b/drivers/infiniband/core/iwcm.c
@@ -46,6 +46,7 @@
 #include <linux/completion.h>
 #include <linux/slab.h>
 #include <linux/module.h>
+#include <linux/sysctl.h>
 
 #include <rdma/iw_cm.h>
 #include <rdma/ib_addr.h>
@@ -65,6 +66,20 @@ struct iwcm_work {
  struct list_head free_list;
 };
 
+static unsigned int default_backlog = 256;
+
+static struct ctl_table_header *iwcm_ctl_table_hdr;
+static struct ctl_table iwcm_ctl_table[] = {
+ {
+  .procname = "default_backlog",
+  .data  = &default_backlog,
+  .maxlen  = sizeof(default_backlog),
+  .mode  = 0644,
+  .proc_handler = proc_dointvec,
+ },
+ { }
+};
+
 /*
  * The following services provide a mechanism for pre-allocating iwcm_work
  * elements.  The design pre-allocates them  based on the cm_id type:
@@ -425,6 +440,9 @@ int iw_cm_listen(struct iw_cm_id *cm_id, int backlog)
 
  cm_id_priv = container_of(cm_id, struct iwcm_id_private, id);
 
+ if (!backlog)
+  backlog = default_backlog;
+
  ret = alloc_work_entries(cm_id_priv, backlog);
  if (ret)
   return ret;
@@ -1030,11 +1048,20 @@ static int __init iw_cm_init(void)
  if (!iwcm_wq)
   return -ENOMEM;
 
+ iwcm_ctl_table_hdr = register_net_sysctl(&init_net, "net/iw_cm",
+       iwcm_ctl_table);
+ if (!iwcm_ctl_table_hdr) {
+  pr_err("iw_cm: couldn't register sysctl paths\n");
+  destroy_workqueue(iwcm_wq);
+  return -ENOMEM;
+ }
+
  return 0;
 }
 
 static void __exit iw_cm_cleanup(void)
 {
+ unregister_net_sysctl_table(iwcm_ctl_table_hdr);
  destroy_workqueue(iwcm_wq);
 }
 
-- 
1.7.1