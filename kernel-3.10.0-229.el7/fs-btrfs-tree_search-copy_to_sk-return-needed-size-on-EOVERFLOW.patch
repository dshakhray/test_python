From f5a604f9e5e115c55f37d1195ea8403a33d31c29 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:04:32 -0400
Subject: [fs] btrfs: tree_search, copy_to_sk: return needed size on EOVERFLOW

Message-id: <1407179109-13714-386-git-send-email-sandeen@redhat.com>
Patchwork-id: 87265
O-Subject: [RHEL7.1 PATCH 385/422] btrfs: tree_search, copy_to_sk: return needed size on EOVERFLOW
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Gerhard Heift <gerhard@heift.name>

commit 9b6e817d022fd44fe99db92f00d4b18ac2d8f429
Author: Gerhard Heift <gerhard@heift.name>
Date:   Thu Jan 30 16:24:00 2014 +0100

    btrfs: tree_search, copy_to_sk: return needed size on EOVERFLOW

    If an item in tree_search is too large to be stored in the given buffer, return
    the needed size (including the header).

    Signed-off-by: Gerhard Heift <Gerhard@Heift.Name>
    Signed-off-by: Chris Mason <clm@fb.com>
    Acked-by: David Sterba <dsterba@suse.cz>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index 6e09fc1..3d89fd8 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -1957,7 +1957,7 @@ static noinline int copy_to_sk(struct btrfs_root *root,
           struct btrfs_path *path,
           struct btrfs_key *key,
           struct btrfs_ioctl_search_key *sk,
-          size_t buf_size,
+          size_t *buf_size,
           char *buf,
           unsigned long *sk_offset,
           int *num_found)
@@ -1990,7 +1990,7 @@ static noinline int copy_to_sk(struct btrfs_root *root,
   if (!key_in_sk(key, sk))
    continue;
 
-  if (sizeof(sh) + item_len > buf_size) {
+  if (sizeof(sh) + item_len > *buf_size) {
    if (*num_found) {
     ret = 1;
     goto out;
@@ -2001,11 +2001,12 @@ static noinline int copy_to_sk(struct btrfs_root *root,
     * handle -EOVERFLOW
     */
 
+   *buf_size = sizeof(sh) + item_len;
    item_len = 0;
    ret = -EOVERFLOW;
   }
 
-  if (sizeof(sh) + item_len + *sk_offset > buf_size) {
+  if (sizeof(sh) + item_len + *sk_offset > *buf_size) {
    ret = 1;
    goto out;
   }
@@ -2056,7 +2057,7 @@ out:
 
 static noinline int search_ioctl(struct inode *inode,
      struct btrfs_ioctl_search_key *sk,
-     size_t buf_size,
+     size_t *buf_size,
      char *buf)
 {
  struct btrfs_root *root;
@@ -2067,8 +2068,10 @@ static noinline int search_ioctl(struct inode *inode,
  int num_found = 0;
  unsigned long sk_offset = 0;
 
- if (buf_size < sizeof(struct btrfs_ioctl_search_header))
+ if (*buf_size < sizeof(struct btrfs_ioctl_search_header)) {
+  *buf_size = sizeof(struct btrfs_ioctl_search_header);
   return -EOVERFLOW;
+ }
 
  path = btrfs_alloc_path();
  if (!path)
@@ -2121,9 +2124,10 @@ err:
 static noinline int btrfs_ioctl_tree_search(struct file *file,
         void __user *argp)
 {
-  struct btrfs_ioctl_search_args *args;
-  struct inode *inode;
-  int ret;
+ struct btrfs_ioctl_search_args *args;
+ struct inode *inode;
+ int ret;
+ size_t buf_size;
 
  if (!capable(CAP_SYS_ADMIN))
   return -EPERM;
@@ -2132,8 +2136,10 @@ static noinline int btrfs_ioctl_tree_search(struct file *file,
  if (IS_ERR(args))
   return PTR_ERR(args);
 
+ buf_size = sizeof(args->buf);
+
  inode = file_inode(file);
- ret = search_ioctl(inode, &args->key, sizeof(args->buf), args->buf);
+ ret = search_ioctl(inode, &args->key, &buf_size, args->buf);
 
  /*
   * In the origin implementation an overflow is handled by returning a
-- 
1.7.1