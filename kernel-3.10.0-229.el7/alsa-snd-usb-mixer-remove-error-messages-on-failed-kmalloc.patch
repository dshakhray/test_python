From a95527e799a3db8d6cefd41316f07dbe12a9f2da Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:33:27 -0400
Subject: [alsa] snd-usb/mixer: remove error messages on failed kmalloc()

Message-id: <140972823573-311-patchset-jkysela@redhat.com>
Patchwork-id: 91007
O-Subject: [RHEL 7.1 PATCH 310/442] ALSA: snd-usb: mixer: remove error messages on failed kmalloc()
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

If kmalloc() fails, warnings will be loud enough. We can safely just
return -ENOMEM in such cases.

Signed-off-by: Daniel Mack <zonque@gmail.com>
Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: a860d95f74025c6badbbdab6154c4ca15171927e)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/usb/mixer.c b/sound/usb/mixer.c
index 9765e1c..0b728d8 100644
--- a/sound/usb/mixer.c
+++ b/sound/usb/mixer.c
@@ -1229,10 +1229,8 @@ static void build_feature_ctl(struct mixer_build *state, void *raw_desc,
   return;
 
  cval = kzalloc(sizeof(*cval), GFP_KERNEL);
- if (!cval) {
-  usb_audio_err(state->chip, "cannot malloc kcontrol\n");
+ if (!cval)
   return;
- }
  cval->mixer = state->mixer;
  cval->id = unitid;
  cval->control = control;
@@ -1815,10 +1813,8 @@ static int build_audio_procunit(struct mixer_build *state, int unitid,
   if (check_ignored_ctl(map))
    continue;
   cval = kzalloc(sizeof(*cval), GFP_KERNEL);
-  if (!cval) {
-   usb_audio_err(state->chip, "cannot malloc kcontrol\n");
+  if (!cval)
    return -ENOMEM;
-  }
   cval->mixer = state->mixer;
   cval->id = unitid;
   cval->control = valinfo->control;
@@ -1849,7 +1845,6 @@ static int build_audio_procunit(struct mixer_build *state, int unitid,
 
   kctl = snd_ctl_new1(&mixer_procunit_ctl, cval);
   if (!kctl) {
-   usb_audio_err(state->chip, "cannot malloc kcontrol\n");
    kfree(cval);
    return -ENOMEM;
   }
@@ -2028,10 +2023,8 @@ static int parse_audio_selector_unit(struct mixer_build *state, int unitid,
   return 0;
 
  cval = kzalloc(sizeof(*cval), GFP_KERNEL);
- if (!cval) {
-  usb_audio_err(state->chip, "cannot malloc kcontrol\n");
+ if (!cval)
   return -ENOMEM;
- }
  cval->mixer = state->mixer;
  cval->id = unitid;
  cval->val_type = USB_MIXER_U8;
@@ -2048,7 +2041,6 @@ static int parse_audio_selector_unit(struct mixer_build *state, int unitid,
 
  namelist = kmalloc(sizeof(char *) * desc->bNrInPins, GFP_KERNEL);
  if (!namelist) {
-  usb_audio_err(state->chip, "cannot malloc\n");
   kfree(cval);
   return -ENOMEM;
  }
@@ -2058,7 +2050,6 @@ static int parse_audio_selector_unit(struct mixer_build *state, int unitid,
   len = 0;
   namelist[i] = kmalloc(MAX_ITEM_NAME_LEN, GFP_KERNEL);
   if (!namelist[i]) {
-   usb_audio_err(state->chip, "cannot malloc\n");
    while (i--)
     kfree(namelist[i]);
    kfree(namelist);
-- 
1.7.1