From 7e5622cdade5fb38374a45c8caa6c546109c4b46 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 18 Jun 2014 20:04:17 -0400
Subject: [block] blk-mq: for_each_* macro correctness

Message-id: <1403121864-7956-1-git-send-email-snitzer@redhat.com>
Patchwork-id: 84262
O-Subject: [RHEL7.1 PATCH 151/150] blk-mq: for_each_* macro correctness
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 0d0b7d427987f6e98b6f32e84ee071f36f85c3d4
Author: Jose Alonso <joalonsof@gmail.com>
Date:   Tue Jan 28 08:09:46 2014 -0700

    blk-mq: for_each_* macro correctness

    I observed that there are for_each macros that do an extra memory access
    beyond the defined area.
    Normally this does not cause problems.
    But, this can cause exceptions. For example: if the area is allocated at
    the end of a page and the next page is not accessible.

    For correctness, I suggest changing the arguments of the 'for loop' like
    others 'for_each' do in the kernel.

    Signed-off-by: Jose Alonso <joalonsof@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 5eea746..a002cf1 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -190,16 +190,16 @@ static inline void *blk_mq_rq_to_pdu(struct request *rq)
 }
 
 #define queue_for_each_hw_ctx(q, hctx, i)    \
- for ((i) = 0, hctx = (q)->queue_hw_ctx[0];   \
-      (i) < (q)->nr_hw_queues; (i)++, hctx = (q)->queue_hw_ctx[i])
+ for ((i) = 0; (i) < (q)->nr_hw_queues &&   \
+      ({ hctx = (q)->queue_hw_ctx[i]; 1; }); (i)++)
 
 #define queue_for_each_ctx(q, ctx, i)     \
- for ((i) = 0, ctx = per_cpu_ptr((q)->queue_ctx, 0);  \
-      (i) < (q)->nr_queues; (i)++, ctx = per_cpu_ptr(q->queue_ctx, (i)))
+ for ((i) = 0; (i) < (q)->nr_queues &&    \
+      ({ ctx = per_cpu_ptr((q)->queue_ctx, (i)); 1; }); (i)++)
 
 #define hctx_for_each_ctx(hctx, ctx, i)     \
- for ((i) = 0, ctx = (hctx)->ctxs[0];    \
-      (i) < (hctx)->nr_ctx; (i)++, ctx = (hctx)->ctxs[(i)])
+ for ((i) = 0; (i) < (hctx)->nr_ctx &&    \
+      ({ ctx = (hctx)->ctxs[(i)]; 1; }); (i)++)
 
 #define blk_ctx_sum(q, sum)      \
 ({         \
-- 
1.7.1