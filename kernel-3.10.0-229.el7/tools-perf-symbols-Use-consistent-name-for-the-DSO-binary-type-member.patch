From cfc3335a0c97758fddb3f6300862cec32893ec1e Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:50:54 -0400
Subject: [tools] perf/symbols: Use consistent name for the DSO binary type member

Message-id: <1408953210-26343-167-git-send-email-jolsa@redhat.com>
Patchwork-id: 88968
O-Subject: [PATCH RHEL7.1 BZ1133083 166/322] perf symbols: Use consistent name for the DSO binary type member
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 5f70619d67b99310be9aaf850293b7fd7f31d160
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Tue Dec 17 16:14:07 2013 -0300

description
===========
It was called "data_type", but in this context "data" is way too vague,
it could mean the "data" ELF segment, or something else.

Since we have dso__read_binary_type_filename() and the values this field
receives are all DSO__BINARY_TYPE_<FOO> we may as well call it
"binary_type" for consistency sake.

It also seems more appropriate since it determines if we can do
operations like annotation and DWARF unwinding, that needs more than
just the symtab, requiring access to ELF text segments, CFI ELF
sections, etc.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/dso.c b/tools/perf/util/dso.c
index eef1662..4ddeecb 100644
--- a/tools/perf/util/dso.c
+++ b/tools/perf/util/dso.c
@@ -148,7 +148,7 @@ static int open_dso(struct dso *dso, struct machine *machine)
  if (machine)
   root_dir = machine->root_dir;
 
- if (dso__read_binary_type_filename(dso, dso->data_type,
+ if (dso__read_binary_type_filename(dso, dso->binary_type,
          root_dir, name, PATH_MAX)) {
   free(name);
   return -EINVAL;
@@ -168,19 +168,19 @@ int dso__data_fd(struct dso *dso, struct machine *machine)
  };
  int i = 0;
 
- if (dso->data_type != DSO_BINARY_TYPE__NOT_FOUND)
+ if (dso->binary_type != DSO_BINARY_TYPE__NOT_FOUND)
   return open_dso(dso, machine);
 
  do {
   int fd;
 
-  dso->data_type = binary_type_data[i++];
+  dso->binary_type = binary_type_data[i++];
 
   fd = open_dso(dso, machine);
   if (fd >= 0)
    return fd;
 
- } while (dso->data_type != DSO_BINARY_TYPE__NOT_FOUND);
+ } while (dso->binary_type != DSO_BINARY_TYPE__NOT_FOUND);
 
  return -EINVAL;
 }
@@ -475,7 +475,7 @@ struct dso *dso__new(const char *name)
    dso->symbols[i] = dso->symbol_names[i] = RB_ROOT;
   dso->cache = RB_ROOT;
   dso->symtab_type = DSO_BINARY_TYPE__NOT_FOUND;
-  dso->data_type   = DSO_BINARY_TYPE__NOT_FOUND;
+  dso->binary_type = DSO_BINARY_TYPE__NOT_FOUND;
   dso->loaded = 0;
   dso->rel = 0;
   dso->sorted_by_name = 0;
diff --git a/tools/perf/util/dso.h b/tools/perf/util/dso.h
index aa33847..cd7d6f0 100644
--- a/tools/perf/util/dso.h
+++ b/tools/perf/util/dso.h
@@ -83,7 +83,7 @@ struct dso {
  enum dso_kernel_type kernel;
  enum dso_swap_type needs_swap;
  enum dso_binary_type symtab_type;
- enum dso_binary_type data_type;
+ enum dso_binary_type binary_type;
  u8   adjust_symbols:1;
  u8   has_build_id:1;
  u8   has_srcline:1;
@@ -159,14 +159,14 @@ size_t dso__fprintf(struct dso *dso, enum map_type type, FILE *fp);
 
 static inline bool dso__is_vmlinux(struct dso *dso)
 {
- return dso->data_type == DSO_BINARY_TYPE__VMLINUX ||
-        dso->data_type == DSO_BINARY_TYPE__GUEST_VMLINUX;
+ return dso->binary_type == DSO_BINARY_TYPE__VMLINUX ||
+        dso->binary_type == DSO_BINARY_TYPE__GUEST_VMLINUX;
 }
 
 static inline bool dso__is_kcore(struct dso *dso)
 {
- return dso->data_type == DSO_BINARY_TYPE__KCORE ||
-        dso->data_type == DSO_BINARY_TYPE__GUEST_KCORE;
+ return dso->binary_type == DSO_BINARY_TYPE__KCORE ||
+        dso->binary_type == DSO_BINARY_TYPE__GUEST_KCORE;
 }
 
 void dso__free_a2l(struct dso *dso);
diff --git a/tools/perf/util/symbol.c b/tools/perf/util/symbol.c
index 9ee4b80..923d000 100644
--- a/tools/perf/util/symbol.c
+++ b/tools/perf/util/symbol.c
@@ -1089,9 +1089,9 @@ static int dso__load_kcore(struct dso *dso, struct map *map,
   * dso__data_read_addr().
   */
  if (dso->kernel == DSO_TYPE_GUEST_KERNEL)
-  dso->data_type = DSO_BINARY_TYPE__GUEST_KCORE;
+  dso->binary_type = DSO_BINARY_TYPE__GUEST_KCORE;
  else
-  dso->data_type = DSO_BINARY_TYPE__KCORE;
+  dso->binary_type = DSO_BINARY_TYPE__KCORE;
  dso__set_long_name(dso, strdup(kcore_filename), true);
 
  close(fd);
@@ -1368,9 +1368,9 @@ int dso__load_vmlinux(struct dso *dso, struct map *map,
 
  if (err > 0) {
   if (dso->kernel == DSO_TYPE_GUEST_KERNEL)
-   dso->data_type = DSO_BINARY_TYPE__GUEST_VMLINUX;
+   dso->binary_type = DSO_BINARY_TYPE__GUEST_VMLINUX;
   else
-   dso->data_type = DSO_BINARY_TYPE__VMLINUX;
+   dso->binary_type = DSO_BINARY_TYPE__VMLINUX;
   dso__set_long_name(dso, vmlinux, vmlinux_allocated);
   dso__set_loaded(dso, map->type);
   pr_debug("Using %s for symbols\n", symfs_vmlinux);
-- 
1.7.1