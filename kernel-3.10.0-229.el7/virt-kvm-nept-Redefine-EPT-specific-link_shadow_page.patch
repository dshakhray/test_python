From b6301470ff7ac537b29448f622a8d17a57dd7d3d Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:37:36 -0400
Subject: [virt] kvm/nept: Redefine EPT-specific link_shadow_page()

Message-id: <1406040016-3289-62-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86140
O-Subject: [RHEL7 PATCH v2 061/221] nEPT: Redefine EPT-specific link_shadow_page()
Bugzilla: 1048496 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Yang Zhang <yang.z.zhang@Intel.com>

Since nEPT doesn't support A/D bit, so we should not set those bit
when build shadow page table.

Reviewed-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com>
Signed-off-by: Yang Zhang <yang.z.zhang@Intel.com>
Signed-off-by: Gleb Natapov <gleb@redhat.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 7a1638ce4220d52e53d4114e34e4529161a3449c)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/mmu.c b/arch/x86/kvm/mmu.c
index a61380a..52e1265 100644
--- a/arch/x86/kvm/mmu.c
+++ b/arch/x86/kvm/mmu.c
@@ -2047,12 +2047,18 @@ static void shadow_walk_next(struct kvm_shadow_walk_iterator *iterator)
  return __shadow_walk_next(iterator, *iterator->sptep);
 }
 
-static void link_shadow_page(u64 *sptep, struct kvm_mmu_page *sp)
+static void link_shadow_page(u64 *sptep, struct kvm_mmu_page *sp, bool accessed)
 {
  u64 spte;
 
+ BUILD_BUG_ON(VMX_EPT_READABLE_MASK != PT_PRESENT_MASK ||
+   VMX_EPT_WRITABLE_MASK != PT_WRITABLE_MASK);
+
  spte = __pa(sp->spt) | PT_PRESENT_MASK | PT_WRITABLE_MASK |
-        shadow_user_mask | shadow_x_mask | shadow_accessed_mask;
+        shadow_user_mask | shadow_x_mask;
+
+ if (accessed)
+  spte |= shadow_accessed_mask;
 
  mmu_spte_set(sptep, spte);
 }
@@ -2680,7 +2686,7 @@ static int __direct_map(struct kvm_vcpu *vcpu, gpa_t v, int write,
            iterator.level - 1,
            1, ACC_ALL, iterator.sptep);
 
-   link_shadow_page(iterator.sptep, sp);
+   link_shadow_page(iterator.sptep, sp, true);
   }
  }
  return emulate;
diff --git a/arch/x86/kvm/paging_tmpl.h b/arch/x86/kvm/paging_tmpl.h
index 9a345f4..70ebffa 100644
--- a/arch/x86/kvm/paging_tmpl.h
+++ b/arch/x86/kvm/paging_tmpl.h
@@ -558,7 +558,7 @@ static int FNAME(fetch)(struct kvm_vcpu *vcpu, gva_t addr,
    goto out_gpte_changed;
 
   if (sp)
-   link_shadow_page(it.sptep, sp);
+   link_shadow_page(it.sptep, sp, PT_GUEST_ACCESSED_MASK);
  }
 
  for (;
@@ -578,7 +578,7 @@ static int FNAME(fetch)(struct kvm_vcpu *vcpu, gva_t addr,
 
   sp = kvm_mmu_get_page(vcpu, direct_gfn, addr, it.level-1,
           true, direct_access, it.sptep);
-  link_shadow_page(it.sptep, sp);
+  link_shadow_page(it.sptep, sp, PT_GUEST_ACCESSED_MASK);
  }
 
  clear_sp_write_flooding_count(it.sptep);
-- 
1.7.1