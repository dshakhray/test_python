From 3e11b61ff18aeee873c318cb00ef9ae0d883874e Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:04:14 -0400
Subject: [fs] btrfs: fix transaction leak during fsync call

Message-id: <1407179109-13714-368-git-send-email-sandeen@redhat.com>
Patchwork-id: 87331
O-Subject: [RHEL7.1 PATCH 367/422] Btrfs: fix transaction leak during fsync call
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit b05fd8742f6291b67571ad0fdad4da6b6eb98025
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Thu May 29 23:31:39 2014 +0100

    Btrfs: fix transaction leak during fsync call

    If btrfs_log_dentry_safe() returns an error, we set ret to 1 and
    fall through with the goal of committing the transaction. However,
    in the case where the inode doesn't need a full sync, we would call
    btrfs_wait_ordered_range() against the target range for our inode,
    and if it returned an error, we would return without commiting or
    ending the transaction.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/file.c b/fs/btrfs/file.c
index e00054e..cdf4feb 100644
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -2031,8 +2031,10 @@ int btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)
   if (!full_sync) {
    ret = btrfs_wait_ordered_range(inode, start,
              end - start + 1);
-   if (ret)
+   if (ret) {
+    btrfs_end_transaction(trans, root);
     goto out;
+   }
   }
   ret = btrfs_commit_transaction(trans, root);
  } else {
-- 
1.7.1