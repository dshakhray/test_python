From 4a6be5a2ed63a6c648169af39811bf989c89d234 Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Thu, 14 Aug 2014 14:42:28 -0400
Subject: [ethernet] e1000e: Fix Runtime PM blocks EEE link negotiation in S5

Message-id: <1408027348-9610-35-git-send-email-jogreene@redhat.com>
Patchwork-id: 87731
O-Subject: [RHEL7.1 PATCH 34/34] e1000e: Fix Runtime PM blocks EEE link negotiation in S5
Bugzilla: 1091119
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: 1091119
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7834849
Tested: By me. Acceptable. See BZ for details

Adding a function, and associated calls, to flush writes to (read) the LPIC
MAC register before entering the shutdown flow.  This fixes the problem
of the PHY never negotiating a 100M link (if both sides of the link support
EEE and 100M link) when Runtime PM is enabled.

Signed-off-by: Dave Ertman <david.m.ertman@intel.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 2a7e19af94104b270d675c52bba2ca1bc20efa70)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/e1000e/netdev.c b/drivers/net/ethernet/intel/e1000e/netdev.c
index 0964ab7..963b807 100644
--- a/drivers/net/ethernet/intel/e1000e/netdev.c
+++ b/drivers/net/ethernet/intel/e1000e/netdev.c
@@ -6013,6 +6013,28 @@ release:
  return retval;
 }
 
+static void e1000e_flush_lpic(struct pci_dev *pdev)
+{
+ struct net_device *netdev = pci_get_drvdata(pdev);
+ struct e1000_adapter *adapter = netdev_priv(netdev);
+ struct e1000_hw *hw = &adapter->hw;
+ u32 ret_val;
+
+ pm_runtime_get_sync(netdev->dev.parent);
+
+ ret_val = hw->phy.ops.acquire(hw);
+ if (ret_val)
+  goto fl_out;
+
+ pr_info("EEE TX LPI TIMER: %08X\n",
+  er32(LPIC) >> E1000_LPIC_LPIET_SHIFT);
+
+ hw->phy.ops.release(hw);
+
+fl_out:
+ pm_runtime_put_sync(netdev->dev.parent);
+}
+
 static int e1000e_pm_freeze(struct device *dev)
 {
  struct net_device *netdev = pci_get_drvdata(to_pci_dev(dev));
@@ -6312,6 +6334,8 @@ static int e1000e_pm_suspend(struct device *dev)
 {
  struct pci_dev *pdev = to_pci_dev(dev);
 
+ e1000e_flush_lpic(pdev);
+
  e1000e_pm_freeze(dev);
 
  return __e1000_shutdown(pdev, false);
@@ -6395,6 +6419,8 @@ static int e1000e_pm_runtime_suspend(struct device *dev)
 
 static void e1000_shutdown(struct pci_dev *pdev)
 {
+ e1000e_flush_lpic(pdev);
+
  e1000e_pm_freeze(&pdev->dev);
 
  __e1000_shutdown(pdev, false);
-- 
1.7.1