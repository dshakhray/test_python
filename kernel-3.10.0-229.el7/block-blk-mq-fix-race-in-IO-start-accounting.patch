From 10615856f0125090e8e8b2122753efd0fc1c42a8 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:50 -0400
Subject: [block] blk-mq: fix race in IO start accounting

Message-id: <1402670238-13916-63-git-send-email-snitzer@redhat.com>
Patchwork-id: 83817
O-Subject: [RHEL7.1 PATCH 062/150] blk-mq: fix race in IO start accounting
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit cf4b50afc28cc4629f82f5591bef1db2ce129fdc
Author: Jens Axboe <axboe@fb.com>
Date:   Fri May 9 14:54:08 2014 -0600

    blk-mq: fix race in IO start accounting

    Commit c6d600c6 opened up a small race where we could attempt to
    account IO completion on a request, racing with IO start accounting.
    Fix this up by ensuring that we've accounted for IO start before
    inserting the request.

    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 9f07a26..526feee 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1088,17 +1088,15 @@ static void blk_mq_make_request(struct request_queue *q, struct bio *bio)
  }
 
  if (!(hctx->flags & BLK_MQ_F_SHOULD_MERGE)) {
-  init_request_from_bio(rq, bio);
-
+  blk_mq_bio_to_request(rq, bio);
   spin_lock(&ctx->lock);
 insert_rq:
   __blk_mq_insert_request(hctx, rq, false);
   spin_unlock(&ctx->lock);
-  blk_account_io_start(rq, 1);
  } else {
   spin_lock(&ctx->lock);
   if (!blk_mq_attempt_merge(q, ctx, bio)) {
-   init_request_from_bio(rq, bio);
+   blk_mq_bio_to_request(rq, bio);
    goto insert_rq;
   }
 
-- 
1.7.1