From 4e75fbd6c2330294028fad44eda515e8b2f8e5b3 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 20:59:58 -0400
Subject: [fs] xfs: zeroing space needs to punch delalloc blocks

Message-id: <1412888441-4181-5-git-send-email-sandeen@redhat.com>
Patchwork-id: 97331
O-Subject: [RHEL7.1 PATCH 04/47] [fs] xfs: zeroing space needs to punch delalloc blocks
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit 897b73b6a2ee5d3c06648b601beb1724f7fbd678
    Author: Dave Chinner <dchinner@redhat.com>
    Date:   Mon Apr 14 18:15:11 2014 +1000

    xfs: zeroing space needs to punch delalloc blocks

    When we are zeroing space andit is covered by a delalloc range, we
    need to punch the delalloc range out before we truncate the page
    cache. Failing to do so leaves and inconsistency between the page
    cache and the extent tree, which we later trip over when doing
    direct IO over the same range.

    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Tested-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_bmap_util.c b/fs/xfs/xfs_bmap_util.c
index f264616..cfaaf22 100644
--- a/fs/xfs/xfs_bmap_util.c
+++ b/fs/xfs/xfs_bmap_util.c
@@ -1419,6 +1419,8 @@ xfs_zero_file_space(
  xfs_off_t  end_boundary;
  int   error;
 
+ trace_xfs_zero_file_space(ip);
+
  granularity = max_t(uint, 1 << mp->m_sb.sb_blocklog, PAGE_CACHE_SIZE);
 
  /*
@@ -1433,9 +1435,18 @@ xfs_zero_file_space(
  ASSERT(end_boundary <= offset + len);
 
  if (start_boundary < end_boundary - 1) {
-  /* punch out the page cache over the conversion range */
+  /*
+   * punch out delayed allocation blocks and the page cache over
+   * the conversion range
+   */
+  xfs_ilock(ip, XFS_ILOCK_EXCL);
+  error = xfs_bmap_punch_delalloc_range(ip,
+    XFS_B_TO_FSBT(mp, start_boundary),
+    XFS_B_TO_FSB(mp, end_boundary - start_boundary));
+  xfs_iunlock(ip, XFS_ILOCK_EXCL);
   truncate_pagecache_range(VFS_I(ip), start_boundary,
       end_boundary - 1);
+
   /* convert the blocks */
   error = xfs_alloc_file_space(ip, start_boundary,
      end_boundary - start_boundary - 1,
diff --git a/fs/xfs/xfs_trace.h b/fs/xfs/xfs_trace.h
index 6d0671f..4245ab2 100644
--- a/fs/xfs/xfs_trace.h
+++ b/fs/xfs/xfs_trace.h
@@ -603,6 +603,7 @@ DEFINE_INODE_EVENT(xfs_readlink);
 DEFINE_INODE_EVENT(xfs_inactive_symlink);
 DEFINE_INODE_EVENT(xfs_alloc_file_space);
 DEFINE_INODE_EVENT(xfs_free_file_space);
+DEFINE_INODE_EVENT(xfs_zero_file_space);
 DEFINE_INODE_EVENT(xfs_readdir);
 #ifdef CONFIG_XFS_POSIX_ACL
 DEFINE_INODE_EVENT(xfs_get_acl);
-- 
1.7.1