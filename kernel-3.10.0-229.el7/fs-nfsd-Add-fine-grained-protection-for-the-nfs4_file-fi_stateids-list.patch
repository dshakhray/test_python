From 36067ef5ad93348d200e1aed1015f15bdce61eaa Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:18:50 -0400
Subject: [fs] nfsd: Add fine grained protection for the nfs4_file->fi_stateids list

Message-id: <1410898849-22126-47-git-send-email-bfields@redhat.com>
Patchwork-id: 95832
O-Subject: [Patch RHEL7 046/165] nfsd: Add fine grained protection for the nfs4_file->fi_stateids list
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

Access to this list is currently serialized by the client_mutex. Add
finer grained locking around this list in preparation for its removal.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 1d31a2531ae91f8a89c0fffa883ef922c0dbb74d
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index 3704789..cfb10d0 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -708,7 +708,11 @@ release_all_access(struct nfs4_ol_stateid *stp)
 
 static void unhash_generic_stateid(struct nfs4_ol_stateid *stp)
 {
+ struct nfs4_file *fp = stp->st_file;
+
+ spin_lock(&fp->fi_lock);
  list_del(&stp->st_perfile);
+ spin_unlock(&fp->fi_lock);
  list_del(&stp->st_perstateowner);
 }
 
@@ -2676,6 +2680,7 @@ static void nfsd4_init_file(struct nfs4_file *fp, struct inode *ino)
  lockdep_assert_held(&state_lock);
 
  atomic_set(&fp->fi_ref, 1);
+ spin_lock_init(&fp->fi_lock);
  INIT_LIST_HEAD(&fp->fi_stateids);
  INIT_LIST_HEAD(&fp->fi_delegations);
  ihold(ino);
@@ -2799,7 +2804,6 @@ static void init_open_stateid(struct nfs4_ol_stateid *stp, struct nfs4_file *fp,
  stp->st_stid.sc_type = NFS4_OPEN_STID;
  INIT_LIST_HEAD(&stp->st_locks);
  list_add(&stp->st_perstateowner, &oo->oo_owner.so_stateids);
- list_add(&stp->st_perfile, &fp->fi_stateids);
  stp->st_stateowner = &oo->oo_owner;
  get_nfs4_file(fp);
  stp->st_file = fp;
@@ -2808,6 +2812,9 @@ static void init_open_stateid(struct nfs4_ol_stateid *stp, struct nfs4_file *fp,
  set_access(open->op_share_access, stp);
  set_deny(open->op_share_deny, stp);
  stp->st_openstp = NULL;
+ spin_lock(&fp->fi_lock);
+ list_add(&stp->st_perfile, &fp->fi_stateids);
+ spin_unlock(&fp->fi_lock);
 }
 
 static void
@@ -2915,6 +2922,7 @@ nfs4_share_conflict(struct svc_fh *current_fh, unsigned int deny_type)
   return nfs_ok;
  ret = nfserr_locked;
  /* Search for conflicting share reservations */
+ spin_lock(&fp->fi_lock);
  list_for_each_entry(stp, &fp->fi_stateids, st_perfile) {
   if (test_deny(deny_type, stp) ||
       test_deny(NFS4_SHARE_DENY_BOTH, stp))
@@ -2922,6 +2930,7 @@ nfs4_share_conflict(struct svc_fh *current_fh, unsigned int deny_type)
  }
  ret = nfs_ok;
 out:
+ spin_unlock(&fp->fi_lock);
  put_nfs4_file(fp);
  return ret;
 }
@@ -3150,6 +3159,7 @@ nfs4_check_open(struct nfs4_file *fp, struct nfsd4_open *open, struct nfs4_ol_st
  struct nfs4_ol_stateid *local;
  struct nfs4_openowner *oo = open->op_openowner;
 
+ spin_lock(&fp->fi_lock);
  list_for_each_entry(local, &fp->fi_stateids, st_perfile) {
   /* ignore lock owners */
   if (local->st_stateowner->so_is_open_owner == 0)
@@ -3158,9 +3168,12 @@ nfs4_check_open(struct nfs4_file *fp, struct nfsd4_open *open, struct nfs4_ol_st
   if (local->st_stateowner == &oo->oo_owner)
    *stpp = local;
   /* check for conflicting share reservations */
-  if (!test_share(local, open))
+  if (!test_share(local, open)) {
+   spin_unlock(&fp->fi_lock);
    return nfserr_share_denied;
+  }
  }
+ spin_unlock(&fp->fi_lock);
  return nfs_ok;
 }
 
@@ -4408,7 +4421,6 @@ alloc_init_lock_stateid(struct nfs4_lockowner *lo, struct nfs4_file *fp, struct
  if (stp == NULL)
   return NULL;
  stp->st_stid.sc_type = NFS4_LOCK_STID;
- list_add(&stp->st_perfile, &fp->fi_stateids);
  list_add(&stp->st_perstateowner, &lo->lo_owner.so_stateids);
  stp->st_stateowner = &lo->lo_owner;
  get_nfs4_file(fp);
@@ -4417,6 +4429,9 @@ alloc_init_lock_stateid(struct nfs4_lockowner *lo, struct nfs4_file *fp, struct
  stp->st_deny_bmap = open_stp->st_deny_bmap;
  stp->st_openstp = open_stp;
  list_add(&stp->st_locks, &open_stp->st_locks);
+ spin_lock(&fp->fi_lock);
+ list_add(&stp->st_perfile, &fp->fi_stateids);
+ spin_unlock(&fp->fi_lock);
  return stp;
 }
 
diff --git a/fs/nfsd/state.h b/fs/nfsd/state.h
index 06d1a90..04737b3 100644
--- a/fs/nfsd/state.h
+++ b/fs/nfsd/state.h
@@ -377,6 +377,7 @@ static inline struct nfs4_lockowner * lockowner(struct nfs4_stateowner *so)
 /* nfs4_file: a file opened by some number of (open) nfs4_stateowners. */
 struct nfs4_file {
  atomic_t  fi_ref;
+ spinlock_t  fi_lock;
  struct hlist_node       fi_hash;    /* hash by "struct inode *" */
  struct list_head        fi_stateids;
  struct list_head fi_delegations;
-- 
1.7.1