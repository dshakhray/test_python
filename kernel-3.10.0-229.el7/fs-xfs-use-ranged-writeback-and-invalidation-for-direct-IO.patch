From 8bcddeeb00638bd66b1262bf99abd8f7e11e8573 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 21:00:39 -0400
Subject: [fs] xfs: use ranged writeback and invalidation for direct IO

Message-id: <1412888441-4181-46-git-send-email-sandeen@redhat.com>
Patchwork-id: 97351
O-Subject: [RHEL7.1 PATCH 45/47] [fs] xfs: use ranged writeback and invalidation for direct IO
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit 7d4ea3ce63a6bc532abb334c469c18481798af8c
    Author: Dave Chinner <dchinner@redhat.com>
    Date:   Tue Sep 2 12:12:53 2014 +1000

    xfs: use ranged writeback and invalidation for direct IO

    Now we are not doing silly things with dirtying buffers beyond EOF
    and using invalidation correctly, we can finally reduce the ranges of
    writeback and invalidation used by direct IO to match that of the IO
    being issued.

    Bring the writeback and invalidation ranges back to match the
    generic direct IO code - this will greatly reduce the perturbation
    of cached data when direct IO and buffered IO are mixed, but still
    provide the same buffered vs direct IO coherency behaviour we
    currently have.

    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_file.c b/fs/xfs/xfs_file.c
index 08cff7a..ca62368 100644
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@ -298,7 +298,7 @@ xfs_file_aio_read(
   if (inode->i_mapping->nrpages) {
    ret = filemap_write_and_wait_range(
        VFS_I(ip)->i_mapping,
-       pos, -1);
+       pos, pos + size - 1);
    if (ret) {
     xfs_rw_iunlock(ip, XFS_IOLOCK_EXCL);
     return ret;
@@ -310,7 +310,8 @@ xfs_file_aio_read(
     * happen on XFS. Warn if it does fail.
     */
    ret = invalidate_inode_pages2_range(VFS_I(ip)->i_mapping,
-      pos >> PAGE_CACHE_SHIFT, -1);
+     pos >> PAGE_CACHE_SHIFT,
+     (pos + size - 1) >> PAGE_CACHE_SHIFT);
    WARN_ON_ONCE(ret);
    ret = 0;
   }
@@ -690,7 +691,7 @@ xfs_file_dio_aio_write(
 
  if (mapping->nrpages) {
   ret = filemap_write_and_wait_range(VFS_I(ip)->i_mapping,
-          pos, -1);
+          pos, pos + count - 1);
   if (ret)
    goto out;
   /*
@@ -699,7 +700,8 @@ xfs_file_dio_aio_write(
    * happen on XFS. Warn if it does fail.
    */
   ret = invalidate_inode_pages2_range(VFS_I(ip)->i_mapping,
-      pos >> PAGE_CACHE_SHIFT, -1);
+     pos >> PAGE_CACHE_SHIFT,
+     (pos + count - 1) >> PAGE_CACHE_SHIFT);
   WARN_ON_ONCE(ret);
   ret = 0;
  }
-- 
1.7.1