From 8443d0a31a7ae0c639105d5a79b93df87bb31f25 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Mon, 16 Jun 2014 12:55:58 -0400
Subject: [s390] sclp_early: Get rid of sclp_early_read_info_sccb_valid

Message-id: <1402923362-2331-8-git-send-email-brueckner@redhat.com>
Patchwork-id: 84035
O-Subject: [RHEL7.1 PATCH 07/11] [s390] s390/sclp_early: Get rid of sclp_early_read_info_sccb_valid
Bugzilla: 1107730
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 333cce91f384409fb6a3e656dc11e21e872c5ea2
Author: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
Date:   Thu Dec 5 18:46:51 2013 +0100

    s390/sclp_early: Get rid of sclp_early_read_info_sccb_valid

    The early sclp detect functions gather the available SCLP facility
    information. The sclp_early_read_info_sccb_valid indicates whether the
    early sclp request was valid.  However, one external reference to it
    checks for particular sclp facility bits and this should be sufficient.
    Another occurance is in the sclp_get_ipl_info() function that is called
    later.  Because all information are available at the early stage, save
    the ipl information when detecting the sclp facilities.  Hence, no more
    checks for sclp_early_read_info_sccb_valid are required.

    Signed-off-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Reviewed-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1107730
https://bugzilla.redhat.com/show_bug.cgi?id=1107730

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=333cce91f384409fb6a3e656dc11e21e872c5ea2

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7572070

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/char/sclp.h b/drivers/s390/char/sclp.h
index 6fbe096..fea76ae 100644
--- a/drivers/s390/char/sclp.h
+++ b/drivers/s390/char/sclp.h
@@ -183,7 +183,6 @@ extern unsigned long sclp_console_full;
 extern u8 sclp_fac84;
 extern unsigned long long sclp_rzm;
 extern unsigned long long sclp_rnmax;
-extern __initdata int sclp_early_read_info_sccb_valid;
 
 /* useful inlines */
 
diff --git a/drivers/s390/char/sclp_cmd.c b/drivers/s390/char/sclp_cmd.c
index f13e6ee..54f0dfc 100644
--- a/drivers/s390/char/sclp_cmd.c
+++ b/drivers/s390/char/sclp_cmd.c
@@ -455,8 +455,6 @@ static int __init sclp_detect_standby_memory(void)
 
  if (OLDMEM_BASE) /* No standby memory in kdump mode */
   return 0;
- if (!sclp_early_read_info_sccb_valid)
-  return 0;
  if ((sclp_facilities & 0xe00000000000ULL) != 0xe00000000000ULL)
   return 0;
  rc = -ENOMEM;
diff --git a/drivers/s390/char/sclp_early.c b/drivers/s390/char/sclp_early.c
index 1465e95..e4e5b32 100644
--- a/drivers/s390/char/sclp_early.c
+++ b/drivers/s390/char/sclp_early.c
@@ -38,8 +38,8 @@ struct read_info_sccb {
 static __initdata struct read_info_sccb early_read_info_sccb;
 static __initdata char sccb_early[PAGE_SIZE] __aligned(PAGE_SIZE);
 static unsigned long sclp_hsa_size;
+static struct sclp_ipl_info sclp_ipl_info;
 
-__initdata int sclp_early_read_info_sccb_valid;
 u64 sclp_facilities;
 u8 sclp_fac84;
 unsigned long long sclp_rzm;
@@ -63,10 +63,9 @@ out:
  return rc;
 }
 
-static void __init sclp_read_info_early(void)
+static int __init sclp_read_info_early(void)
 {
- int rc;
- int i;
+ int rc, i;
  struct read_info_sccb *sccb;
  sclp_cmdw_t commands[] = {SCLP_CMDW_READ_SCP_INFO_FORCED,
       SCLP_CMDW_READ_SCP_INFO};
@@ -83,21 +82,19 @@ static void __init sclp_read_info_early(void)
 
   if (rc)
    break;
-  if (sccb->header.response_code == 0x10) {
-   sclp_early_read_info_sccb_valid = 1;
-   break;
-  }
+  if (sccb->header.response_code == 0x10)
+   return 0;
   if (sccb->header.response_code != 0x1f0)
    break;
  }
+ return -EIO;
 }
 
 static void __init sclp_facilities_detect(void)
 {
  struct read_info_sccb *sccb;
 
- sclp_read_info_early();
- if (!sclp_early_read_info_sccb_valid)
+ if (sclp_read_info_early())
   return;
 
  sccb = &early_read_info_sccb;
@@ -108,6 +105,12 @@ static void __init sclp_facilities_detect(void)
  sclp_rnmax = sccb->rnmax ? sccb->rnmax : sccb->rnmax2;
  sclp_rzm = sccb->rnsize ? sccb->rnsize : sccb->rnsize2;
  sclp_rzm <<= 20;
+
+ /* Save IPL information */
+ sclp_ipl_info.is_valid = 1;
+ if (sccb->flags & 0x2)
+  sclp_ipl_info.has_dump = 1;
+ memcpy(&sclp_ipl_info.loadparm, &sccb->loadparm, LOADPARM_LEN);
 }
 
 bool __init sclp_has_linemode(void)
@@ -146,19 +149,12 @@ unsigned long long sclp_get_rzm(void)
 
 /*
  * This function will be called after sclp_facilities_detect(), which gets
- * called from early.c code. Therefore the sccb should have valid contents.
+ * called from early.c code. The sclp_facilities_detect() function retrieves
+ * and saves the IPL information.
  */
 void __init sclp_get_ipl_info(struct sclp_ipl_info *info)
 {
- struct read_info_sccb *sccb;
-
- if (!sclp_early_read_info_sccb_valid)
-  return;
- sccb = &early_read_info_sccb;
- info->is_valid = 1;
- if (sccb->flags & 0x2)
-  info->has_dump = 1;
- memcpy(&info->loadparm, &sccb->loadparm, LOADPARM_LEN);
+ *info = sclp_ipl_info;
 }
 
 static int __init sclp_cmd_early(sclp_cmdw_t cmd, void *sccb)
-- 
1.7.1