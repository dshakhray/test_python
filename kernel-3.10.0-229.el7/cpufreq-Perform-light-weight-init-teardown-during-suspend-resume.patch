From eb7ab29f0d6ea987a403d50a1c73cce5173e5f82 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:21:45 -0400
Subject: [cpufreq] Perform light-weight init/teardown during suspend/resume

Message-id: <1409235879-1283-12-git-send-email-prarit@redhat.com>
Patchwork-id: 89355
O-Subject: [RHEL7.1 PATCH BZ 1134639 011/185] cpufreq: Perform light-weight init/teardown during suspend/resume
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 5302c3fb2e62f4ca5e43e060491ba299f58c5231
Author: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
Date:   Tue Jul 30 04:25:25 2013 +0530

    cpufreq: Perform light-weight init/teardown during suspend/resume

    Now that we have the infrastructure to perform a light-weight init/tear-down,
    use that in the cpufreq CPU hotplug notifier when invoked from the
    suspend/resume path.

    This also ensures that the file permissions of the cpufreq sysfs files are
    preserved across suspend/resume, something which commit a66b2e (cpufreq:
    Preserve sysfs files across suspend/resume) originally intended to do, but
    had to be reverted due to other problems.

    Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 9e3d52a..fc5dd15 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1956,22 +1956,26 @@ static int cpufreq_cpu_callback(struct notifier_block *nfb,
 {
  unsigned int cpu = (unsigned long)hcpu;
  struct device *dev;
+ bool frozen = false;
 
  dev = get_cpu_device(cpu);
  if (dev) {
-  switch (action) {
+
+  if (action & CPU_TASKS_FROZEN)
+   frozen = true;
+
+  switch (action & ~CPU_TASKS_FROZEN) {
   case CPU_ONLINE:
-  case CPU_ONLINE_FROZEN:
-   cpufreq_add_dev(dev, NULL);
+   __cpufreq_add_dev(dev, NULL, frozen);
    cpufreq_update_policy(cpu);
    break;
+
   case CPU_DOWN_PREPARE:
-  case CPU_DOWN_PREPARE_FROZEN:
-   __cpufreq_remove_dev(dev, NULL, false);
+   __cpufreq_remove_dev(dev, NULL, frozen);
    break;
+
   case CPU_DOWN_FAILED:
-  case CPU_DOWN_FAILED_FROZEN:
-   cpufreq_add_dev(dev, NULL);
+   __cpufreq_add_dev(dev, NULL, frozen);
    break;
   }
  }
diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index 1242c4c..7c1b619 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -350,11 +350,9 @@ static int cpufreq_stat_cpu_callback(struct notifier_block *nfb,
 
  switch (action) {
  case CPU_DOWN_PREPARE:
- case CPU_DOWN_PREPARE_FROZEN:
   cpufreq_stats_free_sysfs(cpu);
   break;
  case CPU_DEAD:
- case CPU_DEAD_FROZEN:
   cpufreq_stats_free_table(cpu);
   break;
  }
-- 
1.7.1