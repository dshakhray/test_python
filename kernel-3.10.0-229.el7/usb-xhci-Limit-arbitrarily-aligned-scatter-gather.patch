From 8b94f954743c079f43c8b220b347c5da9f9066d3 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:05:30 -0400
Subject: [usb] xhci: Limit arbitrarily-aligned scatter gather

Message-id: <1410887463-20674-259-git-send-email-dzickus@redhat.com>
Patchwork-id: 95358
O-Subject: [RHEL7 PATCH 258/591] xhci 1.0: Limit arbitrarily-aligned scatter gather.
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 247bf557273dd775505fb9240d2d152f4f20d304
Author: Sarah Sharp <sarah.a.sharp@linux.intel.com>
Date:   Fri Jan 31 11:26:25 2014 -0800

    xhci 1.0: Limit arbitrarily-aligned scatter gather.

    xHCI 1.0 hosts have a set of requirements on how to align transfer
    buffers on the endpoint rings called "TD fragment" rules.  When the
    ax88179_178a driver added support for scatter gather in 3.12, with
    commit 804fad45411b48233b48003e33a78f290d227c8 "USBNET: ax88179_178a:
    enable tso if usb host supports sg dma", it broke the device under xHCI
    1.0 hosts.  Under certain network loads, the device would see an
    unexpected short packet from the host, which would cause the device to
    stop sending ethernet packets, even through USB packets would still be
    sent.

    Commit 35773dac5f86 "usb: xhci: Link TRB must not occur within a USB
    payload burst" attempted to fix this.  It was a quick hack to partially
    implement the TD fragment rules.  However, it caused regressions in the
    usb-storage layer and userspace USB drivers using libusb.  The patches
    to attempt to fix this are too far reaching into the USB core, and we
    really need to implement the TD fragment rules correctly in the xHCI
    driver, instead of continuing to wallpaper over the issues.

    Disable arbitrarily-aligned scatter-gather in the xHCI driver for 1.0
    hosts.  Only the ax88179_178a driver checks the no_sg_constraint flag,
    so don't set it for 1.0 hosts.  This should not impact usb-storage or
    usbfs behavior, since they pass down max packet sized aligned sg-list
    entries (512 for USB 2.0 and 1024 for USB 3.0).

    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
    Tested-by: Mark Lord <mlord@pobox.com>
    Cc: David Laight <David.Laight@ACULAB.COM>
    Cc: Bjorn Mork <bjorn@mork.no>
    Cc: Freddy Xin <freddy@asix.com.tw>
    Cc: Ming Lei <ming.lei@canonical.com>
    Cc: stable@vger.kernel.org # 3.12

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index ad36439..e42e077 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -4733,9 +4733,6 @@ int xhci_gen_setup(struct usb_hcd *hcd, xhci_get_quirks_t get_quirks)
  /* Limit the block layer scatter-gather lists to half a segment. */
  hcd->self.sg_tablesize = TRBS_PER_SEGMENT / 2;
 
- /* support to build packet from discontinuous buffers */
- hcd->self.no_sg_constraint = 1;
-
  /* XHCI controllers don't stop the ep queue on short packets :| */
  hcd->self.no_stop_on_short = 1;
 
@@ -4760,6 +4757,14 @@ int xhci_gen_setup(struct usb_hcd *hcd, xhci_get_quirks_t get_quirks)
   /* xHCI private pointer was set in xhci_pci_probe for the second
    * registered roothub.
    */
+  xhci = hcd_to_xhci(hcd);
+  /*
+   * Support arbitrarily aligned sg-list entries on hosts without
+   * TD fragment rules (which are currently unsupported).
+   */
+  if (xhci->hci_version < 0x100)
+   hcd->self.no_sg_constraint = 1;
+
   return 0;
  }
 
@@ -4788,6 +4793,9 @@ int xhci_gen_setup(struct usb_hcd *hcd, xhci_get_quirks_t get_quirks)
  if (xhci->hci_version > 0x96)
   xhci->quirks |= XHCI_SPURIOUS_SUCCESS;
 
+ if (xhci->hci_version < 0x100)
+  hcd->self.no_sg_constraint = 1;
+
  /* Make sure the HC is halted. */
  retval = xhci_halt(xhci);
  if (retval)
-- 
1.7.1