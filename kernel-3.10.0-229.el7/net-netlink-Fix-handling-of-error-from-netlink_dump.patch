From 34f87407e27b4339e01a89730407a7cffe669cf8 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:27:46 -0400
Subject: [net] netlink: Fix handling of error from netlink_dump()

Message-id: <9fa62d75f6ceaaef918516ed8e077973cf484573.1410528971.git.jbenc@redhat.com>
Patchwork-id: 93981
O-Subject: [RHEL7.1 net PATCH 03/14] netlink: Fix handling of error from netlink_dump().
Bugzilla: 1140661
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140661
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit ac30ef832e6af0505b6f0251a6659adcfa74975e
Author: Ben Pfaff <blp@nicira.com>
Date:   Wed Jul 9 10:31:22 2014 -0700

    netlink: Fix handling of error from netlink_dump().

    netlink_dump() returns a negative errno value on error.  Until now,
    netlink_recvmsg() directly recorded that negative value in sk->sk_err, but
    that's wrong since sk_err takes positive errno values.  (This manifests as
    userspace receiving a positive return value from the recv() system call,
    falsely indicating success.) This bug was introduced in the commit that
    started checking the netlink_dump() return value, commit b44d211 (netlink:
    handle errors from netlink_dump()).

    Multithreaded Netlink dumps are one way to trigger this behavior in
    practice, as described in the commit message for the userspace workaround
    posted here:
        http://openvswitch.org/pipermail/dev/2014-June/042339.html

    This commit also fixes the same bug in netlink_poll(), introduced in commit
    cd1df525d (netlink: add flow control for memory mapped I/O).

    Signed-off-by: Ben Pfaff <blp@nicira.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/netlink/af_netlink.c b/net/netlink/af_netlink.c
index 022b9f0..850f727 100644
--- a/net/netlink/af_netlink.c
+++ b/net/netlink/af_netlink.c
@@ -628,7 +628,7 @@ static unsigned int netlink_poll(struct file *file, struct socket *sock,
   while (nlk->cb_running && netlink_dump_space(nlk)) {
    err = netlink_dump(sk);
    if (err < 0) {
-    sk->sk_err = err;
+    sk->sk_err = -err;
     sk->sk_error_report(sk);
     break;
    }
@@ -2439,7 +2439,7 @@ static int netlink_recvmsg(struct kiocb *kiocb, struct socket *sock,
      atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf / 2) {
   ret = netlink_dump(sk);
   if (ret) {
-   sk->sk_err = ret;
+   sk->sk_err = -ret;
    sk->sk_error_report(sk);
   }
  }
-- 
1.7.1