From 01edd4c899309123cd7e2a7e82e6a2ca7fcbbce9 Mon Sep 17 00:00:00 2001
From: Maurizio Lombardi <mlombard@redhat.com>
Date: Mon, 8 Sep 2014 11:07:52 -0400
Subject: [ethernet] cnic: Replace rcu_dereference() with rcu_access_pointer()

Message-id: <1410174472-14981-18-git-send-email-mlombard@redhat.com>
Patchwork-id: 91648
O-Subject: [RHEL7.1 e-stor PATCH 17/17] cnic: Replace rcu_dereference() with rcu_access_pointer()
Bugzilla: 1089401
RH-Acked-by: Ewan Milne <emilne@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

From: Andreea-Cristina Bernat <bernat.ada@gmail.com>

The "rcu_dereference()" calls are used directly in conditions.
Since their return values are never dereferenced it is recommended to use
"rcu_access_pointer()" instead of "rcu_dereference()".
Therefore, this patch makes the replacements.

The following Coccinelle semantic patch was used:
@@
@@

(
 if(
 (<+...
- rcu_dereference
+ rcu_access_pointer
  (...)
  ...+>)) {...}
|
 while(
 (<+...
- rcu_dereference
+ rcu_access_pointer
  (...)
  ...+>)) {...}
)

Signed-off-by: Andreea-Cristina Bernat <bernat.ada@gmail.com>
Acked-by: Michael Chan <mchan@broadcom.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 270b4b3115d816a91fdb31a0c1686709eb60c3ed)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/broadcom/cnic.c b/drivers/net/ethernet/broadcom/cnic.c
index 9592ab0..d55f54c 100644
--- a/drivers/net/ethernet/broadcom/cnic.c
+++ b/drivers/net/ethernet/broadcom/cnic.c
@@ -383,7 +383,7 @@ static int cnic_iscsi_nl_msg_recv(struct cnic_dev *dev, u32 msg_type,
    break;
 
   rcu_read_lock();
-  if (!rcu_dereference(cp->ulp_ops[CNIC_ULP_L4])) {
+  if (!rcu_access_pointer(cp->ulp_ops[CNIC_ULP_L4])) {
    rc = -ENODEV;
    rcu_read_unlock();
    break;
@@ -527,7 +527,7 @@ int cnic_unregister_driver(int ulp_type)
  list_for_each_entry(dev, &cnic_dev_list, list) {
   struct cnic_local *cp = dev->cnic_priv;
 
-  if (rcu_dereference(cp->ulp_ops[ulp_type])) {
+  if (rcu_access_pointer(cp->ulp_ops[ulp_type])) {
    pr_err("%s: Type %d still has devices registered\n",
           __func__, ulp_type);
    read_unlock(&cnic_dev_lock);
@@ -575,7 +575,7 @@ static int cnic_register_device(struct cnic_dev *dev, int ulp_type,
   mutex_unlock(&cnic_lock);
   return -EAGAIN;
  }
- if (rcu_dereference(cp->ulp_ops[ulp_type])) {
+ if (rcu_access_pointer(cp->ulp_ops[ulp_type])) {
   pr_err("%s: Type %d has already been registered to this device\n",
          __func__, ulp_type);
   mutex_unlock(&cnic_lock);
-- 
1.7.1