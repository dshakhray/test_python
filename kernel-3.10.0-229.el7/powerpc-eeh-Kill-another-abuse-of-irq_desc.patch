From ef00dfb6c8ab2b413fc798955efbd5ce57b0b414 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:08:53 -0400
Subject: [powerpc] eeh: Kill another abuse of irq_desc

Message-id: <1410545655-205645-305-git-send-email-dzickus@redhat.com>
Patchwork-id: 94336
O-Subject: [RHEL7 PATCH 304/626] powerpc: Eeh: Kill another abuse of irq_desc
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit b8a9a11b976810ba12a43c4fe699a14892c97e52
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Feb 23 21:40:09 2014 +0000

    powerpc: Eeh: Kill another abuse of irq_desc

    commit 91150af3a (powerpc/eeh: Fix unbalanced enable for IRQ) is
    another brilliant example of trainwreck engineering.

    The patch "fixes" the issue of an unbalanced call to irq_enable()
    which causes a prominent warning by checking the disabled state of the
    interrupt line and call conditionally into the core code.

    This is wrong in two aspects:

    1) The warning is there to tell users, that they need to fix their
       asymetric enable/disable patterns by finding the root cause and
       solving it there.

       It's definitely not meant to work around it by conditionally
       calling into the core code depending on the random state of the irq
       line.

       Asymetric irq_disable/enable calls are a clear sign of wrong usage
       of the interfaces which have to be cured at the root and not by
       somehow hacking around it.

    2) The abuse of core internal data structure instead of using the
       proper interfaces for retrieving the information for the 'hack
       around'

       irq_desc is core internal and it's clear enough stated.

    Replace at least the irq_desc abuse with the proper functions and add
    a big fat comment why this is absurd and completely wrong.

    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Gavin Shan <shangw@linux.vnet.ibm.com>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: ppc <linuxppc-dev@lists.ozlabs.org>
    Link: http://lkml.kernel.org/r/20140223212736.562906212@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/eeh_driver.c b/arch/powerpc/kernel/eeh_driver.c
index fdc679d..3e1d7de 100644
--- a/arch/powerpc/kernel/eeh_driver.c
+++ b/arch/powerpc/kernel/eeh_driver.c
@@ -143,15 +143,31 @@ static void eeh_disable_irq(struct pci_dev *dev)
 static void eeh_enable_irq(struct pci_dev *dev)
 {
  struct eeh_dev *edev = pci_dev_to_eeh_dev(dev);
- struct irq_desc *desc;
 
  if ((edev->mode) & EEH_DEV_IRQ_DISABLED) {
   edev->mode &= ~EEH_DEV_IRQ_DISABLED;
-
-  desc = irq_to_desc(dev->irq);
-  if (desc && desc->depth > 0)
+  /*
+   * FIXME !!!!!
+   *
+   * This is just ass backwards. This maze has
+   * unbalanced irq_enable/disable calls. So instead of
+   * finding the root cause it works around the warning
+   * in the irq_enable code by conditionally calling
+   * into it.
+   *
+   * That's just wrong.The warning in the core code is
+   * there to tell people to fix their assymetries in
+   * their own code, not by abusing the core information
+   * to avoid it.
+   *
+   * I so wish that the assymetry would be the other way
+   * round and a few more irq_disable calls render that
+   * shit unusable forever.
+   *
+   * tglx
+   */
+  if (irqd_irq_disabled(irq_get_irq_data(dev->irq))
    enable_irq(dev->irq);
- }
 }
 
 /**
-- 
1.7.1