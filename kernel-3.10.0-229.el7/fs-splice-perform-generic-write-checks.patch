From 8f3c4103c43db2f6b3af6ad4297b87c44fe2e15e Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Tue, 28 Oct 2014 20:12:37 -0400
Subject: [fs] splice: perform generic write checks

Message-id: <544FF8B5.9070103@redhat.com>
Patchwork-id: 98494
O-Subject: [RHEL 7.1 PATCH] [fs] splice: perform generic write checks
Bugzilla: 1155907
RH-Acked-by: Ian Kent <ikent@redhat.com>

Bugzilla: 1155907
Upstream Status: Different solution upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8166118
Tested: Using reproducer in bug

There are no size checks in the splice IO path, so it's possible
to send a write past s_maxbytes to a filesystem.  For ext4, at
least, this ends badly, with a BUG_ON.

Upstream rearrangement of splice ended up adding a
generic_write_checks() call via

iter_file_splice_write
 write_iter
  fs_file_write_iter
   generic_write_checks

but that whole series isn't needed for RHEL, we can just fix
it by adding the check to the existing splice IO path.

Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/splice.c b/fs/splice.c
index d37431d..5938732 100644
--- a/fs/splice.c
+++ b/fs/splice.c
@@ -1098,6 +1098,7 @@ static long do_splice_from(struct pipe_inode_info *pipe, struct file *out,
 {
  ssize_t (*splice_write)(struct pipe_inode_info *, struct file *,
     loff_t *, size_t, unsigned int);
+ struct inode *inode = out->f_mapping->host;
  int ret;
 
  if (unlikely(!(out->f_mode & FMODE_WRITE)))
@@ -1110,6 +1111,10 @@ static long do_splice_from(struct pipe_inode_info *pipe, struct file *out,
  if (unlikely(ret < 0))
   return ret;
 
+ ret = generic_write_checks(out, ppos, &len, S_ISBLK(inode->i_mode));
+ if (ret)
+  return ret;
+
  if (out->f_op && out->f_op->splice_write)
   splice_write = out->f_op->splice_write;
  else
-- 
1.7.1