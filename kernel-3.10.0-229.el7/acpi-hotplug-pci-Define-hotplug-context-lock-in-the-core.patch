From e2ae0cf669ab698b17bcceae247211464d3bc47d Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 12:29:11 -0400
Subject: [acpi] hotplug/pci: Define hotplug context lock in the core

Message-id: <1411129776-21656-37-git-send-email-prarit@redhat.com>
Patchwork-id: 96355
O-Subject: [RHEL7.1 PATCH BZ 1141846 36/61] ACPI / hotplug / PCI: Define hotplug context lock in the core
Bugzilla: 1141846
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit e525506fcb67a9bbd94f01eac84af802139004eb
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Feb 4 00:43:17 2014 +0100

    ACPI / hotplug / PCI: Define hotplug context lock in the core

    Subsequent changes will require the ACPI core to acquire the lock
    protecting the ACPIPHP hotplug contexts, so move the definition of
    the lock to the core and change its name to be more generic.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Stefan Assmann <sassmann@redhat.com>
Cc: Myron Stowe <mstowe@redhat.com>
Cc: Andy Gospodarek <agospoda@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index b6d30f1..973a118 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -43,6 +43,7 @@ static DEFINE_MUTEX(acpi_scan_lock);
 static LIST_HEAD(acpi_scan_handlers_list);
 DEFINE_MUTEX(acpi_device_lock);
 LIST_HEAD(acpi_wakeup_device_list);
+static DEFINE_MUTEX(acpi_hp_context_lock);
 
 struct acpi_device_bus_id{
  char bus_id[15];
@@ -62,6 +63,16 @@ void acpi_scan_lock_release(void)
 }
 EXPORT_SYMBOL_GPL(acpi_scan_lock_release);
 
+void acpi_lock_hp_context(void)
+{
+ mutex_lock(&acpi_hp_context_lock);
+}
+
+void acpi_unlock_hp_context(void)
+{
+ mutex_unlock(&acpi_hp_context_lock);
+}
+
 int acpi_scan_add_handler(struct acpi_scan_handler *handler)
 {
  if (!handler || !handler->attach)
diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index 644ddd3..53c9303 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -58,7 +58,6 @@
 
 static LIST_HEAD(bridge_list);
 static DEFINE_MUTEX(bridge_mutex);
-static DEFINE_MUTEX(acpiphp_context_lock);
 
 static void handle_hotplug_event(acpi_handle handle, u32 type, void *data);
 static void acpiphp_sanitize_bus(struct pci_bus *bus);
@@ -75,7 +74,7 @@ static void acpiphp_context_handler(acpi_handle handle, void *context)
  * acpiphp_init_context - Create hotplug context and grab a reference to it.
  * @adev: ACPI device object to create the context for.
  *
- * Call under acpiphp_context_lock.
+ * Call under acpi_hp_context_lock.
  */
 static struct acpiphp_context *acpiphp_init_context(struct acpi_device *adev)
 {
@@ -100,7 +99,7 @@ static struct acpiphp_context *acpiphp_init_context(struct acpi_device *adev)
  * acpiphp_get_context - Get hotplug context and grab a reference to it.
  * @handle: ACPI object handle to get the context for.
  *
- * Call under acpiphp_context_lock.
+ * Call under acpi_hp_context_lock.
  */
 static struct acpiphp_context *acpiphp_get_context(acpi_handle handle)
 {
@@ -122,7 +121,7 @@ static struct acpiphp_context *acpiphp_get_context(acpi_handle handle)
  *
  * The context object is removed if there are no more references to it.
  *
- * Call under acpiphp_context_lock.
+ * Call under acpi_hp_context_lock.
  */
 static void acpiphp_put_context(struct acpiphp_context *context)
 {
@@ -151,7 +150,7 @@ static void free_bridge(struct kref *kref)
  struct acpiphp_slot *slot, *next;
  struct acpiphp_func *func, *tmp;
 
- mutex_lock(&acpiphp_context_lock);
+ acpi_lock_hp_context();
 
  bridge = container_of(kref, struct acpiphp_bridge, ref);
 
@@ -175,7 +174,7 @@ static void free_bridge(struct kref *kref)
  pci_dev_put(bridge->pci_dev);
  kfree(bridge);
 
- mutex_unlock(&acpiphp_context_lock);
+ acpi_unlock_hp_context();
 }
 
 /*
@@ -214,16 +213,16 @@ static void dock_event(acpi_handle handle, u32 type, void *data)
 {
  struct acpiphp_context *context;
 
- mutex_lock(&acpiphp_context_lock);
+ acpi_lock_hp_context();
  context = acpiphp_get_context(handle);
  if (!context || WARN_ON(context->adev->handle != handle)
      || context->func.parent->is_going_away) {
-  mutex_unlock(&acpiphp_context_lock);
+  acpi_unlock_hp_context();
   return;
  }
  get_bridge(context->func.parent);
  acpiphp_put_context(context);
- mutex_unlock(&acpiphp_context_lock);
+ acpi_unlock_hp_context();
 
  hotplug_event(type, context);
 
@@ -310,17 +309,17 @@ static acpi_status register_slot(acpi_handle handle, u32 lvl, void *data,
  device = (adr >> 16) & 0xffff;
  function = adr & 0xffff;
 
- mutex_lock(&acpiphp_context_lock);
+ acpi_lock_hp_context();
  context = acpiphp_init_context(adev);
  if (!context) {
-  mutex_unlock(&acpiphp_context_lock);
+  acpi_unlock_hp_context();
   acpi_handle_err(handle, "No hotplug context\n");
   return AE_NOT_EXIST;
  }
  newfunc = &context->func;
  newfunc->function = function;
  newfunc->parent = bridge;
- mutex_unlock(&acpiphp_context_lock);
+ acpi_unlock_hp_context();
 
  if (acpi_has_method(handle, "_EJ0"))
   newfunc->flags = FUNC_HAS_EJ0;
@@ -338,9 +337,9 @@ static acpi_status register_slot(acpi_handle handle, u32 lvl, void *data,
 
  slot = kzalloc(sizeof(struct acpiphp_slot), GFP_KERNEL);
  if (!slot) {
-  mutex_lock(&acpiphp_context_lock);
+  acpi_lock_hp_context();
   acpiphp_put_context(context);
-  mutex_unlock(&acpiphp_context_lock);
+  acpi_unlock_hp_context();
   return AE_NO_MEMORY;
  }
 
@@ -415,7 +414,7 @@ static struct acpiphp_bridge *acpiphp_handle_to_bridge(acpi_handle handle)
  struct acpiphp_context *context;
  struct acpiphp_bridge *bridge = NULL;
 
- mutex_lock(&acpiphp_context_lock);
+ acpi_lock_hp_context();
  context = acpiphp_get_context(handle);
  if (context) {
   bridge = context->bridge;
@@ -424,7 +423,7 @@ static struct acpiphp_bridge *acpiphp_handle_to_bridge(acpi_handle handle)
 
   acpiphp_put_context(context);
  }
- mutex_unlock(&acpiphp_context_lock);
+ acpi_unlock_hp_context();
  return bridge;
 }
 
@@ -458,9 +457,9 @@ static void cleanup_bridge(struct acpiphp_bridge *bridge)
  list_del(&bridge->list);
  mutex_unlock(&bridge_mutex);
 
- mutex_lock(&acpiphp_context_lock);
+ acpi_lock_hp_context();
  bridge->is_going_away = true;
- mutex_unlock(&acpiphp_context_lock);
+ acpi_unlock_hp_context();
 }
 
 /**
@@ -820,12 +819,12 @@ static void hotplug_event(u32 type, struct acpiphp_context *context)
  struct acpiphp_slot *slot = func->slot;
  struct acpiphp_bridge *bridge;
 
- mutex_lock(&acpiphp_context_lock);
+ acpi_lock_hp_context();
  bridge = context->bridge;
  if (bridge)
   get_bridge(bridge);
 
- mutex_unlock(&acpiphp_context_lock);
+ acpi_unlock_hp_context();
 
  pci_lock_rescan_remove();
 
@@ -927,7 +926,7 @@ static void handle_hotplug_event(acpi_handle handle, u32 type, void *data)
   goto out;
  }
 
- mutex_lock(&acpiphp_context_lock);
+ acpi_lock_hp_context();
  context = acpiphp_get_context(handle);
  if (!context || WARN_ON(context->adev->handle != handle)
      || context->func.parent->is_going_away)
@@ -937,13 +936,13 @@ static void handle_hotplug_event(acpi_handle handle, u32 type, void *data)
  acpiphp_put_context(context);
  status = acpi_hotplug_execute(hotplug_event_work, context, type);
  if (ACPI_SUCCESS(status)) {
-  mutex_unlock(&acpiphp_context_lock);
+  acpi_unlock_hp_context();
   return;
  }
  put_bridge(context->func.parent);
 
  err_out:
- mutex_unlock(&acpiphp_context_lock);
+ acpi_unlock_hp_context();
  ost_code = ACPI_OST_SC_NON_SPECIFIC_FAILURE;
 
  out:
@@ -999,10 +998,10 @@ void acpiphp_enumerate_slots(struct pci_bus *bus)
    * parent is going to be handled by pciehp, in which case this
    * bridge is not interesting to us either.
    */
-  mutex_lock(&acpiphp_context_lock);
+  acpi_lock_hp_context();
   context = acpiphp_get_context(handle);
   if (!context) {
-   mutex_unlock(&acpiphp_context_lock);
+   acpi_unlock_hp_context();
    put_device(&bus->dev);
    pci_dev_put(bridge->pci_dev);
    kfree(bridge);
@@ -1012,7 +1011,7 @@ void acpiphp_enumerate_slots(struct pci_bus *bus)
   context->bridge = bridge;
   /* Get a reference to the parent bridge. */
   get_bridge(context->func.parent);
-  mutex_unlock(&acpiphp_context_lock);
+  acpi_unlock_hp_context();
  }
 
  /* must be added to the list prior to calling register_slot */
diff --git a/include/acpi/acpi_bus.h b/include/acpi/acpi_bus.h
index 9d0c82e..1811567 100644
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@ -387,6 +387,8 @@ static inline int acpi_bus_generate_proc_event(struct acpi_device *device, u8 ty
 
 void acpi_scan_lock_acquire(void);
 void acpi_scan_lock_release(void);
+void acpi_lock_hp_context(void);
+void acpi_unlock_hp_context(void);
 int acpi_scan_add_handler(struct acpi_scan_handler *handler);
 int acpi_bus_register_driver(struct acpi_driver *driver);
 void acpi_bus_unregister_driver(struct acpi_driver *driver);
-- 
1.7.1