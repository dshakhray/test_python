From 5c07fb4f0d25d093619383eca6ea41103786d7c6 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Wed, 23 Jul 2014 10:50:06 -0400
Subject: [virt] virtio: fail adding buffer on broken queues

Message-id: <1406112611-9862-19-git-send-email-brueckner@redhat.com>
Patchwork-id: 86331
O-Subject: [RHEL7.1 PATCH 18/23] [virt] virtio: fail adding buffer on broken queues.
Bugzilla: 1088554
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 70670444c20a10717acdc1f4c1e420852995496d
Author: Rusty Russell <rusty@rustcorp.com.au>
Commit: Rusty Russell <rusty@rustcorp.com.au>

    virtio: fail adding buffer on broken queues.

    Heinz points out that adding buffers to a broken virtqueue (which
    should "never happen") still works.  Failing allows drivers to detect
    and complain about broken devices.

    Now drivers are robust, we can add this extra check.

    Reported-by: Heinz Graalfs <graalfs@linux.vnet.ibm.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

Bugzilla
--------
BZ 1088554
https://bugzilla.redhat.com/show_bug.cgi?id=1088554

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version v3.15-rc1
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=70670444c20a10717acdc1f4c1e420852995496d

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7725759

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/virtio/virtio_ring.c b/drivers/virtio/virtio_ring.c
index a224d64..2e6e9f3 100644
--- a/drivers/virtio/virtio_ring.c
+++ b/drivers/virtio/virtio_ring.c
@@ -204,6 +204,11 @@ static inline int virtqueue_add(struct virtqueue *_vq,
 
  BUG_ON(data == NULL);
 
+ if (unlikely(vq->broken)) {
+  END_USE(vq);
+  return -EIO;
+ }
+
 #ifdef DEBUG
  {
   ktime_t now = ktime_get();
@@ -341,7 +346,7 @@ EXPORT_SYMBOL_GPL(virtqueue_add_buf);
  * Caller must ensure we don't call this with other virtqueue operations
  * at the same time (except where noted).
  *
- * Returns zero or a negative error (ie. ENOSPC, ENOMEM).
+ * Returns zero or a negative error (ie. ENOSPC, ENOMEM, EIO).
  */
 int virtqueue_add_sgs(struct virtqueue *_vq,
         struct scatterlist *sgs[],
@@ -379,7 +384,7 @@ EXPORT_SYMBOL_GPL(virtqueue_add_sgs);
  * Caller must ensure we don't call this with other virtqueue operations
  * at the same time (except where noted).
  *
- * Returns zero or a negative error (ie. ENOSPC, ENOMEM).
+ * Returns zero or a negative error (ie. ENOSPC, ENOMEM, EIO).
  */
 int virtqueue_add_outbuf(struct virtqueue *vq,
     struct scatterlist sg[], unsigned int num,
@@ -401,7 +406,7 @@ EXPORT_SYMBOL_GPL(virtqueue_add_outbuf);
  * Caller must ensure we don't call this with other virtqueue operations
  * at the same time (except where noted).
  *
- * Returns zero or a negative error (ie. ENOSPC, ENOMEM).
+ * Returns zero or a negative error (ie. ENOSPC, ENOMEM, EIO).
  */
 int virtqueue_add_inbuf(struct virtqueue *vq,
    struct scatterlist sg[], unsigned int num,
-- 
1.7.1