From cf462b902c8c198bcffb732a8d0dfbedaf1f88cc Mon Sep 17 00:00:00 2001
From: Alex Williamson <alex.williamson@redhat.com>
Date: Tue, 22 Apr 2014 19:21:10 -0400
Subject: [ethernet] ixgbe: define IXGBE_MAX_VFS_DRV_LIMIT macro and cleanup const 63

Message-id: <20140422192110.2048.94114.stgit@virtlab400.virt.bos.redhat.com>
Patchwork-id: 79001
O-Subject: [RHEL7 kernel PATCH 1/2] ixgbe: define IXGBE_MAX_VFS_DRV_LIMIT macro and cleanup const 63
Bugzilla: 1090154
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Don Dutile <ddutile@redhat.com>

From: ethan.zhao <ethan.zhao@oracle.com>

Bugzilla: 1090154
Upstream: dcc23e3ab6e86e49a234e9def1e001722fdb48f4

Because ixgbe driver limit the max number of VF
 functions could be enabled to 63, so define one macro IXGBE_MAX_VFS_DRV_LIMIT
 and cleanup the const 63 in code.

v3: revised for net-next tree.

Signed-off-by: Ethan Zhao <ethan.kernel@gmail.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index 7aba452..4bcbac8 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -4811,7 +4811,7 @@ static int ixgbe_sw_init(struct ixgbe_adapter *adapter)
 #ifdef CONFIG_PCI_IOV
  /* assign number of SR-IOV VFs */
  if (hw->mac.type != ixgbe_mac_82598EB)
-  adapter->num_vfs = (max_vfs > 63) ? 0 : max_vfs;
+  adapter->num_vfs = (max_vfs > IXGBE_MAX_VFS_DRV_LIMIT) ? 0 : max_vfs;
 
 #endif
  /* enable itr by default in dynamic mode */
@@ -7625,7 +7625,7 @@ static int ixgbe_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
  ixgbe_init_mbx_params_pf(hw);
  memcpy(&hw->mbx.ops, ii->mbx_ops, sizeof(hw->mbx.ops));
  ixgbe_enable_sriov(adapter);
- pci_sriov_set_totalvfs(pdev, 63);
+ pci_sriov_set_totalvfs(pdev, IXGBE_MAX_VFS_DRV_LIMIT);
 skip_sriov:
 
 #endif
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
index 276d7b1..ddf4ce0 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
@@ -152,7 +152,7 @@ void ixgbe_enable_sriov(struct ixgbe_adapter *adapter)
    * physical function.  If the user requests greater thn
    * 63 VFs then it is an error - reset to default of zero.
    */
-  adapter->num_vfs = min_t(unsigned int, adapter->num_vfs, 63);
+  adapter->num_vfs = min_t(unsigned int, adapter->num_vfs, IXGBE_MAX_VFS_DRV_LIMIT);
 
   err = pci_enable_sriov(adapter->pdev, adapter->num_vfs);
   if (err) {
@@ -259,7 +259,7 @@ static int ixgbe_pci_sriov_enable(struct pci_dev *dev, int num_vfs)
   * PF.  The PCI bus driver already checks for other values out of
   * range.
   */
- if (num_vfs > 63) {
+ if (num_vfs > IXGBE_MAX_VFS_DRV_LIMIT) {
   err = -EPERM;
   goto err_out;
  }
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h
index 4713f9f..8bd2919 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h
@@ -28,6 +28,11 @@
 #ifndef _IXGBE_SRIOV_H_
 #define _IXGBE_SRIOV_H_
 
+/*  ixgbe driver limit the max number of VFs could be enabled to
+ *  63 (IXGBE_MAX_VF_FUNCTIONS - 1)
+ */
+#define IXGBE_MAX_VFS_DRV_LIMIT  (IXGBE_MAX_VF_FUNCTIONS - 1)
+
 void ixgbe_restore_vf_multicasts(struct ixgbe_adapter *adapter);
 void ixgbe_msg_task(struct ixgbe_adapter *adapter);
 int ixgbe_vf_configuration(struct pci_dev *pdev, unsigned int event_mask);
-- 
1.7.1