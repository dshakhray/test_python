From d14918c5493aeb3b136a29eb96d8076f34b23a9c Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 26 Aug 2014 14:12:15 -0400
Subject: [ethernet] igb: Cleanups to fix line length warnings

Message-id: <1409062359-13063-58-git-send-email-sassmann@redhat.com>
Patchwork-id: 89166
O-Subject: [RHEL7.1 PATCH 57/81] igb: Cleanups to fix line length warnings
Bugzilla: 1091121
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Carolyn Wyborny <carolyn.wyborny@intel.com>

This patch fixes WARNING:LONG_LINE found with checkpatch check.

Signed-off-by: Carolyn Wyborny <carolyn.wyborny@intel.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit c502ea2ea82587ad4b152dab5521869789b8ad6c)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/igb/igb_ethtool.c b/drivers/net/ethernet/intel/igb/igb_ethtool.c
index fa8e9a5..48c7882 100644
--- a/drivers/net/ethernet/intel/igb/igb_ethtool.c
+++ b/drivers/net/ethernet/intel/igb/igb_ethtool.c
@@ -1129,8 +1129,10 @@ static struct igb_reg_test reg_test_82576[] = {
  { E1000_RDBAH(4),  0x40, 12, PATTERN_TEST, 0xFFFFFFFF, 0xFFFFFFFF },
  { E1000_RDLEN(4),  0x40, 12, PATTERN_TEST, 0x000FFFF0, 0x000FFFFF },
  /* Enable all RX queues before testing. */
- { E1000_RXDCTL(0), 0x100, 4,  WRITE_NO_TEST, 0, E1000_RXDCTL_QUEUE_ENABLE },
- { E1000_RXDCTL(4), 0x40, 12,  WRITE_NO_TEST, 0, E1000_RXDCTL_QUEUE_ENABLE },
+ { E1000_RXDCTL(0), 0x100, 4, WRITE_NO_TEST, 0,
+   E1000_RXDCTL_QUEUE_ENABLE },
+ { E1000_RXDCTL(4), 0x40, 12, WRITE_NO_TEST, 0,
+   E1000_RXDCTL_QUEUE_ENABLE },
  /* RDH is read-only for 82576, only test RDT. */
  { E1000_RDT(0),    0x100, 4,  PATTERN_TEST, 0x0000FFFF, 0x0000FFFF },
  { E1000_RDT(4),    0x40, 12,  PATTERN_TEST, 0x0000FFFF, 0x0000FFFF },
@@ -1167,7 +1169,8 @@ static struct igb_reg_test reg_test_82575[] = {
  { E1000_RDBAH(0),  0x100, 4, PATTERN_TEST, 0xFFFFFFFF, 0xFFFFFFFF },
  { E1000_RDLEN(0),  0x100, 4, PATTERN_TEST, 0x000FFF80, 0x000FFFFF },
  /* Enable all four RX queues before testing. */
- { E1000_RXDCTL(0), 0x100, 4, WRITE_NO_TEST, 0, E1000_RXDCTL_QUEUE_ENABLE },
+ { E1000_RXDCTL(0), 0x100, 4, WRITE_NO_TEST, 0,
+   E1000_RXDCTL_QUEUE_ENABLE },
  /* RDH is read-only for 82575, only test RDT. */
  { E1000_RDT(0),    0x100, 4, PATTERN_TEST, 0x0000FFFF, 0x0000FFFF },
  { E1000_RXDCTL(0), 0x100, 4, WRITE_NO_TEST, 0, 0 },
@@ -1220,8 +1223,8 @@ static bool reg_set_and_check(struct igb_adapter *adapter, u64 *data,
  val = rd32(reg);
  if ((write & mask) != (val & mask)) {
   dev_err(&adapter->pdev->dev,
-   "set/check reg %04X test failed: got 0x%08X expected 0x%08X\n", reg,
-   (val & mask), (write & mask));
+   "set/check reg %04X test failed: got 0x%08X expected 0x%08X\n",
+   reg, (val & mask), (write & mask));
   *data = reg;
   return 1;
  }
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 3278c93..5595c2e 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -138,7 +138,7 @@ static void igb_watchdog(unsigned long);
 static void igb_watchdog_task(struct work_struct *);
 static netdev_tx_t igb_xmit_frame(struct sk_buff *skb, struct net_device *);
 static struct rtnl_link_stats64 *igb_get_stats64(struct net_device *dev,
-       struct rtnl_link_stats64 *stats);
+       struct rtnl_link_stats64 *stats);
 static int igb_change_mtu(struct net_device *, int);
 static int igb_set_mac(struct net_device *, void *);
 static void igb_set_uta(struct igb_adapter *adapter);
@@ -156,7 +156,8 @@ static bool igb_clean_rx_irq(struct igb_q_vector *, int);
 static int igb_ioctl(struct net_device *, struct ifreq *, int cmd);
 static void igb_tx_timeout(struct net_device *);
 static void igb_reset_task(struct work_struct *);
-static void igb_vlan_mode(struct net_device *netdev, netdev_features_t features);
+static void igb_vlan_mode(struct net_device *netdev,
+     netdev_features_t features);
 static int igb_vlan_rx_add_vid(struct net_device *, __be16, u16);
 static int igb_vlan_rx_kill_vid(struct net_device *, __be16, u16);
 static void igb_restore_vlan(struct igb_adapter *);
@@ -3388,7 +3389,8 @@ static void igb_setup_mrqc(struct igb_adapter *adapter)
 
  if (adapter->rss_indir_tbl_init != num_rx_queues) {
   for (j = 0; j < IGB_RETA_SIZE; j++)
-   adapter->rss_indir_tbl[j] = (j * num_rx_queues) / IGB_RETA_SIZE;
+   adapter->rss_indir_tbl[j] =
+   (j * num_rx_queues) / IGB_RETA_SIZE;
   adapter->rss_indir_tbl_init = num_rx_queues;
  }
  igb_write_rss_indir_tbl(adapter);
-- 
1.7.1