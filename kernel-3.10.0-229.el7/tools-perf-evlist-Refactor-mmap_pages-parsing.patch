From 4fc7033ce219ab87651412a8a63780f7a095550c Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:27:50 -0400
Subject: [tools] perf/evlist: Refactor mmap_pages parsing

Message-id: <1408462094-14194-302-git-send-email-jolsa@redhat.com>
Patchwork-id: 88239
O-Subject: [PATCH RHEL7.1 BZ1131394 301/325] perf evlist: Refactor mmap_pages parsing
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 33c2dcfdfe7f114cc656bcb4c839f5939d5e60ba
Author: David Ahern <dsahern@gmail.com>
Date: Tue Nov 12 07:46:55 2013 -0700

description
===========
Logic will be re-used for the out-pages argument for mmap based writes
in perf-record.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index fb4727d..cb19044 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -705,10 +705,9 @@ static size_t perf_evlist__mmap_size(unsigned long pages)
  return (pages + 1) * page_size;
 }
 
-int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
-      int unset __maybe_unused)
+static long parse_pages_arg(const char *str, unsigned long min,
+       unsigned long max)
 {
- unsigned int *mmap_pages = opt->value;
  unsigned long pages, val;
  static struct parse_tag tags[] = {
   { .tag  = 'B', .mult = 1       },
@@ -719,7 +718,7 @@ int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
  };
 
  if (str == NULL)
-  return -1;
+  return -EINVAL;
 
  val = parse_tag_value(str, tags);
  if (val != (unsigned long) -1) {
@@ -729,20 +728,38 @@ int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
   /* we got pages count value */
   char *eptr;
   pages = strtoul(str, &eptr, 10);
-  if (*eptr != '\0') {
-   pr_err("failed to parse --mmap_pages/-m value\n");
-   return -1;
-  }
+  if (*eptr != '\0')
+   return -EINVAL;
  }
 
- if (pages < (1UL << 31) && !is_power_of_2(pages)) {
+ if ((pages == 0) && (min == 0)) {
+  /* leave number of pages at 0 */
+ } else if (pages < (1UL << 31) && !is_power_of_2(pages)) {
+  /* round pages up to next power of 2 */
   pages = next_pow2(pages);
   pr_info("rounding mmap pages size to %lu bytes (%lu pages)\n",
    pages * page_size, pages);
  }
 
- if (pages > UINT_MAX || pages > SIZE_MAX / page_size) {
-  pr_err("--mmap_pages/-m value too big\n");
+ if (pages > max)
+  return -EINVAL;
+
+ return pages;
+}
+
+int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
+      int unset __maybe_unused)
+{
+ unsigned int *mmap_pages = opt->value;
+ unsigned long max = UINT_MAX;
+ long pages;
+
+ if (max < SIZE_MAX / page_size)
+  max = SIZE_MAX / page_size;
+
+ pages = parse_pages_arg(str, 1, max);
+ if (pages < 0) {
+  pr_err("Invalid argument for --mmap_pages/-m\n");
   return -1;
  }
 
-- 
1.7.1