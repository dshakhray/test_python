From 10981ee8f6bfce69079d33ac907c95c63d7111a7 Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:18:59 -0400
Subject: [alsa] control: Use standard printk helpers

Message-id: <140972823573-109-patchset-jkysela@redhat.com>
Patchwork-id: 90809
O-Subject: [RHEL 7.1 PATCH 108/442] ALSA: control: Use standard printk helpers
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

Use dev_err() & co as much as possible.  If not available (no device
assigned at the calling point), use pr_xxx() helpers instead.

Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: bb00945749c544670d30d9eaee2494da50af6b6e)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/core/control.c b/sound/core/control.c
index 6bc1576..f427535 100644
--- a/sound/core/control.c
+++ b/sound/core/control.c
@@ -170,7 +170,7 @@ void snd_ctl_notify(struct snd_card *card, unsigned int mask,
    ev->mask = mask;
    list_add_tail(&ev->list, &ctl->events);
   } else {
-   snd_printk(KERN_ERR "No memory available to allocate event\n");
+   dev_err(card->dev, "No memory available to allocate event\n");
   }
  _found:
   wake_up(&ctl->change_sleep);
@@ -206,7 +206,7 @@ static struct snd_kcontrol *snd_ctl_new(struct snd_kcontrol *control,
 
  kctl = kzalloc(sizeof(*kctl) + sizeof(struct snd_kcontrol_volatile) * control->count, GFP_KERNEL);
  if (kctl == NULL) {
-  snd_printk(KERN_ERR "Cannot allocate control instance\n");
+  pr_err("ALSA: Cannot allocate control instance\n");
   return NULL;
  }
  *kctl = *control;
@@ -241,9 +241,8 @@ struct snd_kcontrol *snd_ctl_new1(const struct snd_kcontrol_new *ncontrol,
  if (ncontrol->name) {
   strlcpy(kctl.id.name, ncontrol->name, sizeof(kctl.id.name));
   if (strcmp(ncontrol->name, kctl.id.name) != 0)
-   snd_printk(KERN_WARNING
-       "Control name '%s' truncated to '%s'\n",
-       ncontrol->name, kctl.id.name);
+   pr_warn("ALSA: Control name '%s' truncated to '%s'\n",
+    ncontrol->name, kctl.id.name);
  }
  kctl.id.index = ncontrol->index;
  kctl.count = ncontrol->count ? ncontrol->count : 1;
@@ -306,7 +305,7 @@ static int snd_ctl_find_hole(struct snd_card *card, unsigned int count)
  while (snd_ctl_remove_numid_conflict(card, count)) {
   if (--iter == 0) {
    /* this situation is very unlikely */
-   snd_printk(KERN_ERR "unable to allocate new control numid\n");
+   dev_err(card->dev, "unable to allocate new control numid\n");
    return -ENOMEM;
   }
  }
@@ -342,7 +341,7 @@ int snd_ctl_add(struct snd_card *card, struct snd_kcontrol *kcontrol)
  down_write(&card->controls_rwsem);
  if (snd_ctl_find_id(card, &id)) {
   up_write(&card->controls_rwsem);
-  snd_printd(KERN_ERR "control %i:%i:%i:%s:%i is already present\n",
+  dev_err(card->dev, "control %i:%i:%i:%s:%i is already present\n",
      id.iface,
      id.device,
      id.subdevice,
@@ -1411,7 +1410,7 @@ static long snd_ctl_ioctl(struct file *file, unsigned int cmd, unsigned long arg
   }
  }
  up_read(&snd_ioctl_rwsem);
- snd_printdd("unknown ioctl = 0x%x\n", cmd);
+ dev_dbg(card->dev, "unknown ioctl = 0x%x\n", cmd);
  return -ENOTTY;
 }
 
diff --git a/sound/core/control_compat.c b/sound/core/control_compat.c
index 2bb95a7..b9c0910 100644
--- a/sound/core/control_compat.c
+++ b/sound/core/control_compat.c
@@ -247,7 +247,7 @@ static int copy_ctl_value_from_user(struct snd_card *card,
  } else {
   size = get_elem_size(type, count);
   if (size < 0) {
-   printk(KERN_ERR "snd_ioctl32_ctl_elem_value: unknown type %d\n", type);
+   dev_err(card->dev, "snd_ioctl32_ctl_elem_value: unknown type %d\n", type);
    return -EINVAL;
   }
   if (copy_from_user(data->value.bytes.data,
-- 
1.7.1