From 0d21a1f5552e15ff385a2d56943b5c32c6e4a495 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:06:01 -0400
Subject: [acpi] hotplug/pci: Avoid doing too much for spurious notifies

Message-id: <20140710010601.22146.91790.stgit@gir.stowe>
Patchwork-id: 85614
O-Subject: [RHEL7.1 PATCH 075/105] ACPI / hotplug / PCI: Avoid doing too much for spurious notifies
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 2dc41281b1d1178befe4b76adf817570a7f45ec1

commit 2dc41281b1d1178befe4b76adf817570a7f45ec1
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Sep 6 15:41:32 2013 +0200

    ACPI / hotplug / PCI: Avoid doing too much for spurious notifies

    Sometimes we may get a spurious device check or bus check notify for
    a hotplug device and in those cases we should avoid doing all of the
    configuration work needed when something actually changes.  To that
    end, check the return value of pci_scan_slot() in enable_slot() and
    bail out early if it is 0.

    This turns out to help reduce the amount of diagnostic output from
    the ACPIPHP subsystem and speed up boot on at least one system that
    generates multiple device check notifies for PCIe devices on the root
    bus during boot.

    Reported-and-tested-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index b757beb..5a15dc3 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -542,12 +542,12 @@ static void __ref enable_slot(struct acpiphp_slot *slot)
  struct acpiphp_func *func;
  int max, pass;
  LIST_HEAD(add_list);
+ int nr_found;
 
  list_for_each_entry(func, &slot->funcs, sibling)
   acpiphp_bus_add(func_to_handle(func));
 
- pci_scan_slot(bus, PCI_DEVFN(slot->device, 0));
-
+ nr_found = pci_scan_slot(bus, PCI_DEVFN(slot->device, 0));
  max = acpiphp_max_busnr(bus);
  for (pass = 0; pass < 2; pass++) {
   list_for_each_entry(dev, &bus->devices, bus_list) {
@@ -566,8 +566,11 @@ static void __ref enable_slot(struct acpiphp_slot *slot)
    }
   }
  }
-
  __pci_bus_assign_resources(bus, &add_list, NULL);
+ /* Nothing more to do here if there are no new devices on this bus. */
+ if (!nr_found && (slot->flags & SLOT_ENABLED))
+  return;
+
  acpiphp_sanitize_bus(bus);
  acpiphp_set_hpp_values(bus);
  acpiphp_set_acpi_region(slot);
-- 
1.7.1