From 27ba625d80fe911b5029dc11e4b7390eda50c4de Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 11:59:45 -0400
Subject: [ethernet] mlx4: Set number of RX rings in a utility function

Message-id: <a0ce557b8e8a668ec1c84bd078cb6c4476e60cf4.1410425016.git.avadai@redhat.com>
Patchwork-id: 93602
O-Subject: [Patch RHEL7.1 V1 049/197] net/mlx4: Set number of RX rings in a utility function
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Ido Shamay <idos@mellanox.com>

mlx4_en_add() is too long.
Moving set number of RX rings to a utiltity function to improve
readability and modulization of the code.

Signed-off-by: Ido Shamay <idos@mellanox.com>
Signed-off-by: Amir Vadai <amirv@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 02512482321c531df4abf73943529f8b44d869e2)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/mellanox/mlx4/en_main.c b/drivers/net/ethernet/mellanox/mlx4/en_main.c
index d357bf5..fa2f6e7 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_main.c
@@ -274,19 +274,8 @@ static void *mlx4_en_add(struct mlx4_dev *dev)
  if (mdev->dev->caps.flags2 & MLX4_DEV_CAP_FLAG2_TS)
   mlx4_en_init_timestamp(mdev);
 
- mlx4_foreach_port(i, dev, MLX4_PORT_TYPE_ETH) {
-  if (!dev->caps.comp_pool) {
-   mdev->profile.prof[i].rx_ring_num =
-    rounddown_pow_of_two(max_t(int, MIN_RX_RINGS,
-          min_t(int,
-         dev->caps.num_comp_vectors,
-         DEF_RX_RINGS)));
-  } else {
-   mdev->profile.prof[i].rx_ring_num = rounddown_pow_of_two(
-    min_t(int, dev->caps.comp_pool/
-          dev->caps.num_ports - 1 , MAX_MSIX_P_PORT - 1));
-  }
- }
+ /* Set default number of RX rings*/
+ mlx4_en_set_num_rx_rings(mdev);
 
  /* Create our own workqueue for reset/multicast tasks
   * Note: we cannot use the shared workqueue because of deadlocks caused
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_rx.c b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
index 1e3dd02..2191b74 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
@@ -317,6 +317,28 @@ static void mlx4_en_free_rx_buf(struct mlx4_en_priv *priv,
  }
 }
 
+void mlx4_en_set_num_rx_rings(struct mlx4_en_dev *mdev)
+{
+ int i;
+ int num_of_eqs;
+ struct mlx4_dev *dev = mdev->dev;
+
+ mlx4_foreach_port(i, dev, MLX4_PORT_TYPE_ETH) {
+  if (!dev->caps.comp_pool)
+   num_of_eqs = max_t(int, MIN_RX_RINGS,
+        min_t(int,
+       dev->caps.num_comp_vectors,
+       DEF_RX_RINGS));
+  else
+   num_of_eqs = min_t(int, MAX_MSIX_P_PORT,
+        dev->caps.comp_pool/
+        dev->caps.num_ports) - 1;
+
+  mdev->profile.prof[i].rx_ring_num =
+   rounddown_pow_of_two(num_of_eqs);
+ }
+}
+
 int mlx4_en_create_rx_ring(struct mlx4_en_priv *priv,
       struct mlx4_en_rx_ring **pring,
       u32 size, u16 stride, int node)
diff --git a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
index fe7bdfe..cf2f683 100644
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
@@ -736,7 +736,7 @@ int mlx4_en_activate_tx_ring(struct mlx4_en_priv *priv,
         int cq, int user_prio);
 void mlx4_en_deactivate_tx_ring(struct mlx4_en_priv *priv,
     struct mlx4_en_tx_ring *ring);
-
+void mlx4_en_set_num_rx_rings(struct mlx4_en_dev *mdev);
 int mlx4_en_create_rx_ring(struct mlx4_en_priv *priv,
       struct mlx4_en_rx_ring **pring,
       u32 size, u16 stride, int node);
-- 
1.7.1