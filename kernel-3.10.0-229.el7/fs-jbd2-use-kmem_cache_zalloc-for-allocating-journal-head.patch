From d3c779f6643a2bc4f0a16259473d78d50c4938a5 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:52:35 -0400
Subject: [fs] jbd2: use kmem_cache_zalloc for allocating journal head

Message-id: <1414058125-4183-2-git-send-email-lczerner@redhat.com>
Patchwork-id: 98109
O-Subject: [RHEL 7.1 PATCH v2 001/171] jbd2: use kmem_cache_zalloc for allocating journal head
Bugzilla: 1150139
RH-Acked-by: Ian Kent <ikent@redhat.com>
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Zheng Liu <wenqing.lz@taobao.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 5d9cf9c6254ddc551fb51072f59dfae60e579736

 This commit tries to use kmem_cache_zalloc instead of kmem_cache_alloc/
 memset when a new journal head is alloctated.

 Signed-off-by: Zheng Liu <wenqing.lz@taobao.com>
 Cc: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/jbd2/journal.c b/fs/jbd2/journal.c
index 66b033c..e2dc994 100644
--- a/fs/jbd2/journal.c
+++ b/fs/jbd2/journal.c
@@ -2324,13 +2324,13 @@ static struct journal_head *journal_alloc_journal_head(void)
 #ifdef CONFIG_JBD2_DEBUG
  atomic_inc(&nr_journal_heads);
 #endif
- ret = kmem_cache_alloc(jbd2_journal_head_cache, GFP_NOFS);
+ ret = kmem_cache_zalloc(jbd2_journal_head_cache, GFP_NOFS);
  if (!ret) {
   jbd_debug(1, "out of memory for journal_head\n");
   pr_notice_ratelimited("ENOMEM in %s, retrying.\n", __func__);
   while (!ret) {
    yield();
-   ret = kmem_cache_alloc(jbd2_journal_head_cache, GFP_NOFS);
+   ret = kmem_cache_zalloc(jbd2_journal_head_cache, GFP_NOFS);
   }
  }
  return ret;
@@ -2392,10 +2392,8 @@ struct journal_head *jbd2_journal_add_journal_head(struct buffer_head *bh)
  struct journal_head *new_jh = NULL;
 
 repeat:
- if (!buffer_jbd(bh)) {
+ if (!buffer_jbd(bh))
   new_jh = journal_alloc_journal_head();
-  memset(new_jh, 0, sizeof(*new_jh));
- }
 
  jbd_lock_bh_journal_head(bh);
  if (buffer_jbd(bh)) {
-- 
1.7.1