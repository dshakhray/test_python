From 3a65f814ba4e97793739e91b62f89b4088cb9d86 Mon Sep 17 00:00:00 2001
From: Scott Mayhew <smayhew@redhat.com>
Date: Wed, 2 Jul 2014 19:22:51 -0400
Subject: [fs] nfs: Fix cache_validity check in nfs_write_pageuptodate()

Message-id: <1404328973-44183-2-git-send-email-smayhew@redhat.com>
Patchwork-id: 85182
O-Subject: [RHEL 7.1 PATCH 1/3] [bz1114054] nfs: Fix cache_validity check in nfs_write_pageuptodate()
Bugzilla: 1114054
RH-Acked-by: Steve Dickson <SteveD@redhat.com>
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

NFS_INO_INVALID_DATA cannot be ignored, even if we have a delegation.

We're still having some problems with data corruption when multiple
clients are appending to a file and those clients are being granted
write delegations on open.

To reproduce:

Client A:
vi /mnt/`hostname -s`
while :; do echo "XXXXXXXXXXXXXXX" >>/mnt/file; sleep $(( $RANDOM % 5 )); done

Client B:
vi /mnt/`hostname -s`
while :; do echo "YYYYYYYYYYYYYYY" >>/mnt/file; sleep $(( $RANDOM % 5 )); done

What's happening is that in nfs_update_inode() we're recognizing that
the file size has changed and we're setting NFS_INO_INVALID_DATA
accordingly, but then we ignore the cache_validity flags in
nfs_write_pageuptodate() because we have a delegation.  As a result,
in nfs_updatepage() we're extending the write to cover the full page
even though we've not read in the data to begin with.

Signed-off-by: Scott Mayhew <smayhew@redhat.com>
Cc: <stable@vger.kernel.org> # v3.11+
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 18dd78c427513fb0f89365138be66e6ee8700d1b)
Signed-off-by: Scott Mayhew <smayhew@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index 9a3b6a4..aaa16b3 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -913,12 +913,14 @@ static bool nfs_write_pageuptodate(struct page *page, struct inode *inode)
 
  if (nfs_have_delegated_attributes(inode))
   goto out;
- if (nfsi->cache_validity & (NFS_INO_INVALID_DATA|NFS_INO_REVAL_PAGECACHE))
+ if (nfsi->cache_validity & NFS_INO_REVAL_PAGECACHE)
   return false;
  smp_rmb();
  if (test_bit(NFS_INO_INVALIDATING, &nfsi->flags))
   return false;
 out:
+ if (nfsi->cache_validity & NFS_INO_INVALID_DATA)
+  return false;
  return PageUptodate(page) != 0;
 }
 
-- 
1.7.1