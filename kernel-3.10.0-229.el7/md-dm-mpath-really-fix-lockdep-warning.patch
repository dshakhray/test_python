From cc61a970c28af2de65255a3fe3cdc7491b39f874 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:35 -0400
Subject: [md] dm-mpath: really fix lockdep warning

Message-id: <1405543364-20901-32-git-send-email-snitzer@redhat.com>
Patchwork-id: 85914
O-Subject: [RHEL7.1 PATCH 31/40] dm mpath: really fix lockdep warning
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1117872

Upstream commit 63d832c30142cdceb478b1cac7d943d83b95b2dc
Author: Hannes Reinecke <hare@suse.de>
Date:   Mon May 26 14:45:39 2014 +0200

    dm mpath: really fix lockdep warning

    lockdep complains about a circular locking.  And indeed, we need to
    release the lock before calling dm_table_run_md_queue_async().

    As such, commit 4cdd2ad ("dm mpath: fix lock order inconsistency in
    multipath_ioctl") must also be reverted in addition to fixing the
    lock order in the other dm_table_run_md_queue_async() callers.

    Reported-by: Bart van Assche <bvanassche@acm.org>
    Tested-by: Bart van Assche <bvanassche@acm.org>
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-mpath.c b/drivers/md/dm-mpath.c
index e019581..ec26fce 100644
--- a/drivers/md/dm-mpath.c
+++ b/drivers/md/dm-mpath.c
@@ -437,11 +437,11 @@ static int queue_if_no_path(struct multipath *m, unsigned queue_if_no_path,
  else
   m->saved_queue_if_no_path = queue_if_no_path;
  m->queue_if_no_path = queue_if_no_path;
- if (!m->queue_if_no_path)
-  dm_table_run_md_queue_async(m->ti->table);
-
  spin_unlock_irqrestore(&m->lock, flags);
 
+ if (!queue_if_no_path)
+  dm_table_run_md_queue_async(m->ti->table);
+
  return 0;
 }
 
@@ -967,7 +967,7 @@ out:
  */
 static int reinstate_path(struct pgpath *pgpath)
 {
- int r = 0;
+ int r = 0, run_queue = 0;
  unsigned long flags;
  struct multipath *m = pgpath->pg->m;
 
@@ -991,7 +991,7 @@ static int reinstate_path(struct pgpath *pgpath)
 
  if (!m->nr_valid_paths++) {
   m->current_pgpath = NULL;
-  dm_table_run_md_queue_async(m->ti->table);
+  run_queue = 1;
  } else if (m->hw_handler_name && (m->current_pg == pgpath->pg)) {
   if (queue_work(kmpath_handlerd, &pgpath->activate_path.work))
    m->pg_init_in_progress++;
@@ -1004,6 +1004,8 @@ static int reinstate_path(struct pgpath *pgpath)
 
 out:
  spin_unlock_irqrestore(&m->lock, flags);
+ if (run_queue)
+  dm_table_run_md_queue_async(m->ti->table);
 
  return r;
 }
@@ -1564,8 +1566,8 @@ static int multipath_ioctl(struct dm_target *ti, unsigned int cmd,
   }
   if (m->pg_init_required)
    __pg_init_all_paths(m);
-  dm_table_run_md_queue_async(m->ti->table);
   spin_unlock_irqrestore(&m->lock, flags);
+  dm_table_run_md_queue_async(m->ti->table);
  }
 
  return r ? : __blkdev_driver_ioctl(bdev, mode, cmd, arg);
-- 
1.7.1