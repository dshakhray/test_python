From 8e0ce336a18284e5d88b614a6ec6740a4e8a4f39 Mon Sep 17 00:00:00 2001
From: Motohiro Kosaki <mkosaki@redhat.com>
Date: Tue, 2 Dec 2014 17:49:03 -0500
Subject: [mm] mem-hotplug: reset node present pages when hot-adding a new pgdat

Message-id: <1417542543-1642-6-git-send-email-mkosaki@redhat.com>
Patchwork-id: 101079
O-Subject: [RHEL7 PATCH 5/5] mem-hotplug: reset node present pages when hot-adding a new pgdat
Bugzilla: 1156396
RH-Acked-by: Rafael Aquini <aquini@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>

From: KOSAKI Motohiro <mkosaki@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1156396
Upstream-tree: linus
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8243943
Changes-from-upstream: none

commit 0bd854200873894a76f32603ff2c4c988ad6b5b5
Author: Tang Chen <tangchen@cn.fujitsu.com>
Date:   Thu Nov 13 15:19:41 2014 -0800

    mem-hotplug: reset node present pages when hot-adding a new pgdat

    When memory is hot-added, all the memory is in offline state.  So clear
    all zones' present_pages because they will be updated in online_pages()
    and offline_pages().  Otherwise, /proc/zoneinfo will corrupt:

    When the memory of node2 is offline:

      # cat /proc/zoneinfo
      ......
      Node 2, zone   Movable
      ......
            spanned  8388608
            present  8388608
            managed  0

    When we online memory on node2:

      # cat /proc/zoneinfo
      ......
      Node 2, zone   Movable
      ......
            spanned  8388608
            present  16777216
            managed  8388608

    Signed-off-by: Tang Chen <tangchen@cn.fujitsu.com>
    Reviewed-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Cc: <stable@vger.kernel.org> [3.16+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: KOSAKI Motohiro <mkosaki@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c
index f99fdd1..4111c99 100644
--- a/mm/memory_hotplug.c
+++ b/mm/memory_hotplug.c
@@ -1010,6 +1010,16 @@ int __ref online_pages(unsigned long pfn, unsigned long nr_pages, int online_typ
 }
 #endif /* CONFIG_MEMORY_HOTPLUG_SPARSE */
 
+static void reset_node_present_pages(pg_data_t *pgdat)
+{
+ struct zone *z;
+
+ for (z = pgdat->node_zones; z < pgdat->node_zones + MAX_NR_ZONES; z++)
+  z->present_pages = 0;
+
+ pgdat->node_present_pages = 0;
+}
+
 /* we are OK calling __meminit stuff here - we have CONFIG_MEMORY_HOTPLUG */
 static pg_data_t __ref *hotadd_new_pgdat(int nid, u64 start)
 {
@@ -1048,6 +1058,13 @@ static pg_data_t __ref *hotadd_new_pgdat(int nid, u64 start)
   */
  reset_node_managed_pages(pgdat);
 
+ /*
+  * When memory is hot-added, all the memory is in offline state. So
+  * clear all zones' present_pages because they will be updated in
+  * online_pages() and offline_pages().
+  */
+ reset_node_present_pages(pgdat);
+
  return pgdat;
 }
 
-- 
1.7.1