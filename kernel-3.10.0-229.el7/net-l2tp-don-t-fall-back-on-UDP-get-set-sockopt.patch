From 14f5082e8cf48f00e8cef8d4300bbe82d07ca951 Mon Sep 17 00:00:00 2001
From: Petr  Matousek <pmatouse@redhat.com>
Date: Mon, 14 Jul 2014 20:58:01 -0400
Subject: [net] l2tp: don't fall back on UDP [get|set]sockopt

Message-id: <20140714205800.GE7195@dhcp-25-225.brq.redhat.com>
Patchwork-id: 5195
O-Subject: [kernel team] [RHEL 7 PATCH] kernel: net: l2tp_ppp: fail when socket option level is not SOL_PPPOL2TP
Bugzilla: 1119466
CVE: CVE-2014-4943
RH-Acked-by: Oleg Nesterov <oleg@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>

CVE:  CVE-2014-4943
CVE / Top BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1119458
BZ:  https://bugzilla.redhat.com/show_bug.cgi?id=1119466
Upstream: commit 3cf521f7dc87c031617fd47e4b7aa2593c2f3daf
Brew build: https://brewweb.devel.redhat.com/taskinfo?taskID=7696347
Testing: tested using reproducer

The sockets created by pppol2tp are based on pppox_sock structure. Invoking
setsockopt()/getsockopt() over pppol2tp socket with level other than
SOL_PPPOL2TP ends up in functions that expect different socket backing --
either udp_sock or inet_sock -- and thus can result in overwriting/leaking
data in pppox_sock structure that userspace has otherwise no access to.

Fix this by failing when level is not SOL_PPPOL2TP, because this is broken
anyways.

Signed-off-by: Petr Matousek <pmatouse@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/l2tp/l2tp_ppp.c b/net/l2tp/l2tp_ppp.c
index be5fadf..ce63092 100644
--- a/net/l2tp/l2tp_ppp.c
+++ b/net/l2tp/l2tp_ppp.c
@@ -1365,7 +1365,7 @@ static int pppol2tp_setsockopt(struct socket *sock, int level, int optname,
  int err;
 
  if (level != SOL_PPPOL2TP)
-  return udp_prot.setsockopt(sk, level, optname, optval, optlen);
+  return -EINVAL;
 
  if (optlen < sizeof(int))
   return -EINVAL;
@@ -1491,7 +1491,7 @@ static int pppol2tp_getsockopt(struct socket *sock, int level, int optname,
  struct pppol2tp_session *ps;
 
  if (level != SOL_PPPOL2TP)
-  return udp_prot.getsockopt(sk, level, optname, optval, optlen);
+  return -EINVAL;
 
  if (get_user(len, optlen))
   return -EFAULT;
-- 
1.7.1