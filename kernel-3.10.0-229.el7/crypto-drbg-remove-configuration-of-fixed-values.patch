From 074b257043db9259c95b22532a047a8d534b297b Mon Sep 17 00:00:00 2001
From: Herbert Xu <herbert@gondor.apana.org.au>
Date: Mon, 15 Sep 2014 12:12:29 -0400
Subject: [crypto] drbg: remove configuration of fixed values

Message-id: <E1XTV8v-0001OI-E5@gondolin.me.apana.org.au>
Patchwork-id: 94796
O-Subject: [PATCH 1/2] crypto: drbg - remove configuration of fixed values
Bugzilla: 1138311
RH-Acked-by: Jarod Wilson <jarod@redhat.com>
RH-Acked-by: Rafael Aquini <aquini@redhat.com>

RHEL7 Bugzilla #1138311

SP800-90A mandates several hard-coded values. The old drbg_cores allows
the setting of these values per DRBG implementation. However, due to the
hard requirement of SP800-90A, these values are now returned globally
for each DRBG.

The ability to set such values per DRBG is therefore removed.

Signed-off-by: Stephan Mueller <smueller@chronox.de>
Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/crypto/drbg.c b/crypto/drbg.c
index 9c50c2d..68eee2a 100644
--- a/crypto/drbg.c
+++ b/crypto/drbg.c
@@ -117,27 +117,18 @@ static const struct drbg_core drbg_cores[] = {
  {
   .flags = DRBG_CTR | DRBG_STRENGTH128,
   .statelen = 32, /* 256 bits as defined in 10.2.1 */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 16,
   .cra_name = "ctr_aes128",
   .backend_cra_name = "ecb(aes)",
  }, {
   .flags = DRBG_CTR | DRBG_STRENGTH192,
   .statelen = 40, /* 320 bits as defined in 10.2.1 */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 16,
   .cra_name = "ctr_aes192",
   .backend_cra_name = "ecb(aes)",
  }, {
   .flags = DRBG_CTR | DRBG_STRENGTH256,
   .statelen = 48, /* 384 bits as defined in 10.2.1 */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 16,
   .cra_name = "ctr_aes256",
   .backend_cra_name = "ecb(aes)",
@@ -147,36 +138,24 @@ static const struct drbg_core drbg_cores[] = {
  {
   .flags = DRBG_HASH | DRBG_STRENGTH128,
   .statelen = 55, /* 440 bits */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 20,
   .cra_name = "sha1",
   .backend_cra_name = "sha1",
  }, {
   .flags = DRBG_HASH | DRBG_STRENGTH256,
   .statelen = 111, /* 888 bits */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 48,
   .cra_name = "sha384",
   .backend_cra_name = "sha384",
  }, {
   .flags = DRBG_HASH | DRBG_STRENGTH256,
   .statelen = 111, /* 888 bits */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 64,
   .cra_name = "sha512",
   .backend_cra_name = "sha512",
  }, {
   .flags = DRBG_HASH | DRBG_STRENGTH256,
   .statelen = 55, /* 440 bits */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 32,
   .cra_name = "sha256",
   .backend_cra_name = "sha256",
@@ -186,36 +165,24 @@ static const struct drbg_core drbg_cores[] = {
  {
   .flags = DRBG_HMAC | DRBG_STRENGTH128,
   .statelen = 20, /* block length of cipher */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 20,
   .cra_name = "hmac_sha1",
   .backend_cra_name = "hmac(sha1)",
  }, {
   .flags = DRBG_HMAC | DRBG_STRENGTH256,
   .statelen = 48, /* block length of cipher */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 48,
   .cra_name = "hmac_sha384",
   .backend_cra_name = "hmac(sha384)",
  }, {
   .flags = DRBG_HMAC | DRBG_STRENGTH256,
   .statelen = 64, /* block length of cipher */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 64,
   .cra_name = "hmac_sha512",
   .backend_cra_name = "hmac(sha512)",
  }, {
   .flags = DRBG_HMAC | DRBG_STRENGTH256,
   .statelen = 32, /* block length of cipher */
-  .max_addtllen = 35,
-  .max_bits = 19,
-  .max_req = 48,
   .blocklen_bytes = 32,
   .cra_name = "hmac_sha256",
   .backend_cra_name = "hmac(sha256)",
diff --git a/include/crypto/drbg.h b/include/crypto/drbg.h
index 07d8c46..b9be0eb 100644
--- a/include/crypto/drbg.h
+++ b/include/crypto/drbg.h
@@ -83,15 +83,6 @@ typedef uint32_t drbg_flag_t;
 struct drbg_core {
  drbg_flag_t flags; /* flags for the cipher */
  __u8 statelen;  /* maximum state length */
- /*
-  * maximum length of personalization string or additional input
-  * string -- exponent for base 2
-  */
- __u8 max_addtllen;
- /* maximum bits per RNG request -- exponent for base 2*/
- __u8 max_bits;
- /* maximum number of requests -- exponent for base 2 */
- __u8 max_req;
  __u8 blocklen_bytes; /* block size of output in bytes */
  char cra_name[CRYPTO_MAX_ALG_NAME]; /* mapping to kernel crypto API */
   /* kernel crypto API backend cipher name */
@@ -157,18 +148,20 @@ static inline __u8 drbg_keylen(struct drbg_state *drbg)
 
 static inline size_t drbg_max_request_bytes(struct drbg_state *drbg)
 {
- /* max_bits is in bits, but buflen is in bytes */
- return (1 << (drbg->core->max_bits - 3));
+ /* SP800-90A requires the limit 2**19 bits, but we return bytes */
+ return (1 << 16);
 }
 
 static inline size_t drbg_max_addtl(struct drbg_state *drbg)
 {
- return (1UL<<(drbg->core->max_addtllen));
+ /* SP800-90A requires 2**35 bytes additional info str / pers str */
+ return (1UL<<35);
 }
 
 static inline size_t drbg_max_requests(struct drbg_state *drbg)
 {
- return (1UL<<(drbg->core->max_req));
+ /* SP800-90A requires 2**48 maximum requests before reseeding */
+ return (1UL<<48);
 }
 
 /*
-- 
1.7.1