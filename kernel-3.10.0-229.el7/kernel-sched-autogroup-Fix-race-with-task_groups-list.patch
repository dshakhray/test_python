From a1ad4cf8e88c1738dde1c75064c701deb34f34aa Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Wed, 23 Jul 2014 20:15:08 -0400
Subject: [kernel] sched/autogroup: Fix race with task_groups list

Message-id: <1406146508-1294-1-git-send-email-gduarte@redhat.com>
Patchwork-id: 86359
O-Subject: [RHEL7.1 PATCH BZ 1081406] sched/autogroup: Fix race with task_groups list
Bugzilla: 1081406
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1081406
Upstream Status: 41261b6a832ea0e788627f6a8707854423f9ff49
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=7727557
Tested: IBM ran system verification tests on top of 7.0 for 72 hours without hitting this issue.
I did sanity checks on top of 7.1 and it works fine.

commit 41261b6a832ea0e788627f6a8707854423f9ff49
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Fri May 24 18:07:49 2013 +0200

    sched/autogroup: Fix race with task_groups list

    In autogroup_create(), a tg is allocated and added to the task_groups
    list. If CONFIG_RT_GROUP_SCHED is set, this tg is then modified while on
    the list, without locking. This can race with someone walking the list,
    like __enable_runtime() during CPU unplug, and result in a use-after-free
    bug.

    To fix this, move sched_online_group(), which adds the tg to the list,
    to the end of the autogroup_create() function after the modification.

    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/1369411669-46971-2-git-send-email-gerald.schaefer@de.ibm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/sched/auto_group.c b/kernel/sched/auto_group.c
index 799e4fd..90bbbab 100644
--- a/kernel/sched/auto_group.c
+++ b/kernel/sched/auto_group.c
@@ -77,8 +77,6 @@ static inline struct autogroup *autogroup_create(void)
  if (IS_ERR(tg))
   goto out_free;
 
- sched_online_group(tg, &root_task_group);
-
  kref_init(&ag->kref);
  init_rwsem(&ag->lock);
  ag->id = atomic_inc_return(&autogroup_seq_nr);
@@ -98,6 +96,7 @@ static inline struct autogroup *autogroup_create(void)
 #endif
  tg->autogroup = ag;
 
+ sched_online_group(tg, &root_task_group);
  return ag;
 
 out_free:
-- 
1.7.1