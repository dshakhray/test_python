From aab59876c0962ee62fccb856e07902e059c6c684 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:33:22 -0400
Subject: [fs] nfs: Clear the open state flags if the new stateid does not match

Message-id: <1403796815-28580-17-git-send-email-steved@redhat.com>
Patchwork-id: 84856
O-Subject: [RHEL7.1 PATCH 16/29] NFSv4: Clear the open state flags if the new stateid does not match
Bugzilla: 1111170
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

RFC3530 and RFC5661 both prescribe that the 'opaque' field of the
open stateid returned by new OPEN/OPEN_DOWNGRADE/CLOSE calls for
the same file and open owner should match.
If this is not the case, assume that the open state has been lost,
and that we need to recover it.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upsteam Id: 4f14c194a996e75c01e44a8832f1d983ccaeefc0
Bugzilla: 1111170
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4_fs.h b/fs/nfs/nfs4_fs.h
index df81fcc..e1d1bad 100644
--- a/fs/nfs/nfs4_fs.h
+++ b/fs/nfs/nfs4_fs.h
@@ -427,6 +427,7 @@ extern void nfs4_close_sync(struct nfs4_state *, fmode_t);
 extern void nfs4_state_set_mode_locked(struct nfs4_state *, fmode_t);
 extern void nfs_inode_find_state_and_recover(struct inode *inode,
   const nfs4_stateid *stateid);
+extern int nfs4_state_mark_reclaim_nograce(struct nfs_client *, struct nfs4_state *);
 extern void nfs4_schedule_lease_recovery(struct nfs_client *);
 extern int nfs4_wait_clnt_recover(struct nfs_client *clp);
 extern int nfs4_client_recover_expired_lease(struct nfs_client *clp);
diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index dea381f..397be39 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -1138,13 +1138,30 @@ static void update_open_stateflags(struct nfs4_state *state, fmode_t fmode)
  nfs4_state_set_mode_locked(state, state->state | fmode);
 }
 
+static void nfs_test_and_clear_all_open_stateid(struct nfs4_state *state)
+{
+ struct nfs_client *clp = state->owner->so_server->nfs_client;
+ bool need_recover = false;
+
+ if (test_and_clear_bit(NFS_O_RDONLY_STATE, &state->flags) && state->n_rdonly)
+  need_recover = true;
+ if (test_and_clear_bit(NFS_O_WRONLY_STATE, &state->flags) && state->n_wronly)
+  need_recover = true;
+ if (test_and_clear_bit(NFS_O_RDWR_STATE, &state->flags) && state->n_rdwr)
+  need_recover = true;
+ if (need_recover)
+  nfs4_state_mark_reclaim_nograce(clp, state);
+}
+
 static bool nfs_need_update_open_stateid(struct nfs4_state *state,
   nfs4_stateid *stateid)
 {
  if (test_and_set_bit(NFS_OPEN_STATE, &state->flags) == 0)
   return true;
- if (!nfs4_stateid_match_other(stateid, &state->open_stateid))
+ if (!nfs4_stateid_match_other(stateid, &state->open_stateid)) {
+  nfs_test_and_clear_all_open_stateid(state);
   return true;
+ }
  if (nfs4_stateid_is_newer(stateid, &state->open_stateid))
   return true;
  return false;
@@ -1180,6 +1197,8 @@ static void nfs_clear_open_stateid(struct nfs4_state *state, nfs4_stateid *state
  write_seqlock(&state->seqlock);
  nfs_clear_open_stateid_locked(state, stateid, fmode);
  write_sequnlock(&state->seqlock);
+ if (test_bit(NFS_STATE_RECLAIM_NOGRACE, &state->flags))
+  nfs4_schedule_state_manager(state->owner->so_server->nfs_client);
 }
 
 static void nfs_set_open_stateid_locked(struct nfs4_state *state, nfs4_stateid *stateid, fmode_t fmode)
@@ -1256,6 +1275,8 @@ no_delegation:
   __update_open_stateid(state, open_stateid, NULL, fmode);
   ret = 1;
  }
+ if (test_bit(NFS_STATE_RECLAIM_NOGRACE, &state->flags))
+  nfs4_schedule_state_manager(state->owner->so_server->nfs_client);
 
  return ret;
 }
@@ -1489,12 +1510,15 @@ static int nfs4_open_recover(struct nfs4_opendata *opendata, struct nfs4_state *
  struct nfs4_state *newstate;
  int ret;
 
+ /* Don't trigger recovery in nfs_test_and_clear_all_open_stateid */
+ clear_bit(NFS_O_RDWR_STATE, &state->flags);
+ clear_bit(NFS_O_WRONLY_STATE, &state->flags);
+ clear_bit(NFS_O_RDONLY_STATE, &state->flags);
  /* memory barrier prior to reading state->n_* */
  clear_bit(NFS_DELEGATED_STATE, &state->flags);
  clear_bit(NFS_OPEN_STATE, &state->flags);
  smp_rmb();
  if (state->n_rdwr != 0) {
-  clear_bit(NFS_O_RDWR_STATE, &state->flags);
   ret = nfs4_open_recover_helper(opendata, FMODE_READ|FMODE_WRITE, &newstate);
   if (ret != 0)
    return ret;
@@ -1502,7 +1526,6 @@ static int nfs4_open_recover(struct nfs4_opendata *opendata, struct nfs4_state *
    return -ESTALE;
  }
  if (state->n_wronly != 0) {
-  clear_bit(NFS_O_WRONLY_STATE, &state->flags);
   ret = nfs4_open_recover_helper(opendata, FMODE_WRITE, &newstate);
   if (ret != 0)
    return ret;
@@ -1510,7 +1533,6 @@ static int nfs4_open_recover(struct nfs4_opendata *opendata, struct nfs4_state *
    return -ESTALE;
  }
  if (state->n_rdonly != 0) {
-  clear_bit(NFS_O_RDONLY_STATE, &state->flags);
   ret = nfs4_open_recover_helper(opendata, FMODE_READ, &newstate);
   if (ret != 0)
    return ret;
diff --git a/fs/nfs/nfs4state.c b/fs/nfs/nfs4state.c
index c8d1b9d..2cbe696 100644
--- a/fs/nfs/nfs4state.c
+++ b/fs/nfs/nfs4state.c
@@ -1316,7 +1316,7 @@ static int nfs4_state_mark_reclaim_reboot(struct nfs_client *clp, struct nfs4_st
  return 1;
 }
 
-static int nfs4_state_mark_reclaim_nograce(struct nfs_client *clp, struct nfs4_state *state)
+int nfs4_state_mark_reclaim_nograce(struct nfs_client *clp, struct nfs4_state *state)
 {
  set_bit(NFS_STATE_RECLAIM_NOGRACE, &state->flags);
  clear_bit(NFS_STATE_RECLAIM_REBOOT, &state->flags);
-- 
1.7.1