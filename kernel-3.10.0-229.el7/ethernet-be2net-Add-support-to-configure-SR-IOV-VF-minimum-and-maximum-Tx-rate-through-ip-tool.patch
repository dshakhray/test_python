From 37aac961280134fcd30203f50d0291d63790c4aa Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 16:13:56 -0400
Subject: [ethernet] be2net: Add support to configure SR-IOV VF minimum and maximum Tx rate through ip tool

Message-id: <1410192881-30702-34-git-send-email-ivecera@redhat.com>
Patchwork-id: 92426
O-Subject: [RHEL7.1 PATCH 33/78] net-next:v4: Add support to configure SR-IOV VF minimum and maximum Tx rate through ip tool.
Bugzilla: 1088575
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>

BZ: #1088575

Backport note:
Only be2net part of the commit. The commit was modified as the RHEL7 does
not support setting of minimum and maximum. The commit itself helps with
backporting of later patches.

Upstream commit(s):
commit ed616689a3d95eb6c9bdbb1ef74b0f50cbdf276a
Author: Sucheta Chakraborty <sucheta.chakraborty@qlogic.com>
Date:   Thu May 22 09:59:05 2014 -0400

    net-next:v4: Add support to configure SR-IOV VF minimum and maximum Tx rate through ip tool.

    o min_tx_rate puts lower limit on the VF bandwidth. VF is guaranteed
      to have a bandwidth of at least this value.
      max_tx_rate puts cap on the VF bandwidth. VF can have a bandwidth
      of up to this value.

    o A new handler set_vf_rate for attr IFLA_VF_RATE has been introduced
      which takes 4 arguments:
      netdev, VF number, min_tx_rate, max_tx_rate

    o ndo_set_vf_rate replaces ndo_set_vf_tx_rate handler.

    o Drivers that currently implement ndo_set_vf_tx_rate should now call
      ndo_set_vf_rate instead and reject attempt to set a minimum bandwidth
      greater than 0 for IFLA_VF_TX_RATE when IFLA_VF_RATE is not yet
      implemented by driver.

    o If user enters only one of either min_tx_rate or max_tx_rate, then,
      userland should read back the other value from driver and set both
      for IFLA_VF_RATE.
      Drivers that have not yet implemented IFLA_VF_RATE should always
      return min_tx_rate as 0 when read from ip tool.

    o If both IFLA_VF_TX_RATE and IFLA_VF_RATE options are specified, then
      IFLA_VF_RATE should override.

    o Idea is to have consistent display of rate values to user.

    o Usage example: -

      ./ip link set p4p1 vf 0 rate 900

      ./ip link show p4p1
      32: p4p1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode
      DEFAULT qlen 1000
        link/ether 00:0e:1e:08:b0:f0 brd ff:ff:ff:ff:ff:ff
        vf 0 MAC 3e:a0:ca:bd:ae:5a, tx rate 900 (Mbps), max_tx_rate 900Mbps
        vf 1 MAC f6:c6:7c:3f:3d:6c
        vf 2 MAC 56:32:43:98:d7:71
        vf 3 MAC d6:be:c3:b5:85:ff
        vf 4 MAC ee:a9:9a:1e:19:14
        vf 5 MAC 4a:d0:4c:07:52:18
        vf 6 MAC 3a:76:44:93:62:f9
        vf 7 MAC 82:e9:e7:e3:15:1a

      ./ip link set p4p1 vf 0 max_tx_rate 300 min_tx_rate 200

      ./ip link show p4p1
      32: p4p1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode
      DEFAULT qlen 1000
        link/ether 00:0e:1e:08:b0:f0 brd ff:ff:ff:ff:ff:ff
        vf 0 MAC 3e:a0:ca:bd:ae:5a, tx rate 300 (Mbps), max_tx_rate 300Mbps,
        min_tx_rate 200Mbps
        vf 1 MAC f6:c6:7c:3f:3d:6c
        vf 2 MAC 56:32:43:98:d7:71
        vf 3 MAC d6:be:c3:b5:85:ff
        vf 4 MAC ee:a9:9a:1e:19:14
        vf 5 MAC 4a:d0:4c:07:52:18
        vf 6 MAC 3a:76:44:93:62:f9
        vf 7 MAC 82:e9:e7:e3:15:1a

      ./ip link set p4p1 vf 0 max_tx_rate 600 rate 300

      ./ip link show p4p1
      32: p4p1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode
      DEFAULT qlen 1000
        link/ether 00:0e:1e:08:b0:f brd ff:ff:ff:ff:ff:ff
        vf 0 MAC 3e:a0:ca:bd:ae:5, tx rate 600 (Mbps), max_tx_rate 600Mbps,
        min_tx_rate 200Mbps
        vf 1 MAC f6:c6:7c:3f:3d:6c
        vf 2 MAC 56:32:43:98:d7:71
        vf 3 MAC d6:be:c3:b5:85:ff
        vf 4 MAC ee:a9:9a:1e:19:14
        vf 5 MAC 4a:d0:4c:07:52:18
        vf 6 MAC 3a:76:44:93:62:f9
        vf 7 MAC 82:e9:e7:e3:15:1a

    Signed-off-by: Sucheta Chakraborty <sucheta.chakraborty@qlogic.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/emulex/benet/be_main.c b/drivers/net/ethernet/emulex/benet/be_main.c
index 36634ec..a8121a6 100644
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -1342,7 +1342,8 @@ static int be_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos)
  return status;
 }
 
-static int be_set_vf_tx_rate(struct net_device *netdev, int vf, int rate)
+static int be_set_vf_tx_rate(struct net_device *netdev, int vf,
+        int max_tx_rate)
 {
  struct be_adapter *adapter = netdev_priv(netdev);
  int status = 0;
@@ -1353,18 +1354,18 @@ static int be_set_vf_tx_rate(struct net_device *netdev, int vf, int rate)
  if (vf >= adapter->num_vfs)
   return -EINVAL;
 
- if (rate < 100 || rate > 10000) {
+ if (max_tx_rate < 100 || max_tx_rate > 10000) {
   dev_err(&adapter->pdev->dev,
-   "tx rate must be between 100 and 10000 Mbps\n");
+   "max tx rate must be between 100 and 10000 Mbps\n");
   return -EINVAL;
  }
 
- status = be_cmd_config_qos(adapter, rate / 10, vf + 1);
+ status = be_cmd_config_qos(adapter, max_tx_rate / 10, vf + 1);
  if (status)
   dev_err(&adapter->pdev->dev,
-   "tx rate %d on VF %d failed\n", rate, vf);
+   "max tx rate %d on VF %d failed\n", max_tx_rate, vf);
  else
-  adapter->vf_cfg[vf].tx_rate = rate;
+  adapter->vf_cfg[vf].tx_rate = max_tx_rate;
  return status;
 }
 static int be_set_vf_link_state(struct net_device *netdev, int vf,
-- 
1.7.1