From c07dd2d267f5e7c9d14afd4e563c068654efad7f Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sat, 19 Jul 2014 04:23:59 -0400
Subject: [pci] aer: Ignore non-PCIe AER error sources in aer_hest_parse()

Message-id: <20140719042359.19438.99249.stgit@gir.stowe>
Patchwork-id: 85974
O-Subject: [RHEL7.1 PATCH 12/81] PCI/AER: Ignore non-PCIe AER error sources in aer_hest_parse()
Bugzilla: 1110895
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110895
Upstream Status: 8e7f8d0b30d4e3e30007b10eb2916d970b5f8c93

commit 8e7f8d0b30d4e3e30007b10eb2916d970b5f8c93
Author: Betty Dall <betty.dall@hp.com>
Date:   Fri Dec 13 08:23:16 2013 -0700

    PCI/AER: Ignore non-PCIe AER error sources in aer_hest_parse()

    aer_set_firmware_first() searches the HEST for an error source descriptor
    matching the specified PCI device.  It uses the apei_hest_parse() iterator
    to call aer_hest_parse() for every descriptor in the HEST.

    Previously, aer_hest_parse() incorrectly assumed every descriptor was for a
    PCIe error source.  This patch adds a check to avoid that error.

    [bhelgaas: factor check into helper, use in aer_hest_parse_aff(), changelog]
    Signed-off-by: Betty Dall <betty.dall@hp.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/pcie/aer/aerdrv_acpi.c b/drivers/pci/pcie/aer/aerdrv_acpi.c
index cf611ab..a239957 100644
--- a/drivers/pci/pcie/aer/aerdrv_acpi.c
+++ b/drivers/pci/pcie/aer/aerdrv_acpi.c
@@ -50,12 +50,24 @@ struct aer_hest_parse_info {
  int firmware_first;
 };
 
+static int hest_source_is_pcie_aer(struct acpi_hest_header *hest_hdr)
+{
+ if (hest_hdr->type == ACPI_HEST_TYPE_AER_ROOT_PORT ||
+     hest_hdr->type == ACPI_HEST_TYPE_AER_ENDPOINT ||
+     hest_hdr->type == ACPI_HEST_TYPE_AER_BRIDGE)
+  return 1;
+ return 0;
+}
+
 static int aer_hest_parse(struct acpi_hest_header *hest_hdr, void *data)
 {
  struct aer_hest_parse_info *info = data;
  struct acpi_hest_aer_common *p;
  int ff;
 
+ if (!hest_source_is_pcie_aer(hest_hdr))
+  return 0;
+
  p = (struct acpi_hest_aer_common *)(hest_hdr + 1);
  ff = !!(p->flags & ACPI_HEST_FIRMWARE_FIRST);
  if (p->flags & ACPI_HEST_GLOBAL) {
@@ -104,15 +116,12 @@ static int aer_hest_parse_aff(struct acpi_hest_header *hest_hdr, void *data)
  if (aer_firmware_first)
   return 0;
 
- switch (hest_hdr->type) {
- case ACPI_HEST_TYPE_AER_ROOT_PORT:
- case ACPI_HEST_TYPE_AER_ENDPOINT:
- case ACPI_HEST_TYPE_AER_BRIDGE:
-  p = (struct acpi_hest_aer_common *)(hest_hdr + 1);
-  aer_firmware_first = !!(p->flags & ACPI_HEST_FIRMWARE_FIRST);
- default:
+ if (!hest_source_is_pcie_aer(hest_hdr))
   return 0;
- }
+
+ p = (struct acpi_hest_aer_common *)(hest_hdr + 1);
+ aer_firmware_first = !!(p->flags & ACPI_HEST_FIRMWARE_FIRST);
+ return 0;
 }
 
 /**
-- 
1.7.1