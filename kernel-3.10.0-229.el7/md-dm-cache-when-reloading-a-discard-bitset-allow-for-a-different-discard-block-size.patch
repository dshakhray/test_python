From 47286bee33391a732e8b77e9395a40973e4f43fd Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 28 Nov 2014 16:18:33 -0500
Subject: [md] dm-cache: when reloading a discard bitset allow for a different discard block size

Message-id: <1417191518-16689-5-git-send-email-snitzer@redhat.com>
Patchwork-id: 101007
O-Subject: [RHEL7.1 PATCH 4/9] dm cache: when reloading a discard bitset allow for a different discard block size
Bugzilla: 1165050
RH-Acked-by: Joe Thornber <thornber@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1165050

Upstream linux-dm.git commit 240f6a8f0b4373083be397693d38cbc08ddc6840
Author: Joe Thornber <ejt@redhat.com>
Date:   Mon Nov 24 14:06:22 2014 +0000

    dm cache: when reloading a discard bitset allow for a different discard block size

    The discard block size can change if the origin changes size or if an
    old DM cache is upgraded from using a discard block size that was equal
    to cache block size.

    To fix this an extent of discarded blocks is established for the purpose
    of translating the old discard block size to the new in-core discard
    block size and set bits.  The old (potentially huge) discard bitset is
    left ondisk until it is re-written using the new in-core information on
    the next successful DM cache shutdown.

    Fixes: 7ae34e777896 ("dm cache: improve discard support")
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-cache-target.c b/drivers/md/dm-cache-target.c
index 51c68ad..710ef63 100644
--- a/drivers/md/dm-cache-target.c
+++ b/drivers/md/dm-cache-target.c
@@ -2811,17 +2811,86 @@ static int load_mapping(void *context, dm_oblock_t oblock, dm_cblock_t cblock,
  return 0;
 }
 
+/*
+ * The discard block size in the on disk metadata is not
+ * neccessarily the same as we're currently using.  So we have to
+ * be careful to only set the discarded attribute if we know it
+ * covers a complete block of the new size.
+ */
+struct discard_load_info {
+ struct cache *cache;
+
+ /*
+  * These blocks are sized using the on disk dblock size, rather
+  * than the current one.
+  */
+ dm_block_t block_size;
+ dm_block_t discard_begin, discard_end;
+};
+
+static void discard_load_info_init(struct cache *cache,
+       struct discard_load_info *li)
+{
+ li->cache = cache;
+ li->discard_begin = li->discard_end = 0;
+}
+
+static void set_discard_range(struct discard_load_info *li)
+{
+ sector_t b, e;
+
+ if (li->discard_begin == li->discard_end)
+  return;
+
+ /*
+  * Convert to sectors.
+  */
+ b = li->discard_begin * li->block_size;
+ e = li->discard_end * li->block_size;
+
+ /*
+  * Then convert back to the current dblock size.
+  */
+ b = dm_sector_div_up(b, li->cache->discard_block_size);
+ sector_div(e, li->cache->discard_block_size);
+
+ /*
+  * The origin may have shrunk, so we need to check we're still in
+  * bounds.
+  */
+ if (e > from_dblock(li->cache->discard_nr_blocks))
+  e = from_dblock(li->cache->discard_nr_blocks);
+
+ for (; b < e; b++)
+  set_discard(li->cache, to_dblock(b));
+}
+
 static int load_discard(void *context, sector_t discard_block_size,
    dm_dblock_t dblock, bool discard)
 {
- struct cache *cache = context;
+ struct discard_load_info *li = context;
 
- /* FIXME: handle mis-matched block size */
+ li->block_size = discard_block_size;
 
- if (discard)
-  set_discard(cache, dblock);
- else
-  clear_discard(cache, dblock);
+ if (discard) {
+  if (from_dblock(dblock) == li->discard_end)
+   /*
+    * We're already in a discard range, just extend it.
+    */
+   li->discard_end = li->discard_end + 1ULL;
+
+  else {
+   /*
+    * Emit the old range and start a new one.
+    */
+   set_discard_range(li);
+   li->discard_begin = from_dblock(dblock);
+   li->discard_end = li->discard_begin + 1ULL;
+  }
+ } else {
+  set_discard_range(li);
+  li->discard_begin = li->discard_end = 0;
+ }
 
  return 0;
 }
@@ -2905,11 +2974,22 @@ static int cache_preresume(struct dm_target *ti)
  }
 
  if (!cache->loaded_discards) {
-  r = dm_cache_load_discards(cache->cmd, load_discard, cache);
+  struct discard_load_info li;
+
+  /*
+   * The discard bitset could have been resized, or the
+   * discard block size changed.  To be safe we start by
+   * setting every dblock to not discarded.
+   */
+  clear_bitset(cache->discard_bitset, from_dblock(cache->discard_nr_blocks));
+
+  discard_load_info_init(cache, &li);
+  r = dm_cache_load_discards(cache->cmd, load_discard, &li);
   if (r) {
    DMERR("could not load origin discards");
    return r;
   }
+  set_discard_range(&li);
 
   cache->loaded_discards = true;
  }
-- 
1.7.1