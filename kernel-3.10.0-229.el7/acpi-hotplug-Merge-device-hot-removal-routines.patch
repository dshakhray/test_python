From 125a4eeca71e5c4d65a359a468a142e1866e68a1 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:08:11 -0400
Subject: [acpi] hotplug: Merge device hot-removal routines

Message-id: <20140710010811.22146.4379.stgit@gir.stowe>
Patchwork-id: 85635
O-Subject: [RHEL7.1 PATCH 096/105] ACPI / hotplug: Merge device hot-removal routines
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: a3b1b1ef78cd2ffb5d3a223465064dee05929dc3

commit a3b1b1ef78cd2ffb5d3a223465064dee05929dc3
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Nov 7 01:41:58 2013 +0100

    ACPI / hotplug: Merge device hot-removal routines

    There is no real reasn why acpi_bus_device_eject() and
    acpi_bus_hot_remove_device() should work differently, so rework
    acpi_bus_device_eject() so that it can be called internally by
    both acpi_bus_hot_remove_device() and acpi_eject_store_work().
    Accordingly, rework acpi_hotplug_notify_cb() to queue up the
    execution of acpi_bus_hot_remove_device() through
    acpi_os_hotplug_execute() on eject request notifications.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index caae5d3..18c7995 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -285,10 +285,9 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
  return 0;
 }
 
-static void acpi_bus_device_eject(void *context)
+static void acpi_bus_device_eject(struct acpi_device *device, u32 ost_src)
 {
- acpi_handle handle = context;
- struct acpi_device *device = NULL;
+ acpi_handle handle = device->handle;
  struct acpi_scan_handler *handler;
  u32 ost_code = ACPI_OST_SC_NON_SPECIFIC_FAILURE;
  int error;
@@ -296,20 +295,19 @@ static void acpi_bus_device_eject(void *context)
  lock_device_hotplug();
  mutex_lock(&acpi_scan_lock);
 
- acpi_bus_get_device(handle, &device);
- if (!device)
-  goto err_out;
-
  handler = device->handler;
- if (!handler || !handler->hotplug.enabled)
+ if (!handler || !handler->hotplug.enabled) {
+  put_device(&device->dev);
   goto err_support;
+ }
+
+ if (ost_src == ACPI_NOTIFY_EJECT_REQUEST)
+  acpi_evaluate_hotplug_ost(handle, ACPI_NOTIFY_EJECT_REQUEST,
+       ACPI_OST_SC_EJECT_IN_PROGRESS, NULL);
 
- acpi_evaluate_hotplug_ost(handle, ACPI_NOTIFY_EJECT_REQUEST,
-      ACPI_OST_SC_EJECT_IN_PROGRESS, NULL);
  if (handler->hotplug.mode == AHM_CONTAINER)
   kobject_uevent(&device->dev.kobj, KOBJ_OFFLINE);
 
- get_device(&device->dev);
  error = acpi_scan_hot_remove(device);
  if (error == -EPERM) {
   goto err_support;
@@ -325,8 +323,7 @@ static void acpi_bus_device_eject(void *context)
  err_support:
  ost_code = ACPI_OST_SC_EJECT_NOT_SUPPORTED;
  err_out:
- acpi_evaluate_hotplug_ost(handle, ACPI_NOTIFY_EJECT_REQUEST, ost_code,
-      NULL);
+ acpi_evaluate_hotplug_ost(handle, ost_src, ost_code, NULL);
  goto out;
 }
 
@@ -408,10 +405,20 @@ static void acpi_hotplug_unsupported(acpi_handle handle, u32 type)
  acpi_evaluate_hotplug_ost(handle, type, ost_status, NULL);
 }
 
+/**
+ * acpi_bus_hot_remove_device: Hot-remove a device and its children.
+ * @context: Address of the ACPI device object to hot-remove.
+ */
+void acpi_bus_hot_remove_device(void *context)
+{
+ acpi_bus_device_eject(context, ACPI_NOTIFY_EJECT_REQUEST);
+}
+
 static void acpi_hotplug_notify_cb(acpi_handle handle, u32 type, void *data)
 {
  acpi_osd_exec_callback callback;
  struct acpi_scan_handler *handler = data;
+ struct acpi_device *adev;
  acpi_status status;
 
  if (!handler->hotplug.enabled)
@@ -428,44 +435,29 @@ static void acpi_hotplug_notify_cb(acpi_handle handle, u32 type, void *data)
   break;
  case ACPI_NOTIFY_EJECT_REQUEST:
   acpi_handle_debug(handle, "ACPI_NOTIFY_EJECT_REQUEST event\n");
-  callback = acpi_bus_device_eject;
-  break;
+  status = acpi_bus_get_device(handle, &adev);
+  if (ACPI_FAILURE(status))
+   goto err_out;
+
+  get_device(&adev->dev);
+  callback = acpi_bus_hot_remove_device;
+  status = acpi_os_hotplug_execute(callback, adev);
+  if (ACPI_SUCCESS(status))
+   return;
+
+  put_device(&adev->dev);
+  goto err_out;
  default:
   /* non-hotplug event; possibly handled by other handler */
   return;
  }
  status = acpi_os_hotplug_execute(callback, handle);
- if (ACPI_FAILURE(status))
-  acpi_evaluate_hotplug_ost(handle, type,
-       ACPI_OST_SC_NON_SPECIFIC_FAILURE,
-       NULL);
-}
-
-void __acpi_bus_hot_remove_device(struct acpi_device *device, u32 ost_src)
-{
- acpi_handle handle = device->handle;
- int error;
-
- lock_device_hotplug();
- mutex_lock(&acpi_scan_lock);
-
- error = acpi_scan_hot_remove(device);
- if (error && handle)
-  acpi_evaluate_hotplug_ost(handle, ost_src,
-       ACPI_OST_SC_NON_SPECIFIC_FAILURE,
-       NULL);
-
- mutex_unlock(&acpi_scan_lock);
- unlock_device_hotplug();
-}
+ if (ACPI_SUCCESS(status))
+  return;
 
-/**
- * acpi_bus_hot_remove_device: Hot-remove a device and its children.
- * @context: Address of the ACPI device object to hot-remove.
- */
-void acpi_bus_hot_remove_device(void *context)
-{
- __acpi_bus_hot_remove_device(context, ACPI_NOTIFY_EJECT_REQUEST);
+ err_out:
+ acpi_evaluate_hotplug_ost(handle, type,
+      ACPI_OST_SC_NON_SPECIFIC_FAILURE, NULL);
 }
 
 static ssize_t real_power_state_show(struct device *dev,
@@ -496,7 +488,7 @@ static DEVICE_ATTR(power_state, 0444, power_state_show, NULL);
 
 static void acpi_eject_store_work(void *context)
 {
- __acpi_bus_hot_remove_device(context, ACPI_OST_EC_OSPM_EJECT);
+ acpi_bus_device_eject(context, ACPI_OST_EC_OSPM_EJECT);
 }
 
 static ssize_t
-- 
1.7.1