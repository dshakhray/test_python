From efa356770a70f7ac3f0244dc4bcce0b122e7586b Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:25:51 -0400
Subject: [alsa] hda: Keep pointer to bdl_pos_fix in chip struct

Message-id: <140972823573-203-patchset-jkysela@redhat.com>
Patchwork-id: 90903
O-Subject: [RHEL 7.1 PATCH 202/442] ALSA: hda - Keep pointer to bdl_pos_fix in chip struct
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

This will allow for a platform hda driver to use it as well.  It
removes the dependency on the module param from hda_intel, which will
allow for azx_setup_periods to be shared.

Signed-off-by: Dylan Reid <dgreid@chromium.org>
Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: 9cdc0115e444108cfa7339386eee46ed2c84a2eb)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/pci/hda/hda_intel.c b/sound/pci/hda/hda_intel.c
index cbf0fb8..09fdfbe 100644
--- a/sound/pci/hda/hda_intel.c
+++ b/sound/pci/hda/hda_intel.c
@@ -1147,7 +1147,7 @@ static int azx_setup_periods(struct azx *chip,
 {
  u32 *bdl;
  int i, ofs, periods, period_bytes;
- int pos_adj;
+ int pos_adj = 0;
 
  /* reset BDL address */
  azx_sd_writel(chip, azx_dev, SD_BDLPL, 0);
@@ -1160,7 +1160,9 @@ static int azx_setup_periods(struct azx *chip,
  bdl = (u32 *)azx_dev->bdl.area;
  ofs = 0;
  azx_dev->frags = 0;
- pos_adj = bdl_pos_adj[chip->dev_index];
+
+ if (chip->bdl_pos_adj)
+  pos_adj = chip->bdl_pos_adj[chip->dev_index];
  if (!azx_dev->no_period_wakeup && pos_adj > 0) {
   struct snd_pcm_runtime *runtime = substream->runtime;
   int pos_align = pos_adj;
@@ -1173,7 +1175,7 @@ static int azx_setup_periods(struct azx *chip,
   pos_adj = frames_to_bytes(runtime, pos_adj);
   if (pos_adj >= period_bytes) {
    dev_warn(chip->card->dev,"Too big adjustment %d\n",
-     bdl_pos_adj[chip->dev_index]);
+     pos_adj);
    pos_adj = 0;
   } else {
    ofs = setup_bdle(chip, snd_pcm_get_dma_buf(substream),
@@ -1184,6 +1186,7 @@ static int azx_setup_periods(struct azx *chip,
   }
  } else
   pos_adj = 0;
+
  for (i = 0; i < periods; i++) {
   if (i == periods - 1 && pos_adj)
    ofs = setup_bdle(chip, snd_pcm_get_dma_buf(substream),
@@ -2143,7 +2146,7 @@ static int azx_position_ok(struct azx *chip, struct azx_dev *azx_dev)
  if (wallclk < (azx_dev->period_wallclk * 5) / 4 &&
      pos % azx_dev->period_bytes > azx_dev->period_bytes / 2)
   /* NG - it's below the first next period boundary */
-  return bdl_pos_adj[chip->dev_index] ? 0 : -1;
+  return chip->bdl_pos_adj[chip->dev_index] ? 0 : -1;
  azx_dev->start_wallclk += wallclk;
  return 1; /* OK, it's fine */
 }
@@ -3207,6 +3210,7 @@ static int azx_create(struct snd_card *card, struct pci_dev *pci,
    break;
   }
  }
+ chip->bdl_pos_adj = bdl_pos_adj;
 
  err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &ops);
  if (err < 0) {
diff --git a/sound/pci/hda/hda_priv.h b/sound/pci/hda/hda_priv.h
index 6d082d6..17afe90 100644
--- a/sound/pci/hda/hda_priv.h
+++ b/sound/pci/hda/hda_priv.h
@@ -357,6 +357,7 @@ struct azx {
 
  /* flags */
  int position_fix[2]; /* for both playback/capture streams */
+ const int *bdl_pos_adj;
  int poll_count;
  unsigned int running:1;
  unsigned int initialized:1;
-- 
1.7.1