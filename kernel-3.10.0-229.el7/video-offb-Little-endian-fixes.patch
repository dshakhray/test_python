From 4c2cacdbd48c986e0849dd1d98511b0302a28a35 Mon Sep 17 00:00:00 2001
From: David Gibson <dgibson@redhat.com>
Date: Mon, 22 Sep 2014 05:35:04 -0400
Subject: [video] offb: Little endian fixes

Message-id: <1411364104-2207-1-git-send-email-dgibson@redhat.com>
Patchwork-id: 96422
O-Subject: [PATCH] offb: Little endian fixes
Bugzilla: 1144937
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1144937

RHEL note: there is another patch immediately after this upstream (e1edf18
"offb: Add palette hack for little endian"), which purports to fix further
endian problems with the palette.  However, that patch was later reverted
upstream as broken (68986c9).

This is enough to get the graphical console semi-working, but further fixes
are required on the host/qemu side in order to fix broken colours.

Signed-off-by: David Gibson <dgibson@redhat.com>

commit 212c0cbd5be721a39ef3e2f723e0c78008f9e955
Author: Cedric Le Goater <clg@fr.ibm.com>
Date:   Wed Dec 4 17:49:51 2013 +0100

    offb: Little endian fixes

    The "screen" properties : depth, width, height, linebytes need
    to be converted to the host endian order when read from the device
    tree.

    The offb_init_palette_hacks() routine also made assumption on the
    host endian order.

    Signed-off-by: Cedric Le Goater <clg@fr.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/video/offb.c b/drivers/video/offb.c
index 0c4f343..9a0109b 100644
--- a/drivers/video/offb.c
+++ b/drivers/video/offb.c
@@ -301,7 +301,7 @@ static struct fb_ops offb_ops = {
 static void __iomem *offb_map_reg(struct device_node *np, int index,
       unsigned long offset, unsigned long size)
 {
- const u32 *addrp;
+ const __be32 *addrp;
  u64 asize, taddr;
  unsigned int flags;
 
@@ -369,7 +369,11 @@ static void offb_init_palette_hacks(struct fb_info *info, struct device_node *dp
   }
   of_node_put(pciparent);
  } else if (dp && of_device_is_compatible(dp, "qemu,std-vga")) {
-  const u32 io_of_addr[3] = { 0x01000000, 0x0, 0x0 };
+#ifdef __BIG_ENDIAN
+  const __be32 io_of_addr[3] = { 0x01000000, 0x0, 0x0 };
+#else
+  const __be32 io_of_addr[3] = { 0x00000001, 0x0, 0x0 };
+#endif
   u64 io_addr = of_translate_address(dp, io_of_addr);
   if (io_addr != OF_BAD_ADDR) {
    par->cmap_adr = ioremap(io_addr + 0x3c8, 2);
@@ -536,7 +540,7 @@ static void __init offb_init_nodriver(struct device_node *dp, int no_real_node)
  unsigned int flags, rsize, addr_prop = 0;
  unsigned long max_size = 0;
  u64 rstart, address = OF_BAD_ADDR;
- const u32 *pp, *addrp, *up;
+ const __be32 *pp, *addrp, *up;
  u64 asize;
  int foreign_endian = 0;
 
@@ -552,25 +556,25 @@ static void __init offb_init_nodriver(struct device_node *dp, int no_real_node)
  if (pp == NULL)
   pp = of_get_property(dp, "depth", &len);
  if (pp && len == sizeof(u32))
-  depth = *pp;
+  depth = be32_to_cpup(pp);
 
  pp = of_get_property(dp, "linux,bootx-width", &len);
  if (pp == NULL)
   pp = of_get_property(dp, "width", &len);
  if (pp && len == sizeof(u32))
-  width = *pp;
+  width = be32_to_cpup(pp);
 
  pp = of_get_property(dp, "linux,bootx-height", &len);
  if (pp == NULL)
   pp = of_get_property(dp, "height", &len);
  if (pp && len == sizeof(u32))
-  height = *pp;
+  height = be32_to_cpup(pp);
 
  pp = of_get_property(dp, "linux,bootx-linebytes", &len);
  if (pp == NULL)
   pp = of_get_property(dp, "linebytes", &len);
  if (pp && len == sizeof(u32) && (*pp != 0xffffffffu))
-  pitch = *pp;
+  pitch = be32_to_cpup(pp);
  else
   pitch = width * ((depth + 7) / 8);
 
-- 
1.7.1