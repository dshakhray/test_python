From 7462db112a2366ab59dfbfb10a82987d85efe245 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:20:04 -0400
Subject: [fs] nfsd: optimize destroy_lockowner cl_lock thrashing

Message-id: <1410898849-22126-121-git-send-email-bfields@redhat.com>
Patchwork-id: 95752
O-Subject: [Patch RHEL7 120/165] nfsd: optimize destroy_lockowner cl_lock thrashing
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Jeff Layton <jlayton@primarydata.com>

Reduce the cl_lock trashing in destroy_lockowner. Unhash all of the
lockstateids on the lockowner's list. Put the reference under the lock
and see if it was the last one. If so, then add it to a private list
to be destroyed after we drop the lock.

Signed-off-by: Jeff Layton <jlayton@primarydata.com>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 3c1c995cc2e49f6f7504586ad07c5d80c6aa3301
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index 9b342e1..9358cbe 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -983,14 +983,23 @@ static void nfs4_free_lock_stateid(struct nfs4_stid *stid)
  nfs4_free_ol_stateid(stid);
 }
 
-static void release_lock_stateid(struct nfs4_ol_stateid *stp)
+static void unhash_lock_stateid(struct nfs4_ol_stateid *stp)
 {
  struct nfs4_openowner *oo = openowner(stp->st_openstp->st_stateowner);
 
- spin_lock(&oo->oo_owner.so_client->cl_lock);
- list_del(&stp->st_locks);
+ lockdep_assert_held(&oo->oo_owner.so_client->cl_lock);
+
+ list_del_init(&stp->st_locks);
  unhash_generic_stateid(stp);
  unhash_stid(&stp->st_stid);
+}
+
+static void release_lock_stateid(struct nfs4_ol_stateid *stp)
+{
+ struct nfs4_openowner *oo = openowner(stp->st_openstp->st_stateowner);
+
+ spin_lock(&oo->oo_owner.so_client->cl_lock);
+ unhash_lock_stateid(stp);
  spin_unlock(&oo->oo_owner.so_client->cl_lock);
  nfs4_put_stid(&stp->st_stid);
 }
@@ -1004,30 +1013,38 @@ static void unhash_lockowner_locked(struct nfs4_lockowner *lo)
  list_del_init(&lo->lo_owner.so_strhash);
 }
 
-static void release_lockowner_stateids(struct nfs4_lockowner *lo)
+static void release_lockowner(struct nfs4_lockowner *lo)
 {
  struct nfs4_client *clp = lo->lo_owner.so_client;
  struct nfs4_ol_stateid *stp;
+ struct list_head reaplist;
 
- lockdep_assert_held(&clp->cl_lock);
+ INIT_LIST_HEAD(&reaplist);
 
+ spin_lock(&clp->cl_lock);
+ unhash_lockowner_locked(lo);
  while (!list_empty(&lo->lo_owner.so_stateids)) {
   stp = list_first_entry(&lo->lo_owner.so_stateids,
     struct nfs4_ol_stateid, st_perstateowner);
-  spin_unlock(&clp->cl_lock);
-  release_lock_stateid(stp);
-  spin_lock(&clp->cl_lock);
+  unhash_lock_stateid(stp);
+  /*
+   * We now know that no new references can be added to the
+   * stateid. If ours is the last one, finish the unhashing
+   * and put it on the list to be reaped.
+   */
+  if (atomic_dec_and_test(&stp->st_stid.sc_count)) {
+   idr_remove(&clp->cl_stateids,
+    stp->st_stid.sc_stateid.si_opaque.so_id);
+   list_add(&stp->st_locks, &reaplist);
+  }
  }
-}
-
-static void release_lockowner(struct nfs4_lockowner *lo)
-{
- struct nfs4_client *clp = lo->lo_owner.so_client;
-
- spin_lock(&clp->cl_lock);
- unhash_lockowner_locked(lo);
- release_lockowner_stateids(lo);
  spin_unlock(&clp->cl_lock);
+ while (!list_empty(&reaplist)) {
+  stp = list_first_entry(&reaplist, struct nfs4_ol_stateid,
+     st_locks);
+  list_del(&stp->st_locks);
+  stp->st_stid.sc_free(&stp->st_stid);
+ }
  nfs4_put_stateowner(&lo->lo_owner);
 }
 
-- 
1.7.1