From 1dc2fcffec8f9b5aefe698f50190377a47f1f30f Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 00:59:25 -0400
Subject: [acpi] simplify acpiphp driver with new helper functions

Message-id: <20140710005924.22146.31803.stgit@gir.stowe>
Patchwork-id: 85550
O-Subject: [RHEL7.1 PATCH 011/105] ACPI: simplify acpiphp driver with new helper functions
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: ecd046da57d3327367b930478234e58f01bc9f0f

commit ecd046da57d3327367b930478234e58f01bc9f0f
Author: Jiang Liu <jiang.liu@huawei.com>
Date:   Sat Jun 29 00:24:43 2013 +0800

    ACPI: simplify acpiphp driver with new helper functions

    Use the new helper functions introduced previously to simplify the
    ACPI-based PCI hotplug (acpiphp) driver.

    [rjw: Changelog]
    Signed-off-by: Jiang Liu <jiang.liu@huawei.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index 7d4cb0d..10c958e 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -201,7 +201,6 @@ register_slot(acpi_handle handle, u32 lvl, void *context, void **rv)
  struct acpiphp_bridge *bridge = (struct acpiphp_bridge *)context;
  struct acpiphp_slot *slot;
  struct acpiphp_func *newfunc;
- acpi_handle tmp;
  acpi_status status = AE_OK;
  unsigned long long adr, sun;
  int device, function, retval, found = 0;
@@ -232,19 +231,19 @@ register_slot(acpi_handle handle, u32 lvl, void *context, void **rv)
  newfunc->handle = handle;
  newfunc->function = function;
 
- if (ACPI_SUCCESS(acpi_get_handle(handle, "_EJ0", &tmp)))
+ if (acpi_has_method(handle, "_EJ0"))
   newfunc->flags = FUNC_HAS_EJ0;
 
- if (ACPI_SUCCESS(acpi_get_handle(handle, "_STA", &tmp)))
+ if (acpi_has_method(handle, "_STA"))
   newfunc->flags |= FUNC_HAS_STA;
 
- if (ACPI_SUCCESS(acpi_get_handle(handle, "_PS0", &tmp)))
+ if (acpi_has_method(handle, "_PS0"))
   newfunc->flags |= FUNC_HAS_PS0;
 
- if (ACPI_SUCCESS(acpi_get_handle(handle, "_PS3", &tmp)))
+ if (acpi_has_method(handle, "_PS3"))
   newfunc->flags |= FUNC_HAS_PS3;
 
- if (ACPI_SUCCESS(acpi_get_handle(handle, "_DCK", &tmp)))
+ if (acpi_has_method(handle, "_DCK"))
   newfunc->flags |= FUNC_HAS_DCK;
 
  status = acpi_evaluate_integer(handle, "_SUN", NULL, &sun);
@@ -842,25 +841,14 @@ static unsigned int get_slot_status(struct acpiphp_slot *slot)
  */
 int acpiphp_eject_slot(struct acpiphp_slot *slot)
 {
- acpi_status status;
  struct acpiphp_func *func;
- struct acpi_object_list arg_list;
- union acpi_object arg;
 
  list_for_each_entry(func, &slot->funcs, sibling) {
   /* We don't want to call _EJ0 on non-existing functions. */
   if ((func->flags & FUNC_HAS_EJ0)) {
-   /* _EJ0 method take one argument */
-   arg_list.count = 1;
-   arg_list.pointer = &arg;
-   arg.type = ACPI_TYPE_INTEGER;
-   arg.integer.value = 1;
-
-   status = acpi_evaluate_object(func->handle, "_EJ0", &arg_list, NULL);
-   if (ACPI_FAILURE(status)) {
-    pr_warn("%s: _EJ0 failed\n", __func__);
+   if (ACPI_FAILURE(acpi_evaluate_ej0(func->handle)))
     return -1;
-   } else
+   else
     break;
   }
  }
@@ -1171,7 +1159,6 @@ static void handle_hotplug_event_func(acpi_handle handle, u32 type,
  */
 void acpiphp_enumerate_slots(struct pci_bus *bus, acpi_handle handle)
 {
- acpi_handle dummy_handle;
  struct acpiphp_bridge *bridge;
 
  if (acpiphp_disabled)
@@ -1200,8 +1187,7 @@ void acpiphp_enumerate_slots(struct pci_bus *bus, acpi_handle handle)
  get_device(&bus->dev);
 
  if (!pci_is_root_bus(bridge->pci_bus) &&
-     ACPI_SUCCESS(acpi_get_handle(bridge->handle,
-     "_EJ0", &dummy_handle))) {
+     acpi_has_method(bridge->handle, "_EJ0")) {
   pr_debug("found ejectable p2p bridge\n");
   bridge->flags |= BRIDGE_HAS_EJ0;
   bridge->func = acpiphp_bridge_handle_to_function(handle);
-- 
1.7.1