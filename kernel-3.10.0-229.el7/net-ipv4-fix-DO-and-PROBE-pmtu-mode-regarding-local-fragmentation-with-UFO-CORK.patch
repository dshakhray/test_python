From a68c94213b1e0a72ffa7fc2f4d35e6968f26e4fe Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Sun, 10 Aug 2014 16:10:05 -0400
Subject: [net] ipv4: fix DO and PROBE pmtu mode regarding local fragmentation with UFO/CORK

Message-id: <d5842a39a6f8b04a19ac33cd769305643bf7bd11.1407685044.git.hannes@redhat.com>
Patchwork-id: 87565
O-Subject: [PATCH net RHEL7 1/3] ipv4: fix DO and PROBE pmtu mode regarding local fragmentation with UFO/CORK
Bugzilla: 1127218
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1127218
Upstream Status: daba287b299ec7a
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7823897
Tested: verified on beaker with strace and tracepath(6)

Upstream Commit:
commit daba287b299ec7a2c61ae3a714920e90e8396ad5
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Sun Oct 27 17:29:11 2013 +0100

    ipv4: fix DO and PROBE pmtu mode regarding local fragmentation with UFO/CORK

    UFO as well as UDP_CORK do not respect IP_PMTUDISC_DO and
    IP_PMTUDISC_PROBE well enough.

    UFO enabled packet delivery just appends all frags to the cork and hands
    it over to the network card. So we just deliver non-DF udp fragments
    (DF-flag may get overwritten by hardware or virtual UFO enabled
    interface).

    UDP_CORK does enqueue the data until the cork is disengaged. At this
    point it sets the correct IP_DF and local_df flags and hands it over to
    ip_fragment which in this case will generate an icmp error which gets
    appended to the error socket queue. This is not reflected in the syscall
    error (of course, if UFO is enabled this also won't happen).

    Improve this by checking the pmtudisc flags before appending data to the
    socket and if we still can fit all data in one packet when IP_PMTUDISC_DO
    or IP_PMTUDISC_PROBE is set, only then proceed.

    We use (mtu-fragheaderlen) to check for the maximum length because we
    ensure not to generate a fragment and non-fragmented data does not need
    to have its length aligned on 64 bit boundaries. Also the passed in
    ip_options are already aligned correctly.

    Maybe, we can relax some other checks around ip_fragment. This needs
    more research.

    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hsowa@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index 04d3ba3..888c773 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -861,7 +861,7 @@ static int __ip_append_data(struct sock *sk,
  int copy;
  int err;
  int offset = 0;
- unsigned int maxfraglen, fragheaderlen;
+ unsigned int maxfraglen, fragheaderlen, maxnonfragsize;
  int csummode = CHECKSUM_NONE;
  struct rtable *rt = (struct rtable *)cork->dst;
 
@@ -874,8 +874,10 @@ static int __ip_append_data(struct sock *sk,
 
  fragheaderlen = sizeof(struct iphdr) + (opt ? opt->optlen : 0);
  maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen;
+ maxnonfragsize = (inet->pmtudisc >= IP_PMTUDISC_DO) ?
+    mtu : 0xFFFF;
 
- if (cork->length + length > 0xFFFF - fragheaderlen) {
+ if (cork->length + length > maxnonfragsize - fragheaderlen) {
   ip_local_error(sk, EMSGSIZE, fl4->daddr, inet->inet_dport,
           mtu-exthdrlen);
   return -EMSGSIZE;
@@ -1173,7 +1175,7 @@ ssize_t ip_append_page(struct sock *sk, struct flowi4 *fl4, struct page *page,
  int mtu;
  int len;
  int err;
- unsigned int maxfraglen, fragheaderlen, fraggap;
+ unsigned int maxfraglen, fragheaderlen, fraggap, maxnonfragsize;
 
  if (inet->hdrincl)
   return -EPERM;
@@ -1197,8 +1199,10 @@ ssize_t ip_append_page(struct sock *sk, struct flowi4 *fl4, struct page *page,
 
  fragheaderlen = sizeof(struct iphdr) + (opt ? opt->optlen : 0);
  maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen;
+ maxnonfragsize = (inet->pmtudisc >= IP_PMTUDISC_DO) ?
+    mtu : 0xFFFF;
 
- if (cork->length + size > 0xFFFF - fragheaderlen) {
+ if (cork->length + size > maxnonfragsize - fragheaderlen) {
   ip_local_error(sk, EMSGSIZE, fl4->daddr, inet->inet_dport, mtu);
   return -EMSGSIZE;
  }
-- 
1.7.1