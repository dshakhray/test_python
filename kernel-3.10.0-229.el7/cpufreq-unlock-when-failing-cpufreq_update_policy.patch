From 5bcb0ae325701c91b9c9dfff55147ad813c2323d Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:18 -0400
Subject: [cpufreq] unlock when failing cpufreq_update_policy()

Message-id: <1409235879-1283-165-git-send-email-prarit@redhat.com>
Patchwork-id: 89483
O-Subject: [RHEL7.1 PATCH BZ 1134639 164/185] cpufreq: unlock when failing cpufreq_update_policy()
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit fefa8ff810c5ab4c4206aed9d159c4d6fe8d4f1c
Author: Aaron Plattner <aplattner@nvidia.com>
Date:   Wed Jun 18 11:27:32 2014 -0700

    cpufreq: unlock when failing cpufreq_update_policy()

    Commit bd0fa9bb455d introduced a failure path to cpufreq_update_policy() if
    cpufreq_driver->get(cpu) returns NULL.  However, it jumps to the 'no_policy'
    label, which exits without unlocking any of the locks the function acquired
    earlier.  This causes later calls into cpufreq to hang.

    Fix this by creating a new 'unlock' label and jumping to that instead.

    Fixes: bd0fa9bb455d ("cpufreq: Return error if ->get() failed in cpufreq_update_policy()")
    Link: https://devtalk.nvidia.com/default/topic/751903/kernel-3-15-and-nv-drivers-337-340-failed-to-initialize-the-nvidia-kernel-module-gtx-550-ti-/
    Signed-off-by: Aaron Plattner <aplattner@nvidia.com>
    Cc: 3.15+ <stable@vger.kernel.org> # 3.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 0b2574d..50fab7e 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -2240,10 +2240,8 @@ int cpufreq_update_policy(unsigned int cpu)
  struct cpufreq_policy new_policy;
  int ret;
 
- if (!policy) {
-  ret = -ENODEV;
-  goto no_policy;
- }
+ if (!policy)
+  return -ENODEV;
 
  down_write(&policy->rwsem);
 
@@ -2262,7 +2260,7 @@ int cpufreq_update_policy(unsigned int cpu)
   new_policy.cur = cpufreq_driver->get(cpu);
   if (WARN_ON(!new_policy.cur)) {
    ret = -EIO;
-   goto no_policy;
+   goto unlock;
   }
 
   if (!policy->cur) {
@@ -2277,10 +2275,10 @@ int cpufreq_update_policy(unsigned int cpu)
 
  ret = cpufreq_set_policy(policy, &new_policy);
 
+unlock:
  up_write(&policy->rwsem);
 
  cpufreq_cpu_put(policy);
-no_policy:
  return ret;
 }
 EXPORT_SYMBOL(cpufreq_update_policy);
-- 
1.7.1