From 672b58a0f9af46254ed957e838e38c2aab5da1dc Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@redhat.com>
Date: Fri, 24 Oct 2014 14:10:12 -0400
Subject: [net] cdc_ncm: fix control message ordering

Message-id: <1414159812-24898-1-git-send-email-nhorman@redhat.com>
Patchwork-id: 98433
O-Subject: [RHEL7.1 PATCH v2 6/5] net: cdc_ncm: fix control message ordering
Bugzilla: 1129796
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>

This is a context modified revert of commit 6a9612e2cb22
("net: cdc_ncm: remove ncm_parm field") which introduced
a NCM specification violation, causing setup errors for
some devices. These errors resulted in the device and
host disagreeing about shared settings, with complete
failure to communicate as the end result.

The NCM specification require that many of the NCM specific
control reuests are sent only while the NCM Data Interface
is in alternate setting 0. Reverting the commit ensures that
we follow this requirement.

Fixes: 6a9612e2cb22 ("net: cdc_ncm: remove ncm_parm field")
Reported-and-tested-by: Pasi Karkkainen <pasik@iki.fi>
Reported-by: Thomas Schafer <tschaefer@t-online.de>
Signed-off-by: Bjorn Mork <bjorn@mork.no>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ff0992e9036e9810e7cd45234fa32ca1e79750e2)

Note: This patch was part of the reference brew build, but wasn't send in my
origional git-send-email command (I'm assuming that, given the correctness of
the sequence numbers, I must have added a <base>..HEAD^ to the end of the send-email
command, rather than just the usual <base>..HEAD.  Anywho, sorry for the noise

BZ: 1129796
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8150596
Testing: Tested by reporter with success
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/usb/cdc_ncm.c b/drivers/net/usb/cdc_ncm.c
index 5f02400..279ebc0 100644
--- a/drivers/net/usb/cdc_ncm.c
+++ b/drivers/net/usb/cdc_ncm.c
@@ -83,7 +83,6 @@ cdc_ncm_get_drvinfo(struct net_device *net, struct ethtool_drvinfo *info)
 static u8 cdc_ncm_setup(struct usbnet *dev)
 {
  struct cdc_ncm_ctx *ctx = (struct cdc_ncm_ctx *)dev->data[0];
- struct usb_cdc_ncm_ntb_parameters ncm_parm;
  u32 val;
  u8 flags;
  u8 iface_no;
@@ -98,22 +97,22 @@ static u8 cdc_ncm_setup(struct usbnet *dev)
  err = usbnet_read_cmd(dev, USB_CDC_GET_NTB_PARAMETERS,
          USB_TYPE_CLASS | USB_DIR_IN
          |USB_RECIP_INTERFACE,
-         0, iface_no, &ncm_parm,
-         sizeof(ncm_parm));
+         0, iface_no, &ctx->ncm_parm,
+         sizeof(ctx->ncm_parm));
  if (err < 0) {
   pr_debug("failed GET_NTB_PARAMETERS\n");
   return 1;
  }
 
  /* read correct set of parameters according to device mode */
- ctx->rx_max = le32_to_cpu(ncm_parm.dwNtbInMaxSize);
- ctx->tx_max = le32_to_cpu(ncm_parm.dwNtbOutMaxSize);
- ctx->tx_remainder = le16_to_cpu(ncm_parm.wNdpOutPayloadRemainder);
- ctx->tx_modulus = le16_to_cpu(ncm_parm.wNdpOutDivisor);
- ctx->tx_ndp_modulus = le16_to_cpu(ncm_parm.wNdpOutAlignment);
+ ctx->rx_max = le32_to_cpu(ctx->ncm_parm.dwNtbInMaxSize);
+ ctx->tx_max = le32_to_cpu(ctx->ncm_parm.dwNtbOutMaxSize);
+ ctx->tx_remainder = le16_to_cpu(ctx->ncm_parm.wNdpOutPayloadRemainder);
+ ctx->tx_modulus = le16_to_cpu(ctx->ncm_parm.wNdpOutDivisor);
+ ctx->tx_ndp_modulus = le16_to_cpu(ctx->ncm_parm.wNdpOutAlignment);
  /* devices prior to NCM Errata shall set this field to zero */
- ctx->tx_max_datagrams = le16_to_cpu(ncm_parm.wNtbOutMaxDatagrams);
- ntb_fmt_supported = le16_to_cpu(ncm_parm.bmNtbFormatsSupported);
+ ctx->tx_max_datagrams = le16_to_cpu(ctx->ncm_parm.wNtbOutMaxDatagrams);
+ ntb_fmt_supported = le16_to_cpu(ctx->ncm_parm.bmNtbFormatsSupported);
 
  eth_hlen = ETH_HLEN;
  min_dgram_size = CDC_NCM_MIN_DATAGRAM_SIZE;
@@ -154,7 +153,7 @@ static u8 cdc_ncm_setup(struct usbnet *dev)
  }
 
  /* inform device about NTB input size changes */
- if (ctx->rx_max != le32_to_cpu(ncm_parm.dwNtbInMaxSize)) {
+ if (ctx->rx_max != le32_to_cpu(ctx->ncm_parm.dwNtbInMaxSize)) {
   __le32 dwNtbInMaxSize = cpu_to_le32(ctx->rx_max);
 
   err = usbnet_write_cmd(dev, USB_CDC_SET_NTB_INPUT_SIZE,
@@ -172,14 +171,6 @@ static u8 cdc_ncm_setup(struct usbnet *dev)
   pr_debug("Using default maximum transmit length=%d\n",
       CDC_NCM_NTB_MAX_SIZE_TX);
   ctx->tx_max = CDC_NCM_NTB_MAX_SIZE_TX;
-
-  /* Adding a pad byte here simplifies the handling in
-   * cdc_ncm_fill_tx_frame, by making tx_max always
-   * represent the real skb max size.
-   */
-  if (ctx->tx_max % usb_maxpacket(dev->udev, dev->out, 1) == 0)
-   ctx->tx_max++;
-
  }
 
  /*
@@ -482,6 +473,10 @@ advance:
  if (temp)
   goto error2;
 
+ /* initialize data interface */
+ if (cdc_ncm_setup(dev))
+  goto error2;
+
  /* configure data interface */
  temp = usb_set_interface(dev->udev, iface_no, data_altsetting);
  if (temp)
@@ -492,10 +487,6 @@ advance:
  if (!dev->in || !dev->out || !dev->status)
   goto error2;
 
- /* initialize data interface */
- if (cdc_ncm_setup(dev))
-  goto error2;
-
  dev->net->ethtool_ops = &cdc_ncm_ethtool_ops;
 
  usb_set_intfdata(ctx->data, dev);
@@ -510,6 +501,15 @@ advance:
 
  dev->rx_urb_size = ctx->rx_max;
 
+ /* cdc_ncm_setup will override dwNtbOutMaxSize if it is
+  * outside the sane range. Adding a pad byte here if necessary
+  * simplifies the handling in cdc_ncm_fill_tx_frame, making
+  * tx_max always represent the real skb max size.
+  */
+ if (ctx->tx_max != le32_to_cpu(ctx->ncm_parm.dwNtbOutMaxSize) &&
+     ctx->tx_max % usb_maxpacket(dev->udev, dev->out, 1) == 0)
+  ctx->tx_max++;
+
  return 0;
 
 error2:
diff --git a/include/linux/usb/cdc_ncm.h b/include/linux/usb/cdc_ncm.h
index c3fa807..2c14d9c 100644
--- a/include/linux/usb/cdc_ncm.h
+++ b/include/linux/usb/cdc_ncm.h
@@ -88,6 +88,7 @@
 #define cdc_ncm_data_intf_is_mbim(x)  ((x)->desc.bInterfaceProtocol == USB_CDC_MBIM_PROTO_NTB)
 
 struct cdc_ncm_ctx {
+ struct usb_cdc_ncm_ntb_parameters ncm_parm;
  struct hrtimer tx_timer;
  struct tasklet_struct bh;
 
-- 
1.7.1