From 7d9aeb3683f7972ee068e434805044a607fa368a Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:03:44 -0400
Subject: [usb] cdc-wdm: support back-to-back USB_CDC_NOTIFY_RESPONSE_AVAILABLE notifications

Message-id: <1410887463-20674-153-git-send-email-dzickus@redhat.com>
Patchwork-id: 95412
O-Subject: [RHEL7 PATCH 152/591] USB: cdc-wdm: support back-to-back USB_CDC_NOTIFY_RESPONSE_AVAILABLE notifications
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 73e06865ead1bec8d1c179e1c647dc77adde9116
Author: Greg Suarez <gpsuarez2512@gmail.com>
Date:   Tue Oct 29 10:29:10 2013 -0700

    USB: cdc-wdm: support back-to-back USB_CDC_NOTIFY_RESPONSE_AVAILABLE notifications

    Some MBIM devices send back-to-back USB_CDC_NOTIFY_RESPONSE_AVAILABLE notifications
    when sending a message over multiple fragments or when there are unsolicited
    messages available.

    Count up the number of USB_CDC_NOTIFY_RESPONSE_AVAILABLE notifications received
    and decrement the count and submit the urb for the next response each time userspace
    completes a read the response.

    Signed-off-by: Greg Suarez <gsuarez@smithmicro.com>
    Acked-by: Bjorn Mork <bjorn@mork.no>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/class/cdc-wdm.c b/drivers/usb/class/cdc-wdm.c
index d3318a0..589ea58 100644
--- a/drivers/usb/class/cdc-wdm.c
+++ b/drivers/usb/class/cdc-wdm.c
@@ -101,6 +101,7 @@ struct wdm_device {
  struct work_struct rxwork;
  int   werr;
  int   rerr;
+ int                     resp_count;
 
  struct list_head device_list;
  int   (*manage_power)(struct usb_interface *, int);
@@ -262,9 +263,9 @@ static void wdm_int_callback(struct urb *urb)
  }
 
  spin_lock(&desc->iuspin);
- clear_bit(WDM_READ, &desc->flags);
  responding = test_and_set_bit(WDM_RESPONDING, &desc->flags);
- if (!responding && !test_bit(WDM_DISCONNECTING, &desc->flags)
+ if (!desc->resp_count++ && !responding
+  && !test_bit(WDM_DISCONNECTING, &desc->flags)
   && !test_bit(WDM_SUSPENDING, &desc->flags)) {
   rv = usb_submit_urb(desc->response, GFP_ATOMIC);
   dev_dbg(&desc->intf->dev, "%s: usb_submit_urb %d",
@@ -521,10 +522,36 @@ retry:
 
  desc->length -= cntr;
  /* in case we had outstanding data */
- if (!desc->length)
+ if (!desc->length) {
   clear_bit(WDM_READ, &desc->flags);
 
- spin_unlock_irq(&desc->iuspin);
+  if (--desc->resp_count) {
+   set_bit(WDM_RESPONDING, &desc->flags);
+   spin_unlock_irq(&desc->iuspin);
+
+   rv = usb_submit_urb(desc->response, GFP_KERNEL);
+   if (rv) {
+    dev_err(&desc->intf->dev,
+     "%s: usb_submit_urb failed with result %d\n",
+     __func__, rv);
+    spin_lock_irq(&desc->iuspin);
+    clear_bit(WDM_RESPONDING, &desc->flags);
+    spin_unlock_irq(&desc->iuspin);
+
+    if (rv == -ENOMEM) {
+     rv = schedule_work(&desc->rxwork);
+     if (rv)
+      dev_err(&desc->intf->dev, "Cannot schedule work\n");
+    } else {
+     spin_lock_irq(&desc->iuspin);
+     desc->resp_count = 0;
+     spin_unlock_irq(&desc->iuspin);
+    }
+   }
+  } else
+   spin_unlock_irq(&desc->iuspin);
+ } else
+  spin_unlock_irq(&desc->iuspin);
 
  rv = cntr;
 
@@ -635,6 +662,9 @@ static int wdm_release(struct inode *inode, struct file *file)
   if (!test_bit(WDM_DISCONNECTING, &desc->flags)) {
    dev_dbg(&desc->intf->dev, "wdm_release: cleanup");
    kill_urbs(desc);
+   spin_lock_irq(&desc->iuspin);
+   desc->resp_count = 0;
+   spin_unlock_irq(&desc->iuspin);
    desc->manage_power(desc->intf, 0);
   } else {
    /* must avoid dev_printk here as desc->intf is invalid */
-- 
1.7.1