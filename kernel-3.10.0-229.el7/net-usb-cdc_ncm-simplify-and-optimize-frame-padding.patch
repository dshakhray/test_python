From 241ee27e674da3bb5ec946d27713ace3d28ca64e Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:03:55 -0400
Subject: [net] usb/cdc_ncm: simplify and optimize frame padding

Message-id: <1410887463-20674-164-git-send-email-dzickus@redhat.com>
Patchwork-id: 95141
O-Subject: [RHEL7 PATCH 163/591] net: cdc_ncm: simplify and optimize frame padding
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 20572226fc789f9f515331d911a3bd3a0d24c67a
Author: Bjorn Mork <bjorn@mork.no>
Date:   Fri Nov 1 11:16:38 2013 +0100

    net: cdc_ncm: simplify and optimize frame padding

    We can avoid the costly division for the common case where
    we pad the frame to tx_max size as long as we ensure that
    tx_max is either the device specified dwNtbOutMaxSize or not
    a multiplum of wMaxPacketSize.

    Using the preconverted 'maxpacket' field avoids converting
    wMaxPacketSize to CPU endianness for every transmitted frame

    And since we only will hit the one byte padding rule for short
    frames, we can drop testing the skb for tailroom.

    The change means that tx_max now represents the real maximum
    skb size, enabling us to allocate the correct size instead of
    always making room for one extra byte.

    Cc: Alexey Orishko <alexey.orishko@gmail.com>
    Signed-off-by: Bjorn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/usb/cdc_ncm.c b/drivers/net/usb/cdc_ncm.c
index cd79ce5..a989bd5 100644
--- a/drivers/net/usb/cdc_ncm.c
+++ b/drivers/net/usb/cdc_ncm.c
@@ -504,6 +504,15 @@ advance:
 
  dev->rx_urb_size = ctx->rx_max;
 
+ /* cdc_ncm_setup will override dwNtbOutMaxSize if it is
+  * outside the sane range. Adding a pad byte here if necessary
+  * simplifies the handling in cdc_ncm_fill_tx_frame, making
+  * tx_max always represent the real skb max size.
+  */
+ if (ctx->tx_max != le32_to_cpu(ctx->ncm_parm.dwNtbOutMaxSize) &&
+     ctx->tx_max % usb_maxpacket(dev->udev, dev->out, 1) == 0)
+  ctx->tx_max++;
+
  ctx->tx_speed = ctx->rx_speed = 0;
  return 0;
 
@@ -662,6 +671,7 @@ static struct usb_cdc_ncm_ndp16 *cdc_ncm_ndp(struct cdc_ncm_ctx *ctx, struct sk_
 struct sk_buff *
 cdc_ncm_fill_tx_frame(struct cdc_ncm_ctx *ctx, struct sk_buff *skb, __le32 sign)
 {
+ struct usbnet *dev = netdev_priv(ctx->netdev);
  struct usb_cdc_ncm_nth16 *nth16;
  struct usb_cdc_ncm_ndp16 *ndp16;
  struct sk_buff *skb_out;
@@ -681,7 +691,7 @@ cdc_ncm_fill_tx_frame(struct cdc_ncm_ctx *ctx, struct sk_buff *skb, __le32 sign)
 
  /* allocate a new OUT skb */
  if (!skb_out) {
-  skb_out = alloc_skb((ctx->tx_max + 1), GFP_ATOMIC);
+  skb_out = alloc_skb(ctx->tx_max, GFP_ATOMIC);
   if (skb_out == NULL) {
    if (skb != NULL) {
     dev_kfree_skb_any(skb);
@@ -786,19 +796,16 @@ cdc_ncm_fill_tx_frame(struct cdc_ncm_ctx *ctx, struct sk_buff *skb, __le32 sign)
   /* variables will be reset at next call */
  }
 
- /*
-  * If collected data size is less or equal CDC_NCM_MIN_TX_PKT bytes,
-  * we send buffers as it is. If we get more data, it would be more
-  * efficient for USB HS mobile device with DMA engine to receive a full
-  * size NTB, than canceling DMA transfer and receiving a short packet.
+ /* If collected data size is less or equal CDC_NCM_MIN_TX_PKT
+  * bytes, we send buffers as it is. If we get more data, it
+  * would be more efficient for USB HS mobile device with DMA
+  * engine to receive a full size NTB, than canceling DMA
+  * transfer and receiving a short packet.
   */
  if (skb_out->len > CDC_NCM_MIN_TX_PKT)
-  /* final zero padding */
-  memset(skb_put(skb_out, ctx->tx_max - skb_out->len), 0, ctx->tx_max - skb_out->len);
-
- /* do we need to prevent a ZLP? */
- if (((skb_out->len % le16_to_cpu(ctx->out_ep->desc.wMaxPacketSize)) == 0) &&
-     (skb_out->len < le32_to_cpu(ctx->ncm_parm.dwNtbOutMaxSize)) && skb_tailroom(skb_out))
+  memset(skb_put(skb_out, ctx->tx_max - skb_out->len), 0,
+         ctx->tx_max - skb_out->len);
+ else if ((skb_out->len % dev->maxpacket) == 0)
   *skb_put(skb_out, 1) = 0; /* force short packet */
 
  /* set final frame length */
-- 
1.7.1