From bb462fbba81a7027fb456dbb38b50da0570d1815 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:47 -0400
Subject: [tools] perf/report: Use al->cpumode where applicable

Message-id: <1410181752-25631-43-git-send-email-jolsa@redhat.com>
Patchwork-id: 91715
O-Subject: [PATCH RHEL7.1 BZ1134356 042/307] perf report: Use al->cpumode where applicable
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 17f22a3fbc9d81c1d8f9f853dd23d0e5e8f4c994
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Wed Jan 22 12:55:32 2014 -0300

description
===========
We don't need to recalculate cpumode from the perf_event->header field,
as this is already available in the struct addr_location->cpumode field.

Remove the function signature of functions that receive both perf_event
and addr_location parameters but use perf_event just to extract the
cpumode.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index 02f985f..08f0187 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -76,12 +76,10 @@ static int report__config(const char *var, const char *value, void *cb)
 }
 
 static int report__add_mem_hist_entry(struct perf_tool *tool, struct addr_location *al,
-          struct perf_sample *sample, struct perf_evsel *evsel,
-          union perf_event *event)
+          struct perf_sample *sample, struct perf_evsel *evsel)
 {
  struct report *rep = container_of(tool, struct report, tool);
  struct symbol *parent = NULL;
- u8 cpumode = event->header.misc & PERF_RECORD_MISC_CPUMODE_MASK;
  struct hist_entry *he;
  struct mem_info *mi, *mx;
  uint64_t cost;
@@ -90,7 +88,7 @@ static int report__add_mem_hist_entry(struct perf_tool *tool, struct addr_locati
  if (err)
   return err;
 
- mi = machine__resolve_mem(al->machine, al->thread, sample, cpumode);
+ mi = machine__resolve_mem(al->machine, al->thread, sample, al->cpumode);
  if (!mi)
   return -ENOMEM;
 
@@ -248,7 +246,7 @@ static int process_sample_event(struct perf_tool *tool,
   if (ret < 0)
    pr_debug("problem adding lbr entry, skipping event\n");
  } else if (rep->mem_mode == 1) {
-  ret = report__add_mem_hist_entry(tool, &al, sample, evsel, event);
+  ret = report__add_mem_hist_entry(tool, &al, sample, evsel);
   if (ret < 0)
    pr_debug("problem adding mem entry, skipping event\n");
  } else {
-- 
1.7.1