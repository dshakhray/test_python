From dce65ad0690c7088de8e3eef9ffec057f6cb5d5c Mon Sep 17 00:00:00 2001
From: David Milburn <dmilburn@redhat.com>
Date: Mon, 18 Aug 2014 19:58:48 -0400
Subject: [block] nvme: Fix nvme get/put queue semantics

Message-id: <1408391935-24886-16-git-send-email-dmilburn@redhat.com>
Patchwork-id: 87894
O-Subject: [RHEL7.1 PATCH BZ 1111259 15/22] NVMe: Fix nvme get/put queue semantics
Bugzilla: 1111259
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Keith Busch <keith.busch@intel.com>

The routines to get and lock nvme queues required the caller to "put"
or "unlock" them even if getting one returned NULL. This patch fixes that.

Signed-off-by: Keith Busch <keith.busch@intel.com>
Signed-off-by: Matthew Wilcox <matthew.r.wilcox@intel.com>
(cherry picked from commit a51afb54339c5e9ee72df66ae0f2ac5aacfed365)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/nvme-core.c b/drivers/block/nvme-core.c
index d59adf4..3c94418 100644
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@ -285,9 +285,17 @@ static struct nvme_queue *raw_nvmeq(struct nvme_dev *dev, int qid)
 
 static struct nvme_queue *get_nvmeq(struct nvme_dev *dev) __acquires(RCU)
 {
+ struct nvme_queue *nvmeq;
  unsigned queue_id = get_cpu_var(*dev->io_queue);
+
  rcu_read_lock();
- return rcu_dereference(dev->queues[queue_id]);
+ nvmeq = rcu_dereference(dev->queues[queue_id]);
+ if (nvmeq)
+  return nvmeq;
+
+ rcu_read_unlock();
+ put_cpu_var(*dev->io_queue);
+ return NULL;
 }
 
 static void put_nvmeq(struct nvme_queue *nvmeq) __releases(RCU)
@@ -299,8 +307,15 @@ static void put_nvmeq(struct nvme_queue *nvmeq) __releases(RCU)
 static struct nvme_queue *lock_nvmeq(struct nvme_dev *dev, int q_idx)
        __acquires(RCU)
 {
+ struct nvme_queue *nvmeq;
+
  rcu_read_lock();
- return rcu_dereference(dev->queues[q_idx]);
+ nvmeq = rcu_dereference(dev->queues[q_idx]);
+ if (nvmeq)
+  return nvmeq;
+
+ rcu_read_unlock();
+ return NULL;
 }
 
 static void unlock_nvmeq(struct nvme_queue *nvmeq) __releases(RCU)
@@ -890,7 +905,6 @@ static void nvme_make_request(struct request_queue *q, struct bio *bio)
  int result = -EBUSY;
 
  if (!nvmeq) {
-  put_nvmeq(NULL);
   bio_endio(bio, -EIO);
   return;
  }
@@ -965,10 +979,8 @@ static int nvme_submit_sync_cmd(struct nvme_dev *dev, int q_idx,
  struct nvme_queue *nvmeq;
 
  nvmeq = lock_nvmeq(dev, q_idx);
- if (!nvmeq) {
-  unlock_nvmeq(nvmeq);
+ if (!nvmeq)
   return -ENODEV;
- }
 
  cmdinfo.task = current;
  cmdinfo.status = -EINTR;
@@ -993,9 +1005,10 @@ static int nvme_submit_sync_cmd(struct nvme_dev *dev, int q_idx,
 
  if (cmdinfo.status == -EINTR) {
   nvmeq = lock_nvmeq(dev, q_idx);
-  if (nvmeq)
+  if (nvmeq) {
    nvme_abort_command(nvmeq, cmdid);
-  unlock_nvmeq(nvmeq);
+   unlock_nvmeq(nvmeq);
+  }
   return -EINTR;
  }
 
-- 
1.7.1