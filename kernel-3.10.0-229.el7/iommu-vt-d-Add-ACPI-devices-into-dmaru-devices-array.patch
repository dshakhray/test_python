From 81e3004869a0946e3bad603306ebc63b961bf250 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Fri, 5 Sep 2014 01:48:30 -0400
Subject: [iommu] vt-d: Add ACPI devices into dmaru->devices[] array

Message-id: <20140905014830.31297.14633.stgit@gir.stowe>
Patchwork-id: 91320
O-Subject: [RHEL7.1 PATCH 27/65] iommu/vt-d: Add ACPI devices into dmaru->devices[] array
Bugzilla: 1129880 1087643
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1087643
Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1129880
Upstream Status: ed40356b5fcf1ce28e026ab39c5b2b6939068b50

commit ed40356b5fcf1ce28e026ab39c5b2b6939068b50
Author: David Woodhouse <David.Woodhouse@intel.com>
Date:   Fri Mar 7 23:15:42 2014 +0000

    iommu/vt-d: Add ACPI devices into dmaru->devices[] array

    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/iommu/dmar.c b/drivers/iommu/dmar.c
index 6e72e14..ddfbd0e 100644
--- a/drivers/iommu/dmar.c
+++ b/drivers/iommu/dmar.c
@@ -612,6 +612,79 @@ out:
  return dmaru;
 }
 
+static void __init dmar_acpi_insert_dev_scope(u8 device_number,
+           struct acpi_device *adev)
+{
+ struct dmar_drhd_unit *dmaru;
+ struct acpi_dmar_hardware_unit *drhd;
+ struct acpi_dmar_device_scope *scope;
+ struct device *tmp;
+ int i;
+ struct acpi_dmar_pci_path *path;
+
+ for_each_drhd_unit(dmaru) {
+  drhd = container_of(dmaru->hdr,
+        struct acpi_dmar_hardware_unit,
+        header);
+
+  for (scope = (void *)(drhd + 1);
+       (unsigned long)scope < ((unsigned long)drhd) + drhd->header.length;
+       scope = ((void *)scope) + scope->length) {
+   if (scope->entry_type != ACPI_DMAR_SCOPE_TYPE_ACPI)
+    continue;
+   if (scope->enumeration_id != device_number)
+    continue;
+
+   path = (void *)(scope + 1);
+   pr_info("ACPI device \"%s\" under DMAR at %llx as %02x:%02x.%d\n",
+    dev_name(&adev->dev), dmaru->reg_base_addr,
+    scope->bus, path->device, path->function);
+   for_each_dev_scope(dmaru->devices, dmaru->devices_cnt, i, tmp)
+    if (tmp == NULL) {
+     dmaru->devices[i].bus = scope->bus;
+     dmaru->devices[i].devfn = PCI_DEVFN(path->device,
+             path->function);
+     rcu_assign_pointer(dmaru->devices[i].dev,
+          get_device(&adev->dev));
+     return;
+    }
+   BUG_ON(i >= dmaru->devices_cnt);
+  }
+ }
+ pr_warn("No IOMMU scope found for ANDD enumeration ID %d (%s)\n",
+  device_number, dev_name(&adev->dev));
+}
+
+static int __init dmar_acpi_dev_scope_init(void)
+{
+ struct acpi_dmar_andd *andd = (void *)dmar_tbl + sizeof(struct acpi_table_dmar);
+
+ while (((unsigned long)andd) <
+        ((unsigned long)dmar_tbl) + dmar_tbl->length) {
+  if (andd->header.type == ACPI_DMAR_TYPE_ANDD) {
+   acpi_handle h;
+   struct acpi_device *adev;
+
+   if (!ACPI_SUCCESS(acpi_get_handle(ACPI_ROOT_OBJECT,
+         andd->object_name,
+         &h))) {
+    pr_err("Failed to find handle for ACPI object %s\n",
+           andd->object_name);
+    continue;
+   }
+   acpi_bus_get_device(h, &adev);
+   if (!adev) {
+    pr_err("Failed to get device for ACPI object %s\n",
+           andd->object_name);
+    continue;
+   }
+   dmar_acpi_insert_dev_scope(andd->device_number, adev);
+  }
+  andd = ((void *)andd) + andd->header.length;
+ }
+ return 0;
+}
+
 int __init dmar_dev_scope_init(void)
 {
  struct pci_dev *dev = NULL;
@@ -620,6 +693,8 @@ int __init dmar_dev_scope_init(void)
  if (dmar_dev_scope_status != 1)
   return dmar_dev_scope_status;
 
+ dmar_acpi_dev_scope_init();
+
  if (list_empty(&dmar_drhd_units)) {
   dmar_dev_scope_status = -ENODEV;
  } else {
-- 
1.7.1