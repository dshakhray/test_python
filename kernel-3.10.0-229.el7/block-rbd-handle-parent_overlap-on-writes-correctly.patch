From df0f67346cadd15bea8aa65d47d6a28b08fb8897 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:26:13 -0400
Subject: [block] rbd: handle parent_overlap on writes correctly
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-267-git-send-email-sweil@redhat.com>
Patchwork-id: 89820
O-Subject: [PATCH 266/303] rbd: handle parent_overlap on writes correctly
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

The following check in rbd_img_obj_request_submit()

    rbd_dev->parent_overlap <= obj_request->img_offset

allows the fall through to the non-layered write case even if both
parent_overlap and obj_request->img_offset belong to the same RADOS
object.  This leads to data corruption, because the area to the left of
parent_overlap ends up unconditionally zero-filled instead of being
populated with parent data.  Suppose we want to write 1M to offset 6M
of image bar, which is a clone of foo@snap; object_size is 4M,
parent_overlap is 5M:

    rbd_data.<id>.0000000000000001
     ---------------------|----------------------|------------
    | should be copyup'ed | should be zeroed out | write ...
     ---------------------|----------------------|------------
   4M                    5M                     6M
                    parent_overlap    obj_request->img_offset

4..5M should be copyup'ed from foo, yet it is zero-filled, just like
5..6M is.

Given that the only striping mode kernel client currently supports is
chunking (i.e. stripe_unit == object_size, stripe_count == 1), round
parent_overlap up to the next object boundary for the purposes of the
overlap check.

Cc: stable@vger.kernel.org # 3.10+
Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Josh Durgin <josh.durgin@inktank.com>
(cherry picked from commit 9638556a276125553549fdfe349c464481ec2f39)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/rbd.c b/drivers/block/rbd.c
index cdb7cdc..050908a 100644
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@ -1475,6 +1475,14 @@ static bool obj_request_exists_test(struct rbd_obj_request *obj_request)
  return test_bit(OBJ_REQ_EXISTS, &obj_request->flags) != 0;
 }
 
+static bool obj_request_overlaps_parent(struct rbd_obj_request *obj_request)
+{
+ struct rbd_device *rbd_dev = obj_request->img_request->rbd_dev;
+
+ return obj_request->img_offset <
+     round_up(rbd_dev->parent_overlap, rbd_obj_bytes(&rbd_dev->header));
+}
+
 static void rbd_obj_request_get(struct rbd_obj_request *obj_request)
 {
  dout("%s: obj %p (was %d)\n", __func__, obj_request,
@@ -2791,7 +2799,7 @@ static int rbd_img_obj_request_submit(struct rbd_obj_request *obj_request)
   */
  if (!img_request_write_test(img_request) ||
   !img_request_layered_test(img_request) ||
-  rbd_dev->parent_overlap <= obj_request->img_offset ||
+  !obj_request_overlaps_parent(obj_request) ||
   ((known = obj_request_known_test(obj_request)) &&
    obj_request_exists_test(obj_request))) {
 
-- 
1.7.1