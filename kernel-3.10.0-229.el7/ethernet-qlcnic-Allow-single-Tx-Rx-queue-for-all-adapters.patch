From 64e5fd73ba02a707ccc64084538b6604aae0a827 Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Thu, 21 Aug 2014 13:05:37 -0400
Subject: [ethernet] qlcnic: Allow single Tx/Rx queue for all adapters

Message-id: <1408626422-3941-54-git-send-email-cdupuis@redhat.com>
Patchwork-id: 88588
O-Subject: [PATCH RHEL 7.1 053/138] qlcnic: Allow single Tx/Rx queue for all adapters.
Bugzilla: 1089352
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Himanshu Madhani <himanshu.madhani@qlogic.com>

Bug 1089352 (https://bugzilla.redhat.com/show_bug.cgi?id=1089352)

net commit id 80c0e4f3a3a43664b38477fa5d9e6b6149b34d80

o Allow user to set sigle Tx/Rx queue in MSI-x mode,
  for ALL supported adapters.

Signed-off-by: Himanshu Madhani <himanshu.madhani@qlogic.com>
Signed-off-by: Manish Chopra <manish.chopra@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c
index 430c5e8..9c13128 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c
@@ -289,6 +289,7 @@ int qlcnic_83xx_setup_intr(struct qlcnic_adapter *adapter)
   if (qlcnic_sriov_vf_check(adapter))
    return -EINVAL;
   num_msix = 1;
+  adapter->drv_tx_rings = QLCNIC_SINGLE_RING;
  }
  /* setup interrupt mapping table for fw */
  ahw->intr_tbl = vzalloc(num_msix *
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c
index 301cf2b..9636764 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c
@@ -1461,8 +1461,7 @@ int qlcnic_82xx_napi_add(struct qlcnic_adapter *adapter,
  for (ring = 0; ring < adapter->drv_sds_rings; ring++) {
   sds_ring = &recv_ctx->sds_rings[ring];
   if (qlcnic_check_multi_tx(adapter) &&
-      !adapter->ahw->diag_test &&
-      (adapter->drv_tx_rings > QLCNIC_SINGLE_RING)) {
+      !adapter->ahw->diag_test) {
    netif_napi_add(netdev, &sds_ring->napi, qlcnic_rx_poll,
            NAPI_POLL_WEIGHT);
   } else {
@@ -1535,8 +1534,7 @@ void qlcnic_82xx_napi_enable(struct qlcnic_adapter *adapter)
 
  if (qlcnic_check_multi_tx(adapter) &&
      (adapter->flags & QLCNIC_MSIX_ENABLED) &&
-     !adapter->ahw->diag_test &&
-     (adapter->drv_tx_rings > QLCNIC_SINGLE_RING)) {
+     !adapter->ahw->diag_test) {
   for (ring = 0; ring < adapter->drv_tx_rings; ring++) {
    tx_ring = &adapter->tx_ring[ring];
    napi_enable(&tx_ring->napi);
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
index fc650f7..19d55fd 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
@@ -646,8 +646,7 @@ int qlcnic_enable_msix(struct qlcnic_adapter *adapter, u32 num_msix)
    } else {
     adapter->ahw->num_msix = num_msix;
     if (qlcnic_check_multi_tx(adapter) &&
-        !adapter->ahw->diag_test &&
-        (adapter->drv_tx_rings > 1))
+        !adapter->ahw->diag_test)
      drv_sds_rings = num_msix - drv_tx_rings;
     else
      drv_sds_rings = num_msix;
@@ -3715,12 +3714,6 @@ int qlcnic_validate_rings(struct qlcnic_adapter *adapter, __u32 ring_cnt,
   return -EINVAL;
  }
 
- if (ring_cnt < 2) {
-  netdev_err(netdev,
-      "%s rings value should not be lower than 2\n", buf);
-  return -EINVAL;
- }
-
  if (!is_power_of_2(ring_cnt)) {
   netdev_err(netdev, "%s rings value should be a power of 2\n",
       buf);
-- 
1.7.1