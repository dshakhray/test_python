From b349e5f004639b216ca1423304fd76d1794e46d0 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:09:28 -0400
Subject: [usb] appledisplay: fix race between reading and writing from the device

Message-id: <1410887463-20674-497-git-send-email-dzickus@redhat.com>
Patchwork-id: 95385
O-Subject: [RHEL7 PATCH 496/591] USB: appledisplay: fix race between reading and writing from the device
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 552e1f2679b7b766b8b8de3dc6d83d9cd28f28b2
Author: Oliver Neukum <oneukum@suse.de>
Date:   Mon May 19 13:53:55 2014 +0200

    USB: appledisplay: fix race between reading and writing from the device

    The workqueue handler may call appledisplay_bl_get_brightness() while
    user space calls appledisplay_bl_update_status(). As they share a
    buffer that must not happen. Use a mutex for mutual exclusion.

    Signed-off-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/misc/appledisplay.c b/drivers/usb/misc/appledisplay.c
index f37c78d..b3d245e 100644
--- a/drivers/usb/misc/appledisplay.c
+++ b/drivers/usb/misc/appledisplay.c
@@ -81,6 +81,7 @@ struct appledisplay {
  struct delayed_work work;
  int button_pressed;
  spinlock_t lock;
+ struct mutex sysfslock;  /* concurrent read and write */
 };
 
 static atomic_t count_displays = ATOMIC_INIT(0);
@@ -144,6 +145,7 @@ static int appledisplay_bl_update_status(struct backlight_device *bd)
  struct appledisplay *pdata = bl_get_data(bd);
  int retval;
 
+ mutex_lock(&pdata->sysfslock);
  pdata->msgdata[0] = 0x10;
  pdata->msgdata[1] = bd->props.brightness;
 
@@ -156,15 +158,17 @@ static int appledisplay_bl_update_status(struct backlight_device *bd)
   0,
   pdata->msgdata, 2,
   ACD_USB_TIMEOUT);
-
+ mutex_unlock(&pdata->sysfslock);
+ 
  return retval;
 }
 
 static int appledisplay_bl_get_brightness(struct backlight_device *bd)
 {
  struct appledisplay *pdata = bl_get_data(bd);
- int retval;
+ int retval, brightness;
 
+ mutex_lock(&pdata->sysfslock);
  retval = usb_control_msg(
   pdata->udev,
   usb_rcvctrlpipe(pdata->udev, 0),
@@ -174,11 +178,13 @@ static int appledisplay_bl_get_brightness(struct backlight_device *bd)
   0,
   pdata->msgdata, 2,
   ACD_USB_TIMEOUT);
+ brightness = pdata->msgdata[1];
+ mutex_unlock(&pdata->sysfslock);
 
  if (retval < 0)
   return retval;
  else
-  return pdata->msgdata[1];
+  return brightness;
 }
 
 static const struct backlight_ops appledisplay_bl_data = {
@@ -241,6 +247,7 @@ static int appledisplay_probe(struct usb_interface *iface,
 
  spin_lock_init(&pdata->lock);
  INIT_DELAYED_WORK(&pdata->work, appledisplay_work);
+ mutex_init(&pdata->sysfslock);
 
  /* Allocate buffer for control messages */
  pdata->msgdata = kmalloc(ACD_MSG_BUFFER_LEN, GFP_KERNEL);
-- 
1.7.1