From 7683206c423de843303c79d996f3c9f0df876769 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 16:14:15 -0400
Subject: [ethernet] be2net: fix return status of some ndo methods

Message-id: <1410192881-30702-53-git-send-email-ivecera@redhat.com>
Patchwork-id: 92463
O-Subject: [RHEL7.1 PATCH 52/78] be2net: fix return status of some ndo methods
Bugzilla: 1088575
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>

BZ: #1088575

Upstream commit(s):
commit abccf23e3eebcd5b7b0ad5d2ad6d1f6d81af6b47
Author: Kalesh AP <kalesh.purayil@emulex.com>
Date:   Thu Jul 17 16:20:24 2014 +0530

    be2net: fix return status of some ndo methods

    The netlink layer expects a -ve status value to be returned when a driver
    ndo method encounters an error. The driver was directly passing the
    error status returned by FW (a positive value) to the stack.
    This patch fixes this by returning -EIO status when a FW-cmd reports an error.

    Signed-off-by: Kalesh AP <kalesh.purayil@emulex.com>
    Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/emulex/benet/be_main.c b/drivers/net/ethernet/emulex/benet/be_main.c
index e5aad70..19af5fb 100644
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -1281,13 +1281,15 @@ static int be_set_vf_mac(struct net_device *netdev, int vf, u8 *mac)
      vf + 1);
  }
 
- if (status)
-  dev_err(&adapter->pdev->dev, "MAC %pM set on VF %d Failed\n",
-   mac, vf);
- else
-  memcpy(vf_cfg->mac_addr, mac, ETH_ALEN);
+ if (status) {
+  dev_err(&adapter->pdev->dev, "MAC %pM set on VF %d Failed: %#x",
+   mac, vf, status);
+  return be_cmd_status(status);
+ }
 
- return status;
+ ether_addr_copy(vf_cfg->mac_addr, mac);
+
+ return 0;
 }
 
 static int be_get_vf_config(struct net_device *netdev, int vf,
@@ -1335,12 +1337,16 @@ static int be_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos)
             vf + 1, vf_cfg->if_handle, 0);
  }
 
- if (!status)
-  vf_cfg->vlan_tag = vlan;
- else
-  dev_info(&adapter->pdev->dev,
-    "VLAN %d config on VF %d failed\n", vlan, vf);
- return status;
+ if (status) {
+  dev_err(&adapter->pdev->dev,
+   "VLAN %d config on VF %d failed : %#x\n", vlan,
+   vf, status);
+  return be_cmd_status(status);
+ }
+
+ vf_cfg->vlan_tag = vlan;
+
+ return 0;
 }
 
 static int be_set_vf_tx_rate(struct net_device *netdev, int vf,
@@ -1399,7 +1405,7 @@ config_qos:
 err:
  dev_err(dev, "TX-rate setting of %dMbps on VF%d failed\n",
   max_tx_rate, vf);
- return status;
+ return be_cmd_status(status);
 }
 static int be_set_vf_link_state(struct net_device *netdev, int vf,
     int link_state)
@@ -1414,10 +1420,15 @@ static int be_set_vf_link_state(struct net_device *netdev, int vf,
   return -EINVAL;
 
  status = be_cmd_set_logical_link_config(adapter, link_state, vf+1);
- if (!status)
-  adapter->vf_cfg[vf].plink_tracking = link_state;
+ if (status) {
+  dev_err(&adapter->pdev->dev,
+   "Link state change on VF %d failed: %#x\n", vf, status);
+  return be_cmd_status(status);
+ }
 
- return status;
+ adapter->vf_cfg[vf].plink_tracking = link_state;
+
+ return 0;
 }
 
 static void be_aic_update(struct be_aic_obj *aic, u64 rx_pkts, u64 tx_pkts,
-- 
1.7.1