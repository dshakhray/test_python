From 4e5594b9828eef505a0562be4823507ea2524eb4 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:53:27 -0400
Subject: [tools] perf/machine: Use map as success in ip__resolve_ams

Message-id: <1408953210-26343-320-git-send-email-jolsa@redhat.com>
Patchwork-id: 88987
O-Subject: [PATCH RHEL7.1 BZ1133083 319/322] perf machine: Use map as success in ip__resolve_ams
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit fdf57dd052d5cbd415533ae98f4d423286a85220
Author: Don Zickus <dzickus@redhat.com>
Date: Tue Feb 25 22:43:45 2014 -0500

description
===========
When trying to map a bunch of instruction addresses to their respective
threads, I kept getting a lot of bogus entries [I forget the exact
reason as I patched my code months ago].

Looking through ip__resolve_ams, I noticed the check for

  if (al.sym)

and realized, most times I have an al.map definition but sometimes an
al.sym is undefined.  In the cases where al.sym is undefined, the loop
keeps going even though a valid al.map exists.

Modify this check to use the more reliable al.map.  This fixed my bogus
entries.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index c872991..620a198 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -1213,7 +1213,7 @@ static void ip__resolve_ams(struct machine *machine, struct thread *thread,
    */
   thread__find_addr_location(thread, machine, m, MAP__FUNCTION,
     ip, &al);
-  if (al.sym)
+  if (al.map)
    goto found;
  }
 found:
-- 
1.7.1