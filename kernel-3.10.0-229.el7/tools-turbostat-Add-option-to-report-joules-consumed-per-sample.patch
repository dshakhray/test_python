From f0f51afc10acd6335ac26f97c6b691636a07a7ff Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Tue, 26 Aug 2014 12:49:24 -0400
Subject: [tools] turbostat: Add option to report joules consumed per sample

Message-id: <1409057382-26432-14-git-send-email-prarit@redhat.com>
Patchwork-id: 89103
O-Subject: [RHEL7.1 PATCH BZ 1133893 13/31] turbostat: Add option to report joules consumed per sample
Bugzilla: 1133893
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1133893

commit 5c56be9a25bad1af44d25a892a5de3dec03babc7
Author: Dirk Brandewie <dirk.j.brandewie@intel.com>
Date:   Mon Dec 16 10:23:41 2013 -0800

    turbostat: Add option to report joules consumed per sample

    Add "-J" option to report energy consumed in joules per sample.  This option
    also adds the sample time to the reported values.

    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Dean Nelson <dnelson@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/power/x86/turbostat/turbostat.c b/tools/power/x86/turbostat/turbostat.c
index 6dcb378..ed112ae 100644
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@ -43,6 +43,7 @@ char *proc_stat = "/proc/stat";
 unsigned int interval_sec = 5; /* set with -i interval_sec */
 unsigned int verbose;  /* set with -v */
 unsigned int rapl_verbose; /* set with -R */
+unsigned int rapl_joules; /* set with -J */
 unsigned int thermal_verbose; /* set with -T */
 unsigned int summary_only; /* set with -s */
 unsigned int skip_c0;
@@ -317,19 +318,35 @@ void print_header(void)
   outp += sprintf(outp, "  %%pc10");
  }
 
- if (do_rapl & RAPL_PKG)
-  outp += sprintf(outp, "  Pkg_W");
- if (do_rapl & RAPL_CORES)
-  outp += sprintf(outp, "  Cor_W");
- if (do_rapl & RAPL_GFX)
-  outp += sprintf(outp, " GFX_W");
- if (do_rapl & RAPL_DRAM)
-  outp += sprintf(outp, " RAM_W");
- if (do_rapl & RAPL_PKG_PERF_STATUS)
-  outp += sprintf(outp, " PKG_%%");
- if (do_rapl & RAPL_DRAM_PERF_STATUS)
-  outp += sprintf(outp, " RAM_%%");
+ if (do_rapl && !rapl_joules) {
+  if (do_rapl & RAPL_PKG)
+   outp += sprintf(outp, "  Pkg_W");
+  if (do_rapl & RAPL_CORES)
+   outp += sprintf(outp, "  Cor_W");
+  if (do_rapl & RAPL_GFX)
+   outp += sprintf(outp, " GFX_W");
+  if (do_rapl & RAPL_DRAM)
+   outp += sprintf(outp, " RAM_W");
+  if (do_rapl & RAPL_PKG_PERF_STATUS)
+   outp += sprintf(outp, " PKG_%%");
+  if (do_rapl & RAPL_DRAM_PERF_STATUS)
+   outp += sprintf(outp, " RAM_%%");
+ } else {
+  if (do_rapl & RAPL_PKG)
+   outp += sprintf(outp, "  Pkg_J");
+  if (do_rapl & RAPL_CORES)
+   outp += sprintf(outp, "  Cor_J");
+  if (do_rapl & RAPL_GFX)
+   outp += sprintf(outp, " GFX_J");
+  if (do_rapl & RAPL_DRAM)
+   outp += sprintf(outp, " RAM_W");
+  if (do_rapl & RAPL_PKG_PERF_STATUS)
+   outp += sprintf(outp, " PKG_%%");
+  if (do_rapl & RAPL_DRAM_PERF_STATUS)
+   outp += sprintf(outp, " RAM_%%");
+  outp += sprintf(outp, " time");
 
+ }
  outp += sprintf(outp, "\n");
 }
 
@@ -548,19 +565,39 @@ int format_counters(struct thread_data *t, struct core_data *c,
   fmt6 = " %4.0f**";
  }
 
- if (do_rapl & RAPL_PKG)
-  outp += sprintf(outp, fmt6, p->energy_pkg * rapl_energy_units / interval_float);
- if (do_rapl & RAPL_CORES)
-  outp += sprintf(outp, fmt6, p->energy_cores * rapl_energy_units / interval_float);
- if (do_rapl & RAPL_GFX)
-  outp += sprintf(outp, fmt5, p->energy_gfx * rapl_energy_units / interval_float); 
- if (do_rapl & RAPL_DRAM)
-  outp += sprintf(outp, fmt5, p->energy_dram * rapl_energy_units / interval_float);
- if (do_rapl & RAPL_PKG_PERF_STATUS )
-  outp += sprintf(outp, fmt5, 100.0 * p->rapl_pkg_perf_status * rapl_time_units / interval_float);
- if (do_rapl & RAPL_DRAM_PERF_STATUS )
-  outp += sprintf(outp, fmt5, 100.0 * p->rapl_dram_perf_status * rapl_time_units / interval_float);
+ if (do_rapl && !rapl_joules) {
+  if (do_rapl & RAPL_PKG)
+   outp += sprintf(outp, fmt6, p->energy_pkg * rapl_energy_units / interval_float);
+  if (do_rapl & RAPL_CORES)
+   outp += sprintf(outp, fmt6, p->energy_cores * rapl_energy_units / interval_float);
+  if (do_rapl & RAPL_GFX)
+   outp += sprintf(outp, fmt5, p->energy_gfx * rapl_energy_units / interval_float);
+  if (do_rapl & RAPL_DRAM)
+   outp += sprintf(outp, fmt5, p->energy_dram * rapl_energy_units / interval_float);
+  if (do_rapl & RAPL_PKG_PERF_STATUS)
+   outp += sprintf(outp, fmt5, 100.0 * p->rapl_pkg_perf_status * rapl_time_units / interval_float);
+  if (do_rapl & RAPL_DRAM_PERF_STATUS)
+   outp += sprintf(outp, fmt5, 100.0 * p->rapl_dram_perf_status * rapl_time_units / interval_float);
+ } else {
+  if (do_rapl & RAPL_PKG)
+   outp += sprintf(outp, fmt6,
+     p->energy_pkg * rapl_energy_units);
+  if (do_rapl & RAPL_CORES)
+   outp += sprintf(outp, fmt6,
+     p->energy_cores * rapl_energy_units);
+  if (do_rapl & RAPL_GFX)
+   outp += sprintf(outp, fmt5,
+     p->energy_gfx * rapl_energy_units);
+  if (do_rapl & RAPL_DRAM)
+   outp += sprintf(outp, fmt5,
+     p->energy_dram * rapl_energy_units);
+  if (do_rapl & RAPL_PKG_PERF_STATUS)
+   outp += sprintf(outp, fmt5, 100.0 * p->rapl_pkg_perf_status * rapl_time_units / interval_float);
+  if (do_rapl & RAPL_DRAM_PERF_STATUS)
+   outp += sprintf(outp, fmt5, 100.0 * p->rapl_dram_perf_status * rapl_time_units / interval_float);
+ outp += sprintf(outp, fmt5, interval_float);
 
+ }
 done:
  outp += sprintf(outp, "\n");
 
@@ -2350,7 +2387,7 @@ void cmdline(int argc, char **argv)
 
  progname = argv[0];
 
- while ((opt = getopt(argc, argv, "+pPSvi:sc:sC:m:M:RT:")) != -1) {
+ while ((opt = getopt(argc, argv, "+pPSvi:sc:sC:m:M:RJT:")) != -1) {
   switch (opt) {
   case 'p':
    show_core_only++;
@@ -2385,6 +2422,10 @@ void cmdline(int argc, char **argv)
   case 'T':
    tcc_activation_temp_override = atoi(optarg);
    break;
+  case 'J':
+   rapl_joules++;
+   break;
+
   default:
    usage();
   }
-- 
1.7.1