From 8d95d591664ca5c9e518be8623146d3ffd8f0f60 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 26 Aug 2014 14:11:57 -0400
Subject: [ethernet] igb: Fix Null-pointer dereference in igb_reset_q_vector

Message-id: <1409062359-13063-40-git-send-email-sassmann@redhat.com>
Patchwork-id: 89149
O-Subject: [RHEL7.1 PATCH 39/81] igb: Fix Null-pointer dereference in igb_reset_q_vector
Bugzilla: 1091121
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Christoph Paasch <christoph.paasch@uclouvain.be>

When igb_set_interrupt_capability() calls
igb_reset_interrupt_capability() (e.g., because CONFIG_PCI_MSI is unset),
num_q_vectors has been set but no vector has yet been allocated.

igb_reset_interrupt_capability() will then call igb_reset_q_vector,
which assumes that the vector is allocated. As this is not the case, we
are accessing a NULL-pointer.

This patch fixes it by checking that q_vector is indeed different from
NULL.

Fixes: 02ef6e1d0b0023 (igb: Fix queue allocation method to accommodate changing during runtime)
Cc: Carolyn Wyborny <carolyn.wyborny@intel.com>
Signed-off-by: Christoph Paasch <christoph.paasch@uclouvain.be>
Tested-by: Jeff Pieper <jeffrey.e.pieper@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit cb06d102327eadcd1bdc480bfd9f8876251d1007)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 0d53215..6286948 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -1035,6 +1035,12 @@ static void igb_reset_q_vector(struct igb_adapter *adapter, int v_idx)
 {
  struct igb_q_vector *q_vector = adapter->q_vector[v_idx];
 
+ /* Coming from igb_set_interrupt_capability, the vectors are not yet
+  * allocated. So, q_vector is NULL so we should stop here.
+  */
+ if (!q_vector)
+  return;
+
  if (q_vector->tx.ring)
   adapter->tx_ring[q_vector->tx.ring->queue_index] = NULL;
 
-- 
1.7.1