From 1dae8f423cb61a810305ac49246e308cb94bd572 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:10:45 -0400
Subject: [powerpc] Add ABIv2 support to ppc_function_entry

Message-id: <1410545655-205645-417-git-send-email-dzickus@redhat.com>
Patchwork-id: 94612
O-Subject: [RHEL7 PATCH 416/626] powerpc: Add ABIv2 support to ppc_function_entry
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit c71b7eff426fa7d8fd33e0964a7f79a3b41faff9
Author: Anton Blanchard <anton@samba.org>
Date:   Tue Feb 4 16:09:15 2014 +1100

    powerpc: Add ABIv2 support to ppc_function_entry

    Skip over the well known global entry point code for ABIv2.

    Signed-off-by: Anton Blanchard <anton@samba.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/code-patching.h b/arch/powerpc/include/asm/code-patching.h
index a6f8c7a..dd48696 100644
--- a/arch/powerpc/include/asm/code-patching.h
+++ b/arch/powerpc/include/asm/code-patching.h
@@ -35,15 +35,47 @@ unsigned long branch_target(const unsigned int *instr);
 unsigned int translate_branch(const unsigned int *dest,
          const unsigned int *src);
 
+#define OP_RT_RA_MASK 0xffff0000UL
+#define LIS_R2  0x3c020000UL
+#define ADDIS_R2_R12 0x3c4c0000UL
+#define ADDI_R2_R2 0x38420000UL
+
 static inline unsigned long ppc_function_entry(void *func)
 {
-#ifdef CONFIG_PPC64
+#if defined(CONFIG_PPC64)
+#if defined(_CALL_ELF) && _CALL_ELF == 2
+ u32 *insn = func;
+
+ /*
+  * A PPC64 ABIv2 function may have a local and a global entry
+  * point. We need to use the local entry point when patching
+  * functions, so identify and step over the global entry point
+  * sequence.
+  *
+  * The global entry point sequence is always of the form:
+  *
+  * addis r2,r12,XXXX
+  * addi  r2,r2,XXXX
+  *
+  * A linker optimisation may convert the addis to lis:
+  *
+  * lis   r2,XXXX
+  * addi  r2,r2,XXXX
+  */
+ if ((((*insn & OP_RT_RA_MASK) == ADDIS_R2_R12) ||
+      ((*insn & OP_RT_RA_MASK) == LIS_R2)) &&
+     ((*(insn+1) & OP_RT_RA_MASK) == ADDI_R2_R2))
+  return (unsigned long)(insn + 2);
+ else
+  return (unsigned long)func;
+#else
  /*
-  * On PPC64 the function pointer actually points to the function's
-  * descriptor. The first entry in the descriptor is the address
-  * of the function text.
+  * On PPC64 ABIv1 the function pointer actually points to the
+  * function's descriptor. The first entry in the descriptor is the
+  * address of the function text.
   */
  return ((func_descr_t *)func)->entry;
+#endif
 #else
  return (unsigned long)func;
 #endif
-- 
1.7.1