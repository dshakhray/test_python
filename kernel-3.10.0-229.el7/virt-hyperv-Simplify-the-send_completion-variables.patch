From 8c9a0f3ef81c3714247faa7a5d6bd942b092e750 Mon Sep 17 00:00:00 2001
From: Jason Wang <jasowang@redhat.com>
Date: Mon, 29 Sep 2014 00:59:05 -0400
Subject: [virt] hyperv: Simplify the send_completion variables

Message-id: <1411952358-34104-22-git-send-email-jasowang@redhat.com>
Patchwork-id: 96785
O-Subject: [RHEL7.1 PATCH 21/34] hyperv: Simplify the send_completion variables
Bugzilla: 1146357
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Vitaly Kuznetsov <vkuznets@redhat.com>

From: Haiyang Zhang <haiyangz@microsoft.com>

Bugzilla: 1146357

The union contains only one member now, so we use the variables in it directly.

Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
Reviewed-by: K. Y. Srinivasan <kys@microsoft.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 893f66277799cd46bdf97429cc5d16a815a51273)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/hyperv/hyperv_net.h b/drivers/net/hyperv/hyperv_net.h
index c2838b3..7aa9a55 100644
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@ -137,13 +137,9 @@ struct hv_netvsc_packet {
  u16 q_idx;
  struct vmbus_channel *channel;
 
- union {
-  struct {
-   u64 send_completion_tid;
-   void *send_completion_ctx;
-   void (*send_completion)(void *context);
-  } send;
- } completion;
+ u64 send_completion_tid;
+ void *send_completion_ctx;
+ void (*send_completion)(void *context);
 
  /* This points to the memory after page_buf */
  struct rndis_message *rndis_msg;
diff --git a/drivers/net/hyperv/netvsc.c b/drivers/net/hyperv/netvsc.c
index 4f80029..0acb116 100644
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@ -480,9 +480,8 @@ static void netvsc_send_completion(struct netvsc_device *net_device,
   if (nvsc_packet) {
    q_idx = nvsc_packet->q_idx;
    channel = nvsc_packet->channel;
-   nvsc_packet->completion.send.send_completion(
-    nvsc_packet->completion.send.
-    send_completion_ctx);
+   nvsc_packet->send_completion(nvsc_packet->
+           send_completion_ctx);
   }
 
   num_outstanding_sends =
@@ -535,7 +534,7 @@ int netvsc_send(struct hv_device *device,
   0xFFFFFFFF;
  sendMessage.msg.v1_msg.send_rndis_pkt.send_buf_section_size = 0;
 
- if (packet->completion.send.send_completion)
+ if (packet->send_completion)
   req_id = (ulong)packet;
  else
   req_id = 0;
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index 83753af..c97880a 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -235,7 +235,7 @@ static void netvsc_xmit_completion(void *context)
 {
  struct hv_netvsc_packet *packet = (struct hv_netvsc_packet *)context;
  struct sk_buff *skb = (struct sk_buff *)
-  (unsigned long)packet->completion.send.send_completion_tid;
+  (unsigned long)packet->send_completion_tid;
 
  kfree(packet);
 
@@ -425,9 +425,9 @@ static int netvsc_start_xmit(struct sk_buff *skb, struct net_device *net)
     (num_data_pgs * sizeof(struct hv_page_buffer)));
 
  /* Set the completion routine */
- packet->completion.send.send_completion = netvsc_xmit_completion;
- packet->completion.send.send_completion_ctx = packet;
- packet->completion.send.send_completion_tid = (unsigned long)skb;
+ packet->send_completion = netvsc_xmit_completion;
+ packet->send_completion_ctx = packet;
+ packet->send_completion_tid = (unsigned long)skb;
 
  isvlan = packet->vlan_tci & VLAN_TAG_PRESENT;
 
diff --git a/drivers/net/hyperv/rndis_filter.c b/drivers/net/hyperv/rndis_filter.c
index d6eaa4c..888539b 100644
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@ -237,7 +237,7 @@ static int rndis_filter_send_request(struct rndis_device *dev,
    packet->page_buf[0].len;
  }
 
- packet->completion.send.send_completion = NULL;
+ packet->send_completion = NULL;
 
  ret = netvsc_send(dev->net_dev->dev, packet);
  return ret;
-- 
1.7.1