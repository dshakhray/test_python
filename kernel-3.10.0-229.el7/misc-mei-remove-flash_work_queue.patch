From a956717f227d4e76aa85187b6958c6cfaccc42ad Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 2 May 2014 14:37:00 -0400
Subject: [misc] mei: remove flash_work_queue

Message-id: <1399041470-21330-28-git-send-email-prarit@redhat.com>
Patchwork-id: 79314
O-Subject: [RHEL7.1 PATCH BZ 1088953 27/77] mei: remove flash_work_queue
Bugzilla: 1088953
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit dc844b0d99b8533d6174e5b9a369f7c2cdacfe66
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Mon Nov 11 13:26:06 2013 +0200

    mei: remove flash_work_queue

    Cancel each work properly and remove flash_work_queue.

    Quoting documentation:

    In most situations flushing the entire workqueue is overkill; you merely
    need to know that a particular work item isn't queued and isn't running.
    In such cases you should use cancel_delayed_work_sync() or
    cancel_work_sync() instead.

    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Cc: Dean Nelson <dnelson@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/init.c b/drivers/misc/mei/init.c
index 5f60430..32860f2 100644
--- a/drivers/misc/mei/init.c
+++ b/drivers/misc/mei/init.c
@@ -131,6 +131,15 @@ err:
 }
 EXPORT_SYMBOL_GPL(mei_start);
 
+
+void mei_cancel_work(struct mei_device *dev)
+{
+ cancel_work_sync(&dev->init_work);
+
+ cancel_delayed_work(&dev->timer_work);
+}
+EXPORT_SYMBOL_GPL(mei_cancel_work);
+
 /**
  * mei_reset - resets host and fw.
  *
@@ -215,16 +224,14 @@ void mei_stop(struct mei_device *dev)
 {
  dev_dbg(&dev->pdev->dev, "stopping the device.\n");
 
- flush_scheduled_work();
+ mei_cancel_work(dev);
 
- mutex_lock(&dev->device_lock);
+ mei_nfc_host_exit(dev);
 
- cancel_delayed_work(&dev->timer_work);
+ mutex_lock(&dev->device_lock);
 
  mei_wd_stop(dev);
 
- mei_nfc_host_exit();
-
  dev->dev_state = MEI_DEV_POWER_DOWN;
  mei_reset(dev, 0);
 
diff --git a/drivers/misc/mei/mei_dev.h b/drivers/misc/mei/mei_dev.h
index a1e4db3..12ee7d3 100644
--- a/drivers/misc/mei/mei_dev.h
+++ b/drivers/misc/mei/mei_dev.h
@@ -469,6 +469,7 @@ void mei_device_init(struct mei_device *dev);
 void mei_reset(struct mei_device *dev, int interrupts);
 int mei_start(struct mei_device *dev);
 void mei_stop(struct mei_device *dev);
+void mei_cancel_work(struct mei_device *dev);
 
 /*
  *  MEI interrupt functions prototype
@@ -516,7 +517,7 @@ int mei_amthif_irq_read(struct mei_device *dev, s32 *slots);
  * NFC functions
  */
 int mei_nfc_host_init(struct mei_device *dev);
-void mei_nfc_host_exit(void);
+void mei_nfc_host_exit(struct mei_device *dev);
 
 /*
  * NFC Client UUID
diff --git a/drivers/misc/mei/nfc.c b/drivers/misc/mei/nfc.c
index 994ca4a..0a89220 100644
--- a/drivers/misc/mei/nfc.c
+++ b/drivers/misc/mei/nfc.c
@@ -547,12 +547,16 @@ err:
  return ret;
 }
 
-void mei_nfc_host_exit(void)
+void mei_nfc_host_exit(struct mei_device *dev)
 {
  struct mei_nfc_dev *ndev = &nfc_dev;
 
+ cancel_work_sync(&ndev->init_work);
+
+ mutex_lock(&dev->device_lock);
  if (ndev->cl && ndev->cl->device)
   mei_cl_remove_device(ndev->cl->device);
 
  mei_nfc_free(ndev);
+ mutex_unlock(&dev->device_lock);
 }
diff --git a/drivers/misc/mei/pci-me.c b/drivers/misc/mei/pci-me.c
index 0d2a5de..49d34dd 100644
--- a/drivers/misc/mei/pci-me.c
+++ b/drivers/misc/mei/pci-me.c
@@ -226,8 +226,8 @@ static int mei_me_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
  return 0;
 
 release_irq:
+ mei_cancel_work(dev);
  mei_disable_interrupts(dev);
- flush_scheduled_work();
  free_irq(pdev->irq, dev);
 disable_msi:
  pci_disable_msi(pdev);
-- 
1.7.1