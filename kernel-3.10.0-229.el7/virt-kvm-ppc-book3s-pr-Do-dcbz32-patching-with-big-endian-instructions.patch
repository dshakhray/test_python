From dc6b30785fc2ad8f6be2780a4c304f998f955534 Mon Sep 17 00:00:00 2001
From: David Gibson <dgibson@redhat.com>
Date: Mon, 15 Sep 2014 07:13:29 -0400
Subject: [virt] kvm/ppc: book3s/pr - Do dcbz32 patching with big endian instructions

Message-id: <1410765214-16377-74-git-send-email-dgibson@redhat.com>
Patchwork-id: 94752
O-Subject: [PATCH 73/78] KVM: PPC: Book3S PR: Do dcbz32 patching with big endian instructions
Bugzilla: 1123145 1123133 1123367
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Signed-off-by: David Gibson <dgibson@redhat.com>

commit cd087eefe637d545345ea5f888d4ea4fe52e312c
Author: Alexander Graf <agraf@suse.de>
Date:   Thu Apr 24 13:52:01 2014 +0200

    KVM: PPC: Book3S PR: Do dcbz32 patching with big endian instructions

    When the host CPU we're running on doesn't support dcbz32 itself, but the
    guest wants to have dcbz only clear 32 bytes of data, we loop through every
    executable mapped page to search for dcbz instructions and patch them with
    a special privileged instruction that we emulate as dcbz32.

    The only guests that want to see dcbz act as 32byte are book3s_32 guests, so
    we don't have to worry about little endian instruction ordering. So let's
    just always search for big endian dcbz instructions, also when we're on a
    little endian host.

    Signed-off-by: Alexander Graf <agraf@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_32_mmu.c b/arch/powerpc/kvm/book3s_32_mmu.c
index 9ab53ab..b3808b3 100644
--- a/arch/powerpc/kvm/book3s_32_mmu.c
+++ b/arch/powerpc/kvm/book3s_32_mmu.c
@@ -131,7 +131,7 @@ static hva_t kvmppc_mmu_book3s_32_get_pteg(struct kvm_vcpu *vcpu,
  pteg = (vcpu_book3s->sdr1 & 0xffff0000) | hash;
 
  dprintk("MMU: pc=0x%lx eaddr=0x%lx sdr1=0x%llx pteg=0x%x vsid=0x%x\n",
-  kvmppc_get_pc(&vcpu_book3s->vcpu), eaddr, vcpu_book3s->sdr1, pteg,
+  kvmppc_get_pc(vcpu), eaddr, vcpu_book3s->sdr1, pteg,
   sr_vsid(sre));
 
  r = gfn_to_hva(vcpu->kvm, pteg >> PAGE_SHIFT);
diff --git a/arch/powerpc/kvm/book3s_pr.c b/arch/powerpc/kvm/book3s_pr.c
index 67fa6ba..f5d8383 100644
--- a/arch/powerpc/kvm/book3s_pr.c
+++ b/arch/powerpc/kvm/book3s_pr.c
@@ -448,8 +448,8 @@ static void kvmppc_patch_dcbz(struct kvm_vcpu *vcpu, struct kvmppc_pte *pte)
 
  /* patch dcbz into reserved instruction, so we trap */
  for (i=hpage_offset; i < hpage_offset + (HW_PAGE_SIZE / 4); i++)
-  if ((page[i] & 0xff0007ff) == INS_DCBZ)
-   page[i] &= 0xfffffff7;
+  if ((be32_to_cpu(page[i]) & 0xff0007ff) == INS_DCBZ)
+   page[i] &= cpu_to_be32(0xfffffff7);
 
  kunmap_atomic(page);
  put_page(hpage);
-- 
1.7.1