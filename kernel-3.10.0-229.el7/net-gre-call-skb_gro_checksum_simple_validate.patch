From e0aa9b27cf4a25d66128d6f4d44a69e4a434bd7c Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:15:05 -0400
Subject: [net] gre: call skb_gro_checksum_simple_validate

Message-id: <1409652920-431-43-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90180
O-Subject: [PATCH 42/57] [RHEL7.1 net] gre: call skb_gro_checksum_simple_validate
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

commit 758f75d1ffa9ef482ae095f40087cf217e1f41b0
Author: Tom Herbert <therbert@google.com>
Date:   Fri Aug 22 13:34:22 2014 -0700

    gre: call skb_gro_checksum_simple_validate

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/gre_offload.c b/net/ipv4/gre_offload.c
index eb92deb..b1dd73d 100644
--- a/net/ipv4/gre_offload.c
+++ b/net/ipv4/gre_offload.c
@@ -119,28 +119,6 @@ out:
  return segs;
 }
 
-/* Compute the whole skb csum in s/w and store it, then verify GRO csum
- * starting from gro_offset.
- */
-static __sum16 gro_skb_checksum(struct sk_buff *skb)
-{
- __sum16 sum;
-
- skb->csum = skb_checksum(skb, 0, skb->len, 0);
- NAPI_GRO_CB(skb)->csum = csum_sub(skb->csum,
-  csum_partial(skb->data, skb_gro_offset(skb), 0));
- sum = csum_fold(NAPI_GRO_CB(skb)->csum);
- if (unlikely(skb->ip_summed == CHECKSUM_COMPLETE)) {
-  if (unlikely(!sum) && !skb->csum_complete_sw)
-   netdev_rx_csum_fault(skb->dev);
- } else {
-  skb->ip_summed = CHECKSUM_COMPLETE;
-  skb->csum_complete_sw = 1;
- }
-
- return sum;
-}
-
 static struct sk_buff **gre_gro_receive(struct sk_buff **head,
      struct sk_buff *skb)
 {
@@ -192,22 +170,15 @@ static struct sk_buff **gre_gro_receive(struct sk_buff **head,
   if (unlikely(!greh))
    goto out_unlock;
  }
- if (greh->flags & GRE_CSUM) { /* Need to verify GRE csum first */
-  __sum16 csum = 0;
-
-  if (skb->ip_summed == CHECKSUM_COMPLETE)
-   csum = csum_fold(NAPI_GRO_CB(skb)->csum);
-  /* Don't trust csum error calculated/reported by h/w */
-  if (skb->ip_summed == CHECKSUM_NONE || csum != 0)
-   csum = gro_skb_checksum(skb);
-
-  /* GRE CSUM is the 1's complement of the 1's complement sum
-   * of the GRE hdr plus payload so it should add up to 0xffff
-   * (and 0 after csum_fold()) just like the IPv4 hdr csum.
-   */
-  if (csum)
+
+ /* Don't bother verifying checksum if we're going to flush anyway. */
+ if (greh->flags & GRE_CSUM) {
+  if (!NAPI_GRO_CB(skb)->flush &&
+      skb_gro_checksum_simple_validate(skb))
    goto out_unlock;
+  NAPI_GRO_CB(skb)->encapsulation++;
  }
+
  flush = 0;
 
  for (p = *head; p; p = p->next) {
-- 
1.7.1