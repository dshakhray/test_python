From 53a83e08238de85d9f38a5d0a1bf5f37689da913 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:04:47 -0400
Subject: [usb] core: get config and string descriptors for unauthorized devices

Message-id: <1410887463-20674-216-git-send-email-dzickus@redhat.com>
Patchwork-id: 95410
O-Subject: [RHEL7 PATCH 215/591] usb: core: get config and string descriptors for unauthorized devices
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 83e83ecb79a8225e79bc8e54e9aff3e0e27658a2
Author: Thomas Pugliese <thomas.pugliese@gmail.com>
Date:   Mon Dec 9 13:40:29 2013 -0600

    usb: core: get config and string descriptors for unauthorized devices

    There is no need to skip querying the config and string descriptors for
    unauthorized WUSB devices when usb_new_device is called.  It is allowed
    by WUSB spec.  The only action that needs to be delayed until
    authorization time is the set config.  This change allows user mode
    tools to see the config and string descriptors earlier in enumeration
    which is needed for some WUSB devices to function properly on Android
    systems.  It also reduces the amount of divergent code paths needed
    for WUSB devices.

    Signed-off-by: Thomas Pugliese <thomas.pugliese@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/core/config.c b/drivers/usb/core/config.c
index a6b2cab..548d199 100644
--- a/drivers/usb/core/config.c
+++ b/drivers/usb/core/config.c
@@ -651,10 +651,6 @@ void usb_destroy_configuration(struct usb_device *dev)
  *
  * hub-only!! ... and only in reset path, or usb_new_device()
  * (used by real hubs and virtual root hubs)
- *
- * NOTE: if this is a WUSB device and is not authorized, we skip the
- *       whole thing. A non-authorized USB device has no
- *       configurations.
  */
 int usb_get_configuration(struct usb_device *dev)
 {
@@ -666,8 +662,6 @@ int usb_get_configuration(struct usb_device *dev)
  struct usb_config_descriptor *desc;
 
  cfgno = 0;
- if (dev->authorized == 0) /* Not really an error */
-  goto out_not_authorized;
  result = -ENOMEM;
  if (ncfg > USB_MAXCONFIG) {
   dev_warn(ddev, "too many configurations: %d, "
@@ -751,7 +745,6 @@ int usb_get_configuration(struct usb_device *dev)
 
 err:
  kfree(desc);
-out_not_authorized:
  dev->descriptor.bNumConfigurations = cfgno;
 err2:
  if (result == -ENOMEM)
diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 18a5ac3..b0448f1 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -2235,17 +2235,13 @@ static int usb_enumerate_device(struct usb_device *udev)
    return err;
   }
  }
- if (udev->wusb == 1 && udev->authorized == 0) {
-  udev->product = kstrdup("n/a (unauthorized)", GFP_KERNEL);
-  udev->manufacturer = kstrdup("n/a (unauthorized)", GFP_KERNEL);
-  udev->serial = kstrdup("n/a (unauthorized)", GFP_KERNEL);
- } else {
-  /* read the standard strings and cache them if present */
-  udev->product = usb_cache_string(udev, udev->descriptor.iProduct);
-  udev->manufacturer = usb_cache_string(udev,
-            udev->descriptor.iManufacturer);
-  udev->serial = usb_cache_string(udev, udev->descriptor.iSerialNumber);
- }
+
+ /* read the standard strings and cache them if present */
+ udev->product = usb_cache_string(udev, udev->descriptor.iProduct);
+ udev->manufacturer = usb_cache_string(udev,
+           udev->descriptor.iManufacturer);
+ udev->serial = usb_cache_string(udev, udev->descriptor.iSerialNumber);
+
  err = usb_enumerate_device_otg(udev);
  if (err < 0)
   return err;
@@ -2427,16 +2423,6 @@ int usb_deauthorize_device(struct usb_device *usb_dev)
  usb_dev->authorized = 0;
  usb_set_configuration(usb_dev, -1);
 
- kfree(usb_dev->product);
- usb_dev->product = kstrdup("n/a (unauthorized)", GFP_KERNEL);
- kfree(usb_dev->manufacturer);
- usb_dev->manufacturer = kstrdup("n/a (unauthorized)", GFP_KERNEL);
- kfree(usb_dev->serial);
- usb_dev->serial = kstrdup("n/a (unauthorized)", GFP_KERNEL);
-
- usb_destroy_configuration(usb_dev);
- usb_dev->descriptor.bNumConfigurations = 0;
-
 out_unauthorized:
  usb_unlock_device(usb_dev);
  return 0;
@@ -2464,17 +2450,7 @@ int usb_authorize_device(struct usb_device *usb_dev)
   goto error_device_descriptor;
  }
 
- kfree(usb_dev->product);
- usb_dev->product = NULL;
- kfree(usb_dev->manufacturer);
- usb_dev->manufacturer = NULL;
- kfree(usb_dev->serial);
- usb_dev->serial = NULL;
-
  usb_dev->authorized = 1;
- result = usb_enumerate_device(usb_dev);
- if (result < 0)
-  goto error_enumerate;
  /* Choose and set the configuration.  This registers the interfaces
   * with the driver core and lets interface drivers bind to them.
   */
@@ -2490,7 +2466,6 @@ int usb_authorize_device(struct usb_device *usb_dev)
  }
  dev_info(&usb_dev->dev, "authorized to connect\n");
 
-error_enumerate:
 error_device_descriptor:
  usb_autosuspend_device(usb_dev);
 error_autoresume:
-- 
1.7.1