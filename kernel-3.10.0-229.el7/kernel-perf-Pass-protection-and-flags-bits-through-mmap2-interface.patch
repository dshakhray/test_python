From aff7fa6b30b3754ba474da4c7f0171daa481882c Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:39 -0400
Subject: [kernel] perf: Pass protection and flags bits through mmap2 interface

Message-id: <1410181752-25631-35-git-send-email-jolsa@redhat.com>
Patchwork-id: 91710
O-Subject: [PATCH RHEL7.1 BZ1134356 034/307] perf: Pass protection and flags bits through mmap2 interface
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit f972eb63b1003fae68d7b7e9b674d4ba5db681c2
Author: Peter Zijlstra <a.p.zijlstra@chello.nl>
Date: Mon May 19 15:13:47 2014 -0400

description
===========
The mmap2 interface was missing the protection and flags bits needed to
accurately determine if a mmap memory area was shared or private and
if it was readable or not.

[tweaked patch to compile and wrote changelog]
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/uapi/linux/perf_event.h b/include/uapi/linux/perf_event.h
index 7f96d2b..5707609 100644
--- a/include/uapi/linux/perf_event.h
+++ b/include/uapi/linux/perf_event.h
@@ -710,6 +710,7 @@ enum perf_event_type {
   * u32    min;
   * u64    ino;
   * u64    ino_generation;
+  * u32    prot, flags;
   * char    filename[];
   *  struct sample_id  sample_id;
   * };
diff --git a/kernel/events/core.c b/kernel/events/core.c
index 3c9ede3..54fef4d 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -40,6 +40,7 @@
 #include <linux/mm_types.h>
 #include <linux/cgroup.h>
 #include <linux/module.h>
+#include <linux/mman.h>
 
 #include "internal.h"
 
@@ -5132,6 +5133,7 @@ struct perf_mmap_event {
  int   maj, min;
  u64   ino;
  u64   ino_generation;
+ u32   prot, flags;
 
  struct {
   struct perf_event_header header;
@@ -5173,6 +5175,8 @@ static void perf_event_mmap_output(struct perf_event *event,
   mmap_event->event_id.header.size += sizeof(mmap_event->min);
   mmap_event->event_id.header.size += sizeof(mmap_event->ino);
   mmap_event->event_id.header.size += sizeof(mmap_event->ino_generation);
+  mmap_event->event_id.header.size += sizeof(mmap_event->prot);
+  mmap_event->event_id.header.size += sizeof(mmap_event->flags);
  }
 
  perf_event_header__init_id(&mmap_event->event_id.header, &sample, event);
@@ -5191,6 +5195,8 @@ static void perf_event_mmap_output(struct perf_event *event,
   perf_output_put(&handle, mmap_event->min);
   perf_output_put(&handle, mmap_event->ino);
   perf_output_put(&handle, mmap_event->ino_generation);
+  perf_output_put(&handle, mmap_event->prot);
+  perf_output_put(&handle, mmap_event->flags);
  }
 
  __output_copy(&handle, mmap_event->file_name,
@@ -5209,6 +5215,7 @@ static void perf_event_mmap_event(struct perf_mmap_event *mmap_event)
  struct file *file = vma->vm_file;
  int maj = 0, min = 0;
  u64 ino = 0, gen = 0;
+ u32 prot = 0, flags = 0;
  unsigned int size;
  char tmp[16];
  char *buf = NULL;
@@ -5239,6 +5246,28 @@ static void perf_event_mmap_event(struct perf_mmap_event *mmap_event)
   gen = inode->i_generation;
   maj = MAJOR(dev);
   min = MINOR(dev);
+
+  if (vma->vm_flags & VM_READ)
+   prot |= PROT_READ;
+  if (vma->vm_flags & VM_WRITE)
+   prot |= PROT_WRITE;
+  if (vma->vm_flags & VM_EXEC)
+   prot |= PROT_EXEC;
+
+  if (vma->vm_flags & VM_MAYSHARE)
+   flags = MAP_SHARED;
+  else
+   flags = MAP_PRIVATE;
+
+  if (vma->vm_flags & VM_DENYWRITE)
+   flags |= MAP_DENYWRITE;
+  if (vma->vm_flags & VM_MAYEXEC)
+   flags |= MAP_EXECUTABLE;
+  if (vma->vm_flags & VM_LOCKED)
+   flags |= MAP_LOCKED;
+  if (vma->vm_flags & VM_HUGETLB)
+   flags |= MAP_HUGETLB;
+
   goto got_name;
  } else {
   name = (char *)arch_vma_name(vma);
@@ -5279,6 +5308,8 @@ got_name:
  mmap_event->min = min;
  mmap_event->ino = ino;
  mmap_event->ino_generation = gen;
+ mmap_event->prot = prot;
+ mmap_event->flags = flags;
 
  if (!(vma->vm_flags & VM_EXEC))
   mmap_event->event_id.header.misc |= PERF_RECORD_MISC_MMAP_DATA;
@@ -5319,6 +5350,8 @@ void perf_event_mmap(struct vm_area_struct *vma)
   /* .min (attr_mmap2 only) */
   /* .ino (attr_mmap2 only) */
   /* .ino_generation (attr_mmap2 only) */
+  /* .prot (attr_mmap2 only) */
+  /* .flags (attr_mmap2 only) */
  };
 
  perf_event_mmap_event(&mmap_event);
-- 
1.7.1