From ff2ffd254652656955cecb8cc9ff9aa2633bf331 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:03:43 -0400
Subject: [fs] btrfs: don't access non-existent key when csum tree is empty

Message-id: <1407179109-13714-337-git-send-email-sandeen@redhat.com>
Patchwork-id: 87359
O-Subject: [RHEL7.1 PATCH 336/422] Btrfs: don't access non-existent key when csum tree is empty
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit 35045bf2fd7c030f2583dbd80a2015f427778bf1
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Wed Apr 9 14:38:34 2014 +0100

    Btrfs: don't access non-existent key when csum tree is empty

    When the csum tree is empty, our leaf (path->nodes[0]) has a number
    of items equal to 0 and since btrfs_header_nritems() returns an
    unsigned integer (and so is our local nritems variable) the following
    comparison always evaluates to false:

         if (path->slots[0] >= nritems - 1) {

    As the casting rules lead to:

         if ((u32)0 >= (u32)4294967295) {

    This makes us access key at slot paths->slots[0] + 1 (1) of the empty leaf
    some lines below:

        btrfs_item_key_to_cpu(path->nodes[0], &found_key, slot);
        if (found_key.objectid != BTRFS_EXTENT_CSUM_OBJECTID ||
            found_key.type != BTRFS_EXTENT_CSUM_KEY) {
      found_next = 1;
      goto insert;
        }

    So just don't access such non-existent slot and don't set found_next to 1
    when the tree is empty. It's very unlikely we'll get a random key with the
    objectid and type values above, which is where we could go into trouble.

    If nritems is 0, just set found_next to 1 anyway as it will make us insert
    a csum item covering our whole extent (or the whole leaf) when the tree is
    empty.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/file-item.c b/fs/btrfs/file-item.c
index 344b89c..d2ae8e4 100644
--- a/fs/btrfs/file-item.c
+++ b/fs/btrfs/file-item.c
@@ -749,7 +749,7 @@ again:
   int slot = path->slots[0] + 1;
   /* we didn't find a csum item, insert one */
   nritems = btrfs_header_nritems(path->nodes[0]);
-  if (path->slots[0] >= nritems - 1) {
+  if (!nritems || (path->slots[0] >= nritems - 1)) {
    ret = btrfs_next_leaf(root, path);
    if (ret == 1)
     found_next = 1;
-- 
1.7.1