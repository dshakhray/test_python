From 4b5296e845ba4c1bc9a90c28fc1bb55f1f707aa9 Mon Sep 17 00:00:00 2001
From: Jacob Tanenbaum <jtanenba@redhat.com>
Date: Fri, 25 Jul 2014 14:47:15 -0400
Subject: [kernel] ptrace: get_dumpable() incorrect tests

Message-id: <1406299635-19036-1-git-send-email-jtanenba@redhat.com>
Patchwork-id: 86685
O-Subject: [RHEL7 PATCH BZ1111606] CVE-2013-2929 kernel: exec/ptrace: get_dumpable() incorrect tests [rhel-7.1]
Bugzilla: 1111606
CVE: CVE-2013-2929
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

The get_dumpable() return value is not boolean.  Most users of the
function actually want to be testing for non-SUID_DUMP_USER(1) rather
than SUID_DUMP_DISABLE(0).  The SUID_DUMP_ROOT(2) is also considered a
protected state.

If the system had set the sysctl fs.suid_dumpable=2, a user was able to
ptrace attach to processes that he would otherwise be unable to because
of the dumpable check.

Backport of the following:
commit d049f74f2dbe71354d43d393ac3a188947811348
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Nov 12 15:11:17 2013 -0800

exec/ptrace: fix get_dumpable() incorrect tests

The get_dumpable() return value is not boolean. Most users of the
function actually want to be testing for non-SUID_DUMP_USER(1) rather
than SUID_DUMP_DISABLE(0). The SUID_DUMP_ROOT(2) is also considered a
protected state. Almost all places did this correctly, excepting the two
places fixed in this patch.

 Wrong logic:
 if (dumpable == SUID_DUMP_DISABLE) { /* be protective */ }
  or
 if (dumpable == 0) { /* be protective */ }
  or
 if (!dumpable) { /* be protective */ }

Correct logic:
 if (dumpable != SUID_DUMP_USER) { /* be protective */ }
  or
 if (dumpable != 1) { /* be protective */ }

Without this patch, if the system had set the sysctl fs/suid_dumpable=2, a
user was able to ptrace attach to processes that had dropped privileges to
that user. (This may have been partially mitigated if Yama was enabled.)

The macros have been moved into the file that declares get/set_dumpable(),
which means things like the ia64 code can see them too.

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1111606
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7717655
Beaker: https://beaker.engineering.redhat.com/jobs/700771

Notes:
There was an issue with the /kernel/RHEL7/perf/sanity/test but it
appears to be assosiated with "Bug 1054767 perf test 21 sporadically
failing"

https://bugzilla.redhat.com/show_bug.cgi?id=1054767
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/ia64/include/asm/processor.h b/arch/ia64/include/asm/processor.h
index e0a899a..5a84b3a 100644
--- a/arch/ia64/include/asm/processor.h
+++ b/arch/ia64/include/asm/processor.h
@@ -319,7 +319,7 @@ struct thread_struct {
  regs->loadrs = 0;         \
  regs->r8 = get_dumpable(current->mm); /* set "don't zap registers" flag */  \
  regs->r12 = new_sp - 16; /* allocate 16 byte scratch area */   \
- if (unlikely(!get_dumpable(current->mm))) {       \
+ if (unlikely(get_dumpable(current->mm) != SUID_DUMP_USER)) { \
   /*          \
    * Zap scratch regs to avoid leaking bits between processes with different \
    * uid/privileges.        \
diff --git a/fs/exec.c b/fs/exec.c
index 5025719..4ba6694 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1666,6 +1666,12 @@ int __get_dumpable(unsigned long mm_flags)
  return (ret > SUID_DUMP_USER) ? SUID_DUMP_ROOT : ret;
 }
 
+/*
+ * This returns the actual value of the suid_dumpable flag. For things
+ * that are using this for checking for privilege transitions, it must
+ * test against SUID_DUMP_USER rather than treating it as a boolean
+ * value.
+ */
 int get_dumpable(struct mm_struct *mm)
 {
  return __get_dumpable(mm->flags);
diff --git a/include/linux/binfmts.h b/include/linux/binfmts.h
index 70cf138..df97ca4 100644
--- a/include/linux/binfmts.h
+++ b/include/linux/binfmts.h
@@ -99,9 +99,6 @@ extern void setup_new_exec(struct linux_binprm * bprm);
 extern void would_dump(struct linux_binprm *, struct file *);
 
 extern int suid_dumpable;
-#define SUID_DUMP_DISABLE 0 /* No setuid dumping */
-#define SUID_DUMP_USER  1 /* Dump as user of process */
-#define SUID_DUMP_ROOT  2 /* Dump as root */
 
 /* Stack area protections */
 #define EXSTACK_DEFAULT   0 /* Whatever the arch defaults to */
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 51dd261..912a5bb 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -340,6 +340,10 @@ static inline void arch_pick_mmap_layout(struct mm_struct *mm) {}
 extern void set_dumpable(struct mm_struct *mm, int value);
 extern int get_dumpable(struct mm_struct *mm);
 
+#define SUID_DUMP_DISABLE 0 /* No setuid dumping */
+#define SUID_DUMP_USER  1 /* Dump as user of process */
+#define SUID_DUMP_ROOT  2 /* Dump as root */
+
 /* mm flags */
 /* dumpable bits */
 #define MMF_DUMPABLE      0  /* core dump is permitted */
diff --git a/kernel/ptrace.c b/kernel/ptrace.c
index 335a7ae..afadcf7 100644
--- a/kernel/ptrace.c
+++ b/kernel/ptrace.c
@@ -257,7 +257,8 @@ ok:
  if (task->mm)
   dumpable = get_dumpable(task->mm);
  rcu_read_lock();
- if (!dumpable && !ptrace_has_cap(__task_cred(task)->user_ns, mode)) {
+ if (dumpable != SUID_DUMP_USER &&
+     !ptrace_has_cap(__task_cred(task)->user_ns, mode)) {
   rcu_read_unlock();
   return -EPERM;
  }
-- 
1.7.1