From d43cb6baa09bd0d8c7924fd0c7d813c014e5b887 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:01:53 -0400
Subject: [usb] ehci: use consistent NO_FRAME value

Message-id: <1410887463-20674-42-git-send-email-dzickus@redhat.com>
Patchwork-id: 95268
O-Subject: [RHEL7 PATCH 041/591] USB: EHCI: use consistent NO_FRAME value
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 91a99b5e78849db90dc2f5e8dfa034af43bdb760
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Oct 11 11:28:52 2013 -0400

    USB: EHCI: use consistent NO_FRAME value

    ehci-hcd is inconsistent in the sentinel values it uses to indicate
    that no frame number has been assigned for a periodic transfer.  Some
    places it uses NO_FRAME (defined as 65535), other places it uses -1,
    and elsewhere it uses 9999.

    This patch defines a value for NO_FRAME which can fit in a 16-bit
    signed integer, and changes the code to use it everywhere.

    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/ehci-sched.c b/drivers/usb/host/ehci-sched.c
index 1fc2bef..37e97a7 100644
--- a/drivers/usb/host/ehci-sched.c
+++ b/drivers/usb/host/ehci-sched.c
@@ -813,7 +813,7 @@ static int qh_schedule(struct ehci_hcd *ehci, struct ehci_qh *qh)
  frame = qh->start;
 
  /* reuse the previous schedule slots, if we can */
- if (frame < qh->period) {
+ if (frame != NO_FRAME) {
   uframe = ffs(hc32_to_cpup(ehci, &hw->hw_info2) & QH_SMASK);
   status = check_intr_schedule (ehci, frame, --uframe,
     qh, &c_mask);
@@ -969,7 +969,7 @@ iso_stream_alloc (gfp_t mem_flags)
  if (likely (stream != NULL)) {
   INIT_LIST_HEAD(&stream->td_list);
   INIT_LIST_HEAD(&stream->free_list);
-  stream->next_uframe = -1;
+  stream->next_uframe = NO_FRAME;
  }
  return stream;
 }
@@ -1236,7 +1236,7 @@ itd_urb_transaction (
 
   memset (itd, 0, sizeof *itd);
   itd->itd_dma = itd_dma;
-  itd->frame = 9999;  /* an invalid value */
+  itd->frame = NO_FRAME;
   list_add (&itd->itd_list, &sched->td_list);
  }
  spin_unlock_irqrestore (&ehci->lock, flags);
@@ -1967,7 +1967,7 @@ sitd_urb_transaction (
 
   memset (sitd, 0, sizeof *sitd);
   sitd->sitd_dma = sitd_dma;
-  sitd->frame = 9999;  /* an invalid value */
+  sitd->frame = NO_FRAME;
   list_add (&sitd->sitd_list, &iso_sched->td_list);
  }
 
diff --git a/drivers/usb/host/ehci.h b/drivers/usb/host/ehci.h
index d636c74..a365e93 100644
--- a/drivers/usb/host/ehci.h
+++ b/drivers/usb/host/ehci.h
@@ -54,6 +54,8 @@ struct ehci_stats {
  unsigned long  unlink;
 };
 
+#define NO_FRAME 29999   /* frame not assigned yet */
+
 /* ehci_hcd->lock guards shared data against other CPUs:
  *   ehci_hcd: async, unlink, periodic (and shadow), ...
  *   usb_host_endpoint: hcpriv
@@ -404,7 +406,6 @@ struct ehci_qh {
  u16   tt_usecs; /* tt downstream bandwidth */
  unsigned short  period;  /* polling interval */
  unsigned short  start;  /* where polling starts */
-#define NO_FRAME ((unsigned short)~0)   /* pick new start */
 
  struct usb_device *dev;  /* access to TT */
  unsigned  is_out:1; /* bulk or intr OUT */
@@ -453,7 +454,7 @@ struct ehci_iso_stream {
  struct usb_host_endpoint *ep;
 
  /* output of (re)scheduling */
- int   next_uframe;
+ unsigned  next_uframe;
  __hc32   splits;
 
  /* the rest is derived from the endpoint descriptor,
-- 
1.7.1