From f21eac1f087f34990afb7a1c3db1e7eb50f61405 Mon Sep 17 00:00:00 2001
From: Stanislaw Gruszka <sgruszka@redhat.com>
Date: Wed, 10 Dec 2014 10:29:25 -0500
Subject: [wireless] nl80211: clear skb cb before passing to netlink

Message-id: <1418207389-7899-12-git-send-email-sgruszka@redhat.com>
Patchwork-id: 101583
O-Subject: [RHEL7.1 PATCH 11/35] nl80211: clear skb cb before passing to netlink
Bugzilla: 1155538
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: John Greene <jogreene@redhat.com>

From: Johannes Berg <johannes.berg@intel.com>

BZ#1155538

commit bd8c78e78d5011d8111bc2533ee73b13a3bd6c42 upstream.

In testmode and vendor command reply/event SKBs we use the
skb cb data to store nl80211 parameters between allocation
and sending. This causes the code for CONFIG_NETLINK_MMAP
to get confused, because it takes ownership of the skb cb
data when the SKB is handed off to netlink, and it doesn't
explicitly clear it.

Clear the skb cb explicitly when we're done and before it
gets passed to netlink to avoid this issue.

Reported-by: Assaf Azulay <assaf.azulay@intel.com>
Reported-by: David Spinadel <david.spinadel@intel.com>
Signed-off-by: Johannes Berg <johannes.berg@intel.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Brew:
https://brewweb.devel.redhat.com/taskinfo?taskID=8330268

Testing:
Tested on Intel, Atheros and Ralink hardware.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 6668daf..d702af4 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -6978,6 +6978,9 @@ void __cfg80211_send_event_skb(struct sk_buff *skb, gfp_t gfp)
  struct nlattr *data = ((void **)skb->cb)[2];
  enum nl80211_multicast_groups mcgrp = NL80211_MCGRP_TESTMODE;
 
+ /* clear CB data for netlink core to own from now on */
+ memset(skb->cb, 0, sizeof(skb->cb));
+
  nla_nest_end(skb, data);
  genlmsg_end(skb, hdr);
 
@@ -9300,6 +9303,9 @@ int cfg80211_vendor_cmd_reply(struct sk_buff *skb)
  void *hdr = ((void **)skb->cb)[1];
  struct nlattr *data = ((void **)skb->cb)[2];
 
+ /* clear CB data for netlink core to own from now on */
+ memset(skb->cb, 0, sizeof(skb->cb));
+
  if (WARN_ON(!rdev->cur_cmd_info)) {
   kfree_skb(skb);
   return -EINVAL;
-- 
1.7.1