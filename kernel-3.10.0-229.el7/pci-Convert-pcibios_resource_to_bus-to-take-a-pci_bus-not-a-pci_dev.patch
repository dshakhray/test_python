From ce83ff0a2f8d3b54af42e48443827dc5d84808df Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sat, 19 Jul 2014 04:25:27 -0400
Subject: [pci] Convert pcibios_resource_to_bus() to take a pci_bus, not a pci_dev

Message-id: <20140719042527.19438.99695.stgit@gir.stowe>
Patchwork-id: 85988
O-Subject: [RHEL7.1 PATCH 26/81] PCI: Convert pcibios_resource_to_bus() to take a pci_bus, not a pci_dev
Bugzilla: 1110895
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110895
Upstream Status: fc2798502f860b18f3c7121e4dc659d3d9d28d74

Note: did not bring in hunks related to unsupported architectures (alpha,
sparc).

commit fc2798502f860b18f3c7121e4dc659d3d9d28d74
Author: Yinghai Lu <yinghai@kernel.org>
Date:   Mon Dec 9 22:54:40 2013 -0800

    PCI: Convert pcibios_resource_to_bus() to take a pci_bus, not a pci_dev

    These interfaces:

      pcibios_resource_to_bus(struct pci_dev *dev, *bus_region, *resource)
      pcibios_bus_to_resource(struct pci_dev *dev, *resource, *bus_region)

    took a pci_dev, but they really depend only on the pci_bus.  And we want to
    use them in resource allocation paths where we have the bus but not a
    device, so this patch converts them to take the pci_bus instead of the
    pci_dev:

      pcibios_resource_to_bus(struct pci_bus *bus, *bus_region, *resource)
      pcibios_bus_to_resource(struct pci_bus *bus, *resource, *bus_region)

    In fact, with standard PCI-PCI bridges, they only depend on the host
    bridge, because that's the only place address translation occurs, but
    we aren't going that far yet.

    [bhelgaas: changelog]
    Signed-off-by: Yinghai Lu <yinghai@kernel.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/pci-common.c b/arch/powerpc/kernel/pci-common.c
index 905a24b..c0f585a 100644
--- a/arch/powerpc/kernel/pci-common.c
+++ b/arch/powerpc/kernel/pci-common.c
@@ -836,7 +836,7 @@ static void pcibios_fixup_resources(struct pci_dev *dev)
    * at 0 as unset as well, except if PCI_PROBE_ONLY is also set
    * since in that case, we don't want to re-assign anything
    */
-  pcibios_resource_to_bus(dev, &reg, res);
+  pcibios_resource_to_bus(dev->bus, &reg, res);
   if (pci_has_flag(PCI_REASSIGN_ALL_RSRC) ||
       (reg.start == 0 && !pci_has_flag(PCI_PROBE_ONLY))) {
    /* Only print message if not re-assigning */
@@ -887,7 +887,7 @@ static int pcibios_uninitialized_bridge_resource(struct pci_bus *bus,
 
  /* Job is a bit different between memory and IO */
  if (res->flags & IORESOURCE_MEM) {
-  pcibios_resource_to_bus(dev, &region, res);
+  pcibios_resource_to_bus(dev->bus, &region, res);
 
   /* If the BAR is non-0 then it's probably been initialized */
   if (region.start != 0)
diff --git a/arch/powerpc/kernel/pci_of_scan.c b/arch/powerpc/kernel/pci_of_scan.c
index ac0b034..83c26d8 100644
--- a/arch/powerpc/kernel/pci_of_scan.c
+++ b/arch/powerpc/kernel/pci_of_scan.c
@@ -111,7 +111,7 @@ static void of_pci_parse_addrs(struct device_node *node, struct pci_dev *dev)
   res->name = pci_name(dev);
   region.start = base;
   region.end = base + size - 1;
-  pcibios_bus_to_resource(dev, res, &region);
+  pcibios_bus_to_resource(dev->bus, res, &region);
  }
 }
 
@@ -280,7 +280,7 @@ void of_scan_pci_bridge(struct pci_dev *dev)
   res->flags = flags;
   region.start = of_read_number(&ranges[1], 2);
   region.end = region.start + size - 1;
-  pcibios_bus_to_resource(dev, res, &region);
+  pcibios_bus_to_resource(dev->bus, res, &region);
  }
  sprintf(bus->name, "PCI Bus %04x:%02x", pci_domain_nr(bus),
   bus->number);
diff --git a/drivers/pci/host-bridge.c b/drivers/pci/host-bridge.c
index a68dc61..06ace62 100644
--- a/drivers/pci/host-bridge.c
+++ b/drivers/pci/host-bridge.c
@@ -9,22 +9,19 @@
 
 #include "pci.h"
 
-static struct pci_bus *find_pci_root_bus(struct pci_dev *dev)
+static struct pci_bus *find_pci_root_bus(struct pci_bus *bus)
 {
- struct pci_bus *bus;
-
- bus = dev->bus;
  while (bus->parent)
   bus = bus->parent;
 
  return bus;
 }
 
-static struct pci_host_bridge *find_pci_host_bridge(struct pci_dev *dev)
+static struct pci_host_bridge *find_pci_host_bridge(struct pci_bus *bus)
 {
- struct pci_bus *bus = find_pci_root_bus(dev);
+ struct pci_bus *root_bus = find_pci_root_bus(bus);
 
- return to_pci_host_bridge(bus->bridge);
+ return to_pci_host_bridge(root_bus->bridge);
 }
 
 void pci_set_host_bridge_release(struct pci_host_bridge *bridge,
@@ -40,10 +37,10 @@ static bool resource_contains(struct resource *res1, struct resource *res2)
  return res1->start <= res2->start && res1->end >= res2->end;
 }
 
-void pcibios_resource_to_bus(struct pci_dev *dev, struct pci_bus_region *region,
+void pcibios_resource_to_bus(struct pci_bus *bus, struct pci_bus_region *region,
         struct resource *res)
 {
- struct pci_host_bridge *bridge = find_pci_host_bridge(dev);
+ struct pci_host_bridge *bridge = find_pci_host_bridge(bus);
  struct pci_host_bridge_window *window;
  resource_size_t offset = 0;
 
@@ -68,10 +65,10 @@ static bool region_contains(struct pci_bus_region *region1,
  return region1->start <= region2->start && region1->end >= region2->end;
 }
 
-void pcibios_bus_to_resource(struct pci_dev *dev, struct resource *res,
+void pcibios_bus_to_resource(struct pci_bus *bus, struct resource *res,
         struct pci_bus_region *region)
 {
- struct pci_host_bridge *bridge = find_pci_host_bridge(dev);
+ struct pci_host_bridge *bridge = find_pci_host_bridge(bus);
  struct pci_host_bridge_window *window;
  resource_size_t offset = 0;
 
diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index 1e4f7b4..0b5a010 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -306,8 +306,8 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
   region.end = l + sz;
  }
 
- pcibios_bus_to_resource(dev, res, &region);
- pcibios_resource_to_bus(dev, &inverted_region, res);
+ pcibios_bus_to_resource(dev->bus, res, &region);
+ pcibios_resource_to_bus(dev->bus, &inverted_region, res);
 
  /*
   * If "A" is a BAR value (a bus address), "bus_to_resource(A)" is
@@ -401,7 +401,7 @@ static void pci_read_bridge_io(struct pci_bus *child)
   res->flags = (io_base_lo & PCI_IO_RANGE_TYPE_MASK) | IORESOURCE_IO;
   region.start = base;
   region.end = limit + io_granularity - 1;
-  pcibios_bus_to_resource(dev, res, &region);
+  pcibios_bus_to_resource(dev->bus, res, &region);
   dev_printk(KERN_DEBUG, &dev->dev, "  bridge window %pR\n", res);
  }
 }
@@ -423,7 +423,7 @@ static void pci_read_bridge_mmio(struct pci_bus *child)
   res->flags = (mem_base_lo & PCI_MEMORY_RANGE_TYPE_MASK) | IORESOURCE_MEM;
   region.start = base;
   region.end = limit + 0xfffff;
-  pcibios_bus_to_resource(dev, res, &region);
+  pcibios_bus_to_resource(dev->bus, res, &region);
   dev_printk(KERN_DEBUG, &dev->dev, "  bridge window %pR\n", res);
  }
 }
@@ -473,7 +473,7 @@ static void pci_read_bridge_mmio_pref(struct pci_bus *child)
    res->flags |= IORESOURCE_MEM_64;
   region.start = base;
   region.end = limit + 0xfffff;
-  pcibios_bus_to_resource(dev, res, &region);
+  pcibios_bus_to_resource(dev->bus, res, &region);
   dev_printk(KERN_DEBUG, &dev->dev, "  bridge window %pR\n", res);
  }
 }
@@ -1127,24 +1127,24 @@ int pci_setup_device(struct pci_dev *dev)
     region.end = 0x1F7;
     res = &dev->resource[0];
     res->flags = LEGACY_IO_RESOURCE;
-    pcibios_bus_to_resource(dev, res, &region);
+    pcibios_bus_to_resource(dev->bus, res, &region);
     region.start = 0x3F6;
     region.end = 0x3F6;
     res = &dev->resource[1];
     res->flags = LEGACY_IO_RESOURCE;
-    pcibios_bus_to_resource(dev, res, &region);
+    pcibios_bus_to_resource(dev->bus, res, &region);
    }
    if ((progif & 4) == 0) {
     region.start = 0x170;
     region.end = 0x177;
     res = &dev->resource[2];
     res->flags = LEGACY_IO_RESOURCE;
-    pcibios_bus_to_resource(dev, res, &region);
+    pcibios_bus_to_resource(dev->bus, res, &region);
     region.start = 0x376;
     region.end = 0x376;
     res = &dev->resource[3];
     res->flags = LEGACY_IO_RESOURCE;
-    pcibios_bus_to_resource(dev, res, &region);
+    pcibios_bus_to_resource(dev->bus, res, &region);
    }
   }
   break;
diff --git a/drivers/pci/quirks.c b/drivers/pci/quirks.c
index e1a0779..791cb79 100644
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@ -343,7 +343,7 @@ static void quirk_io_region(struct pci_dev *dev, int port,
  /* Convert from PCI bus to resource space */
  bus_region.start = region;
  bus_region.end = region + size - 1;
- pcibios_bus_to_resource(dev, res, &bus_region);
+ pcibios_bus_to_resource(dev->bus, res, &bus_region);
 
  if (!pci_claim_resource(dev, nr))
   dev_info(&dev->dev, "quirk: %pR claimed by %s\n", res, name);
diff --git a/drivers/pci/rom.c b/drivers/pci/rom.c
index c5d0a08..5d59572 100644
--- a/drivers/pci/rom.c
+++ b/drivers/pci/rom.c
@@ -31,7 +31,7 @@ int pci_enable_rom(struct pci_dev *pdev)
  if (!res->flags)
   return -1;
 
- pcibios_resource_to_bus(pdev, &region, res);
+ pcibios_resource_to_bus(pdev->bus, &region, res);
  pci_read_config_dword(pdev, pdev->rom_base_reg, &rom_addr);
  rom_addr &= ~PCI_ROM_ADDRESS_MASK;
  rom_addr |= region.start | PCI_ROM_ADDRESS_ENABLE;
diff --git a/drivers/pci/setup-bus.c b/drivers/pci/setup-bus.c
index 2e344a5..138bdd6 100644
--- a/drivers/pci/setup-bus.c
+++ b/drivers/pci/setup-bus.c
@@ -475,7 +475,7 @@ void pci_setup_cardbus(struct pci_bus *bus)
    &bus->busn_res);
 
  res = bus->resource[0];
- pcibios_resource_to_bus(bridge, &region, res);
+ pcibios_resource_to_bus(bridge->bus, &region, res);
  if (res->flags & IORESOURCE_IO) {
   /*
    * The IO resource is allocated a range twice as large as it
@@ -489,7 +489,7 @@ void pci_setup_cardbus(struct pci_bus *bus)
  }
 
  res = bus->resource[1];
- pcibios_resource_to_bus(bridge, &region, res);
+ pcibios_resource_to_bus(bridge->bus, &region, res);
  if (res->flags & IORESOURCE_IO) {
   dev_info(&bridge->dev, "  bridge window %pR\n", res);
   pci_write_config_dword(bridge, PCI_CB_IO_BASE_1,
@@ -499,7 +499,7 @@ void pci_setup_cardbus(struct pci_bus *bus)
  }
 
  res = bus->resource[2];
- pcibios_resource_to_bus(bridge, &region, res);
+ pcibios_resource_to_bus(bridge->bus, &region, res);
  if (res->flags & IORESOURCE_MEM) {
   dev_info(&bridge->dev, "  bridge window %pR\n", res);
   pci_write_config_dword(bridge, PCI_CB_MEMORY_BASE_0,
@@ -509,7 +509,7 @@ void pci_setup_cardbus(struct pci_bus *bus)
  }
 
  res = bus->resource[3];
- pcibios_resource_to_bus(bridge, &region, res);
+ pcibios_resource_to_bus(bridge->bus, &region, res);
  if (res->flags & IORESOURCE_MEM) {
   dev_info(&bridge->dev, "  bridge window %pR\n", res);
   pci_write_config_dword(bridge, PCI_CB_MEMORY_BASE_1,
@@ -547,7 +547,7 @@ static void pci_setup_bridge_io(struct pci_bus *bus)
 
  /* Set up the top and bottom of the PCI I/O segment for this bus. */
  res = bus->resource[0];
- pcibios_resource_to_bus(bridge, &region, res);
+ pcibios_resource_to_bus(bridge->bus, &region, res);
  if (res->flags & IORESOURCE_IO) {
   pci_read_config_word(bridge, PCI_IO_BASE, &l);
   io_base_lo = (region.start >> 8) & io_mask;
@@ -578,7 +578,7 @@ static void pci_setup_bridge_mmio(struct pci_bus *bus)
 
  /* Set up the top and bottom of the PCI Memory segment for this bus. */
  res = bus->resource[1];
- pcibios_resource_to_bus(bridge, &region, res);
+ pcibios_resource_to_bus(bridge->bus, &region, res);
  if (res->flags & IORESOURCE_MEM) {
   l = (region.start >> 16) & 0xfff0;
   l |= region.end & 0xfff00000;
@@ -604,7 +604,7 @@ static void pci_setup_bridge_mmio_pref(struct pci_bus *bus)
  /* Set up PREF base/limit. */
  bu = lu = 0;
  res = bus->resource[2];
- pcibios_resource_to_bus(bridge, &region, res);
+ pcibios_resource_to_bus(bridge->bus, &region, res);
  if (res->flags & IORESOURCE_PREFETCH) {
   l = (region.start >> 16) & 0xfff0;
   l |= region.end & 0xfff00000;
@@ -1424,7 +1424,7 @@ static int iov_resources_unassigned(struct pci_dev *dev, void *data)
   if (!r->flags)
    continue;
 
-  pcibios_resource_to_bus(dev, &region, r);
+  pcibios_resource_to_bus(dev->bus, &region, r);
   if (!region.start) {
    *unassigned = true;
    return 1; /* return early from pci_walk_bus() */
diff --git a/drivers/pci/setup-res.c b/drivers/pci/setup-res.c
index 83c4d3b..5c060b1 100644
--- a/drivers/pci/setup-res.c
+++ b/drivers/pci/setup-res.c
@@ -52,7 +52,7 @@ void pci_update_resource(struct pci_dev *dev, int resno)
  if (res->flags & IORESOURCE_PCI_FIXED)
   return;
 
- pcibios_resource_to_bus(dev, &region, res);
+ pcibios_resource_to_bus(dev->bus, &region, res);
 
  new = region.start | (res->flags & PCI_REGION_FLAG_MASK);
  if (res->flags & IORESOURCE_IO)
diff --git a/drivers/pcmcia/i82092.c b/drivers/pcmcia/i82092.c
index 519c4d6..7d47456 100644
--- a/drivers/pcmcia/i82092.c
+++ b/drivers/pcmcia/i82092.c
@@ -608,7 +608,7 @@ static int i82092aa_set_mem_map(struct pcmcia_socket *socket, struct pccard_mem_
  
  enter("i82092aa_set_mem_map");
 
- pcibios_resource_to_bus(sock_info->dev, &region, mem->res);
+ pcibios_resource_to_bus(sock_info->dev->bus, &region, mem->res);
  
  map = mem->map;
  if (map > 4) {
diff --git a/drivers/pcmcia/yenta_socket.c b/drivers/pcmcia/yenta_socket.c
index 6b4ff09..acc129e 100644
--- a/drivers/pcmcia/yenta_socket.c
+++ b/drivers/pcmcia/yenta_socket.c
@@ -445,7 +445,7 @@ static int yenta_set_mem_map(struct pcmcia_socket *sock, struct pccard_mem_map *
  unsigned int start, stop, card_start;
  unsigned short word;
 
- pcibios_resource_to_bus(socket->dev, &region, mem->res);
+ pcibios_resource_to_bus(socket->dev->bus, &region, mem->res);
 
  map = mem->map;
  start = region.start;
@@ -709,7 +709,7 @@ static int yenta_allocate_res(struct yenta_socket *socket, int nr, unsigned type
  region.start = config_readl(socket, addr_start) & mask;
  region.end = config_readl(socket, addr_end) | ~mask;
  if (region.start && region.end > region.start && !override_bios) {
-  pcibios_bus_to_resource(dev, res, &region);
+  pcibios_bus_to_resource(dev->bus, res, &region);
   if (pci_claim_resource(dev, PCI_BRIDGE_RESOURCES + nr) == 0)
    return 0;
   dev_printk(KERN_INFO, &dev->dev,
@@ -1033,7 +1033,7 @@ static void yenta_config_init(struct yenta_socket *socket)
  struct pci_dev *dev = socket->dev;
  struct pci_bus_region region;
 
- pcibios_resource_to_bus(socket->dev, &region, &dev->resource[0]);
+ pcibios_resource_to_bus(socket->dev->bus, &region, &dev->resource[0]);
 
  config_writel(socket, CB_LEGACY_MODE_BASE, 0);
  config_writel(socket, PCI_BASE_ADDRESS_0, region.start);
diff --git a/drivers/scsi/sym53c8xx_2/sym_glue.c b/drivers/scsi/sym53c8xx_2/sym_glue.c
index bac55f7..6d3ee1a 100644
--- a/drivers/scsi/sym53c8xx_2/sym_glue.c
+++ b/drivers/scsi/sym53c8xx_2/sym_glue.c
@@ -1531,7 +1531,7 @@ static int sym_iomap_device(struct sym_device *device)
  struct pci_bus_region bus_addr;
  int i = 2;
 
- pcibios_resource_to_bus(pdev, &bus_addr, &pdev->resource[1]);
+ pcibios_resource_to_bus(pdev->bus, &bus_addr, &pdev->resource[1]);
  device->mmio_base = bus_addr.start;
 
  if (device->chip.features & FE_RAM) {
@@ -1541,7 +1541,8 @@ static int sym_iomap_device(struct sym_device *device)
    */
   if (!pdev->resource[i].flags)
    i++;
-  pcibios_resource_to_bus(pdev, &bus_addr, &pdev->resource[i]);
+  pcibios_resource_to_bus(pdev->bus, &bus_addr,
+     &pdev->resource[i]);
   device->ram_base = bus_addr.start;
  }
 
diff --git a/drivers/video/arkfb.c b/drivers/video/arkfb.c
index 94a51f1..e3d447c 100644
--- a/drivers/video/arkfb.c
+++ b/drivers/video/arkfb.c
@@ -1014,7 +1014,7 @@ static int ark_pci_probe(struct pci_dev *dev, const struct pci_device_id *id)
 
  vga_res.flags = IORESOURCE_IO;
 
- pcibios_bus_to_resource(dev, &vga_res, &bus_reg);
+ pcibios_bus_to_resource(dev->bus, &vga_res, &bus_reg);
 
  par->state.vgabase = (void __iomem *) vga_res.start;
 
diff --git a/drivers/video/s3fb.c b/drivers/video/s3fb.c
index 47ca86c..e465a9a 100644
--- a/drivers/video/s3fb.c
+++ b/drivers/video/s3fb.c
@@ -1181,7 +1181,7 @@ static int s3_pci_probe(struct pci_dev *dev, const struct pci_device_id *id)
 
  vga_res.flags = IORESOURCE_IO;
 
- pcibios_bus_to_resource(dev, &vga_res, &bus_reg);
+ pcibios_bus_to_resource(dev->bus, &vga_res, &bus_reg);
 
  par->state.vgabase = (void __iomem *) vga_res.start;
 
diff --git a/drivers/video/vt8623fb.c b/drivers/video/vt8623fb.c
index e9557fa..af7465c 100644
--- a/drivers/video/vt8623fb.c
+++ b/drivers/video/vt8623fb.c
@@ -727,7 +727,7 @@ static int vt8623_pci_probe(struct pci_dev *dev, const struct pci_device_id *id)
 
  vga_res.flags = IORESOURCE_IO;
 
- pcibios_bus_to_resource(dev, &vga_res, &bus_reg);
+ pcibios_bus_to_resource(dev->bus, &vga_res, &bus_reg);
 
  par->state.vgabase = (void __iomem *) vga_res.start;
 
diff --git a/include/linux/pci.h b/include/linux/pci.h
index c320ade..6f15d61 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -796,9 +796,9 @@ void pci_fixup_cardbus(struct pci_bus *);
 
 /* Generic PCI functions used internally */
 
-void pcibios_resource_to_bus(struct pci_dev *dev, struct pci_bus_region *region,
+void pcibios_resource_to_bus(struct pci_bus *bus, struct pci_bus_region *region,
         struct resource *res);
-void pcibios_bus_to_resource(struct pci_dev *dev, struct resource *res,
+void pcibios_bus_to_resource(struct pci_bus *bus, struct resource *res,
         struct pci_bus_region *region);
 void pcibios_scan_specific_bus(int busn);
 struct pci_bus *pci_find_bus(int domain, int busnr);
-- 
1.7.1