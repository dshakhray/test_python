From c80d781ee85d21db0036aeffa44aba5008f0d7fa Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:19:30 -0400
Subject: [fs] sunrpc: svc_tcp_write_space: don't clear SOCK_NOSPACE prematurely

Message-id: <1410898849-22126-87-git-send-email-bfields@redhat.com>
Patchwork-id: 95846
O-Subject: [Patch RHEL7 086/165] SUNRPC: svc_tcp_write_space: don't clear SOCK_NOSPACE prematurely
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

If requests are queued in the socket inbuffer waiting for an
svc_tcp_has_wspace() requirement to be satisfied, then we do not want
to clear the SOCK_NOSPACE flag until we've satisfied that requirement.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: c7fb3f0631b8d66b90e0642a95b948febb3f3cee
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 net/sunrpc/svcsock.c
Bugzilla: 1044798
---

diff --git a/net/sunrpc/svcsock.c b/net/sunrpc/svcsock.c
index 2cfe7d4..cd530b8 100644
--- a/net/sunrpc/svcsock.c
+++ b/net/sunrpc/svcsock.c
@@ -446,11 +446,31 @@ static void svc_write_space(struct sock *sk)
  }
 }
 
+static int svc_tcp_has_wspace(struct svc_xprt *xprt)
+{
+ struct svc_sock *svsk = container_of(xprt, struct svc_sock, sk_xprt);
+ struct svc_serv *serv = svsk->sk_xprt.xpt_server;
+ int required;
+
+ if (test_bit(XPT_LISTENER, &xprt->xpt_flags))
+  return 1;
+ required = atomic_read(&xprt->xpt_reserved) + serv->sv_max_mesg;
+ if (sk_stream_wspace(svsk->sk_sk) >= required ||
+     (sk_stream_min_wspace(svsk->sk_sk) == 0 &&
+      atomic_read(&xprt->xpt_reserved) == 0))
+  return 1;
+ set_bit(SOCK_NOSPACE, &svsk->sk_sock->flags);
+ return 0;
+}
+
 static void svc_tcp_write_space(struct sock *sk)
 {
+ struct svc_sock *svsk = (struct svc_sock *)(sk->sk_user_data);
  struct socket *sock = sk->sk_socket;
 
- if (sk_stream_wspace(sk) >= sk_stream_min_wspace(sk) && sock)
+ if (!(sk_stream_wspace(sk) >= sk_stream_min_wspace(sk)) || !sock)
+  return;
+ if (!svsk || svc_tcp_has_wspace(&svsk->sk_xprt))
   clear_bit(SOCK_NOSPACE, &sock->flags);
  svc_write_space(sk);
 }
@@ -1198,23 +1218,6 @@ static void svc_tcp_prep_reply_hdr(struct svc_rqst *rqstp)
  svc_putnl(resv, 0);
 }
 
-static int svc_tcp_has_wspace(struct svc_xprt *xprt)
-{
- struct svc_sock *svsk = container_of(xprt, struct svc_sock, sk_xprt);
- struct svc_serv *serv = svsk->sk_xprt.xpt_server;
- int required;
-
- if (test_bit(XPT_LISTENER, &xprt->xpt_flags))
-  return 1;
- required = atomic_read(&xprt->xpt_reserved) + serv->sv_max_mesg;
- if (sk_stream_wspace(svsk->sk_sk) >= required ||
-     (sk_stream_min_wspace(svsk->sk_sk) == 0 &&
-      atomic_read(&xprt->xpt_reserved) == 0))
-  return 1;
- set_bit(SOCK_NOSPACE, &svsk->sk_sock->flags);
- return 0;
-}
-
 static struct svc_xprt *svc_tcp_create(struct svc_serv *serv,
            struct net *net,
            struct sockaddr *sa, int salen,
-- 
1.7.1