From f9edf3522d8be935d1d2745f03881c50c4dc921a Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:19:07 -0400
Subject: [fs] nfsd4: zero op arguments beyond the 8th compound op

Message-id: <1410898849-22126-64-git-send-email-bfields@redhat.com>
Patchwork-id: 95765
O-Subject: [Patch RHEL7 063/165] nfsd4: zero op arguments beyond the 8th compound op
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

The first 8 ops of the compound are zeroed since they're a part of the
argument that's zeroed by the

 memset(rqstp->rq_argp, 0, procp->pc_argsize);

in svc_process_common().  But we handle larger compounds by allocating
the memory on the fly in nfsd4_decode_compound().  Other than code
recently fixed by 01529e3f8179 "NFSD: Fix memory leak in encoding denied
lock", I don't know of any examples of code depending on this
initialization. But it definitely seems possible, and I'd rather be
safe.

Compounds this long are unusual so I'm much more worried about failure
in this poorly tested cases than about an insignificant performance hit.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 5d6031ca742f9f07b9c9d9322538619f3bd155ac
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 08677a2..671c206 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -1635,7 +1635,7 @@ nfsd4_decode_compound(struct nfsd4_compoundargs *argp)
   goto xdr_error;
 
  if (argp->opcnt > ARRAY_SIZE(argp->iops)) {
-  argp->ops = kmalloc(argp->opcnt * sizeof(*argp->ops), GFP_KERNEL);
+  argp->ops = kzalloc(argp->opcnt * sizeof(*argp->ops), GFP_KERNEL);
   if (!argp->ops) {
    argp->ops = argp->iops;
    dprintk("nfsd: couldn't allocate room for COMPOUND\n");
-- 
1.7.1