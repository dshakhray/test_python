From 42c5918c39037e0327feb89716293f2fb4d5a0b8 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Wed, 29 Oct 2014 16:34:40 -0400
Subject: [fs] ext4: add ext4_iget_normal() which is to be used for dir tree lookups

Message-id: <1414600485-1929-51-git-send-email-lczerner@redhat.com>
Patchwork-id: 98566
O-Subject: [RHEL 7.1 PATCH v2 50/55] ext4: add ext4_iget_normal() which is to be used for dir tree lookups
Bugzilla: 1156096
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1156096
https://bugzilla.redhat.com/show_bug.cgi?id=1156096

BREW 8169722
https://brewweb.devel.redhat.com/taskinfo?taskID=8169722

Upstream commit f4bb2981024fc91b23b4d09a8817c415396dbabb

 If there is a corrupted file system which has directory entries that
 point at reserved, metadata inodes, prohibit them from being used by
 treating them the same way we treat Boot Loader inodes --- that is,
 mark them to be bad inodes.  This prohibits them from being opened,
 deleted, or modified via chmod, chown, utimes, etc.

 In particular, this prevents a corrupted file system which has a
 directory entry which points at the journal inode from being deleted
 and its blocks released, after which point Much Hilarity Ensues.

 Reported-by: Sami Liedes <sami.liedes@iki.fi>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Cc: stable@vger.kernel.org
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index f6f90cb..f8a4e99 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2118,6 +2118,7 @@ int do_journal_get_write_access(handle_t *handle,
 #define CONVERT_INLINE_DATA  2
 
 extern struct inode *ext4_iget(struct super_block *, unsigned long);
+extern struct inode *ext4_iget_normal(struct super_block *, unsigned long);
 extern int  ext4_write_inode(struct inode *, struct writeback_control *);
 extern int  ext4_setattr(struct dentry *, struct iattr *);
 extern int  ext4_getattr(struct vfsmount *mnt, struct dentry *dentry,
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 921f83c..341164a 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -4144,6 +4144,13 @@ bad_inode:
  return ERR_PTR(ret);
 }
 
+struct inode *ext4_iget_normal(struct super_block *sb, unsigned long ino)
+{
+ if (ino < EXT4_FIRST_INO(sb) && ino != EXT4_ROOT_INO)
+  return ERR_PTR(-EIO);
+ return ext4_iget(sb, ino);
+}
+
 static int ext4_inode_blocks_set(handle_t *handle,
     struct ext4_inode *raw_inode,
     struct ext4_inode_info *ei)
diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index 537895f..62b19b0 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -1441,7 +1441,7 @@ static struct dentry *ext4_lookup(struct inode *dir, struct dentry *dentry, unsi
       dentry);
    return ERR_PTR(-EIO);
   }
-  inode = ext4_iget(dir->i_sb, ino);
+  inode = ext4_iget_normal(dir->i_sb, ino);
   if (inode == ERR_PTR(-ESTALE)) {
    EXT4_ERROR_INODE(dir,
       "deleted inode referenced: %u",
@@ -1474,7 +1474,7 @@ struct dentry *ext4_get_parent(struct dentry *child)
   return ERR_PTR(-EIO);
  }
 
- return d_obtain_alias(ext4_iget(child->d_inode->i_sb, ino));
+ return d_obtain_alias(ext4_iget_normal(child->d_inode->i_sb, ino));
 }
 
 /*
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index e0759ca..349f3a2 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -1001,7 +1001,7 @@ static struct inode *ext4_nfs_get_inode(struct super_block *sb,
   * Currently we don't know the generation for parent directory, so
   * a generation of 0 means "accept any"
   */
- inode = ext4_iget(sb, ino);
+ inode = ext4_iget_normal(sb, ino);
  if (IS_ERR(inode))
   return ERR_CAST(inode);
  if (generation && inode->i_generation != generation) {
-- 
1.7.1