From a503e2c31eb30812efdebfa5792180e4279521d7 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:23:14 -0400
Subject: [tools] perf: Factor out strncpy() in perf_event_mmap_event()

Message-id: <1408462094-14194-26-git-send-email-jolsa@redhat.com>
Patchwork-id: 88008
O-Subject: [PATCH RHEL7.1 BZ1131394 025/325] perf: Factor out strncpy() in perf_event_mmap_event()
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit c7e548b45ce85f765f6262149dd60d9956a31d60
Author: Oleg Nesterov <oleg@redhat.com>
Date: Thu Oct 17 20:24:17 2013 +0200

description
===========
While this is really minor, but strncpy() does the unnecessary
zero-padding till the end of tmp[16] and it is called every time
we are going to use the string literal.

Turn these strncpy()'s into the single strlcpy() under the new
label, saves 72 bytes.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index 03419ed..8e9844d 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -5138,8 +5138,8 @@ static void perf_event_mmap_event(struct perf_mmap_event *mmap_event)
 
   buf = kmalloc(PATH_MAX, GFP_KERNEL);
   if (!buf) {
-   name = strncpy(tmp, "//enomem", sizeof(tmp));
-   goto got_name;
+   name = "//enomem";
+   goto cpy_name;
   }
   /*
    * d_path() works from the end of the rb backwards, so we
@@ -5148,8 +5148,8 @@ static void perf_event_mmap_event(struct perf_mmap_event *mmap_event)
    */
   name = d_path(&file->f_path, buf, PATH_MAX - sizeof(u64));
   if (IS_ERR(name)) {
-   name = strncpy(tmp, "//toolong", sizeof(tmp));
-   goto got_name;
+   name = "//toolong";
+   goto cpy_name;
   }
   inode = file_inode(vma->vm_file);
   dev = inode->i_sb->s_dev;
@@ -5157,30 +5157,30 @@ static void perf_event_mmap_event(struct perf_mmap_event *mmap_event)
   gen = inode->i_generation;
   maj = MAJOR(dev);
   min = MINOR(dev);
-
+  goto got_name;
  } else {
   name = (char *)arch_vma_name(vma);
-  if (name) {
-   name = strncpy(tmp, name, sizeof(tmp) - 1);
-   tmp[sizeof(tmp) - 1] = '\0';
-   goto got_name;
-  }
+  if (name)
+   goto cpy_name;
 
   if (vma->vm_start <= vma->vm_mm->start_brk &&
     vma->vm_end >= vma->vm_mm->brk) {
-   name = strncpy(tmp, "[heap]", sizeof(tmp));
-   goto got_name;
+   name = "[heap]";
+   goto cpy_name;
   }
   if (vma->vm_start <= vma->vm_mm->start_stack &&
     vma->vm_end >= vma->vm_mm->start_stack) {
-   name = strncpy(tmp, "[stack]", sizeof(tmp));
-   goto got_name;
+   name = "[stack]";
+   goto cpy_name;
   }
 
-  name = strncpy(tmp, "//anon", sizeof(tmp));
-  goto got_name;
+  name = "//anon";
+  goto cpy_name;
  }
 
+cpy_name:
+ strlcpy(tmp, name, sizeof(tmp));
+ name = tmp;
 got_name:
  /*
   * Since our buffer works in 8 byte units we need to align our string
-- 
1.7.1