From 3ea0e7076b3feb012ee56338bb90015514d8909f Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:38 -0400
Subject: [cpufreq] move policy kobj to update_policy_cpu()

Message-id: <1409235879-1283-185-git-send-email-prarit@redhat.com>
Patchwork-id: 89529
O-Subject: [RHEL7.1 PATCH BZ 1134639 184/185] cpufreq: move policy kobj to update_policy_cpu()
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 1bfb425b3b6bf30f5d4b851049b2057dce860bfd
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Jul 17 10:48:28 2014 +0530

    cpufreq: move policy kobj to update_policy_cpu()

    We are calling kobject_move() from two separate places currently and both these
    places share another routine update_policy_cpu() which is handling everything
    around updating policy->cpu. Moving ownership of policy->kobj also lies under
    the role of update_policy_cpu() routine and must be handled from there.

    So, Lets move kobject_move() to update_policy_cpu() and get rid of
    cpufreq_nominate_new_policy_cpu() as it doesn't have anything significant left.

    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 7a432c1..afa4109 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1076,10 +1076,20 @@ static void cpufreq_policy_free(struct cpufreq_policy *policy)
  kfree(policy);
 }
 
-static void update_policy_cpu(struct cpufreq_policy *policy, unsigned int cpu)
+static int update_policy_cpu(struct cpufreq_policy *policy, unsigned int cpu,
+        struct device *cpu_dev)
 {
+ int ret;
+
  if (WARN_ON(cpu == policy->cpu))
-  return;
+  return 0;
+
+ /* Move kobject to the new policy->cpu */
+ ret = kobject_move(&policy->kobj, &cpu_dev->kobj);
+ if (ret) {
+  pr_err("%s: Failed to move kobj: %d\n", __func__, ret);
+  return ret;
+ }
 
  down_write(&policy->rwsem);
 
@@ -1090,6 +1100,8 @@ static void update_policy_cpu(struct cpufreq_policy *policy, unsigned int cpu)
 
  blocking_notifier_call_chain(&cpufreq_policy_notifier_list,
    CPUFREQ_UPDATE_POLICY_CPU, policy);
+
+ return 0;
 }
 
 static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)
@@ -1153,12 +1165,10 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)
   * the creation of a brand new one. So we need to perform this update
   * by invoking update_policy_cpu().
   */
- if (recover_policy && cpu != policy->cpu) {
-  update_policy_cpu(policy, cpu);
-  WARN_ON(kobject_move(&policy->kobj, &dev->kobj));
- } else {
+ if (recover_policy && cpu != policy->cpu)
+  WARN_ON(update_policy_cpu(policy, cpu, dev));
+ else
   policy->cpu = cpu;
- }
 
  cpumask_copy(policy->cpus, cpumask_of(cpu));
 
@@ -1307,35 +1317,11 @@ static int cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)
  return __cpufreq_add_dev(dev, sif);
 }
 
-static int cpufreq_nominate_new_policy_cpu(struct cpufreq_policy *policy,
-        unsigned int old_cpu)
-{
- struct device *cpu_dev;
- int ret;
-
- /* first sibling now owns the new sysfs dir */
- cpu_dev = get_cpu_device(cpumask_any_but(policy->cpus, old_cpu));
-
- sysfs_remove_link(&cpu_dev->kobj, "cpufreq");
- ret = kobject_move(&policy->kobj, &cpu_dev->kobj);
- if (ret) {
-  pr_err("%s: Failed to move kobj: %d\n", __func__, ret);
-
-  if (sysfs_create_link(&cpu_dev->kobj, &policy->kobj, "cpufreq"))
-   pr_err("%s: Failed to restore kobj link to cpu:%d\n",
-          __func__, cpu_dev->id);
-
-  return ret;
- }
-
- return cpu_dev->id;
-}
-
 static int __cpufreq_remove_dev_prepare(struct device *dev,
      struct subsys_interface *sif)
 {
  unsigned int cpu = dev->id, cpus;
- int new_cpu, ret;
+ int ret;
  unsigned long flags;
  struct cpufreq_policy *policy;
 
@@ -1375,14 +1361,23 @@ static int __cpufreq_remove_dev_prepare(struct device *dev,
  if (cpu != policy->cpu) {
   sysfs_remove_link(&dev->kobj, "cpufreq");
  } else if (cpus > 1) {
-  new_cpu = cpufreq_nominate_new_policy_cpu(policy, cpu);
-  if (new_cpu >= 0) {
-   update_policy_cpu(policy, new_cpu);
+  /* Nominate new CPU */
+  int new_cpu = cpumask_any_but(policy->cpus, cpu);
+  struct device *cpu_dev = get_cpu_device(new_cpu);
 
-   if (!cpufreq_suspended)
-    pr_debug("%s: policy Kobject moved to cpu: %d from: %d\n",
-      __func__, new_cpu, cpu);
+  sysfs_remove_link(&cpu_dev->kobj, "cpufreq");
+  ret = update_policy_cpu(policy, new_cpu, cpu_dev);
+  if (ret) {
+   if (sysfs_create_link(&cpu_dev->kobj, &policy->kobj,
+           "cpufreq"))
+    pr_err("%s: Failed to restore kobj link to cpu:%d\n",
+           __func__, cpu_dev->id);
+   return ret;
   }
+
+  if (!cpufreq_suspended)
+   pr_debug("%s: policy Kobject moved to cpu: %d from: %d\n",
+     __func__, new_cpu, cpu);
  } else if (cpufreq_driver->stop_cpu && cpufreq_driver->setpolicy) {
   cpufreq_driver->stop_cpu(policy);
  }
-- 
1.7.1