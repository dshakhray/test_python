From 2f63c99abbcabfc5c9df5c471f12bc21358c431e Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:04:05 -0400
Subject: [fs] btrfs: send, use the right limits for xattr names and values

Message-id: <1407179109-13714-359-git-send-email-sandeen@redhat.com>
Patchwork-id: 87301
O-Subject: [RHEL7.1 PATCH 358/422] Btrfs: send, use the right limits for xattr names and values
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit 7e3ae33efad1490d01040f552ef50e58ed6376ca
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Fri May 23 20:15:16 2014 +0100

    Btrfs: send, use the right limits for xattr names and values

    We were limiting the sum of the xattr name and value lengths to PATH_MAX,
    which is not correct, specially on filesystems created with btrfs-progs
    v3.12 or higher, where the default leaf size is max(16384, PAGE_SIZE), or
    systems with page sizes larger than 4096 bytes.

    Xattrs have their own specific maximum name and value lengths, which depend
    on the leaf size, therefore use these limits to be able to send xattrs with
    sizes larger than PATH_MAX.

    A test case for xfstests follows.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/send.c b/fs/btrfs/send.c
index 15cdc67..6528aa6 100644
--- a/fs/btrfs/send.c
+++ b/fs/btrfs/send.c
@@ -975,7 +975,7 @@ static int iterate_dir_item(struct btrfs_root *root, struct btrfs_path *path,
  struct btrfs_dir_item *di;
  struct btrfs_key di_key;
  char *buf = NULL;
- const int buf_len = PATH_MAX;
+ int buf_len;
  u32 name_len;
  u32 data_len;
  u32 cur;
@@ -985,6 +985,11 @@ static int iterate_dir_item(struct btrfs_root *root, struct btrfs_path *path,
  int num;
  u8 type;
 
+ if (found_key->type == BTRFS_XATTR_ITEM_KEY)
+  buf_len = BTRFS_MAX_XATTR_SIZE(root);
+ else
+  buf_len = PATH_MAX;
+
  buf = kmalloc(buf_len, GFP_NOFS);
  if (!buf) {
   ret = -ENOMEM;
@@ -1006,12 +1011,23 @@ static int iterate_dir_item(struct btrfs_root *root, struct btrfs_path *path,
   type = btrfs_dir_type(eb, di);
   btrfs_dir_item_key_to_cpu(eb, di, &di_key);
 
-  /*
-   * Path too long
-   */
-  if (name_len + data_len > buf_len) {
-   ret = -ENAMETOOLONG;
-   goto out;
+  if (type == BTRFS_FT_XATTR) {
+   if (name_len > XATTR_NAME_MAX) {
+    ret = -ENAMETOOLONG;
+    goto out;
+   }
+   if (name_len + data_len > buf_len) {
+    ret = -E2BIG;
+    goto out;
+   }
+  } else {
+   /*
+    * Path too long
+    */
+   if (name_len + data_len > buf_len) {
+    ret = -ENAMETOOLONG;
+    goto out;
+   }
   }
 
   read_extent_buffer(eb, buf, (unsigned long)(di + 1),
-- 
1.7.1