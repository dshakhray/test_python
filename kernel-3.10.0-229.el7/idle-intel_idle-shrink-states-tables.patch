From b1e09c41f165bedaccc41fde11bdcdddbbfc764d Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Mon, 14 Jul 2014 18:58:29 -0400
Subject: [idle] intel_idle: shrink states tables

Message-id: <1405364315-27440-2-git-send-email-prarit@redhat.com>
Patchwork-id: 85795
O-Subject: [RHEL7.1 PATCH BZ 1119374 1/7] intel_idle: shrink states tables
Bugzilla: 1119374
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1119374

commit eba682a5aeb6c9bf08a9751f8d3ecafe043d8f88
Author: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
Date:   Fri Aug 30 12:25:10 2013 +0200

    intel_idle: shrink states tables

    There is no reason to define CPUIDLE_STATE_MAX (currently 10) entries
    in states tables if the driver always stops iterating over table when
    it encounters first .enter == NULL entry.

    $ size drivers/idle/intel_idle.o.*
       text    data     bss     dec     hex filename
       2886    5440      32    8358    20a6 drivers/idle/intel_idle.o.before
       2886    3752      32    6670    1a0e drivers/idle/intel_idle.o.after

    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c
index 1fcf905..7a0b537 100644
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@ -123,7 +123,7 @@ static struct cpuidle_state *cpuidle_state_table;
  * which is also the index into the MWAIT hint array.
  * Thus C0 is a dummy.
  */
-static struct cpuidle_state nehalem_cstates[CPUIDLE_STATE_MAX] = {
+static struct cpuidle_state nehalem_cstates[] = {
  {
   .name = "C1-NHM",
   .desc = "MWAIT 0x00",
@@ -156,7 +156,7 @@ static struct cpuidle_state nehalem_cstates[CPUIDLE_STATE_MAX] = {
   .enter = NULL }
 };
 
-static struct cpuidle_state snb_cstates[CPUIDLE_STATE_MAX] = {
+static struct cpuidle_state snb_cstates[] = {
  {
   .name = "C1-SNB",
   .desc = "MWAIT 0x00",
@@ -196,7 +196,7 @@ static struct cpuidle_state snb_cstates[CPUIDLE_STATE_MAX] = {
   .enter = NULL }
 };
 
-static struct cpuidle_state ivb_cstates[CPUIDLE_STATE_MAX] = {
+static struct cpuidle_state ivb_cstates[] = {
  {
   .name = "C1-IVB",
   .desc = "MWAIT 0x00",
@@ -236,7 +236,7 @@ static struct cpuidle_state ivb_cstates[CPUIDLE_STATE_MAX] = {
   .enter = NULL }
 };
 
-static struct cpuidle_state hsw_cstates[CPUIDLE_STATE_MAX] = {
+static struct cpuidle_state hsw_cstates[] = {
  {
   .name = "C1-HSW",
   .desc = "MWAIT 0x00",
@@ -297,7 +297,7 @@ static struct cpuidle_state hsw_cstates[CPUIDLE_STATE_MAX] = {
   .enter = NULL }
 };
 
-static struct cpuidle_state atom_cstates[CPUIDLE_STATE_MAX] = {
+static struct cpuidle_state atom_cstates[] = {
  {
   .name = "C1E-ATM",
   .desc = "MWAIT 0x00",
@@ -631,7 +631,7 @@ static int intel_idle_cpu_init(int cpu)
   int num_substates, mwait_hint, mwait_cstate, mwait_substate;
 
   if (cpuidle_state_table[cstate].enter == NULL)
-   continue;
+   break;
 
   if (cstate + 1 > max_cstate) {
    printk(PREFIX "max_cstate %d reached\n", max_cstate);
-- 
1.7.1