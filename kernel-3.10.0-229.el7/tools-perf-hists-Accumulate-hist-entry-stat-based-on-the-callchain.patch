From 6d299bd0acc2b4295bf2267e7a99c5b7d129042c Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:03 -0400
Subject: [tools] perf/hists: Accumulate hist entry stat based on the callchain

Message-id: <1410181752-25631-239-git-send-email-jolsa@redhat.com>
Patchwork-id: 91821
O-Subject: [PATCH RHEL7.1 BZ1134356 238/307] perf hists: Accumulate hist entry stat based on the callchain
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 7a13aa28aa268359cee006059731f49bcd1f839e
Author: Namhyung Kim <namhyung@kernel.org>
Date: Tue Sep 11 14:13:04 2012 +0900

description
===========
Call __hists__add_entry() for each callchain node to get an
accumulated stat for an entry.  Introduce new cumulative_iter ops to
process them properly.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index 3201bdf..e8fa9fe 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -115,6 +115,8 @@ static int process_sample_event(struct perf_tool *tool,
   iter.ops = &hist_iter_branch;
  else if (rep->mem_mode)
   iter.ops = &hist_iter_mem;
+ else if (symbol_conf.cumulate_callchain)
+  iter.ops = &hist_iter_cumulative;
  else
   iter.ops = &hist_iter_normal;
 
diff --git a/tools/perf/util/callchain.c b/tools/perf/util/callchain.c
index 9a42382..2af69c4 100644
--- a/tools/perf/util/callchain.c
+++ b/tools/perf/util/callchain.c
@@ -616,7 +616,8 @@ int sample__resolve_callchain(struct perf_sample *sample, struct symbol **parent
  if (sample->callchain == NULL)
   return 0;
 
- if (symbol_conf.use_callchain || sort__has_parent) {
+ if (symbol_conf.use_callchain || symbol_conf.cumulate_callchain ||
+     sort__has_parent) {
   return machine__resolve_callchain(al->machine, evsel, al->thread,
         sample, parent, al, max_stack);
  }
diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index b9facf3..6079b5a 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -696,6 +696,94 @@ iter_finish_normal_entry(struct hist_entry_iter *iter, struct addr_location *al)
  return hist_entry__append_callchain(he, sample);
 }
 
+static int
+iter_prepare_cumulative_entry(struct hist_entry_iter *iter __maybe_unused,
+         struct addr_location *al __maybe_unused)
+{
+ callchain_cursor_commit(&callchain_cursor);
+ return 0;
+}
+
+static int
+iter_add_single_cumulative_entry(struct hist_entry_iter *iter,
+     struct addr_location *al)
+{
+ struct perf_evsel *evsel = iter->evsel;
+ struct perf_sample *sample = iter->sample;
+ struct hist_entry *he;
+ int err = 0;
+
+ he = __hists__add_entry(&evsel->hists, al, iter->parent, NULL, NULL,
+    sample->period, sample->weight,
+    sample->transaction, true);
+ if (he == NULL)
+  return -ENOMEM;
+
+ iter->he = he;
+
+ /*
+  * The iter->he will be over-written after ->add_next_entry()
+  * called so inc stats for the original entry now.
+  */
+ if (ui__has_annotation())
+  err = hist_entry__inc_addr_samples(he, evsel->idx, al->addr);
+
+ hists__inc_nr_samples(&evsel->hists, he->filtered);
+
+ return err;
+}
+
+static int
+iter_next_cumulative_entry(struct hist_entry_iter *iter,
+      struct addr_location *al)
+{
+ struct callchain_cursor_node *node;
+
+ node = callchain_cursor_current(&callchain_cursor);
+ if (node == NULL)
+  return 0;
+
+ al->map = node->map;
+ al->sym = node->sym;
+ if (node->map)
+  al->addr = node->map->map_ip(node->map, node->ip);
+ else
+  al->addr = node->ip;
+
+ if (iter->hide_unresolved && al->sym == NULL)
+  return 0;
+
+ callchain_cursor_advance(&callchain_cursor);
+ return 1;
+}
+
+static int
+iter_add_next_cumulative_entry(struct hist_entry_iter *iter,
+          struct addr_location *al)
+{
+ struct perf_evsel *evsel = iter->evsel;
+ struct perf_sample *sample = iter->sample;
+ struct hist_entry *he;
+
+ he = __hists__add_entry(&evsel->hists, al, iter->parent, NULL, NULL,
+    sample->period, sample->weight,
+    sample->transaction, false);
+ if (he == NULL)
+  return -ENOMEM;
+
+ iter->he = he;
+
+ return 0;
+}
+
+static int
+iter_finish_cumulative_entry(struct hist_entry_iter *iter,
+        struct addr_location *al __maybe_unused)
+{
+ iter->he = NULL;
+ return 0;
+}
+
 const struct hist_iter_ops hist_iter_mem = {
  .prepare_entry   = iter_prepare_mem_entry,
  .add_single_entry  = iter_add_single_mem_entry,
@@ -720,6 +808,14 @@ const struct hist_iter_ops hist_iter_normal = {
  .finish_entry   = iter_finish_normal_entry,
 };
 
+const struct hist_iter_ops hist_iter_cumulative = {
+ .prepare_entry   = iter_prepare_cumulative_entry,
+ .add_single_entry  = iter_add_single_cumulative_entry,
+ .next_entry   = iter_next_cumulative_entry,
+ .add_next_entry  = iter_add_next_cumulative_entry,
+ .finish_entry   = iter_finish_cumulative_entry,
+};
+
 int hist_entry_iter__add(struct hist_entry_iter *iter, struct addr_location *al,
     struct perf_evsel *evsel, struct perf_sample *sample,
     int max_stack_depth)
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index bedb24d..78409f9 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -124,6 +124,7 @@ struct hist_entry_iter {
 extern const struct hist_iter_ops hist_iter_normal;
 extern const struct hist_iter_ops hist_iter_branch;
 extern const struct hist_iter_ops hist_iter_mem;
+extern const struct hist_iter_ops hist_iter_cumulative;
 
 struct hist_entry *__hists__add_entry(struct hists *hists,
           struct addr_location *al,
-- 
1.7.1