From 08b3dc4c8cbd59a3678a9f88851f36a38c4199e0 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:05 -0400
Subject: [tools] perf/report: Cache cumulative callchains

Message-id: <1410181752-25631-241-git-send-email-jolsa@redhat.com>
Patchwork-id: 91825
O-Subject: [PATCH RHEL7.1 BZ1134356 240/307] perf report: Cache cumulative callchains
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit b4d3c8bd86c4eda08456691121f83b4e1db46866
Author: Namhyung Kim <namhyung@kernel.org>
Date: Thu Oct 31 10:05:29 2013 +0900

description
===========
It is possble that a callchain has cycles or recursive calls.  In that
case it'll end up having entries more than 100% overhead in the
output.  In order to prevent such entries, cache each callchain node
and skip if same entry already cumulated.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index 37c28fc..bf03db5 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -700,7 +700,22 @@ static int
 iter_prepare_cumulative_entry(struct hist_entry_iter *iter __maybe_unused,
          struct addr_location *al __maybe_unused)
 {
+ struct hist_entry **he_cache;
+
  callchain_cursor_commit(&callchain_cursor);
+
+ /*
+  * This is for detecting cycles or recursions so that they're
+  * cumulated only one time to prevent entries more than 100%
+  * overhead.
+  */
+ he_cache = malloc(sizeof(*he_cache) * (PERF_MAX_STACK_DEPTH + 1));
+ if (he_cache == NULL)
+  return -ENOMEM;
+
+ iter->priv = he_cache;
+ iter->curr = 0;
+
  return 0;
 }
 
@@ -710,6 +725,7 @@ iter_add_single_cumulative_entry(struct hist_entry_iter *iter,
 {
  struct perf_evsel *evsel = iter->evsel;
  struct perf_sample *sample = iter->sample;
+ struct hist_entry **he_cache = iter->priv;
  struct hist_entry *he;
  int err = 0;
 
@@ -720,6 +736,7 @@ iter_add_single_cumulative_entry(struct hist_entry_iter *iter,
   return -ENOMEM;
 
  iter->he = he;
+ he_cache[iter->curr++] = he;
 
  /*
   * The iter->he will be over-written after ->add_next_entry()
@@ -754,7 +771,29 @@ iter_add_next_cumulative_entry(struct hist_entry_iter *iter,
 {
  struct perf_evsel *evsel = iter->evsel;
  struct perf_sample *sample = iter->sample;
+ struct hist_entry **he_cache = iter->priv;
  struct hist_entry *he;
+ struct hist_entry he_tmp = {
+  .cpu = al->cpu,
+  .thread = al->thread,
+  .comm = thread__comm(al->thread),
+  .ip = al->addr,
+  .ms = {
+   .map = al->map,
+   .sym = al->sym,
+  },
+  .parent = iter->parent,
+ };
+ int i;
+
+ /*
+  * Check if there's duplicate entries in the callchain.
+  * It's possible that it has cycles or recursive calls.
+  */
+ for (i = 0; i < iter->curr; i++) {
+  if (hist_entry__cmp(he_cache[i], &he_tmp) == 0)
+   return 0;
+ }
 
  he = __hists__add_entry(&evsel->hists, al, iter->parent, NULL, NULL,
     sample->period, sample->weight,
@@ -763,6 +802,7 @@ iter_add_next_cumulative_entry(struct hist_entry_iter *iter,
   return -ENOMEM;
 
  iter->he = he;
+ he_cache[iter->curr++] = he;
 
  return 0;
 }
@@ -771,7 +811,9 @@ static int
 iter_finish_cumulative_entry(struct hist_entry_iter *iter,
         struct addr_location *al __maybe_unused)
 {
+ zfree(&iter->priv);
  iter->he = NULL;
+
  return 0;
 }
 
-- 
1.7.1