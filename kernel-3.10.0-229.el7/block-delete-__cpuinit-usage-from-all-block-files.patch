From 182ae8682977bbf2faa419a76de69ec006e974de Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Mon, 9 Jun 2014 11:59:16 -0400
Subject: [block] delete __cpuinit usage from all block files

Message-id: <1402315159-3749-4-git-send-email-prarit@redhat.com>
Patchwork-id: 83100
O-Subject: [RHEL7.1 PATCH BZ 1105893 09/12] block: delete __cpuinit usage from all block files
Bugzilla: 1105893
RH-Acked-by: Rafael Aquini <aquini@redhat.com>
RH-Acked-by: Lenny Szubowicz <lszubowi@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Vivek Goyal <vgoyal@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1105893

commit 0b776b062843b63cb4c9acdfc092b2581be3c2f6
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Jun 19 15:26:23 2013 -0400

    block: delete __cpuinit usage from all block files

    The __cpuinit type of throwaway sections might have made sense
    some time ago when RAM was more constrained, but now the savings
    do not offset the cost and complications.  For example, the fix in
    commit 5e427ec2d0 ("x86: Fix bit corruption at CPU resume time")
    is a good example of the nasty type of bugs that can be created
    with improper use of the various __init prefixes.

    After a discussion on LKML[1] it was decided that cpuinit should go
    the way of devinit and be phased out.  Once all the users are gone,
    we can then finally remove the macros themselves from linux/init.h.

    This removes all the drivers/block uses of the __cpuinit macros
    from all C files.

    [1] https://lkml.org/lkml/2013/5/20/589

    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

Cc: Jeff Moyer <jmoyer@redhat.com>
Cc: Vivek Goyal <vgoyal@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-iopoll.c b/block/blk-iopoll.c
index 58916af..4b8d9b5 100644
--- a/block/blk-iopoll.c
+++ b/block/blk-iopoll.c
@@ -189,8 +189,8 @@ void blk_iopoll_init(struct blk_iopoll *iop, int weight, blk_iopoll_fn *poll_fn)
 }
 EXPORT_SYMBOL(blk_iopoll_init);
 
-static int __cpuinit blk_iopoll_cpu_notify(struct notifier_block *self,
-       unsigned long action, void *hcpu)
+static int blk_iopoll_cpu_notify(struct notifier_block *self,
+     unsigned long action, void *hcpu)
 {
  /*
   * If a CPU goes away, splice its entries to the current CPU
@@ -209,7 +209,7 @@ static int __cpuinit blk_iopoll_cpu_notify(struct notifier_block *self,
  return NOTIFY_OK;
 }
 
-static struct notifier_block __cpuinitdata blk_iopoll_cpu_notifier = {
+static struct notifier_block blk_iopoll_cpu_notifier = {
  .notifier_call = blk_iopoll_cpu_notify,
 };
 
diff --git a/block/blk-softirq.c b/block/blk-softirq.c
index 467c8de..ec9e606 100644
--- a/block/blk-softirq.c
+++ b/block/blk-softirq.c
@@ -78,8 +78,8 @@ static int raise_blk_irq(int cpu, struct request *rq)
 }
 #endif
 
-static int __cpuinit blk_cpu_notify(struct notifier_block *self,
-        unsigned long action, void *hcpu)
+static int blk_cpu_notify(struct notifier_block *self, unsigned long action,
+     void *hcpu)
 {
  /*
   * If a CPU goes away, splice its entries to the current CPU
@@ -98,7 +98,7 @@ static int __cpuinit blk_cpu_notify(struct notifier_block *self,
  return NOTIFY_OK;
 }
 
-static struct notifier_block __cpuinitdata blk_cpu_notifier = {
+static struct notifier_block blk_cpu_notifier = {
  .notifier_call = blk_cpu_notify,
 };
 
-- 
1.7.1