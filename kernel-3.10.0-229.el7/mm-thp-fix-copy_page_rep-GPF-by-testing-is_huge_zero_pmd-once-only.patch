From 0d135c43853f3ee3c2ec1ab7fc008d9ae180af0b Mon Sep 17 00:00:00 2001
From: Rik van Riel <riel@redhat.com>
Date: Fri, 25 Jul 2014 17:49:44 -0400
Subject: [mm] thp: fix copy_page_rep GPF by testing is_huge_zero_pmd once only

Message-id: <20140725134944.0c8cabe0@annuminas.surriel.com>
Patchwork-id: 86702
O-Subject: [RHEL7 PATCH] thp: fix copy_page_rep GPF by testing is_huge_zero_pmd once only
Bugzilla: 1123040
RH-Acked-by: Johannes Weiner <jweiner@redhat.com>
RH-Acked-by: Rafael Aquini <aquini@redhat.com>

Fixes bug 1123040

commit eecc1e426d681351a6026a7d3e7d225f38955b6c
Author: Hugh Dickins <hughd@google.com>
Date:   Sun Jan 12 01:25:21 2014 -0800

    thp: fix copy_page_rep GPF by testing is_huge_zero_pmd once only

    We see General Protection Fault on RSI in copy_page_rep: that RSI is
    what you get from a NULL struct page pointer.

      RIP: 0010:[<ffffffff81154955>]  [<ffffffff81154955>] copy_page_rep+0x5/0x10
      RSP: 0000:ffff880136e15c00  EFLAGS: 00010286
      RAX: ffff880000000000 RBX: ffff880136e14000 RCX: 0000000000000200
      RDX: 6db6db6db6db6db7 RSI: db73880000000000 RDI: ffff880dd0c00000
      RBP: ffff880136e15c18 R08: 0000000000000200 R09: 000000000005987c
      R10: 000000000005987c R11: 0000000000000200 R12: 0000000000000001
      R13: ffffea00305aa000 R14: 0000000000000000 R15: 0000000000000000
      FS:  00007f195752f700(0000) GS:ffff880c7fc20000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000093010000 CR3: 00000001458e1000 CR4: 00000000000027e0
      Call Trace:
        copy_user_huge_page+0x93/0xab
        do_huge_pmd_wp_page+0x710/0x815
        handle_mm_fault+0x15d8/0x1d70
        __do_page_fault+0x14d/0x840
        do_page_fault+0x2f/0x90
        page_fault+0x22/0x30

    do_huge_pmd_wp_page() tests is_huge_zero_pmd(orig_pmd) four times: but
    since shrink_huge_zero_page() can free the huge_zero_page, and we have
    no hold of our own on it here (except where the fourth test holds
    page_table_lock and has checked pmd_same), it's possible for it to
    answer yes the first time, but no to the second or third test.  Change
    all those last three to tests for NULL page.

    (Note: this is not the same issue as trinity's DEBUG_PAGEALLOC BUG
    in copy_page_rep with RSI: ffff88009c422000, reported by Sasha Levin
    in https://lkml.org/lkml/2013/3/29/103.  I believe that one is due
    to the source page being split, and a tail page freed, while copy
    is in progress; and not a problem without DEBUG_PAGEALLOC, since
    the pmd_same check will prevent a miscopy from being made visible.)

    Fixes: 97ae17497e99 ("thp: implement refcounting for huge zero page")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Cc: stable@vger.kernel.org # v3.10 v3.11 v3.12
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/mm/huge_memory.c b/mm/huge_memory.c
index 8979b2d..af61e57 100644
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -1156,7 +1156,7 @@ alloc:
   new_page = NULL;
 
  if (unlikely(!new_page)) {
-  if (is_huge_zero_pmd(orig_pmd)) {
+  if (!page) {
    ret = do_huge_pmd_wp_zero_page_fallback(mm, vma,
      address, pmd, orig_pmd, haddr);
   } else {
@@ -1186,7 +1186,7 @@ alloc:
 
  count_vm_event(THP_FAULT_ALLOC);
 
- if (is_huge_zero_pmd(orig_pmd))
+ if (!page)
   clear_huge_page(new_page, haddr, HPAGE_PMD_NR);
  else
   copy_user_huge_page(new_page, page, haddr, vma, HPAGE_PMD_NR);
@@ -1211,7 +1211,7 @@ alloc:
   page_add_new_anon_rmap(new_page, vma, haddr);
   set_pmd_at(mm, haddr, pmd, entry);
   update_mmu_cache_pmd(vma, address, pmd);
-  if (is_huge_zero_pmd(orig_pmd)) {
+  if (!page) {
    add_mm_counter(mm, MM_ANONPAGES, HPAGE_PMD_NR);
    put_huge_zero_page();
   } else {
-- 
1.7.1