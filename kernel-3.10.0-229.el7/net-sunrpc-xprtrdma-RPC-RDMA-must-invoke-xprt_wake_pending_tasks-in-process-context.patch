From db2447269dc9aa2219ed302eb0d415b322f1a8e8 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:54:12 -0400
Subject: [net] sunrpc/xprtrdma: RPC/RDMA must invoke xprt_wake_pending_tasks() in process context

Message-id: <1403798077-28799-54-git-send-email-steved@redhat.com>
Patchwork-id: 84891
O-Subject: [RHEL7.1 PATCH 53/78] xprtrdma: RPC/RDMA must invoke xprt_wake_pending_tasks() in process context
Bugzilla: 1113248
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Chuck Lever <chuck.lever@oracle.com>

An IB provider can invoke rpcrdma_conn_func() in an IRQ context,
thus rpcrdma_conn_func() cannot be allowed to directly invoke
generic RPC functions like xprt_wake_pending_tasks().

Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
Tested-by: Steve Wise <swise@opengridcomputing.com>
Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
Upstream Id: 254f91e2fa1f4cc18fd2eb9d5481888ffe126d5b
Bugzilla: 1113248
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/sunrpc/xprtrdma/rpc_rdma.c b/net/sunrpc/xprtrdma/rpc_rdma.c
index 400aa1b..c296468 100644
--- a/net/sunrpc/xprtrdma/rpc_rdma.c
+++ b/net/sunrpc/xprtrdma/rpc_rdma.c
@@ -676,15 +676,11 @@ rpcrdma_inline_fixup(struct rpc_rqst *rqst, char *srcp, int copy_len, int pad)
  rqst->rq_private_buf = rqst->rq_rcv_buf;
 }
 
-/*
- * This function is called when an async event is posted to
- * the connection which changes the connection state. All it
- * does at this point is mark the connection up/down, the rpc
- * timers do the rest.
- */
 void
-rpcrdma_conn_func(struct rpcrdma_ep *ep)
+rpcrdma_connect_worker(struct work_struct *work)
 {
+ struct rpcrdma_ep *ep =
+  container_of(work, struct rpcrdma_ep, rep_connect_worker.work);
  struct rpc_xprt *xprt = ep->rep_xprt;
 
  spin_lock_bh(&xprt->transport_lock);
@@ -701,6 +697,18 @@ rpcrdma_conn_func(struct rpcrdma_ep *ep)
 }
 
 /*
+ * This function is called when an async event is posted to
+ * the connection which changes the connection state. All it
+ * does at this point is mark the connection up/down, the rpc
+ * timers do the rest.
+ */
+void
+rpcrdma_conn_func(struct rpcrdma_ep *ep)
+{
+ schedule_delayed_work(&ep->rep_connect_worker, 0);
+}
+
+/*
  * This function is called when memory window unbind which we are waiting
  * for completes. Just use rr_func (zeroed by upcall) to signal completion.
  */
diff --git a/net/sunrpc/xprtrdma/verbs.c b/net/sunrpc/xprtrdma/verbs.c
index 8f9704e..9cb88f3 100644
--- a/net/sunrpc/xprtrdma/verbs.c
+++ b/net/sunrpc/xprtrdma/verbs.c
@@ -742,6 +742,7 @@ rpcrdma_ep_create(struct rpcrdma_ep *ep, struct rpcrdma_ia *ia,
  INIT_CQCOUNT(ep);
  ep->rep_ia = ia;
  init_waitqueue_head(&ep->rep_connect_wait);
+ INIT_DELAYED_WORK(&ep->rep_connect_worker, rpcrdma_connect_worker);
 
  /*
   * Create a single cq for receive dto and mw_bind (only ever
@@ -817,6 +818,8 @@ rpcrdma_ep_destroy(struct rpcrdma_ep *ep, struct rpcrdma_ia *ia)
  dprintk("RPC:       %s: entering, connected is %d\n",
   __func__, ep->rep_connected);
 
+ cancel_delayed_work_sync(&ep->rep_connect_worker);
+
  if (ia->ri_id->qp) {
   rc = rpcrdma_ep_disconnect(ep, ia);
   if (rc)
diff --git a/net/sunrpc/xprtrdma/xprt_rdma.h b/net/sunrpc/xprtrdma/xprt_rdma.h
index 98340a3..c620d13 100644
--- a/net/sunrpc/xprtrdma/xprt_rdma.h
+++ b/net/sunrpc/xprtrdma/xprt_rdma.h
@@ -43,6 +43,7 @@
 #include <linux/wait.h>   /* wait_queue_head_t, etc */
 #include <linux/spinlock.h>   /* spinlock_t, etc */
 #include <linux/atomic.h>   /* atomic_t, etc */
+#include <linux/workqueue.h>  /* struct work_struct */
 
 #include <rdma/rdma_cm.h>  /* RDMA connection api */
 #include <rdma/ib_verbs.h>  /* RDMA verbs api */
@@ -87,6 +88,7 @@ struct rpcrdma_ep {
  struct rpc_xprt  *rep_xprt; /* for rep_func */
  struct rdma_conn_param rep_remote_cma;
  struct sockaddr_storage rep_remote_addr;
+ struct delayed_work rep_connect_worker;
 };
 
 #define INIT_CQCOUNT(ep) atomic_set(&(ep)->rep_cqcount, (ep)->rep_cqinit)
@@ -336,6 +338,7 @@ int rpcrdma_deregister_external(struct rpcrdma_mr_seg *,
 /*
  * RPC/RDMA connection management calls - xprtrdma/rpc_rdma.c
  */
+void rpcrdma_connect_worker(struct work_struct *);
 void rpcrdma_conn_func(struct rpcrdma_ep *);
 void rpcrdma_reply_handler(struct rpcrdma_rep *);
 
-- 
1.7.1