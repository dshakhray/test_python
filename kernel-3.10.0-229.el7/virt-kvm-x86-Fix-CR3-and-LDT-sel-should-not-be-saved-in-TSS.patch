From 1046288e307c8c9c776c0c52e1276f85c3b2c215 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:39:37 -0400
Subject: [virt] kvm/x86: Fix CR3 and LDT sel should not be saved in TSS

Message-id: <1406040016-3289-183-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86261
O-Subject: [RHEL7 PATCH v2 182/221] KVM: x86: Fix CR3 and LDT sel should not be saved in TSS
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Nadav Amit <namit@cs.technion.ac.il>

According to Intel specifications, only general purpose registers and segment
selectors should be saved in the old TSS during 32-bit task-switch.

Signed-off-by: Nadav Amit <namit@cs.technion.ac.il>
Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
(cherry picked from commit 5c7411e2937401bf4d024744032f879475364996)
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/emulate.c b/arch/x86/kvm/emulate.c
index 205b17e..0dec502 100644
--- a/arch/x86/kvm/emulate.c
+++ b/arch/x86/kvm/emulate.c
@@ -2496,7 +2496,7 @@ static int task_switch_16(struct x86_emulate_ctxt *ctxt,
 static void save_state_to_tss32(struct x86_emulate_ctxt *ctxt,
     struct tss_segment_32 *tss)
 {
- tss->cr3 = ctxt->ops->get_cr(ctxt, 3);
+ /* CR3 and ldt selector are not saved intentionally */
  tss->eip = ctxt->_eip;
  tss->eflags = ctxt->eflags;
  tss->eax = reg_read(ctxt, VCPU_REGS_RAX);
@@ -2514,7 +2514,6 @@ static void save_state_to_tss32(struct x86_emulate_ctxt *ctxt,
  tss->ds = get_segment_selector(ctxt, VCPU_SREG_DS);
  tss->fs = get_segment_selector(ctxt, VCPU_SREG_FS);
  tss->gs = get_segment_selector(ctxt, VCPU_SREG_GS);
- tss->ldt_selector = get_segment_selector(ctxt, VCPU_SREG_LDTR);
 }
 
 static int load_state_from_tss32(struct x86_emulate_ctxt *ctxt,
@@ -2604,6 +2603,8 @@ static int task_switch_32(struct x86_emulate_ctxt *ctxt,
  struct tss_segment_32 tss_seg;
  int ret;
  u32 new_tss_base = get_desc_base(new_desc);
+ u32 eip_offset = offsetof(struct tss_segment_32, eip);
+ u32 ldt_sel_offset = offsetof(struct tss_segment_32, ldt_selector);
 
  ret = ops->read_std(ctxt, old_tss_base, &tss_seg, sizeof tss_seg,
        &ctxt->exception);
@@ -2613,8 +2614,9 @@ static int task_switch_32(struct x86_emulate_ctxt *ctxt,
 
  save_state_to_tss32(ctxt, &tss_seg);
 
- ret = ops->write_std(ctxt, old_tss_base, &tss_seg, sizeof tss_seg,
-        &ctxt->exception);
+ /* Only GP registers and segment selectors are saved */
+ ret = ops->write_std(ctxt, old_tss_base + eip_offset, &tss_seg.eip,
+        ldt_sel_offset - eip_offset, &ctxt->exception);
  if (ret != X86EMUL_CONTINUE)
   /* FIXME: need to provide precise fault address */
   return ret;
-- 
1.7.1