From c4273a6735154cceb5830f3549c83f8250818d0c Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:10 -0400
Subject: [cpufreq] stats: create sysfs entries when cpufreq_stats is a module

Message-id: <1409235879-1283-97-git-send-email-prarit@redhat.com>
Patchwork-id: 89496
O-Subject: [RHEL7.1 PATCH BZ 1134639 096/185] cpufreq: stats: create sysfs entries when cpufreq_stats is a module
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit b3f9ff88db6e149086dc111e5652106005fd5923
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Jan 7 07:10:13 2014 +0530

    cpufreq: stats: create sysfs entries when cpufreq_stats is a module

    When cpufreq_stats is compiled in as a module, cpufreq driver would
    have already been registered. And so the CPUFREQ_CREATE_POLICY
    notifiers wouldn't be called for it. Hence no sysfs entries for stats. :(

    This patch calls cpufreq_stats_create_table() for each online CPU from
    cpufreq_stats_init() and so if policy is already created for CPUx then
    we will register sysfs stats for it.

    When its not compiled as module, we will return early as policy wouldn't
    be found for any of the CPUs.

    Acked-by: Nicolas Pitre <nico@linaro.org>
    Tested-by: Nicolas Pitre <nico@linaro.org>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index 5efc585..22e79c9 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -181,7 +181,7 @@ static void cpufreq_stats_free_table(unsigned int cpu)
  cpufreq_cpu_put(policy);
 }
 
-static int cpufreq_stats_create_table(struct cpufreq_policy *policy,
+static int __cpufreq_stats_create_table(struct cpufreq_policy *policy,
   struct cpufreq_frequency_table *table)
 {
  unsigned int i, j, count = 0, ret = 0;
@@ -254,6 +254,26 @@ error_get_fail:
  return ret;
 }
 
+static void cpufreq_stats_create_table(unsigned int cpu)
+{
+ struct cpufreq_policy *policy;
+ struct cpufreq_frequency_table *table;
+
+ /*
+  * "likely(!policy)" because normally cpufreq_stats will be registered
+  * before cpufreq driver
+  */
+ policy = cpufreq_cpu_get(cpu);
+ if (likely(!policy))
+  return;
+
+ table = cpufreq_frequency_get_table(policy->cpu);
+ if (likely(table))
+  __cpufreq_stats_create_table(policy, table);
+
+ cpufreq_cpu_put(policy);
+}
+
 static void cpufreq_stats_update_policy_cpu(struct cpufreq_policy *policy)
 {
  struct cpufreq_stats *stat = per_cpu(cpufreq_stats_table,
@@ -285,7 +305,7 @@ static int cpufreq_stat_notifier_policy(struct notifier_block *nb,
   return 0;
 
  if (val == CPUFREQ_CREATE_POLICY)
-  ret = cpufreq_stats_create_table(policy, table);
+  ret = __cpufreq_stats_create_table(policy, table);
  else if (val == CPUFREQ_REMOVE_POLICY)
   __cpufreq_stats_free_table(policy);
 
@@ -347,6 +367,9 @@ static int __init cpufreq_stats_init(void)
  if (ret)
   return ret;
 
+ for_each_online_cpu(cpu)
+  cpufreq_stats_create_table(cpu);
+
  ret = cpufreq_register_notifier(&notifier_trans_block,
     CPUFREQ_TRANSITION_NOTIFIER);
  if (ret) {
-- 
1.7.1