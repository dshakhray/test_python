From b3a58da4f3233921ef68dd35d861d22d918ea6f7 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Tue, 19 Aug 2014 15:10:42 -0400
Subject: [lib] percpu_counter: fix bad percpu counter state during suspend

Message-id: <53F368F2.1020506@redhat.com>
Patchwork-id: 87987
O-Subject: [RHEL7.1 PATCH] lib/percpu_counter.c: fix bad percpu counter state during suspend
Bugzilla: 1129839
RH-Acked-by: Mike Snitzer <snitzer@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>

This is for bug
1129839 - backport "lib/percpu_counter.c: fix bad percpu counter state during suspend"

Despite percpu counters initially being called "approximate counters,"
they are now being used for things which need precision, at least
in btrfs, and from the commit below, apparently blk-mq as well.

This commit keeps things consistent if the system suspends.

Simple one-line commit from upstream (which is cc: stable as well)

Thanks,
-Eric

    commit e39435ce68bb4685288f78b1a7e24311f7ef939f
    Author: Jens Axboe <axboe@fb.com>
    Date:   Tue Apr 8 16:04:12 2014 -0700

    lib/percpu_counter.c: fix bad percpu counter state during suspend

    I got a bug report yesterday from Laszlo Ersek in which he states that
    his kvm instance fails to suspend.  Laszlo bisected it down to this
    commit 1cf7e9c68fe8 ("virtio_blk: blk-mq support") where virtio-blk is
    converted to use the blk-mq infrastructure.

    After digging a bit, it became clear that the issue was with the queue
    drain.  blk-mq tracks queue usage in a percpu counter, which is
    incremented on request alloc and decremented when the request is freed.
    The initial hunt was for an inconsistency in blk-mq, but everything
    seemed fine.  In fact, the counter only returned crazy values when
    suspend was in progress.

    When a CPU is unplugged, the percpu counters merges that CPU state with
    the general state.  blk-mq takes care to register a hotcpu notifier with
    the appropriate priority, so we know it runs after the percpu counter
    notifier.  However, the percpu counter notifier only merges the state
    when the CPU is fully gone.  This leaves a state transition where the
    CPU going away is no longer in the online mask, yet it still holds
    private values.  This means that in this state, percpu_counter_sum()
    returns invalid results, and the suspend then hangs waiting for
    abs(dead-cpu-value) requests to complete which of course will never
    happen.

    Fix this by clearing the state earlier, so we never have a case where
    the CPU isn't in online mask but still holds private state.  This bug
    has been there since forever, I guess we don't have a lot of users where
    percpu counters needs to be reliable during the suspend cycle.

    Signed-off-by: Jens Axboe <axboe@fb.com>
    Reported-by: Laszlo Ersek <lersek@redhat.com>
    Tested-by: Laszlo Ersek <lersek@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/lib/percpu_counter.c b/lib/percpu_counter.c
index 8280a5d..7dd3357 100644
--- a/lib/percpu_counter.c
+++ b/lib/percpu_counter.c
@@ -169,7 +169,7 @@ static int percpu_counter_hotcpu_callback(struct notifier_block *nb,
  struct percpu_counter *fbc;
 
  compute_batch_value();
- if (action != CPU_DEAD)
+ if (action != CPU_DEAD && action != CPU_DEAD_FROZEN)
   return NOTIFY_OK;
 
  cpu = (unsigned long)hcpu;
-- 
1.7.1