From 767dfba55739312d8142eda189f7798ce2a6567f Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Mon, 14 Jul 2014 13:07:52 -0400
Subject: [x86] oprofile, nmi: Fix CPU hotplug callback registration

Message-id: <1405343292-21004-16-git-send-email-prarit@redhat.com>
Patchwork-id: 85746
O-Subject: [RHEL7.1 PATCH BZ 1119078 15/35] x86, oprofile, nmi: Fix CPU hotplug callback registration
Bugzilla: 1119078
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Igor Mammedov <imammedo@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1119078

commit 76902e3d9ce88ebd70e362e4d3ff173afa5ce575
Author: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
Date:   Tue Mar 11 02:08:49 2014 +0530

    x86, oprofile, nmi: Fix CPU hotplug callback registration

    Subsystems that want to register CPU hotplug callbacks, as well as perform
    initialization for the CPUs that are already online, often do it as shown
    below:

     get_online_cpus();

     for_each_online_cpu(cpu)
      init_cpu(cpu);

     register_cpu_notifier(&foobar_cpu_notifier);

     put_online_cpus();

    This is wrong, since it is prone to ABBA deadlocks involving the
    cpu_add_remove_lock and the cpu_hotplug.lock (when running concurrently
    with CPU hotplug operations).

    Instead, the correct and race-free way of performing the callback
    registration is:

     cpu_notifier_register_begin();

     for_each_online_cpu(cpu)
      init_cpu(cpu);

     /* Note the use of the double underscored version of the API */
     __register_cpu_notifier(&foobar_cpu_notifier);

     cpu_notifier_register_done();

    Fix the oprofile code in x86 by using this latter form of callback
    registration. But retain the calls to get/put_online_cpus(), since they are
    used in other places as well, to protect the variables 'nmi_enabled' and
    'ctr_running'. Strictly speaking, this is not necessary since
    cpu_notifier_register_begin/done() provide a stronger synchronization
    with CPU hotplug than get/put_online_cpus(). However, let's retain the
    calls to get/put_online_cpus() to be consistent with the other call-sites.

    By nesting get/put_online_cpus() *inside* cpu_notifier_register_begin/done(),
    we avoid the ABBA deadlock possibility mentioned above.

    Cc: Robert Richter <rric@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/oprofile/nmi_int.c b/arch/x86/oprofile/nmi_int.c
index 48768df..2436983 100644
--- a/arch/x86/oprofile/nmi_int.c
+++ b/arch/x86/oprofile/nmi_int.c
@@ -494,14 +494,19 @@ static int nmi_setup(void)
  if (err)
   goto fail;
 
+ cpu_notifier_register_begin();
+
+ /* Use get/put_online_cpus() to protect 'nmi_enabled' */
  get_online_cpus();
- register_cpu_notifier(&oprofile_cpu_nb);
  nmi_enabled = 1;
  /* make nmi_enabled visible to the nmi handler: */
  smp_mb();
  on_each_cpu(nmi_cpu_setup, NULL, 1);
+ __register_cpu_notifier(&oprofile_cpu_nb);
  put_online_cpus();
 
+ cpu_notifier_register_done();
+
  return 0;
 fail:
  free_msrs();
@@ -512,12 +517,18 @@ static void nmi_shutdown(void)
 {
  struct op_msrs *msrs;
 
+ cpu_notifier_register_begin();
+
+ /* Use get/put_online_cpus() to protect 'nmi_enabled' & 'ctr_running' */
  get_online_cpus();
- unregister_cpu_notifier(&oprofile_cpu_nb);
  on_each_cpu(nmi_cpu_shutdown, NULL, 1);
  nmi_enabled = 0;
  ctr_running = 0;
+ __unregister_cpu_notifier(&oprofile_cpu_nb);
  put_online_cpus();
+
+ cpu_notifier_register_done();
+
  /* make variables visible to the nmi handler: */
  smp_mb();
  unregister_nmi_handler(NMI_LOCAL, "oprofile");
-- 
1.7.1