From a20bcee6ef630aa941c2455b53f5f5c4dc33f43b Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 30 Jul 2014 15:40:55 -0400
Subject: [kernel] sched: replace INIT_COMPLETION with reinit_completion

Message-id: <1406734861-25152-2-git-send-email-rclark@redhat.com>
Patchwork-id: 86836
O-Subject: [RHEL7 drm 1/7] sched: replace INIT_COMPLETION with reinit_completion
Bugzilla: 1119339
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

RHBZ: 1119339
Backport from upstream

commit c32f74ab2872994bc8336ed367313da3139350ca
Author:     Wolfram Sang <wsa@the-dreams.de>
AuthorDate: Thu Nov 14 14:32:01 2013 -0800
Commit:     Linus Torvalds <torvalds@linux-foundation.org>
CommitDate: Fri Nov 15 09:32:21 2013 +0900

    sched: replace INIT_COMPLETION with reinit_completion

    For the casual device driver writer, it is hard to remember when to use
    init_completion (to init a completion structure) or INIT_COMPLETION (to
    *reinit* a completion structure).  Furthermore, while all other
    completion functions exepct a pointer as a parameter, INIT_COMPLETION
    does not.  To make it easier to remember which function to use and to
    make code more readable, introduce a new inline function with the proper
    name and consistent argument type.  Update the kernel-doc for
    init_completion while we are here.

    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Acked-by: Linus Walleij <linus.walleij@linaro.org> (personally at LCE13)
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Rob Clark <rclark@redhat.com>
---
NOTE: no red hat maintainers... possibly indicates a gap in our RHMAINTAINERS

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/completion.h b/include/linux/completion.h
index 33f0280..c2e813c 100644
--- a/include/linux/completion.h
+++ b/include/linux/completion.h
@@ -19,8 +19,8 @@
  *
  * See also:  complete(), wait_for_completion() (and friends _timeout,
  * _interruptible, _interruptible_timeout, and _killable), init_completion(),
- * and macros DECLARE_COMPLETION(), DECLARE_COMPLETION_ONSTACK(), and
- * INIT_COMPLETION().
+ * reinit_completion(), and macros DECLARE_COMPLETION(),
+ * DECLARE_COMPLETION_ONSTACK().
  */
 struct completion {
  unsigned int done;
@@ -65,7 +65,7 @@ struct completion {
 
 /**
  * init_completion - Initialize a dynamically allocated completion
- * @x:  completion structure that is to be initialized
+ * @x:  pointer to completion structure that is to be initialized
  *
  * This inline function will initialize a dynamically created completion
  * structure.
@@ -76,6 +76,18 @@ static inline void init_completion(struct completion *x)
  init_waitqueue_head(&x->wait);
 }
 
+/**
+ * reinit_completion - reinitialize a completion structure
+ * @x:  pointer to completion structure that is to be reinitialized
+ *
+ * This inline function should be used to reinitialize a completion structure so it can
+ * be reused. This is especially important after complete_all() is used.
+ */
+static inline void reinit_completion(struct completion *x)
+{
+ x->done = 0;
+}
+
 extern void wait_for_completion(struct completion *);
 extern void wait_for_completion_io(struct completion *);
 extern int wait_for_completion_interruptible(struct completion *x);
-- 
1.7.1