From 17e7b6748b7ac345e16662dbf6457660a585eb01 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:28 -0400
Subject: [fs] ext4: refactor ext4_fallocate code

Message-id: <1414059176-6044-5-git-send-email-lczerner@redhat.com>
Patchwork-id: 98280
O-Subject: [RHEL 7.1 PATCH 04/32] ext4: refactor ext4_fallocate code
Bugzilla: 1150171

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit 0e8b6879f3c234036181526683be2b0231892ae4

 Move block allocation out of the ext4_fallocate into separate function
 called ext4_alloc_file_blocks(). This will allow us to use the same
 allocation code for other allocation operations such as zero range which
 is commit in the next patch.

 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 0cfab8a..504b270 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -4547,6 +4547,64 @@ retry:
  ext4_std_error(inode->i_sb, err);
 }
 
+static int ext4_alloc_file_blocks(struct file *file, ext4_lblk_t offset,
+      ext4_lblk_t len, int flags, int mode)
+{
+ struct inode *inode = file_inode(file);
+ handle_t *handle;
+ int ret = 0;
+ int ret2 = 0;
+ int retries = 0;
+ struct ext4_map_blocks map;
+ unsigned int credits;
+
+ map.m_lblk = offset;
+ /*
+  * Don't normalize the request if it can fit in one extent so
+  * that it doesn't get unnecessarily split into multiple
+  * extents.
+  */
+ if (len <= EXT_UNINIT_MAX_LEN)
+  flags |= EXT4_GET_BLOCKS_NO_NORMALIZE;
+
+ /*
+  * credits to insert 1 extent into extent tree
+  */
+ credits = ext4_chunk_trans_blocks(inode, len);
+
+retry:
+ while (ret >= 0 && ret < len) {
+  map.m_lblk = map.m_lblk + ret;
+  map.m_len = len = len - ret;
+  handle = ext4_journal_start(inode, EXT4_HT_MAP_BLOCKS,
+         credits);
+  if (IS_ERR(handle)) {
+   ret = PTR_ERR(handle);
+   break;
+  }
+  ret = ext4_map_blocks(handle, inode, &map, flags);
+  if (ret <= 0) {
+   ext4_debug("inode #%lu: block %u: len %u: "
+       "ext4_ext_map_blocks returned %d",
+       inode->i_ino, map.m_lblk,
+       map.m_len, ret);
+   ext4_mark_inode_dirty(handle, inode);
+   ret2 = ext4_journal_stop(handle);
+   break;
+  }
+  ret2 = ext4_journal_stop(handle);
+  if (ret2)
+   break;
+ }
+ if (ret == -ENOSPC &&
+   ext4_should_retry_alloc(inode->i_sb, &retries)) {
+  ret = 0;
+  goto retry;
+ }
+
+ return ret > 0 ? ret2 : ret;
+}
+
 /*
  * preallocate space for a file. This implements ext4's fallocate file
  * operation, which gets called from sys_fallocate system call.
@@ -4561,12 +4619,10 @@ long ext4_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
  loff_t new_size = 0;
  unsigned int max_blocks;
  int ret = 0;
- int ret2 = 0;
- int retries = 0;
  int flags;
- struct ext4_map_blocks map;
+ ext4_lblk_t lblk;
  struct timespec tv;
- unsigned int credits, blkbits = inode->i_blkbits;
+ unsigned int blkbits = inode->i_blkbits;
 
  /*
   * currently supporting (pre)allocate mode for extent-based
@@ -4591,17 +4647,18 @@ long ext4_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
   return ret;
 
  trace_ext4_fallocate_enter(inode, offset, len, mode);
- map.m_lblk = offset >> blkbits;
+ lblk = offset >> blkbits;
  /*
   * We can't just convert len to max_blocks because
   * If blocksize = 4096 offset = 3072 and len = 2048
   */
  max_blocks = (EXT4_BLOCK_ALIGN(len + offset, blkbits) >> blkbits)
-  - map.m_lblk;
- /*
-  * credits to insert 1 extent into extent tree
-  */
- credits = ext4_chunk_trans_blocks(inode, max_blocks);
+  - lblk;
+
+ flags = EXT4_GET_BLOCKS_CREATE_UNINIT_EXT;
+ if (mode & FALLOC_FL_KEEP_SIZE)
+  flags |= EXT4_GET_BLOCKS_KEEP_SIZE;
+
  mutex_lock(&inode->i_mutex);
 
  if (!(mode & FALLOC_FL_KEEP_SIZE) &&
@@ -4612,46 +4669,9 @@ long ext4_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
    goto out;
  }
 
- flags = EXT4_GET_BLOCKS_CREATE_UNINIT_EXT;
- if (mode & FALLOC_FL_KEEP_SIZE)
-  flags |= EXT4_GET_BLOCKS_KEEP_SIZE;
- /*
-  * Don't normalize the request if it can fit in one extent so
-  * that it doesn't get unnecessarily split into multiple
-  * extents.
-  */
- if (len <= EXT_UNINIT_MAX_LEN << blkbits)
-  flags |= EXT4_GET_BLOCKS_NO_NORMALIZE;
-
-retry:
- while (ret >= 0 && ret < max_blocks) {
-  map.m_lblk = map.m_lblk + ret;
-  map.m_len = max_blocks = max_blocks - ret;
-  handle = ext4_journal_start(inode, EXT4_HT_MAP_BLOCKS,
-         credits);
-  if (IS_ERR(handle)) {
-   ret = PTR_ERR(handle);
-   break;
-  }
-  ret = ext4_map_blocks(handle, inode, &map, flags);
-  if (ret <= 0) {
-   ext4_debug("inode #%lu: block %u: len %u: "
-       "ext4_ext_map_blocks returned %d",
-       inode->i_ino, map.m_lblk,
-       map.m_len, ret);
-   ext4_mark_inode_dirty(handle, inode);
-   ret2 = ext4_journal_stop(handle);
-   break;
-  }
-  ret2 = ext4_journal_stop(handle);
-  if (ret2)
-   break;
- }
- if (ret == -ENOSPC &&
-   ext4_should_retry_alloc(inode->i_sb, &retries)) {
-  ret = 0;
-  goto retry;
- }
+ ret = ext4_alloc_file_blocks(file, lblk, max_blocks, flags, mode);
+ if (ret)
+  goto out;
 
  handle = ext4_journal_start(inode, EXT4_HT_INODE, 2);
  if (IS_ERR(handle))
@@ -4659,14 +4679,14 @@ retry:
 
  tv = inode->i_ctime = ext4_current_time(inode);
 
- if (ret > 0 && new_size) {
+ if (!ret && new_size) {
   if (new_size > i_size_read(inode)) {
    i_size_write(inode, new_size);
    inode->i_mtime = tv;
   }
   if (new_size > EXT4_I(inode)->i_disksize)
    ext4_update_i_disksize(inode, new_size);
- } else if (ret > 0 && !new_size) {
+ } else if (!ret && !new_size) {
   /*
   * Mark that we allocate beyond EOF so the subsequent truncate
   * can proceed even if the new size is the same as i_size.
@@ -4681,9 +4701,8 @@ retry:
  ext4_journal_stop(handle);
 out:
  mutex_unlock(&inode->i_mutex);
- trace_ext4_fallocate_exit(inode, offset, max_blocks,
-    ret > 0 ? ret2 : ret);
- return ret > 0 ? ret2 : ret;
+ trace_ext4_fallocate_exit(inode, offset, max_blocks, ret);
+ return ret;
 }
 
 /*
-- 
1.7.1