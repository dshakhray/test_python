From 859e9a0259b03591eca2e6e1cb9f4a887a4b8489 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:25:52 -0400
Subject: [fs] ceph: pre-allocate ceph_cap struct for ceph_add_cap()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-246-git-send-email-sweil@redhat.com>
Patchwork-id: 89810
O-Subject: [PATCH 245/303] ceph: pre-allocate ceph_cap struct for ceph_add_cap()
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Yan, Zheng" <zheng.z.yan@intel.com>

So that ceph_add_cap() can be used while i_ceph_lock is locked.
This simplifies the code that handle cap import/export.

Signed-off-by: Yan, Zheng <zheng.z.yan@intel.com>
(cherry picked from commit d9df2783507943316b305e177e5b1c157200c76f)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/caps.c b/fs/ceph/caps.c
index 211a156..9bd07cf 100644
--- a/fs/ceph/caps.c
+++ b/fs/ceph/caps.c
@@ -220,8 +220,8 @@ int ceph_unreserve_caps(struct ceph_mds_client *mdsc,
  return 0;
 }
 
-static struct ceph_cap *get_cap(struct ceph_mds_client *mdsc,
-    struct ceph_cap_reservation *ctx)
+struct ceph_cap *ceph_get_cap(struct ceph_mds_client *mdsc,
+         struct ceph_cap_reservation *ctx)
 {
  struct ceph_cap *cap = NULL;
 
@@ -506,15 +506,14 @@ static void __check_cap_issue(struct ceph_inode_info *ci, struct ceph_cap *cap,
  * it is < 0.  (This is so we can atomically add the cap and add an
  * open file reference to it.)
  */
-int ceph_add_cap(struct inode *inode,
-   struct ceph_mds_session *session, u64 cap_id,
-   int fmode, unsigned issued, unsigned wanted,
-   unsigned seq, unsigned mseq, u64 realmino, int flags,
-   struct ceph_cap_reservation *caps_reservation)
+void ceph_add_cap(struct inode *inode,
+    struct ceph_mds_session *session, u64 cap_id,
+    int fmode, unsigned issued, unsigned wanted,
+    unsigned seq, unsigned mseq, u64 realmino, int flags,
+    struct ceph_cap **new_cap)
 {
  struct ceph_mds_client *mdsc = ceph_inode_to_client(inode)->mdsc;
  struct ceph_inode_info *ci = ceph_inode(inode);
- struct ceph_cap *new_cap = NULL;
  struct ceph_cap *cap;
  int mds = session->s_mds;
  int actual_wanted;
@@ -529,20 +528,10 @@ int ceph_add_cap(struct inode *inode,
  if (fmode >= 0)
   wanted |= ceph_caps_for_mode(fmode);
 
-retry:
- spin_lock(&ci->i_ceph_lock);
  cap = __get_cap_for_mds(ci, mds);
  if (!cap) {
-  if (new_cap) {
-   cap = new_cap;
-   new_cap = NULL;
-  } else {
-   spin_unlock(&ci->i_ceph_lock);
-   new_cap = get_cap(mdsc, caps_reservation);
-   if (new_cap == NULL)
-    return -ENOMEM;
-   goto retry;
-  }
+  cap = *new_cap;
+  *new_cap = NULL;
 
   cap->issued = 0;
   cap->implemented = 0;
@@ -560,9 +549,6 @@ retry:
   session->s_nr_caps++;
   spin_unlock(&session->s_cap_lock);
  } else {
-  if (new_cap)
-   ceph_put_cap(mdsc, new_cap);
-
   /*
    * auth mds of the inode changed. we received the cap export
    * message, but still haven't received the cap import message.
@@ -624,7 +610,6 @@ retry:
    ci->i_auth_cap = cap;
    cap->mds_wanted = wanted;
   }
-  ci->i_cap_exporting_issued = 0;
  } else {
   WARN_ON(ci->i_auth_cap == cap);
  }
@@ -646,9 +631,6 @@ retry:
 
  if (fmode >= 0)
   __ceph_get_fmode(ci, fmode);
- spin_unlock(&ci->i_ceph_lock);
- wake_up_all(&ci->i_cap_wq);
- return 0;
 }
 
 /*
@@ -683,7 +665,7 @@ static int __cap_is_valid(struct ceph_cap *cap)
  */
 int __ceph_caps_issued(struct ceph_inode_info *ci, int *implemented)
 {
- int have = ci->i_snap_caps | ci->i_cap_exporting_issued;
+ int have = ci->i_snap_caps;
  struct ceph_cap *cap;
  struct rb_node *p;
 
@@ -898,7 +880,7 @@ int __ceph_caps_mds_wanted(struct ceph_inode_info *ci)
  */
 static int __ceph_is_any_caps(struct ceph_inode_info *ci)
 {
- return !RB_EMPTY_ROOT(&ci->i_caps) || ci->i_cap_exporting_issued;
+ return !RB_EMPTY_ROOT(&ci->i_caps);
 }
 
 int ceph_is_any_caps(struct inode *inode)
@@ -2781,7 +2763,7 @@ static void handle_cap_export(struct inode *inode, struct ceph_mds_caps *ex,
 {
  struct ceph_mds_client *mdsc = ceph_inode_to_client(inode)->mdsc;
  struct ceph_mds_session *tsession = NULL;
- struct ceph_cap *cap, *tcap;
+ struct ceph_cap *cap, *tcap, *new_cap = NULL;
  struct ceph_inode_info *ci = ceph_inode(inode);
  u64 t_cap_id;
  unsigned mseq = le32_to_cpu(ex->migrate_seq);
@@ -2843,15 +2825,14 @@ retry:
   }
   __ceph_remove_cap(cap, false);
   goto out_unlock;
- }
-
- if (tsession) {
-  int flag = (cap == ci->i_auth_cap) ? CEPH_CAP_FLAG_AUTH : 0;
-  spin_unlock(&ci->i_ceph_lock);
+ } else if (tsession) {
   /* add placeholder for the export tagert */
+  int flag = (cap == ci->i_auth_cap) ? CEPH_CAP_FLAG_AUTH : 0;
   ceph_add_cap(inode, tsession, t_cap_id, -1, issued, 0,
-        t_seq - 1, t_mseq, (u64)-1, flag, NULL);
-  goto retry;
+        t_seq - 1, t_mseq, (u64)-1, flag, &new_cap);
+
+  __ceph_remove_cap(cap, false);
+  goto out_unlock;
  }
 
  spin_unlock(&ci->i_ceph_lock);
@@ -2870,6 +2851,7 @@ retry:
        SINGLE_DEPTH_NESTING);
   }
   ceph_add_cap_releases(mdsc, tsession);
+  new_cap = ceph_get_cap(mdsc, NULL);
  } else {
   WARN_ON(1);
   tsession = NULL;
@@ -2884,6 +2866,8 @@ out_unlock:
   mutex_unlock(&tsession->s_mutex);
   ceph_put_mds_session(tsession);
  }
+ if (new_cap)
+  ceph_put_cap(mdsc, new_cap);
 }
 
 /*
@@ -2899,7 +2883,7 @@ static void handle_cap_import(struct ceph_mds_client *mdsc,
          void *snaptrace, int snaptrace_len)
 {
  struct ceph_inode_info *ci = ceph_inode(inode);
- struct ceph_cap *cap;
+ struct ceph_cap *cap, *new_cap = NULL;
  int mds = session->s_mds;
  unsigned issued = le32_to_cpu(im->caps);
  unsigned wanted = le32_to_cpu(im->wanted);
@@ -2921,7 +2905,20 @@ static void handle_cap_import(struct ceph_mds_client *mdsc,
  dout("handle_cap_import inode %p ci %p mds%d mseq %d peer %d\n",
       inode, ci, mds, mseq, peer);
 
+retry:
  spin_lock(&ci->i_ceph_lock);
+ cap = __get_cap_for_mds(ci, mds);
+ if (!cap) {
+  if (!new_cap) {
+   spin_unlock(&ci->i_ceph_lock);
+   new_cap = ceph_get_cap(mdsc, NULL);
+   goto retry;
+  }
+ }
+
+ ceph_add_cap(inode, session, cap_id, -1, issued, wanted, seq, mseq,
+       realmino, CEPH_CAP_FLAG_AUTH, &new_cap);
+
  cap = peer >= 0 ? __get_cap_for_mds(ci, peer) : NULL;
  if (cap && cap->cap_id == p_cap_id) {
   dout(" remove export cap %p mds%d flags %d\n",
@@ -2936,7 +2933,6 @@ static void handle_cap_import(struct ceph_mds_client *mdsc,
           cap->mseq, mds, le32_to_cpu(ph->seq),
           le32_to_cpu(ph->mseq));
   }
-  ci->i_cap_exporting_issued = cap->issued;
   __ceph_remove_cap(cap, (ph->flags & CEPH_CAP_FLAG_RELEASE));
  }
 
@@ -2945,16 +2941,17 @@ static void handle_cap_import(struct ceph_mds_client *mdsc,
  ci->i_requested_max_size = 0;
  spin_unlock(&ci->i_ceph_lock);
 
+ wake_up_all(&ci->i_cap_wq);
+
  down_write(&mdsc->snap_rwsem);
  ceph_update_snap_trace(mdsc, snaptrace, snaptrace+snaptrace_len,
           false);
  downgrade_write(&mdsc->snap_rwsem);
- ceph_add_cap(inode, session, cap_id, -1,
-       issued, wanted, seq, mseq, realmino, CEPH_CAP_FLAG_AUTH,
-       NULL /* no caps context */);
  kick_flushing_inode_caps(mdsc, session, inode);
  up_read(&mdsc->snap_rwsem);
 
+ if (new_cap)
+  ceph_put_cap(mdsc, new_cap);
 }
 
 /*
diff --git a/fs/ceph/inode.c b/fs/ceph/inode.c
index 485468e..cc20464 100644
--- a/fs/ceph/inode.c
+++ b/fs/ceph/inode.c
@@ -337,7 +337,6 @@ struct inode *ceph_alloc_inode(struct super_block *sb)
  INIT_LIST_HEAD(&ci->i_cap_snaps);
  ci->i_head_snapc = NULL;
  ci->i_snap_caps = 0;
- ci->i_cap_exporting_issued = 0;
 
  for (i = 0; i < CEPH_FILE_MODE_NUM; i++)
   ci->i_nr_by_mode[i] = 0;
@@ -399,7 +398,7 @@ void ceph_destroy_inode(struct inode *inode)
 
  /*
   * we may still have a snap_realm reference if there are stray
-  * caps in i_cap_exporting_issued or i_snap_caps.
+  * caps in i_snap_caps.
   */
  if (ci->i_snap_realm) {
   struct ceph_mds_client *mdsc =
@@ -570,6 +569,7 @@ static int fill_inode(struct inode *inode,
         unsigned long ttl_from, int cap_fmode,
         struct ceph_cap_reservation *caps_reservation)
 {
+ struct ceph_mds_client *mdsc = ceph_inode_to_client(inode)->mdsc;
  struct ceph_mds_reply_inode *info = iinfo->in;
  struct ceph_inode_info *ci = ceph_inode(inode);
  int i;
@@ -579,7 +579,9 @@ static int fill_inode(struct inode *inode,
  struct ceph_inode_frag *frag;
  struct rb_node *rb_node;
  struct ceph_buffer *xattr_blob = NULL;
+ struct ceph_cap *new_cap = NULL;
  int err = 0;
+ bool wake = false;
  bool queue_trunc = false;
  bool new_version = false;
 
@@ -587,6 +589,10 @@ static int fill_inode(struct inode *inode,
       inode, ceph_vinop(inode), le64_to_cpu(info->version),
       ci->i_version);
 
+ /* prealloc new cap struct */
+ if (info->cap.caps && ceph_snap(inode) == CEPH_NOSNAP)
+  new_cap = ceph_get_cap(mdsc, caps_reservation);
+
  /*
   * prealloc xattr data, if it looks like we'll need it.  only
   * if len > 4 (meaning there are actually xattrs; the first 4
@@ -749,8 +755,37 @@ static int fill_inode(struct inode *inode,
   dout(" marking %p complete (empty)\n", inode);
   __ceph_dir_set_complete(ci, atomic_read(&ci->i_release_count));
  }
+
+ /* were we issued a capability? */
+ if (info->cap.caps) {
+  if (ceph_snap(inode) == CEPH_NOSNAP) {
+   ceph_add_cap(inode, session,
+         le64_to_cpu(info->cap.cap_id),
+         cap_fmode,
+         le32_to_cpu(info->cap.caps),
+         le32_to_cpu(info->cap.wanted),
+         le32_to_cpu(info->cap.seq),
+         le32_to_cpu(info->cap.mseq),
+         le64_to_cpu(info->cap.realm),
+         info->cap.flags, &new_cap);
+   wake = true;
+  } else {
+   dout(" %p got snap_caps %s\n", inode,
+        ceph_cap_string(le32_to_cpu(info->cap.caps)));
+   ci->i_snap_caps |= le32_to_cpu(info->cap.caps);
+   if (cap_fmode >= 0)
+    __ceph_get_fmode(ci, cap_fmode);
+  }
+ } else if (cap_fmode >= 0) {
+  pr_warning("mds issued no caps on %llx.%llx\n",
+      ceph_vinop(inode));
+  __ceph_get_fmode(ci, cap_fmode);
+ }
  spin_unlock(&ci->i_ceph_lock);
 
+ if (wake)
+  wake_up_all(&ci->i_cap_wq);
+
  /* queue truncate if we saw i_size decrease */
  if (queue_trunc)
   ceph_queue_vmtruncate(inode);
@@ -793,41 +828,14 @@ static int fill_inode(struct inode *inode,
  }
  mutex_unlock(&ci->i_fragtree_mutex);
 
- /* were we issued a capability? */
- if (info->cap.caps) {
-  if (ceph_snap(inode) == CEPH_NOSNAP) {
-   ceph_add_cap(inode, session,
-         le64_to_cpu(info->cap.cap_id),
-         cap_fmode,
-         le32_to_cpu(info->cap.caps),
-         le32_to_cpu(info->cap.wanted),
-         le32_to_cpu(info->cap.seq),
-         le32_to_cpu(info->cap.mseq),
-         le64_to_cpu(info->cap.realm),
-         info->cap.flags,
-         caps_reservation);
-  } else {
-   spin_lock(&ci->i_ceph_lock);
-   dout(" %p got snap_caps %s\n", inode,
-        ceph_cap_string(le32_to_cpu(info->cap.caps)));
-   ci->i_snap_caps |= le32_to_cpu(info->cap.caps);
-   if (cap_fmode >= 0)
-    __ceph_get_fmode(ci, cap_fmode);
-   spin_unlock(&ci->i_ceph_lock);
-  }
- } else if (cap_fmode >= 0) {
-  pr_warning("mds issued no caps on %llx.%llx\n",
-      ceph_vinop(inode));
-  __ceph_get_fmode(ci, cap_fmode);
- }
-
  /* update delegation info? */
  if (dirinfo)
   ceph_fill_dirfrag(inode, dirinfo);
 
  err = 0;
-
 out:
+ if (new_cap)
+  ceph_put_cap(mdsc, new_cap);
  if (xattr_blob)
   ceph_buffer_put(xattr_blob);
  return err;
diff --git a/fs/ceph/super.h b/fs/ceph/super.h
index c9c47f2..3c69588 100644
--- a/fs/ceph/super.h
+++ b/fs/ceph/super.h
@@ -281,7 +281,6 @@ struct ceph_inode_info {
  struct ceph_snap_context *i_head_snapc;  /* set if wr_buffer_head > 0 or
           dirty|flushing caps */
  unsigned i_snap_caps;           /* cap bits for snapped files */
- unsigned i_cap_exporting_issued;
 
  int i_nr_by_mode[CEPH_FILE_MODE_NUM];  /* open file counts */
 
@@ -720,11 +719,13 @@ extern void ceph_xattr_exit(void);
 extern const char *ceph_cap_string(int c);
 extern void ceph_handle_caps(struct ceph_mds_session *session,
         struct ceph_msg *msg);
-extern int ceph_add_cap(struct inode *inode,
-   struct ceph_mds_session *session, u64 cap_id,
-   int fmode, unsigned issued, unsigned wanted,
-   unsigned cap, unsigned seq, u64 realmino, int flags,
-   struct ceph_cap_reservation *caps_reservation);
+extern struct ceph_cap *ceph_get_cap(struct ceph_mds_client *mdsc,
+         struct ceph_cap_reservation *ctx);
+extern void ceph_add_cap(struct inode *inode,
+    struct ceph_mds_session *session, u64 cap_id,
+    int fmode, unsigned issued, unsigned wanted,
+    unsigned cap, unsigned seq, u64 realmino, int flags,
+    struct ceph_cap **new_cap);
 extern void __ceph_remove_cap(struct ceph_cap *cap, bool queue_release);
 extern void ceph_put_cap(struct ceph_mds_client *mdsc,
     struct ceph_cap *cap);
-- 
1.7.1