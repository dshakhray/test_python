From 011233805b47d07b074d383474992798cb5285c8 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:39 -0400
Subject: [cpufreq] Remove unnecessary variable/parameter 'frozen'

Message-id: <1409235879-1283-126-git-send-email-prarit@redhat.com>
Patchwork-id: 89435
O-Subject: [RHEL7.1 PATCH BZ 1134639 125/185] cpufreq: Remove unnecessary variable/parameter 'frozen'
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 96bbbe4a2a5b13c440a19dd7a5ff33de3303aac4
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon Mar 10 14:53:35 2014 +0530

    cpufreq: Remove unnecessary variable/parameter 'frozen'

    We have used 'frozen' variable/function parameter at many places to
    distinguish between CPU offline/online on suspend/resume vs sysfs
    removals. We now have another variable cpufreq_suspended which can
    be used in these cases, so we can get rid of all those variables or
    function parameters.

    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

There were merge conflicts when attempting to apply the upstream patches
here and it seemed easier to include the final code instead of a separate
merge patch.

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 21556ec..3186a65 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1041,13 +1041,13 @@ static void update_policy_cpu(struct cpufreq_policy *policy, unsigned int cpu)
    CPUFREQ_UPDATE_POLICY_CPU, policy);
 }
 
-static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
-        bool frozen)
+static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)
 {
  unsigned int j, cpu = dev->id;
  int ret = -ENOMEM;
  struct cpufreq_policy *policy;
  unsigned long flags;
+ bool recover_policy = cpufreq_suspended;
 #ifdef CONFIG_HOTPLUG_CPU
  struct cpufreq_policy *tpolicy;
 #endif
@@ -1088,9 +1088,9 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   * Restore the saved policy when doing light-weight init and fall back
   * to the full init if that fails.
   */
- policy = frozen ? cpufreq_policy_restore(cpu) : NULL;
+ policy = recover_policy ? cpufreq_policy_restore(cpu) : NULL;
  if (!policy) {
-  frozen = false;
+  recover_policy = false;
   policy = cpufreq_policy_alloc();
   if (!policy)
    goto nomem_out;
@@ -1102,7 +1102,7 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   * the creation of a brand new one. So we need to perform this update
   * by invoking update_policy_cpu().
   */
- if (frozen && cpu != policy->cpu)
+ if (recover_policy && cpu != policy->cpu)
   update_policy_cpu(policy, cpu);
  else
   policy->cpu = cpu;
@@ -1130,7 +1130,7 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   */
  cpumask_and(policy->cpus, policy->cpus, cpu_online_mask);
 
- if (!frozen) {
+ if (!recover_policy) {
   policy->user_policy.min = policy->min;
   policy->user_policy.max = policy->max;
  }
@@ -1192,7 +1192,7 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
  blocking_notifier_call_chain(&cpufreq_policy_notifier_list,
          CPUFREQ_START, policy);
 
- if (!frozen) {
+ if (!recover_policy) {
   ret = cpufreq_add_dev_interface(policy, dev);
   if (ret)
    goto err_out_unregister;
@@ -1206,7 +1206,7 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
 
  cpufreq_init_policy(policy);
 
- if (!frozen) {
+ if (!recover_policy) {
   policy->user_policy.policy = policy->policy;
   policy->user_policy.governor = policy->governor;
  }
@@ -1228,7 +1228,7 @@ err_get_freq:
  if (cpufreq_driver->exit)
   cpufreq_driver->exit(policy);
 err_set_policy_cpu:
- if (frozen) {
+ if (recover_policy) {
   /* Do not leave stale fallback data behind. */
   per_cpu(cpufreq_cpu_data_fallback, cpu) = NULL;
   cpufreq_policy_put_kobj(policy);
@@ -1251,7 +1251,7 @@ nomem_out:
  */
 static int cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)
 {
- return __cpufreq_add_dev(dev, sif, false);
+ return __cpufreq_add_dev(dev, sif);
 }
 
 static int cpufreq_nominate_new_policy_cpu(struct cpufreq_policy *policy,
@@ -1282,8 +1282,7 @@ static int cpufreq_nominate_new_policy_cpu(struct cpufreq_policy *policy,
 }
 
 static int __cpufreq_remove_dev_prepare(struct device *dev,
-     struct subsys_interface *sif,
-     bool frozen)
+     struct subsys_interface *sif)
 {
  unsigned int cpu = dev->id, cpus;
  int new_cpu, ret;
@@ -1297,7 +1296,7 @@ static int __cpufreq_remove_dev_prepare(struct device *dev,
  policy = per_cpu(cpufreq_cpu_data, cpu);
 
  /* Save the policy somewhere when doing a light-weight tear-down */
- if (frozen)
+ if (cpufreq_suspended)
   per_cpu(cpufreq_cpu_data_fallback, cpu) = policy;
 
  write_unlock_irqrestore(&cpufreq_driver_lock, flags);
@@ -1330,7 +1329,7 @@ static int __cpufreq_remove_dev_prepare(struct device *dev,
   if (new_cpu >= 0) {
    update_policy_cpu(policy, new_cpu);
 
-   if (!frozen) {
+   if (!cpufreq_suspended) {
     pr_debug("%s: policy Kobject moved to cpu: %d from: %d\n",
       __func__, new_cpu, cpu);
    }
@@ -1341,8 +1340,7 @@ static int __cpufreq_remove_dev_prepare(struct device *dev,
 }
 
 static int __cpufreq_remove_dev_finish(struct device *dev,
-           struct subsys_interface *sif,
-           bool frozen)
+           struct subsys_interface *sif)
 {
  unsigned int cpu = dev->id, cpus;
  int ret;
@@ -1377,7 +1375,7 @@ static int __cpufreq_remove_dev_finish(struct device *dev,
    }
   }
 
-  if (!frozen)
+  if (!cpufreq_suspended)
    cpufreq_policy_put_kobj(policy);
 
   /*
@@ -1393,22 +1391,14 @@ static int __cpufreq_remove_dev_finish(struct device *dev,
   list_del(&policy->policy_list);
   write_unlock_irqrestore(&cpufreq_driver_lock, flags);
 
-  if (!frozen)
+  if (!cpufreq_suspended)
    cpufreq_policy_free(policy);
- } else {
-
-  if (!frozen) {
-   pr_debug("%s: removing link, cpu: %d\n", __func__, cpu);
-   cpufreq_cpu_put(policy);
-  }
-
-  if (has_target()) {
-   if ((ret = __cpufreq_governor(policy, CPUFREQ_GOV_START)) ||
-     (ret = __cpufreq_governor(policy, CPUFREQ_GOV_LIMITS))) {
-    pr_err("%s: Failed to start governor\n",
-           __func__);
-    return ret;
-   }
+ } else if (has_target()) {
+  if ((ret = __cpufreq_governor(policy, CPUFREQ_GOV_START)) ||
+    (ret = __cpufreq_governor(policy, CPUFREQ_GOV_LIMITS))) {
+   pr_err("%s: Failed to start governor\n",
+          __func__);
+   return ret;
   }
  }
 
@@ -1429,10 +1419,10 @@ static int cpufreq_remove_dev(struct device *dev, struct subsys_interface *sif)
  if (cpu_is_offline(cpu))
   return 0;
 
- ret = __cpufreq_remove_dev_prepare(dev, sif, false);
+ ret = __cpufreq_remove_dev_prepare(dev, sif);
 
  if (!ret)
-  ret = __cpufreq_remove_dev_finish(dev, sif, false);
+  ret = __cpufreq_remove_dev_finish(dev, sif);
 
  return ret;
 }
@@ -2187,29 +2177,24 @@ static int cpufreq_cpu_callback(struct notifier_block *nfb,
 {
  unsigned int cpu = (unsigned long)hcpu;
  struct device *dev;
- bool frozen = false;
 
  dev = get_cpu_device(cpu);
  if (dev) {
-
-  if (action & CPU_TASKS_FROZEN)
-   frozen = true;
-
   switch (action & ~CPU_TASKS_FROZEN) {
   case CPU_ONLINE:
-   __cpufreq_add_dev(dev, NULL, frozen);
+   __cpufreq_add_dev(dev, NULL);
    break;
 
   case CPU_DOWN_PREPARE:
-   __cpufreq_remove_dev_prepare(dev, NULL, frozen);
+   __cpufreq_remove_dev_prepare(dev, NULL);
    break;
 
   case CPU_POST_DEAD:
-   __cpufreq_remove_dev_finish(dev, NULL, frozen);
+   __cpufreq_remove_dev_finish(dev, NULL);
    break;
 
   case CPU_DOWN_FAILED:
-   __cpufreq_add_dev(dev, NULL, frozen);
+   __cpufreq_add_dev(dev, NULL);
    break;
   }
  }
-- 
1.7.1