From efddc32510cf23038f9dbc3796dd368047768041 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Wed, 30 Apr 2014 10:48:04 -0400
Subject: [net] netfilter: ctnetlink: don't add null bindings if no nat requested

Message-id: <1398854884-30017-5-git-send-email-fwestpha@redhat.com>
Patchwork-id: 79251
O-Subject: [PATCH 4/4 RHEL7.1 net] netfilter: ctnetlink: don't add null bindings if no nat requested
Bugzilla: 1089929
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Jesper Brouer <jbrouer@redhat.com>

BZ: 1089929
Tested: "conntrack --create" still works, including nat
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7399331
Upstream: fe337ac2839521b360f828b3ebd992d597b1ad16 nf.git

commit fe337ac2839521b360f828b3ebd992d597b1ad16
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Apr 28 21:07:31 2014 +0200

    netfilter: ctnetlink: don't add null bindings if no nat requested

    commit 0eba801b64cc8284d9024c7ece30415a2b981a72 tried to fix a race
    where nat initialisation can happen after ctnetlink-created conntrack
    has been created.

    However, it causes the nat module(s) to be loaded needlessly on
    systems that are not using NAT.

    Fortunately, we do not have to create null bindings in that case.

    conntracks injected via ctnetlink always have the CONFIRMED bit set,
    which prevents addition of the nat extension in nf_nat_ipv4/6_fn().

    We only need to make sure that either no nat extension is added
    or that we've created both src and dst manips.

    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/netfilter/nf_conntrack_netlink.c b/net/netfilter/nf_conntrack_netlink.c
index e6f2e7e..45b335f 100644
--- a/net/netfilter/nf_conntrack_netlink.c
+++ b/net/netfilter/nf_conntrack_netlink.c
@@ -1314,6 +1314,9 @@ ctnetlink_setup_nat(struct nf_conn *ct, const struct nlattr * const cda[])
 #ifdef CONFIG_NF_NAT_NEEDED
  int ret;
 
+ if (!cda[CTA_NAT_DST] && !cda[CTA_NAT_SRC])
+  return 0;
+
  ret = ctnetlink_parse_nat_setup(ct, NF_NAT_MANIP_DST,
      cda[CTA_NAT_DST]);
  if (ret < 0)
-- 
1.7.1