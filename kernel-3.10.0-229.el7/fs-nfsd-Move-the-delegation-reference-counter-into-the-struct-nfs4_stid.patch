From e9f271c59269ecfb64c26c47ac0a028b96269681 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:19:11 -0400
Subject: [fs] nfsd: Move the delegation reference counter into the struct nfs4_stid

Message-id: <1410898849-22126-68-git-send-email-bfields@redhat.com>
Patchwork-id: 95777
O-Subject: [Patch RHEL7 067/165] nfsd: Move the delegation reference counter into the struct nfs4_stid
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

We will want to add reference counting to the lock stateid and open
stateids too in later patches.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 72c0b0fb9f8a24612b6c33c8adf9e9406818981b
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index cc477dd..72da0d4 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -472,6 +472,7 @@ kmem_cache *slab)
  stid->sc_stateid.si_opaque.so_clid = cl->cl_clientid;
  /* Will be incremented before return to client: */
  stid->sc_stateid.si_generation = 0;
+ atomic_set(&stid->sc_count, 1);
 
  /*
   * It shouldn't be a problem to reuse an opaque stateid value.
@@ -595,7 +596,6 @@ alloc_init_deleg(struct nfs4_client *clp, struct nfs4_ol_stateid *stp, struct sv
  dp->dl_type = NFS4_OPEN_DELEGATE_READ;
  fh_copy_shallow(&dp->dl_fh, &current_fh->fh_handle);
  dp->dl_time = 0;
- atomic_set(&dp->dl_count, 1);
  INIT_WORK(&dp->dl_recall.cb_work, nfsd4_run_cb_recall);
  return dp;
 }
@@ -615,7 +615,7 @@ static void nfs4_free_stid(struct kmem_cache *slab, struct nfs4_stid *s)
 void
 nfs4_put_delegation(struct nfs4_delegation *dp)
 {
- if (atomic_dec_and_test(&dp->dl_count)) {
+ if (atomic_dec_and_test(&dp->dl_stid.sc_count)) {
   remove_stid(&dp->dl_stid);
   nfs4_free_stid(deleg_slab, &dp->dl_stid);
   num_delegations--;
@@ -3118,7 +3118,7 @@ static void nfsd_break_one_deleg(struct nfs4_delegation *dp)
   * lock) we know the server hasn't removed the lease yet, we know
   * it's safe to take a reference.
   */
- atomic_inc(&dp->dl_count);
+ atomic_inc(&dp->dl_stid.sc_count);
  nfsd4_cb_recall(dp);
 }
 
diff --git a/fs/nfsd/state.h b/fs/nfsd/state.h
index 996d61e..e68a9ae 100644
--- a/fs/nfsd/state.h
+++ b/fs/nfsd/state.h
@@ -73,6 +73,7 @@ struct nfsd4_callback {
 };
 
 struct nfs4_stid {
+ atomic_t sc_count;
 #define NFS4_OPEN_STID 1
 #define NFS4_LOCK_STID 2
 #define NFS4_DELEG_STID 4
@@ -91,7 +92,6 @@ struct nfs4_delegation {
  struct list_head dl_perfile;
  struct list_head dl_perclnt;
  struct list_head dl_recall_lru;  /* delegation recalled */
- atomic_t  dl_count;       /* ref count */
  struct nfs4_file *dl_file;
  u32   dl_type;
  time_t   dl_time;
-- 
1.7.1