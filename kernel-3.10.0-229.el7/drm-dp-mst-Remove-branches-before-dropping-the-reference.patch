From 7c6007c419d3e1d1ae7b90cdb5834ba0350eacd2 Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 17 Dec 2014 21:39:32 -0500
Subject: [drm] dp-mst: Remove branches before dropping the reference

Message-id: <1418852380-13061-82-git-send-email-rclark@redhat.com>
Patchwork-id: 102198
O-Subject: [RHEL7 drm 81/89] drm/dp-mst: Remove branches before dropping the reference
Bugzilla: 1173317
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1173317
Upstream: drm-next

commit 0391359ddf79b52bb7e7bb9ace08e34fb08b0e76

Author:     Daniel Vetter <daniel.vetter@ffwll.ch>
AuthorDate: Mon Dec 8 22:55:22 2014 +0100
Commit:     Rob Clark <rclark@redhat.com>
CommitDate: Mon Dec 15 14:45:20 2014 -0500

    drm/dp-mst: Remove branches before dropping the reference

    When we unplug a dp mst branch we unreference the entire tree from
    the root towards the leaves. Which is ok, since that's the way the
    pointers and so also the refcounts go.

    But when we drop the reference we must make sure that we remove the
    branches/ports from the lists/pointers before dropping the reference.
    Otherwise the get_validated functions will still return it instead
    of returning NULL (which indicates a potentially on-going unplug).

    The mst branch destroy gets this right for ports: First it deletes
    the port from the ports list, then it unrefs. But the ports destroy
    function gets it wrong: First it unrefs, then it drops the ref. Which
    means a zombie mst branch can still be validate with get_validated_mstb_ref
    when it shouldn't.

    Fix this.

    This should address a backtrace Dave dug out somewhere on unplug:

     [<ffffffffa00cc262>] drm_dp_mst_get_validated_mstb_ref_locked+0x92/0xa0 [drm_kms_helper]
     [<ffffffffa00cc211>] drm_dp_mst_get_validated_mstb_ref_locked+0x41/0xa0 [drm_kms_helper]
     [<ffffffffa00cc2aa>] drm_dp_get_validated_mstb_ref+0x3a/0x60 [drm_kms_helper]
     [<ffffffffa00cc2fb>] drm_dp_payload_send_msg.isra.14+0x2b/0x100 [drm_kms_helper]
     [<ffffffffa00cc547>] drm_dp_update_payload_part1+0x177/0x360 [drm_kms_helper]
     [<ffffffffa015c52e>] intel_mst_disable_dp+0x3e/0x80 [i915]
     [<ffffffffa013d60b>] haswell_crtc_disable+0x1cb/0x340 [i915]
     [<ffffffffa0136739>] intel_crtc_control+0x49/0x100 [i915]
     [<ffffffffa0136857>] intel_crtc_update_dpms+0x67/0x80 [i915]
     [<ffffffffa013fa59>] intel_connector_dpms+0x59/0x70 [i915]
     [<ffffffffa015c752>] intel_dp_destroy_mst_connector+0x32/0xc0 [i915]
     [<ffffffffa00cb44b>] drm_dp_destroy_port+0x6b/0xa0 [drm_kms_helper]
     [<ffffffffa00cb588>] drm_dp_destroy_mst_branch_device+0x108/0x130 [drm_kms_helper]
     [<ffffffffa00cb3cd>] drm_dp_port_teardown_pdt+0x3d/0x50 [drm_kms_helper]
     [<ffffffffa00cdb79>] drm_dp_mst_handle_up_req+0x499/0x540 [drm_kms_helper]
     [<ffffffff810d9ead>] ? trace_hardirqs_on_caller+0x15d/0x200 [<ffffffffa00cdc73>]
     drm_dp_mst_hpd_irq+0x53/0xa00 [drm_kms_helper] [<ffffffffa00c7dfb>]
     ? drm_dp_dpcd_read+0x1b/0x20 [drm_kms_helper] [<ffffffffa0153ed8>]
     ? intel_dp_dpcd_read_wake+0x38/0x70 [i915] [<ffffffffa015a225>]
     intel_dp_check_mst_status+0xb5/0x250 [i915] [<ffffffffa015ac71>]
     intel_dp_hpd_pulse+0x181/0x210 [i915] [<ffffffffa01104f6>]
     i915_digport_work_func+0x96/0x120 [i915]

    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dave Airlie <airlied@redhat.com>

Signed-off-by: Rob Clark <rclark@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/drm_dp_mst_topology.c b/drivers/gpu/drm/drm_dp_mst_topology.c
index 8c6e1bd..acb90d5 100644
--- a/drivers/gpu/drm/drm_dp_mst_topology.c
+++ b/drivers/gpu/drm/drm_dp_mst_topology.c
@@ -839,6 +839,8 @@ static void drm_dp_put_mst_branch_device(struct drm_dp_mst_branch *mstb)
 
 static void drm_dp_port_teardown_pdt(struct drm_dp_mst_port *port, int old_pdt)
 {
+ struct drm_dp_mst_branch *mstb;
+
  switch (old_pdt) {
  case DP_PEER_DEVICE_DP_LEGACY_CONV:
  case DP_PEER_DEVICE_SST_SINK:
@@ -846,8 +848,9 @@ static void drm_dp_port_teardown_pdt(struct drm_dp_mst_port *port, int old_pdt)
   drm_dp_mst_unregister_i2c_bus(&port->aux);
   break;
  case DP_PEER_DEVICE_MST_BRANCHING:
-  drm_dp_put_mst_branch_device(port->mstb);
+  mstb = port->mstb;
   port->mstb = NULL;
+  drm_dp_put_mst_branch_device(mstb);
   break;
  }
 }
-- 
1.7.1