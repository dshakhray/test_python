From 98401c1d17c4e478c296744c0776d89d3dfe6f8b Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:52:05 -0400
Subject: [tools] perf/report: Move hist browser selection code to separate function

Message-id: <1408953210-26343-238-git-send-email-jolsa@redhat.com>
Patchwork-id: 88982
O-Subject: [PATCH RHEL7.1 BZ1133083 237/322] perf report: Move hist browser selection code to separate function
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 8362951b7b0618687beddac90aeee43940d20659
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Wed Jan 8 12:22:07 2014 -0300

description
===========
To unclutter the main function.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index f2ff860..03941ad 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -441,13 +441,57 @@ static void report__warn_kptr_restrict(const struct report *rep)
  }
 }
 
+static int report__gtk_browse_hists(struct report *rep, const char *help)
+{
+ int (*hist_browser)(struct perf_evlist *evlist, const char *help,
+       struct hist_browser_timer *timer, float min_pcnt);
+
+ hist_browser = dlsym(perf_gtk_handle, "perf_evlist__gtk_browse_hists");
+
+ if (hist_browser == NULL) {
+  ui__error("GTK browser not found!\n");
+  return -1;
+ }
+
+ return hist_browser(rep->session->evlist, help, NULL, rep->min_percent);
+}
+
+static int report__browse_hists(struct report *rep)
+{
+ int ret;
+ struct perf_session *session = rep->session;
+ struct perf_evlist *evlist = session->evlist;
+ const char *help = "For a higher level overview, try: perf report --sort comm,dso";
+
+ switch (use_browser) {
+ case 1:
+  ret = perf_evlist__tui_browse_hists(evlist, help, NULL,
+          rep->min_percent,
+          &session->header.env);
+  /*
+   * Usually "ret" is the last pressed key, and we only
+   * care if the key notifies us to switch data file.
+   */
+  if (ret != K_SWITCH_INPUT_DATA)
+   ret = 0;
+  break;
+ case 2:
+  ret = report__gtk_browse_hists(rep, help);
+  break;
+ default:
+  ret = perf_evlist__tty_browse_hists(evlist, rep, help);
+  break;
+ }
+
+ return ret;
+}
+
 static int __cmd_report(struct report *rep)
 {
  int ret = -EINVAL;
  u64 nr_samples;
  struct perf_session *session = rep->session;
  struct perf_evsel *pos;
- const char *help = "For a higher level overview, try: perf report --sort comm,dso";
  struct ui_progress prog;
  struct perf_data_file *file = session->file;
 
@@ -524,38 +568,7 @@ static int __cmd_report(struct report *rep)
  list_for_each_entry(pos, &session->evlist->entries, node)
   hists__output_resort(&pos->hists);
 
- if (use_browser > 0) {
-  if (use_browser == 1) {
-   ret = perf_evlist__tui_browse_hists(session->evlist,
-       help, NULL,
-       rep->min_percent,
-       &session->header.env);
-   /*
-    * Usually "ret" is the last pressed key, and we only
-    * care if the key notifies us to switch data file.
-    */
-   if (ret != K_SWITCH_INPUT_DATA)
-    ret = 0;
-
-  } else if (use_browser == 2) {
-   int (*hist_browser)(struct perf_evlist *,
-         const char *,
-         struct hist_browser_timer *,
-         float min_pcnt);
-
-   hist_browser = dlsym(perf_gtk_handle,
-          "perf_evlist__gtk_browse_hists");
-   if (hist_browser == NULL) {
-    ui__error("GTK browser not found!\n");
-    return ret;
-   }
-   hist_browser(session->evlist, help, NULL,
-         rep->min_percent);
-  }
- } else
-  perf_evlist__tty_browse_hists(session->evlist, rep, help);
-
- return ret;
+ return report__browse_hists(rep);
 }
 
 static int
-- 
1.7.1