From 9394154cff0c3fdabf627f1115f0c286a0a51cf5 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 18:58:12 -0400
Subject: [fs] btrfs: fix check-integrity to look at the referenced data properly

Message-id: <1407179109-13714-6-git-send-email-sandeen@redhat.com>
Patchwork-id: 87033
O-Subject: [RHEL7.1 PATCH 005/422] Btrfs: fix check-integrity to look at the referenced data properly
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Josef Bacik <jbacik@fusionio.com>

commit e20d6c5ba38d066c7dc0f7d3b68da14b9ae7fe37
Author: Josef Bacik <jbacik@fusionio.com>
Date:   Wed Nov 13 21:11:49 2013 -0500

    Btrfs: fix check-integrity to look at the referenced data properly

    We were looking at file_extent_num_bytes unconditionally when looking at
    referenced data bytes, but this isn't correct for compression.  Fix this by
    checking the compression of the file extent we are and setting num_bytes to
    disk_num_bytes in the case of compression so that we are marking the proper
    bytes as referenced.  This fixes check_int_data freaking out when running
    btrfs/004.  Thanks,

    Signed-off-by: Josef Bacik <jbacik@fusionio.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/check-integrity.c b/fs/btrfs/check-integrity.c
index 131d828..160fb50 100644
--- a/fs/btrfs/check-integrity.c
+++ b/fs/btrfs/check-integrity.c
@@ -1456,10 +1456,14 @@ static int btrfsic_handle_extent_data(
  btrfsic_read_from_block_data(block_ctx, &file_extent_item,
          file_extent_item_offset,
          sizeof(struct btrfs_file_extent_item));
- next_bytenr = btrfs_stack_file_extent_disk_bytenr(&file_extent_item) +
-        btrfs_stack_file_extent_offset(&file_extent_item);
- generation = btrfs_stack_file_extent_generation(&file_extent_item);
- num_bytes = btrfs_stack_file_extent_num_bytes(&file_extent_item);
+ next_bytenr = btrfs_stack_file_extent_disk_bytenr(&file_extent_item);
+ if (btrfs_stack_file_extent_compression(&file_extent_item) ==
+     BTRFS_COMPRESS_NONE) {
+  next_bytenr += btrfs_stack_file_extent_offset(&file_extent_item);
+  num_bytes = btrfs_stack_file_extent_num_bytes(&file_extent_item);
+ } else {
+  num_bytes = btrfs_stack_file_extent_disk_num_bytes(&file_extent_item);
+ }
  generation = btrfs_stack_file_extent_generation(&file_extent_item);
 
  if (state->print_mask & BTRFSIC_PRINT_MASK_VERY_VERBOSE)
diff --git a/fs/btrfs/ctree.h b/fs/btrfs/ctree.h
index 8be78f7..1aafccd 100644
--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -2927,6 +2927,10 @@ BTRFS_SETGET_STACK_FUNCS(stack_file_extent_generation,
     struct btrfs_file_extent_item, generation, 64);
 BTRFS_SETGET_STACK_FUNCS(stack_file_extent_num_bytes,
     struct btrfs_file_extent_item, num_bytes, 64);
+BTRFS_SETGET_STACK_FUNCS(stack_file_extent_disk_num_bytes,
+    struct btrfs_file_extent_item, disk_num_bytes, 64);
+BTRFS_SETGET_STACK_FUNCS(stack_file_extent_compression,
+    struct btrfs_file_extent_item, compression, 8);
 
 static inline unsigned long
 btrfs_file_extent_inline_start(struct btrfs_file_extent_item *e)
-- 
1.7.1