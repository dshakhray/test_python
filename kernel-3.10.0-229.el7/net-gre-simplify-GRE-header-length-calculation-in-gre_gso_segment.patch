From a5c4ee5c37adbdb0ef831a93789ec4c979cbead6 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:14:51 -0400
Subject: [net] gre: simplify GRE header length calculation in gre_gso_segment()

Message-id: <1409652920-431-29-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90179
O-Subject: [PATCH 28/57] [RHEL7.1 net] gre_offload: simplify GRE header length calculation in gre_gso_segment()
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

dependency to avoid mangling 4749c09c37030c (gre: Call gso_make_checksum).

commit b884b1a46f205d56e33c0391c1d04644d846f41e
Author: Neal Cardwell <ncardwell@google.com>
Date:   Thu Jan 9 20:47:17 2014 -0500

    gre_offload: simplify GRE header length calculation in gre_gso_segment()

    Simplify the GRE header length calculation in gre_gso_segment().
    Switch to an approach that is simpler, faster, and more general. The
    new approach will continue to be correct even if we add support for
    the optional variable-length routing info that may be present in a GRE
    header.

    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: H.K. Jerry Chu <hkchu@google.com>
    Cc: Pravin B Shelar <pshelar@nicira.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/gre_offload.c b/net/ipv4/gre_offload.c
index 48b1829..f1d3228 100644
--- a/net/ipv4/gre_offload.c
+++ b/net/ipv4/gre_offload.c
@@ -27,7 +27,7 @@ static struct sk_buff *gre_gso_segment(struct sk_buff *skb,
 {
  struct sk_buff *segs = ERR_PTR(-EINVAL);
  netdev_features_t enc_features;
- int ghl = GRE_HEADER_SECTION;
+ int ghl;
  struct gre_base_hdr *greh;
  u16 mac_offset = skb->mac_header;
  int mac_len = skb->mac_len;
@@ -50,15 +50,11 @@ static struct sk_buff *gre_gso_segment(struct sk_buff *skb,
 
  greh = (struct gre_base_hdr *)skb_transport_header(skb);
 
- if (greh->flags & GRE_KEY)
-  ghl += GRE_HEADER_SECTION;
- if (greh->flags & GRE_SEQ)
-  ghl += GRE_HEADER_SECTION;
- if (greh->flags & GRE_CSUM) {
-  ghl += GRE_HEADER_SECTION;
-  csum = true;
- } else
-  csum = false;
+ ghl = skb_inner_network_header(skb) - skb_transport_header(skb);
+ if (unlikely(ghl < sizeof(*greh)))
+  goto out;
+
+ csum = !!(greh->flags & GRE_CSUM);
 
  if (unlikely(!pskb_may_pull(skb, ghl)))
   goto out;
-- 
1.7.1