From 0b3f3fbd92040b91341a4ff45984c681aab41b11 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 21:00:02 -0400
Subject: [fs] xfs: fully support v5 format filesystems

Message-id: <1412888441-4181-9-git-send-email-sandeen@redhat.com>
Patchwork-id: 97350
O-Subject: [RHEL7.1 PATCH 08/47] [fs] xfs: fully support v5 format filesystems
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit c99d609a16506602a7398eea7d12b13513f3d889
    Author: Dave Chinner <dchinner@redhat.com>
    Date:   Mon May 5 16:18:37 2014 +1000

    xfs: fully support v5 format filesystems

    We have had this code in the kernel for over a year now and have
    shaken all the known issues out of the code over the past few
    releases. It's now time to remove the experimental warnings during
    mount and fully support the new filesystem format in production
    systems.

    Remove the experimental warning, and add a version number to the
    initial "mounting filesystem" message to tell use what type of
    filesystem is being mounted. Also, remove the temporary inode
    cluster size output at mount time now we know that this code works
    fine.

    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_log.c b/fs/xfs/xfs_log.c
index 08624dc..a5f8bd9 100644
--- a/fs/xfs/xfs_log.c
+++ b/fs/xfs/xfs_log.c
@@ -616,11 +616,13 @@ xfs_log_mount(
  int  error = 0;
  int  min_logfsbs;
 
- if (!(mp->m_flags & XFS_MOUNT_NORECOVERY))
-  xfs_notice(mp, "Mounting Filesystem");
- else {
+ if (!(mp->m_flags & XFS_MOUNT_NORECOVERY)) {
+  xfs_notice(mp, "Mounting V%d Filesystem",
+      XFS_SB_VERSION_NUM(&mp->m_sb));
+ } else {
   xfs_notice(mp,
-"Mounting filesystem in no-recovery mode.  Filesystem will be inconsistent.");
+"Mounting V%d filesystem in no-recovery mode. Filesystem will be inconsistent.",
+      XFS_SB_VERSION_NUM(&mp->m_sb));
   ASSERT(mp->m_flags & XFS_MOUNT_RDONLY);
  }
 
diff --git a/fs/xfs/xfs_mount.c b/fs/xfs/xfs_mount.c
index a2f4459..a9e29ea 100644
--- a/fs/xfs/xfs_mount.c
+++ b/fs/xfs/xfs_mount.c
@@ -754,8 +754,6 @@ xfs_mountfs(
   new_size *= mp->m_sb.sb_inodesize / XFS_DINODE_MIN_SIZE;
   if (mp->m_sb.sb_inoalignmt >= XFS_B_TO_FSBT(mp, new_size))
    mp->m_inode_cluster_size = new_size;
-  xfs_info(mp, "Using inode cluster size of %d bytes",
-    mp->m_inode_cluster_size);
  }
 
  /*
diff --git a/fs/xfs/xfs_sb.c b/fs/xfs/xfs_sb.c
index 0c0e41b..8baf61a 100644
--- a/fs/xfs/xfs_sb.c
+++ b/fs/xfs/xfs_sb.c
@@ -201,10 +201,6 @@ xfs_mount_validate_sb(
   * write validation, we don't need to check feature masks.
   */
  if (check_version && XFS_SB_VERSION_NUM(sbp) == XFS_SB_VERSION_5) {
-  xfs_alert(mp,
-"Version 5 superblock detected. This kernel has EXPERIMENTAL support enabled!\n"
-"Use of these features in this kernel is at your own risk!");
-
   if (xfs_sb_has_compat_feature(sbp,
      XFS_SB_FEAT_COMPAT_UNKNOWN)) {
    xfs_warn(mp,
-- 
1.7.1