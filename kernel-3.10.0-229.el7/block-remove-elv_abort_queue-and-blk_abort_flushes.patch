From adbfe07a5da0075cc2c1502c73d1a91f78a1e1f3 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:54 -0400
Subject: [block] remove elv_abort_queue and blk_abort_flushes

Message-id: <1402670238-13916-127-git-send-email-snitzer@redhat.com>
Patchwork-id: 83880
O-Subject: [RHEL7.1 PATCH 126/150] block: remove elv_abort_queue and blk_abort_flushes
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 2940474af79744411da0cb63b041ad52c57bc443
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Jun 11 13:49:23 2014 +0200

    block: remove elv_abort_queue and blk_abort_flushes

    elv_abort_queue has no callers, and blk_abort_flushes is only called by
    elv_abort_queue.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-flush.c b/block/blk-flush.c
index 8cb6210..33a6b50 100644
--- a/block/blk-flush.c
+++ b/block/blk-flush.c
@@ -421,44 +421,6 @@ void blk_insert_flush(struct request *rq)
  blk_flush_complete_seq(rq, REQ_FSEQ_ACTIONS & ~policy, 0);
 }
 
-/**
- * blk_abort_flushes - @q is being aborted, abort flush requests
- * @q: request_queue being aborted
- *
- * To be called from elv_abort_queue().  @q is being aborted.  Prepare all
- * FLUSH/FUA requests for abortion.
- *
- * CONTEXT:
- * spin_lock_irq(q->queue_lock)
- */
-void blk_abort_flushes(struct request_queue *q)
-{
- struct request *rq, *n;
- int i;
-
- /*
-  * Requests in flight for data are already owned by the dispatch
-  * queue or the device driver.  Just restore for normal completion.
-  */
- list_for_each_entry_safe(rq, n, &q->flush_data_in_flight, flush.list) {
-  list_del_init(&rq->flush.list);
-  blk_flush_restore_request(rq);
- }
-
- /*
-  * We need to give away requests on flush queues.  Restore for
-  * normal completion and put them on the dispatch queue.
-  */
- for (i = 0; i < ARRAY_SIZE(q->flush_queue); i++) {
-  list_for_each_entry_safe(rq, n, &q->flush_queue[i],
-      flush.list) {
-   list_del_init(&rq->flush.list);
-   blk_flush_restore_request(rq);
-   list_add_tail(&rq->queuelist, &q->queue_head);
-  }
- }
-}
-
 static void bio_end_flush(struct bio *bio, int err)
 {
  if (err)
diff --git a/block/blk.h b/block/blk.h
index 45385e9..6748c4f 100644
--- a/block/blk.h
+++ b/block/blk.h
@@ -84,7 +84,6 @@ static inline void blk_clear_rq_complete(struct request *rq)
 #define ELV_ON_HASH(rq) ((rq)->cmd_flags & REQ_HASHED)
 
 void blk_insert_flush(struct request *rq);
-void blk_abort_flushes(struct request_queue *q);
 
 static inline struct request *__elv_next_request(struct request_queue *q)
 {
diff --git a/block/elevator.c b/block/elevator.c
index 7a66a7a..6e8cc5d 100644
--- a/block/elevator.c
+++ b/block/elevator.c
@@ -730,26 +730,6 @@ int elv_may_queue(struct request_queue *q, int rw)
  return ELV_MQUEUE_MAY;
 }
 
-void elv_abort_queue(struct request_queue *q)
-{
- struct request *rq;
-
- blk_abort_flushes(q);
-
- while (!list_empty(&q->queue_head)) {
-  rq = list_entry_rq(q->queue_head.next);
-  rq->cmd_flags |= REQ_QUIET;
-  trace_block_rq_abort(q, rq);
-  /*
-   * Mark this request as started so we don't trigger
-   * any debug logic in the end I/O path.
-   */
-  blk_start_request(rq);
-  __blk_end_request_all(rq, -EIO);
- }
-}
-EXPORT_SYMBOL(elv_abort_queue);
-
 void elv_completed_request(struct request_queue *q, struct request *rq)
 {
  struct elevator_queue *e = q->elevator;
diff --git a/include/linux/elevator.h b/include/linux/elevator.h
index 080812b..2541062 100644
--- a/include/linux/elevator.h
+++ b/include/linux/elevator.h
@@ -133,7 +133,6 @@ extern struct request *elv_latter_request(struct request_queue *, struct request
 extern int elv_register_queue(struct request_queue *q);
 extern void elv_unregister_queue(struct request_queue *q);
 extern int elv_may_queue(struct request_queue *, int);
-extern void elv_abort_queue(struct request_queue *);
 extern void elv_completed_request(struct request_queue *, struct request *);
 extern int elv_set_request(struct request_queue *q, struct request *rq,
       struct bio *bio, gfp_t gfp_mask);
-- 
1.7.1