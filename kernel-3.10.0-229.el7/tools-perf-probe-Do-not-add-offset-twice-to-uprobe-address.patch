From 22a08d770a86f7a5564b9c06e88ed6c3ea2f266c Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:53:16 -0400
Subject: [tools] perf/probe: Do not add offset twice to uprobe address

Message-id: <1408953210-26343-309-git-send-email-jolsa@redhat.com>
Patchwork-id: 88942
O-Subject: [PATCH RHEL7.1 BZ1133083 308/322] perf probe: Do not add offset twice to uprobe address
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 981a23792cd02631f8cd5dd65753208a44de5ae1
Author: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
Date: Wed Feb 5 05:18:58 2014 +0000

description
===========
Fix perf-probe not to add offset value twice to uprobe probe address
when post processing.

The tevs[i].point.address struct member is the address of symbol+offset,
but current perf-probe adjusts the point.address by adding the offset.

As a result, the probe address becomes symbol+offset+offset. This may
cause unexpected code corruption. Urgent fix is needed.

Without this fix:
  ---
  # ./perf probe -x ./perf dso__load_vmlinux+4
  # ./perf probe -l
    probe_perf:dso__load_vmlinux (on 0x000000000006d2b8)
  # nm ./perf.orig | grep dso__load_vmlinux\$
  000000000046d0a0 T dso__load_vmlinux
  ---

You can see the given offset is 3 but the actual probed address is
dso__load_vmlinux+8.

With this fix:
  ---
  # ./perf probe -x ./perf dso__load_vmlinux+4
  # ./perf probe -l
    probe_perf:dso__load_vmlinux (on 0x000000000006d2b4)
  ---

Now the problem is fixed.

Note: This bug is introduced by
 commit fb7345bbf7fad9bf72ef63a19c707970b9685812
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/probe-event.c b/tools/perf/util/probe-event.c
index a8a9b6c..d8b048c 100644
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@ -336,8 +336,8 @@ static int add_exec_to_probe_trace_events(struct probe_trace_event *tevs,
   return ret;
 
  for (i = 0; i < ntevs && ret >= 0; i++) {
+  /* point.address is the addres of point.symbol + point.offset */
   offset = tevs[i].point.address - stext;
-  offset += tevs[i].point.offset;
   tevs[i].point.offset = 0;
   zfree(&tevs[i].point.symbol);
   ret = e_snprintf(buf, 32, "0x%lx", offset);
-- 
1.7.1