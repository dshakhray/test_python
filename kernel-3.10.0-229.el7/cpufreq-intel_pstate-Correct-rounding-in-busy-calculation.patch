From 03737efccdb35c76bba09589038da71bebd7e42e Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:17 -0400
Subject: [cpufreq] intel_pstate: Correct rounding in busy calculation

Message-id: <1409235879-1283-164-git-send-email-prarit@redhat.com>
Patchwork-id: 89528
O-Subject: [RHEL7.1 PATCH BZ 1134639 163/185] intel_pstate: Correct rounding in busy calculation
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 51d211e9c334b9eca3505f4052afa660c3e0606b
Author: Doug Smythies <doug.smythies@gmail.com>
Date:   Tue Jun 17 13:36:10 2014 -0700

    intel_pstate: Correct rounding in busy calculation

    There was a mistake in the actual rounding portion this previous patch:
    f0fe3cd7e12d (intel_pstate: Correct rounding in busy calculation) such that
    the rounding was asymetric and incorrect.

    Severity: Not very serious, but can increase target pstate by one extra value.
    For real world work flows the issue should self correct (but I have no proof).
    It is the equivalent of different PID gains for positive and negative numbers.

    Examples:
     -3.000000 used to round to -4, rounds to -3 with this patch.
     -3.503906 used to round to -5, rounds to -4 with this patch.

    Fixes: f0fe3cd7e12d (intel_pstate: Correct rounding in busy calculation)
    Signed-off-by: Doug Smythies <dsmythies@telus.net>
    Cc: 3.14+ <stable@vger.kernel.org> # 3.14+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index 4e7f492..924bb2d 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -196,10 +196,7 @@ static signed int pid_calc(struct _pid *pid, int32_t busy)
  pid->last_err = fp_error;
 
  result = pterm + mul_fp(pid->integral, pid->i_gain) + dterm;
- if (result >= 0)
-  result = result + (1 << (FRAC_BITS-1));
- else
-  result = result - (1 << (FRAC_BITS-1));
+ result = result + (1 << (FRAC_BITS-1));
  return (signed int)fp_toint(result);
 }
 
-- 
1.7.1