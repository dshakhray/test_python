From b53fffa095038d2e7cc2634653d1852a9b003263 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 12:01:01 -0400
Subject: [infiniband] mlx5: Simplify signature handover wqe for interleaved buffers

Message-id: <d23461c456e9f2239ae1668abb809c0a49ca6bf8.1410425016.git.avadai@redhat.com>
Patchwork-id: 93697
O-Subject: [Patch RHEL7.1 V1 125/197] mlx5_core: Simplify signature handover wqe for interleaved buffers
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Sagi Grimberg <sagig@mellanox.com>

No need for repetition format pattern in case the data and protection
are already interleaved in the memory domain since the pattern
already exists. A single key entry is sufficient and may save some
extra fetch ops.

Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 5c273b16771eaeb3957d365bb3695b92aff037cf)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/hw/mlx5/qp.c b/drivers/infiniband/hw/mlx5/qp.c
index 74ee4a4..00b5563 100644
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@ -2131,9 +2131,13 @@ static int set_sig_data_segment(struct ib_send_wr *wr, struct mlx5_ib_qp *qp,
  int ret;
  int wqe_size;
 
- if (!wr->wr.sig_handover.prot) {
+ if (!wr->wr.sig_handover.prot ||
+     (data_key == wr->wr.sig_handover.prot->lkey &&
+      data_va == wr->wr.sig_handover.prot->addr &&
+      data_len == wr->wr.sig_handover.prot->length)) {
   /**
    * Source domain doesn't contain signature information
+   * or data and protection are interleaved in memory.
    * So need construct:
    *                  ------------------
    *                 |     data_klm     |
@@ -2187,23 +2191,13 @@ static int set_sig_data_segment(struct ib_send_wr *wr, struct mlx5_ib_qp *qp,
   data_sentry->bcount = cpu_to_be16(block_size);
   data_sentry->key = cpu_to_be32(data_key);
   data_sentry->va = cpu_to_be64(data_va);
+  data_sentry->stride = cpu_to_be16(block_size);
+
   prot_sentry->bcount = cpu_to_be16(prot_size);
   prot_sentry->key = cpu_to_be32(prot_key);
+  prot_sentry->va = cpu_to_be64(prot_va);
+  prot_sentry->stride = cpu_to_be16(prot_size);
 
-  if (prot_key == data_key && prot_va == data_va) {
-   /**
-    * The data and protection are interleaved
-    * in a single memory region
-    **/
-   prot_sentry->va = cpu_to_be64(data_va + block_size);
-   prot_sentry->stride = cpu_to_be16(block_size + prot_size);
-   data_sentry->stride = prot_sentry->stride;
-  } else {
-   /* The data and protection are two different buffers */
-   prot_sentry->va = cpu_to_be64(prot_va);
-   data_sentry->stride = cpu_to_be16(block_size);
-   prot_sentry->stride = cpu_to_be16(prot_size);
-  }
   wqe_size = ALIGN(sizeof(*sblock_ctrl) + sizeof(*data_sentry) +
      sizeof(*prot_sentry), 64);
  }
-- 
1.7.1