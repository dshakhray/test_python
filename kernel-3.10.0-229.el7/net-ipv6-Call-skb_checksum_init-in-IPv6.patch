From 3c8814d4b68d75fd270204306fe411302853bd10 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:14:29 -0400
Subject: [net] ipv6: Call skb_checksum_init in IPv6

Message-id: <1409652920-431-7-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90182
O-Subject: [PATCH 06/57] [RHEL7.1 net] net: Call skb_checksum_init in IPv6
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

minor conflict with upstream 4aa956d8 ('ipv6: tcp_ipv6 do some cleanup')
which removed {} pair in removed tcp_v6_checksum_init function.

commit e4f45b7f40bdaade5ef8f45e7c6daed4c909fdf5
Author: Tom Herbert <therbert@google.com>
Date:   Fri May 2 16:29:51 2014 -0700

    net: Call skb_checksum_init in IPv6

    Call skb_checksum_init instead of private functions.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/ip6_checksum.h b/include/net/ip6_checksum.h
index 9e3c540..8ac5c21 100644
--- a/include/net/ip6_checksum.h
+++ b/include/net/ip6_checksum.h
@@ -41,6 +41,13 @@ __sum16 csum_ipv6_magic(const struct in6_addr *saddr,
    __wsum csum);
 #endif
 
+static inline __wsum ip6_compute_pseudo(struct sk_buff *skb, int proto)
+{
+ return ~csum_unfold(csum_ipv6_magic(&ipv6_hdr(skb)->saddr,
+         &ipv6_hdr(skb)->daddr,
+         skb->len, proto, 0));
+}
+
 static __inline__ __sum16 tcp_v6_check(int len,
        const struct in6_addr *saddr,
        const struct in6_addr *daddr,
diff --git a/net/ipv6/ip6_checksum.c b/net/ipv6/ip6_checksum.c
index 72d198b..53f28da 100644
--- a/net/ipv6/ip6_checksum.c
+++ b/net/ipv6/ip6_checksum.c
@@ -82,16 +82,7 @@ int udp6_csum_init(struct sk_buff *skb, struct udphdr *uh, int proto)
   LIMIT_NETDEBUG(KERN_INFO "IPv6: udp checksum is 0\n");
   return 1;
  }
- if (skb->ip_summed == CHECKSUM_COMPLETE &&
-     !csum_ipv6_magic(&ipv6_hdr(skb)->saddr, &ipv6_hdr(skb)->daddr,
-        skb->len, proto, skb->csum))
-  skb->ip_summed = CHECKSUM_UNNECESSARY;
 
- if (!skb_csum_unnecessary(skb))
-  skb->csum = ~csum_unfold(csum_ipv6_magic(&ipv6_hdr(skb)->saddr,
-        &ipv6_hdr(skb)->daddr,
-        skb->len, proto, 0));
-
- return 0;
+ return skb_checksum_init(skb, IPPROTO_UDP, ip6_compute_pseudo);
 }
 EXPORT_SYMBOL(udp6_csum_init);
diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
index d94101e..8ac9b14 100644
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@ -1277,26 +1277,6 @@ out:
  return NULL;
 }
 
-static __sum16 tcp_v6_checksum_init(struct sk_buff *skb)
-{
- if (skb->ip_summed == CHECKSUM_COMPLETE) {
-  if (!tcp_v6_check(skb->len, &ipv6_hdr(skb)->saddr,
-      &ipv6_hdr(skb)->daddr, skb->csum)) {
-   skb->ip_summed = CHECKSUM_UNNECESSARY;
-   return 0;
-  }
- }
-
- skb->csum = ~csum_unfold(tcp_v6_check(skb->len,
-           &ipv6_hdr(skb)->saddr,
-           &ipv6_hdr(skb)->daddr, 0));
-
- if (skb->len <= 76) {
-  return __skb_checksum_complete(skb);
- }
- return 0;
-}
-
 /* The socket must have it's spinlock held when we get
  * here.
  *
@@ -1469,7 +1449,7 @@ static int tcp_v6_rcv(struct sk_buff *skb)
  if (!pskb_may_pull(skb, th->doff*4))
   goto discard_it;
 
- if (!skb_csum_unnecessary(skb) && tcp_v6_checksum_init(skb))
+ if (skb_checksum_init(skb, IPPROTO_TCP, ip6_compute_pseudo))
   goto csum_error;
 
  th = tcp_hdr(skb);
-- 
1.7.1