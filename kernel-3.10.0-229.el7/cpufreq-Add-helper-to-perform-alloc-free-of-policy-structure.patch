From 716e05bf85a0555d0141d739f1b9a753bbdf4946 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:21:40 -0400
Subject: [cpufreq] Add helper to perform alloc/free of policy structure

Message-id: <1409235879-1283-7-git-send-email-prarit@redhat.com>
Patchwork-id: 89371
O-Subject: [RHEL7.1 PATCH BZ 1134639 006/185] cpufreq: Add helper to perform alloc/free of policy structure
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit e9698cc5d2749c5b74e137f94a95d7e505b097e8
Author: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
Date:   Tue Jul 30 04:24:11 2013 +0530

    cpufreq: Add helper to perform alloc/free of policy structure

    Separate out the allocation of the cpufreq policy structure (along with
    its error handling) to a helper function. This makes the code easier to
    read and also helps with some upcoming code reorganization.

    Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 949c027..5144fb6 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -911,6 +911,37 @@ static int cpufreq_add_policy_cpu(unsigned int cpu, unsigned int sibling,
 }
 #endif
 
+static struct cpufreq_policy *cpufreq_policy_alloc(void)
+{
+ struct cpufreq_policy *policy;
+
+ policy = kzalloc(sizeof(*policy), GFP_KERNEL);
+ if (!policy)
+  return NULL;
+
+ if (!alloc_cpumask_var(&policy->cpus, GFP_KERNEL))
+  goto err_free_policy;
+
+ if (!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL))
+  goto err_free_cpumask;
+
+ return policy;
+
+err_free_cpumask:
+ free_cpumask_var(policy->cpus);
+err_free_policy:
+ kfree(policy);
+
+ return NULL;
+}
+
+static void cpufreq_policy_free(struct cpufreq_policy *policy)
+{
+ free_cpumask_var(policy->related_cpus);
+ free_cpumask_var(policy->cpus);
+ kfree(policy);
+}
+
 /**
  * cpufreq_add_dev - add a CPU device
  *
@@ -964,16 +995,10 @@ static int cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)
 #endif
 #endif
 
- policy = kzalloc(sizeof(struct cpufreq_policy), GFP_KERNEL);
+ policy = cpufreq_policy_alloc();
  if (!policy)
   goto nomem_out;
 
- if (!alloc_cpumask_var(&policy->cpus, GFP_KERNEL))
-  goto err_free_policy;
-
- if (!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL))
-  goto err_free_cpumask;
-
  policy->cpu = cpu;
  policy->governor = CPUFREQ_DEFAULT_GOVERNOR;
  cpumask_copy(policy->cpus, cpumask_of(cpu));
@@ -1050,11 +1075,7 @@ err_out_unregister:
 
 err_set_policy_cpu:
  per_cpu(cpufreq_policy_cpu, cpu) = -1;
- free_cpumask_var(policy->related_cpus);
-err_free_cpumask:
- free_cpumask_var(policy->cpus);
-err_free_policy:
- kfree(policy);
+ cpufreq_policy_free(policy);
 nomem_out:
  up_read(&cpufreq_rwsem);
  return ret;
@@ -1177,9 +1198,7 @@ static int __cpufreq_remove_dev(struct device *dev,
   if (cpufreq_driver->exit)
    cpufreq_driver->exit(data);
 
-  free_cpumask_var(data->related_cpus);
-  free_cpumask_var(data->cpus);
-  kfree(data);
+  cpufreq_policy_free(data);
  } else {
   if (cpufreq_driver->target) {
    __cpufreq_governor(data, CPUFREQ_GOV_START);
-- 
1.7.1