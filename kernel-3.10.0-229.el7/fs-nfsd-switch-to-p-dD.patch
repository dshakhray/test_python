From e9a51165b06be765755de9f31d10e86ac5e1d1eb Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:49:08 -0400
Subject: [fs] nfsd: switch to %p(dD)

Message-id: <1403560314-32525-7-git-send-email-bfields@redhat.com>
Patchwork-id: 84444
O-Subject: [Patch RHEL7 006/172] nfsd: switch to %p[dD]
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Al Viro <viro@zeniv.linux.org.uk>

Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Upstream: 97e47fa11deae10ae72aa1109e700565c57152f5
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4recover.c b/fs/nfsd/nfs4recover.c
index 8462c6c..707c811 100644
--- a/fs/nfsd/nfs4recover.c
+++ b/fs/nfsd/nfs4recover.c
@@ -377,8 +377,8 @@ purge_old(struct dentry *parent, struct dentry *child, struct nfsd_net *nn)
 
  status = vfs_rmdir(parent->d_inode, child);
  if (status)
-  printk("failed to remove client recovery directory %s\n",
-    child->d_name.name);
+  printk("failed to remove client recovery directory %pd\n",
+    child);
  /* Keep trying, success or failure: */
  return 0;
 }
@@ -402,15 +402,15 @@ out:
  nfs4_release_reclaim(nn);
  if (status)
   printk("nfsd4: failed to purge old clients from recovery"
-   " directory %s\n", nn->rec_file->f_path.dentry->d_name.name);
+   " directory %pD\n", nn->rec_file);
 }
 
 static int
 load_recdir(struct dentry *parent, struct dentry *child, struct nfsd_net *nn)
 {
  if (child->d_name.len != HEXDIR_LEN - 1) {
-  printk("nfsd4: illegal name %s in recovery directory\n",
-    child->d_name.name);
+  printk("nfsd4: illegal name %pd in recovery directory\n",
+    child);
   /* Keep trying; maybe the others are OK: */
   return 0;
  }
@@ -429,7 +429,7 @@ nfsd4_recdir_load(struct net *net) {
  status = nfsd4_list_rec_dir(load_recdir, nn);
  if (status)
   printk("nfsd4: failed loading clients from recovery"
-   " directory %s\n", nn->rec_file->f_path.dentry->d_name.name);
+   " directory %pD\n", nn->rec_file);
  return status;
 }
 
diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index 4704736..4a11208 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -3852,9 +3852,8 @@ nfsd4_open_confirm(struct svc_rqst *rqstp, struct nfsd4_compound_state *cstate,
  struct nfs4_ol_stateid *stp;
  struct nfsd_net *nn = net_generic(SVC_NET(rqstp), nfsd_net_id);
 
- dprintk("NFSD: nfsd4_open_confirm on file %.*s\n",
-   (int)cstate->current_fh.fh_dentry->d_name.len,
-   cstate->current_fh.fh_dentry->d_name.name);
+ dprintk("NFSD: nfsd4_open_confirm on file %pd\n",
+   cstate->current_fh.fh_dentry);
 
  status = fh_verify(rqstp, &cstate->current_fh, S_IFREG, 0);
  if (status)
@@ -3931,9 +3930,8 @@ nfsd4_open_downgrade(struct svc_rqst *rqstp,
  struct nfs4_ol_stateid *stp;
  struct nfsd_net *nn = net_generic(SVC_NET(rqstp), nfsd_net_id);
 
- dprintk("NFSD: nfsd4_open_downgrade on file %.*s\n", 
-   (int)cstate->current_fh.fh_dentry->d_name.len,
-   cstate->current_fh.fh_dentry->d_name.name);
+ dprintk("NFSD: nfsd4_open_downgrade on file %pd\n", 
+   cstate->current_fh.fh_dentry);
 
  /* We don't yet support WANT bits: */
  if (od->od_deleg_want)
@@ -3989,9 +3987,8 @@ nfsd4_close(struct svc_rqst *rqstp, struct nfsd4_compound_state *cstate,
  struct net *net = SVC_NET(rqstp);
  struct nfsd_net *nn = net_generic(net, nfsd_net_id);
 
- dprintk("NFSD: nfsd4_close on file %.*s\n", 
-   (int)cstate->current_fh.fh_dentry->d_name.len,
-   cstate->current_fh.fh_dentry->d_name.name);
+ dprintk("NFSD: nfsd4_close on file %pd\n", 
+   cstate->current_fh.fh_dentry);
 
  nfs4_lock_state();
  status = nfs4_preprocess_seqid_op(cstate, close->cl_seqid,
diff --git a/fs/nfsd/nfsfh.c b/fs/nfsd/nfsfh.c
index 814afaa..3d0e15a 100644
--- a/fs/nfsd/nfsfh.c
+++ b/fs/nfsd/nfsfh.c
@@ -47,7 +47,7 @@ static int nfsd_acceptable(void *expv, struct dentry *dentry)
   tdentry = parent;
  }
  if (tdentry != exp->ex_path.dentry)
-  dprintk("nfsd_acceptable failed at %p %s\n", tdentry, tdentry->d_name.name);
+  dprintk("nfsd_acceptable failed at %p %pd\n", tdentry, tdentry);
  rv = (tdentry == exp->ex_path.dentry);
  dput(tdentry);
  return rv;
@@ -253,8 +253,8 @@ static __be32 nfsd_set_fh_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp)
 
  if (S_ISDIR(dentry->d_inode->i_mode) &&
    (dentry->d_flags & DCACHE_DISCONNECTED)) {
-  printk("nfsd: find_fh_dentry returned a DISCONNECTED directory: %s/%s\n",
-    dentry->d_parent->d_name.name, dentry->d_name.name);
+  printk("nfsd: find_fh_dentry returned a DISCONNECTED directory: %pd2\n",
+    dentry);
  }
 
  fhp->fh_dentry = dentry;
@@ -361,10 +361,9 @@ skip_pseudoflavor_check:
  error = nfsd_permission(rqstp, exp, dentry, access);
 
  if (error) {
-  dprintk("fh_verify: %s/%s permission failure, "
+  dprintk("fh_verify: %pd2 permission failure, "
    "acc=%x, error=%d\n",
-   dentry->d_parent->d_name.name,
-   dentry->d_name.name,
+   dentry,
    access, ntohl(error));
  }
 out:
@@ -514,14 +513,13 @@ fh_compose(struct svc_fh *fhp, struct svc_export *exp, struct dentry *dentry,
   */
 
  struct inode * inode = dentry->d_inode;
- struct dentry *parent = dentry->d_parent;
  __u32 *datap;
  dev_t ex_dev = exp_sb(exp)->s_dev;
 
- dprintk("nfsd: fh_compose(exp %02x:%02x/%ld %s/%s, ino=%ld)\n",
+ dprintk("nfsd: fh_compose(exp %02x:%02x/%ld %pd2, ino=%ld)\n",
   MAJOR(ex_dev), MINOR(ex_dev),
   (long) exp->ex_path.dentry->d_inode->i_ino,
-  parent->d_name.name, dentry->d_name.name,
+  dentry,
   (inode ? inode->i_ino : 0));
 
  /* Choose filehandle version and fsid type based on
@@ -534,13 +532,13 @@ fh_compose(struct svc_fh *fhp, struct svc_export *exp, struct dentry *dentry,
   fh_put(ref_fh);
 
  if (fhp->fh_locked || fhp->fh_dentry) {
-  printk(KERN_ERR "fh_compose: fh %s/%s not initialized!\n",
-         parent->d_name.name, dentry->d_name.name);
+  printk(KERN_ERR "fh_compose: fh %pd2 not initialized!\n",
+         dentry);
  }
  if (fhp->fh_maxsize < NFS_FHSIZE)
-  printk(KERN_ERR "fh_compose: called with maxsize %d! %s/%s\n",
+  printk(KERN_ERR "fh_compose: called with maxsize %d! %pd2\n",
          fhp->fh_maxsize,
-         parent->d_name.name, dentry->d_name.name);
+         dentry);
 
  fhp->fh_dentry = dget(dentry); /* our internal copy */
  fhp->fh_export = exp;
@@ -613,8 +611,8 @@ out_bad:
  printk(KERN_ERR "fh_update: fh not verified!\n");
  goto out;
 out_negative:
- printk(KERN_ERR "fh_update: %s/%s still negative!\n",
-  dentry->d_parent->d_name.name, dentry->d_name.name);
+ printk(KERN_ERR "fh_update: %pd2 still negative!\n",
+  dentry);
  goto out;
 }
 
diff --git a/fs/nfsd/nfsfh.h b/fs/nfsd/nfsfh.h
index e5e6707..4775bc4 100644
--- a/fs/nfsd/nfsfh.h
+++ b/fs/nfsd/nfsfh.h
@@ -173,8 +173,8 @@ fh_lock_nested(struct svc_fh *fhp, unsigned int subclass)
  BUG_ON(!dentry);
 
  if (fhp->fh_locked) {
-  printk(KERN_WARNING "fh_lock: %s/%s already locked!\n",
-   dentry->d_parent->d_name.name, dentry->d_name.name);
+  printk(KERN_WARNING "fh_lock: %pd2 already locked!\n",
+   dentry);
   return;
  }
 
diff --git a/fs/nfsd/vfs.c b/fs/nfsd/vfs.c
index a2cd960..80c0622 100644
--- a/fs/nfsd/vfs.c
+++ b/fs/nfsd/vfs.c
@@ -1338,9 +1338,8 @@ nfsd_create(struct svc_rqst *rqstp, struct svc_fh *fhp,
   if (!fhp->fh_locked) {
    /* not actually possible */
    printk(KERN_ERR
-    "nfsd_create: parent %s/%s not locked!\n",
-    dentry->d_parent->d_name.name,
-    dentry->d_name.name);
+    "nfsd_create: parent %pd2 not locked!\n",
+    dentry);
    err = nfserr_io;
    goto out;
   }
@@ -1350,8 +1349,8 @@ nfsd_create(struct svc_rqst *rqstp, struct svc_fh *fhp,
   */
  err = nfserr_exist;
  if (dchild->d_inode) {
-  dprintk("nfsd_create: dentry %s/%s not negative!\n",
-   dentry->d_name.name, dchild->d_name.name);
+  dprintk("nfsd_create: dentry %pd/%pd not negative!\n",
+   dentry, dchild);
   goto out; 
  }
 
-- 
1.7.1