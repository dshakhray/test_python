From 1139c8abb7b3ddd8af877613cbdd88845708eb09 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:09:09 -0400
Subject: [usb] cdc-acm: simplify runtime PM locking

Message-id: <1410887463-20674-478-git-send-email-dzickus@redhat.com>
Patchwork-id: 95678
O-Subject: [RHEL7 PATCH 477/591] USB: cdc-acm: simplify runtime PM locking
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit bbf0cb3e93a1b6ef8bf22a67f35d7c98ef378f2b
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon May 26 19:23:46 2014 +0200

    USB: cdc-acm: simplify runtime PM locking

    We can simply the runtime PM locking as there's no need to check the
    susp_count in the read path (at least not since killing the rx tasklet).

    Specifically, the read urbs will never be resubmitted by the completion
    handler when killed during suspend.

    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/class/cdc-acm.c b/drivers/usb/class/cdc-acm.c
index 6bbd203..bc7a2a6 100644
--- a/drivers/usb/class/cdc-acm.c
+++ b/drivers/usb/class/cdc-acm.c
@@ -428,7 +428,7 @@ static void acm_read_bulk_callback(struct urb *urb)
  /* throttle device if requested by tty */
  spin_lock_irqsave(&acm->read_lock, flags);
  acm->throttled = acm->throttle_req;
- if (!acm->throttled && !acm->susp_count) {
+ if (!acm->throttled) {
   spin_unlock_irqrestore(&acm->read_lock, flags);
   acm_submit_read_urb(acm, rb->index, GFP_ATOMIC);
  } else {
@@ -1546,18 +1546,15 @@ static int acm_suspend(struct usb_interface *intf, pm_message_t message)
  struct acm *acm = usb_get_intfdata(intf);
  int cnt;
 
- spin_lock_irq(&acm->read_lock);
- spin_lock(&acm->write_lock);
+ spin_lock_irq(&acm->write_lock);
  if (PMSG_IS_AUTO(message)) {
   if (acm->transmitting) {
-   spin_unlock(&acm->write_lock);
-   spin_unlock_irq(&acm->read_lock);
+   spin_unlock_irq(&acm->write_lock);
    return -EBUSY;
   }
  }
  cnt = acm->susp_count++;
- spin_unlock(&acm->write_lock);
- spin_unlock_irq(&acm->read_lock);
+ spin_unlock_irq(&acm->write_lock);
 
  if (cnt)
   return 0;
@@ -1573,8 +1570,7 @@ static int acm_resume(struct usb_interface *intf)
  struct urb *urb;
  int rv = 0;
 
- spin_lock_irq(&acm->read_lock);
- spin_lock(&acm->write_lock);
+ spin_lock_irq(&acm->write_lock);
 
  if (--acm->susp_count)
   goto out;
@@ -1600,8 +1596,7 @@ static int acm_resume(struct usb_interface *intf)
   rv = acm_submit_read_urbs(acm, GFP_ATOMIC);
  }
 out:
- spin_unlock(&acm->write_lock);
- spin_unlock_irq(&acm->read_lock);
+ spin_unlock_irq(&acm->write_lock);
 
  return rv;
 }
-- 
1.7.1