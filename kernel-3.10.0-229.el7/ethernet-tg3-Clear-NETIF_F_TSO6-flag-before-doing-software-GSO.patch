From d3d1fbd26a569c055650ca89b3f1b44a8ea766c4 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 12:26:09 -0400
Subject: [ethernet] tg3: Clear NETIF_F_TSO6 flag before doing software GSO

Message-id: <1410179173-14304-16-git-send-email-ivecera@redhat.com>
Patchwork-id: 91678
O-Subject: [RHEL7.1 PATCH 15/19] tg3: Clear NETIF_F_TSO6 flag before doing software GSO
Bugzilla: 1088637
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: #1088637

Upstream commit(s):
commit 40c1deaf6c2b42d7ee4e604ba5793cf9da292d96
Author: Prashant Sreedharan <prashant@broadcom.com>
Date:   Wed Jun 18 18:38:13 2014 -0700

    tg3: Clear NETIF_F_TSO6 flag before doing software GSO

    Commit d3f6f3a1d818410c17445bce4f4caab52eb102f1 ("tg3: Prevent page
    allocation failure during TSO workaround") modified driver logic
    to use tg3_tso_bug() for any TSO fragment that hits hardware bug
    conditions thus the patch increased the scope of work for tg3_tso_bug()
    to cover devices that support NETIF_F_TSO6 as well. Prior to the
    patch, tg3_tso_bug() would only be used on devices supporting
    NETIF_F_TSO.

    A regression was introduced for IPv6 packets requiring the workaround.
    To properly perform GSO on SKBs with TCPV6 gso_type, we need to call
    skb_gso_segment() with NETIF_F_TSO6 feature flag cleared, or the
    function will return NULL and cause a kernel oops as tg3 is not handling
    a NULL return value. This patch fixes the problem.

    Signed-off-by: Prashant Sreedharan <prashant@broadcom.com>
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index 7f62574..424b90f 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -7853,8 +7853,8 @@ static int tg3_tso_bug(struct tg3 *tp, struct sk_buff *skb)
   netif_wake_queue(tp->dev);
  }
 
- segs = skb_gso_segment(skb, tp->dev->features & ~NETIF_F_TSO);
- if (IS_ERR(segs))
+ segs = skb_gso_segment(skb, tp->dev->features & ~(NETIF_F_TSO | NETIF_F_TSO6));
+ if (IS_ERR(segs) || !segs)
   goto tg3_tso_bug_end;
 
  do {
-- 
1.7.1