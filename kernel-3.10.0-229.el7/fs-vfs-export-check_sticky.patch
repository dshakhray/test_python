From 73d920a2b0b30f6c07f1b6e77646af2c16ef1cc3 Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:34:49 -0500
Subject: [fs] vfs: export check_sticky()

Message-id: <20141125163449.18115.69997.stgit@warthog.procyon.org.uk>
Patchwork-id: 100926
O-Subject: [PATCH 26/47] vfs: export check_sticky()
Bugzilla: 985875
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Miklos Szeredi <mszeredi@suse.cz>

It's already duplicated in btrfs and about to be used in overlayfs too.

Move the sticky bit check to an inline helper and call the out-of-line
helper only in the unlikly case of the sticky bit being set.

Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
Original-commit: cbdf35bcb833bfd00f0925d7a9a33a21f41ea582
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index dfb460e..1c4c31c 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -760,23 +760,6 @@ out:
  return ret;
 }
 
-/*  copy of check_sticky in fs/namei.c()
-* It's inline, so penalty for filesystems that don't use sticky bit is
-* minimal.
-*/
-static inline int btrfs_check_sticky(struct inode *dir, struct inode *inode)
-{
- kuid_t fsuid = current_fsuid();
-
- if (!(dir->i_mode & S_ISVTX))
-  return 0;
- if (uid_eq(inode->i_uid, fsuid))
-  return 0;
- if (uid_eq(dir->i_uid, fsuid))
-  return 0;
- return !capable(CAP_FOWNER);
-}
-
 /*  copy of may_delete in fs/namei.c()
  * Check whether we can remove a link victim from directory dir, check
  *  whether the type of victim is right.
@@ -812,8 +795,7 @@ static int btrfs_may_delete(struct inode *dir, struct dentry *victim, int isdir)
   return error;
  if (IS_APPEND(dir))
   return -EPERM;
- if (btrfs_check_sticky(dir, victim->d_inode)||
-  IS_APPEND(victim->d_inode)||
+ if (check_sticky(dir, victim->d_inode) || IS_APPEND(victim->d_inode) ||
      IS_IMMUTABLE(victim->d_inode) || IS_SWAPFILE(victim->d_inode))
   return -EPERM;
  if (isdir) {
diff --git a/fs/namei.c b/fs/namei.c
index 215244f..637375e 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -2372,22 +2372,17 @@ kern_path_mountpoint(int dfd, const char *name, struct path *path,
 }
 EXPORT_SYMBOL(kern_path_mountpoint);
 
-/*
- * It's inline, so penalty for filesystems that don't use sticky bit is
- * minimal.
- */
-static inline int check_sticky(struct inode *dir, struct inode *inode)
+int __check_sticky(struct inode *dir, struct inode *inode)
 {
  kuid_t fsuid = current_fsuid();
 
- if (!(dir->i_mode & S_ISVTX))
-  return 0;
  if (uid_eq(inode->i_uid, fsuid))
   return 0;
  if (uid_eq(dir->i_uid, fsuid))
   return 0;
  return !inode_capable(inode, CAP_FOWNER);
 }
+EXPORT_SYMBOL(__check_sticky);
 
 /*
  * Check whether we can remove a link victim from directory dir, check
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 075a721..5bd2b62 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -2322,6 +2322,7 @@ extern int notify_change(struct dentry *, struct iattr *, struct inode **);
 extern int inode_permission(struct inode *, int);
 extern int __inode_permission(struct inode *, int);
 extern int generic_permission(struct inode *, int);
+extern int __check_sticky(struct inode *dir, struct inode *inode);
 
 static inline bool execute_ok(struct inode *inode)
 {
@@ -2808,6 +2809,14 @@ static inline int is_sxid(umode_t mode)
  return (mode & S_ISUID) || ((mode & S_ISGID) && (mode & S_IXGRP));
 }
 
+static inline int check_sticky(struct inode *dir, struct inode *inode)
+{
+ if (!(dir->i_mode & S_ISVTX))
+  return 0;
+
+ return __check_sticky(dir, inode);
+}
+
 static inline void inode_has_no_xattr(struct inode *inode)
 {
  if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & MS_NOSEC))
-- 
1.7.1