From 2d9dec19d2272e3ea5dd070824f64d3583633e81 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:51:38 -0400
Subject: [tools] perf/ui/tui: Protect windows by ui__lock

Message-id: <1408953210-26343-211-git-send-email-jolsa@redhat.com>
Patchwork-id: 88976
O-Subject: [PATCH RHEL7.1 BZ1133083 210/322] perf ui/tui: Protect windows by ui__lock
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 5c743cf573e6974befe917ed4a36d42b39ef1ce0
Author: Namhyung Kim <namhyung.kim@lge.com>
Date: Thu Dec 26 14:37:57 2013 +0900

description
===========
Sometimes perf top TUI breaks display with concurrent help/input window
and pr_* messages since they're not protected by ui__lock.

You can check it by pressing (and not releasing) 'h' key on a "perf top
-vvv" TUI session.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/ui/tui/util.c b/tools/perf/ui/tui/util.c
index 092902e..bf890f7 100644
--- a/tools/perf/ui/tui/util.c
+++ b/tools/perf/ui/tui/util.c
@@ -92,6 +92,8 @@ int ui_browser__input_window(const char *title, const char *text, char *input,
   t = sep + 1;
  }
 
+ pthread_mutex_lock(&ui__lock);
+
  max_len += 2;
  nr_lines += 8;
  y = SLtt_Screen_Rows / 2 - nr_lines / 2;
@@ -120,13 +122,19 @@ int ui_browser__input_window(const char *title, const char *text, char *input,
  SLsmg_write_nstring((char *)exit_msg, max_len);
  SLsmg_refresh();
 
+ pthread_mutex_unlock(&ui__lock);
+
  x += 2;
  len = 0;
  key = ui__getch(delay_secs);
  while (key != K_TIMER && key != K_ENTER && key != K_ESC) {
+  pthread_mutex_lock(&ui__lock);
+
   if (key == K_BKSPC) {
-   if (len == 0)
+   if (len == 0) {
+    pthread_mutex_unlock(&ui__lock);
     goto next_key;
+   }
    SLsmg_gotorc(y, x + --len);
    SLsmg_write_char(' ');
   } else {
@@ -136,6 +144,8 @@ int ui_browser__input_window(const char *title, const char *text, char *input,
   }
   SLsmg_refresh();
 
+  pthread_mutex_unlock(&ui__lock);
+
   /* XXX more graceful overflow handling needed */
   if (len == sizeof(buf) - 1) {
    ui_helpline__push("maximum size of symbol name reached!");
@@ -174,6 +184,8 @@ int ui__question_window(const char *title, const char *text,
   t = sep + 1;
  }
 
+ pthread_mutex_lock(&ui__lock);
+
  max_len += 2;
  nr_lines += 4;
  y = SLtt_Screen_Rows / 2 - nr_lines / 2,
@@ -195,6 +207,9 @@ int ui__question_window(const char *title, const char *text,
  SLsmg_gotorc(y + nr_lines - 1, x);
  SLsmg_write_nstring((char *)exit_msg, max_len);
  SLsmg_refresh();
+
+ pthread_mutex_unlock(&ui__lock);
+
  return ui__getch(delay_secs);
 }
 
@@ -215,9 +230,7 @@ static int __ui__warning(const char *title, const char *format, va_list args)
  if (vasprintf(&s, format, args) > 0) {
   int key;
 
-  pthread_mutex_lock(&ui__lock);
   key = ui__question_window(title, s, "Press any key...", 0);
-  pthread_mutex_unlock(&ui__lock);
   free(s);
   return key;
  }
-- 
1.7.1