From e4708a54408ca41425fa758d228ac505130f82c1 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 12:01:39 -0400
Subject: [ethernet] mlx4: Fix leakage of SW multicast entries

Message-id: <512347e3c6e643a85cb69715d6335c383554a95b.1410425016.git.avadai@redhat.com>
Patchwork-id: 93705
O-Subject: [Patch RHEL7.1 V1 163/197] net/mlx4_core: Fix leakage of SW multicast entries
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Yevgeny Petrilin <yevgenyp@mellanox.co.il>

When removing multicast address in B0 steering mode there is
a bug in cases where there is a single QP registered for the address,
and this QP is also promiscuous. In such cases the entry wouldn't be
deleted from the SW structure representing all Ethernet MCG entries,
but would be removed in HW. This way when driver goes to remove it
from SW and HW structures the HW deletion fails.
Moreover the same index could later be used for registering
different address, which can be Infiniband.

Signed-off-by: Yevgeny Petrilin <yevgenyp@mellanox.co.il>
Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
Signed-off-by: Amir Vadai <amirv@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0d7869acb2f30b64e4fb782b5df309e2287c2e1f)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/mellanox/mlx4/mcg.c b/drivers/net/ethernet/mellanox/mlx4/mcg.c
index 4c36def..14a4071 100644
--- a/drivers/net/ethernet/mellanox/mlx4/mcg.c
+++ b/drivers/net/ethernet/mellanox/mlx4/mcg.c
@@ -363,8 +363,20 @@ static bool can_remove_steering_entry(struct mlx4_dev *dev, u8 port,
  ret = true;
  list_for_each_entry_safe(entry, tmp_entry, &s_steer->steer_entries[steer], list) {
   if (entry->index == index) {
-   if (list_empty(&entry->duplicates)) {
+   if (list_empty(&entry->duplicates) ||
+       members_count == 1) {
+    struct mlx4_promisc_qp *pqp, *tmp_pqp;
+    /* If there is only 1 entry in duplicates then
+     * this is the QP we want to delete, going over
+     * the list and deleting the entry.
+     */
     list_del(&entry->list);
+    list_for_each_entry_safe(pqp, tmp_pqp,
+        &entry->duplicates,
+        list) {
+     list_del(&pqp->list);
+     kfree(pqp);
+    }
     kfree(entry);
    } else {
     /* This entry contains duplicates so it shouldn't be removed */
-- 
1.7.1