From f965a19b757d83642447a6f9d6d0c8384aa1e75b Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:08:57 -0400
Subject: [usb] serial: remove overly defensive port tests

Message-id: <1410887463-20674-466-git-send-email-dzickus@redhat.com>
Patchwork-id: 95613
O-Subject: [RHEL7 PATCH 465/591] USB: serial: remove overly defensive port tests
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 3fff3b4343f45963c087976c772348f3051a40ee
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon May 26 19:23:34 2014 +0200

    USB: serial: remove overly defensive port tests

    The only way a port pointer may be NULL is if probe() failed, and in
    that case neither disconnect(), resume(), or reset_resume() will be
    called.

    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/usb-serial.c b/drivers/usb/serial/usb-serial.c
index 6d40d56..02de311 100644
--- a/drivers/usb/serial/usb-serial.c
+++ b/drivers/usb/serial/usb-serial.c
@@ -1060,6 +1060,7 @@ static void usb_serial_disconnect(struct usb_interface *interface)
  struct usb_serial *serial = usb_get_intfdata(interface);
  struct device *dev = &interface->dev;
  struct usb_serial_port *port;
+ struct tty_struct *tty;
 
  usb_serial_console_disconnect(serial);
 
@@ -1070,18 +1071,16 @@ static void usb_serial_disconnect(struct usb_interface *interface)
 
  for (i = 0; i < serial->num_ports; ++i) {
   port = serial->port[i];
-  if (port) {
-   struct tty_struct *tty = tty_port_tty_get(&port->port);
-   if (tty) {
-    tty_vhangup(tty);
-    tty_kref_put(tty);
-   }
-   usb_serial_port_poison_urbs(port);
-   wake_up_interruptible(&port->port.delta_msr_wait);
-   cancel_work_sync(&port->work);
-   if (device_is_registered(&port->dev))
-    device_del(&port->dev);
+  tty = tty_port_tty_get(&port->port);
+  if (tty) {
+   tty_vhangup(tty);
+   tty_kref_put(tty);
   }
+  usb_serial_port_poison_urbs(port);
+  wake_up_interruptible(&port->port.delta_msr_wait);
+  cancel_work_sync(&port->work);
+  if (device_is_registered(&port->dev))
+   device_del(&port->dev);
  }
  if (serial->type->disconnect)
   serial->type->disconnect(serial);
@@ -1094,7 +1093,6 @@ static void usb_serial_disconnect(struct usb_interface *interface)
 int usb_serial_suspend(struct usb_interface *intf, pm_message_t message)
 {
  struct usb_serial *serial = usb_get_intfdata(intf);
- struct usb_serial_port *port;
  int i, r = 0;
 
  serial->suspending = 1;
@@ -1112,12 +1110,8 @@ int usb_serial_suspend(struct usb_interface *intf, pm_message_t message)
   }
  }
 
- for (i = 0; i < serial->num_ports; ++i) {
-  port = serial->port[i];
-  if (port)
-   usb_serial_port_poison_urbs(port);
- }
-
+ for (i = 0; i < serial->num_ports; ++i)
+  usb_serial_port_poison_urbs(serial->port[i]);
 err_out:
  return r;
 }
@@ -1125,14 +1119,10 @@ EXPORT_SYMBOL(usb_serial_suspend);
 
 static void usb_serial_unpoison_port_urbs(struct usb_serial *serial)
 {
- struct usb_serial_port *port;
  int i;
 
- for (i = 0; i < serial->num_ports; ++i) {
-  port = serial->port[i];
-  if (port)
-   usb_serial_port_unpoison_urbs(port);
- }
+ for (i = 0; i < serial->num_ports; ++i)
+  usb_serial_port_unpoison_urbs(serial->port[i]);
 }
 
 int usb_serial_resume(struct usb_interface *intf)
-- 
1.7.1