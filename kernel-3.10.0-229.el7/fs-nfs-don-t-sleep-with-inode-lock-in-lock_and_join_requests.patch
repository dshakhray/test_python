From 6b373bdacff8eada0f60c9405afdffb23474ec4a Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:47 -0400
Subject: [fs] nfs: don't sleep with inode lock in lock_and_join_requests

Message-id: <1411050057-12417-85-git-send-email-steved@redhat.com>
Patchwork-id: 96211
O-Subject: [RHEL7.1 PATCH 84/94] nfs: don't sleep with inode lock in lock_and_join_requests
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Weston Andros Adamson <dros@primarydata.com>

This handles the 'nonblock=false' case in nfs_lock_and_join_requests.
If the group is already locked and blocking is allowed, drop the inode lock
and wait for the group lock to be cleared before trying it all again.
This should fix warnings found in peterz's tree (sched/wait branch), where
might_sleep() checks are added to wait.[ch].

Reported-by: Fengguang Wu <fengguang.wu@intel.com>
Signed-off-by: Weston Andros Adamson <dros@primarydata.com>
Reviewed-by: Peng Tao <tao.peng@primarydata.com>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 7c3af975257383ece54b83c0505d3e0656cb7daf
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/pagelist.c b/fs/nfs/pagelist.c
index 3b5b9d1..4479c29 100644
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@ -175,6 +175,24 @@ nfs_page_group_lock(struct nfs_page *req, bool nonblock)
 }
 
 /*
+ * nfs_page_group_lock_wait - wait for the lock to clear, but don't grab it
+ * @req - a request in the group
+ *
+ * This is a blocking call to wait for the group lock to be cleared.
+ */
+void
+nfs_page_group_lock_wait(struct nfs_page *req)
+{
+ struct nfs_page *head = req->wb_head;
+
+ WARN_ON_ONCE(head != head->wb_head);
+
+ wait_on_bit(&head->wb_flags, PG_HEADLOCK,
+  nfs_wait_bit_uninterruptible,
+  TASK_UNINTERRUPTIBLE);
+}
+
+/*
  * nfs_page_group_unlock - unlock the head of the page group
  * @req - request in group that is to be unlocked
  */
diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index eadad96..c9f7d32 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -478,13 +478,23 @@ try_again:
   return NULL;
  }
 
- /* lock each request in the page group */
+ /* holding inode lock, so always make a non-blocking call to try the
+  * page group lock */
  ret = nfs_page_group_lock(head, true);
  if (ret < 0) {
   spin_unlock(&inode->i_lock);
+
+  if (!nonblock && ret == -EAGAIN) {
+   nfs_page_group_lock_wait(head);
+   nfs_release_request(head);
+   goto try_again;
+  }
+
   nfs_release_request(head);
   return ERR_PTR(ret);
  }
+
+ /* lock each request in the page group */
  subreq = head;
  do {
   /*
diff --git a/include/linux/nfs_page.h b/include/linux/nfs_page.h
index 6ad2bbc..6c3e06e 100644
--- a/include/linux/nfs_page.h
+++ b/include/linux/nfs_page.h
@@ -123,6 +123,7 @@ extern  int nfs_wait_on_request(struct nfs_page *);
 extern void nfs_unlock_request(struct nfs_page *req);
 extern void nfs_unlock_and_release_request(struct nfs_page *);
 extern int nfs_page_group_lock(struct nfs_page *, bool);
+extern void nfs_page_group_lock_wait(struct nfs_page *);
 extern void nfs_page_group_unlock(struct nfs_page *);
 extern bool nfs_page_group_sync_on_bit(struct nfs_page *, unsigned int);
 
-- 
1.7.1