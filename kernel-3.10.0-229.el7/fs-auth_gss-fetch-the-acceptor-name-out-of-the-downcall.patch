From 702a2242268de5922baf1bc81409900683856bd3 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:19:47 -0400
Subject: [fs] auth_gss: fetch the acceptor name out of the downcall

Message-id: <1411050057-12417-25-git-send-email-steved@redhat.com>
Patchwork-id: 96203
O-Subject: [RHEL7.1 PATCH 24/94] auth_gss: fetch the acceptor name out of the downcall
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Jeff Layton <jlayton@poochiereds.net>

If rpc.gssd sends us an acceptor name string trailing the context token,
stash it as part of the context.

Signed-off-by: Jeff Layton <jlayton@poochiereds.net>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 2004c726b9d9a9670b7f837190be9c8dfa7a0e9d
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/sunrpc/auth_gss.h b/include/linux/sunrpc/auth_gss.h
index f1cfd4c..cbc6875 100644
--- a/include/linux/sunrpc/auth_gss.h
+++ b/include/linux/sunrpc/auth_gss.h
@@ -71,6 +71,7 @@ struct gss_cl_ctx {
  spinlock_t  gc_seq_lock;
  struct gss_ctx __rcu *gc_gss_ctx;
  struct xdr_netobj gc_wire_ctx;
+ struct xdr_netobj gc_acceptor;
  u32   gc_win;
  unsigned long  gc_expiry;
  struct rcu_head  gc_rcu;
diff --git a/net/sunrpc/auth_gss/auth_gss.c b/net/sunrpc/auth_gss/auth_gss.c
index 51906ca..b6f3875 100644
--- a/net/sunrpc/auth_gss/auth_gss.c
+++ b/net/sunrpc/auth_gss/auth_gss.c
@@ -261,9 +261,22 @@ gss_fill_context(const void *p, const void *end, struct gss_cl_ctx *ctx, struct
   p = ERR_PTR(ret);
   goto err;
  }
- dprintk("RPC:       %s Success. gc_expiry %lu now %lu timeout %u\n",
-  __func__, ctx->gc_expiry, now, timeout);
- return q;
+
+ /* is there any trailing data? */
+ if (q == end) {
+  p = q;
+  goto done;
+ }
+
+ /* pull in acceptor name (if there is one) */
+ p = simple_get_netobj(q, end, &ctx->gc_acceptor);
+ if (IS_ERR(p))
+  goto err;
+done:
+ dprintk("RPC:       %s Success. gc_expiry %lu now %lu timeout %u acceptor %.*s\n",
+  __func__, ctx->gc_expiry, now, timeout, ctx->gc_acceptor.len,
+  ctx->gc_acceptor.data);
+ return p;
 err:
  dprintk("RPC:       %s returns error %ld\n", __func__, -PTR_ERR(p));
  return p;
@@ -1216,6 +1229,7 @@ gss_do_free_ctx(struct gss_cl_ctx *ctx)
 
  gss_delete_sec_context(&ctx->gc_gss_ctx);
  kfree(ctx->gc_wire_ctx.data);
+ kfree(ctx->gc_acceptor.data);
  kfree(ctx);
 }
 
-- 
1.7.1