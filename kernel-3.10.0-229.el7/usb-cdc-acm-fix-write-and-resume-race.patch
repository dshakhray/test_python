From c2eff24805a601f087c4e60160034a6ffd1ebed7 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:09:00 -0400
Subject: [usb] cdc-acm: fix write and resume race

Message-id: <1410887463-20674-469-git-send-email-dzickus@redhat.com>
Patchwork-id: 95472
O-Subject: [RHEL7 PATCH 468/591] USB: cdc-acm: fix write and resume race
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit e144ed28bed10684f9aaec6325ed974d53f76110
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon May 26 19:23:37 2014 +0200

    USB: cdc-acm: fix write and resume race

    Fix race between write() and resume() due to improper locking that could
    lead to writes being reordered.

    Resume must be done atomically and susp_count be protected by the
    write_lock in order to prevent racing with write(). This could otherwise
    lead to writes being reordered if write() grabs the write_lock after
    susp_count is decremented, but before the delayed urb is submitted.

    Fixes: 11ea859d64b6 ("USB: additional power savings for cdc-acm devices
    that support remote wakeup")

    Cc: <stable@vger.kernel.org> # v2.6.27
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/class/cdc-acm.c b/drivers/usb/class/cdc-acm.c
index 3bd4226..e72a657 100644
--- a/drivers/usb/class/cdc-acm.c
+++ b/drivers/usb/class/cdc-acm.c
@@ -1541,27 +1541,20 @@ static int acm_resume(struct usb_interface *intf)
  struct acm *acm = usb_get_intfdata(intf);
  struct acm_wb *wb;
  int rv = 0;
- int cnt;
 
  spin_lock_irq(&acm->read_lock);
- acm->susp_count -= 1;
- cnt = acm->susp_count;
- spin_unlock_irq(&acm->read_lock);
+ spin_lock(&acm->write_lock);
 
- if (cnt)
-  return 0;
+ if (--acm->susp_count)
+  goto out;
 
  if (test_bit(ASYNCB_INITIALIZED, &acm->port.flags)) {
-  rv = usb_submit_urb(acm->ctrlurb, GFP_NOIO);
+  rv = usb_submit_urb(acm->ctrlurb, GFP_ATOMIC);
 
-  spin_lock_irq(&acm->write_lock);
   if (acm->delayed_wb) {
    wb = acm->delayed_wb;
    acm->delayed_wb = NULL;
-   spin_unlock_irq(&acm->write_lock);
    acm_start_wb(acm, wb);
-  } else {
-   spin_unlock_irq(&acm->write_lock);
   }
 
   /*
@@ -1569,12 +1562,14 @@ static int acm_resume(struct usb_interface *intf)
    * do the write path at all cost
    */
   if (rv < 0)
-   goto err_out;
+   goto out;
 
-  rv = acm_submit_read_urbs(acm, GFP_NOIO);
+  rv = acm_submit_read_urbs(acm, GFP_ATOMIC);
  }
+out:
+ spin_unlock(&acm->write_lock);
+ spin_unlock_irq(&acm->read_lock);
 
-err_out:
  return rv;
 }
 
-- 
1.7.1