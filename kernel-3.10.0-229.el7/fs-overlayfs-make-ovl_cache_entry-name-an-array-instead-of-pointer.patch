From c397026ff12beba5a70c979998de51d29b1a7ce9 Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:35:42 -0500
Subject: [fs] overlayfs: make ovl_cache_entry->name an array instead of pointer

Message-id: <20141125163542.18115.91746.stgit@warthog.procyon.org.uk>
Patchwork-id: 100937
O-Subject: [PATCH 37/47] overlayfs: make ovl_cache_entry->name an array instead of pointer
Bugzilla: 985875
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Al Viro <viro@zeniv.linux.org.uk>

Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Original-commit: 68bf8611076a8e4bee8bc8d03ff28bd1e9a9c631
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/overlayfs/readdir.c b/fs/overlayfs/readdir.c
index 40c7b0e..0033095 100644
--- a/fs/overlayfs/readdir.c
+++ b/fs/overlayfs/readdir.c
@@ -18,13 +18,13 @@
 #include "overlayfs.h"
 
 struct ovl_cache_entry {
- const char *name;
  unsigned int len;
  unsigned int type;
  u64 ino;
  bool is_whiteout;
  struct list_head l_node;
  struct rb_node node;
+ char name[];
 };
 
 struct ovl_dir_cache {
@@ -87,13 +87,12 @@ static struct ovl_cache_entry *ovl_cache_entry_new(const char *name, int len,
          u64 ino, unsigned int d_type)
 {
  struct ovl_cache_entry *p;
+ size_t size = offsetof(struct ovl_cache_entry, name[len + 1]);
 
- p = kmalloc(sizeof(*p) + len + 1, GFP_KERNEL);
+ p = kmalloc(size, GFP_KERNEL);
  if (p) {
-  char *name_copy = (char *) (p + 1);
-  memcpy(name_copy, name, len);
-  name_copy[len] = '\0';
-  p->name = name_copy;
+  memcpy(p->name, name, len);
+  p->name[len] = '\0';
   p->len = len;
   p->type = d_type;
   p->ino = ino;
-- 
1.7.1