From 0a21b98d4e575308d42b7ef7ea6934ef5dd4e4e4 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:09:18 -0400
Subject: [virt] kvm/ppc: book3s hv - Take SRCU read lock around kvm_read_guest() call

Message-id: <1410545655-205645-330-git-send-email-dzickus@redhat.com>
Patchwork-id: 94437
O-Subject: [RHEL7 PATCH 329/626] KVM: PPC: Book3S HV: Take SRCU read lock around kvm_read_guest() call
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit c9438092cae4a5bdbd146ca1385e85dcd6e847f8
Author: Paul Mackerras <paulus@samba.org>
Date:   Sat Nov 16 17:46:05 2013 +1100

    KVM: PPC: Book3S HV: Take SRCU read lock around kvm_read_guest() call

    Running a kernel with CONFIG_PROVE_RCU=y yields the following diagnostic:

    ===============================
    [ INFO: suspicious RCU usage. ]
    3.12.0-rc5-kvm+ #9 Not tainted
    -------------------------------

    include/linux/kvm_host.h:473 suspicious rcu_dereference_check() usage!

    other info that might help us debug this:

    rcu_scheduler_active = 1, debug_locks = 0
    1 lock held by qemu-system-ppc/4831:

    stack backtrace:
    CPU: 28 PID: 4831 Comm: qemu-system-ppc Not tainted 3.12.0-rc5-kvm+ #9
    Call Trace:
    [c000000be462b2a0] [c00000000001644c] .show_stack+0x7c/0x1f0 (unreliable)
    [c000000be462b370] [c000000000ad57c0] .dump_stack+0x88/0xb4
    [c000000be462b3f0] [c0000000001315e8] .lockdep_rcu_suspicious+0x138/0x180
    [c000000be462b480] [c00000000007862c] .gfn_to_memslot+0x13c/0x170
    [c000000be462b510] [c00000000007d384] .gfn_to_hva_prot+0x24/0x90
    [c000000be462b5a0] [c00000000007d420] .kvm_read_guest_page+0x30/0xd0
    [c000000be462b630] [c00000000007d528] .kvm_read_guest+0x68/0x110
    [c000000be462b6e0] [c000000000084594] .kvmppc_rtas_hcall+0x34/0x180
    [c000000be462b7d0] [c000000000097934] .kvmppc_pseries_do_hcall+0x74/0x830
    [c000000be462b880] [c0000000000990e8] .kvmppc_vcpu_run_hv+0xff8/0x15a0
    [c000000be462b9e0] [c0000000000839cc] .kvmppc_vcpu_run+0x2c/0x40
    [c000000be462ba50] [c0000000000810b4] .kvm_arch_vcpu_ioctl_run+0x54/0x1b0
    [c000000be462bae0] [c00000000007b508] .kvm_vcpu_ioctl+0x478/0x730
    [c000000be462bca0] [c00000000025532c] .do_vfs_ioctl+0x4dc/0x7a0
    [c000000be462bd80] [c0000000002556b4] .SyS_ioctl+0xc4/0xe0
    [c000000be462be30] [c000000000009ee4] syscall_exit+0x0/0x98

    To fix this, we take the SRCU read lock around the kvmppc_rtas_hcall()
    call.

    Signed-off-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Alexander Graf <agraf@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_hv.c b/arch/powerpc/kvm/book3s_hv.c
index 23055a0..5bac13c 100644
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@ -591,7 +591,9 @@ int kvmppc_pseries_do_hcall(struct kvm_vcpu *vcpu)
   if (list_empty(&vcpu->kvm->arch.rtas_tokens))
    return RESUME_HOST;
 
+  idx = srcu_read_lock(&vcpu->kvm->srcu);
   rc = kvmppc_rtas_hcall(vcpu);
+  srcu_read_unlock(&vcpu->kvm->srcu, idx);
 
   if (rc == -ENOENT)
    return RESUME_HOST;
-- 
1.7.1