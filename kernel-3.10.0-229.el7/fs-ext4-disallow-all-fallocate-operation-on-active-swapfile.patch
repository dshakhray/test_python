From 0f3bfd56f7c32ec7e414687794c5b7aec24bf8a2 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:34 -0400
Subject: [fs] ext4: disallow all fallocate operation on active swapfile

Message-id: <1414059176-6044-11-git-send-email-lczerner@redhat.com>
Patchwork-id: 98303
O-Subject: [RHEL 7.1 PATCH 10/32] fs: disallow all fallocate operation on active swapfile
Bugzilla: 1150171

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit 0790b31b69374ddadefebb156251b319e5b43345

 Currently some file system have IS_SWAPFILE check in their fallocate
 implementations and some do not. However we should really prevent any
 fallocate operation on swapfile so move the check to vfs and remove the
 redundant checks from the file systems fallocate implementations.

 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/file.c b/fs/ceph/file.c
index d37e881..fd410ce 100644
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@ -1213,9 +1213,6 @@ static long ceph_fallocate(struct file *file, int mode,
  if (!S_ISREG(inode->i_mode))
   return -EOPNOTSUPP;
 
- if (IS_SWAPFILE(inode))
-  return -ETXTBSY;
-
  mutex_lock(&inode->i_mutex);
 
  if (ceph_snap(inode) != CEPH_NOSNAP) {
diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index f6c09d6..7da86a1 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -5407,11 +5407,6 @@ int ext4_collapse_range(struct inode *inode, loff_t offset, loff_t len)
   goto out_mutex;
  }
 
- if (IS_SWAPFILE(inode)) {
-  ret = -ETXTBSY;
-  goto out_mutex;
- }
-
  /* Currently just for extent based files */
  if (!ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS)) {
   ret = -EOPNOTSUPP;
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 0a1f65a..6618ba7 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -3569,10 +3569,6 @@ int ext4_punch_hole(struct inode *inode, loff_t offset, loff_t length)
   ret = -EPERM;
   goto out_mutex;
  }
- if (IS_SWAPFILE(inode)) {
-  ret = -ETXTBSY;
-  goto out_mutex;
- }
 
  /* No need to punch hole beyond i_size */
  if (offset >= inode->i_size)
diff --git a/fs/open.c b/fs/open.c
index 19ae6f9..538cd34 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -265,6 +265,13 @@ int do_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
   return -EPERM;
 
  /*
+  * We can not allow to do any fallocate operation on an active
+  * swapfile
+  */
+ if (IS_SWAPFILE(inode))
+  ret = -ETXTBSY;
+
+ /*
   * Revalidate the write permissions, in case security policy has
   * changed since the files were opened.
   */
-- 
1.7.1