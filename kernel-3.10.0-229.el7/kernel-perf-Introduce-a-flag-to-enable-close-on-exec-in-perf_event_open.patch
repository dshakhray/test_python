From c9d74aab9bea610d056426ef8d90e51755fefae4 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:16 -0400
Subject: [kernel] perf: Introduce a flag to enable close-on-exec in perf_event_open()

Message-id: <1408953210-26343-9-git-send-email-jolsa@redhat.com>
Patchwork-id: 88727
O-Subject: [PATCH RHEL7.1 BZ1133083 008/322] perf: Introduce a flag to enable close-on-exec in perf_event_open()
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit a21b0b354d4ac39be691f51c53562e2c24443d9e
Author: Yann Droneaud <ydroneaud@opteya.com>
Date: Sun Jan 5 21:36:33 2014 +0100

description
===========
Unlike recent modern userspace API such as:

  epoll_create1 (EPOLL_CLOEXEC), eventfd (EFD_CLOEXEC),
  fanotify_init (FAN_CLOEXEC), inotify_init1 (IN_CLOEXEC),
  signalfd (SFD_CLOEXEC), timerfd_create (TFD_CLOEXEC),
  or the venerable general purpose open (O_CLOEXEC),

perf_event_open() syscall lack a flag to atomically set FD_CLOEXEC
(eg. close-on-exec) flag on file descriptor it returns to userspace.

The present patch adds a PERF_FLAG_FD_CLOEXEC flag to allow
perf_event_open() syscall to atomically set close-on-exec.

Having this flag will enable userspace to remove the file descriptor
from the list of file descriptors being inherited across exec,
without the need to call fcntl(fd, F_SETFD, FD_CLOEXEC) and the
associated race condition between the current thread and another
thread calling fork(2) then execve(2).

Links:

 - Secure File Descriptor Handling (Ulrich Drepper, 2008)
   http://udrepper.livejournal.com/20407.html

 - Excuse me son, but your code is leaking !!! (Dan Walsh, March 2012)
   http://danwalsh.livejournal.com/53603.html

 - Notes in DMA buffer sharing: leak and security hole
   http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/dma-buf-sharing.txt?id=v3.13-rc3#n428
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/uapi/linux/perf_event.h b/include/uapi/linux/perf_event.h
index 3aaec9f..35a5426 100644
--- a/include/uapi/linux/perf_event.h
+++ b/include/uapi/linux/perf_event.h
@@ -724,6 +724,7 @@ enum perf_callchain_context {
 #define PERF_FLAG_FD_NO_GROUP  (1U << 0)
 #define PERF_FLAG_FD_OUTPUT  (1U << 1)
 #define PERF_FLAG_PID_CGROUP  (1U << 2) /* pid=cgroup id, per-cpu mode only */
+#define PERF_FLAG_FD_CLOEXEC  (1U << 3) /* O_CLOEXEC */
 
 union perf_mem_data_src {
  __u64 val;
diff --git a/kernel/events/core.c b/kernel/events/core.c
index ad7e0b3..e116367 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -119,7 +119,8 @@ static int cpu_function_call(int cpu, int (*func) (void *info), void *info)
 
 #define PERF_FLAG_ALL (PERF_FLAG_FD_NO_GROUP |\
          PERF_FLAG_FD_OUTPUT  |\
-         PERF_FLAG_PID_CGROUP)
+         PERF_FLAG_PID_CGROUP |\
+         PERF_FLAG_FD_CLOEXEC)
 
 /*
  * branch priv levels that need permission checks
@@ -6986,6 +6987,7 @@ SYSCALL_DEFINE5(perf_event_open,
  int event_fd;
  int move_group = 0;
  int err;
+ int f_flags = O_RDWR;
 
  /* for future expandability... */
  if (flags & ~PERF_FLAG_ALL)
@@ -7014,7 +7016,10 @@ SYSCALL_DEFINE5(perf_event_open,
  if ((flags & PERF_FLAG_PID_CGROUP) && (pid == -1 || cpu == -1))
   return -EINVAL;
 
- event_fd = get_unused_fd();
+ if (flags & PERF_FLAG_FD_CLOEXEC)
+  f_flags |= O_CLOEXEC;
+
+ event_fd = get_unused_fd_flags(f_flags);
  if (event_fd < 0)
   return event_fd;
 
@@ -7136,7 +7141,8 @@ SYSCALL_DEFINE5(perf_event_open,
    goto err_context;
  }
 
- event_file = anon_inode_getfile("[perf_event]", &perf_fops, event, O_RDWR);
+ event_file = anon_inode_getfile("[perf_event]", &perf_fops, event,
+     f_flags);
  if (IS_ERR(event_file)) {
   err = PTR_ERR(event_file);
   goto err_context;
-- 
1.7.1