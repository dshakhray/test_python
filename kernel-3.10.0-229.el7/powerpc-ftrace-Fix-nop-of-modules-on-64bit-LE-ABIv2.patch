From 359ebdbe8b8260debb47ce2036ce10fa7399e44f Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:13:35 -0400
Subject: [powerpc] ftrace: Fix nop of modules on 64bit LE (ABIv2)

Message-id: <1410545655-205645-587-git-send-email-dzickus@redhat.com>
Patchwork-id: 94573
O-Subject: [RHEL7 PATCH 586/626] powerpc/ftrace: Fix nop of modules on 64bit LE (ABIv2)
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit d84e0d69c26b4d739214974d6ad6baf23f510580
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Jun 17 16:15:35 2014 +1000

    powerpc/ftrace: Fix nop of modules on 64bit LE (ABIv2)

    There is a bug in the handling of the function entry when we are nopping
    out a branch from a module in ftrace.

    We compare the result of module_trampoline_target() with the value of
    ppc_function_entry(), and expect them to be true. But they never will
    be.

    module_trampoline_target() will always return the global entry point of
    the function, whereas ppc_function_entry() will always return the local.

    Fix it by using the newly added ppc_global_function_entry().

    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/ftrace.c b/arch/powerpc/kernel/ftrace.c
index 9bbeb0c..b693e89 100644
--- a/arch/powerpc/kernel/ftrace.c
+++ b/arch/powerpc/kernel/ftrace.c
@@ -105,7 +105,7 @@ __ftrace_make_nop(struct module *mod,
     struct dyn_ftrace *rec, unsigned long addr)
 {
  unsigned int op;
- unsigned long ptr;
+ unsigned long entry, ptr;
  unsigned long ip = rec->ip;
  void *tramp;
 
@@ -136,10 +136,11 @@ __ftrace_make_nop(struct module *mod,
 
  pr_devel("trampoline target %lx", ptr);
 
+ entry = ppc_global_function_entry((void *)addr);
  /* This should match what was called */
- if (ptr != ppc_function_entry((void *)addr)) {
+ if (ptr != entry) {
   printk(KERN_ERR "addr %lx does not match expected %lx\n",
-   ptr, ppc_function_entry((void *)addr));
+   ptr, entry);
   return -EINVAL;
  }
 
-- 
1.7.1