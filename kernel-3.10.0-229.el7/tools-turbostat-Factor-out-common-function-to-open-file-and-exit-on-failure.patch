From 3b0fec4521490b0185f2cc12d10bc9c8b4bec9ed Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Tue, 26 Aug 2014 12:49:21 -0400
Subject: [tools] turbostat: Factor out common function to open file and exit on failure

Message-id: <1409057382-26432-11-git-send-email-prarit@redhat.com>
Patchwork-id: 89082
O-Subject: [RHEL7.1 PATCH BZ 1133893 10/31] turbostat: Factor out common function to open file and exit on failure
Bugzilla: 1133893
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1133893

commit 57a42a34d126f2fe5d1f2f120c5f7a31ec65cd31
Author: Josh Triplett <josh@joshtriplett.org>
Date:   Tue Aug 20 17:20:17 2013 -0700

    turbostat: Factor out common function to open file and exit on failure

    Several different functions in turbostat contain the same pattern of
    opening a file and exiting on failure.  Factor out a common fopen_or_die
    function for that.

    Signed-off-by: Josh Triplett <josh@joshtriplett.org>
    Signed-off-by: Len Brown <len.brown@intel.com>

Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Dean Nelson <dnelson@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/power/x86/turbostat/turbostat.c b/tools/power/x86/turbostat/turbostat.c
index 3d092d8..d8f61f2 100644
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@ -1193,6 +1193,19 @@ void free_all_buffers(void)
 }
 
 /*
+ * Open a file, and exit on failure
+ */
+FILE *fopen_or_die(const char *path, const char *mode)
+{
+ FILE *filep = fopen(path, "r");
+ if (!filep) {
+  perror(path);
+  exit(1);
+ }
+ return filep;
+}
+
+/*
  * Parse a file containing a single int.
  */
 int parse_int_file(const char *fmt, ...)
@@ -1205,11 +1218,7 @@ int parse_int_file(const char *fmt, ...)
  va_start(args, fmt);
  vsnprintf(path, sizeof(path), fmt, args);
  va_end(args);
- filep = fopen(path, "r");
- if (!filep) {
-  perror(path);
-  exit(1);
- }
+ filep = fopen_or_die(path, "r");
  if (fscanf(filep, "%d", &value) != 1) {
   perror(path);
   exit(1);
@@ -1255,11 +1264,7 @@ int get_num_ht_siblings(int cpu)
  char character;
 
  sprintf(path, "/sys/devices/system/cpu/cpu%d/topology/thread_siblings_list", cpu);
- filep = fopen(path, "r");
- if (filep == NULL) {
-  perror(path);
-  exit(1);
- }
+ filep = fopen_or_die(path, "r");
  /*
   * file format:
   * if a pair of number with a character between: 2 siblings (eg. 1-2, or 1,4)
@@ -1329,11 +1334,7 @@ int for_all_proc_cpus(int (func)(int))
  int cpu_num;
  int retval;
 
- fp = fopen(proc_stat, "r");
- if (fp == NULL) {
-  perror(proc_stat);
-  exit(1);
- }
+ fp = fopen_or_die(proc_stat, "r");
 
  retval = fscanf(fp, "cpu %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d\n");
  if (retval != 0) {
-- 
1.7.1