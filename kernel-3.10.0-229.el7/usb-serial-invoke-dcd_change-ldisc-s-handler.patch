From 6d971b69eb6b4170167a5d012c450bd0bd437139 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:01:28 -0400
Subject: [usb] serial: invoke dcd_change ldisc's handler

Message-id: <1410887463-20674-17-git-send-email-dzickus@redhat.com>
Patchwork-id: 95096
O-Subject: [RHEL7 PATCH 016/591] USB: serial: invoke dcd_change ldisc's handler.
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 833efc0ed19ce9ed7a84dfd3684eb9d892fe9ded
Author: Paul Chavent <Paul.Chavent@onera.fr>
Date:   Mon Sep 16 08:41:00 2013 +0200

    USB: serial: invoke dcd_change ldisc's handler.

    The DCD pin of the serial port can receive a PPS signal. By calling
    the port line discipline dcd handle, this patch allow to monitor PPS
    through USB serial devices.

    However the performance aren't as good as the uart drivers, so
    document this point too.

    Signed-off-by: Paul Chavent <paul.chavent@onera.fr>
    Acked-by: Rodolfo Giometti <giometti@enneenne.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/pps/pps.txt b/Documentation/pps/pps.txt
index d35dcdd..c03b1be 100644
--- a/Documentation/pps/pps.txt
+++ b/Documentation/pps/pps.txt
@@ -66,6 +66,21 @@ In LinuxPPS the PPS sources are simply char devices usually mapped
 into files /dev/pps0, /dev/pps1, etc..
 
 
+PPS with USB to serial devices
+------------------------------
+
+It is possible to grab the PPS from an USB to serial device. However,
+you should take into account the latencies and jitter introduced by
+the USB stack. Users has reported clock instability around +-1ms when
+synchronized with PPS through USB. This isn't suited for time server
+synchronization.
+
+If your device doesn't report PPS, you can check that the feature is
+supported by its driver. Most of the time, you only need to add a call
+to usb_serial_handle_dcd_change after checking the DCD status (see
+ch341 and pl2303 examples).
+
+
 Coding example
 --------------
 
diff --git a/drivers/usb/serial/generic.c b/drivers/usb/serial/generic.c
index 1f31e6b..3a5dac8 100644
--- a/drivers/usb/serial/generic.c
+++ b/drivers/usb/serial/generic.c
@@ -570,6 +570,16 @@ void usb_serial_handle_dcd_change(struct usb_serial_port *usb_port,
 
  dev_dbg(&usb_port->dev, "%s - status %d\n", __func__, status);
 
+ if (tty) {
+  struct tty_ldisc *ld = tty_ldisc_ref(tty);
+
+  if (ld) {
+   if (ld->ops->dcd_change)
+    ld->ops->dcd_change(tty, status);
+   tty_ldisc_deref(ld);
+  }
+ }
+
  if (status)
   wake_up_interruptible(&port->open_wait);
  else if (tty && !C_CLOCAL(tty))
-- 
1.7.1