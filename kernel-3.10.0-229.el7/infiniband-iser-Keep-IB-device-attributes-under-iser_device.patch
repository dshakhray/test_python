From 3f574f60045c9e645faa2b44a8a18222a56d71eb Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Mon, 3 Nov 2014 07:52:05 -0500
Subject: [infiniband] iser: Keep IB device attributes under iser_device

Message-id: <65dc523b99968d8d53415a64ba1d14154c488f70.1415000301.git.avadai@redhat.com>
Patchwork-id: 98676
O-Subject: [Patch RHEL7.1 07/37] IB/iser: Keep IB device attributes under iser_device
Bugzilla: 1107622
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Doug Ledford <dledford@redhat.com>

From: Sagi Grimberg <sagig@mellanox.com>

For T10-PI offload support, we will need to know the device signature
offload capability upon every connection establishment.

This patch does not change any functionality.

Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
Signed-off-by: Alex Tabachnik <alext@mellanox.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 65198d6b843bf43650781f71caac1266d6b407cb)
Signed-off-by: Amir Vadai <amirv@mellanox.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/iser/iscsi_iser.h b/drivers/infiniband/ulp/iser/iscsi_iser.h
index ca161df..b4290f5 100644
--- a/drivers/infiniband/ulp/iser/iscsi_iser.h
+++ b/drivers/infiniband/ulp/iser/iscsi_iser.h
@@ -260,6 +260,7 @@ struct iscsi_iser_task;
 struct iser_device {
  struct ib_device             *ib_device;
  struct ib_pd              *pd;
+ struct ib_device_attr      dev_attr;
  struct ib_cq              *rx_cq[ISER_MAX_CQ];
  struct ib_cq              *tx_cq[ISER_MAX_CQ];
  struct ib_mr              *mr;
diff --git a/drivers/infiniband/ulp/iser/iser_verbs.c b/drivers/infiniband/ulp/iser/iser_verbs.c
index 9569e40..95fcfca 100644
--- a/drivers/infiniband/ulp/iser/iser_verbs.c
+++ b/drivers/infiniband/ulp/iser/iser_verbs.c
@@ -71,17 +71,14 @@ static void iser_event_handler(struct ib_event_handler *handler,
  */
 static int iser_create_device_ib_res(struct iser_device *device)
 {
- int i, j;
  struct iser_cq_desc *cq_desc;
- struct ib_device_attr *dev_attr;
+ struct ib_device_attr *dev_attr = &device->dev_attr;
+ int ret, i, j;
 
- dev_attr = kmalloc(sizeof(*dev_attr), GFP_KERNEL);
- if (!dev_attr)
-  return -ENOMEM;
-
- if (ib_query_device(device->ib_device, dev_attr)) {
+ ret = ib_query_device(device->ib_device, dev_attr);
+ if (ret) {
   pr_warn("Query device failed for %s\n", device->ib_device->name);
-  goto dev_attr_err;
+  return ret;
  }
 
  /* Assign function handles  - based on FMR support */
@@ -101,7 +98,7 @@ static int iser_create_device_ib_res(struct iser_device *device)
   device->iser_unreg_rdma_mem = iser_unreg_mem_fastreg;
  } else {
   iser_err("IB device does not support FMRs nor FastRegs, can't register memory\n");
-  goto dev_attr_err;
+  return -1;
  }
 
  device->cqs_used = min(ISER_MAX_CQ, device->ib_device->num_comp_vectors);
@@ -158,7 +155,6 @@ static int iser_create_device_ib_res(struct iser_device *device)
  if (ib_register_event_handler(&device->event_handler))
   goto handler_err;
 
- kfree(dev_attr);
  return 0;
 
 handler_err:
@@ -178,8 +174,6 @@ pd_err:
  kfree(device->cq_desc);
 cq_desc_err:
  iser_err("failed to allocate an IB resource\n");
-dev_attr_err:
- kfree(dev_attr);
  return -1;
 }
 
-- 
1.7.1