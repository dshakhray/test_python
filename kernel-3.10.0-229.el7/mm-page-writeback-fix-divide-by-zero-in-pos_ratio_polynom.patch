From 57af66938278c27fcacad79120dbb9f5ab6d1204 Mon Sep 17 00:00:00 2001
From: Rik van Riel <riel@redhat.com>
Date: Thu, 1 May 2014 17:50:31 -0400
Subject: [mm] page-writeback: fix divide by zero in pos_ratio_polynom

Message-id: <1398966631-24127-3-git-send-email-riel@redhat.com>
Patchwork-id: 79281
O-Subject: [RHEL7 PATCH 2/2] mm/page-writeback.c: fix divide by zero in pos_ratio_polynom
Bugzilla: 1091784
RH-Acked-by: Rafael Aquini <aquini@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>

From: Rik van Riel <riel@redhat.com>

Fixes bug 1091784

Brew build: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7407755

It is possible for "limit - setpoint + 1" to equal zero, after getting
truncated to a 32 bit variable, and resulting in a divide by zero error.

Using the fully 64 bit divide functions avoids this problem.  It also will
cause pos_ratio_polynom() to return the correct value when (setpoint -
limit) exceeds 2^32.

Also uninline pos_ratio_polynom, at Andrew's request.

Signed-off-by: Rik van Riel <riel@redhat.com>
Cc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
Cc: Mel Gorman <mgorman@suse.de>
Cc: Nishanth Aravamudan <nacc@linux.vnet.ibm.com>
Cc: Luiz Capitulino <lcapitulino@redhat.com>
Cc: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/mm/page-writeback.c b/mm/page-writeback.c
index 63fd305..4c5ec2a 100644
--- a/mm/page-writeback.c
+++ b/mm/page-writeback.c
@@ -593,14 +593,14 @@ unsigned long bdi_dirty_limit(struct backing_dev_info *bdi, unsigned long dirty)
  * (5) the closer to setpoint, the smaller |df/dx| (and the reverse)
  *     => fast response on large errors; small oscillation near setpoint
  */
-static inline long long pos_ratio_polynom(unsigned long setpoint,
+static long long pos_ratio_polynom(unsigned long setpoint,
        unsigned long dirty,
        unsigned long limit)
 {
  long long pos_ratio;
  long x;
 
- x = div_s64(((s64)setpoint - (s64)dirty) << RATELIMIT_CALC_SHIFT,
+ x = div64_s64(((s64)setpoint - (s64)dirty) << RATELIMIT_CALC_SHIFT,
       limit - setpoint + 1);
  pos_ratio = x;
  pos_ratio = pos_ratio * x >> RATELIMIT_CALC_SHIFT;
@@ -842,7 +842,7 @@ static unsigned long bdi_position_ratio(struct backing_dev_info *bdi,
  x_intercept = bdi_setpoint + span;
 
  if (bdi_dirty < x_intercept - span / 4) {
-  pos_ratio = div_u64(pos_ratio * (x_intercept - bdi_dirty),
+  pos_ratio = div64_u64(pos_ratio * (x_intercept - bdi_dirty),
         x_intercept - bdi_setpoint + 1);
  } else
   pos_ratio /= 4;
-- 
1.7.1