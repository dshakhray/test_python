From 9e145fb5bbfaf01ea489480c36566a7c094f0619 Mon Sep 17 00:00:00 2001
From: Vivek Goyal <vgoyal@redhat.com>
Date: Fri, 5 Sep 2014 18:55:49 -0400
Subject: [kernel] kexec/compat: convert to COMPAT_SYSCALL_DEFINE with changing parameter types

Message-id: <1409943373-12669-15-git-send-email-vgoyal@redhat.com>
Patchwork-id: 91519
O-Subject: [RHEL7.1 PATCH 14/38] kexec/compat: convert to COMPAT_SYSCALL_DEFINE with changing parameter types
Bugzilla: 852066
RH-Acked-by: Dave Anderson <anderson@redhat.com>
RH-Acked-by: Baoquan He <bhe@redhat.com>
RH-Acked-by: Dave Young <dyoung@redhat.com>
RH-Acked-by: Chao WANG <chaowang@redhat.com>

BZ:852066

commit ca2c405ab90591dcb1bc3765467cbdf2b99a0f6a
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date: Tue, 4 Mar 2014 17:13:42 +0100

In order to allow the COMPAT_SYSCALL_DEFINE macro generate code that
performs proper zero and sign extension convert all 64 bit parameters
to their corresponding 32 bit compat counterparts.

Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/compat.h b/include/linux/compat.h
index df70600..b1e5985 100644
--- a/include/linux/compat.h
+++ b/include/linux/compat.h
@@ -620,10 +620,10 @@ asmlinkage long compat_sys_futex(u32 __user *uaddr, int op, u32 val,
   u32 val3);
 asmlinkage long compat_sys_getsockopt(int fd, int level, int optname,
           char __user *optval, int __user *optlen);
-asmlinkage long compat_sys_kexec_load(unsigned long entry,
-          unsigned long nr_segments,
+asmlinkage long compat_sys_kexec_load(compat_ulong_t entry,
+          compat_ulong_t nr_segments,
           struct compat_kexec_segment __user *,
-          unsigned long flags);
+          compat_ulong_t flags);
 asmlinkage long compat_sys_mq_getsetattr(mqd_t mqdes,
    const struct compat_mq_attr __user *u_mqstat,
    struct compat_mq_attr __user *u_omqstat);
diff --git a/include/linux/kexec.h b/include/linux/kexec.h
index 6d4066c..a756419 100644
--- a/include/linux/kexec.h
+++ b/include/linux/kexec.h
@@ -127,12 +127,6 @@ extern asmlinkage long sys_kexec_load(unsigned long entry,
      struct kexec_segment __user *segments,
      unsigned long flags);
 extern int kernel_kexec(void);
-#ifdef CONFIG_COMPAT
-extern asmlinkage long compat_sys_kexec_load(unsigned long entry,
-    unsigned long nr_segments,
-    struct compat_kexec_segment __user *segments,
-    unsigned long flags);
-#endif
 extern struct page *kimage_alloc_control_pages(struct kimage *image,
       unsigned int order);
 extern void crash_kexec(struct pt_regs *);
diff --git a/kernel/kexec.c b/kernel/kexec.c
index 1aa71eb..86f4b68 100644
--- a/kernel/kexec.c
+++ b/kernel/kexec.c
@@ -1045,10 +1045,10 @@ void __weak crash_unmap_reserved_pages(void)
 {}
 
 #ifdef CONFIG_COMPAT
-asmlinkage long compat_sys_kexec_load(unsigned long entry,
-    unsigned long nr_segments,
-    struct compat_kexec_segment __user *segments,
-    unsigned long flags)
+COMPAT_SYSCALL_DEFINE4(kexec_load, compat_ulong_t, entry,
+         compat_ulong_t, nr_segments,
+         struct compat_kexec_segment __user *, segments,
+         compat_ulong_t, flags)
 {
  struct compat_kexec_segment in;
  struct kexec_segment out, __user *ksegments;
-- 
1.7.1