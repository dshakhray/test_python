From f5eb605e150e2e04b716decd211f21c0c92178b7 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:24:25 -0400
Subject: [tools] perf/trace: Add option to show full timestamp

Message-id: <1408462094-14194-97-git-send-email-jolsa@redhat.com>
Patchwork-id: 88102
O-Subject: [PATCH RHEL7.1 BZ1131394 096/325] perf trace: Add option to show full timestamp
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 4bb09192d38ef08f0619667527cabb26354fff89
Author: David Ahern <dsahern@gmail.com>
Date: Wed Sep 4 12:37:43 2013 -0600

description
===========
Current timestamp shown for output is time relative to firt sample. This
patch adds an option to show the absolute perf_clock timestamp which is
useful when comparing output across commands (e.g., perf-trace to
perf-script).
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/Documentation/perf-trace.txt b/tools/perf/Documentation/perf-trace.txt
index daccd2c..a93e91a 100644
--- a/tools/perf/Documentation/perf-trace.txt
+++ b/tools/perf/Documentation/perf-trace.txt
@@ -78,6 +78,10 @@ the thread executes on the designated CPUs. Default is to monitor all CPUs.
 --input
  Process events from a given perf data file.
 
+-T
+--time
+ Print full timestamp rather time relative to first sample.
+
 SEE ALSO
 --------
 linkperf:perf-record[1], linkperf:perf-script[1]
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index ae680b2..a846688 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -624,6 +624,7 @@ struct trace {
  struct perf_record_opts opts;
  struct machine  host;
  u64   base_time;
+ bool   full_time;
  FILE   *output;
  unsigned long  nr_events;
  struct strlist  *ev_qualifier;
@@ -1066,7 +1067,7 @@ static int trace__process_sample(struct perf_tool *tool,
  if (skip_sample(trace, sample))
   return 0;
 
- if (trace->base_time == 0)
+ if (!trace->full_time && trace->base_time == 0)
   trace->base_time = sample->time;
 
  if (handler)
@@ -1195,7 +1196,7 @@ again:
     goto next_event;
    }
 
-   if (trace->base_time == 0)
+   if (!trace->full_time && trace->base_time == 0)
     trace->base_time = sample.time;
 
    if (type != PERF_RECORD_SAMPLE) {
@@ -1435,6 +1436,8 @@ int cmd_trace(int argc, const char **argv, const char *prefix __maybe_unused)
        trace__set_duration),
  OPT_BOOLEAN(0, "sched", &trace.sched, "show blocking scheduler events"),
  OPT_INCR('v', "verbose", &verbose, "be more verbose"),
+ OPT_BOOLEAN('T', "time", &trace.full_time,
+      "Show full timestamp, not time relative to first start"),
  OPT_END()
  };
  int err;
-- 
1.7.1