From e3305e51ba0d703c96928c425a6e2b274c6684bc Mon Sep 17 00:00:00 2001
From: Stanislaw Gruszka <sgruszka@redhat.com>
Date: Wed, 10 Dec 2014 10:29:39 -0500
Subject: [wireless] mac80211: properly flush delayed scan work on interface removal

Message-id: <1418207389-7899-26-git-send-email-sgruszka@redhat.com>
Patchwork-id: 101596
O-Subject: [RHEL7.1 PATCH 25/35] mac80211: properly flush delayed scan work on interface removal
Bugzilla: 1155538
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: John Greene <jogreene@redhat.com>

From: Johannes Berg <johannes@sipsolutions.net>

BZ#1155538

commit 46238845bd609a5c0fbe076e1b82b4c5b33360b2 upstream.

When an interface is deleted, an ongoing hardware scan is canceled and
the driver must abort the scan, at the very least reporting completion
while the interface is removed.

However, if it scheduled the work that might only run after everything
is said and done, which leads to cfg80211 warning that the scan isn't
reported as finished yet; this is no fault of the driver, it already
did, but mac80211 hasn't processed it.

To fix this situation, flush the delayed work when the interface being
removed is the one that was executing the scan.

Reported-by: Sujith Manoharan <sujith@msujith.org>
Tested-by: Sujith Manoharan <sujith@msujith.org>
Signed-off-by: Johannes Berg <johannes.berg@intel.com>
Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

Brew:
https://brewweb.devel.redhat.com/taskinfo?taskID=8330268

Testing:
Tested on Intel, Atheros and Ralink hardware.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/mac80211/iface.c b/net/mac80211/iface.c
index 3c193cb..d8af7a0 100644
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -765,10 +765,12 @@ static void ieee80211_do_stop(struct ieee80211_sub_if_data *sdata,
  int i, flushed;
  struct ps_data *ps;
  struct cfg80211_chan_def chandef;
+ bool cancel_scan;
 
  clear_bit(SDATA_STATE_RUNNING, &sdata->state);
 
- if (rcu_access_pointer(local->scan_sdata) == sdata)
+ cancel_scan = rcu_access_pointer(local->scan_sdata) == sdata;
+ if (cancel_scan)
   ieee80211_scan_cancel(local);
 
  /*
@@ -989,6 +991,9 @@ static void ieee80211_do_stop(struct ieee80211_sub_if_data *sdata,
 
  ieee80211_recalc_ps(local, -1);
 
+ if (cancel_scan)
+  flush_delayed_work(&local->scan_work);
+
  if (local->open_count == 0) {
   ieee80211_stop_device(local);
 
-- 
1.7.1