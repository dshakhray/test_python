From d42699046f7858e607723083f805f728d6ed4afd Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Wed, 11 Jun 2014 11:53:10 -0400
Subject: [kernel] smp: Teach __smp_call_function_single() to check for offline cpus

Message-id: <1402487594-26332-11-git-send-email-prarit@redhat.com>
Patchwork-id: 83637
O-Subject: [RHEL7.1 PATCH BZ 1105192 10/14] smp: Teach __smp_call_function_single() to check for offline cpus
Bugzilla: 1105192
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

commit 08eed44c7249d381a099bc55577e55c6bb533160
Author: Jan Kara <jack@suse.cz>
Date:   Mon Feb 24 16:39:57 2014 +0100

    smp: Teach __smp_call_function_single() to check for offline cpus

    Align __smp_call_function_single() with smp_call_function_single() so
    that it also checks whether requested cpu is still online.

    Signed-off-by: Jan Kara <jack@suse.cz>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jens Axboe <axboe@fb.com>
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/smp.h b/include/linux/smp.h
index 076e550..0709d33 100644
--- a/include/linux/smp.h
+++ b/include/linux/smp.h
@@ -37,8 +37,7 @@ extern unsigned int total_cpus;
 int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
         int wait);
 
-void __smp_call_function_single(int cpuid, struct call_single_data *data,
-    int wait);
+int __smp_call_function_single(int cpu, struct call_single_data *csd, int wait);
 
 #ifdef CONFIG_SMP
 
diff --git a/kernel/smp.c b/kernel/smp.c
index 630703a..172287e 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -277,18 +277,18 @@ EXPORT_SYMBOL_GPL(smp_call_function_any);
 /**
  * __smp_call_function_single(): Run a function on a specific CPU
  * @cpu: The CPU to run on.
- * @data: Pre-allocated and setup data structure
+ * @csd: Pre-allocated and setup data structure
  * @wait: If true, wait until function has completed on specified CPU.
  *
  * Like smp_call_function_single(), but allow caller to pass in a
  * pre-allocated data structure. Useful for embedding @data inside
  * other structures, for instance.
  */
-void __smp_call_function_single(int cpu, struct call_single_data *csd,
-    int wait)
+int __smp_call_function_single(int cpu, struct call_single_data *csd, int wait)
 {
  unsigned int this_cpu;
  unsigned long flags;
+ int err = 0;
 
  this_cpu = get_cpu();
  /*
@@ -304,11 +304,14 @@ void __smp_call_function_single(int cpu, struct call_single_data *csd,
   local_irq_save(flags);
   csd->func(csd->info);
   local_irq_restore(flags);
- } else {
+ } else if ((unsigned)cpu < nr_cpu_ids && cpu_online(cpu)) {
   csd_lock(csd);
   generic_exec_single(cpu, csd, wait);
+ } else {
+  err = -ENXIO; /* CPU not online */
  }
  put_cpu();
+ return err;
 }
 EXPORT_SYMBOL(__smp_call_function_single);
 
diff --git a/kernel/up.c b/kernel/up.c
index 7841a63..3b07a39 100644
--- a/kernel/up.c
+++ b/kernel/up.c
@@ -20,13 +20,14 @@ int smp_call_function_single(int cpu, void (*func) (void *info), void *info,
 }
 EXPORT_SYMBOL(smp_call_function_single);
 
-void __smp_call_function_single(int cpu, struct call_single_data *csd,
-    int wait)
+int __smp_call_function_single(int cpu, struct call_single_data *csd,
+          int wait)
 {
  unsigned long flags;
 
  local_irq_save(flags);
  csd->func(csd->info);
  local_irq_restore(flags);
+ return 0;
 }
 EXPORT_SYMBOL(__smp_call_function_single);
-- 
1.7.1