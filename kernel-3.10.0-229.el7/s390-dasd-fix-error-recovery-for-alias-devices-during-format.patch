From faa60945824b071e71d082195917efd76d85c3cd Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Thu, 21 Aug 2014 14:48:53 -0400
Subject: [s390] dasd: fix error recovery for alias devices during format

Message-id: <1408632535-642-5-git-send-email-brueckner@redhat.com>
Patchwork-id: 88684
O-Subject: [RHEL7.1 PATCH] [s390] dasd: fix error recovery for alias devices during format
Bugzilla: 1132372
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 29b8dd9d4274bca6526e4bb8d4f46dec1f4c15c9
Author: Stefan Haberland <stefan.haberland@de.ibm.com>
Date:   Fri Jul 18 14:26:01 2014 +0200

    dasd: fix error recovery for alias devices during format

    Kernel panic or a hanging device during format if an alias device is
    set offline or I/O errors occur.

    Omit the error recovery procedure for alias devices and do retries on
    the base device with full erp.

    Signed-off-by: Stefan Haberland <stefan.haberland@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1132372
https://bugzilla.redhat.com/show_bug.cgi?id=1132372

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=29b8dd9d4274bca6526e4bb8d4f46dec1f4c15c9

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7869031

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/block/dasd.c b/drivers/s390/block/dasd.c
index ec4b581..fff227b 100644
--- a/drivers/s390/block/dasd.c
+++ b/drivers/s390/block/dasd.c
@@ -2294,17 +2294,27 @@ retry:
 
  rc = 0;
  list_for_each_entry_safe(cqr, n, ccw_queue, blocklist) {
-  if (__dasd_sleep_on_erp(cqr)) {
-   if (!cqr->status == DASD_CQR_TERMINATED &&
-       !cqr->status == DASD_CQR_NEED_ERP)
-    break;
-   rc = 1;
+  /*
+   * for alias devices simplify error recovery and
+   * return to upper layer
+   */
+  if (cqr->startdev != cqr->basedev &&
+      (cqr->status == DASD_CQR_TERMINATED ||
+       cqr->status == DASD_CQR_NEED_ERP))
+   return -EAGAIN;
+  else {
+   /* normal recovery for basedev IO */
+   if (__dasd_sleep_on_erp(cqr)) {
+    if (!cqr->status == DASD_CQR_TERMINATED &&
+        !cqr->status == DASD_CQR_NEED_ERP)
+     break;
+    rc = 1;
+   }
   }
  }
  if (rc)
   goto retry;
 
-
  return 0;
 }
 
diff --git a/drivers/s390/block/dasd_eckd.c b/drivers/s390/block/dasd_eckd.c
index 1102cd0..180c22d 100644
--- a/drivers/s390/block/dasd_eckd.c
+++ b/drivers/s390/block/dasd_eckd.c
@@ -2056,11 +2056,12 @@ dasd_eckd_fill_geometry(struct dasd_block *block, struct hd_geometry *geo)
 
 static struct dasd_ccw_req *
 dasd_eckd_build_format(struct dasd_device *base,
-         struct format_data_t *fdata)
+         struct format_data_t *fdata,
+         int enable_PAV)
 {
  struct dasd_eckd_private *base_priv;
  struct dasd_eckd_private *start_priv;
- struct dasd_device *startdev;
+ struct dasd_device *startdev = NULL;
  struct dasd_ccw_req *fcp;
  struct eckd_count *ect;
  struct ch_t address;
@@ -2073,7 +2074,9 @@ dasd_eckd_build_format(struct dasd_device *base,
  int r0_perm;
  int nr_tracks;
 
- startdev = dasd_alias_get_start_dev(base);
+ if (enable_PAV)
+  startdev = dasd_alias_get_start_dev(base);
+
  if (!startdev)
   startdev = base;
 
@@ -2260,6 +2263,7 @@ dasd_eckd_build_format(struct dasd_device *base,
 
  fcp->startdev = startdev;
  fcp->memdev = startdev;
+ fcp->basedev = base;
  fcp->retries = 256;
  fcp->expires = startdev->default_expires * HZ;
  fcp->buildclk = get_tod_clock();
@@ -2270,7 +2274,8 @@ dasd_eckd_build_format(struct dasd_device *base,
 
 static int
 dasd_eckd_format_device(struct dasd_device *base,
-   struct format_data_t *fdata)
+   struct format_data_t *fdata,
+   int enable_PAV)
 {
  struct dasd_ccw_req *cqr, *n;
  struct dasd_block *block;
@@ -2278,7 +2283,7 @@ dasd_eckd_format_device(struct dasd_device *base,
  struct list_head format_queue;
  struct dasd_device *device;
  int old_stop, format_step;
- int step, rc = 0;
+ int step, rc = 0, sleep_rc;
 
  block = base->block;
  private = (struct dasd_eckd_private *) base->private;
@@ -2312,11 +2317,11 @@ dasd_eckd_format_device(struct dasd_device *base,
  }
 
  INIT_LIST_HEAD(&format_queue);
- old_stop = fdata->stop_unit;
 
+ old_stop = fdata->stop_unit;
  while (fdata->start_unit <= 1) {
   fdata->stop_unit = fdata->start_unit;
-  cqr = dasd_eckd_build_format(base, fdata);
+  cqr = dasd_eckd_build_format(base, fdata, enable_PAV);
   list_add(&cqr->blocklist, &format_queue);
 
   fdata->stop_unit = old_stop;
@@ -2334,7 +2339,7 @@ retry:
   if (step > format_step)
    fdata->stop_unit = fdata->start_unit + format_step - 1;
 
-  cqr = dasd_eckd_build_format(base, fdata);
+  cqr = dasd_eckd_build_format(base, fdata, enable_PAV);
   if (IS_ERR(cqr)) {
    if (PTR_ERR(cqr) == -ENOMEM) {
     /*
@@ -2354,7 +2359,7 @@ retry:
  }
 
 sleep:
- dasd_sleep_on_queue(&format_queue);
+ sleep_rc = dasd_sleep_on_queue(&format_queue);
 
  list_for_each_entry_safe(cqr, n, &format_queue, blocklist) {
   device = cqr->startdev;
@@ -2366,6 +2371,9 @@ sleep:
   private->count--;
  }
 
+ if (sleep_rc)
+  return sleep_rc;
+
  /*
   * in case of ENOMEM we need to retry after
   * first requests are finished
diff --git a/drivers/s390/block/dasd_int.h b/drivers/s390/block/dasd_int.h
index 8bc8419..aa498f7 100644
--- a/drivers/s390/block/dasd_int.h
+++ b/drivers/s390/block/dasd_int.h
@@ -175,6 +175,7 @@ struct dasd_ccw_req {
  struct dasd_block *block; /* the originating block device */
  struct dasd_device *memdev; /* the device used to allocate this */
  struct dasd_device *startdev; /* device the request is started on */
+ struct dasd_device *basedev; /* base device if no block->base */
  void *cpaddr;   /* address of ccw or tcw */
  unsigned char cpmode;  /* 0 = cmd mode, 1 = itcw */
  char status;   /* status of this request */
@@ -319,7 +320,7 @@ struct dasd_discipline {
  int (*term_IO) (struct dasd_ccw_req *);
  void (*handle_terminated_request) (struct dasd_ccw_req *);
  int (*format_device) (struct dasd_device *,
-         struct format_data_t *);
+         struct format_data_t *, int enable_PAV);
  int (*free_cp) (struct dasd_ccw_req *, struct request *);
 
  /*
diff --git a/drivers/s390/block/dasd_ioctl.c b/drivers/s390/block/dasd_ioctl.c
index 8be1b51..01c4ca9 100644
--- a/drivers/s390/block/dasd_ioctl.c
+++ b/drivers/s390/block/dasd_ioctl.c
@@ -150,7 +150,9 @@ static int
 dasd_format(struct dasd_block *block, struct format_data_t *fdata)
 {
  struct dasd_device *base;
- int rc;
+ int enable_PAV = 1;
+ int rc, retries;
+ int start, stop;
 
  base = block->base;
  if (base->discipline->format_device == NULL)
@@ -178,11 +180,30 @@ dasd_format(struct dasd_block *block, struct format_data_t *fdata)
   bdput(bdev);
  }
 
- rc = base->discipline->format_device(base, fdata);
- if (rc)
-  return rc;
-
- return 0;
+ retries = 255;
+ /* backup start- and endtrack for retries */
+ start = fdata->start_unit;
+ stop = fdata->stop_unit;
+ do {
+  rc = base->discipline->format_device(base, fdata, enable_PAV);
+  if (rc) {
+   if (rc == -EAGAIN) {
+    retries--;
+    /* disable PAV in case of errors */
+    enable_PAV = 0;
+    fdata->start_unit = start;
+    fdata->stop_unit = stop;
+   } else
+    return rc;
+  } else
+   /* success */
+   break;
+ } while (retries);
+
+ if (!retries)
+  return -EIO;
+ else
+  return 0;
 }
 
 /*
-- 
1.7.1