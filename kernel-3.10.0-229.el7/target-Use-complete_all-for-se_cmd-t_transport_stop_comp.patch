From 9989cf67b1e71ce67f4ecb117ba7c5089563df16 Mon Sep 17 00:00:00 2001
From: Andy Grover <agrover@redhat.com>
Date: Fri, 5 Sep 2014 16:36:21 -0400
Subject: [target] Use complete_all for se_cmd->t_transport_stop_comp

Message-id: <1409934989-29941-24-git-send-email-agrover@redhat.com>
Patchwork-id: 91486
O-Subject: [RHEL7.1 PATCH e-stor 23/31] target: Use complete_all for se_cmd->t_transport_stop_comp
Bugzilla: 1129387
RH-Acked-by: Chris Leech <cleech@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

From: Nicholas Bellinger <nab@linux-iscsi.org>

commit a95d6511303b848da45ee27b35018bb58087bdc6 upstream.

This patch fixes a bug where multiple waiters on ->t_transport_stop_comp
occurs due to a concurrent ABORT_TASK and session reset both invoking
transport_wait_for_tasks(), while waiting for the associated se_cmd
descriptor backend processing to complete.

For this case, complete_all() should be invoked in order to wake up
both waiters in core_tmr_abort_task() + transport_generic_free_cmd()
process contexts.

Cc: Thomas Glanzmann <thomas@glanzmann.de>
Cc: Charalampos Pournaris <charpour@gmail.com>
Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/target/target_core_transport.c b/drivers/target/target_core_transport.c
index 44f6fc1..1cc9597 100644
--- a/drivers/target/target_core_transport.c
+++ b/drivers/target/target_core_transport.c
@@ -488,7 +488,7 @@ static int transport_cmd_check_stop(struct se_cmd *cmd, bool remove_from_lists)
 
   spin_unlock_irqrestore(&cmd->t_state_lock, flags);
 
-  complete(&cmd->t_transport_stop_comp);
+  complete_all(&cmd->t_transport_stop_comp);
   return 1;
  }
 
@@ -617,7 +617,7 @@ void target_complete_cmd(struct se_cmd *cmd, u8 scsi_status)
  if (cmd->transport_state & CMD_T_ABORTED &&
      cmd->transport_state & CMD_T_STOP) {
   spin_unlock_irqrestore(&cmd->t_state_lock, flags);
-  complete(&cmd->t_transport_stop_comp);
+  complete_all(&cmd->t_transport_stop_comp);
   return;
  } else if (cmd->transport_state & CMD_T_FAILED) {
   INIT_WORK(&cmd->work, target_complete_failure_work);
@@ -1688,7 +1688,7 @@ void target_execute_cmd(struct se_cmd *cmd)
    cmd->se_tfo->get_task_tag(cmd));
 
   spin_unlock_irq(&cmd->t_state_lock);
-  complete(&cmd->t_transport_stop_comp);
+  complete_all(&cmd->t_transport_stop_comp);
   return;
  }
 
-- 
1.7.1