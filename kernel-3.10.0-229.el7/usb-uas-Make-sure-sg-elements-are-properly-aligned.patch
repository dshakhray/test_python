From 654e2874dd70a90cd854ed2f65d0f00ce921456f Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:06:54 -0400
Subject: [usb] uas: Make sure sg elements are properly aligned

Message-id: <1410887463-20674-343-git-send-email-dzickus@redhat.com>
Patchwork-id: 95324
O-Subject: [RHEL7 PATCH 342/591] uas: Make sure sg elements are properly aligned
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 37599f9603bed3d72becdc1a59c164576df9fbfc
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Nov 15 10:04:31 2013 +0100

    uas: Make sure sg elements are properly aligned

    Copy the sg alignment trick from the usb-storage driver, without this I'm
    seeing intermittent errors when using uas devices with an ehci controller.

    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/storage/uas.c b/drivers/usb/storage/uas.c
index 6208682..ad97615 100644
--- a/drivers/usb/storage/uas.c
+++ b/drivers/usb/storage/uas.c
@@ -925,6 +925,24 @@ static int uas_eh_bus_reset_handler(struct scsi_cmnd *cmnd)
 static int uas_slave_alloc(struct scsi_device *sdev)
 {
  sdev->hostdata = (void *)sdev->host->hostdata;
+
+ /* USB has unusual DMA-alignment requirements: Although the
+  * starting address of each scatter-gather element doesn't matter,
+  * the length of each element except the last must be divisible
+  * by the Bulk maxpacket value.  There's currently no way to
+  * express this by block-layer constraints, so we'll cop out
+  * and simply require addresses to be aligned at 512-byte
+  * boundaries.  This is okay since most block I/O involves
+  * hardware sectors that are multiples of 512 bytes in length,
+  * and since host controllers up through USB 2.0 have maxpacket
+  * values no larger than 512.
+  *
+  * But it doesn't suffice for Wireless USB, where Bulk maxpacket
+  * values can be as large as 2048.  To make that work properly
+  * will require changes to the block layer.
+  */
+ blk_queue_update_dma_alignment(sdev->request_queue, (512 - 1));
+
  return 0;
 }
 
-- 
1.7.1