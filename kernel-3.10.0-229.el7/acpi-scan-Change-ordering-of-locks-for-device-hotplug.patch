From f6b55df03ff8ac5f49f938956496e8812ce95b5c Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:05:36 -0400
Subject: [acpi] scan: Change ordering of locks for device hotplug

Message-id: <20140710010536.22146.2229.stgit@gir.stowe>
Patchwork-id: 85610
O-Subject: [RHEL7.1 PATCH 071/105] ACPI / scan: Change ordering of locks for device hotplug
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: e0ae8fee0e11c1a8e9b45ab14ab5fe58d87f031d

commit e0ae8fee0e11c1a8e9b45ab14ab5fe58d87f031d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Aug 30 14:19:29 2013 +0200

    ACPI / scan: Change ordering of locks for device hotplug

    Change the ordering of device hotplug locks in scan.c so that
    acpi_scan_lock is always acquired after device_hotplug_lock.

    This will make it possible to use device_hotplug_lock around some
    code paths that acquire acpi_scan_lock safely (most importantly
    system suspend and hibernation).  Apart from that, acpi_scan_lock
    is platform-specific and device_hotplug_lock is general, so the
    new ordering appears to be more appropriate from the overall
    design viewpoint.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 8562ff1..40140fa 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -204,8 +204,6 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
   return -EINVAL;
  }
 
- lock_device_hotplug();
-
  /*
   * Carry out two passes here and ignore errors in the first pass,
   * because if the devices in question are memory blocks and
@@ -236,9 +234,6 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
          ACPI_UINT32_MAX,
          acpi_bus_online_companions, NULL,
          NULL, NULL);
-
-   unlock_device_hotplug();
-
    put_device(&device->dev);
    return -EBUSY;
   }
@@ -249,8 +244,6 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
 
  acpi_bus_trim(device);
 
- unlock_device_hotplug();
-
  /* Device node has been unregistered. */
  put_device(&device->dev);
  device = NULL;
@@ -289,6 +282,7 @@ static void acpi_bus_device_eject(void *context)
  u32 ost_code = ACPI_OST_SC_NON_SPECIFIC_FAILURE;
  int error;
 
+ lock_device_hotplug();
  mutex_lock(&acpi_scan_lock);
 
  acpi_bus_get_device(handle, &device);
@@ -312,6 +306,7 @@ static void acpi_bus_device_eject(void *context)
 
  out:
  mutex_unlock(&acpi_scan_lock);
+ unlock_device_hotplug();
  return;
 
  err_out:
@@ -326,8 +321,8 @@ static void acpi_scan_bus_device_check(acpi_handle handle, u32 ost_source)
  u32 ost_code = ACPI_OST_SC_NON_SPECIFIC_FAILURE;
  int error;
 
- mutex_lock(&acpi_scan_lock);
  lock_device_hotplug();
+ mutex_lock(&acpi_scan_lock);
 
  if (ost_source != ACPI_NOTIFY_BUS_CHECK) {
   acpi_bus_get_device(handle, &device);
@@ -353,9 +348,9 @@ static void acpi_scan_bus_device_check(acpi_handle handle, u32 ost_source)
   kobject_uevent(&device->dev.kobj, KOBJ_ONLINE);
 
  out:
- unlock_device_hotplug();
  acpi_evaluate_hotplug_ost(handle, ost_source, ost_code, NULL);
  mutex_unlock(&acpi_scan_lock);
+ unlock_device_hotplug();
 }
 
 static void acpi_scan_bus_check(void *context)
@@ -446,6 +441,7 @@ void acpi_bus_hot_remove_device(void *context)
  acpi_handle handle = device->handle;
  int error;
 
+ lock_device_hotplug();
  mutex_lock(&acpi_scan_lock);
 
  error = acpi_scan_hot_remove(device);
@@ -455,6 +451,7 @@ void acpi_bus_hot_remove_device(void *context)
        NULL);
 
  mutex_unlock(&acpi_scan_lock);
+ unlock_device_hotplug();
  kfree(context);
 }
 EXPORT_SYMBOL(acpi_bus_hot_remove_device);
-- 
1.7.1