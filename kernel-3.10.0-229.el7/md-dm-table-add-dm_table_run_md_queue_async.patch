From 1d57a9323acbde6f05d026341e567248e5a25263 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:30 -0400
Subject: [md] dm-table: add dm_table_run_md_queue_async

Message-id: <1405543364-20901-27-git-send-email-snitzer@redhat.com>
Patchwork-id: 85905
O-Subject: [RHEL7.1 PATCH 26/40] dm table: add dm_table_run_md_queue_async
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1117872

Upstream commit 9974fa2c6a7d470ca3c201fe7dbac64bf4dd8d2a
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Feb 28 15:33:43 2014 +0100

    dm table: add dm_table_run_md_queue_async

    Introduce dm_table_run_md_queue_async() to run the request_queue of the
    mapped_device associated with a request-based DM table.

    Also add dm_md_get_queue() wrapper to extract the request_queue from a
    mapped_device.

    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-table.c b/drivers/md/dm-table.c
index f10831b..410a8c2 100644
--- a/drivers/md/dm-table.c
+++ b/drivers/md/dm-table.c
@@ -1430,6 +1430,25 @@ static bool dm_table_supports_write_same(struct dm_table *t)
  return true;
 }
 
+void dm_table_run_md_queue_async(struct dm_table *t)
+{
+ struct mapped_device *md;
+ struct request_queue *queue;
+ unsigned long flags;
+
+ if (!dm_table_request_based(t))
+  return;
+
+ md = dm_table_get_md(t);
+ queue = dm_get_md_queue(md);
+ if (queue) {
+  spin_lock_irqsave(queue->queue_lock, flags);
+  blk_run_queue_async(queue);
+  spin_unlock_irqrestore(queue->queue_lock, flags);
+ }
+}
+EXPORT_SYMBOL(dm_table_run_md_queue_async);
+
 static int device_discard_capable(struct dm_target *ti, struct dm_dev *dev,
       sector_t start, sector_t len, void *data)
 {
diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index b468f78..26bce33 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -479,6 +479,11 @@ sector_t dm_get_size(struct mapped_device *md)
  return get_capacity(md->disk);
 }
 
+struct request_queue *dm_get_md_queue(struct mapped_device *md)
+{
+ return md->queue;
+}
+
 struct dm_stats *dm_get_stats(struct mapped_device *md)
 {
  return &md->stats;
diff --git a/drivers/md/dm.h b/drivers/md/dm.h
index 09bb47e..e81d215 100644
--- a/drivers/md/dm.h
+++ b/drivers/md/dm.h
@@ -187,6 +187,7 @@ int dm_lock_for_deletion(struct mapped_device *md, bool mark_deferred, bool only
 int dm_cancel_deferred_remove(struct mapped_device *md);
 int dm_request_based(struct mapped_device *md);
 sector_t dm_get_size(struct mapped_device *md);
+struct request_queue *dm_get_md_queue(struct mapped_device *md);
 struct dm_stats *dm_get_stats(struct mapped_device *md);
 
 int dm_kobject_uevent(struct mapped_device *md, enum kobject_action action,
diff --git a/include/linux/device-mapper.h b/include/linux/device-mapper.h
index 730751e..e1707de 100644
--- a/include/linux/device-mapper.h
+++ b/include/linux/device-mapper.h
@@ -459,6 +459,11 @@ struct mapped_device *dm_table_get_md(struct dm_table *t);
 void dm_table_event(struct dm_table *t);
 
 /*
+ * Run the queue for request-based targets.
+ */
+void dm_table_run_md_queue_async(struct dm_table *t);
+
+/*
  * The device must be suspended before calling this method.
  * Returns the previous table, which the caller must destroy.
  */
-- 
1.7.1