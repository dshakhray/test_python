From 0376c1c76e701409890729d5d91dee83e4de3b64 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:26:17 -0400
Subject: [tools] perf/evlist: Factor out duplicated mmap code

Message-id: <1408462094-14194-209-git-send-email-jolsa@redhat.com>
Patchwork-id: 88207
O-Subject: [PATCH RHEL7.1 BZ1131394 208/325] perf evlist: Factor out duplicated mmap code
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 04e213148c434544e3aa88d227b5375fd375738b
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Fri Oct 18 15:29:13 2013 +0300

description
===========
The same code is used in perf_evlist__mmap_per_cpu() and
perf_evlist__mmap_per_thread().

Factor it out into a separate function perf_evlist__mmap_per_evsel().
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index aea4772..a37e3ee 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -615,9 +615,36 @@ static int __perf_evlist__mmap(struct perf_evlist *evlist,
  return 0;
 }
 
-static int perf_evlist__mmap_per_cpu(struct perf_evlist *evlist, int prot, int mask)
+static int perf_evlist__mmap_per_evsel(struct perf_evlist *evlist, int idx,
+           int prot, int mask, int cpu, int thread,
+           int *output)
 {
  struct perf_evsel *evsel;
+
+ list_for_each_entry(evsel, &evlist->entries, node) {
+  int fd = FD(evsel, cpu, thread);
+
+  if (*output == -1) {
+   *output = fd;
+   if (__perf_evlist__mmap(evlist, idx, prot, mask,
+      *output) < 0)
+    return -1;
+  } else {
+   if (ioctl(fd, PERF_EVENT_IOC_SET_OUTPUT, *output) != 0)
+    return -1;
+  }
+
+  if ((evsel->attr.read_format & PERF_FORMAT_ID) &&
+      perf_evlist__id_add_fd(evlist, evsel, cpu, thread, fd) < 0)
+   return -1;
+ }
+
+ return 0;
+}
+
+static int perf_evlist__mmap_per_cpu(struct perf_evlist *evlist, int prot,
+         int mask)
+{
  int cpu, thread;
  int nr_cpus = cpu_map__nr(evlist->cpus);
  int nr_threads = thread_map__nr(evlist->threads);
@@ -627,23 +654,9 @@ static int perf_evlist__mmap_per_cpu(struct perf_evlist *evlist, int prot, int m
   int output = -1;
 
   for (thread = 0; thread < nr_threads; thread++) {
-   list_for_each_entry(evsel, &evlist->entries, node) {
-    int fd = FD(evsel, cpu, thread);
-
-    if (output == -1) {
-     output = fd;
-     if (__perf_evlist__mmap(evlist, cpu,
-        prot, mask, output) < 0)
-      goto out_unmap;
-    } else {
-     if (ioctl(fd, PERF_EVENT_IOC_SET_OUTPUT, output) != 0)
-      goto out_unmap;
-    }
-
-    if ((evsel->attr.read_format & PERF_FORMAT_ID) &&
-        perf_evlist__id_add_fd(evlist, evsel, cpu, thread, fd) < 0)
-     goto out_unmap;
-   }
+   if (perf_evlist__mmap_per_evsel(evlist, cpu, prot, mask,
+       cpu, thread, &output))
+    goto out_unmap;
   }
  }
 
@@ -655,9 +668,9 @@ out_unmap:
  return -1;
 }
 
-static int perf_evlist__mmap_per_thread(struct perf_evlist *evlist, int prot, int mask)
+static int perf_evlist__mmap_per_thread(struct perf_evlist *evlist, int prot,
+     int mask)
 {
- struct perf_evsel *evsel;
  int thread;
  int nr_threads = thread_map__nr(evlist->threads);
 
@@ -665,23 +678,9 @@ static int perf_evlist__mmap_per_thread(struct perf_evlist *evlist, int prot, in
  for (thread = 0; thread < nr_threads; thread++) {
   int output = -1;
 
-  list_for_each_entry(evsel, &evlist->entries, node) {
-   int fd = FD(evsel, 0, thread);
-
-   if (output == -1) {
-    output = fd;
-    if (__perf_evlist__mmap(evlist, thread,
-       prot, mask, output) < 0)
-     goto out_unmap;
-   } else {
-    if (ioctl(fd, PERF_EVENT_IOC_SET_OUTPUT, output) != 0)
-     goto out_unmap;
-   }
-
-   if ((evsel->attr.read_format & PERF_FORMAT_ID) &&
-       perf_evlist__id_add_fd(evlist, evsel, 0, thread, fd) < 0)
-    goto out_unmap;
-  }
+  if (perf_evlist__mmap_per_evsel(evlist, thread, prot, mask, 0,
+      thread, &output))
+   goto out_unmap;
  }
 
  return 0;
-- 
1.7.1