From b8574afb14ef9d749aad5bbac73912800592fef6 Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Thu, 21 Aug 2014 13:05:31 -0400
Subject: [ethernet] qlcnic: Allow firmware dump collection when auto firmware recovery is disabled

Message-id: <1408626422-3941-48-git-send-email-cdupuis@redhat.com>
Patchwork-id: 88585
O-Subject: [PATCH RHEL 7.1 047/138] qlcnic: Allow firmware dump collection when auto firmware recovery is disabled
Bugzilla: 1089352
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Manish Chopra <manish.chopra@qlogic.com>

Bug 1089352 (https://bugzilla.redhat.com/show_bug.cgi?id=1089352)

net commit id 30fa15f64e40c4cf037e3379e55c2323b5d992e2

o Allow driver to collect firmware dump, during a forced firmware dump
  operation, when auto firmware recovery is disabled. Also, during this
  operation, driver should not allow reset recovery to be performed.

Signed-off-by: Manish Chopra <manish.chopra@qlogic.com>
Signed-off-by: Himanshu Madhani <himanshu.madhani@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h
index 4cae6ca..a6a3350 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h
@@ -662,4 +662,5 @@ pci_ers_result_t qlcnic_83xx_io_error_detected(struct pci_dev *,
             pci_channel_state_t);
 pci_ers_result_t qlcnic_83xx_io_slot_reset(struct pci_dev *);
 void qlcnic_83xx_io_resume(struct pci_dev *);
+void qlcnic_83xx_stop_hw(struct qlcnic_adapter *);
 #endif
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c
index cac0503..918e18d 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c
@@ -740,6 +740,7 @@ static int qlcnic_83xx_idc_unknown_state(struct qlcnic_adapter *adapter)
  adapter->ahw->idc.err_code = -EIO;
  dev_err(&adapter->pdev->dev,
   "%s: Device in unknown state\n", __func__);
+ clear_bit(__QLCNIC_RESETTING, &adapter->state);
  return 0;
 }
 
@@ -818,7 +819,6 @@ static int qlcnic_83xx_idc_ready_state(struct qlcnic_adapter *adapter)
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  int ret = 0;
- u32 owner;
  u32 val;
 
  /* Perform NIC configuration based ready state entry actions */
@@ -848,9 +848,9 @@ static int qlcnic_83xx_idc_ready_state(struct qlcnic_adapter *adapter)
    set_bit(__QLCNIC_RESETTING, &adapter->state);
    qlcnic_83xx_idc_enter_need_reset_state(adapter, 1);
   }  else {
-   owner = qlcnic_83xx_idc_find_reset_owner_id(adapter);
-   if (ahw->pci_func == owner)
-    qlcnic_dump_fw(adapter);
+   netdev_info(adapter->netdev, "%s: Auto firmware recovery is disabled\n",
+        __func__);
+   qlcnic_83xx_idc_enter_failed_state(adapter, 1);
   }
   return -EIO;
  }
@@ -948,13 +948,26 @@ static int qlcnic_83xx_idc_need_quiesce_state(struct qlcnic_adapter *adapter)
  return 0;
 }
 
-static int qlcnic_83xx_idc_failed_state(struct qlcnic_adapter *adapter)
+static void qlcnic_83xx_idc_failed_state(struct qlcnic_adapter *adapter)
 {
- dev_err(&adapter->pdev->dev, "%s: please restart!!\n", __func__);
+ struct qlcnic_hardware_context *ahw = adapter->ahw;
+ u32 val, owner;
+
+ val = QLCRDX(adapter->ahw, QLC_83XX_IDC_CTRL);
+ if (val & QLC_83XX_IDC_DISABLE_FW_RESET_RECOVERY) {
+  owner = qlcnic_83xx_idc_find_reset_owner_id(adapter);
+  if (ahw->pci_func == owner) {
+   qlcnic_83xx_stop_hw(adapter);
+   qlcnic_dump_fw(adapter);
+  }
+ }
+
+ netdev_warn(adapter->netdev, "%s: Reboot will be required to recover the adapter!!\n",
+      __func__);
  clear_bit(__QLCNIC_RESETTING, &adapter->state);
- adapter->ahw->idc.err_code = -EIO;
+ ahw->idc.err_code = -EIO;
 
- return 0;
+ return;
 }
 
 static int qlcnic_83xx_idc_quiesce_state(struct qlcnic_adapter *adapter)
@@ -1063,12 +1076,6 @@ void qlcnic_83xx_idc_poll_dev_state(struct work_struct *work)
  adapter->ahw->idc.prev_state = adapter->ahw->idc.curr_state;
  qlcnic_83xx_periodic_tasks(adapter);
 
- /* Do not reschedule if firmaware is in hanged state and auto
-  * recovery is disabled
-  */
- if ((adapter->flags & QLCNIC_FW_HANG) && !qlcnic_auto_fw_reset)
-  return;
-
  /* Re-schedule the function */
  if (test_bit(QLC_83XX_MODULE_LOADED, &adapter->ahw->idc.status))
   qlcnic_schedule_work(adapter, qlcnic_83xx_idc_poll_dev_state,
@@ -1219,10 +1226,10 @@ void qlcnic_83xx_idc_request_reset(struct qlcnic_adapter *adapter, u32 key)
  }
 
  val = QLCRDX(adapter->ahw, QLC_83XX_IDC_CTRL);
- if ((val & QLC_83XX_IDC_DISABLE_FW_RESET_RECOVERY) ||
-     !qlcnic_auto_fw_reset) {
-  dev_err(&adapter->pdev->dev,
-   "%s:failed, device in non reset mode\n", __func__);
+ if (val & QLC_83XX_IDC_DISABLE_FW_RESET_RECOVERY) {
+  netdev_info(adapter->netdev, "%s: Auto firmware recovery is disabled\n",
+       __func__);
+  qlcnic_83xx_idc_enter_failed_state(adapter, 0);
   qlcnic_83xx_unlock_driver(adapter);
   return;
  }
@@ -1939,7 +1946,7 @@ static void qlcnic_83xx_exec_template_cmd(struct qlcnic_adapter *p_dev,
  p_dev->ahw->reset.seq_index = index;
 }
 
-static void qlcnic_83xx_stop_hw(struct qlcnic_adapter *p_dev)
+void qlcnic_83xx_stop_hw(struct qlcnic_adapter *p_dev)
 {
  p_dev->ahw->reset.seq_index = 0;
 
@@ -1994,6 +2001,14 @@ static int qlcnic_83xx_restart_hw(struct qlcnic_adapter *adapter)
  val = QLCRDX(adapter->ahw, QLC_83XX_IDC_CTRL);
  if (!(val & QLC_83XX_IDC_GRACEFULL_RESET))
   qlcnic_dump_fw(adapter);
+
+ if (val & QLC_83XX_IDC_DISABLE_FW_RESET_RECOVERY) {
+  netdev_info(adapter->netdev, "%s: Auto firmware recovery is disabled\n",
+       __func__);
+  qlcnic_83xx_idc_enter_failed_state(adapter, 1);
+  return err;
+ }
+
  qlcnic_83xx_init_hw(adapter);
 
  if (qlcnic_83xx_copy_bootloader(adapter))
-- 
1.7.1