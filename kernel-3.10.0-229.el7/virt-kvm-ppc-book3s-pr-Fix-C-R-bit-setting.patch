From 4f815d7bdf7059b16c454dfa045e3f53364cb7b1 Mon Sep 17 00:00:00 2001
From: David Gibson <dgibson@redhat.com>
Date: Mon, 15 Sep 2014 07:13:08 -0400
Subject: [virt] kvm/ppc: book3s/pr - Fix C/R bit setting

Message-id: <1410765214-16377-53-git-send-email-dgibson@redhat.com>
Patchwork-id: 94758
O-Subject: [PATCH 52/78] KVM: PPC: Book3S: PR: Fix C/R bit setting
Bugzilla: 1123145 1123133 1123367
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Signed-off-by: David Gibson <dgibson@redhat.com>

commit 740f834eb2505e1883b54cfc1644af80834ab6b6
Author: Alexander Graf <agraf@suse.de>
Date:   Thu Apr 24 12:48:19 2014 +0200

    KVM: PPC: Book3S: PR: Fix C/R bit setting

    Commit 9308ab8e2d made C/R HTAB updates go byte-wise into the target HTAB.
    However, it didn't update the guest's copy of the HTAB, but instead the
    host local copy of it.

    Write to the guest's HTAB instead.

    Signed-off-by: Alexander Graf <agraf@suse.de>
    CC: Paul Mackerras <paulus@samba.org>
    Acked-by: Paul Mackerras <paulus@samba.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_32_mmu.c b/arch/powerpc/kvm/book3s_32_mmu.c
index 5b48c52..9ab53ab 100644
--- a/arch/powerpc/kvm/book3s_32_mmu.c
+++ b/arch/powerpc/kvm/book3s_32_mmu.c
@@ -270,7 +270,7 @@ static int kvmppc_mmu_book3s_32_xlate_pte(struct kvm_vcpu *vcpu, gva_t eaddr,
     page */
  if (found) {
   u32 pte_r = pteg[i+1];
-  char __user *addr = (char __user *) &pteg[i+1];
+  char __user *addr = (char __user *) (ptegp + (i+1) * sizeof(u32));
 
   /*
    * Use single-byte writes to update the HPTE, to
diff --git a/arch/powerpc/kvm/book3s_64_mmu.c b/arch/powerpc/kvm/book3s_64_mmu.c
index b26d664..5b8465f 100644
--- a/arch/powerpc/kvm/book3s_64_mmu.c
+++ b/arch/powerpc/kvm/book3s_64_mmu.c
@@ -342,14 +342,14 @@ do_second:
    * non-PAPR platforms such as mac99, and this is
    * what real hardware does.
    */
-  char __user *addr = (char __user *) &pteg[i+1];
+                char __user *addr = (char __user *) (ptegp + (i + 1) * sizeof(u64));
   r |= HPTE_R_R;
   put_user(r >> 8, addr + 6);
  }
  if (iswrite && gpte->may_write && !(r & HPTE_R_C)) {
   /* Set the dirty flag */
   /* Use a single byte write */
-  char __user *addr = (char __user *) &pteg[i+1];
+                char __user *addr = (char __user *) (ptegp + (i + 1) * sizeof(u64));
   r |= HPTE_R_C;
   put_user(r, addr + 7);
  }
-- 
1.7.1