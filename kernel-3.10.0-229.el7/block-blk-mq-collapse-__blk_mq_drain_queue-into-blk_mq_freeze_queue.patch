From 972407fd2fae57145944250c43d2783c277aea93 Mon Sep 17 00:00:00 2001
From: Jeff Moyer <jmoyer@redhat.com>
Date: Fri, 10 Oct 2014 21:03:05 -0400
Subject: [block] blk-mq: collapse __blk_mq_drain_queue() into blk_mq_freeze_queue()

Message-id: <1412975015-5370-5-git-send-email-jmoyer@redhat.com>
Patchwork-id: 97447
O-Subject: [RHEL7 PATCH 04/34] blk-mq: collapse __blk_mq_drain_queue() into blk_mq_freeze_queue()
Bugzilla: 1146660
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Mike Snitzer <snitzer@redhat.com>

This is a backport of the following commit.  This resolves bug
1146660.

  commit 72d6f02a8d4e0dda74de3a541b1c4ae82f5f7b45
  Author: Tejun Heo <tj@kernel.org>
  Date:   Tue Jul 1 10:33:02 2014 -0600

    blk-mq: collapse __blk_mq_drain_queue() into blk_mq_freeze_queue()

    Keeping __blk_mq_drain_queue() as a separate function doesn't buy us
    anything and it's gonna be further simplified.  Let's flatten it into
    its caller.

    This patch doesn't make any functional change.

    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Nicholas A. Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 1e324a1..22682fb 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -108,8 +108,16 @@ static void blk_mq_queue_exit(struct request_queue *q)
  __percpu_counter_add(&q->mq_usage_counter, -1, 1000000);
 }
 
-void blk_mq_drain_queue(struct request_queue *q)
+/*
+ * Guarantee no request is in use, so we can change any data structure of
+ * the queue afterward.
+ */
+void blk_mq_freeze_queue(struct request_queue *q)
 {
+ spin_lock_irq(q->queue_lock);
+ q->mq_freeze_depth++;
+ spin_unlock_irq(q->queue_lock);
+
  while (true) {
   s64 count;
 
@@ -124,19 +132,6 @@ void blk_mq_drain_queue(struct request_queue *q)
  }
 }
 
-/*
- * Guarantee no request is in use, so we can change any data structure of
- * the queue afterward.
- */
-void blk_mq_freeze_queue(struct request_queue *q)
-{
- spin_lock_irq(q->queue_lock);
- q->mq_freeze_depth++;
- spin_unlock_irq(q->queue_lock);
-
- blk_mq_drain_queue(q);
-}
-
 static void blk_mq_unfreeze_queue(struct request_queue *q)
 {
  bool wake = false;
-- 
1.7.1