From 36b19f65f1f4f236cd3d6198854e64b4f77b51c7 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:29:55 -0400
Subject: [net] openvswitch: Avoid assigning a NULL pointer to flow actions

Message-id: <dda915621f725d13509ca1506a70d8faec72190f.1410531783.git.jbenc@redhat.com>
Patchwork-id: 94036
O-Subject: [RHEL7.1 net PATCH 22/50] openvswitch: Avoid assigning a NULL pointer to flow actions.
Bugzilla: 1110384
RH-Acked-by: Flavio Leitner <fbl@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110384
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit be52c9e96a6657d117bb0ec6e11438fb246af5c7
Author: Jarno Rajahalme <jrajahalme@nicira.com>
Date:   Mon May 5 09:59:40 2014 -0700

    openvswitch: Avoid assigning a NULL pointer to flow actions.

    Flow SET can accept an empty set of actions, with the intended
    semantics of leaving existing actions unmodified.  This seems to have
    been brokin after OVS 1.7, as we have assigned the flow's actions
    pointer to NULL in this case, but we never check for the NULL pointer
    later on.  This patch restores the intended behavior and documents it
    in the include/linux/openvswitch.h.

    Signed-off-by: Jarno Rajahalme <jrajahalme@nicira.com>
    Signed-off-by: Pravin B Shelar <pshelar@nicira.com>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/uapi/linux/openvswitch.h b/include/uapi/linux/openvswitch.h
index a89b7ed..fe980ed 100644
--- a/include/uapi/linux/openvswitch.h
+++ b/include/uapi/linux/openvswitch.h
@@ -396,7 +396,9 @@ struct ovs_key_nd {
  * @OVS_FLOW_ATTR_ACTIONS: Nested %OVS_ACTION_ATTR_* attributes specifying
  * the actions to take for packets that match the key.  Always present in
  * notifications.  Required for %OVS_FLOW_CMD_NEW requests, optional for
- * %OVS_FLOW_CMD_SET requests.
+ * %OVS_FLOW_CMD_SET requests.  An %OVS_FLOW_CMD_SET without
+ * %OVS_FLOW_ATTR_ACTIONS will not modify the actions.  To clear the actions,
+ * an %OVS_FLOW_ATTR_ACTIONS without any nested attributes must be given.
  * @OVS_FLOW_ATTR_STATS: &struct ovs_flow_stats giving statistics for this
  * flow.  Present in notifications if the stats would be nonzero.  Ignored in
  * requests.
diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index 5754e46..8e04ce0 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -812,6 +812,7 @@ static int ovs_flow_cmd_new_or_set(struct sk_buff *skb, struct genl_info *info)
    goto err_kfree;
   }
  } else if (info->genlhdr->cmd == OVS_FLOW_CMD_NEW) {
+  /* OVS_FLOW_CMD_NEW must have actions. */
   error = -EINVAL;
   goto error;
  }
@@ -851,8 +852,6 @@ static int ovs_flow_cmd_new_or_set(struct sk_buff *skb, struct genl_info *info)
   reply = ovs_flow_cmd_build_info(flow, dp, info, OVS_FLOW_CMD_NEW);
  } else {
   /* We found a matching flow. */
-  struct sw_flow_actions *old_acts;
-
   /* Bail out if we're not allowed to modify an existing flow.
    * We accept NLM_F_CREATE in place of the intended NLM_F_EXCL
    * because Generic Netlink treats the latter as a dump
@@ -868,11 +867,14 @@ static int ovs_flow_cmd_new_or_set(struct sk_buff *skb, struct genl_info *info)
   if (!ovs_flow_cmp_unmasked_key(flow, &match))
    goto err_unlock_ovs;
 
-  /* Update actions. */
-  old_acts = ovsl_dereference(flow->sf_acts);
-  rcu_assign_pointer(flow->sf_acts, acts);
-  ovs_nla_free_flow_actions(old_acts);
+  /* Update actions, if present. */
+  if (acts) {
+   struct sw_flow_actions *old_acts;
 
+   old_acts = ovsl_dereference(flow->sf_acts);
+   rcu_assign_pointer(flow->sf_acts, acts);
+   ovs_nla_free_flow_actions(old_acts);
+  }
   reply = ovs_flow_cmd_build_info(flow, dp, info, OVS_FLOW_CMD_NEW);
 
   /* Clear stats. */
-- 
1.7.1