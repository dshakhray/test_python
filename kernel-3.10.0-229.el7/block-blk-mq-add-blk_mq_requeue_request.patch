From e4f9f05bbfee5716ee545649fa2a5361bac849f5 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:27 -0400
Subject: [block] blk-mq: add blk_mq_requeue_request

Message-id: <1402670238-13916-40-git-send-email-snitzer@redhat.com>
Patchwork-id: 83854
O-Subject: [RHEL7.1 PATCH 039/150] blk-mq: add blk_mq_requeue_request
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit ed0791b2f83cec4e77d88c4e9baabcebf9254a78
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Apr 16 09:44:57 2014 +0200

    blk-mq: add blk_mq_requeue_request

    This allows to requeue a request that has been accepted by ->queue_rq
    earlier.  This is needed by the SCSI layer in various error conditions.

    The existing internal blk_mq_requeue_request is renamed to
    __blk_mq_requeue_request as it is a lower level building block for this
    funtionality.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 543bbc0..ee225cc 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -400,7 +400,7 @@ static void blk_mq_start_request(struct request *rq, bool last)
   rq->cmd_flags |= REQ_END;
 }
 
-static void blk_mq_requeue_request(struct request *rq)
+static void __blk_mq_requeue_request(struct request *rq)
 {
  struct request_queue *q = rq->q;
 
@@ -413,6 +413,20 @@ static void blk_mq_requeue_request(struct request *rq)
   rq->nr_phys_segments--;
 }
 
+void blk_mq_requeue_request(struct request *rq)
+{
+ struct request_queue *q = rq->q;
+
+ __blk_mq_requeue_request(rq);
+ blk_clear_rq_complete(rq);
+
+ trace_block_rq_requeue(q, rq);
+
+ BUG_ON(blk_queued_rq(rq));
+ blk_mq_insert_request(rq, true, true, false);
+}
+EXPORT_SYMBOL(blk_mq_requeue_request);
+
 struct request *blk_mq_tag_to_rq(struct blk_mq_tags *tags, unsigned int tag)
 {
  return tags->rqs[tag];
@@ -602,7 +616,7 @@ static void __blk_mq_run_hw_queue(struct blk_mq_hw_ctx *hctx)
     * time
     */
    list_add(&rq->queuelist, &rq_list);
-   blk_mq_requeue_request(rq);
+   __blk_mq_requeue_request(rq);
    break;
   default:
    pr_err("blk-mq: bad return on queue: %d\n", ret);
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index bcef2c5..b1cb303 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -153,6 +153,8 @@ void blk_mq_free_single_hw_queue(struct blk_mq_hw_ctx *, unsigned int);
 void blk_mq_end_io(struct request *rq, int error);
 void __blk_mq_end_io(struct request *rq, int error);
 
+void blk_mq_requeue_request(struct request *rq);
+
 void blk_mq_complete_request(struct request *rq);
 
 void blk_mq_stop_hw_queue(struct blk_mq_hw_ctx *hctx);
-- 
1.7.1