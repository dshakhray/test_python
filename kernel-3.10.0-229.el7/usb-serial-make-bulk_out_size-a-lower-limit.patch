From bb447298a3b8e0d576adaaf7566305aabc8d62ac Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:07:07 -0400
Subject: [usb] serial: make bulk_out_size a lower limit

Message-id: <1410887463-20674-356-git-send-email-dzickus@redhat.com>
Patchwork-id: 95635
O-Subject: [RHEL7 PATCH 355/591] USB: serial: make bulk_out_size a lower limit
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 5083fd7bdfe6760577235a724cf6dccae13652c2
Author: Johan Hovold <jhovold@gmail.com>
Date:   Wed Mar 12 19:09:38 2014 +0100

    USB: serial: make bulk_out_size a lower limit

    Drivers are allowed to override the default bulk-out buffer size
    (endpoint maximum packet size) in order to increase throughput, but it
    does not make much sense to allow buffers smaller than the default.

    Note that this is already how bulk_in_size is defined.

    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/usb-serial.c b/drivers/usb/serial/usb-serial.c
index 7c9dc28..c68fc9f 100644
--- a/drivers/usb/serial/usb-serial.c
+++ b/drivers/usb/serial/usb-serial.c
@@ -923,9 +923,8 @@ static int usb_serial_probe(struct usb_interface *interface,
   port = serial->port[i];
   if (kfifo_alloc(&port->write_fifo, PAGE_SIZE, GFP_KERNEL))
    goto probe_error;
-  buffer_size = serial->type->bulk_out_size;
-  if (!buffer_size)
-   buffer_size = usb_endpoint_maxp(endpoint);
+  buffer_size = max_t(int, serial->type->bulk_out_size,
+      usb_endpoint_maxp(endpoint));
   port->bulk_out_size = buffer_size;
   port->bulk_out_endpointAddress = endpoint->bEndpointAddress;
 
diff --git a/include/linux/usb/serial.h b/include/linux/usb/serial.h
index 704a1ab..9bb547c 100644
--- a/include/linux/usb/serial.h
+++ b/include/linux/usb/serial.h
@@ -190,7 +190,8 @@ static inline void usb_set_serial_data(struct usb_serial *serial, void *data)
  * @num_ports: the number of different ports this device will have.
  * @bulk_in_size: minimum number of bytes to allocate for bulk-in buffer
  * (0 = end-point size)
- * @bulk_out_size: bytes to allocate for bulk-out buffer (0 = end-point size)
+ * @bulk_out_size: minimum number of bytes to allocate for bulk-out buffer
+ * (0 = end-point size)
  * @calc_num_ports: pointer to a function to determine how many ports this
  * device has dynamically.  It will be called after the probe()
  * callback is called, but before attach()
-- 
1.7.1