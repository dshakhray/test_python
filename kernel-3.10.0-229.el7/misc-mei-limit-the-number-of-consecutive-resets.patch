From da6cef273ccceb78fa63ba5bc44a34acc28b36ba Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 2 May 2014 14:37:09 -0400
Subject: [misc] mei: limit the number of consecutive resets

Message-id: <1399041470-21330-37-git-send-email-prarit@redhat.com>
Patchwork-id: 79324
O-Subject: [RHEL7.1 PATCH BZ 1088953 36/77] mei: limit the number of consecutive resets
Bugzilla: 1088953
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit 6adb8efb024a7e413b93b22848fc13395b1a438a
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Sun Jan 12 00:36:10 2014 +0200

    mei: limit the number of consecutive resets

    give up reseting after 3 unsuccessful tries

    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Cc: Dean Nelson <dnelson@redhat.com>
Cc: Stefan Assmann <sassmann@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/client.c b/drivers/misc/mei/client.c
index 4f268a3..1ee2b94 100644
--- a/drivers/misc/mei/client.c
+++ b/drivers/misc/mei/client.c
@@ -370,6 +370,7 @@ void mei_host_client_init(struct work_struct *work)
  }
 
  dev->dev_state = MEI_DEV_ENABLED;
+ dev->reset_count = 0;
 
  mutex_unlock(&dev->device_lock);
 }
diff --git a/drivers/misc/mei/init.c b/drivers/misc/mei/init.c
index 79a54e5..86f8271 100644
--- a/drivers/misc/mei/init.c
+++ b/drivers/misc/mei/init.c
@@ -89,6 +89,13 @@ int mei_reset(struct mei_device *dev)
  interrupts_enabled = state != MEI_DEV_POWER_DOWN;
  dev->dev_state = MEI_DEV_RESETTING;
 
+ dev->reset_count++;
+ if (dev->reset_count > MEI_MAX_CONSEC_RESET) {
+  dev_err(&dev->pdev->dev, "reset: reached maximal consecutive resets: disabling the device\n");
+  dev->dev_state = MEI_DEV_DISABLED;
+  return -ENODEV;
+ }
+
  ret = mei_hw_reset(dev, interrupts_enabled);
  /* fall through and remove the sw state even if hw reset has failed */
 
@@ -169,6 +176,7 @@ int mei_start(struct mei_device *dev)
  dev_dbg(&dev->pdev->dev, "reset in start the mei device.\n");
 
  dev->dev_state = MEI_DEV_INITIALIZING;
+ dev->reset_count = 0;
  mei_reset(dev);
 
  if (dev->dev_state == MEI_DEV_DISABLED) {
@@ -224,6 +232,7 @@ int mei_restart(struct mei_device *dev)
  mei_clear_interrupts(dev);
 
  dev->dev_state = MEI_DEV_POWER_UP;
+ dev->reset_count = 0;
 
  err = mei_reset(dev);
 
@@ -285,6 +294,7 @@ void mei_device_init(struct mei_device *dev)
  init_waitqueue_head(&dev->wait_recvd_msg);
  init_waitqueue_head(&dev->wait_stop_wd);
  dev->dev_state = MEI_DEV_INITIALIZING;
+ dev->reset_count = 0;
 
  mei_io_list_init(&dev->read_list);
  mei_io_list_init(&dev->write_list);
diff --git a/drivers/misc/mei/mei_dev.h b/drivers/misc/mei/mei_dev.h
index 0e60c34..85d2a1a 100644
--- a/drivers/misc/mei/mei_dev.h
+++ b/drivers/misc/mei/mei_dev.h
@@ -66,6 +66,11 @@ extern const u8 mei_wd_state_independence_msg[3][4];
 #define MEI_CLIENTS_MAX 256
 
 /*
+ * maximum number of consecutive resets
+ */
+#define MEI_MAX_CONSEC_RESET  3
+
+/*
  * Number of File descriptors/handles
  * that can be opened to the driver.
  *
@@ -333,6 +338,7 @@ struct mei_cl_device {
 /**
  * struct mei_device -  MEI private device struct
 
+ * @reset_count - limits the number of consecutive resets
  * @hbm_state - state of host bus message protocol
  * @mem_addr - mem mapped base register address
 
@@ -376,6 +382,7 @@ struct mei_device {
  /*
   * mei device  states
   */
+ unsigned long reset_count;
  enum mei_dev_state dev_state;
  enum mei_hbm_state hbm_state;
  u16 init_clients_timer;
-- 
1.7.1