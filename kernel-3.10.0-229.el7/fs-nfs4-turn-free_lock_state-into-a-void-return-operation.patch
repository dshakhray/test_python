From 225bd9d18c9584c7a7222f832c119acd6ca4042f Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:19:46 -0400
Subject: [fs] nfs4: turn free_lock_state into a void return operation

Message-id: <1411050057-12417-24-git-send-email-steved@redhat.com>
Patchwork-id: 96201
O-Subject: [RHEL7.1 PATCH 23/94] nfs4: turn free_lock_state into a void return operation
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Jeff Layton <jlayton@poochiereds.net>

Nothing checks its return value.

Signed-off-by: Jeff Layton <jlayton@poochiereds.net>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: f1cdae87fcf286a897738874a1398e64e7225adf
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4_fs.h b/fs/nfs/nfs4_fs.h
index 75049bf..851bd8c 100644
--- a/fs/nfs/nfs4_fs.h
+++ b/fs/nfs/nfs4_fs.h
@@ -54,7 +54,7 @@ struct nfs4_minor_version_ops {
    const nfs4_stateid *);
  int (*find_root_sec)(struct nfs_server *, struct nfs_fh *,
    struct nfs_fsinfo *);
- int (*free_lock_state)(struct nfs_server *,
+ void (*free_lock_state)(struct nfs_server *,
    struct nfs4_lock_state *);
  const struct rpc_call_ops *call_sync_ops;
  const struct nfs4_state_recovery_ops *reboot_recovery_ops;
diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 0b287c9..6dbceb0 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -5942,7 +5942,8 @@ static const struct rpc_call_ops nfs4_release_lockowner_ops = {
  .rpc_release = nfs4_release_lockowner_release,
 };
 
-static int nfs4_release_lockowner(struct nfs_server *server, struct nfs4_lock_state *lsp)
+static void
+nfs4_release_lockowner(struct nfs_server *server, struct nfs4_lock_state *lsp)
 {
  struct nfs_release_lockowner_data *data;
  struct rpc_message msg = {
@@ -5950,11 +5951,11 @@ static int nfs4_release_lockowner(struct nfs_server *server, struct nfs4_lock_st
  };
 
  if (server->nfs_client->cl_mvops->minor_version != 0)
-  return -EINVAL;
+  return;
 
  data = kmalloc(sizeof(*data), GFP_NOFS);
  if (!data)
-  return -ENOMEM;
+  return;
  data->lsp = lsp;
  data->server = server;
  data->args.lock_owner.clientid = server->nfs_client->cl_clientid;
@@ -5965,7 +5966,6 @@ static int nfs4_release_lockowner(struct nfs_server *server, struct nfs4_lock_st
  msg.rpc_resp = &data->res;
  nfs4_init_sequence(&data->args.seq_args, &data->res.seq_res, 0);
  rpc_call_async(server->client, &msg, 0, &nfs4_release_lockowner_ops, data);
- return 0;
 }
 
 #define XATTR_NAME_NFSV4_ACL "system.nfs4_acl"
@@ -8252,7 +8252,8 @@ static int nfs41_free_stateid(struct nfs_server *server,
  return ret;
 }
 
-static int nfs41_free_lock_state(struct nfs_server *server, struct nfs4_lock_state *lsp)
+static void
+nfs41_free_lock_state(struct nfs_server *server, struct nfs4_lock_state *lsp)
 {
  struct rpc_task *task;
  struct rpc_cred *cred = lsp->ls_state->owner->so_cred;
@@ -8260,9 +8261,8 @@ static int nfs41_free_lock_state(struct nfs_server *server, struct nfs4_lock_sta
  task = _nfs41_free_stateid(server, &lsp->ls_stateid, cred, false);
  nfs4_free_lock_state(server, lsp);
  if (IS_ERR(task))
-  return PTR_ERR(task);
+  return;
  rpc_put_task(task);
- return 0;
 }
 
 static bool nfs41_match_stateid(const nfs4_stateid *s1,
-- 
1.7.1