From 6591b56132573dacf4196c2689e4b48e7a760f4c Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:33 -0400
Subject: [cpufreq] Introduce new relation for freq selection

Message-id: <1409235879-1283-180-git-send-email-prarit@redhat.com>
Patchwork-id: 89470
O-Subject: [RHEL7.1 PATCH BZ 1134639 179/185] cpufreq: Introduce new relation for freq selection
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 5b0c0b16d48d20e26859907df4dd449e3b3c7f4c
Author: Stratos Karafotis <stratosk@semaphore.gr>
Date:   Mon Jun 30 19:59:33 2014 +0300

    cpufreq: Introduce new relation for freq selection

    Introduce CPUFREQ_RELATION_C for frequency selection.
    It selects the frequency with the minimum euclidean distance to target.
    In case of equal distance between 2 frequencies, it will select the
    greater frequency.

    Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/freq_table.c b/drivers/cpufreq/freq_table.c
index 1632981..df14766 100644
--- a/drivers/cpufreq/freq_table.c
+++ b/drivers/cpufreq/freq_table.c
@@ -117,7 +117,7 @@ int cpufreq_frequency_table_target(struct cpufreq_policy *policy,
   .frequency = 0,
  };
  struct cpufreq_frequency_table *pos;
- unsigned int freq, i = 0;
+ unsigned int freq, diff, i = 0;
 
  pr_debug("request for target %u kHz (relation: %u) for cpu %u\n",
      target_freq, relation, policy->cpu);
@@ -127,6 +127,7 @@ int cpufreq_frequency_table_target(struct cpufreq_policy *policy,
   suboptimal.frequency = ~0;
   break;
  case CPUFREQ_RELATION_L:
+ case CPUFREQ_RELATION_C:
   optimal.frequency = ~0;
   break;
  }
@@ -168,6 +169,15 @@ int cpufreq_frequency_table_target(struct cpufreq_policy *policy,
     }
    }
    break;
+  case CPUFREQ_RELATION_C:
+   diff = abs(freq - target_freq);
+   if (diff < optimal.frequency ||
+       (diff == optimal.frequency &&
+        freq > table[optimal.driver_data].frequency)) {
+    optimal.frequency = diff;
+    optimal.driver_data = i;
+   }
+   break;
   }
  }
  if (optimal.driver_data > i) {
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index 3c06510..0c6cbe6 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -256,6 +256,7 @@ static inline void cpufreq_resume(void) {}
 
 #define CPUFREQ_RELATION_L 0  /* lowest frequency at or above target */
 #define CPUFREQ_RELATION_H 1  /* highest frequency below or at target */
+#define CPUFREQ_RELATION_C 2  /* closest frequency to target */
 
 struct freq_attr;
 
-- 
1.7.1