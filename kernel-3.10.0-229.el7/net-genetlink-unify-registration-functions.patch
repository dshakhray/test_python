From 5e38fc8fc1cc68bc9e34f4efe070b7a6abe9f4e3 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:26:52 -0400
Subject: [net] genetlink: unify registration functions

Message-id: <7b0058c0c4756eceafd998816f6a6e18f80dce01.1410528958.git.jbenc@redhat.com>
Patchwork-id: 93959
O-Subject: [RHEL7.1 net PATCH 10/23] genetlink: unify registration functions
Bugzilla: 1140656
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140656
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit 568508aa0724cc39bcf7d3d8001bd27a45609800
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Nov 15 14:19:08 2013 +0100

    genetlink: unify registration functions

    Now that the ops assignment is just two variables rather than a
    long list iteration etc., there's no reason to separately export
    __genl_register_family() and __genl_register_family_with_ops().

    Unify the two functions into __genl_register_family() and make
    genl_register_family_with_ops() call it after assigning the ops.

    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/genetlink.h b/include/net/genetlink.h
index d7c88fa..4d43ddd 100644
--- a/include/net/genetlink.h
+++ b/include/net/genetlink.h
@@ -140,14 +140,34 @@ static inline int genl_register_family(struct genl_family *family)
  return __genl_register_family(family);
 }
 
-int __genl_register_family_with_ops(struct genl_family *family,
-        const struct genl_ops *ops, size_t n_ops);
-
+/**
+ * genl_register_family_with_ops - register a generic netlink family with ops
+ * @family: generic netlink family
+ * @ops: operations to be registered
+ * @n_ops: number of elements to register
+ *
+ * Registers the specified family and operations from the specified table.
+ * Only one family may be registered with the same family name or identifier.
+ *
+ * The family id may equal GENL_ID_GENERATE causing an unique id to
+ * be automatically generated and assigned.
+ *
+ * Either a doit or dumpit callback must be specified for every registered
+ * operation or the function will fail. Only one operation structure per
+ * command identifier may be registered.
+ *
+ * See include/net/genetlink.h for more documenation on the operations
+ * structure.
+ *
+ * Return 0 on success or a negative error code.
+ */
 static inline int genl_register_family_with_ops(struct genl_family *family,
  const struct genl_ops *ops, size_t n_ops)
 {
  family->module = THIS_MODULE;
- return __genl_register_family_with_ops(family, ops, n_ops);
+ family->ops = ops;
+ family->n_ops = n_ops;
+ return __genl_register_family(family);
 }
 
 int genl_unregister_family(struct genl_family *family);
diff --git a/net/netlink/genetlink.c b/net/netlink/genetlink.c
index 7289172..339dd72 100644
--- a/net/netlink/genetlink.c
+++ b/net/netlink/genetlink.c
@@ -283,12 +283,18 @@ static void genl_unregister_mc_groups(struct genl_family *family)
   __genl_unregister_mc_group(family, grp);
 }
 
-static int genl_validate_add_ops(struct genl_family *family,
-     const struct genl_ops *ops,
-     unsigned int n_ops)
+static int genl_validate_ops(struct genl_family *family)
 {
+ const struct genl_ops *ops = family->ops;
+ unsigned int n_ops = family->n_ops;
  int i, j;
 
+ if (WARN_ON(n_ops && !ops))
+  return -EINVAL;
+
+ if (!n_ops)
+  return 0;
+
  for (i = 0; i < n_ops; i++) {
   if (ops[i].dumpit == NULL && ops[i].doit == NULL)
    return -EINVAL;
@@ -313,6 +319,9 @@ static int genl_validate_add_ops(struct genl_family *family,
  * The family id may equal GENL_ID_GENERATE causing an unique id to
  * be automatically generated and assigned.
  *
+ * The family's ops array must already be assigned, you can use the
+ * genl_register_family_with_ops() helper function.
+ *
  * Return 0 on success or a negative error code.
  */
 int __genl_register_family(struct genl_family *family)
@@ -325,6 +334,10 @@ int __genl_register_family(struct genl_family *family)
  if (family->id > GENL_MAX_ID)
   goto errout;
 
+ err = genl_validate_ops(family);
+ if (err)
+  return err;
+
  INIT_LIST_HEAD(&family->mcast_groups);
 
  genl_lock_all();
@@ -373,40 +386,6 @@ errout:
 EXPORT_SYMBOL(__genl_register_family);
 
 /**
- * __genl_register_family_with_ops - register a generic netlink family
- * @family: generic netlink family
- * @ops: operations to be registered
- * @n_ops: number of elements to register
- *
- * Registers the specified family and operations from the specified table.
- * Only one family may be registered with the same family name or identifier.
- *
- * The family id may equal GENL_ID_GENERATE causing an unique id to
- * be automatically generated and assigned.
- *
- * Either a doit or dumpit callback must be specified for every registered
- * operation or the function will fail. Only one operation structure per
- * command identifier may be registered.
- *
- * See include/net/genetlink.h for more documenation on the operations
- * structure.
- *
- * Return 0 on success or a negative error code.
- */
-int __genl_register_family_with_ops(struct genl_family *family,
- const struct genl_ops *ops, size_t n_ops)
-{
- int err;
-
- err = genl_validate_add_ops(family, ops, n_ops);
- if (err)
-  return err;
-
- return __genl_register_family(family);
-}
-EXPORT_SYMBOL(__genl_register_family_with_ops);
-
-/**
  * genl_unregister_family - unregister generic netlink family
  * @family: generic netlink family
  *
-- 
1.7.1