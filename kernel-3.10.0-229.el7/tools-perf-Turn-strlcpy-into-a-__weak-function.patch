From 31bc22c94a34f80b141695fa42f39ca83a3f5d71 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:23:52 -0400
Subject: [tools] perf: Turn strlcpy() into a __weak function

Message-id: <1408462094-14194-64-git-send-email-jolsa@redhat.com>
Patchwork-id: 88146
O-Subject: [PATCH RHEL7.1 BZ1131394 063/325] tools/perf: Turn strlcpy() into a __weak function
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit fb1c9185e36cf9c616ac15f54e54a01f052672bd
Author: Ingo Molnar <mingo@kernel.org>
Date: Tue Oct 1 13:26:13 2013 +0200

description
===========
The strlcpy() feature check slows every build unnecessarily - so make it
a __weak function so it does not have to be auto-detected.

If the libc (or any other library) has an strlcpy() implementation it will
be used - otherwise our fallback is active.
---
 delete mode 100644 tools/perf/config/feature-checks/test-strlcpy.c

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/config/Makefile b/tools/perf/config/Makefile
index c0c8344..3207c25 100644
--- a/tools/perf/config/Makefile
+++ b/tools/perf/config/Makefile
@@ -121,7 +121,6 @@ FEATURE_TESTS =    \
  libperl    \
  libpython   \
  libpython-version  \
- strlcpy    \
  libbfd    \
  on-exit    \
  backtrace   \
@@ -436,12 +435,6 @@ else
   endif
 endif
 
-ifndef NO_STRLCPY
-  ifeq ($(feature-strlcpy), 1)
-    CFLAGS += -DHAVE_STRLCPY_SUPPORT
-  endif
-endif
-
 ifndef NO_ON_EXIT
   ifeq ($(feature-on-exit), 1)
     CFLAGS += -DHAVE_ON_EXIT_SUPPORT
diff --git a/tools/perf/config/feature-checks/Makefile b/tools/perf/config/feature-checks/Makefile
index 0e4dbc2..c65bdac 100644
--- a/tools/perf/config/feature-checks/Makefile
+++ b/tools/perf/config/feature-checks/Makefile
@@ -19,7 +19,6 @@ FILES=     \
  test-libperl   \
  test-libpython   \
  test-libpython-version  \
- test-strlcpy   \
  test-libbfd   \
  test-on-exit   \
  test-backtrace   \
@@ -116,9 +115,6 @@ test-libpython:
 test-libpython-version:
  $(BUILD) $(FLAGS_PYTHON_EMBED)
 
-test-strlcpy:
- $(BUILD)
-
 test-libbfd:
  $(BUILD) -DPACKAGE='perf' -DPACKAGE=perf -lbfd -ldl
 
diff --git a/tools/perf/config/feature-checks/test-strlcpy.c b/tools/perf/config/feature-checks/test-strlcpy.c
deleted file mode 100644
index 4a6b6ff..0000000
--- a/tools/perf/config/feature-checks/test-strlcpy.c
+++ /dev/null
@@ -1,8 +0,0 @@
-#include <stdlib.h>
-extern size_t strlcpy(char *dest, const char *src, size_t size);
-
-int main(void)
-{
- strlcpy(NULL, NULL, 0);
- return 0;
-}
diff --git a/tools/perf/util/cache.h b/tools/perf/util/cache.h
index 442953c..7b176dd 100644
--- a/tools/perf/util/cache.h
+++ b/tools/perf/util/cache.h
@@ -70,8 +70,7 @@ extern char *perf_path(const char *fmt, ...) __attribute__((format (printf, 1, 2
 extern char *perf_pathdup(const char *fmt, ...)
  __attribute__((format (printf, 1, 2)));
 
-#ifndef HAVE_STRLCPY_SUPPORT
+/* Matches the libc/libbsd function attribute so we declare this unconditionally: */
 extern size_t strlcpy(char *dest, const char *src, size_t size);
-#endif
 
 #endif /* __PERF_CACHE_H */
diff --git a/tools/perf/util/include/linux/compiler.h b/tools/perf/util/include/linux/compiler.h
index bef4d3d..b003ad7 100644
--- a/tools/perf/util/include/linux/compiler.h
+++ b/tools/perf/util/include/linux/compiler.h
@@ -23,4 +23,8 @@
 # define __force
 #endif
 
+#ifndef __weak
+# define __weak   __attribute__((weak))
+#endif
+
 #endif
diff --git a/tools/perf/util/path.c b/tools/perf/util/path.c
index f395874..5d13cb4 100644
--- a/tools/perf/util/path.c
+++ b/tools/perf/util/path.c
@@ -22,19 +22,23 @@ static const char *get_perf_dir(void)
  return ".";
 }
 
-#ifndef HAVE_STRLCPY_SUPPORT
-size_t strlcpy(char *dest, const char *src, size_t size)
+/*
+ * If libc has strlcpy() then that version will override this
+ * implementation:
+ */
+size_t __weak strlcpy(char *dest, const char *src, size_t size)
 {
  size_t ret = strlen(src);
 
  if (size) {
   size_t len = (ret >= size) ? size - 1 : ret;
+
   memcpy(dest, src, len);
   dest[len] = '\0';
  }
+
  return ret;
 }
-#endif
 
 static char *get_pathname(void)
 {
-- 
1.7.1