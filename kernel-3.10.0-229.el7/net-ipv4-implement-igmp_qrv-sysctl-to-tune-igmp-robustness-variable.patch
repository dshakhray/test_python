From 9450d52f1e968f6ccf3811ddd4b958eeeb5d3d18 Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Fri, 5 Sep 2014 15:06:10 -0400
Subject: [net] ipv4: implement igmp_qrv sysctl to tune igmp robustness variable

Message-id: <6b0a99c4e14210de6e7985026e247c4f684d54ac.1409929553.git.hannes@redhat.com>
Patchwork-id: 91461
O-Subject: [PATCH RHEL7.1 net 2/2] ipv4: implement igmp_qrv sysctl to tune igmp robustness variable
Bugzilla: 1110118
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110118
Upstream Status: a9fe8e29945d56f35235a3a0fba99b4cf181d211
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7923537
Tested on beaker instances with multicast listener and interface enabling.

Upstream Commit:
commit a9fe8e29945d56f35235a3a0fba99b4cf181d211
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Tue Sep 2 15:49:26 2014 +0200

    ipv4: implement igmp_qrv sysctl to tune igmp robustness variable

    As in IPv6 people might increase the igmp query robustness variable to
    make sure unsolicited state change reports aren't lost on the network. Add
    and document this new knob to igmp code.

    RFCs allow tuning this parameter back to first IGMP RFC, so we also use
    this setting for all counters, including source specific multicast.

    Also take over sysctl value when upping the interface and don't reuse
    the last one seen on the interface.

    Cc: Flavio Leitner <fbl@redhat.com>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Acked-by: Flavio Leitner <fbl@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/networking/ip-sysctl.txt b/Documentation/networking/ip-sysctl.txt
index a95ffab..c4f50cd 100644
--- a/Documentation/networking/ip-sysctl.txt
+++ b/Documentation/networking/ip-sysctl.txt
@@ -785,6 +785,11 @@ igmp_max_memberships - INTEGER
 
  conf/all/*   is special, changes the settings for all interfaces
 
+igmp_qrv - INTEGER
+  Controls the IGMP query robustness variable (see RFC2236 8.1).
+  Default: 2 (as specified by RFC2236 8.1)
+  Minimum: 1 (as specified by RFC6636 4.5)
+
 log_martians - BOOLEAN
  Log packets with impossible addresses to kernel log.
  log_martians for the interface will be enabled if at least one of
diff --git a/include/linux/igmp.h b/include/linux/igmp.h
index d88f60f..753fa14 100644
--- a/include/linux/igmp.h
+++ b/include/linux/igmp.h
@@ -39,6 +39,7 @@ static inline struct igmpv3_query *
 
 extern int sysctl_igmp_max_memberships;
 extern int sysctl_igmp_max_msf;
+extern int sysctl_igmp_qrv;
 
 struct ip_sf_socklist {
  unsigned int  sl_max;
diff --git a/net/ipv4/igmp.c b/net/ipv4/igmp.c
index 248c83d..9feae66 100644
--- a/net/ipv4/igmp.c
+++ b/net/ipv4/igmp.c
@@ -116,7 +116,7 @@
 #define IGMP_V2_Router_Present_Timeout  (400*HZ)
 #define IGMP_Unsolicited_Report_Interval (10*HZ)
 #define IGMP_Query_Response_Interval  (10*HZ)
-#define IGMP_Unsolicited_Report_Count  2
+#define IGMP_Query_Robustness_Variable  2
 
 
 #define IGMP_Initial_Report_Delay  (1)
@@ -731,8 +731,7 @@ static void igmp_ifc_event(struct in_device *in_dev)
 {
  if (IGMP_V1_SEEN(in_dev) || IGMP_V2_SEEN(in_dev))
   return;
- in_dev->mr_ifc_count = in_dev->mr_qrv ? in_dev->mr_qrv :
-  IGMP_Unsolicited_Report_Count;
+ in_dev->mr_ifc_count = in_dev->mr_qrv ?: sysctl_igmp_qrv;
  igmp_ifc_start_timer(in_dev, 1);
 }
 
@@ -1069,8 +1068,7 @@ static void igmpv3_add_delrec(struct in_device *in_dev, struct ip_mc_list *im)
  pmc->interface = im->interface;
  in_dev_hold(in_dev);
  pmc->multiaddr = im->multiaddr;
- pmc->crcount = in_dev->mr_qrv ? in_dev->mr_qrv :
-  IGMP_Unsolicited_Report_Count;
+ pmc->crcount = in_dev->mr_qrv ?: sysctl_igmp_qrv;
  pmc->sfmode = im->sfmode;
  if (pmc->sfmode == MCAST_INCLUDE) {
   struct ip_sf_list *psf;
@@ -1209,8 +1207,7 @@ static void igmp_group_added(struct ip_mc_list *im)
  }
  /* else, v3 */
 
- im->crcount = in_dev->mr_qrv ? in_dev->mr_qrv :
-  IGMP_Unsolicited_Report_Count;
+ im->crcount = in_dev->mr_qrv ?: sysctl_igmp_qrv;
  igmp_ifc_event(in_dev);
 #endif
 }
@@ -1254,7 +1251,7 @@ void ip_mc_inc_group(struct in_device *in_dev, __be32 addr)
  spin_lock_init(&im->lock);
 #ifdef CONFIG_IP_MULTICAST
  setup_timer(&im->timer, &igmp_timer_expire, (unsigned long)im);
- im->unsolicit_count = IGMP_Unsolicited_Report_Count;
+ im->unsolicit_count = sysctl_igmp_qrv;
 #endif
 
  im->next_rcu = in_dev->mc_list;
@@ -1393,7 +1390,7 @@ void ip_mc_init_dev(struct in_device *in_dev)
  in_dev->mc_count     = 0;
  setup_timer(&in_dev->mr_ifc_timer, igmp_ifc_timer_expire,
    (unsigned long)in_dev);
- in_dev->mr_qrv = IGMP_Unsolicited_Report_Count;
+ in_dev->mr_qrv = sysctl_igmp_qrv;
 #endif
 
  spin_lock_init(&in_dev->mc_tomb_lock);
@@ -1407,6 +1404,9 @@ void ip_mc_up(struct in_device *in_dev)
 
  ASSERT_RTNL();
 
+#ifdef CONFIG_IP_MULTICAST
+ in_dev->mr_qrv = sysctl_igmp_qrv;
+#endif
  ip_mc_inc_group(in_dev, IGMP_ALL_HOSTS);
 
  for_each_pmc_rtnl(in_dev, pmc)
@@ -1473,7 +1473,9 @@ static struct in_device *ip_mc_find_dev(struct net *net, struct ip_mreqn *imr)
  */
 int sysctl_igmp_max_memberships __read_mostly = IP_MAX_MEMBERSHIPS;
 int sysctl_igmp_max_msf __read_mostly = IP_MAX_MSF;
-
+#ifdef CONFIG_IP_MULTICAST
+int sysctl_igmp_qrv __read_mostly = IGMP_Query_Robustness_Variable;
+#endif
 
 static int ip_mc_del1_src(struct ip_mc_list *pmc, int sfmode,
  __be32 *psfsrc)
@@ -1508,8 +1510,7 @@ static int ip_mc_del1_src(struct ip_mc_list *pmc, int sfmode,
 #ifdef CONFIG_IP_MULTICAST
   if (psf->sf_oldin &&
       !IGMP_V1_SEEN(in_dev) && !IGMP_V2_SEEN(in_dev)) {
-   psf->sf_crcount = in_dev->mr_qrv ? in_dev->mr_qrv :
-    IGMP_Unsolicited_Report_Count;
+   psf->sf_crcount = in_dev->mr_qrv ?: sysctl_igmp_qrv;
    psf->sf_next = pmc->tomb;
    pmc->tomb = psf;
    rv = 1;
@@ -1572,8 +1573,7 @@ static int ip_mc_del_src(struct in_device *in_dev, __be32 *pmca, int sfmode,
   /* filter mode change */
   pmc->sfmode = MCAST_INCLUDE;
 #ifdef CONFIG_IP_MULTICAST
-  pmc->crcount = in_dev->mr_qrv ? in_dev->mr_qrv :
-   IGMP_Unsolicited_Report_Count;
+  pmc->crcount = in_dev->mr_qrv ?: sysctl_igmp_qrv;
   in_dev->mr_ifc_count = pmc->crcount;
   for (psf=pmc->sources; psf; psf = psf->sf_next)
    psf->sf_crcount = 0;
@@ -1751,8 +1751,7 @@ static int ip_mc_add_src(struct in_device *in_dev, __be32 *pmca, int sfmode,
 #ifdef CONFIG_IP_MULTICAST
   /* else no filters; keep old mode for reports */
 
-  pmc->crcount = in_dev->mr_qrv ? in_dev->mr_qrv :
-   IGMP_Unsolicited_Report_Count;
+  pmc->crcount = in_dev->mr_qrv ?: sysctl_igmp_qrv;
   in_dev->mr_ifc_count = pmc->crcount;
   for (psf=pmc->sources; psf; psf = psf->sf_next)
    psf->sf_crcount = 0;
diff --git a/net/ipv4/sysctl_net_ipv4.c b/net/ipv4/sysctl_net_ipv4.c
index 6900b8b..4ad2fe4 100644
--- a/net/ipv4/sysctl_net_ipv4.c
+++ b/net/ipv4/sysctl_net_ipv4.c
@@ -502,6 +502,16 @@ static struct ctl_table ipv4_table[] = {
   .mode  = 0644,
   .proc_handler = proc_dointvec
  },
+#ifdef CONFIG_IP_MULTICAST
+ {
+  .procname = "igmp_qrv",
+  .data  = &sysctl_igmp_qrv,
+  .maxlen  = sizeof(int),
+  .mode  = 0644,
+  .proc_handler = proc_dointvec_minmax,
+  .extra1  = &one
+ },
+#endif
  {
   .procname = "inet_peer_threshold",
   .data  = &inet_peer_threshold,
-- 
1.7.1