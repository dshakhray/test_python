From bfc48ab8cf47b21f72d8087efc24a04a7fa8fe16 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Tue, 30 Sep 2014 00:32:05 -0400
Subject: [acpi] bind: Rework struct acpi_bus_type

Message-id: <1412037125-12706-1-git-send-email-prarit@redhat.com>
Patchwork-id: 96796
O-Subject: Re: [RHEL7.1 PATCH BZ 1141846 12/61] ACPI / bind: Rework struct acpi_bus_type [v4]
Bugzilla: 1141846
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit e3f02c5228c4b600abf6ca243301176f25553bd5
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 29 16:27:34 2013 +0100

    ACPI / bind: Rework struct acpi_bus_type

    Replace the .find_device function pointer in struct acpi_bus_type
    with a new one, .find_companion, that is supposed to point to a
    function returning struct acpi_device pointer (instead of an int)
    and takes one argument (instead of two).  This way the role of
    this callback is more clear and the implementation of it can
    be more straightforward.

    Update all of the users of struct acpi_bus_type (PCI, PNP/ACPI and
    USB) to reflect the structure change.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Lan Tianyu <tianyu.lan@intel.com> # for USB/ACPI

[v2]: set portnum to zero, untab raw line, dzickus
[v3]: clarification from dzickus on change request
[v4]: additional change from dzickus to match upstream

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/glue.c b/drivers/acpi/glue.c
index 543c2c5..67d95f3 100644
--- a/drivers/acpi/glue.c
+++ b/drivers/acpi/glue.c
@@ -37,7 +37,7 @@ int register_acpi_bus_type(struct acpi_bus_type *type)
 {
  if (acpi_disabled)
   return -ENODEV;
- if (type && type->match && type->find_device) {
+ if (type && type->match && type->find_companion) {
   down_write(&bus_type_sem);
   list_add_tail(&type->list, &bus_type_list);
   up_write(&bus_type_sem);
@@ -298,17 +298,19 @@ EXPORT_SYMBOL_GPL(acpi_unbind_one);
 static int acpi_platform_notify(struct device *dev)
 {
  struct acpi_bus_type *type = acpi_get_bus_type(dev);
- acpi_handle handle;
  int ret;
 
  ret = acpi_bind_one(dev, NULL);
  if (ret && type) {
-  ret = type->find_device(dev, &handle);
-  if (ret) {
+  struct acpi_device *adev;
+
+  adev = type->find_companion(dev);
+  if (!adev) {
    DBG("Unable to get handle for %s\n", dev_name(dev));
+   ret = -ENODEV;
    goto out;
   }
-  ret = acpi_bind_one(dev, handle);
+  ret = acpi_bind_one(dev, adev->handle);
   if (ret)
    goto out;
  }
diff --git a/drivers/pci/pci-acpi.c b/drivers/pci/pci-acpi.c
index ae2c1fa..b3a0995 100644
--- a/drivers/pci/pci-acpi.c
+++ b/drivers/pci/pci-acpi.c
@@ -307,10 +307,9 @@ void acpi_pci_remove_bus(struct pci_bus *bus)
 }
 
 /* ACPI bus type */
-static int acpi_pci_find_device(struct device *dev, acpi_handle *handle)
+static struct acpi_device *acpi_pci_find_companion(struct device *dev)
 {
  struct pci_dev *pci_dev = to_pci_dev(dev);
- struct acpi_device *adev;
  bool check_children;
  u64 addr;
 
@@ -323,13 +322,8 @@ static int acpi_pci_find_device(struct device *dev, acpi_handle *handle)
    || pci_dev->hdr_type == PCI_HEADER_TYPE_CARDBUS;
  /* Please ref to ACPI spec for the syntax of _ADR */
  addr = (PCI_SLOT(pci_dev->devfn) << 16) | PCI_FUNC(pci_dev->devfn);
- adev = acpi_find_child_device(ACPI_COMPANION(dev->parent), addr,
+ return acpi_find_child_device(ACPI_COMPANION(dev->parent), addr,
           check_children);
- if (adev) {
-  *handle = adev->handle;
-  return 0;
- }
- return -ENODEV;
 }
 
 static void pci_acpi_setup(struct device *dev)
@@ -369,7 +363,7 @@ static bool pci_acpi_bus_match(struct device *dev)
 static struct acpi_bus_type acpi_pci_bus = {
  .name = "PCI",
  .match = pci_acpi_bus_match,
- .find_device = acpi_pci_find_device,
+ .find_companion = acpi_pci_find_companion,
  .setup = pci_acpi_setup,
  .cleanup = pci_acpi_cleanup,
 };
diff --git a/drivers/pnp/pnpacpi/core.c b/drivers/pnp/pnpacpi/core.c
index b9c7f48..cb60473 100644
--- a/drivers/pnp/pnpacpi/core.c
+++ b/drivers/pnp/pnpacpi/core.c
@@ -341,20 +341,15 @@ static int __init acpi_pnp_match(struct device *dev, void *_pnp)
  return pnp->data == acpi;
 }
 
-static int __init acpi_pnp_find_device(struct device *dev, acpi_handle * handle)
+static struct acpi_device * __init acpi_pnp_find_companion(struct device *dev)
 {
- struct device *adev;
- struct acpi_device *acpi;
-
- adev = bus_find_device(&acpi_bus_type, NULL,
-          to_pnp_dev(dev), acpi_pnp_match);
- if (!adev)
-  return -ENODEV;
+ dev = bus_find_device(&acpi_bus_type, NULL, to_pnp_dev(dev),
+         acpi_pnp_match);
+ if (!dev)
+  return NULL;
 
- acpi = to_acpi_device(adev);
- *handle = acpi->handle;
- put_device(adev);
- return 0;
+ put_device(dev);
+ return to_acpi_device(dev);
 }
 
 /* complete initialization of a PNPACPI device includes having
@@ -368,7 +363,7 @@ static bool acpi_pnp_bus_match(struct device *dev)
 static struct acpi_bus_type __initdata acpi_pnp_bus = {
  .name      = "PNP",
  .match      = acpi_pnp_bus_match,
- .find_device = acpi_pnp_find_device,
+ .find_companion = acpi_pnp_find_companion,
 };
 
 int pnpacpi_disabled __initdata;
diff --git a/drivers/usb/core/usb-acpi.c b/drivers/usb/core/usb-acpi.c
index 75cbfbb..a42fa39 100644
--- a/drivers/usb/core/usb-acpi.c
+++ b/drivers/usb/core/usb-acpi.c
@@ -127,9 +127,10 @@ out:
  */
 #define USB_ACPI_LOCATION_VALID (1 << 31)
 
-static int usb_acpi_find_device(struct device *dev, acpi_handle *handle)
+static struct acpi_device *usb_acpi_find_companion(struct device *dev)
 {
  struct usb_device *udev;
+ struct acpi_device *adev;
  acpi_handle *parent_handle;
 
  /*
@@ -148,18 +149,16 @@ static int usb_acpi_find_device(struct device *dev, acpi_handle *handle)
  if (is_usb_device(dev)) {
   udev = to_usb_device(dev);
   if (udev->parent)
-   return -ENODEV;
+   return NULL;
 
   /* root hub is only child (_ADR=0) under its parent, the HC */
-  parent_handle = DEVICE_ACPI_HANDLE(dev->parent);
-  *handle = acpi_get_child(parent_handle, 0);
-  if (!*handle)
-   return -ENODEV;
-  return 0;
+  adev = ACPI_COMPANION(dev->parent);
+  return acpi_find_child_device(adev, 0, false);
  } else if (is_usb_port(dev)) {
   struct usb_port *port_dev = to_usb_port(dev);
   int port1 = port_dev->portnum;
   struct acpi_pld_info *pld;
+  acpi_handle *handle;
   acpi_status status;
 
   /* Get the struct usb_device point of port's hub */
@@ -175,35 +174,36 @@ static int usb_acpi_find_device(struct device *dev, acpi_handle *handle)
    int raw;
 
    raw = usb_hcd_find_raw_port_number(hcd, port1);
-   *handle = acpi_get_child(DEVICE_ACPI_HANDLE(&udev->dev),
-    raw);
-   if (!*handle)
-    return -ENODEV;
+   adev = acpi_find_child_device(ACPI_COMPANION(&udev->dev),
+     raw, false);
+   if (!adev)
+    return NULL;
   } else {
    parent_handle =
     usb_get_hub_port_acpi_handle(udev->parent,
     udev->portnum);
    if (!parent_handle)
-    return -ENODEV;
+    return NULL;
 
-   *handle = acpi_get_child(parent_handle, port1);
-   if (!*handle)
-    return -ENODEV;
+   acpi_bus_get_device(parent_handle, &adev);
+   adev = acpi_find_child_device(adev, port1, false);
+   if (!adev)
+    return NULL;
   }
+  handle = adev->handle;
   status = acpi_get_physical_device_location(handle, &pld);
   if (ACPI_FAILURE(status) || !pld)
-   return 0;
+   return adev;
 
   port_dev->location = USB_ACPI_LOCATION_VALID
    | pld->group_token << 8 | pld->group_position;
   port_dev->connect_type = usb_acpi_get_connect_type(handle, pld);
   ACPI_FREE(pld);
 
-  return 0;
- } else
-  return -ENODEV;
+  return adev;
+ }
 
- return 0;
+ return NULL;
 }
 
 static bool usb_acpi_bus_match(struct device *dev)
@@ -214,7 +214,7 @@ static bool usb_acpi_bus_match(struct device *dev)
 static struct acpi_bus_type usb_acpi_bus = {
  .name = "USB",
  .match = usb_acpi_bus_match,
- .find_device = usb_acpi_find_device,
+ .find_companion = usb_acpi_find_companion,
 };
 
 int usb_acpi_register(void)
diff --git a/include/acpi/acpi_bus.h b/include/acpi/acpi_bus.h
index a7fada9..e78eaca 100644
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@ -421,7 +421,7 @@ struct acpi_bus_type {
  struct list_head list;
  const char *name;
  bool (*match)(struct device *dev);
- int (*find_device) (struct device *, acpi_handle *);
+ struct acpi_device * (*find_companion)(struct device *);
  void (*setup)(struct device *);
  void (*cleanup)(struct device *);
 };
-- 
1.7.1