From 71eb269d78af2612f042db596a17ab0dbc1ae0fc Mon Sep 17 00:00:00 2001
From: Petr  Matousek <pmatouse@redhat.com>
Date: Mon, 22 Sep 2014 06:50:09 -0400
Subject: [virt] kvm: fix PIT timer race condition

Message-id: <20140922065009.GR19960@dhcp-25-225.brq.redhat.com>
Patchwork-id: 5232
O-Subject: [kernel team] [EMBARGOED RHEL7 kvm PATCH v2] kvm: fix PIT timer race condition
Bugzilla: 1144880
CVE: CVE-2014-3611
RH-Acked-by: Michael S. Tsirkin <mst@redhat.com>
RH-Acked-by: Laszlo Ersek <lersek@redhat.com>
RH-Acked-by: Paolo Bonzini <pbonzini@redhat.com>

CVE:          CVE-2014-3611
CVE / Top BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1144878
BZ:           https://bugzilla.redhat.com/show_bug.cgi?id=1144880
Upstream:     currently embargoed, same patch will be posted upstream
Brew build:   https://brewweb.devel.redhat.com/taskinfo?taskID=7996221
Testing:      kernel boots and I am able to run a guest; I was unable to
              trigger the condition via fuzzing the PIT I/O ports for a
              while, but the reporter was able to reproduce it on 3.10
              based kernel.

      From 202eea2f8e902bf6cfc036d76af5226d02a8fcaa Mon Sep 17 00:00:00 2001
      From: Andy Honig <ahonig@google.com>
      Date: Wed, 27 Aug 2014 14:42:54 -0700
      Subject: [PATCH RHEL7 KVM] KVM/x86: Improve thread safety in pit

      There's a race condition in the PIT emulation code in KVM.  In
      __kvm_migrate_pit_timer the pit_timer object is accessed without
      synchronization.  If the race condition occurs at the wrong time this
      can crash the host kernel.

      Signed-off-by: Andrew Honig <ahonig@google.com>

Signed-off-by: Petr Matousek <pmatouse@redhat.com>
---
v1 -> v2
 * the Signed-off-by tag fix

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/i8254.c b/arch/x86/kvm/i8254.c
index 518d864..298781d 100644
--- a/arch/x86/kvm/i8254.c
+++ b/arch/x86/kvm/i8254.c
@@ -262,8 +262,10 @@ void __kvm_migrate_pit_timer(struct kvm_vcpu *vcpu)
   return;
 
  timer = &pit->pit_state.timer;
+ mutex_lock(&pit->pit_state.lock);
  if (hrtimer_cancel(timer))
   hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
+ mutex_unlock(&pit->pit_state.lock);
 }
 
 static void destroy_pit_timer(struct kvm_pit *pit)
-- 
1.7.1