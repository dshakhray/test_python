From d75157baf1e7fc9d0e8c38d75c973f8a78981b87 Mon Sep 17 00:00:00 2001
From: George Beshers <gbeshers@redhat.com>
Date: Fri, 5 Sep 2014 05:25:48 -0400
Subject: [x86] uv/nmi: Fix Sparse warnings

Message-id: <20140905052548.846.420.sendpatchset@sgi-xe250-01.lab.bos.redhat.com>
Patchwork-id: 91395
O-Subject: [RHEL7.1 PATCH 8/9] x86/uv/nmi: Fix Sparse warnings
Bugzilla: 1138519
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

bz1138519: UV NMI cleanup to support perf tools
First Post

Brew Build: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7921941

Simple backport of:

    commit 74c93f9d39b556ff9ac2340d568ad5caf8446c65
    Author: Mike Travis <travis@sgi.com>
    Date:   Tue Jan 14 10:25:53 2014 -0600

 x86/uv/nmi: Fix Sparse warnings

 Make uv_register_nmi_notifier() and uv_handle_nmi_ping() static
 to address sparse warnings.

 Fix problem where uv_nmi_kexec_failed is unused when
 CONFIG_KEXEC is not defined.

 Signed-off-by: Mike Travis <travis@sgi.com>
 Reviewed-by: Hedi Berriche <hedi@sgi.com>
 Cc: Russ Anderson <rja@sgi.com>
 Cc: Jason Wessel <jason.wessel@windriver.com>
 Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
 Cc: Paul Mackerras <paulus@samba.org>
 Cc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>
 Link: http://lkml.kernel.org/r/20140114162551.480872353@asylum.americas.sgi.com
 Signed-off-by: Ingo Molnar <mingo@kernel.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/include/asm/uv/uv.h b/arch/x86/include/asm/uv/uv.h
index 6b964a0..062921e 100644
--- a/arch/x86/include/asm/uv/uv.h
+++ b/arch/x86/include/asm/uv/uv.h
@@ -12,7 +12,6 @@ extern enum uv_system_type get_uv_system_type(void);
 extern int is_uv_system(void);
 extern void uv_cpu_init(void);
 extern void uv_nmi_init(void);
-extern void uv_register_nmi_notifier(void);
 extern void uv_system_init(void);
 extern const struct cpumask *uv_flush_tlb_others(const struct cpumask *cpumask,
        struct mm_struct *mm,
@@ -26,7 +25,6 @@ static inline enum uv_system_type get_uv_system_type(void) { return UV_NONE; }
 static inline int is_uv_system(void) { return 0; }
 static inline void uv_cpu_init(void) { }
 static inline void uv_system_init(void) { }
-static inline void uv_register_nmi_notifier(void) { }
 static inline const struct cpumask *
 uv_flush_tlb_others(const struct cpumask *cpumask, struct mm_struct *mm,
       unsigned long start, unsigned long end, unsigned int cpu)
diff --git a/arch/x86/kernel/apic/x2apic_uv_x.c b/arch/x86/kernel/apic/x2apic_uv_x.c
index 17c1fca..c4de696 100644
--- a/arch/x86/kernel/apic/x2apic_uv_x.c
+++ b/arch/x86/kernel/apic/x2apic_uv_x.c
@@ -996,7 +996,6 @@ void __init uv_system_init(void)
  uv_nmi_setup();
  uv_cpu_init();
  uv_scir_register_cpu_notifier();
- uv_register_nmi_notifier();
  proc_mkdir("sgi_uv", NULL);
 
  /* register Legacy VGA I/O redirection handler */
diff --git a/arch/x86/platform/uv/uv_nmi.c b/arch/x86/platform/uv/uv_nmi.c
index 67c85dc..c48c8a6 100644
--- a/arch/x86/platform/uv/uv_nmi.c
+++ b/arch/x86/platform/uv/uv_nmi.c
@@ -74,7 +74,6 @@ static atomic_t uv_in_nmi;
 static atomic_t uv_nmi_cpu = ATOMIC_INIT(-1);
 static atomic_t uv_nmi_cpus_in_nmi = ATOMIC_INIT(-1);
 static atomic_t uv_nmi_slave_continue;
-static atomic_t uv_nmi_kexec_failed;
 static cpumask_var_t uv_nmi_cpu_mask;
 
 /* Values for uv_nmi_slave_continue */
@@ -504,6 +503,7 @@ static void uv_nmi_touch_watchdogs(void)
 }
 
 #if defined(CONFIG_KEXEC)
+static atomic_t uv_nmi_kexec_failed;
 static void uv_nmi_kdump(int cpu, int master, struct pt_regs *regs)
 {
  /* Call crash to dump system state */
@@ -634,7 +634,7 @@ int uv_handle_nmi(unsigned int reason, struct pt_regs *regs)
 /*
  * NMI handler for pulling in CPUs when perf events are grabbing our NMI
  */
-int uv_handle_nmi_ping(unsigned int reason, struct pt_regs *regs)
+static int uv_handle_nmi_ping(unsigned int reason, struct pt_regs *regs)
 {
  int ret;
 
@@ -651,7 +651,7 @@ int uv_handle_nmi_ping(unsigned int reason, struct pt_regs *regs)
  return ret;
 }
 
-void uv_register_nmi_notifier(void)
+static void uv_register_nmi_notifier(void)
 {
  if (register_nmi_handler(NMI_UNKNOWN, uv_handle_nmi, 0, "uv"))
   pr_warn("UV: NMI handler failed to register\n");
@@ -696,4 +696,5 @@ void uv_nmi_setup(void)
  }
  alloc_cpumask_var(&uv_nmi_cpu_mask, GFP_KERNEL);
  BUG_ON(!uv_nmi_cpu_mask);
+ uv_register_nmi_notifier();
 }
-- 
1.7.1