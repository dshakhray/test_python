From 7114f50c2993287863ccb380f483ef0f651aad82 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:37:05 -0400
Subject: [scsi] avoid taking host_lock in scsi_run_queue unless nessecary

Message-id: <1402670238-13916-138-git-send-email-snitzer@redhat.com>
Patchwork-id: 83865
O-Subject: [RHEL7.1 PATCH 137/150] scsi: avoid taking host_lock in scsi_run_queue unless nessecary
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Paolo Bonzini <pbonzini@redhat.com>

BZ: 1105204

Upstream commit 21a05df547dd0ac532d3a89e241dc504018eb881
Author: Christoph Hellwig <hch@infradead.org>
Date:   Thu Feb 20 14:20:54 2014 -0800

    [SCSI] avoid taking host_lock in scsi_run_queue unless nessecary

    If we don't have starved devices we don't need to take the host lock
    to iterate over them.  Also split the function up to be more clear.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index 4074edd..e208721 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -408,29 +408,12 @@ static inline int scsi_host_is_busy(struct Scsi_Host *shost)
  return 0;
 }
 
-/*
- * Function: scsi_run_queue()
- *
- * Purpose: Select a proper request queue to serve next
- *
- * Arguments: q - last request's queue
- *
- * Returns:     Nothing
- *
- * Notes: The previous command was completely finished, start
- *  a new one if possible.
- */
-static void scsi_run_queue(struct request_queue *q)
+static void scsi_starved_list_run(struct Scsi_Host *shost)
 {
- struct scsi_device *sdev = q->queuedata;
- struct Scsi_Host *shost;
  LIST_HEAD(starved_list);
+ struct scsi_device *sdev;
  unsigned long flags;
 
- shost = sdev->host;
- if (scsi_target(sdev)->single_lun)
-  scsi_single_lun_run(sdev);
-
  spin_lock_irqsave(shost->host_lock, flags);
  list_splice_init(&shost->starved_list, &starved_list);
 
@@ -482,6 +465,28 @@ static void scsi_run_queue(struct request_queue *q)
  /* put any unprocessed entries back */
  list_splice(&starved_list, &shost->starved_list);
  spin_unlock_irqrestore(shost->host_lock, flags);
+}
+
+/*
+ * Function:   scsi_run_queue()
+ *
+ * Purpose:    Select a proper request queue to serve next
+ *
+ * Arguments:  q       - last request's queue
+ *
+ * Returns:     Nothing
+ *
+ * Notes:      The previous command was completely finished, start
+ *             a new one if possible.
+ */
+static void scsi_run_queue(struct request_queue *q)
+{
+ struct scsi_device *sdev = q->queuedata;
+
+ if (scsi_target(sdev)->single_lun)
+  scsi_single_lun_run(sdev);
+ if (!list_empty(&sdev->host->starved_list))
+  scsi_starved_list_run(sdev->host);
 
  blk_run_queue(q);
 }
-- 
1.7.1