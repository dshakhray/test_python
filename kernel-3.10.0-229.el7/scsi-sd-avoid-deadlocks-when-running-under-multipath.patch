From 20db79cd6991e2d0b9303983f0a3f7dda006ca03 Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Wed, 20 Aug 2014 18:58:44 -0400
Subject: [scsi] sd: avoid deadlocks when running under multipath

Message-id: <1408561176-18133-6-git-send-email-emilne@redhat.com>
Patchwork-id: 88437
O-Subject: [RHEL7.1 PATCH e-stor 05/57] [SCSI] sd: avoid deadlocks when running under multipath
Bugzilla: 1132092
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Ewan D. Milne" <emilne@redhat.com>

upstream commit 0761df9c4b2d966da3af2ac4ee7372afa681ce63

Tested by Ewan D. Milne and Barry Donahue with a combination
of manual and automated testing.  No issues seen.

upstream commit 0761df9c4b2d966da3af2ac4ee7372afa681ce63
Author: Hannes Reinecke <hare@suse.de>
Date:   Fri May 10 11:06:16 2013 +0200

    [SCSI] sd: avoid deadlocks when running under multipath

    When multipathed systems run into an all-paths-down scenario
    all devices might be dropped, too. This causes 'del_gendisk'
    to be called, which will unregister the kobj_map->probe()
    function for all disk device numbers.
    When the device comes back the default ->probe() function
    is run which will call __request_module(), which will
    deadlock.
    As 'del_gendisk' typically does _not_ trigger a module unload
    the default ->probe() function is pointless anyway.
    This patch implements a dummy ->probe() function, which will
    just return NULL if the disk is not registered.
    This will avoid the deadlock. Plus it'll speed up device
    scanning.

    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

Signed-off-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index c119de3..917113c 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -510,6 +510,16 @@ static struct scsi_driver sd_template = {
 };
 
 /*
+ * Dummy kobj_map->probe function.
+ * The default ->probe function will call modprobe, which is
+ * pointless as this module is already loaded.
+ */
+static struct kobject *sd_default_probe(dev_t devt, int *partno, void *data)
+{
+ return NULL;
+}
+
+/*
  * Device no to disk mapping:
  * 
  *       major         disc2     disc  p1
@@ -2967,8 +2977,10 @@ static int sd_probe(struct device *dev)
 static int sd_remove(struct device *dev)
 {
  struct scsi_disk *sdkp;
+ dev_t devt;
 
  sdkp = dev_get_drvdata(dev);
+ devt = disk_devt(sdkp->disk);
  scsi_autopm_get_device(sdkp->device);
 
  async_synchronize_full_domain(&scsi_sd_probe_domain);
@@ -2976,6 +2988,9 @@ static int sd_remove(struct device *dev)
  del_gendisk(sdkp->disk);
  sd_shutdown(dev);
 
+ blk_register_region(devt, SD_MINORS, NULL,
+       sd_default_probe, NULL, NULL);
+
  mutex_lock(&sd_ref_mutex);
  dev_set_drvdata(dev, NULL);
  put_device(&sdkp->dev);
@@ -3119,9 +3134,13 @@ static int __init init_sd(void)
 
  SCSI_LOG_HLQUEUE(3, printk("init_sd: sd driver entry point\n"));
 
- for (i = 0; i < SD_MAJORS; i++)
-  if (register_blkdev(sd_major(i), "sd") == 0)
-   majors++;
+ for (i = 0; i < SD_MAJORS; i++) {
+  if (register_blkdev(sd_major(i), "sd") != 0)
+   continue;
+  majors++;
+  blk_register_region(sd_major(i), SD_MINORS, NULL,
+        sd_default_probe, NULL, NULL);
+ }
 
  if (!majors)
   return -ENODEV;
@@ -3180,8 +3199,10 @@ static void __exit exit_sd(void)
 
  class_unregister(&sd_disk_class);
 
- for (i = 0; i < SD_MAJORS; i++)
+ for (i = 0; i < SD_MAJORS; i++) {
+  blk_unregister_region(sd_major(i), SD_MINORS);
   unregister_blkdev(sd_major(i), "sd");
+ }
 }
 
 module_init(init_sd);
-- 
1.7.1