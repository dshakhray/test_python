From 3686a3edb943d787eaebd6a582a38b8dfb2df49b Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Wed, 23 Jul 2014 10:50:02 -0400
Subject: [s390] irq: improve displayed interrupt order in /proc/interrupts

Message-id: <1406112611-9862-15-git-send-email-brueckner@redhat.com>
Patchwork-id: 86326
O-Subject: [RHEL7.1 PATCH 14/23] [s390] s390/irq: improve displayed interrupt order in /proc/interrupts
Bugzilla: 1088554
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------

commit e2213e04c1b1e44a09a9d05b79809b7e63c9217e
Author: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
Date:   Tue Jul 22 16:58:52 2014 +0200

    s390/irq: improve displayed interrupt order in /proc/interrupts

    Rework the irqclass_main_desc and irqclass_sub_desc data structures which
    are used to report detaild IRQ statistics in /proc/interrupts.  When
    called from the procfs ops, the entries in the structures are processed
    one by one.

    The index of an IRQ in the structures is identical to its definition in
    the "enum interruption_class".   To control and (re)order the displayed
    sequence, introduce an irq member in each entry.  This helps to display
    related IRQs together without changing the assigned number in the
    interruption_class enumeration.  That means, adding and displaying new
    IRQs are independent.
    Finally, this new behavior improves to maintain a kernel ABI.

    Signed-off-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1088554
https://bugzilla.redhat.com/show_bug.cgi?id=1088554

Upstream status of the patch
----------------------------
I will discuss this changes with the s390 maintainer to be included in the
next kernel release.  With this change in place, additions of new IRQ counter
can be better controlled.

kABI
----
This changes mitigates a kABI breakage caused by a previous commit.  This
commit ensures to keep the order of reported IRQs in /proc/interrupts
identical to the upstream kernel.

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7725759

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/kernel/irq.c b/arch/s390/kernel/irq.c
index 50cb4a2..e63edad 100644
--- a/arch/s390/kernel/irq.c
+++ b/arch/s390/kernel/irq.c
@@ -28,6 +28,7 @@ DEFINE_PER_CPU_SHARED_ALIGNED(struct irq_stat, irq_stat);
 EXPORT_PER_CPU_SYMBOL_GPL(irq_stat);
 
 struct irq_class {
+ int irq;
  char *name;
  char *desc;
 };
@@ -43,8 +44,8 @@ struct irq_class {
  * up with having a sum which accounts each interrupt twice.
  */
 static const struct irq_class irqclass_main_desc[NR_IRQS] = {
- [EXTERNAL_INTERRUPT] = {.name = "EXT"},
- [IO_INTERRUPT]      = {.name = "I/O"}
+ {.irq = EXTERNAL_INTERRUPT, .name = "EXT"},
+ {.irq = IO_INTERRUPT,     .name = "I/O"},
 };
 
 /*
@@ -53,38 +54,38 @@ static const struct irq_class irqclass_main_desc[NR_IRQS] = {
  * In addition this list contains non external / I/O events like NMIs.
  */
 static const struct irq_class irqclass_sub_desc[NR_ARCH_IRQS] = {
- [IRQEXT_CLK] = {.name = "CLK", .desc = "[EXT] Clock Comparator"},
- [IRQEXT_EXC] = {.name = "EXC", .desc = "[EXT] External Call"},
- [IRQEXT_EMS] = {.name = "EMS", .desc = "[EXT] Emergency Signal"},
- [IRQEXT_TMR] = {.name = "TMR", .desc = "[EXT] CPU Timer"},
- [IRQEXT_TLA] = {.name = "TAL", .desc = "[EXT] Timing Alert"},
- [IRQEXT_PFL] = {.name = "PFL", .desc = "[EXT] Pseudo Page Fault"},
- [IRQEXT_DSD] = {.name = "DSD", .desc = "[EXT] DASD Diag"},
- [IRQEXT_VRT] = {.name = "VRT", .desc = "[EXT] Virtio"},
- [IRQEXT_SCP] = {.name = "SCP", .desc = "[EXT] Service Call"},
- [IRQEXT_IUC] = {.name = "IUC", .desc = "[EXT] IUCV"},
- [IRQEXT_CMS] = {.name = "CMS", .desc = "[EXT] CPU-Measurement: Sampling"},
- [IRQEXT_CMC] = {.name = "CMC", .desc = "[EXT] CPU-Measurement: Counter"},
- [IRQEXT_CMR] = {.name = "CMR", .desc = "[EXT] CPU-Measurement: RI"},
- [IRQIO_CIO]  = {.name = "CIO", .desc = "[I/O] Common I/O Layer Interrupt"},
- [IRQIO_QAI]  = {.name = "QAI", .desc = "[I/O] QDIO Adapter Interrupt"},
- [IRQIO_DAS]  = {.name = "DAS", .desc = "[I/O] DASD"},
- [IRQIO_C15]  = {.name = "C15", .desc = "[I/O] 3215"},
- [IRQIO_C70]  = {.name = "C70", .desc = "[I/O] 3270"},
- [IRQIO_TAP]  = {.name = "TAP", .desc = "[I/O] Tape"},
- [IRQIO_VMR]  = {.name = "VMR", .desc = "[I/O] Unit Record Devices"},
- [IRQIO_LCS]  = {.name = "LCS", .desc = "[I/O] LCS"},
- [IRQIO_CLW]  = {.name = "CLW", .desc = "[I/O] CLAW"},
- [IRQIO_CTC]  = {.name = "CTC", .desc = "[I/O] CTC"},
- [IRQIO_APB]  = {.name = "APB", .desc = "[I/O] AP Bus"},
- [IRQIO_ADM]  = {.name = "ADM", .desc = "[I/O] EADM Subchannel"},
- [IRQIO_CSC]  = {.name = "CSC", .desc = "[I/O] CHSC Subchannel"},
- [IRQIO_PCI]  = {.name = "PCI", .desc = "[I/O] PCI Interrupt" },
- [IRQIO_MSI]  = {.name = "MSI", .desc = "[I/O] MSI Interrupt" },
- [IRQIO_VIR]  = {.name = "VIR", .desc = "[I/O] Virtual I/O Devices"},
- [IRQIO_VAI]  = {.name = "VAI", .desc = "[I/O] Virtual I/O Devices AI"},
- [NMI_NMI]    = {.name = "NMI", .desc = "[NMI] Machine Check"},
- [CPU_RST]    = {.name = "RST", .desc = "[CPU] CPU Restart"},
+ {.irq = IRQEXT_CLK, .name = "CLK", .desc = "[EXT] Clock Comparator"},
+ {.irq = IRQEXT_EXC, .name = "EXC", .desc = "[EXT] External Call"},
+ {.irq = IRQEXT_EMS, .name = "EMS", .desc = "[EXT] Emergency Signal"},
+ {.irq = IRQEXT_TMR, .name = "TMR", .desc = "[EXT] CPU Timer"},
+ {.irq = IRQEXT_TLA, .name = "TAL", .desc = "[EXT] Timing Alert"},
+ {.irq = IRQEXT_PFL, .name = "PFL", .desc = "[EXT] Pseudo Page Fault"},
+ {.irq = IRQEXT_DSD, .name = "DSD", .desc = "[EXT] DASD Diag"},
+ {.irq = IRQEXT_VRT, .name = "VRT", .desc = "[EXT] Virtio"},
+ {.irq = IRQEXT_SCP, .name = "SCP", .desc = "[EXT] Service Call"},
+ {.irq = IRQEXT_IUC, .name = "IUC", .desc = "[EXT] IUCV"},
+ {.irq = IRQEXT_CMS, .name = "CMS", .desc = "[EXT] CPU-Measurement: Sampling"},
+ {.irq = IRQEXT_CMC, .name = "CMC", .desc = "[EXT] CPU-Measurement: Counter"},
+ {.irq = IRQEXT_CMR, .name = "CMR", .desc = "[EXT] CPU-Measurement: RI"},
+ {.irq = IRQIO_CIO,  .name = "CIO", .desc = "[I/O] Common I/O Layer Interrupt"},
+ {.irq = IRQIO_QAI,  .name = "QAI", .desc = "[I/O] QDIO Adapter Interrupt"},
+ {.irq = IRQIO_DAS,  .name = "DAS", .desc = "[I/O] DASD"},
+ {.irq = IRQIO_C15,  .name = "C15", .desc = "[I/O] 3215"},
+ {.irq = IRQIO_C70,  .name = "C70", .desc = "[I/O] 3270"},
+ {.irq = IRQIO_TAP,  .name = "TAP", .desc = "[I/O] Tape"},
+ {.irq = IRQIO_VMR,  .name = "VMR", .desc = "[I/O] Unit Record Devices"},
+ {.irq = IRQIO_LCS,  .name = "LCS", .desc = "[I/O] LCS"},
+ {.irq = IRQIO_CLW,  .name = "CLW", .desc = "[I/O] CLAW"},
+ {.irq = IRQIO_CTC,  .name = "CTC", .desc = "[I/O] CTC"},
+ {.irq = IRQIO_APB,  .name = "APB", .desc = "[I/O] AP Bus"},
+ {.irq = IRQIO_ADM,  .name = "ADM", .desc = "[I/O] EADM Subchannel"},
+ {.irq = IRQIO_CSC,  .name = "CSC", .desc = "[I/O] CHSC Subchannel"},
+ {.irq = IRQIO_PCI,  .name = "PCI", .desc = "[I/O] PCI Interrupt" },
+ {.irq = IRQIO_MSI,  .name = "MSI", .desc = "[I/O] MSI Interrupt" },
+ {.irq = IRQIO_VIR,  .name = "VIR", .desc = "[I/O] Virtual I/O Devices"},
+ {.irq = IRQIO_VAI,  .name = "VAI", .desc = "[I/O] Virtual I/O Devices AI"},
+ {.irq = NMI_NMI,    .name = "NMI", .desc = "[NMI] Machine Check"},
+ {.irq = CPU_RST,    .name = "RST", .desc = "[CPU] CPU Restart"},
 };
 
 /*
@@ -92,29 +93,32 @@ static const struct irq_class irqclass_sub_desc[NR_ARCH_IRQS] = {
  */
 int show_interrupts(struct seq_file *p, void *v)
 {
- int irq = *(loff_t *) v;
- int cpu;
+ int index = *(loff_t *) v;
+ int cpu, irq;
 
  get_online_cpus();
- if (irq == 0) {
+ if (index == 0) {
   seq_puts(p, "           ");
   for_each_online_cpu(cpu)
    seq_printf(p, "CPU%d       ", cpu);
   seq_putc(p, '\n');
  }
- if (irq < NR_IRQS) {
-  seq_printf(p, "%s: ", irqclass_main_desc[irq].name);
+ if (index < NR_IRQS) {
+  seq_printf(p, "%s: ", irqclass_main_desc[index].name);
+  irq = irqclass_main_desc[index].irq;
   for_each_online_cpu(cpu)
    seq_printf(p, "%10u ", kstat_cpu(cpu).irqs[irq]);
   seq_putc(p, '\n');
   goto skip_arch_irqs;
  }
- for (irq = 0; irq < NR_ARCH_IRQS; irq++) {
-  seq_printf(p, "%s: ", irqclass_sub_desc[irq].name);
-  for_each_online_cpu(cpu)
+ for (index = 0; index < NR_ARCH_IRQS; index++) {
+  seq_printf(p, "%s: ", irqclass_sub_desc[index].name);
+  irq = irqclass_sub_desc[index].irq;
+  for_each_online_cpu(cpu) {
    seq_printf(p, "%10u ", per_cpu(irq_stat, cpu).irqs[irq]);
-  if (irqclass_sub_desc[irq].desc)
-   seq_printf(p, "  %s", irqclass_sub_desc[irq].desc);
+  }
+  if (irqclass_sub_desc[index].desc)
+   seq_printf(p, "  %s", irqclass_sub_desc[index].desc);
   seq_putc(p, '\n');
  }
 skip_arch_irqs:
-- 
1.7.1