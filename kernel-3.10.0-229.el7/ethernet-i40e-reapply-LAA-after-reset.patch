From 8fe33c9e811543f2fac9c11ebcbe995fcfac3d1c Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:39:26 -0400
Subject: [ethernet] i40e: reapply LAA after reset

Message-id: <1409658042-22689-206-git-send-email-sassmann@redhat.com>
Patchwork-id: 90405
O-Subject: [RHEL7.1 PATCH 205/281] i40e: reapply LAA after reset
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Shannon Nelson <shannon.nelson@intel.com>

The LAA is lost on a reset, so be sure to replay it when rebuilding
the switch after any reset.

Change-ID: I6e643f9a59dfd899b6cbdf84d93b4bc9c37bb949
Signed-off-by: Shannon Nelson <shannon.nelson@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 6252c7e4ee48f016dd075168df9fabc7197f38e5)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index 07811dd..2ec6e8a 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -362,6 +362,7 @@ struct i40e_mac_filter {
  bool is_vf;  /* filter belongs to a VF */
  bool is_netdev;  /* filter belongs to a netdev */
  bool changed;  /* filter needs to be sync'd to the HW */
+ bool is_laa;  /* filter is a Locally Administered Address */
 };
 
 struct i40e_veb {
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index e0b2ebf..f0c81a5 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -1344,8 +1344,8 @@ static int i40e_set_mac(struct net_device *netdev, void *p)
   }
  }
 
- if (!i40e_find_mac(vsi, addr->sa_data, false, true)) {
-
+ f = i40e_find_mac(vsi, addr->sa_data, false, true);
+ if (!f) {
   /* In order to be sure to not drop any packets, add the
    * new address first then delete the old one.
    */
@@ -1360,6 +1360,7 @@ static int i40e_set_mac(struct net_device *netdev, void *p)
   i40e_sync_vsi_filters(vsi);
  }
 
+ f->is_laa = true;
  if (!ether_addr_equal(netdev->dev_addr, addr->sa_data))
   ether_addr_copy(netdev->dev_addr, addr->sa_data);
 
@@ -7378,6 +7379,12 @@ static int i40e_add_vsi(struct i40e_vsi *vsi)
  list_for_each_entry_safe(f, ftmp, &vsi->mac_filter_list, list) {
   f->changed = true;
   f_count++;
+
+  if (f->is_laa && vsi->type == I40E_VSI_MAIN) {
+   i40e_aq_mac_address_write(&vsi->back->hw,
+        I40E_AQC_WRITE_TYPE_LAA_WOL,
+        f->macaddr, NULL);
+  }
  }
  if (f_count) {
   vsi->flags |= I40E_VSI_FLAG_FILTER_CHANGED;
-- 
1.7.1