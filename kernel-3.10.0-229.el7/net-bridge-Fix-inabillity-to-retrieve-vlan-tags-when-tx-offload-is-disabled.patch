From 4450636d61a33e2fea27ddea596669deb75ba934 Mon Sep 17 00:00:00 2001
From: Vlad Yasevich <vyasevic@redhat.com>
Date: Wed, 10 Sep 2014 15:16:16 -0400
Subject: [net] bridge: Fix inabillity to retrieve vlan tags when tx offload is disabled

Message-id: <1410362181-9327-4-git-send-email-vyasevic@redhat.com>
Patchwork-id: 93482
O-Subject: [RHEL7 PATCH 3/8] bridge: Fix inabillity to retrieve vlan tags when tx offload is disabled
Bugzilla: 1139809
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>

Bugzilla: 1139809
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7936510

commit 12464bb8de021a01fa7ec9299c273c247df7f198
From: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date: Thu, 27 Mar 2014 21:46:55 +0900

    bridge: Fix inabillity to retrieve vlan tags when tx offload is disabled

    Bridge vlan code (br_vlan_get_tag()) assumes that all frames have vlan_tci
    if they are tagged, but if vlan tx offload is manually disabled on bridge
    device and frames are sent from vlan device on the bridge device, the tags
    are embedded in skb->data and they break this assumption.
    Extract embedded vlan tags and move them to vlan_tci at ingress.

    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Vlad Yasevich <vyasevic@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index c0b4a75..8420810 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -49,14 +49,14 @@ netdev_tx_t br_dev_xmit(struct sk_buff *skb, struct net_device *dev)
  brstats->tx_bytes += skb->len;
  u64_stats_update_end(&brstats->syncp);
 
- if (!br_allowed_ingress(br, br_get_vlan_info(br), skb, &vid))
-  goto out;
-
  BR_INPUT_SKB_CB(skb)->brdev = dev;
 
  skb_reset_mac_header(skb);
  skb_pull(skb, ETH_HLEN);
 
+ if (!br_allowed_ingress(br, br_get_vlan_info(br), skb, &vid))
+  goto out;
+
  if (is_broadcast_ether_addr(dest))
   br_flood_deliver(br, skb, false);
  else if (is_multicast_ether_addr(dest)) {
diff --git a/net/bridge/br_vlan.c b/net/bridge/br_vlan.c
index c808012..5fd1b27 100644
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@ -174,6 +174,18 @@ bool br_allowed_ingress(struct net_bridge *br, struct net_port_vlans *v,
  if (!v)
   return false;
 
+ /* If vlan tx offload is disabled on bridge device and frame was
+  * sent from vlan device on the bridge device, it does not have
+  * HW accelerated vlan tag.
+  */
+ if (unlikely(!vlan_tx_tag_present(skb) &&
+       (skb->protocol == htons(ETH_P_8021Q) ||
+        skb->protocol == htons(ETH_P_8021AD)))) {
+  skb = vlan_untag(skb);
+  if (unlikely(!skb))
+   return false;
+ }
+
  err = br_vlan_get_tag(skb, vid);
  if (!*vid) {
   u16 pvid = br_get_pvid(v);
-- 
1.7.1