From 2b99ea35aa7736fb4b4d752ca350a31fa42eb47c Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:04 -0400
Subject: [tools] perf: Update cpumode for each cumulative entry

Message-id: <1410181752-25631-240-git-send-email-jolsa@redhat.com>
Patchwork-id: 91951
O-Subject: [PATCH RHEL7.1 BZ1134356 239/307] perf tools: Update cpumode for each cumulative entry
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit c7405d85d7a354b8ba49e2db7c4b027e6cb997c1
Author: Namhyung Kim <namhyung@kernel.org>
Date: Thu Oct 31 13:58:30 2013 +0900

description
===========
The cpumode and level in struct addr_localtion was set for a sample
and but updated as cumulative callchains were added.  This led to have
non-matching symbol and cpumode in the output.

Update it accordingly based on the fact whether the map is a part of
the kernel or not.  This is a reverse of what thread__find_addr_map()
does.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/callchain.c b/tools/perf/util/callchain.c
index 2af69c4..48b6d3f 100644
--- a/tools/perf/util/callchain.c
+++ b/tools/perf/util/callchain.c
@@ -630,3 +630,45 @@ int hist_entry__append_callchain(struct hist_entry *he, struct perf_sample *samp
   return 0;
  return callchain_append(he->callchain, &callchain_cursor, sample->period);
 }
+
+int fill_callchain_info(struct addr_location *al, struct callchain_cursor_node *node,
+   bool hide_unresolved)
+{
+ al->map = node->map;
+ al->sym = node->sym;
+ if (node->map)
+  al->addr = node->map->map_ip(node->map, node->ip);
+ else
+  al->addr = node->ip;
+
+ if (al->sym == NULL) {
+  if (hide_unresolved)
+   return 0;
+  if (al->map == NULL)
+   goto out;
+ }
+
+ if (al->map->groups == &al->machine->kmaps) {
+  if (machine__is_host(al->machine)) {
+   al->cpumode = PERF_RECORD_MISC_KERNEL;
+   al->level = 'k';
+  } else {
+   al->cpumode = PERF_RECORD_MISC_GUEST_KERNEL;
+   al->level = 'g';
+  }
+ } else {
+  if (machine__is_host(al->machine)) {
+   al->cpumode = PERF_RECORD_MISC_USER;
+   al->level = '.';
+  } else if (perf_guest) {
+   al->cpumode = PERF_RECORD_MISC_GUEST_USER;
+   al->level = 'u';
+  } else {
+   al->cpumode = PERF_RECORD_MISC_HYPERVISOR;
+   al->level = 'H';
+  }
+ }
+
+out:
+ return 1;
+}
diff --git a/tools/perf/util/callchain.h b/tools/perf/util/callchain.h
index bde2b0c..24a53d5 100644
--- a/tools/perf/util/callchain.h
+++ b/tools/perf/util/callchain.h
@@ -162,6 +162,8 @@ int sample__resolve_callchain(struct perf_sample *sample, struct symbol **parent
          struct perf_evsel *evsel, struct addr_location *al,
          int max_stack);
 int hist_entry__append_callchain(struct hist_entry *he, struct perf_sample *sample);
+int fill_callchain_info(struct addr_location *al, struct callchain_cursor_node *node,
+   bool hide_unresolved);
 
 extern const char record_callchain_help[];
 int parse_callchain_report_opt(const char *arg);
diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index 6079b5a..37c28fc 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -743,18 +743,9 @@ iter_next_cumulative_entry(struct hist_entry_iter *iter,
  if (node == NULL)
   return 0;
 
- al->map = node->map;
- al->sym = node->sym;
- if (node->map)
-  al->addr = node->map->map_ip(node->map, node->ip);
- else
-  al->addr = node->ip;
-
- if (iter->hide_unresolved && al->sym == NULL)
-  return 0;
-
  callchain_cursor_advance(&callchain_cursor);
- return 1;
+
+ return fill_callchain_info(al, node, iter->hide_unresolved);
 }
 
 static int
-- 
1.7.1