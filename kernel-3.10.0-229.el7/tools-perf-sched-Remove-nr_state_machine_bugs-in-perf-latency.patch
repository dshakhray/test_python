From 09aa3867b5a69e671052dddaaa36c22765e06843 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:07:30 -0400
Subject: [tools] perf/sched: Remove nr_state_machine_bugs in perf latency

Message-id: <1410181752-25631-206-git-send-email-jolsa@redhat.com>
Patchwork-id: 91873
O-Subject: [PATCH RHEL7.1 BZ1134356 205/307] perf sched: Remove nr_state_machine_bugs in perf latency
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 67d6259dd021006ade25d67b045ad2089b5aba96
Author: Dongsheng Yang <yangds.fnst@cn.fujitsu.com>
Date: Tue May 13 10:38:21 2014 +0900

description
===========
As we do not use .success in sched_wakeup event any more, then
we can not guarantee that the task when wakeup event happen is
out of run queue. So the message of nr_state_machine_bugs is
not correct.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-sched.c b/tools/perf/builtin-sched.c
index a3320f1..0b4fe53 100644
--- a/tools/perf/builtin-sched.c
+++ b/tools/perf/builtin-sched.c
@@ -149,7 +149,6 @@ struct perf_sched {
  unsigned long  nr_runs;
  unsigned long  nr_timestamps;
  unsigned long  nr_unordered_timestamps;
- unsigned long  nr_state_machine_bugs;
  unsigned long  nr_context_switch_bugs;
  unsigned long  nr_events;
  unsigned long  nr_lost_chunks;
@@ -1032,12 +1031,18 @@ static int latency_wakeup_event(struct perf_sched *sched,
  atom = list_entry(atoms->work_list.prev, struct work_atom, list);
 
  /*
+  * As we do not guarantee the wakeup event happens when
+  * task is out of run queue, also may happen when task is
+  * on run queue and wakeup only change ->state to TASK_RUNNING,
+  * then we should not set the ->wake_up_time when wake up a
+  * task which is on run queue.
+  *
   * You WILL be missing events if you've recorded only
   * one CPU, or are only looking at only one, so don't
-  * make useless noise.
+  * skip in this case.
   */
  if (sched->profile_cpu == -1 && atom->state != THREAD_SLEEPING)
-  sched->nr_state_machine_bugs++;
+  return 0;
 
  sched->nr_timestamps++;
  if (atom->sched_out_time > timestamp) {
@@ -1496,14 +1501,6 @@ static void print_bad_events(struct perf_sched *sched)
    (double)sched->nr_lost_events/(double)sched->nr_events * 100.0,
    sched->nr_lost_events, sched->nr_events, sched->nr_lost_chunks);
  }
- if (sched->nr_state_machine_bugs && sched->nr_timestamps) {
-  printf("  INFO: %.3f%% state machine bugs (%ld out of %ld)",
-   (double)sched->nr_state_machine_bugs/(double)sched->nr_timestamps*100.0,
-   sched->nr_state_machine_bugs, sched->nr_timestamps);
-  if (sched->nr_lost_events)
-   printf(" (due to lost events?)");
-  printf("\n");
- }
  if (sched->nr_context_switch_bugs && sched->nr_timestamps) {
   printf("  INFO: %.3f%% context switch bugs (%ld out of %ld)",
    (double)sched->nr_context_switch_bugs/(double)sched->nr_timestamps*100.0,
-- 
1.7.1