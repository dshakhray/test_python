From a072ef4e0e95eaa756d03821eaf5d890f9877cad Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:37:22 -0400
Subject: [ethernet] i40e: abstract the close path for better netdev vsis

Message-id: <1409658042-22689-82-git-send-email-sassmann@redhat.com>
Patchwork-id: 90275
O-Subject: [RHEL7.1 PATCH 081/281] i40e: abstract the close path for better netdev vsis
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Shannon Nelson <shannon.nelson@intel.com>

Abstract out the vsi close actions into a single function so they
can be used correctly for both netdev and non-netdev based VSIs.

Change-ID: I59e3d115fcb20e614a09477281b7787dd340d276
Signed-off-by: Shannon Nelson <shannon.nelson@intel.com>
Signed-off-by: Catherine Sullivan <catherine.sullivan@intel.com>
Tested-by: Kavindya Deegala <kavindya.s.deegala@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 90ef8d47cbb19df60f594e264498380251dae950)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 2b1a46b..889ae78 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -3518,6 +3518,19 @@ static void i40e_napi_disable_all(struct i40e_vsi *vsi)
 }
 
 /**
+ * i40e_vsi_close - Shut down a VSI
+ * @vsi: the vsi to be quelled
+ **/
+static void i40e_vsi_close(struct i40e_vsi *vsi)
+{
+ if (!test_and_set_bit(__I40E_DOWN, &vsi->state))
+  i40e_down(vsi);
+ i40e_vsi_free_irq(vsi);
+ i40e_vsi_free_tx_resources(vsi);
+ i40e_vsi_free_rx_resources(vsi);
+}
+
+/**
  * i40e_quiesce_vsi - Pause a given VSI
  * @vsi: the VSI being paused
  **/
@@ -3530,8 +3543,7 @@ static void i40e_quiesce_vsi(struct i40e_vsi *vsi)
  if (vsi->netdev && netif_running(vsi->netdev)) {
   vsi->netdev->netdev_ops->ndo_stop(vsi->netdev);
  } else {
-  set_bit(__I40E_DOWN, &vsi->state);
-  i40e_down(vsi);
+  i40e_vsi_close(vsi);
  }
 }
 
@@ -4391,14 +4403,7 @@ static int i40e_close(struct net_device *netdev)
  struct i40e_netdev_priv *np = netdev_priv(netdev);
  struct i40e_vsi *vsi = np->vsi;
 
- if (test_and_set_bit(__I40E_DOWN, &vsi->state))
-  return 0;
-
- i40e_down(vsi);
- i40e_vsi_free_irq(vsi);
-
- i40e_vsi_free_tx_resources(vsi);
- i40e_vsi_free_rx_resources(vsi);
+ i40e_vsi_close(vsi);
 
  return 0;
 }
@@ -7084,11 +7089,7 @@ int i40e_vsi_release(struct i40e_vsi *vsi)
     unregister_netdev(vsi->netdev);
    }
   } else {
-   if (!test_and_set_bit(__I40E_DOWN, &vsi->state))
-    i40e_down(vsi);
-   i40e_vsi_free_irq(vsi);
-   i40e_vsi_free_tx_resources(vsi);
-   i40e_vsi_free_rx_resources(vsi);
+   i40e_vsi_close(vsi);
   }
   i40e_vsi_disable_irq(vsi);
  }
-- 
1.7.1