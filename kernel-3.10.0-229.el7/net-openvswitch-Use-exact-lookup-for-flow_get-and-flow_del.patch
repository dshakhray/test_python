From e690f26a5a2c052aee761b0722db2e69eb0a0a9d Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:30:10 -0400
Subject: [net] openvswitch: Use exact lookup for flow_get and flow_del

Message-id: <764c252677c7ec4077f35c0d5afc98950b0bccdf.1410531783.git.jbenc@redhat.com>
Patchwork-id: 94002
O-Subject: [RHEL7.1 net PATCH 37/50] openvswitch: Use exact lookup for flow_get and flow_del.
Bugzilla: 1110384
RH-Acked-by: Flavio Leitner <fbl@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110384
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit 4a46b24e147dfa9b858026da02cad0bdd4e149d2
Author: Alex Wang <alexw@nicira.com>
Date:   Mon Jun 30 20:30:29 2014 -0700

    openvswitch: Use exact lookup for flow_get and flow_del.

    Due to the race condition in userspace, there is chance that two
    overlapping megaflows could be installed in datapath.  And this
    causes userspace unable to delete the less inclusive megaflow flow
    even after it timeout, since the flow_del logic will stop at the
    first match of masked flow.

    This commit fixes the bug by making the kernel flow_del and flow_get
    logic check all masks in that case.

    Introduced by 03f0d916a (openvswitch: Mega flow implementation).

    Signed-off-by: Alex Wang <alexw@nicira.com>
    Acked-by: Andy Zhou <azhou@nicira.com>
    Signed-off-by: Pravin B Shelar <pshelar@nicira.com>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index 46b5277..775b51a 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -891,8 +891,11 @@ static int ovs_flow_cmd_new(struct sk_buff *skb, struct genl_info *info)
   }
   /* The unmasked key has to be the same for flow updates. */
   if (unlikely(!ovs_flow_cmp_unmasked_key(flow, &match))) {
-   error = -EEXIST;
-   goto err_unlock_ovs;
+   flow = ovs_flow_tbl_lookup_exact(&dp->table, &match);
+   if (!flow) {
+    error = -ENOENT;
+    goto err_unlock_ovs;
+   }
   }
   /* Update actions. */
   old_acts = ovsl_dereference(flow->sf_acts);
@@ -983,16 +986,12 @@ static int ovs_flow_cmd_set(struct sk_buff *skb, struct genl_info *info)
   goto err_unlock_ovs;
  }
  /* Check that the flow exists. */
- flow = ovs_flow_tbl_lookup(&dp->table, &key);
+ flow = ovs_flow_tbl_lookup_exact(&dp->table, &match);
  if (unlikely(!flow)) {
   error = -ENOENT;
   goto err_unlock_ovs;
  }
- /* The unmasked key has to be the same for flow updates. */
- if (unlikely(!ovs_flow_cmp_unmasked_key(flow, &match))) {
-  error = -EEXIST;
-  goto err_unlock_ovs;
- }
+
  /* Update actions, if present. */
  if (likely(acts)) {
   old_acts = ovsl_dereference(flow->sf_acts);
@@ -1065,8 +1064,8 @@ static int ovs_flow_cmd_get(struct sk_buff *skb, struct genl_info *info)
   goto unlock;
  }
 
- flow = ovs_flow_tbl_lookup(&dp->table, &key);
- if (!flow || !ovs_flow_cmp_unmasked_key(flow, &match)) {
+ flow = ovs_flow_tbl_lookup_exact(&dp->table, &match);
+ if (!flow) {
   err = -ENOENT;
   goto unlock;
  }
@@ -1115,8 +1114,8 @@ static int ovs_flow_cmd_del(struct sk_buff *skb, struct genl_info *info)
   goto unlock;
  }
 
- flow = ovs_flow_tbl_lookup(&dp->table, &key);
- if (unlikely(!flow || !ovs_flow_cmp_unmasked_key(flow, &match))) {
+ flow = ovs_flow_tbl_lookup_exact(&dp->table, &match);
+ if (unlikely(!flow)) {
   err = -ENOENT;
   goto unlock;
  }
diff --git a/net/openvswitch/flow_table.c b/net/openvswitch/flow_table.c
index 574c3ab..cf2d853 100644
--- a/net/openvswitch/flow_table.c
+++ b/net/openvswitch/flow_table.c
@@ -456,6 +456,22 @@ struct sw_flow *ovs_flow_tbl_lookup(struct flow_table *tbl,
  return ovs_flow_tbl_lookup_stats(tbl, key, &n_mask_hit);
 }
 
+struct sw_flow *ovs_flow_tbl_lookup_exact(struct flow_table *tbl,
+       struct sw_flow_match *match)
+{
+ struct table_instance *ti = rcu_dereference_ovsl(tbl->ti);
+ struct sw_flow_mask *mask;
+ struct sw_flow *flow;
+
+ /* Always called under ovs-mutex. */
+ list_for_each_entry(mask, &tbl->mask_list, list) {
+  flow = masked_flow_lookup(ti, match->key, mask);
+  if (flow && ovs_flow_cmp_unmasked_key(flow, match))  /* Found */
+   return flow;
+ }
+ return NULL;
+}
+
 int ovs_flow_tbl_num_masks(const struct flow_table *table)
 {
  struct sw_flow_mask *mask;
diff --git a/net/openvswitch/flow_table.h b/net/openvswitch/flow_table.h
index ca8a582..5918bff 100644
--- a/net/openvswitch/flow_table.h
+++ b/net/openvswitch/flow_table.h
@@ -76,7 +76,8 @@ struct sw_flow *ovs_flow_tbl_lookup_stats(struct flow_table *,
         u32 *n_mask_hit);
 struct sw_flow *ovs_flow_tbl_lookup(struct flow_table *,
         const struct sw_flow_key *);
-
+struct sw_flow *ovs_flow_tbl_lookup_exact(struct flow_table *tbl,
+       struct sw_flow_match *match);
 bool ovs_flow_cmp_unmasked_key(const struct sw_flow *flow,
           struct sw_flow_match *match);
 
-- 
1.7.1