From e603882b3fb142fa8498679c27463a2bd586b5af Mon Sep 17 00:00:00 2001
From: Jeff Moyer <jmoyer@redhat.com>
Date: Thu, 28 Aug 2014 19:15:52 -0400
Subject: [virt] virtio_config: introduce size-based accessors

Message-id: <1409253371-23161-3-git-send-email-jmoyer@redhat.com>
Patchwork-id: 89846
O-Subject: [RHEL7 PATCH 02/21] virtio_config: introduce size-based accessors.
Bugzilla: 1105698
RH-Acked-by: Fam Zheng <famz@redhat.com>

This is a backport of the following upstream commit.
Related to bug 1105698.

  commit 0b90d0622ad290b3717a13489b396af52aea9d2d
  Author: Rusty Russell <rusty@rustcorp.com.au>
  Date:   Mon Oct 14 18:11:51 2013 +1030

    virtio_config: introduce size-based accessors.

    This lets the us do endian conversion if necessary, and insulates the
    drivers from that change.

    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/virtio_config.h b/include/linux/virtio_config.h
index 29b9104..490a4bb 100644
--- a/include/linux/virtio_config.h
+++ b/include/linux/virtio_config.h
@@ -162,5 +162,139 @@ int virtqueue_set_affinity(struct virtqueue *vq, int cpu)
  return 0;
 }
 
+/* Config space accessors. */
+#define virtio_cread(vdev, structname, member, ptr)   \
+ do {        \
+  /* Must match the member's type, and be integer */ \
+  if (!typecheck(typeof((((structname*)0)->member)), *(ptr))) \
+   (*ptr) = 1;     \
+         \
+  switch (sizeof(*ptr)) {     \
+  case 1:       \
+   *(ptr) = virtio_cread8(vdev,   \
+            offsetof(structname, member)); \
+   break;      \
+  case 2:       \
+   *(ptr) = virtio_cread16(vdev,   \
+      offsetof(structname, member)); \
+   break;      \
+  case 4:       \
+   *(ptr) = virtio_cread32(vdev,   \
+      offsetof(structname, member)); \
+   break;      \
+  case 8:       \
+   *(ptr) = virtio_cread64(vdev,   \
+      offsetof(structname, member)); \
+   break;      \
+  default:      \
+   BUG();      \
+  }       \
+ } while(0)
+
+/* Config space accessors. */
+#define virtio_cwrite(vdev, structname, member, ptr)   \
+ do {        \
+  /* Must match the member's type, and be integer */ \
+  if (!typecheck(typeof((((structname*)0)->member)), *(ptr))) \
+   BUG_ON((*ptr) == 1);    \
+         \
+  switch (sizeof(*ptr)) {     \
+  case 1:       \
+   virtio_cwrite8(vdev,    \
+           offsetof(structname, member), \
+           *(ptr));    \
+   break;      \
+  case 2:       \
+   virtio_cwrite16(vdev,    \
+     offsetof(structname, member), \
+     *(ptr));   \
+   break;      \
+  case 4:       \
+   virtio_cwrite32(vdev,    \
+     offsetof(structname, member), \
+     *(ptr));   \
+   break;      \
+  case 8:       \
+   virtio_cwrite64(vdev,    \
+     offsetof(structname, member), \
+     *(ptr));   \
+   break;      \
+  default:      \
+   BUG();      \
+  }       \
+ } while(0)
+
+static inline u8 virtio_cread8(struct virtio_device *vdev, unsigned int offset)
+{
+ u8 ret;
+ vdev->config->get(vdev, offset, &ret, sizeof(ret));
+ return ret;
+}
+
+static inline void virtio_cread_bytes(struct virtio_device *vdev,
+          unsigned int offset,
+          void *buf, size_t len)
+{
+ vdev->config->get(vdev, offset, buf, len);
+}
+
+static inline void virtio_cwrite8(struct virtio_device *vdev,
+      unsigned int offset, u8 val)
+{
+ vdev->config->set(vdev, offset, &val, sizeof(val));
+}
+
+static inline u16 virtio_cread16(struct virtio_device *vdev,
+     unsigned int offset)
+{
+ u16 ret;
+ vdev->config->get(vdev, offset, &ret, sizeof(ret));
+ return ret;
+}
+
+static inline void virtio_cwrite16(struct virtio_device *vdev,
+       unsigned int offset, u16 val)
+{
+ vdev->config->set(vdev, offset, &val, sizeof(val));
+}
+
+static inline u32 virtio_cread32(struct virtio_device *vdev,
+     unsigned int offset)
+{
+ u32 ret;
+ vdev->config->get(vdev, offset, &ret, sizeof(ret));
+ return ret;
+}
+
+static inline void virtio_cwrite32(struct virtio_device *vdev,
+       unsigned int offset, u32 val)
+{
+ vdev->config->set(vdev, offset, &val, sizeof(val));
+}
+
+static inline u64 virtio_cread64(struct virtio_device *vdev,
+     unsigned int offset)
+{
+ u64 ret;
+ vdev->config->get(vdev, offset, &ret, sizeof(ret));
+ return ret;
+}
+
+static inline void virtio_cwrite64(struct virtio_device *vdev,
+       unsigned int offset, u64 val)
+{
+ vdev->config->set(vdev, offset, &val, sizeof(val));
+}
+
+/* Conditional config space accessors. */
+#define virtio_cread_feature(vdev, fbit, structname, member, ptr) \
+ ({        \
+  int _r = 0;      \
+  if (!virtio_has_feature(vdev, fbit))   \
+   _r = -ENOENT;     \
+  else       \
+   virtio_cread((vdev), structname, member, ptr); \
+  _r;       \
+ })
 
 #endif /* _LINUX_VIRTIO_CONFIG_H */
-- 
1.7.1