From e86a160aab3513ce8a360eb0bbf5739a5281dc3b Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Mon, 8 Sep 2014 14:31:57 -0400
Subject: [scsi] hpsa: avoid unnecessary readl on every command submission

Message-id: <1410186734-19986-67-git-send-email-thenzl@redhat.com>
Patchwork-id: 92067
O-Subject: [RHEL6.6 e-stor PATCH 66/83] hpsa: avoid unnecessary readl on every command submission
Bugzilla: 1069185
RH-Acked-by: Maurizio Lombardi <mlombard@redhat.com>
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Ewan Milne <emilne@redhat.com>

for controllers which support either of the ioaccel transport methods.

Signed-off-by: Stephen M. Cameron <scameron@beardog.cce.hp.com>
Reviewed-by: Mike Miller <michael.miller@canonical.com>
Reviewed-by: Joe Handzik <joseph.t.handzik@hp.com>
Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit b3a52e791efd341a9a4e9065c667041c822661f0)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/hpsa.c b/drivers/scsi/hpsa.c
index fb1bf52..bd950d7 100644
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@ -7356,6 +7356,13 @@ static void hpsa_enter_performant_mode(struct ctlr_info *h, u32 trans_support)
   * 10 = 6 s/g entry or 24k
   */
 
+ /* If the controller supports either ioaccel method then
+  * we can also use the RAID stack submit path that does not
+  * perform the superfluous readl() after each command submission.
+  */
+ if (trans_support & (CFGTBL_Trans_io_accel1 | CFGTBL_Trans_io_accel2))
+  access = SA5_performant_access_no_read;
+
  /* Controller spec: zero out this buffer. */
  for (i = 0; i < h->nreply_queues; i++)
   memset(h->reply_queue[i].head, 0, h->reply_queue_size);
diff --git a/drivers/scsi/hpsa.h b/drivers/scsi/hpsa.h
index 6da9a9f..0a5d91c 100644
--- a/drivers/scsi/hpsa.h
+++ b/drivers/scsi/hpsa.h
@@ -346,6 +346,12 @@ static void SA5_submit_command(struct ctlr_info *h,
  (void) readl(h->vaddr + SA5_SCRATCHPAD_OFFSET);
 }
 
+static void SA5_submit_command_no_read(struct ctlr_info *h,
+ struct CommandList *c)
+{
+ writel(c->busaddr, h->vaddr + SA5_REQUEST_PORT_OFFSET);
+}
+
 static void SA5_submit_command_ioaccel2(struct ctlr_info *h,
  struct CommandList *c)
 {
@@ -353,7 +359,6 @@ static void SA5_submit_command_ioaccel2(struct ctlr_info *h,
   writel(c->busaddr, h->vaddr + IOACCEL2_INBOUND_POSTQ_32);
  else
   writel(c->busaddr, h->vaddr + SA5_REQUEST_PORT_OFFSET);
- (void) readl(h->vaddr + SA5_SCRATCHPAD_OFFSET);
 }
 
 /*
@@ -564,6 +569,14 @@ static struct access_method SA5_performant_access = {
  SA5_performant_completed,
 };
 
+static struct access_method SA5_performant_access_no_read = {
+ SA5_submit_command_no_read,
+ SA5_performant_intr_mask,
+ SA5_fifo_full,
+ SA5_performant_intr_pending,
+ SA5_performant_completed,
+};
+
 struct board_type {
  u32 board_id;
  char *product_name;
-- 
1.7.1