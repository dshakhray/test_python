From 7fda6e2a2da1abe47bf58329f0265fb385904c87 Mon Sep 17 00:00:00 2001
From: Motohiro Kosaki <mkosaki@redhat.com>
Date: Wed, 10 Sep 2014 16:15:57 -0400
Subject: [x86] mm: Add 'step_size' comments to init_mem_mapping()

Message-id: <1410365775-5132-3-git-send-email-mkosaki@redhat.com>
Patchwork-id: 93485
O-Subject: [RHEL7 PATCH 02/20] x86/mm: Add 'step_size' comments to init_mem_mapping()
Bugzilla: 810042
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>

From: KOSAKI Motohiro <mkosaki@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=810042
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7914549
target RHEL version: 7.1
upstream status: merged
changes from upstream: none

commit 6979287a7df66a92d6f308338e972a406f9ef842
Author: Yinghai Lu <yinghai@kernel.org>
Date:   Fri Sep 6 19:07:09 2013 -0700

    x86/mm: Add 'step_size' comments to init_mem_mapping()

    Current code uses macro to shift by 5, but there is no explanation
    why there's no worry about an overflow there.

    Signed-off-by: Yinghai Lu <yinghai@kernel.org>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: Jacob Shin <jacob.shin@amd.com>
    Link: http://lkml.kernel.org/r/1378519629-10433-1-git-send-email-yinghai@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

Signed-off-by: KOSAKI Motohiro <mkosaki@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c
index 7a5bf1b..4eb71ff 100644
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@ -399,8 +399,25 @@ static unsigned long __init init_range_memory_mapping(
  return mapped_ram_size;
 }
 
-/* (PUD_SHIFT-PMD_SHIFT)/2 */
-#define STEP_SIZE_SHIFT 5
+static unsigned long __init get_new_step_size(unsigned long step_size)
+{
+ /*
+  * Explain why we shift by 5 and why we don't have to worry about
+  * 'step_size << 5' overflowing:
+  *
+  * initial mapped size is PMD_SIZE (2M).
+  * We can not set step_size to be PUD_SIZE (1G) yet.
+  * In worse case, when we cross the 1G boundary, and
+  * PG_LEVEL_2M is not set, we will need 1+1+512 pages (2M + 8k)
+  * to map 1G range with PTE. Use 5 as shift for now.
+  *
+  * Don't need to worry about overflow, on 32bit, when step_size
+  * is 0, round_down() returns 0 for start, and that turns it
+  * into 0x100000000ULL.
+  */
+ return step_size << 5;
+}
+
 void __init init_mem_mapping(void)
 {
  unsigned long end, real_end, start, last_start;
@@ -449,7 +466,7 @@ void __init init_mem_mapping(void)
   min_pfn_mapped = last_start >> PAGE_SHIFT;
   /* only increase step_size after big range get mapped */
   if (new_mapped_ram_size > mapped_ram_size)
-   step_size <<= STEP_SIZE_SHIFT;
+   step_size = get_new_step_size(step_size);
   mapped_ram_size += new_mapped_ram_size;
  }
 
-- 
1.7.1