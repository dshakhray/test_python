From 9a9b99b7ec94887c61589db702461d65d6ab6345 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:39:54 -0400
Subject: [virt] kvm/x86: implement hv EOI assist

Message-id: <1406040016-3289-200-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86278
O-Subject: [RHEL7 PATCH v2 199/221] kvm/x86: implement hv EOI assist
Bugzilla: 1086663 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Michael S. Tsirkin" <mst@redhat.com>

It seems that it's easy to implement the EOI assist
on top of the PV EOI feature: simply convert the
page address to the format expected by PV EOI.

Notes:
-"No EOI required" is set only if interrupt injected
 is edge triggered; this is true because level interrupts are going
 through IOAPIC which disables PV EOI.
 In any case, if guest triggers EOI the bit will get cleared on exit.
-For migration, set of HV_X64_MSR_APIC_ASSIST_PAGE sets
 KVM_PV_EOI_EN internally, so restoring HV_X64_MSR_APIC_ASSIST_PAGE
 seems sufficient
 In any case, bit is cleared on exit so worst case it's never re-enabled
-no handling of PV EOI data is performed at HV_X64_MSR_EOI write;
 HV_X64_MSR_EOI is a separate optimization - it's an X2APIC
 replacement that lets you do EOI with an MSR and not IO.

Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit b63cf42fd1d8c18fab71222321aaf356f63089c9)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 0859978..6399301 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -1920,6 +1920,8 @@ static int set_msr_hyperv(struct kvm_vcpu *vcpu, u32 msr, u64 data)
 
   if (!(data & HV_X64_MSR_APIC_ASSIST_PAGE_ENABLE)) {
    vcpu->arch.hv_vapic = data;
+   if (kvm_lapic_enable_pv_eoi(vcpu, 0))
+    return 1;
    break;
   }
   gfn = data >> HV_X64_MSR_APIC_ASSIST_PAGE_ADDRESS_SHIFT;
@@ -1930,6 +1932,8 @@ static int set_msr_hyperv(struct kvm_vcpu *vcpu, u32 msr, u64 data)
    return 1;
   vcpu->arch.hv_vapic = data;
   mark_page_dirty(vcpu->kvm, gfn);
+  if (kvm_lapic_enable_pv_eoi(vcpu, gfn_to_gpa(gfn) | KVM_MSR_ENABLED))
+   return 1;
   break;
  }
  case HV_X64_MSR_EOI:
-- 
1.7.1