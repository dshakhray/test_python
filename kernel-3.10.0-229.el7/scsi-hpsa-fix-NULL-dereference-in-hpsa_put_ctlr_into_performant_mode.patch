From 746dea438aa9b8ca7c6c9912a7cc1956a675e756 Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Mon, 8 Sep 2014 14:31:42 -0400
Subject: [scsi] hpsa: fix NULL dereference in hpsa_put_ctlr_into_performant_mode()

Message-id: <1410186734-19986-52-git-send-email-thenzl@redhat.com>
Patchwork-id: 92069
O-Subject: [RHEL6.6 e-stor PATCH 51/83] hpsa: fix NULL dereference in hpsa_put_ctlr_into_performant_mode()
Bugzilla: 1069185
RH-Acked-by: Maurizio Lombardi <mlombard@redhat.com>
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Ewan Milne <emilne@redhat.com>

Initialize local variable trans_support before it is used rather
than after.  It is supposed to contain the value of a register on the
controller containing bits that describe which transport modes the
controller supports (e.g. "performant", "ioaccel1",  "ioaccel2").  A
NULL pointer dereference will almost certainly occur if trans_support
is not initialized at the right point.  If for example the uninitialized
trans_support value does not have the bit set for ioaccel2 support when it
should be, then ioaccel2_alloc_cmds_and_bft() will not get called as it
should be and the h->ioaccel2_blockFetchTable array will remain NULL
instead of being allocated.  Too late, trans_support finally gets
initialized with the correct value with ioaccel2 mode bit set,
which later causes calc_bucket_map() to be called to fill in
h->ioaccel2_blockFetchTable[].  However h->ioaccel2_blockFetchTable
is NULL because it didn't get allocated because earlier trans_support
wasn't initialized at the right point.

Fixes: e1f7de0cdd68d246d7008241cd9e443a54f880a8
Signed-off-by: Stephen M. Cameron <scameron@beardog.cce.hp.com>
Reported-by: Baoquan He <bhe@redhat.com>
Tested-by: Baoquan He <bhe@redhat.com>
Signed-off-by: James Bottomley <JBottomley@Parallels.com>
(cherry picked from commit 67c99a72e3006e4276e91d7282a3d6734fc77a0b)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/hpsa.c b/drivers/scsi/hpsa.c
index 5fe0483..663ad64 100644
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@ -7502,6 +7502,10 @@ static void hpsa_put_ctlr_into_performant_mode(struct ctlr_info *h)
  if (hpsa_simple_mode)
   return;
 
+ trans_support = readl(&(h->cfgtable->TransportSupport));
+ if (!(trans_support & PERFORMANT_MODE))
+  return;
+
  /* Check for I/O accelerator mode support */
  if (trans_support & CFGTBL_Trans_io_accel1) {
   transMethod |= CFGTBL_Trans_io_accel1 |
@@ -7518,10 +7522,6 @@ static void hpsa_put_ctlr_into_performant_mode(struct ctlr_info *h)
  }
 
  /* TODO, check that this next line h->nreply_queues is correct */
- trans_support = readl(&(h->cfgtable->TransportSupport));
- if (!(trans_support & PERFORMANT_MODE))
-  return;
-
  h->nreply_queues = h->msix_vector > 0 ? h->msix_vector : 1;
  hpsa_get_max_perf_mode_cmds(h);
  /* Performant mode ring buffer and supporting data structures */
-- 
1.7.1