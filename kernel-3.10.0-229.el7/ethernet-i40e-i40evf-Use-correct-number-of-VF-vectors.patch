From b31d189b142f1f220ee1edfdd1fea92142453b5e Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:36:39 -0400
Subject: [ethernet] i40e/i40evf: Use correct number of VF vectors

Message-id: <1409658042-22689-39-git-send-email-sassmann@redhat.com>
Patchwork-id: 90238
O-Subject: [RHEL7.1 PATCH 038/281] i40e/i40evf: Use correct number of VF vectors
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Mitch Williams <mitch.a.williams@intel.com>

Now that the 2.4 firmware reports the correct number of MSI-X vectors,
use this value correctly when communicating with the VF, and when
setting up the interrupt linked list.

The PF has always reported the correct number of MSI-X vectors, so we
should never increment the value in the vf driver.

Change-ID: Ifeefc631c321390192219ce2af9ada6180c1492f
Signed-off-by: Mitch Williams <mitch.a.williams@intel.com>
Signed-off-by: Catherine Sullivan <catherine.sullivan@intel.com>
Tested-by: Sibai Li <sibai.li@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 9347eb771ece4fda0ad78c1c991f020af17abcb8)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c b/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
index 42cc6ba..7839343 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
@@ -69,7 +69,7 @@ static inline bool i40e_vc_isvalid_vector_id(struct i40e_vf *vf, u8 vector_id)
 {
  struct i40e_pf *pf = vf->pf;
 
- return vector_id <= pf->hw.func_caps.num_msix_vectors_vf;
+ return vector_id < pf->hw.func_caps.num_msix_vectors_vf;
 }
 
 /***********************vf resource mgmt routines*****************/
@@ -126,8 +126,8 @@ static void i40e_config_irq_link_list(struct i40e_vf *vf, u16 vsi_idx,
   reg_idx = I40E_VPINT_LNKLST0(vf->vf_id);
  else
   reg_idx = I40E_VPINT_LNKLSTN(
-        (pf->hw.func_caps.num_msix_vectors_vf
-           * vf->vf_id) + (vector_id - 1));
+       ((pf->hw.func_caps.num_msix_vectors_vf - 1) * vf->vf_id) +
+       (vector_id - 1));
 
  if (vecmap->rxq_map == 0 && vecmap->txq_map == 0) {
   /* Special case - No queues mapped on this vector */
@@ -506,7 +506,8 @@ static void i40e_free_vf_res(struct i40e_vf *vf)
   vf->lan_vsi_index = 0;
   vf->lan_vsi_id = 0;
  }
- msix_vf = pf->hw.func_caps.num_msix_vectors_vf + 1;
+ msix_vf = pf->hw.func_caps.num_msix_vectors_vf;
+
  /* disable interrupts so the VF starts in a known state */
  for (i = 0; i < msix_vf; i++) {
   /* format is same for both registers */
-- 
1.7.1