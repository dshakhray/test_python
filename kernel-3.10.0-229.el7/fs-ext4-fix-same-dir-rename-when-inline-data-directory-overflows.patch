From 80421a4176b71911c9caed8b5eb0bdcd89821511 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:55:23 -0400
Subject: [fs] ext4: fix same-dir rename when inline data directory overflows

Message-id: <1414058125-4183-170-git-send-email-lczerner@redhat.com>
Patchwork-id: 98228
O-Subject: [RHEL 7.1 PATCH v2 169/171] ext4: fix same-dir rename when inline data directory overflows
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: "Darrick J. Wong" <darrick.wong@oracle.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit d80d448c6c5bdd32605b78a60fe8081d82d4da0f

 When performing a same-directory rename, it's possible that adding or
 setting the new directory entry will cause the directory to overflow
 the inline data area, which causes the directory to be converted to an
 extent-based directory.  Under this circumstance it is necessary to
 re-read the directory when deleting the old dirent because the "old
 directory" context still points to i_block in the inode table, which
 is now an extent tree root!  The delete fails with an FS error, and
 the subsequent fsck complains about incorrect link counts and
 hardlinked directories.

 Test case (originally found with flat_dir_test in the metadata_csum
 test program):

 # mkfs.ext4 -O inline_data /dev/sda
 # mount /dev/sda /mnt
 # mkdir /mnt/x
 # touch /mnt/x/changelog.gz /mnt/x/copyright /mnt/x/README.Debian
 # sync
 # for i in /mnt/x/*; do mv $i $i.longer; done
 # ls -la /mnt/x/
 total 0
 -rw-r--r-- 1 root root 0 Aug 25 12:03 changelog.gz.longer
 -rw-r--r-- 1 root root 0 Aug 25 12:03 copyright
 -rw-r--r-- 1 root root 0 Aug 25 12:03 copyright.longer
 -rw-r--r-- 1 root root 0 Aug 25 12:03 README.Debian.longer

 (Hey!  Why are there four files now??)

 Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Cc: stable@vger.kernel.org
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index 2add7d8..62237d9 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -3081,7 +3081,8 @@ static int ext4_find_delete_entry(handle_t *handle, struct inode *dir,
  return retval;
 }
 
-static void ext4_rename_delete(handle_t *handle, struct ext4_renament *ent)
+static void ext4_rename_delete(handle_t *handle, struct ext4_renament *ent,
+          int force_reread)
 {
  int retval;
  /*
@@ -3093,7 +3094,8 @@ static void ext4_rename_delete(handle_t *handle, struct ext4_renament *ent)
  if (le32_to_cpu(ent->de->inode) != ent->inode->i_ino ||
      ent->de->name_len != ent->dentry->d_name.len ||
      strncmp(ent->de->name, ent->dentry->d_name.name,
-      ent->de->name_len)) {
+      ent->de->name_len) ||
+     force_reread) {
   retval = ext4_find_delete_entry(handle, ent->dir,
       &ent->dentry->d_name);
  } else {
@@ -3133,6 +3135,7 @@ static int ext4_rename(struct inode *old_dir, struct dentry *old_dentry,
   .dentry = new_dentry,
   .inode = new_dentry->d_inode,
  };
+ int force_reread;
  int retval;
 
  dquot_initialize(old.dir);
@@ -3194,6 +3197,15 @@ static int ext4_rename(struct inode *old_dir, struct dentry *old_dentry,
   if (retval)
    goto end_rename;
  }
+ /*
+  * If we're renaming a file within an inline_data dir and adding or
+  * setting the new dirent causes a conversion from inline_data to
+  * extents/blockmap, we need to force the dirent delete code to
+  * re-read the directory, or else we end up trying to delete a dirent
+  * from what is now the extent tree root (or a block map).
+  */
+ force_reread = (new.dir->i_ino == old.dir->i_ino &&
+   ext4_test_inode_flag(new.dir, EXT4_INODE_INLINE_DATA));
  if (!new.bh) {
   retval = ext4_add_entry(handle, new.dentry, old.inode);
   if (retval)
@@ -3204,6 +3216,9 @@ static int ext4_rename(struct inode *old_dir, struct dentry *old_dentry,
   if (retval)
    goto end_rename;
  }
+ if (force_reread)
+  force_reread = !ext4_test_inode_flag(new.dir,
+           EXT4_INODE_INLINE_DATA);
 
  /*
   * Like most other Unix systems, set the ctime for inodes on a
@@ -3215,7 +3230,7 @@ static int ext4_rename(struct inode *old_dir, struct dentry *old_dentry,
  /*
   * ok, that's it
   */
- ext4_rename_delete(handle, &old);
+ ext4_rename_delete(handle, &old, force_reread);
 
  if (new.inode) {
   ext4_dec_count(handle, new.inode);
-- 
1.7.1