From 03a2c6d3cfa7fe26b4cc607771057043167d37fe Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:05:54 -0400
Subject: [usb] xhci: For streams the dequeue ptr must be read from the stream ctx

Message-id: <1410887463-20674-283-git-send-email-dzickus@redhat.com>
Patchwork-id: 95218
O-Subject: [RHEL7 PATCH 282/591] xhci: For streams the dequeue ptr must be read from the stream ctx
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 9aad95e292f58d00aa0f2e30c7f7dafd7fc7491c
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 4 00:29:49 2013 +0200

    xhci: For streams the dequeue ptr must be read from the stream ctx

    This fixes TR dequeue validation failing on Intel XHCI controllers with the
    following warning:

    Mismatch between completed Set TR Deq Ptr command & xHCI internal state.

    Interestingly enough reading the deq ptr from the ep ctx after a
    TR Deq Ptr command does work on a Nec XHCI controller, it seems the Nec
    writes the ptr to both the ep and stream contexts when streams are used.

    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index 7820c76..a2ad037 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -1080,12 +1080,14 @@ static void xhci_handle_cmd_set_deq(struct xhci_hcd *xhci, int slot_id,
  unsigned int stream_id;
  struct xhci_ring *ep_ring;
  struct xhci_virt_device *dev;
+ struct xhci_virt_ep *ep;
  struct xhci_ep_ctx *ep_ctx;
  struct xhci_slot_ctx *slot_ctx;
 
  ep_index = TRB_TO_EP_INDEX(le32_to_cpu(trb->generic.field[3]));
  stream_id = TRB_TO_STREAM_ID(le32_to_cpu(trb->generic.field[2]));
  dev = xhci->devs[slot_id];
+ ep = &dev->eps[ep_index];
 
  ep_ring = xhci_stream_id_to_ring(dev, ep_index, stream_id);
  if (!ep_ring) {
@@ -1133,12 +1135,19 @@ static void xhci_handle_cmd_set_deq(struct xhci_hcd *xhci, int slot_id,
    * cancelling URBs, which might not be an error...
    */
  } else {
+  u64 deq;
+  /* 4.6.10 deq ptr is written to the stream ctx for streams */
+  if (ep->ep_state & EP_HAS_STREAMS) {
+   struct xhci_stream_ctx *ctx =
+    &ep->stream_info->stream_ctx_array[stream_id];
+   deq = le64_to_cpu(ctx->stream_ring) & SCTX_DEQ_MASK;
+  } else {
+   deq = le64_to_cpu(ep_ctx->deq) & ~EP_CTX_CYCLE_MASK;
+  }
   xhci_dbg_trace(xhci, trace_xhci_dbg_cancel_urb,
-   "Successful Set TR Deq Ptr cmd, deq = @%08llx",
-    le64_to_cpu(ep_ctx->deq));
-  if (xhci_trb_virt_to_dma(dev->eps[ep_index].queued_deq_seg,
-      dev->eps[ep_index].queued_deq_ptr) ==
-      (le64_to_cpu(ep_ctx->deq) & ~(EP_CTX_CYCLE_MASK))) {
+   "Successful Set TR Deq Ptr cmd, deq = @%08llx", deq);
+  if (xhci_trb_virt_to_dma(ep->queued_deq_seg,
+      ep->queued_deq_ptr) == deq) {
    /* Update the ring's dequeue segment and dequeue pointer
     * to reflect the new position.
     */
@@ -1147,8 +1156,7 @@ static void xhci_handle_cmd_set_deq(struct xhci_hcd *xhci, int slot_id,
   } else {
    xhci_warn(xhci, "Mismatch between completed Set TR Deq Ptr command & xHCI internal state.\n");
    xhci_warn(xhci, "ep deq seg = %p, deq ptr = %p\n",
-     dev->eps[ep_index].queued_deq_seg,
-     dev->eps[ep_index].queued_deq_ptr);
+      ep->queued_deq_seg, ep->queued_deq_ptr);
   }
  }
 
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index c7619d7..597ca78 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -714,6 +714,7 @@ struct xhci_ep_ctx {
 
 /* deq bitmasks */
 #define EP_CTX_CYCLE_MASK  (1 << 0)
+#define SCTX_DEQ_MASK   (~0xfL)
 
 
 /**
-- 
1.7.1