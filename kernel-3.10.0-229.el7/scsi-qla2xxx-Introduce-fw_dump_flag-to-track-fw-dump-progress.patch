From 526bf3f6c1c6e272c4bc57df4b1a73151651dfc8 Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Mon, 18 Aug 2014 19:56:40 -0400
Subject: [scsi] qla2xxx: Introduce fw_dump_flag to track fw dump progress

Message-id: <1408391817-6389-53-git-send-email-cdupuis@redhat.com>
Patchwork-id: 87938
O-Subject: [PATCH RHEL 7.1 e-stor 52/69] qla2xxx: Introduce fw_dump_flag to track fw dump progress.
Bugzilla: 1089346
RH-Acked-by: Rob Evers <revers@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Hiral Patel <hiral.patel@qlogic.com>

scsi commit id 61f098dde16c6b535124d3acc8851bacd3d7e0d4

Signed-off-by: Hiral Patel <hiral.patel@qlogic.com>
Signed-off-by: Saurav Kashyap <saurav.kashyap@qlogic.com>
Signed-off-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/qla2xxx/qla_dbg.c b/drivers/scsi/qla2xxx/qla_dbg.c
index e2d66e6..f6e45f8 100644
--- a/drivers/scsi/qla2xxx/qla_dbg.c
+++ b/drivers/scsi/qla2xxx/qla_dbg.c
@@ -191,9 +191,15 @@ qla24xx_dump_memory(struct qla_hw_data *ha, uint32_t *code_ram,
  if (rval != QLA_SUCCESS)
   return rval;
 
+ set_bit(RISC_SRAM_DUMP_CMPL, &ha->fw_dump_cap_flags);
+
  /* External Memory. */
- return qla24xx_dump_ram(ha, 0x100000, *nxt,
+ rval = qla24xx_dump_ram(ha, 0x100000, *nxt,
      ha->fw_memory_size - 0x100000 + 1, nxt);
+ if (rval == QLA_SUCCESS)
+  set_bit(RISC_EXT_MEM_DUMP_CMPL, &ha->fw_dump_cap_flags);
+
+ return rval;
 }
 
 static uint32_t *
@@ -211,12 +217,14 @@ qla24xx_read_window(struct device_reg_24xx __iomem *reg, uint32_t iobase,
 }
 
 void
-qla24xx_pause_risc(struct device_reg_24xx __iomem *reg)
+qla24xx_pause_risc(struct device_reg_24xx __iomem *reg, struct qla_hw_data *ha)
 {
  WRT_REG_DWORD(&reg->hccr, HCCRX_SET_RISC_PAUSE);
 
  /* 100 usec delay is sufficient enough for hardware to pause RISC */
  udelay(100);
+ if (RD_REG_DWORD(&reg->host_status) & HSRX_RISC_PAUSED)
+  set_bit(RISC_PAUSE_CMPL, &ha->fw_dump_cap_flags);
 }
 
 int
@@ -239,6 +247,8 @@ qla24xx_soft_reset(struct qla_hw_data *ha)
 
   udelay(10);
  }
+ if (!(RD_REG_DWORD(&reg->ctrl_status) & CSRX_DMA_ACTIVE))
+  set_bit(DMA_SHUTDOWN_CMPL, &ha->fw_dump_cap_flags);
 
  WRT_REG_DWORD(&reg->ctrl_status,
      CSRX_ISP_SOFT_RESET|CSRX_DMA_SHUTDOWN|MWB_4096_BYTES);
@@ -254,6 +264,9 @@ qla24xx_soft_reset(struct qla_hw_data *ha)
 
   udelay(10);
  }
+ if (!(RD_REG_DWORD(&reg->ctrl_status) & CSRX_ISP_SOFT_RESET))
+  set_bit(ISP_RESET_CMPL, &ha->fw_dump_cap_flags);
+
  WRT_REG_DWORD(&reg->hccr, HCCRX_CLR_RISC_RESET);
  RD_REG_DWORD(&reg->hccr);             /* PCI Posting. */
 
@@ -264,6 +277,8 @@ qla24xx_soft_reset(struct qla_hw_data *ha)
   else
    rval = QLA_FUNCTION_TIMEOUT;
  }
+ if (rval == QLA_SUCCESS)
+  set_bit(RISC_RDY_AFT_RESET, &ha->fw_dump_cap_flags);
 
  return rval;
 }
@@ -560,12 +575,13 @@ qla2xxx_dump_post_process(scsi_qla_host_t *vha, int rval)
 
  if (rval != QLA_SUCCESS) {
   ql_log(ql_log_warn, vha, 0xd000,
-      "Failed to dump firmware (%x).\n", rval);
+      "Failed to dump firmware (%x), dump status flags (0x%lx).\n",
+      rval, ha->fw_dump_cap_flags);
   ha->fw_dumped = 0;
  } else {
   ql_log(ql_log_info, vha, 0xd001,
-      "Firmware dump saved to temp buffer (%ld/%p).\n",
-      vha->host_no, ha->fw_dump);
+      "Firmware dump saved to temp buffer (%ld/%p), dump status flags (0x%lx).\n",
+      vha->host_no, ha->fw_dump, ha->fw_dump_cap_flags);
   ha->fw_dumped = 1;
   qla2x00_post_uevent_work(vha, QLA_UEVENT_CODE_FW_DUMP);
  }
@@ -954,6 +970,7 @@ qla24xx_fw_dump(scsi_qla_host_t *vha, int hardware_locked)
 
  risc_address = ext_mem_cnt = 0;
  flags = 0;
+ ha->fw_dump_cap_flags = 0;
 
  if (!hardware_locked)
   spin_lock_irqsave(&ha->hardware_lock, flags);
@@ -980,7 +997,7 @@ qla24xx_fw_dump(scsi_qla_host_t *vha, int hardware_locked)
   * Pause RISC. No need to track timeout, as resetting the chip
   * is the right approach incase of pause timeout
   */
- qla24xx_pause_risc(reg);
+ qla24xx_pause_risc(reg, ha);
 
  /* Host interface registers. */
  dmp_reg = &reg->flash_addr;
@@ -1204,6 +1221,7 @@ qla25xx_fw_dump(scsi_qla_host_t *vha, int hardware_locked)
 
  risc_address = ext_mem_cnt = 0;
  flags = 0;
+ ha->fw_dump_cap_flags = 0;
 
  if (!hardware_locked)
   spin_lock_irqsave(&ha->hardware_lock, flags);
@@ -1231,7 +1249,7 @@ qla25xx_fw_dump(scsi_qla_host_t *vha, int hardware_locked)
   * Pause RISC. No need to track timeout, as resetting the chip
   * is the right approach incase of pause timeout
   */
- qla24xx_pause_risc(reg);
+ qla24xx_pause_risc(reg, ha);
 
  /* Host/Risc registers. */
  iter_reg = fw->host_risc_reg;
@@ -1522,6 +1540,7 @@ qla81xx_fw_dump(scsi_qla_host_t *vha, int hardware_locked)
 
  risc_address = ext_mem_cnt = 0;
  flags = 0;
+ ha->fw_dump_cap_flags = 0;
 
  if (!hardware_locked)
   spin_lock_irqsave(&ha->hardware_lock, flags);
@@ -1548,7 +1567,7 @@ qla81xx_fw_dump(scsi_qla_host_t *vha, int hardware_locked)
   * Pause RISC. No need to track timeout, as resetting the chip
   * is the right approach incase of pause timeout
   */
- qla24xx_pause_risc(reg);
+ qla24xx_pause_risc(reg, ha);
 
  /* Host/Risc registers. */
  iter_reg = fw->host_risc_reg;
@@ -1842,6 +1861,7 @@ qla83xx_fw_dump(scsi_qla_host_t *vha, int hardware_locked)
 
  risc_address = ext_mem_cnt = 0;
  flags = 0;
+ ha->fw_dump_cap_flags = 0;
 
  if (!hardware_locked)
   spin_lock_irqsave(&ha->hardware_lock, flags);
@@ -1867,7 +1887,7 @@ qla83xx_fw_dump(scsi_qla_host_t *vha, int hardware_locked)
   * Pause RISC. No need to track timeout, as resetting the chip
   * is the right approach incase of pause timeout
   */
- qla24xx_pause_risc(reg);
+ qla24xx_pause_risc(reg, ha);
 
  WRT_REG_DWORD(&reg->iobase_addr, 0x6000);
  dmp_reg = &reg->iobase_window;
@@ -2290,9 +2310,11 @@ qla83xx_fw_dump(scsi_qla_host_t *vha, int hardware_locked)
    nxt += sizeof(fw->code_ram);
    nxt += (ha->fw_memory_size - 0x100000 + 1);
    goto copy_queue;
-  } else
+  } else {
+   set_bit(RISC_RDY_AFT_RESET, &ha->fw_dump_cap_flags);
    ql_log(ql_log_warn, vha, 0xd010,
        "bigger hammer success?\n");
+  }
  }
 
  rval = qla24xx_dump_memory(ha, fw->code_ram, sizeof(fw->code_ram),
diff --git a/drivers/scsi/qla2xxx/qla_dbg.h b/drivers/scsi/qla2xxx/qla_dbg.h
index ac56802..f2b9755 100644
--- a/drivers/scsi/qla2xxx/qla_dbg.h
+++ b/drivers/scsi/qla2xxx/qla_dbg.h
@@ -350,5 +350,6 @@ ql_log_pci(uint32_t, struct pci_dev *pdev, int32_t, const char *fmt, ...);
 #define ql_dbg_tgt_tmr 0x00001000 /* Target mode task management */
 extern int qla24xx_dump_ram(struct qla_hw_data *, uint32_t, uint32_t *,
  uint32_t, void **);
-extern void qla24xx_pause_risc(struct device_reg_24xx __iomem *);
+extern void qla24xx_pause_risc(struct device_reg_24xx __iomem *,
+ struct qla_hw_data *);
 extern int qla24xx_soft_reset(struct qla_hw_data *);
diff --git a/drivers/scsi/qla2xxx/qla_def.h b/drivers/scsi/qla2xxx/qla_def.h
index e983fa2..5ec56eb 100644
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@ -3127,6 +3127,13 @@ struct qla_hw_data {
  struct qla2xxx_fw_dump *fw_dump;
  uint32_t fw_dump_len;
  int  fw_dumped;
+ unsigned long fw_dump_cap_flags;
+#define RISC_PAUSE_CMPL  0
+#define DMA_SHUTDOWN_CMPL 1
+#define ISP_RESET_CMPL  2
+#define RISC_RDY_AFT_RESET 3
+#define RISC_SRAM_DUMP_CMPL 4
+#define RISC_EXT_MEM_DUMP_CMPL 5
  int  fw_dump_reading;
  int  prev_minidump_failed;
  dma_addr_t eft_dma;
diff --git a/drivers/scsi/qla2xxx/qla_init.c b/drivers/scsi/qla2xxx/qla_init.c
index 3090bdd..623ddcd 100644
--- a/drivers/scsi/qla2xxx/qla_init.c
+++ b/drivers/scsi/qla2xxx/qla_init.c
@@ -1476,6 +1476,7 @@ qla2x00_alloc_fw_dump(scsi_qla_host_t *vha)
  }
 
  ha->fw_dumped = 0;
+ ha->fw_dump_cap_flags = 0;
  fixed_size = mem_size = eft_size = fce_size = mq_size = 0;
  if (IS_QLA2100(ha) || IS_QLA2200(ha)) {
   fixed_size = sizeof(struct qla2100_fw_dump);
diff --git a/drivers/scsi/qla2xxx/qla_os.c b/drivers/scsi/qla2xxx/qla_os.c
index cdcfdc8..2ae3f39 100644
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@ -3581,6 +3581,7 @@ qla2x00_free_fw_dump(struct qla_hw_data *ha)
  ha->eft_dma = 0;
  ha->fw_dump = NULL;
  ha->fw_dumped = 0;
+ ha->fw_dump_cap_flags = 0;
  ha->fw_dump_reading = 0;
 }
 
-- 
1.7.1