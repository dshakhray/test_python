From 6d78e279a125ca676971ddb10e795f25c661719b Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 11:59:28 -0400
Subject: [infiniband] umad: Update module to [pr|dev]_* style print messages

Message-id: <fa4993aff45d5bd09a0f109c6a6cbf511207495d.1410425016.git.avadai@redhat.com>
Patchwork-id: 93700
O-Subject: [Patch RHEL7.1 V1 032/197] IB/umad: Update module to [pr|dev]_* style print messages
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Ira Weiny <ira.weiny@intel.com>

Use dev_* style print when struct device is available.

Also combine previously line broken user-visible strings as per
Documentation/CodingStyle:

"However, never break user-visible strings such as printk messages,
because that breaks the ability to grep for them."

Signed-off-by: Ira Weiny <ira.weiny@intel.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit f426a40eb695d315466f130618db30cafb27db90)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/core/user_mad.c b/drivers/infiniband/core/user_mad.c
index 1acb991..6be596d 100644
--- a/drivers/infiniband/core/user_mad.c
+++ b/drivers/infiniband/core/user_mad.c
@@ -33,6 +33,8 @@
  * SOFTWARE.
  */
 
+#define pr_fmt(fmt) "user_mad: " fmt
+
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/device.h>
@@ -673,10 +675,11 @@ found:
  if (!file->already_used) {
   file->already_used = 1;
   if (!file->use_pkey_index) {
-   printk(KERN_WARNING "user_mad: process %s did not enable "
-          "P_Key index support.\n", current->comm);
-   printk(KERN_WARNING "user_mad:   Documentation/infiniband/user_mad.txt "
-          "has info on the new ABI.\n");
+   dev_warn(file->port->dev,
+    "process %s did not enable P_Key index support.\n",
+    current->comm);
+   dev_warn(file->port->dev,
+    "   Documentation/infiniband/user_mad.txt has info on the new ABI.\n");
   }
  }
 
@@ -983,7 +986,7 @@ static CLASS_ATTR_STRING(abi_version, S_IRUGO,
 
 static dev_t overflow_maj;
 static DECLARE_BITMAP(overflow_map, IB_UMAD_MAX_PORTS);
-static int find_overflow_devnum(void)
+static int find_overflow_devnum(struct ib_device *device)
 {
  int ret;
 
@@ -991,7 +994,8 @@ static int find_overflow_devnum(void)
   ret = alloc_chrdev_region(&overflow_maj, 0, IB_UMAD_MAX_PORTS * 2,
        "infiniband_mad");
   if (ret) {
-   printk(KERN_ERR "user_mad: couldn't register dynamic device number\n");
+   dev_err(&device->dev,
+    "couldn't register dynamic device number\n");
    return ret;
   }
  }
@@ -1014,7 +1018,7 @@ static int ib_umad_init_port(struct ib_device *device, int port_num,
  devnum = find_first_zero_bit(dev_map, IB_UMAD_MAX_PORTS);
  if (devnum >= IB_UMAD_MAX_PORTS) {
   spin_unlock(&port_lock);
-  devnum = find_overflow_devnum();
+  devnum = find_overflow_devnum(device);
   if (devnum < 0)
    return -1;
 
@@ -1200,14 +1204,14 @@ static int __init ib_umad_init(void)
  ret = register_chrdev_region(base_dev, IB_UMAD_MAX_PORTS * 2,
          "infiniband_mad");
  if (ret) {
-  printk(KERN_ERR "user_mad: couldn't register device number\n");
+  pr_err("couldn't register device number\n");
   goto out;
  }
 
  umad_class = class_create(THIS_MODULE, "infiniband_mad");
  if (IS_ERR(umad_class)) {
   ret = PTR_ERR(umad_class);
-  printk(KERN_ERR "user_mad: couldn't create class infiniband_mad\n");
+  pr_err("couldn't create class infiniband_mad\n");
   goto out_chrdev;
  }
 
@@ -1215,13 +1219,13 @@ static int __init ib_umad_init(void)
 
  ret = class_create_file(umad_class, &class_attr_abi_version.attr);
  if (ret) {
-  printk(KERN_ERR "user_mad: couldn't create abi_version attribute\n");
+  pr_err("couldn't create abi_version attribute\n");
   goto out_class;
  }
 
  ret = ib_register_client(&umad_client);
  if (ret) {
-  printk(KERN_ERR "user_mad: couldn't register ib_umad client\n");
+  pr_err("couldn't register ib_umad client\n");
   goto out_class;
  }
 
-- 
1.7.1