From a6bd46faacdf250b18a346f70e1c549467ae309e Mon Sep 17 00:00:00 2001
From: Ilya Dryomov <ilya.dryomov@inktank.com>
Date: Tue, 18 Nov 2014 15:49:57 -0500
Subject: [net] ceph: use memalloc flags for net IO
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1416325805-26490-43-git-send-email-idryomov@redhat.com>
Patchwork-id: 100234
O-Subject: [RHEL7.1 PATCH 42/50] libceph: use memalloc flags for net IO
Bugzilla: 1165232
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Sage Weil <sweil@redhat.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>

From: Mike Christie <michaelc@cs.wisc.edu>

This patch has ceph's lib code use the memalloc flags.

If the VM layer needs to write data out to free up memory to handle new
allocation requests, the block layer must be able to make forward progress.
To handle that requirement we use structs like mempools to reserve memory for
objects like bios and requests.

The problem is when we send/receive block layer requests over the network
layer, net skb allocations can fail and the system can lock up.
To solve this, the memalloc related flags were added. NBD, iSCSI
and NFS uses these flags to tell the network/vm layer that it should
use memory reserves to fullfill allcation requests for structs like
skbs.

I am running ceph in a bunch of VMs in my laptop, so this patch was
not tested very harshly.

Signed-off-by: Mike Christie <michaelc@cs.wisc.edu>
Reviewed-by: Ilya Dryomov <idryomov@redhat.com>
(cherry picked from commit 89baaa570ab0b476db09408d209578cfed700e9f)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ceph/messenger.c b/net/ceph/messenger.c
index ad15a0f..ccc5415 100644
--- a/net/ceph/messenger.c
+++ b/net/ceph/messenger.c
@@ -481,7 +481,7 @@ static int ceph_tcp_connect(struct ceph_connection *con)
           IPPROTO_TCP, &sock);
  if (ret)
   return ret;
- sock->sk->sk_allocation = GFP_NOFS;
+ sock->sk->sk_allocation = GFP_NOFS | __GFP_MEMALLOC;
 
 #ifdef CONFIG_LOCKDEP
  lockdep_set_class(&sock->sk->sk_lock, &socket_class);
@@ -506,6 +506,9 @@ static int ceph_tcp_connect(struct ceph_connection *con)
 
   return ret;
  }
+
+ sk_set_memalloc(sock->sk);
+
  con->sock = sock;
  return 0;
 }
@@ -2771,8 +2774,11 @@ static void con_work(struct work_struct *work)
 {
  struct ceph_connection *con = container_of(work, struct ceph_connection,
          work.work);
+ unsigned long pflags = current->flags;
  bool fault;
 
+ current->flags |= PF_MEMALLOC;
+
  mutex_lock(&con->mutex);
  while (true) {
   int ret;
@@ -2826,6 +2832,8 @@ static void con_work(struct work_struct *work)
   con_fault_finish(con);
 
  con->ops->put(con);
+
+ tsk_restore_flags(current, pflags, PF_MEMALLOC);
 }
 
 /*
-- 
1.7.1