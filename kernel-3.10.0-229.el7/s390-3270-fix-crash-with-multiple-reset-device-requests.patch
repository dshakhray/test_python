From dd36b7c45e3e175ac0d71716a0839748815b4455 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Tue, 20 May 2014 14:47:56 -0400
Subject: [s390] 3270: fix crash with multiple reset device requests

Message-id: <1400597276-11666-1-git-send-email-brueckner@redhat.com>
Patchwork-id: 79985
O-Subject: [RHEL7.1 PATCH] [s390] s390/3270: fix crash with multiple reset device requests
Bugzilla: 1088320
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit bd1cb5de140d844f63389bf21b336c194a8c83a1
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Mar 21 15:24:27 2014 +0100

    s390/3270: fix crash with multiple reset device requests

    If the 3270 device is detached the initial reset device request will
    stays pending until the device is operational. A second reset device
    call will reuse the same request structure which will cause an oops.
    Add a check to see if the reset device request is already pending
    and do nothing in this case.

    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1088320
https://bugzilla.redhat.com/show_bug.cgi?id=1088320

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version v3.15-rc1
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=bd1cb5de140d844f63389bf21b336c194a8c83a1

This patch will be requested for a z-stream update.

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7475637

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/char/raw3270.c b/drivers/s390/char/raw3270.c
index 24a08e8..e86c403 100644
--- a/drivers/s390/char/raw3270.c
+++ b/drivers/s390/char/raw3270.c
@@ -623,6 +623,8 @@ raw3270_reset_device_cb(struct raw3270_request *rq, void *data)
   raw3270_size_device_done(rp);
  } else
   raw3270_writesf_readpart(rp);
+ memset(&rp->init_reset, 0, sizeof(rp->init_reset));
+ memset(&rp->init_data, 0, sizeof(rp->init_data));
 }
 
 static int
@@ -630,9 +632,10 @@ __raw3270_reset_device(struct raw3270 *rp)
 {
  int rc;
 
+ /* Check if reset is already pending */
+ if (rp->init_reset.view)
+  return -EBUSY;
  /* Store reset data stream to init_data/init_reset */
- memset(&rp->init_reset, 0, sizeof(rp->init_reset));
- memset(&rp->init_data, 0, sizeof(rp->init_data));
  rp->init_data[0] = TW_KR;
  rp->init_reset.ccw.cmd_code = TC_EWRITEA;
  rp->init_reset.ccw.flags = CCW_FLAG_SLI;
@@ -826,7 +829,7 @@ raw3270_create_device(struct ccw_device *cdev)
  char *ascebc;
  int rc;
 
- rp = kmalloc(sizeof(struct raw3270), GFP_KERNEL | GFP_DMA);
+ rp = kzalloc(sizeof(struct raw3270), GFP_KERNEL | GFP_DMA);
  if (!rp)
   return ERR_PTR(-ENOMEM);
  ascebc = kmalloc(256, GFP_KERNEL);
-- 
1.7.1