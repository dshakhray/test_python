From ce1abad8613390482ea3402d9c39a793c3eaf3d9 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:22:19 -0400
Subject: [cpufreq] Clear policy->cpus bits in __cpufreq_remove_dev_finish()

Message-id: <1409235879-1283-46-git-send-email-prarit@redhat.com>
Patchwork-id: 89368
O-Subject: [RHEL7.1 PATCH BZ 1134639 045/185] cpufreq: Clear policy->cpus bits in __cpufreq_remove_dev_finish()
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 9c8f1ee40b6368e6b2775c9c9f816e2a5dca3c07
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Sep 12 17:06:33 2013 +0530

    cpufreq: Clear policy->cpus bits in __cpufreq_remove_dev_finish()

    This broke after a recent change "cedb70a cpufreq: Split __cpufreq_remove_dev()
    into two parts" from Srivatsa.

    Consider a scenario where we have two CPUs in a policy (0 & 1) and we are
    removing CPU 1. On the call to __cpufreq_remove_dev_prepare() we have cleared 1
    from policy->cpus and now on a call to __cpufreq_remove_dev_finish() we read
    cpumask_weight of policy->cpus, which will come as 1 and this code will behave
    as if we are removing the last CPU from policy :)

    Fix it by clearing the CPU mask in __cpufreq_remove_dev_finish() instead of
    __cpufreq_remove_dev_prepare().

    Tested-by: Stephen Warren <swarren@wwwdotorg.org>
    Reviewed-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 33c2754..a2f6e34 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1123,7 +1123,7 @@ static int cpufreq_nominate_new_policy_cpu(struct cpufreq_policy *policy,
  int ret;
 
  /* first sibling now owns the new sysfs dir */
- cpu_dev = get_cpu_device(cpumask_first(policy->cpus));
+ cpu_dev = get_cpu_device(cpumask_any_but(policy->cpus, old_cpu));
 
  /* Don't touch sysfs files during light-weight tear-down */
  if (frozen)
@@ -1187,12 +1187,9 @@ static int __cpufreq_remove_dev_prepare(struct device *dev,
    policy->governor->name, CPUFREQ_NAME_LEN);
 #endif
 
- WARN_ON(lock_policy_rwsem_write(cpu));
+ lock_policy_rwsem_read(cpu);
  cpus = cpumask_weight(policy->cpus);
-
- if (cpus > 1)
-  cpumask_clear_cpu(cpu, policy->cpus);
- unlock_policy_rwsem_write(cpu);
+ unlock_policy_rwsem_read(cpu);
 
  if (cpu != policy->cpu) {
   if (!frozen)
@@ -1235,9 +1232,12 @@ static int __cpufreq_remove_dev_finish(struct device *dev,
   return -EINVAL;
  }
 
- lock_policy_rwsem_read(cpu);
+ WARN_ON(lock_policy_rwsem_write(cpu));
  cpus = cpumask_weight(policy->cpus);
- unlock_policy_rwsem_read(cpu);
+
+ if (cpus > 1)
+  cpumask_clear_cpu(cpu, policy->cpus);
+ unlock_policy_rwsem_write(cpu);
 
  /* If cpu is last user of policy, free policy */
  if (cpus == 1) {
-- 
1.7.1