From 78a4bb1d5af930d112b37394dc406fba0284bc0f Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:51:36 -0400
Subject: [tools] perf/probe: Expand given path to absolute path

Message-id: <1408953210-26343-209-git-send-email-jolsa@redhat.com>
Patchwork-id: 88979
O-Subject: [PATCH RHEL7.1 BZ1133083 208/322] perf probe: Expand given path to absolute path
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 8a613d40e389b723fd5889ac8d4033ed4030be31
Author: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
Date: Thu Dec 26 05:41:50 2013 +0000

description
===========
Expand given path to absolute path in the option parser, except for a
module name.

Since realpath at later stage in processing several probe point, can be
called several times (even if currently doesn't, it can happen when we
expands the feature), it is waste of the performance.

Processing it once at the early stage can avoid that.

Changes from previous one:
 - Fix not to print null string.
 - Allocate memory for given path/module name everytime.

[ Clarified the pr_warning message as per David Ahern's suggestion ]
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-probe.c b/tools/perf/builtin-probe.c
index c98ccb5..1792a3f 100644
--- a/tools/perf/builtin-probe.c
+++ b/tools/perf/builtin-probe.c
@@ -169,6 +169,7 @@ static int opt_set_target(const struct option *opt, const char *str,
    int unset __maybe_unused)
 {
  int ret = -ENOENT;
+ char *tmp;
 
  if  (str && !params.target) {
   if (!strcmp(opt->long_name, "exec"))
@@ -180,7 +181,19 @@ static int opt_set_target(const struct option *opt, const char *str,
   else
    return ret;
 
-  params.target = str;
+  /* Expand given path to absolute path, except for modulename */
+  if (params.uprobes || strchr(str, '/')) {
+   tmp = realpath(str, NULL);
+   if (!tmp) {
+    pr_warning("Failed to get the absolute path of %s: %m\n", str);
+    return ret;
+   }
+  } else {
+   tmp = strdup(str);
+   if (!tmp)
+    return -ENOMEM;
+  }
+  params.target = tmp;
   ret = 0;
  }
 
diff --git a/tools/perf/util/probe-event.c b/tools/perf/util/probe-event.c
index 544ac18..68013b9 100644
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@ -2281,7 +2281,7 @@ static int convert_name_to_addr(struct perf_probe_event *pev, const char *exec)
  struct perf_probe_point *pp = &pev->point;
  struct symbol *sym;
  struct map *map = NULL;
- char *function = NULL, *name = NULL;
+ char *function = NULL;
  int ret = -EINVAL;
  unsigned long long vaddr = 0;
 
@@ -2297,12 +2297,7 @@ static int convert_name_to_addr(struct perf_probe_event *pev, const char *exec)
   goto out;
  }
 
- name = realpath(exec, NULL);
- if (!name) {
-  pr_warning("Cannot find realpath for %s.\n", exec);
-  goto out;
- }
- map = dso__new_map(name);
+ map = dso__new_map(exec);
  if (!map) {
   pr_warning("Cannot find appropriate DSO for %s.\n", exec);
   goto out;
@@ -2367,7 +2362,5 @@ out:
  }
  if (function)
   free(function);
- if (name)
-  free(name);
  return ret;
 }
-- 
1.7.1