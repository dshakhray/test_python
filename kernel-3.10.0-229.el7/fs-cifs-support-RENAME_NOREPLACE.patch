From 12a1ea7b03b62f5f6ac8c2c8c38f2a2f0f678b0d Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:34:22 -0500
Subject: [fs] cifs: support RENAME_NOREPLACE

Message-id: <20141125163421.18115.43571.stgit@warthog.procyon.org.uk>
Patchwork-id: 100920
O-Subject: [PATCH 20/47] cifs: support RENAME_NOREPLACE
Bugzilla: 985875
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Miklos Szeredi <mszeredi@suse.cz>

This flag gives CIFS the ability to support its native rename semantics.

Implementation is simple: just bail out before trying to hack around the
noreplace semantics.

Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
Cc: Steve French <smfrench@gmail.com>
Signed-off-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Original-commit: 7c33d5972ce382bcc506d16235f1e9b7d22cbef8
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/cifs/cifsfs.c b/fs/cifs/cifsfs.c
index bad8ef5..4c75149 100644
--- a/fs/cifs/cifsfs.c
+++ b/fs/cifs/cifsfs.c
@@ -835,7 +835,7 @@ const struct inode_operations cifs_dir_inode_ops = {
  .link = cifs_hardlink,
  .mkdir = cifs_mkdir,
  .rmdir = cifs_rmdir,
- .rename = cifs_rename,
+ .rename2 = cifs_rename2,
  .permission = cifs_permission,
 /* revalidate:cifs_revalidate,   */
  .setattr = cifs_setattr,
diff --git a/fs/cifs/cifsfs.h b/fs/cifs/cifsfs.h
index 3d43b4e..9f21c7c 100644
--- a/fs/cifs/cifsfs.h
+++ b/fs/cifs/cifsfs.h
@@ -68,8 +68,8 @@ extern int cifs_hardlink(struct dentry *, struct inode *, struct dentry *);
 extern int cifs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
 extern int cifs_mkdir(struct inode *, struct dentry *, umode_t);
 extern int cifs_rmdir(struct inode *, struct dentry *);
-extern int cifs_rename(struct inode *, struct dentry *, struct inode *,
-         struct dentry *);
+extern int cifs_rename2(struct inode *, struct dentry *, struct inode *,
+   struct dentry *, unsigned int);
 extern int cifs_revalidate_file_attr(struct file *filp);
 extern int cifs_revalidate_dentry_attr(struct dentry *);
 extern int cifs_revalidate_file(struct file *filp);
diff --git a/fs/cifs/inode.c b/fs/cifs/inode.c
index 9ff8df8..aa2446b 100644
--- a/fs/cifs/inode.c
+++ b/fs/cifs/inode.c
@@ -1627,8 +1627,9 @@ do_rename_exit:
 }
 
 int
-cifs_rename(struct inode *source_dir, struct dentry *source_dentry,
-     struct inode *target_dir, struct dentry *target_dentry)
+cifs_rename2(struct inode *source_dir, struct dentry *source_dentry,
+      struct inode *target_dir, struct dentry *target_dentry,
+      unsigned int flags)
 {
  char *from_name = NULL;
  char *to_name = NULL;
@@ -1640,6 +1641,9 @@ cifs_rename(struct inode *source_dir, struct dentry *source_dentry,
  unsigned int xid;
  int rc, tmprc;
 
+ if (flags & ~RENAME_NOREPLACE)
+  return -EINVAL;
+
  cifs_sb = CIFS_SB(source_dir->i_sb);
  tlink = cifs_sb_tlink(cifs_sb);
  if (IS_ERR(tlink))
@@ -1667,6 +1671,12 @@ cifs_rename(struct inode *source_dir, struct dentry *source_dentry,
  rc = cifs_do_rename(xid, source_dentry, from_name, target_dentry,
        to_name);
 
+ /*
+  * No-replace is the natural behavior for CIFS, so skip unlink hacks.
+  */
+ if (flags & RENAME_NOREPLACE)
+  goto cifs_rename_exit;
+
  if (rc == -EEXIST && tcon->unix_ext) {
   /*
    * Are src and dst hardlinks of same inode? We can only tell
-- 
1.7.1