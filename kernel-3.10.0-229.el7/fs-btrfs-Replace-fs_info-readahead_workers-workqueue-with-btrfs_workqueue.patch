From 1772c3a5a8bb703a1178200cb4e331ebc9cfe9a9 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:01:58 -0400
Subject: [fs] btrfs: Replace fs_info->readahead_workers workqueue with btrfs_workqueue

Message-id: <1407179109-13714-232-git-send-email-sandeen@redhat.com>
Patchwork-id: 87305
O-Subject: [RHEL7.1 PATCH 231/422] btrfs: Replace fs_info->readahead_workers workqueue with btrfs_workqueue.
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Qu Wenruo <quwenruo@cn.fujitsu.com>

commit 736cfa15e89a654436d4149c109bf1ae09fc67cf
Author: Qu Wenruo <quwenruo@cn.fujitsu.com>
Date:   Fri Feb 28 10:46:13 2014 +0800

    btrfs: Replace fs_info->readahead_workers workqueue with btrfs_workqueue.

    Replace the fs_info->readahead_workers with the newly created
    btrfs_workqueue.

    Signed-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
    Tested-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ctree.h b/fs/btrfs/ctree.h
index e5c94cb..b5f2a19 100644
--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -1517,7 +1517,7 @@ struct btrfs_fs_info {
  struct btrfs_workqueue_struct *endio_freespace_worker;
  struct btrfs_workqueue_struct *submit_workers;
  struct btrfs_workqueue_struct *caching_workers;
- struct btrfs_workers readahead_workers;
+ struct btrfs_workqueue_struct *readahead_workers;
 
  /*
   * fixup workers take dirty pages that didn't properly go through
diff --git a/fs/btrfs/disk-io.c b/fs/btrfs/disk-io.c
index cf848dd..a558df9 100644
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -2007,7 +2007,7 @@ static void btrfs_stop_all_workers(struct btrfs_fs_info *fs_info)
  btrfs_destroy_workqueue(fs_info->submit_workers);
  btrfs_stop_workers(&fs_info->delayed_workers);
  btrfs_destroy_workqueue(fs_info->caching_workers);
- btrfs_stop_workers(&fs_info->readahead_workers);
+ btrfs_destroy_workqueue(fs_info->readahead_workers);
  btrfs_destroy_workqueue(fs_info->flush_workers);
  btrfs_stop_workers(&fs_info->qgroup_rescan_workers);
 }
@@ -2521,14 +2521,11 @@ int open_ctree(struct super_block *sb,
  btrfs_init_workers(&fs_info->delayed_workers, "delayed-meta",
       fs_info->thread_pool_size,
       &fs_info->generic_worker);
- btrfs_init_workers(&fs_info->readahead_workers, "readahead",
-      fs_info->thread_pool_size,
-      &fs_info->generic_worker);
+ fs_info->readahead_workers =
+  btrfs_alloc_workqueue("readahead", flags, max_active, 2);
  btrfs_init_workers(&fs_info->qgroup_rescan_workers, "qgroup-rescan", 1,
       &fs_info->generic_worker);
 
- fs_info->readahead_workers.idle_thresh = 2;
-
  /*
   * btrfs_start_workers can really only fail because of ENOMEM so just
   * return -ENOMEM if any of these fail.
@@ -2536,7 +2533,6 @@ int open_ctree(struct super_block *sb,
  ret = btrfs_start_workers(&fs_info->generic_worker);
  ret |= btrfs_start_workers(&fs_info->fixup_workers);
  ret |= btrfs_start_workers(&fs_info->delayed_workers);
- ret |= btrfs_start_workers(&fs_info->readahead_workers);
  ret |= btrfs_start_workers(&fs_info->qgroup_rescan_workers);
  if (ret) {
   err = -ENOMEM;
@@ -2548,7 +2544,7 @@ int open_ctree(struct super_block *sb,
        fs_info->endio_meta_write_workers &&
        fs_info->endio_write_workers && fs_info->endio_raid56_workers &&
        fs_info->endio_freespace_worker && fs_info->rmw_workers &&
-       fs_info->caching_workers)) {
+       fs_info->caching_workers && fs_info->readahead_workers)) {
   err = -ENOMEM;
   goto fail_sb_buffer;
  }
diff --git a/fs/btrfs/reada.c b/fs/btrfs/reada.c
index 31c797c..9e01d36 100644
--- a/fs/btrfs/reada.c
+++ b/fs/btrfs/reada.c
@@ -91,7 +91,8 @@ struct reada_zone {
 };
 
 struct reada_machine_work {
- struct btrfs_work work;
+ struct btrfs_work_struct
+    work;
  struct btrfs_fs_info *fs_info;
 };
 
@@ -733,7 +734,7 @@ static int reada_start_machine_dev(struct btrfs_fs_info *fs_info,
 
 }
 
-static void reada_start_machine_worker(struct btrfs_work *work)
+static void reada_start_machine_worker(struct btrfs_work_struct *work)
 {
  struct reada_machine_work *rmw;
  struct btrfs_fs_info *fs_info;
@@ -793,10 +794,10 @@ static void reada_start_machine(struct btrfs_fs_info *fs_info)
   /* FIXME we cannot handle this properly right now */
   BUG();
  }
- rmw->work.func = reada_start_machine_worker;
+ btrfs_init_work(&rmw->work, reada_start_machine_worker, NULL, NULL);
  rmw->fs_info = fs_info;
 
- btrfs_queue_worker(&fs_info->readahead_workers, &rmw->work);
+ btrfs_queue_work(fs_info->readahead_workers, &rmw->work);
 }
 
 #ifdef DEBUG
diff --git a/fs/btrfs/super.c b/fs/btrfs/super.c
index b84fbe0..ce9d012 100644
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -1336,7 +1336,7 @@ static void btrfs_resize_thread_pool(struct btrfs_fs_info *fs_info,
  btrfs_workqueue_set_max(fs_info->endio_write_workers, new_pool_size);
  btrfs_workqueue_set_max(fs_info->endio_freespace_worker, new_pool_size);
  btrfs_set_max_workers(&fs_info->delayed_workers, new_pool_size);
- btrfs_set_max_workers(&fs_info->readahead_workers, new_pool_size);
+ btrfs_workqueue_set_max(fs_info->readahead_workers, new_pool_size);
  btrfs_set_max_workers(&fs_info->scrub_wr_completion_workers,
          new_pool_size);
 }
-- 
1.7.1