From 1a5960a25356d349f997d494571e540a89f1b932 Mon Sep 17 00:00:00 2001
From: David Milburn <dmilburn@redhat.com>
Date: Mon, 18 Aug 2014 19:58:44 -0400
Subject: [block] nvme: Prevent possible NULL pointer dereference

Message-id: <1408391935-24886-12-git-send-email-dmilburn@redhat.com>
Patchwork-id: 87895
O-Subject: [RHEL7.1 PATCH BZ 1111259 11/22] NVMe: Prevent possible NULL pointer dereference
Bugzilla: 1111259
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Santosh Y <santosh.sy@samsung.com>

kmalloc() used by the nvme_alloc_iod() to allocate memory for 'iod'
can fail. So check the return value.

Signed-off-by: Santosh Y <santosh.sy@samsung.com>
Signed-off-by: Matthew Wilcox <matthew.r.wilcox@intel.com>
(cherry picked from commit 6808c5fb7fc1574c7608a38c9819f1639d89c3d0)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/nvme-core.c b/drivers/block/nvme-core.c
index 0c34682..4f0f4b1 100644
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@ -1569,7 +1569,11 @@ struct nvme_iod *nvme_map_user_pages(struct nvme_dev *dev, int write,
   goto put_pages;
  }
 
+ err = -ENOMEM;
  iod = nvme_alloc_iod(count, length, GFP_KERNEL);
+ if (!iod)
+  goto put_pages;
+
  sg = iod->sg;
  sg_init_table(sg, count);
  for (i = 0; i < count; i++) {
@@ -1582,7 +1586,6 @@ struct nvme_iod *nvme_map_user_pages(struct nvme_dev *dev, int write,
  sg_mark_end(&sg[i - 1]);
  iod->nents = count;
 
- err = -ENOMEM;
  nents = dma_map_sg(&dev->pci_dev->dev, sg, count,
     write ? DMA_TO_DEVICE : DMA_FROM_DEVICE);
  if (!nents)
-- 
1.7.1