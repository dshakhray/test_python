From 701a11d74ac50881640c5b725232e2c32e58aed2 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:02 -0400
Subject: [fs] ext4: remove ext4_ioend_wait()

Message-id: <1414058125-4183-29-git-send-email-lczerner@redhat.com>
Patchwork-id: 98125
O-Subject: [RHEL 7.1 PATCH v2 028/171] ext4: remove ext4_ioend_wait()
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 5dc23bdd5f846ef868e82f789dfd9b13093f9ba6

 Now that we clear PageWriteback after extent conversion, there's no
 need to wait for io_end processing in ext4_evict_inode().  Running
 AIO/DIO keeps file reference until aio_complete() is called so
 ext4_evict_inode() cannot be called.  For io_end structures resulting
 from buffered IO waiting is happening because we wait for
 PageWriteback in truncate_inode_pages().

 Reviewed-by: Zheng Liu <wenqing.lz@taobao.com>
 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 49d3653..48720ab 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2658,7 +2658,6 @@ extern int ext4_move_extents(struct file *o_filp, struct file *d_filp,
 /* page-io.c */
 extern int __init ext4_init_pageio(void);
 extern void ext4_exit_pageio(void);
-extern void ext4_ioend_shutdown(struct inode *);
 extern ext4_io_end_t *ext4_init_io_end(struct inode *inode, gfp_t flags);
 extern ext4_io_end_t *ext4_get_io_end(ext4_io_end_t *io_end);
 extern int ext4_put_io_end(ext4_io_end_t *io_end);
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 8336bd7..5e2b087 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -215,7 +215,8 @@ void ext4_evict_inode(struct inode *inode)
    filemap_write_and_wait(&inode->i_data);
   }
   truncate_inode_pages_final(&inode->i_data);
-  ext4_ioend_shutdown(inode);
+
+  WARN_ON(atomic_read(&EXT4_I(inode)->i_ioend_count));
   goto no_delete;
  }
 
@@ -225,8 +226,8 @@ void ext4_evict_inode(struct inode *inode)
  if (ext4_should_order_data(inode))
   ext4_begin_ordered_truncate(inode, 0);
  truncate_inode_pages_final(&inode->i_data);
- ext4_ioend_shutdown(inode);
 
+ WARN_ON(atomic_read(&EXT4_I(inode)->i_ioend_count));
  if (is_bad_inode(inode))
   goto no_delete;
 
diff --git a/fs/ext4/page-io.c b/fs/ext4/page-io.c
index 31671bc..7a5342f 100644
--- a/fs/ext4/page-io.c
+++ b/fs/ext4/page-io.c
@@ -47,25 +47,6 @@ void ext4_exit_pageio(void)
 }
 
 /*
- * This function is called by ext4_evict_inode() to make sure there is
- * no more pending I/O completion work left to do.
- */
-void ext4_ioend_shutdown(struct inode *inode)
-{
- wait_queue_head_t *wq = ext4_ioend_wq(inode);
-
- wait_event(*wq, (atomic_read(&EXT4_I(inode)->i_ioend_count) == 0));
- /*
-  * We need to make sure the work structure is finished being
-  * used before we let the inode get destroyed.
-  */
- if (work_pending(&EXT4_I(inode)->i_rsv_conversion_work))
-  cancel_work_sync(&EXT4_I(inode)->i_rsv_conversion_work);
- if (work_pending(&EXT4_I(inode)->i_unrsv_conversion_work))
-  cancel_work_sync(&EXT4_I(inode)->i_unrsv_conversion_work);
-}
-
-/*
  * Print an buffer I/O error compatible with the fs/buffer.c.  This
  * provides compatibility with dmesg scrapers that look for a specific
  * buffer I/O error message.  We really need a unified error reporting
-- 
1.7.1