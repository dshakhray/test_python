From cd40b56fb327c32b6e38ec3bc6998bcb2966a0a3 Mon Sep 17 00:00:00 2001
From: Nikolay Aleksandrov <nikolay@redhat.com>
Date: Mon, 1 Sep 2014 13:33:15 -0400
Subject: [crypto] qat: change slice->regions to slice->region

Message-id: <1409578401-26943-24-git-send-email-nikolay@redhat.com>
Patchwork-id: 90100
O-Subject: [RHEL7.1 PATCH BZ 1091130 23/29] crypto: qat - change slice->regions to slice->region
Bugzilla: 1091130
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Herbert Xu <herbert.xu@redhat.com>

From: Tadeusz Struk <tadeusz.struk@intel.com>

Change ptr name slice->regions to slice->region to reflect the same
in the page struct.

Signed-off-by: Pingchao Yang <pingchao.yang@intel.com>
Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 8c1f8e3bbf60d0d06190be81f55d5199d52a463f)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/crypto/qat/qat_common/icp_qat_uclo.h b/drivers/crypto/qat/qat_common/icp_qat_uclo.h
index 120fbce..2132a8c 100644
--- a/drivers/crypto/qat/qat_common/icp_qat_uclo.h
+++ b/drivers/crypto/qat/qat_common/icp_qat_uclo.h
@@ -124,7 +124,7 @@ struct icp_qat_uclo_region {
 };
 
 struct icp_qat_uclo_aeslice {
- struct icp_qat_uclo_region *regions;
+ struct icp_qat_uclo_region *region;
  struct icp_qat_uclo_page *page;
  struct icp_qat_uclo_page *cur_page[ICP_QAT_UCLO_MAX_CTX];
  struct icp_qat_uclo_encapme *encap_image;
diff --git a/drivers/crypto/qat/qat_common/qat_uclo.c b/drivers/crypto/qat/qat_common/qat_uclo.c
index b1a16eb..557fa60 100644
--- a/drivers/crypto/qat/qat_common/qat_uclo.c
+++ b/drivers/crypto/qat/qat_common/qat_uclo.c
@@ -79,37 +79,37 @@ static int qat_uclo_init_ae_data(struct icp_qat_uclo_objhandle *obj_handle,
  } else {
   ae_slice->ctx_mask_assigned = 0;
  }
- ae_slice->regions = kzalloc(sizeof(*ae_slice->regions), GFP_KERNEL);
- if (!ae_slice->regions)
+ ae_slice->region = kzalloc(sizeof(*ae_slice->region), GFP_KERNEL);
+ if (!ae_slice->region)
   return -ENOMEM;
  ae_slice->page = kzalloc(sizeof(*ae_slice->page), GFP_KERNEL);
  if (!ae_slice->page)
   goto out_err;
  page = ae_slice->page;
  page->encap_page = encap_image->page;
- ae_slice->page->region = ae_slice->regions;
+ ae_slice->page->region = ae_slice->region;
  ae_data->slice_num++;
  return 0;
 out_err:
- kfree(ae_slice->regions);
- ae_slice->regions = NULL;
+ kfree(ae_slice->region);
+ ae_slice->region = NULL;
  return -ENOMEM;
 }
 
 static int qat_uclo_free_ae_data(struct icp_qat_uclo_aedata *ae_data)
 {
- unsigned int ss = 0;
+ unsigned int i;
 
  if (!ae_data) {
   pr_err("QAT: bad argument, ae_data is NULL\n ");
   return -EINVAL;
  }
 
- for (ss = 0; ss < ae_data->slice_num; ss++) {
-  kfree(ae_data->ae_slices[ss].regions);
-  ae_data->ae_slices[ss].regions = NULL;
-  kfree(ae_data->ae_slices[ss].page);
-  ae_data->ae_slices[ss].page = NULL;
+ for (i = 0; i < ae_data->slice_num; i++) {
+  kfree(ae_data->ae_slices[i].region);
+  ae_data->ae_slices[i].region = NULL;
+  kfree(ae_data->ae_slices[i].page);
+  ae_data->ae_slices[i].page = NULL;
  }
  return 0;
 }
-- 
1.7.1