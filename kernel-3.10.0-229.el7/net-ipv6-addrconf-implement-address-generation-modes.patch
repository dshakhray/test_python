From 1c01deeb98b048960c2155a89bfd028239515093 Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jpirko@redhat.com>
Date: Mon, 14 Jul 2014 11:47:59 -0400
Subject: [net] ipv6: addrconf: implement address generation modes

Message-id: <1405338479-17101-3-git-send-email-jpirko@redhat.com>
Patchwork-id: 85735
O-Subject: [patch rhel7 net 3/3] ipv6: addrconf: implement address generation modes
Bugzilla: 1107369
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>

BZ1107369
https://brewweb.devel.redhat.com/taskinfo?taskID=7696184
Tested by me and dcbw

upstream (net-next) commit bc91b0f07ada5535427373a4e2050877bcc12218
Author: Jiri Pirko <jiri@resnulli.us>
Date:   Fri Jul 11 21:10:18 2014 +0200

    ipv6: addrconf: implement address generation modes

    This patch introduces a possibility for userspace to set various (so far
    two) modes of generating addresses. This is useful for example for
    NetworkManager because it can set the mode to NONE and take care of link
    local addresses itself. That allow it to have the interface up,
    monitoring carrier but still don't have any addresses on it.

    One more use-case by Dan Williams:
    <quote>
    WWAN devices often have their LL address provided by the firmware of the
    device, which sometimes refuses to respond to incorrect LL addresses
    when doing DHCPv6 or IPv6 ND.  The kernel cannot generate the correct LL
    address for two reasons:

    1) WWAN pseudo-ethernet interfaces often construct a fake MAC address,
    or read a meaningless MAC address from the firmware.  Thus the EUI64 and
    the IPv6LL address the kernel assigns will be wrong.  The real LL
    address is often retrieved from the firmware with AT or proprietary
    commands.

    2) WWAN PPP interfaces receive their LL address from IPV6CP, not from
    kernel assignments.  Only after IPV6CP has completed do we know the LL
    address of the PPP interface and its peer.  But the kernel has already
    assigned an incorrect LL address to the interface.

    So being able to suppress the kernel LL address generation and assign
    the one retrieved from the firmware is less complicated and more robust.
    </quote>

Signed-off-by: Jiri Pirko <jpirko@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/if_inet6.h b/include/net/if_inet6.h
index dc59069..669a845 100644
--- a/include/net/if_inet6.h
+++ b/include/net/if_inet6.h
@@ -206,6 +206,9 @@ struct inet6_dev {
 
  unsigned long  tstamp; /* ipv6InterfaceTable update timestamp */
  struct rcu_head  rcu;
+#ifndef __GENKSYMS__
+ __u8   addr_gen_mode;
+#endif
 };
 
 static inline void ipv6_eth_mc_map(const struct in6_addr *addr, char *buf)
diff --git a/include/uapi/linux/if_link.h b/include/uapi/linux/if_link.h
index 4894624..16e4e19 100644
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@ -203,11 +203,17 @@ enum {
  IFLA_INET6_CACHEINFO, /* time values and max reasm size */
  IFLA_INET6_ICMP6STATS, /* statistics (icmpv6)  */
  IFLA_INET6_TOKEN, /* device token   */
+ IFLA_INET6_ADDR_GEN_MODE, /* implicit address generator mode */
  __IFLA_INET6_MAX
 };
 
 #define IFLA_INET6_MAX (__IFLA_INET6_MAX - 1)
 
+enum in6_addr_gen_mode {
+ IN6_ADDR_GEN_MODE_EUI64,
+ IN6_ADDR_GEN_MODE_NONE,
+};
+
 enum {
  BRIDGE_MODE_UNSPEC,
  BRIDGE_MODE_HAIRPIN,
diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index f068408..12f48eb 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -2681,9 +2681,25 @@ static void addrconf_add_linklocal(struct inet6_dev *idev, const struct in6_addr
  }
 }
 
+static void addrconf_addr_gen(struct inet6_dev *idev, bool prefix_route)
+{
+ if (idev->addr_gen_mode == IN6_ADDR_GEN_MODE_EUI64) {
+  struct in6_addr addr;
+
+  ipv6_addr_set(&addr,  htonl(0xFE800000), 0, 0, 0);
+  /* addrconf_add_linklocal also adds a prefix_route and we
+   * only need to care about prefix routes if ipv6_generate_eui64
+   * couldn't generate one.
+   */
+  if (ipv6_generate_eui64(addr.s6_addr + 8, idev->dev) == 0)
+   addrconf_add_linklocal(idev, &addr);
+  else if (prefix_route)
+   addrconf_prefix_route(&addr, 64, idev->dev, 0, 0);
+ }
+}
+
 static void addrconf_dev_config(struct net_device *dev)
 {
- struct in6_addr addr;
  struct inet6_dev *idev;
 
  ASSERT_RTNL();
@@ -2702,11 +2718,7 @@ static void addrconf_dev_config(struct net_device *dev)
  if (IS_ERR(idev))
   return;
 
- memset(&addr, 0, sizeof(struct in6_addr));
- addr.s6_addr32[0] = htonl(0xFE800000);
-
- if (ipv6_generate_eui64(addr.s6_addr + 8, dev) == 0)
-  addrconf_add_linklocal(idev, &addr);
+ addrconf_addr_gen(idev, false);
 }
 
 #if IS_ENABLED(CONFIG_IPV6_SIT)
@@ -2728,11 +2740,7 @@ static void addrconf_sit_config(struct net_device *dev)
  }
 
  if (dev->priv_flags & IFF_ISATAP) {
-  struct in6_addr addr;
-
-  ipv6_addr_set(&addr,  htonl(0xFE800000), 0, 0, 0);
-  if (!ipv6_generate_eui64(addr.s6_addr + 8, dev))
-   addrconf_add_linklocal(idev, &addr);
+  addrconf_addr_gen(idev, false);
   return;
  }
 
@@ -2749,7 +2757,6 @@ static void addrconf_sit_config(struct net_device *dev)
 static void addrconf_gre_config(struct net_device *dev)
 {
  struct inet6_dev *idev;
- struct in6_addr addr;
 
  pr_info("%s(%s)\n", __func__, dev->name);
 
@@ -2760,11 +2767,7 @@ static void addrconf_gre_config(struct net_device *dev)
   return;
  }
 
- ipv6_addr_set(&addr,  htonl(0xFE800000), 0, 0, 0);
- if (!ipv6_generate_eui64(addr.s6_addr + 8, dev))
-  addrconf_add_linklocal(idev, &addr);
- else
-  addrconf_prefix_route(&addr, 64, dev, 0, 0);
+ addrconf_addr_gen(idev, true);
 }
 #endif
 
@@ -4363,6 +4366,10 @@ static int inet6_fill_ifla6_attrs(struct sk_buff *skb, struct inet6_dev *idev)
  nla = nla_reserve(skb, IFLA_INET6_TOKEN, sizeof(struct in6_addr));
  if (nla == NULL)
   goto nla_put_failure;
+
+ if (nla_put_u8(skb, IFLA_INET6_ADDR_GEN_MODE, idev->addr_gen_mode))
+  goto nla_put_failure;
+
  read_lock_bh(&idev->lock);
  memcpy(nla_data(nla), idev->token.s6_addr, nla_len(nla));
  read_unlock_bh(&idev->lock);
@@ -4461,8 +4468,21 @@ static int inet6_set_link_af(struct net_device *dev, const struct nlattr *nla)
  if (nla_parse_nested(tb, IFLA_INET6_MAX, nla, NULL) < 0)
   BUG();
 
- if (tb[IFLA_INET6_TOKEN])
+ if (tb[IFLA_INET6_TOKEN]) {
   err = inet6_set_iftoken(idev, nla_data(tb[IFLA_INET6_TOKEN]));
+  if (err)
+   return err;
+ }
+
+ if (tb[IFLA_INET6_ADDR_GEN_MODE]) {
+  u8 mode = nla_get_u8(tb[IFLA_INET6_ADDR_GEN_MODE]);
+
+  if (mode != IN6_ADDR_GEN_MODE_EUI64 &&
+      mode != IN6_ADDR_GEN_MODE_NONE)
+   return -EINVAL;
+  idev->addr_gen_mode = mode;
+  err = 0;
+ }
 
  return err;
 }
-- 
1.7.1