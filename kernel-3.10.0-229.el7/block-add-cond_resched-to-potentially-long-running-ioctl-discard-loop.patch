From 28d0b0b56ae5d3d312acc43ff73bed419a463d78 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:34:49 -0400
Subject: [block] add cond_resched() to potentially long running ioctl discard loop

Message-id: <1402670238-13916-2-git-send-email-snitzer@redhat.com>
Patchwork-id: 83758
O-Subject: [RHEL7.1 PATCH 001/150] block: add cond_resched() to potentially long running ioctl discard loop
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit c8123f8c9cb517403b51aa41c3c46ff5e10b2c17
Author: Jens Axboe <axboe@fb.com>
Date:   Wed Feb 12 09:34:01 2014 -0700

    block: add cond_resched() to potentially long running ioctl discard loop

    When mkfs issues a full device discard and the device only
    supports discards of a smallish size, we can loop in
    blkdev_issue_discard() for a long time. If preempt isn't enabled,
    this can turn into a softlock situation and the kernel will
    start complaining.

    Add an explicit cond_resched() at the end of the loop to avoid
    that.

    Cc: stable@kernel.org
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-lib.c b/block/blk-lib.c
index d6f50d5..9a32f58 100644
--- a/block/blk-lib.c
+++ b/block/blk-lib.c
@@ -121,6 +121,14 @@ int blkdev_issue_discard(struct block_device *bdev, sector_t sector,
 
   atomic_inc(&bb.done);
   submit_bio(type, bio);
+
+  /*
+   * We can loop for a long time in here, if someone does
+   * full device discards (like mkfs). Be nice and allow
+   * us to schedule out to avoid softlocking if preempt
+   * is disabled.
+   */
+  cond_resched();
  }
  blk_finish_plug(&plug);
 
-- 
1.7.1