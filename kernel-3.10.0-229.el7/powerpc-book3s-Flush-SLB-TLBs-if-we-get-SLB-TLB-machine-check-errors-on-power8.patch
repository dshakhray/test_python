From f18cc881513bec343a2ac757fdfb4d7f04441745 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:07:24 -0400
Subject: [powerpc] book3s: Flush SLB/TLBs if we get SLB/TLB machine check errors on power8

Message-id: <1410545655-205645-216-git-send-email-dzickus@redhat.com>
Patchwork-id: 94196
O-Subject: [RHEL7 PATCH 215/626] powerpc/book3s: Flush SLB/TLBs if we get SLB/TLB machine check errors on power8.
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit ae744f3432d3872c51298d922728e13c24ccc068
Author: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
Date:   Wed Oct 30 20:05:26 2013 +0530

    powerpc/book3s: Flush SLB/TLBs if we get SLB/TLB machine check errors on power8.

    This patch handles the memory errors on power8. If we get a machine check
    exception due to SLB or TLB errors, then flush SLBs/TLBs and reload SLBs to
    recover.

    Signed-off-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
    Acked-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/mce.h b/arch/powerpc/include/asm/mce.h
index 8157d4e..e3ffa82 100644
--- a/arch/powerpc/include/asm/mce.h
+++ b/arch/powerpc/include/asm/mce.h
@@ -64,4 +64,7 @@
       P7_DSISR_MC_SLB_MULTIHIT | \
       P7_DSISR_MC_SLB_MULTIHIT_PARITY)
 
+#define P8_DSISR_MC_SLB_ERRORS  (P7_DSISR_MC_SLB_ERRORS | \
+      P8_DSISR_MC_ERAT_MULTIHIT_SEC)
+
 #endif /* __ASM_PPC64_MCE_H__ */
diff --git a/arch/powerpc/kernel/cputable.c b/arch/powerpc/kernel/cputable.c
index fa8e4f3..7d46c0a 100644
--- a/arch/powerpc/kernel/cputable.c
+++ b/arch/powerpc/kernel/cputable.c
@@ -74,6 +74,7 @@ extern void __restore_cpu_a2(void);
 extern void __flush_tlb_power7(unsigned long inval_selector);
 extern void __flush_tlb_power8(unsigned long inval_selector);
 extern long __machine_check_early_realmode_p7(struct pt_regs *regs);
+extern long __machine_check_early_realmode_p8(struct pt_regs *regs);
 #endif /* CONFIG_PPC64 */
 #if defined(CONFIG_E500)
 extern void __setup_cpu_e5500(unsigned long offset, struct cpu_spec* spec);
@@ -462,6 +463,7 @@ static struct cpu_spec __initdata cpu_specs[] = {
   .cpu_setup  = __setup_cpu_power8,
   .cpu_restore  = __restore_cpu_power8,
   .flush_tlb  = __flush_tlb_power8,
+  .machine_check_early = __machine_check_early_realmode_p8,
   .platform  = "power8",
  },
  { /* Power7 */
@@ -521,6 +523,7 @@ static struct cpu_spec __initdata cpu_specs[] = {
   .cpu_setup  = __setup_cpu_power8,
   .cpu_restore  = __restore_cpu_power8,
   .flush_tlb  = __flush_tlb_power8,
+  .machine_check_early = __machine_check_early_realmode_p8,
   .platform  = "power8",
  },
  { /* Power8 */
@@ -540,6 +543,7 @@ static struct cpu_spec __initdata cpu_specs[] = {
   .cpu_setup  = __setup_cpu_power8,
   .cpu_restore  = __restore_cpu_power8,
   .flush_tlb  = __flush_tlb_power8,
+  .machine_check_early = __machine_check_early_realmode_p8,
   .platform  = "power8",
  },
  { /* Cell Broadband Engine */
diff --git a/arch/powerpc/kernel/mce_power.c b/arch/powerpc/kernel/mce_power.c
index 6905473..60a217f 100644
--- a/arch/powerpc/kernel/mce_power.c
+++ b/arch/powerpc/kernel/mce_power.c
@@ -148,3 +148,37 @@ long __machine_check_early_realmode_p7(struct pt_regs *regs)
  /* TODO: Decode machine check reason. */
  return handled;
 }
+
+static long mce_handle_ierror_p8(uint64_t srr1)
+{
+ long handled = 0;
+
+ handled = mce_handle_common_ierror(srr1);
+
+ if (P7_SRR1_MC_IFETCH(srr1) == P8_SRR1_MC_IFETCH_ERAT_MULTIHIT) {
+  flush_and_reload_slb();
+  handled = 1;
+ }
+ return handled;
+}
+
+static long mce_handle_derror_p8(uint64_t dsisr)
+{
+ return mce_handle_derror(dsisr, P8_DSISR_MC_SLB_ERRORS);
+}
+
+long __machine_check_early_realmode_p8(struct pt_regs *regs)
+{
+ uint64_t srr1;
+ long handled = 1;
+
+ srr1 = regs->msr;
+
+ if (P7_SRR1_MC_LOADSTORE(srr1))
+  handled = mce_handle_derror_p8(regs->dsisr);
+ else
+  handled = mce_handle_ierror_p8(srr1);
+
+ /* TODO: Decode machine check reason. */
+ return handled;
+}
-- 
1.7.1