From 4ab7e0c38f5efb3aec7eac2104e4e897e6644c61 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:10:36 -0400
Subject: [powerpc] Remove some unnecessary uses of _GLOBAL() and _STATIC()

Message-id: <1410545655-205645-408-git-send-email-dzickus@redhat.com>
Patchwork-id: 94292
O-Subject: [RHEL7 PATCH 407/626] powerpc: Remove some unnecessary uses of _GLOBAL() and _STATIC()
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 6a3bab90cf78bc579638525cb76ac240f8253803
Author: Anton Blanchard <anton@samba.org>
Date:   Tue Feb 4 16:06:11 2014 +1100

    powerpc: Remove some unnecessary uses of _GLOBAL() and _STATIC()

    There is no need to create a function descriptor for functions
    called locally out of assembly.

    Signed-off-by: Anton Blanchard <anton@samba.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/exceptions-64e.S b/arch/powerpc/kernel/exceptions-64e.S
index 7d87849..78db0e3 100644
--- a/arch/powerpc/kernel/exceptions-64e.S
+++ b/arch/powerpc/kernel/exceptions-64e.S
@@ -1348,14 +1348,14 @@ _GLOBAL(book3e_secondary_thread_init)
  mflr r28
  b 3b
 
-_STATIC(init_core_book3e)
+init_core_book3e:
  /* Establish the interrupt vector base */
  LOAD_REG_IMMEDIATE(r3, interrupt_base_book3e)
  mtspr SPRN_IVPR,r3
  sync
  blr
 
-_STATIC(init_thread_book3e)
+init_thread_book3e:
  lis r3,(SPRN_EPCR_ICM | SPRN_EPCR_GICM)@h
  mtspr SPRN_EPCR,r3
 
diff --git a/arch/powerpc/kernel/exceptions-64s.S b/arch/powerpc/kernel/exceptions-64s.S
index f2f9d61..a0741b6 100644
--- a/arch/powerpc/kernel/exceptions-64s.S
+++ b/arch/powerpc/kernel/exceptions-64s.S
@@ -1536,7 +1536,7 @@ power4_fixup_nap:
  * Hash table stuff
  */
  .align 7
-_STATIC(do_hash_page)
+do_hash_page:
  std r3,_DAR(r1)
  std r4,_DSISR(r1)
 
diff --git a/arch/powerpc/kernel/head_64.S b/arch/powerpc/kernel/head_64.S
index 8d7c868..8284124 100644
--- a/arch/powerpc/kernel/head_64.S
+++ b/arch/powerpc/kernel/head_64.S
@@ -299,7 +299,7 @@ generic_secondary_common_init:
  * Assumes we're mapped EA == RA if the MMU is on.
  */
 #ifdef CONFIG_PPC_BOOK3S
-_STATIC(__mmu_off)
+__mmu_off:
  mfmsr r3
  andi. r0,r3,MSR_IR|MSR_DR
  beqlr
@@ -324,7 +324,7 @@ _STATIC(__mmu_off)
  *                 DT block, r4 is a physical pointer to the kernel itself
  *
  */
-_GLOBAL(__start_initialization_multiplatform)
+__start_initialization_multiplatform:
  /* Make sure we are running in 64 bits mode */
  bl enable_64b_mode
 
@@ -376,7 +376,7 @@ _GLOBAL(__start_initialization_multiplatform)
  b __after_prom_start
 #endif /* CONFIG_PPC_BOOK3E */
 
-_INIT_STATIC(__boot_from_prom)
+__boot_from_prom:
 #ifdef CONFIG_PPC_OF_BOOT_TRAMPOLINE
  /* Save parameters */
  mr r31,r3
@@ -414,7 +414,7 @@ _INIT_STATIC(__boot_from_prom)
   * from OF while CONFIG_PPC_OF_BOOT_TRAMPOLINE isn't selected */
  trap
 
-_STATIC(__after_prom_start)
+__after_prom_start:
 #ifdef CONFIG_RELOCATABLE
  /* process relocations for the final address of the kernel */
  lis r25,PAGE_OFFSET@highest /* compute virtual base of kernel */
@@ -674,7 +674,7 @@ _GLOBAL(start_secondary_resume)
 /*
  * This subroutine clobbers r11 and r12
  */
-_GLOBAL(enable_64b_mode)
+enable_64b_mode:
  mfmsr r11   /* grab the current MSR */
 #ifdef CONFIG_PPC_BOOK3E
  oris r11,r11,0x8000  /* CM bit set, we'll set ICM later */
@@ -715,7 +715,7 @@ p_toc: .llong __toc_start + 0x8000 - 0b
 /*
  * This is where the main kernel code starts.
  */
-_INIT_STATIC(start_here_multiplatform)
+start_here_multiplatform:
  /* set up the TOC */
  bl      relative_toc
  tovirt(r2,r2)
-- 
1.7.1