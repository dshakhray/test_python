From ba563588b2eb56735710da5c1e5d2b7c3c72fb31 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Wed, 19 Nov 2014 16:13:06 -0500
Subject: [ethernet] be2net: remove multiple assignments on a single line

Message-id: <1416413587-12091-19-git-send-email-ivecera@redhat.com>
Patchwork-id: 100342
O-Subject: [RHEL7.1 PATCH 18/19] be2net: remove multiple assignments on a single line
Bugzilla: 1165755
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: #1165755

Upstream commit(s):
commit 5f820b6c6e1cd75d5f2d08a684ecb3c2fda22d14
Author: Kalesh AP <kalesh.purayil@emulex.com>
Date:   Fri Sep 19 15:47:01 2014 +0530

    be2net: remove multiple assignments on a single line

    This patch removes multiple assignments on a single line as warned
    by checkpatch.

    Signed-off-by: Kalesh AP <kalesh.purayil@emulex.com>
    Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/emulex/benet/be_cmds.c b/drivers/net/ethernet/emulex/benet/be_cmds.c
index 48f4be3..58e7eff 100644
--- a/drivers/net/ethernet/emulex/benet/be_cmds.c
+++ b/drivers/net/ethernet/emulex/benet/be_cmds.c
@@ -1910,8 +1910,8 @@ int be_cmd_rx_filter(struct be_adapter *adapter, u32 flags, u32 value)
          BE_IF_FLAGS_VLAN_PROMISCUOUS |
          BE_IF_FLAGS_MCAST_PROMISCUOUS);
  } else if (flags & IFF_ALLMULTI) {
-  req->if_flags_mask = req->if_flags =
-    cpu_to_le32(BE_IF_FLAGS_MCAST_PROMISCUOUS);
+  req->if_flags_mask = cpu_to_le32(BE_IF_FLAGS_MCAST_PROMISCUOUS);
+  req->if_flags = cpu_to_le32(BE_IF_FLAGS_MCAST_PROMISCUOUS);
  } else if (flags & BE_FLAGS_VLAN_PROMISC) {
   req->if_flags_mask = cpu_to_le32(BE_IF_FLAGS_VLAN_PROMISCUOUS);
 
@@ -1922,8 +1922,8 @@ int be_cmd_rx_filter(struct be_adapter *adapter, u32 flags, u32 value)
   struct netdev_hw_addr *ha;
   int i = 0;
 
-  req->if_flags_mask = req->if_flags =
-    cpu_to_le32(BE_IF_FLAGS_MULTICAST);
+  req->if_flags_mask = cpu_to_le32(BE_IF_FLAGS_MULTICAST);
+  req->if_flags = cpu_to_le32(BE_IF_FLAGS_MULTICAST);
 
   /* Reset mcast promisc mode if already set by setting mask
    * and not setting flags field
diff --git a/drivers/net/ethernet/emulex/benet/be_ethtool.c b/drivers/net/ethernet/emulex/benet/be_ethtool.c
index 0f3ce84..78be260 100644
--- a/drivers/net/ethernet/emulex/benet/be_ethtool.c
+++ b/drivers/net/ethernet/emulex/benet/be_ethtool.c
@@ -684,8 +684,10 @@ static void be_get_ringparam(struct net_device *netdev,
 {
  struct be_adapter *adapter = netdev_priv(netdev);
 
- ring->rx_max_pending = ring->rx_pending = adapter->rx_obj[0].q.len;
- ring->tx_max_pending = ring->tx_pending = adapter->tx_obj[0].q.len;
+ ring->rx_max_pending = adapter->rx_obj[0].q.len;
+ ring->rx_pending = adapter->rx_obj[0].q.len;
+ ring->tx_max_pending = adapter->tx_obj[0].q.len;
+ ring->tx_pending = adapter->tx_obj[0].q.len;
 }
 
 static void
diff --git a/drivers/net/ethernet/emulex/benet/be_main.c b/drivers/net/ethernet/emulex/benet/be_main.c
index cefa65a..07a285c 100644
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -2057,7 +2057,8 @@ static void be_rx_cq_clean(struct be_rx_obj *rxo)
   memset(page_info, 0, sizeof(*page_info));
  }
  BUG_ON(atomic_read(&rxq->used));
- rxq->tail = rxq->head = 0;
+ rxq->tail = 0;
+ rxq->head = 0;
 }
 
 static void be_tx_compl_clean(struct be_adapter *adapter)
@@ -4919,7 +4920,8 @@ static int be_probe(struct pci_dev *pdev, const struct pci_device_id *pdev_id)
 
  INIT_DELAYED_WORK(&adapter->work, be_worker);
  INIT_DELAYED_WORK(&adapter->func_recovery_work, be_func_recovery_task);
- adapter->rx_fc = adapter->tx_fc = true;
+ adapter->rx_fc = true;
+ adapter->tx_fc = true;
 
  status = be_setup(adapter);
  if (status)
-- 
1.7.1