From 87f4bed0f93ebf08200fdb9e645598439ac6b8bc Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:07:22 -0400
Subject: [base] Release device_hotplug_lock when store_mem_state returns EINVAL

Message-id: <20140710010721.22146.74545.stgit@gir.stowe>
Patchwork-id: 85627
O-Subject: [RHEL7.1 PATCH 088/105] driver core: Release device_hotplug_lock when store_mem_state returns EINVAL
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: a37f86305c80f441b8b99dae7c19d3f9d2effc15

commit a37f86305c80f441b8b99dae7c19d3f9d2effc15
Author: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
Date:   Fri Oct 11 15:36:25 2013 +0900

    driver core: Release device_hotplug_lock when store_mem_state returns EINVAL

    When inserting a wrong value to /sys/devices/system/memory/memoryX/state fil
    following messages are shown. And device_hotplug_lock is never released.

    ================================================
    [ BUG: lock held when returning to user space! ]
    3.12.0-rc4-debug+ #3 Tainted: G        W
    ------------------------------------------------
    bash/6442 is leaving the kernel with locks still held!
    1 lock held by bash/6442:
     #0:  (device_hotplug_lock){+.+.+.}, at: [<ffffffff8146cbb5>] lock_device_ho

    This issue was introdued by commit fa2be40 (drivers: base: use standard
    device online/offline for state change).

    This patch releases device_hotplug_lcok when store_mem_state returns EINVAL.

    Signed-off-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Reviewed-by: Toshi Kani <toshi.kani@hp.com>
    CC: Seth Jennings <sjenning@linux.vnet.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/base/memory.c b/drivers/base/memory.c
index 9e59f65..bece691 100644
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@ -333,8 +333,10 @@ store_mem_state(struct device *dev,
   online_type = ONLINE_KEEP;
  else if (!strncmp(buf, "offline", min_t(int, count, 7)))
   online_type = -1;
- else
-  return -EINVAL;
+ else {
+  ret = -EINVAL;
+  goto err;
+ }
 
  switch (online_type) {
  case ONLINE_KERNEL:
@@ -357,6 +359,7 @@ store_mem_state(struct device *dev,
   ret = -EINVAL; /* should never happen */
  }
 
+err:
  unlock_device_hotplug();
 
  if (ret)
-- 
1.7.1