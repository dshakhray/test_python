From 612f323cd3ec09e896148901f3d43f64613619bb Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jpirko@redhat.com>
Date: Thu, 7 Aug 2014 07:06:22 -0400
Subject: [net] ip_tunnel: Make vti work with i_key set

Message-id: <1407395194-3809-7-git-send-email-jpirko@redhat.com>
Patchwork-id: 87520
O-Subject: [patch rhel7 net 06/18] ip_tunnel: Make vti work with i_key set
Bugzilla: 1091561
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

BZ1091561
https://brewweb.devel.redhat.com/taskinfo?taskID=7794261
Tested by jtluka's LNST smoke test recipe

upstream commit 6d608f06e390d803c1d0e604cae280f1e708bf68
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Fri Feb 21 08:41:09 2014 +0100

    ip_tunnel: Make vti work with i_key set

    Vti uses the o_key to mark packets that were transmitted or received
    by a vti interface. Unfortunately we can't apply different marks
    to in and outbound packets with only one key availabe. Vti interfaces
    typically use wildcard selectors for vti IPsec policies. On forwarding,
    the same output policy will match for both directions. This generates
    a loop between the IPsec gateways until the ttl of the packet is
    exceeded.

    The gre i_key/o_key are usually there to find the right gre tunnel
    during a lookup. When vti uses the i_key to mark packets, the tunnel
    lookup does not work any more because vti does not use the gre keys
    as a hash key for the lookup.

    This patch workarounds this my not including the i_key when comupting
    the hash for the tunnel lookup in case of vti tunnels.

    With this we have separate keys available for the transmitting and
    receiving side of the vti interface.

Signed-off-by: Jiri Pirko <jpirko@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/ip_tunnel.c b/net/ipv4/ip_tunnel.c
index 94a70be..85c7904 100644
--- a/net/ipv4/ip_tunnel.c
+++ b/net/ipv4/ip_tunnel.c
@@ -228,13 +228,17 @@ static struct hlist_head *ip_bucket(struct ip_tunnel_net *itn,
 {
  unsigned int h;
  __be32 remote;
+ __be32 i_key = parms->i_key;
 
  if (parms->iph.daddr && !ipv4_is_multicast(parms->iph.daddr))
   remote = parms->iph.daddr;
  else
   remote = 0;
 
- h = ip_tunnel_hash(itn, parms->i_key, remote);
+ if (!(parms->i_flags & TUNNEL_KEY) && (parms->i_flags & VTI_ISVTI))
+  i_key = 0;
+
+ h = ip_tunnel_hash(itn, i_key, remote);
  return &itn->tunnels[h];
 }
 
-- 
1.7.1