From b72cbd15a3b1c7da5ec7f4c972ef54f53d764870 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Mon, 24 Nov 2014 04:06:59 -0500
Subject: [md] dm: use rcu_dereference_protected instead of rcu_dereference

Message-id: <20141124040658.GA595@redhat.com>
Patchwork-id: 100852
O-Subject: [RHEL7.1 PATCH 14/13] dm: use rcu_dereference_protected instead of rcu_dereference
Bugzilla: 1165246
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1165246

Upstream linux-dm.git commit a12f5d48bdfeb5fe10157ac01c3de29269f457c6
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Nov 23 09:34:29 2014 -0800

    dm: use rcu_dereference_protected instead of rcu_dereference

    rcu_dereference() should be used in sections protected by rcu_read_lock.

    For writers, holding some kind of mutex or lock,
    rcu_dereference_protected() is the way to go, adding explicit lockdep
    bits.

    In __unbind(), we are the last user of this mapped device, so can use
    the constant '1' instead of a lockdep_is_held(), not consistent with
    other uses of rcu_dereference_protected() which use md->suspend_lock
    mutex.

    Reported-by: Kirill A. Shutemov <kirill@shutemov.name>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Fixes: 33423974bfc1 ("dm: Use rcu_dereference() for accessing rcu pointer")
    Cc: Pranith Kumar <bobby.prani@gmail.com>
    [snitzer: allow lines longer than 80 columns, refine subject]
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index 4a40395..6bf6815 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -2431,7 +2431,7 @@ static struct dm_table *__bind(struct mapped_device *md, struct dm_table *t,
 
  merge_is_optional = dm_table_merge_is_optional(t);
 
- old_map = rcu_dereference(md->map);
+ old_map = rcu_dereference_protected(md->map, lockdep_is_held(&md->suspend_lock));
  rcu_assign_pointer(md->map, t);
  md->immutable_target_type = dm_table_get_immutable_target_type(t);
 
@@ -2451,7 +2451,7 @@ static struct dm_table *__bind(struct mapped_device *md, struct dm_table *t,
  */
 static struct dm_table *__unbind(struct mapped_device *md)
 {
- struct dm_table *map = rcu_dereference(md->map);
+ struct dm_table *map = rcu_dereference_protected(md->map, 1);
 
  if (!map)
   return NULL;
@@ -2953,7 +2953,7 @@ retry:
   goto retry;
  }
 
- map = rcu_dereference(md->map);
+ map = rcu_dereference_protected(md->map, lockdep_is_held(&md->suspend_lock));
 
  r = __dm_suspend(md, map, suspend_flags, TASK_INTERRUPTIBLE);
  if (r)
@@ -3012,7 +3012,7 @@ retry:
   goto retry;
  }
 
- map = rcu_dereference(md->map);
+ map = rcu_dereference_protected(md->map, lockdep_is_held(&md->suspend_lock));
  if (!map || !dm_table_get_size(map))
   goto out;
 
@@ -3047,7 +3047,7 @@ static void __dm_internal_suspend(struct mapped_device *md, unsigned suspend_fla
   return; /* nest suspend */
  }
 
- map = rcu_dereference(md->map);
+ map = rcu_dereference_protected(md->map, lockdep_is_held(&md->suspend_lock));
 
  /*
   * Using TASK_UNINTERRUPTIBLE because only NOFLUSH internal suspend is
-- 
1.7.1