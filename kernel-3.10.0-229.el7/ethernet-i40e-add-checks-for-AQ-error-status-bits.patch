From 37b4a09e26e5d277877d97e7f1bb04a58c26f6d8 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:38:40 -0400
Subject: [ethernet] i40e: add checks for AQ error status bits

Message-id: <1409658042-22689-160-git-send-email-sassmann@redhat.com>
Patchwork-id: 90352
O-Subject: [RHEL7.1 PATCH 159/281] i40e: add checks for AQ error status bits
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Shannon Nelson <shannon.nelson@intel.com>

Check for error status bits on the AdminQ event queue and announce them
if seen.  If the Firmware sets these bits, it will trigger an AdminQ
interrupt to get the driver's attention to process the ARQ, which will
likely be enough to clear the actual issue.

Signed-off-by: Shannon Nelson <shannon.nelson@intel.com>
Change-ID: I009e0ebc8be764e40e193b29aed2863f43eb5cb0
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 86df242b4dbe4d38ef85e0e828ff8a55d182ec80)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 0211259..c34ac15 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -5132,11 +5132,47 @@ static void i40e_clean_adminq_subtask(struct i40e_pf *pf)
  u16 pending, i = 0;
  i40e_status ret;
  u16 opcode;
+ u32 oldval;
  u32 val;
 
  if (!test_bit(__I40E_ADMINQ_EVENT_PENDING, &pf->state))
   return;
 
+ /* check for error indications */
+ val = rd32(&pf->hw, pf->hw.aq.arq.len);
+ oldval = val;
+ if (val & I40E_PF_ARQLEN_ARQVFE_MASK) {
+  dev_info(&pf->pdev->dev, "ARQ VF Error detected\n");
+  val &= ~I40E_PF_ARQLEN_ARQVFE_MASK;
+ }
+ if (val & I40E_PF_ARQLEN_ARQOVFL_MASK) {
+  dev_info(&pf->pdev->dev, "ARQ Overflow Error detected\n");
+  val &= ~I40E_PF_ARQLEN_ARQOVFL_MASK;
+ }
+ if (val & I40E_PF_ARQLEN_ARQCRIT_MASK) {
+  dev_info(&pf->pdev->dev, "ARQ Critical Error detected\n");
+  val &= ~I40E_PF_ARQLEN_ARQCRIT_MASK;
+ }
+ if (oldval != val)
+  wr32(&pf->hw, pf->hw.aq.arq.len, val);
+
+ val = rd32(&pf->hw, pf->hw.aq.asq.len);
+ oldval = val;
+ if (val & I40E_PF_ATQLEN_ATQVFE_MASK) {
+  dev_info(&pf->pdev->dev, "ASQ VF Error detected\n");
+  val &= ~I40E_PF_ATQLEN_ATQVFE_MASK;
+ }
+ if (val & I40E_PF_ATQLEN_ATQOVFL_MASK) {
+  dev_info(&pf->pdev->dev, "ASQ Overflow Error detected\n");
+  val &= ~I40E_PF_ATQLEN_ATQOVFL_MASK;
+ }
+ if (val & I40E_PF_ATQLEN_ATQCRIT_MASK) {
+  dev_info(&pf->pdev->dev, "ASQ Critical Error detected\n");
+  val &= ~I40E_PF_ATQLEN_ATQCRIT_MASK;
+ }
+ if (oldval != val)
+  wr32(&pf->hw, pf->hw.aq.asq.len, val);
+
  event.msg_size = I40E_MAX_AQ_BUF_SIZE;
  event.msg_buf = kzalloc(event.msg_size, GFP_KERNEL);
  if (!event.msg_buf)
-- 
1.7.1