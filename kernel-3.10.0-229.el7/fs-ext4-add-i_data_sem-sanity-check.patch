From 3d73cb4ab8f960b60175bfd9a3b78fa564f3e165 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Wed, 29 Oct 2014 16:34:11 -0400
Subject: [fs] ext4: add i_data_sem sanity check

Message-id: <1414600485-1929-22-git-send-email-lczerner@redhat.com>
Patchwork-id: 98538
O-Subject: [RHEL 7.1 PATCH v2 21/55] ext4: add i_data_sem sanity check
Bugzilla: 1156096
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Dmitry Monakhov <dmonakhov@openvz.org>

BZ 1156096
https://bugzilla.redhat.com/show_bug.cgi?id=1156096

BREW 8169722
https://brewweb.devel.redhat.com/taskinfo?taskID=8169722

Upstream commit 4b1f1660710c2ddcefc08c289e66a32b6bc2a2e3

 Each caller of ext4_ext_dirty must hold i_data_sem,
 The only exception is migration code, let's make it convenient.

 Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Reviewed-by: Jan Kara <jack@suse.cz>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 3fcbfb4..3aa5fcc 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -160,6 +160,8 @@ int __ext4_ext_dirty(const char *where, unsigned int line, handle_t *handle,
        struct inode *inode, struct ext4_ext_path *path)
 {
  int err;
+
+ WARN_ON(!rwsem_is_locked(&EXT4_I(inode)->i_data_sem));
  if (path->p_bh) {
   ext4_extent_block_csum_set(inode, ext_block_hdr(path->p_bh));
   /* path points to block */
diff --git a/fs/ext4/migrate.c b/fs/ext4/migrate.c
index ec09243..d3567f2 100644
--- a/fs/ext4/migrate.c
+++ b/fs/ext4/migrate.c
@@ -39,6 +39,8 @@ static int finish_range(handle_t *handle, struct inode *inode,
  newext.ee_block = cpu_to_le32(lb->first_block);
  newext.ee_len   = cpu_to_le16(lb->last_block - lb->first_block + 1);
  ext4_ext_store_pblock(&newext, lb->first_pblock);
+ /* Locking only for convinience since we are operating on temp inode */
+ down_write(&EXT4_I(inode)->i_data_sem);
  path = ext4_ext_find_extent(inode, lb->first_block, NULL, 0);
 
  if (IS_ERR(path)) {
@@ -61,7 +63,9 @@ static int finish_range(handle_t *handle, struct inode *inode,
   */
  if (needed && ext4_handle_has_enough_credits(handle,
       EXT4_RESERVE_TRANS_BLOCKS)) {
+  up_write((&EXT4_I(inode)->i_data_sem));
   retval = ext4_journal_restart(handle, needed);
+  down_write((&EXT4_I(inode)->i_data_sem));
   if (retval)
    goto err_out;
  } else if (needed) {
@@ -70,13 +74,16 @@ static int finish_range(handle_t *handle, struct inode *inode,
    /*
     * IF not able to extend the journal restart the journal
     */
+   up_write((&EXT4_I(inode)->i_data_sem));
    retval = ext4_journal_restart(handle, needed);
+   down_write((&EXT4_I(inode)->i_data_sem));
    if (retval)
     goto err_out;
   }
  }
  retval = ext4_ext_insert_extent(handle, inode, path, &newext, 0);
 err_out:
+ up_write((&EXT4_I(inode)->i_data_sem));
  if (path) {
   ext4_ext_drop_refs(path);
   kfree(path);
-- 
1.7.1