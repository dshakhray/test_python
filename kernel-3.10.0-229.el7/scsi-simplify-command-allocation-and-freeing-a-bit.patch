From 389f60bf3df33d60a5d0c21a62bc77f033a1c684 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:37:11 -0400
Subject: [scsi] simplify command allocation and freeing a bit

Message-id: <1402670238-13916-144-git-send-email-snitzer@redhat.com>
Patchwork-id: 83867
O-Subject: [RHEL7.1 PATCH 143/150] scsi: simplify command allocation and freeing a bit
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Paolo Bonzini <pbonzini@redhat.com>

BZ: 1105204

Upstream commit 7c283341225d0ebeb7480a9e6560f599dcd0f417
Author: Christoph Hellwig <hch@infradead.org>
Date:   Thu Feb 20 14:21:00 2014 -0800

    [SCSI] simplify command allocation and freeing a bit

    Just have one level of alloc/free functions that take a host instead
    of two levels for the allocation and different calling conventions
    for the free.

    [fengguang.wu@intel.com: docbook problems spotted, now fixed]
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/scsi.c b/drivers/scsi/scsi.c
index 8b2bc06..0c5ed55 100644
--- a/drivers/scsi/scsi.c
+++ b/drivers/scsi/scsi.c
@@ -161,47 +161,20 @@ static struct scsi_host_cmd_pool scsi_cmd_dma_pool = {
 static DEFINE_MUTEX(host_cmd_pool_mutex);
 
 /**
- * scsi_pool_alloc_command - internal function to get a fully allocated command
- * @pool: slab pool to allocate the command from
- * @gfp_mask: mask for the allocation
- *
- * Returns a fully allocated command (with the allied sense buffer) or
- * NULL on failure
- */
-static struct scsi_cmnd *
-scsi_pool_alloc_command(struct scsi_host_cmd_pool *pool, gfp_t gfp_mask)
-{
- struct scsi_cmnd *cmd;
-
- cmd = kmem_cache_zalloc(pool->cmd_slab, gfp_mask | pool->gfp_mask);
- if (!cmd)
-  return NULL;
-
- cmd->sense_buffer = kmem_cache_alloc(pool->sense_slab,
-          gfp_mask | pool->gfp_mask);
- if (!cmd->sense_buffer) {
-  kmem_cache_free(pool->cmd_slab, cmd);
-  return NULL;
- }
-
- return cmd;
-}
-
-/**
- * scsi_pool_free_command - internal function to release a command
- * @pool: slab pool to allocate the command from
+ * scsi_host_free_command - internal function to release a command
+ * @shost: host to free the command for
  * @cmd: command to release
  *
  * the command must previously have been allocated by
- * scsi_pool_alloc_command.
+ * scsi_host_alloc_command.
  */
 static void
-scsi_pool_free_command(struct scsi_host_cmd_pool *pool,
-    struct scsi_cmnd *cmd)
+scsi_host_free_command(struct Scsi_Host *shost, struct scsi_cmnd *cmd)
 {
+ struct scsi_host_cmd_pool *pool = shost->cmd_pool;
+
  if (cmd->prot_sdb)
   kmem_cache_free(scsi_sdb_cache, cmd->prot_sdb);
-
  kmem_cache_free(pool->sense_slab, cmd->sense_buffer);
  kmem_cache_free(pool->cmd_slab, cmd);
 }
@@ -217,22 +190,32 @@ scsi_pool_free_command(struct scsi_host_cmd_pool *pool,
 static struct scsi_cmnd *
 scsi_host_alloc_command(struct Scsi_Host *shost, gfp_t gfp_mask)
 {
+ struct scsi_host_cmd_pool *pool = shost->cmd_pool;
  struct scsi_cmnd *cmd;
 
- cmd = scsi_pool_alloc_command(shost->cmd_pool, gfp_mask);
+ cmd = kmem_cache_zalloc(pool->cmd_slab, gfp_mask | pool->gfp_mask);
  if (!cmd)
-  return NULL;
+  goto fail;
+
+ cmd->sense_buffer = kmem_cache_alloc(pool->sense_slab,
+          gfp_mask | pool->gfp_mask);
+ if (!cmd->sense_buffer)
+  goto fail_free_cmd;
 
  if (scsi_host_get_prot(shost) >= SHOST_DIX_TYPE0_PROTECTION) {
   cmd->prot_sdb = kmem_cache_zalloc(scsi_sdb_cache, gfp_mask);
-
-  if (!cmd->prot_sdb) {
-   scsi_pool_free_command(shost->cmd_pool, cmd);
-   return NULL;
-  }
+  if (!cmd->prot_sdb)
+   goto fail_free_sense;
  }
 
  return cmd;
+
+fail_free_sense:
+ kmem_cache_free(pool->sense_slab, cmd->sense_buffer);
+fail_free_cmd:
+ kmem_cache_free(pool->cmd_slab, cmd);
+fail:
+ return NULL;
 }
 
 /**
@@ -320,7 +303,7 @@ void __scsi_put_command(struct Scsi_Host *shost, struct scsi_cmnd *cmd)
  }
 
  if (likely(cmd != NULL))
-  scsi_pool_free_command(shost->cmd_pool, cmd);
+  scsi_host_free_command(shost, cmd);
 }
 EXPORT_SYMBOL(__scsi_put_command);
 
@@ -456,7 +439,7 @@ void scsi_destroy_command_freelist(struct Scsi_Host *shost)
 
   cmd = list_entry(shost->free_list.next, struct scsi_cmnd, list);
   list_del_init(&cmd->list);
-  scsi_pool_free_command(shost->cmd_pool, cmd);
+  scsi_host_free_command(shost, cmd);
  }
  shost->cmd_pool = NULL;
  scsi_put_host_cmd_pool(shost->unchecked_isa_dma ? GFP_DMA : GFP_KERNEL);
-- 
1.7.1