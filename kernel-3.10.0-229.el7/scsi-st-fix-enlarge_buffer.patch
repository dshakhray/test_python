From 83514ffe9ba26bc2c5d05ac384c701a43bc963a2 Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Wed, 20 Aug 2014 18:58:43 -0400
Subject: [scsi] st: fix enlarge_buffer
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1408561176-18133-5-git-send-email-emilne@redhat.com>
Patchwork-id: 88429
O-Subject: [RHEL7.1 PATCH e-stor 04/57] [SCSI] st: fix enlarge_buffer
Bugzilla: 1132092
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Ewan D. Milne" <emilne@redhat.com>

Bugzilla: 1132092
Upstream Status: upstream commit 769989a4a09d7c825e182cf60604c06d8f2f70e4
Brew: 7853755
Tested: Tested by Ewan D. Milne and Barry Donahue with a combination
        of manual and automated testing.  No issues seen.

upstream commit 769989a4a09d7c825e182cf60604c06d8f2f70e4
Author: Bodo Stroesser <bstroesser@ts.fujitsu.com>
Date:   Mon Dec 2 18:52:10 2013 +0100

    [SCSI] st: fix enlarge_buffer

    This patch removes a bug in enlarge_buffer() that can make a
    read or write fail under special conditions.

    After changing TRY_DIRECT_IO to 0 and ST_MAX_SG to 32 in
    st_options.h, a program that writes a first block of 128k and
    than a second bigger block (e.g. 256k) fails. The second write
    returns errno EOVERFLOW, as enlarge_buffer() checks the sg list
    and detects that it already is full.
    As enlarge_buffer uses different page allocation orders
    depending on the size of the buffer needed, the check does not
    make sense.

    Signed-off-by: Bodo Stroesser <bstroesser@ts.fujitsu.com>
    Acked-by: Kai MÃÂ¤kisara <kai.makisara@kolumbus.fi>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

Signed-off-by: Ewan D. Milne <emilne@redhat.com>
---
 drivers/scsi/st.c | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/st.c b/drivers/scsi/st.c
index b4e69f4..2b75e0e 100644
--- a/drivers/scsi/st.c
+++ b/drivers/scsi/st.c
@@ -3726,7 +3726,7 @@ static struct st_buffer *new_tape_buffer(int need_dma, int max_sg)
 
 static int enlarge_buffer(struct st_buffer * STbuffer, int new_size, int need_dma)
 {
- int segs, nbr, max_segs, b_size, order, got;
+ int segs, max_segs, b_size, order, got;
  gfp_t priority;
 
  if (new_size <= STbuffer->buffer_size)
@@ -3736,9 +3736,6 @@ static int enlarge_buffer(struct st_buffer * STbuffer, int new_size, int need_dm
   normalize_buffer(STbuffer);  /* Avoid extra segment */
 
  max_segs = STbuffer->use_sg;
- nbr = max_segs - STbuffer->frp_segs;
- if (nbr <= 0)
-  return 0;
 
  priority = GFP_KERNEL | __GFP_NOWARN;
  if (need_dma)
-- 
1.7.1