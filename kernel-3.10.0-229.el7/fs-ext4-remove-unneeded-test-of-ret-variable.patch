From 6ef63913adb917bfacfb54120347fa286ddeb54a Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:31 -0400
Subject: [fs] ext4: remove unneeded test of ret variable

Message-id: <1414059176-6044-8-git-send-email-lczerner@redhat.com>
Patchwork-id: 98276
O-Subject: [RHEL 7.1 PATCH 07/32] ext4: remove unneeded test of ret variable
Bugzilla: 1150171

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit e5b30416f3631bf4eed37c3bec9f789f9ae78446

 Currently in ext4_fallocate() and ext4_zero_range() we're testing ret
 variable along with new_size. However in ext4_fallocate() we just tested
 ret before and in ext4_zero_range() if will always be zero when we get
 there so there is no need to test it in both cases.

 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index d41f924..54df636 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -4817,12 +4817,12 @@ static long ext4_zero_range(struct file *file, loff_t offset,
 
  inode->i_mtime = inode->i_ctime = ext4_current_time(inode);
 
- if (!ret && new_size) {
+ if (new_size) {
   if (new_size > i_size_read(inode))
    i_size_write(inode, new_size);
   if (new_size > EXT4_I(inode)->i_disksize)
    ext4_update_i_disksize(inode, new_size);
- } else if (!ret && !new_size) {
+ } else {
   /*
   * Mark that we allocate beyond EOF so the subsequent truncate
   * can proceed even if the new size is the same as i_size.
@@ -4924,14 +4924,14 @@ long ext4_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
 
  tv = inode->i_ctime = ext4_current_time(inode);
 
- if (!ret && new_size) {
+ if (new_size) {
   if (new_size > i_size_read(inode)) {
    i_size_write(inode, new_size);
    inode->i_mtime = tv;
   }
   if (new_size > EXT4_I(inode)->i_disksize)
    ext4_update_i_disksize(inode, new_size);
- } else if (!ret && !new_size) {
+ } else {
   /*
   * Mark that we allocate beyond EOF so the subsequent truncate
   * can proceed even if the new size is the same as i_size.
-- 
1.7.1