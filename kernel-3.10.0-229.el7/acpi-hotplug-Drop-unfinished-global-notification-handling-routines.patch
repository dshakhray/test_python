From 5dee361db60a151729ea5ce95ca4386b0d8153f2 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 28 Aug 2014 03:05:49 -0400
Subject: [acpi] hotplug: Drop unfinished global notification handling routines

Message-id: <20140828030549.2117.37580.stgit@gir.stowe>
Patchwork-id: 89310
O-Subject: [RHEL7.1 PATCH 22/30] ACPI / hotplug: Drop unfinished global notification handling routines
Bugzilla: 1128632
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1128632
Upstream Status: f4b734c35e98c343cd99824153de09e48867b97e

commit f4b734c35e98c343cd99824153de09e48867b97e
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 22 21:55:55 2013 +0100

    ACPI / hotplug: Drop unfinished global notification handling routines

    There are two global hotplug notification handling routines in bus.c,
    acpi_bus_check_device() and acpi_bus_check_scope(), that have never
    been finished and don't do anything useful, so drop them.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/bus.c b/drivers/acpi/bus.c
index 36180ee..8509c72 100644
--- a/drivers/acpi/bus.c
+++ b/drivers/acpi/bus.c
@@ -426,58 +426,6 @@ int acpi_bus_receive_event(struct acpi_bus_event *event)
                              Notification Handling
    -------------------------------------------------------------------------- */
 
-static void acpi_bus_check_device(acpi_handle handle)
-{
- struct acpi_device *device;
- acpi_status status;
- struct acpi_device_status old_status;
-
- if (acpi_bus_get_device(handle, &device))
-  return;
- if (!device)
-  return;
-
- old_status = device->status;
-
- /*
-  * Make sure this device's parent is present before we go about
-  * messing with the device.
-  */
- if (device->parent && !device->parent->status.present) {
-  device->status = device->parent->status;
-  return;
- }
-
- status = acpi_bus_get_status(device);
- if (ACPI_FAILURE(status))
-  return;
-
- if (STRUCT_TO_INT(old_status) == STRUCT_TO_INT(device->status))
-  return;
-
- /*
-  * Device Insertion/Removal
-  */
- if ((device->status.present) && !(old_status.present)) {
-  ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Device insertion detected\n"));
-  /* TBD: Handle device insertion */
- } else if (!(device->status.present) && (old_status.present)) {
-  ACPI_DEBUG_PRINT((ACPI_DB_INFO, "Device removal detected\n"));
-  /* TBD: Handle device removal */
- }
-}
-
-static void acpi_bus_check_scope(acpi_handle handle)
-{
- /* Status Change? */
- acpi_bus_check_device(handle);
-
- /*
-  * TBD: Enumerate child devices within this device's scope and
-  *       run acpi_bus_check_device()'s on them.
-  */
-}
-
 /**
  * acpi_bus_notify
  * ---------------
@@ -494,19 +442,11 @@ static void acpi_bus_notify(acpi_handle handle, u32 type, void *data)
  switch (type) {
 
  case ACPI_NOTIFY_BUS_CHECK:
-  acpi_bus_check_scope(handle);
-  /*
-   * TBD: We'll need to outsource certain events to non-ACPI
-   *      drivers via the device manager (device.c).
-   */
+  /* TBD */
   break;
 
  case ACPI_NOTIFY_DEVICE_CHECK:
-  acpi_bus_check_device(handle);
-  /*
-   * TBD: We'll need to outsource certain events to non-ACPI
-   *      drivers via the device manager (device.c).
-   */
+  /* TBD */
   break;
 
  case ACPI_NOTIFY_DEVICE_WAKE:
-- 
1.7.1