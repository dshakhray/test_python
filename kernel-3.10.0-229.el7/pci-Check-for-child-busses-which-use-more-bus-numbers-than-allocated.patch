From 42c51e89297ff88a3108253b32d898e1177ef8f0 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Wed, 6 Aug 2014 03:46:46 -0400
Subject: [pci] Check for child busses which use more bus numbers than allocated

Message-id: <20140806034646.1438.58979.stgit@gir.stowe>
Patchwork-id: 87434
O-Subject: [RHEL7.1 PATCH 25/69] PCI: Check for child busses which use more bus numbers than allocated
Bugzilla: 1110896
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110896
Upstream Status: c95b0bd6ca3dbb1abf8394c38d26df65d890cb9a

commit c95b0bd6ca3dbb1abf8394c38d26df65d890cb9a
Author: Andreas Noever <andreas.noever@gmail.com>
Date:   Thu Jan 23 21:59:27 2014 +0100

    PCI: Check for child busses which use more bus numbers than allocated

    pci_scan_child_bus can (potentially) return a bus number higher than the
    subordinate value of the child bus. Possible reasons are that bus numbers
    are reserved for SR-IOV or for CardBus (SR-IOV is done without checks and
    the CardBus checks are sketchy at best).

    We clamp the returned value to the actual subordinate value and print a
    warning if too many bus numbers are reserved.

    [bhelgaas: whitespace]
    Signed-off-by: Andreas Noever <andreas.noever@gmail.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index ba0bd70..ee2b9e1 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -848,10 +848,12 @@ int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max, int pass)
   }
 
   cmax = pci_scan_child_bus(child);
-  if (cmax > max)
-   max = cmax;
-  if (child->busn_res.end > max)
-   max = child->busn_res.end;
+  if (cmax > subordinate)
+   dev_warn(&dev->dev, "bridge has subordinate %02x but max busn %02x\n",
+     subordinate, cmax);
+  /* subordinate should equal child->busn_res.end */
+  if (subordinate > max)
+   max = subordinate;
  } else {
   /*
    * We need to assign a number to this bus which we always
-- 
1.7.1