From dc0edb7ebd28a4241cd7a4edbea1e1063398ae99 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 2 May 2014 14:37:26 -0400
Subject: [misc] mei: use helper function to find me client by id

Message-id: <1399041470-21330-54-git-send-email-prarit@redhat.com>
Patchwork-id: 79340
O-Subject: [RHEL7.1 PATCH BZ 1088953 53/77] mei: use helper function to find me client by id
Bugzilla: 1088953
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit 12d0066526f386538de80b4d86d2008461b36674
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Mon Feb 17 15:13:23 2014 +0200

    mei: use helper function to find me client by id

    We already have a helper to find me client by id, let's
    use it in all relevant places.

    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Cc: Dean Nelson <dnelson@redhat.com>
Cc: Stefan Assmann <sassmann@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/client.c b/drivers/misc/mei/client.c
index 539e861..3e62176 100644
--- a/drivers/misc/mei/client.c
+++ b/drivers/misc/mei/client.c
@@ -552,7 +552,8 @@ out:
 int mei_cl_flow_ctrl_creds(struct mei_cl *cl)
 {
  struct mei_device *dev;
- int i;
+ struct mei_me_client *me_cl;
+ int id;
 
  if (WARN_ON(!cl || !cl->dev))
   return -EINVAL;
@@ -565,19 +566,19 @@ int mei_cl_flow_ctrl_creds(struct mei_cl *cl)
  if (cl->mei_flow_ctrl_creds > 0)
   return 1;
 
- for (i = 0; i < dev->me_clients_num; i++) {
-  struct mei_me_client  *me_cl = &dev->me_clients[i];
-  if (me_cl->client_id == cl->me_client_id) {
-   if (me_cl->mei_flow_ctrl_creds) {
-    if (WARN_ON(me_cl->props.single_recv_buf == 0))
-     return -EINVAL;
-    return 1;
-   } else {
-    return 0;
-   }
-  }
+ id = mei_me_cl_by_id(dev, cl->me_client_id);
+ if (id < 0) {
+  cl_err(dev, cl, "no such me client %d\n", cl->me_client_id);
+  return id;
  }
- return -ENOENT;
+
+ me_cl = &dev->me_clients[id];
+ if (me_cl->mei_flow_ctrl_creds) {
+  if (WARN_ON(me_cl->props.single_recv_buf == 0))
+   return -EINVAL;
+  return 1;
+ }
+ return 0;
 }
 
 /**
@@ -593,32 +594,31 @@ int mei_cl_flow_ctrl_creds(struct mei_cl *cl)
 int mei_cl_flow_ctrl_reduce(struct mei_cl *cl)
 {
  struct mei_device *dev;
- int i;
+ struct mei_me_client *me_cl;
+ int id;
 
  if (WARN_ON(!cl || !cl->dev))
   return -EINVAL;
 
  dev = cl->dev;
 
- if (!dev->me_clients_num)
-  return -ENOENT;
+ id = mei_me_cl_by_id(dev, cl->me_client_id);
+ if (id < 0) {
+  cl_err(dev, cl, "no such me client %d\n", cl->me_client_id);
+  return id;
+ }
 
- for (i = 0; i < dev->me_clients_num; i++) {
-  struct mei_me_client  *me_cl = &dev->me_clients[i];
-  if (me_cl->client_id == cl->me_client_id) {
-   if (me_cl->props.single_recv_buf != 0) {
-    if (WARN_ON(me_cl->mei_flow_ctrl_creds <= 0))
-     return -EINVAL;
-    dev->me_clients[i].mei_flow_ctrl_creds--;
-   } else {
-    if (WARN_ON(cl->mei_flow_ctrl_creds <= 0))
-     return -EINVAL;
-    cl->mei_flow_ctrl_creds--;
-   }
-   return 0;
-  }
+ me_cl = &dev->me_clients[id];
+ if (me_cl->props.single_recv_buf != 0) {
+  if (WARN_ON(me_cl->mei_flow_ctrl_creds <= 0))
+   return -EINVAL;
+  me_cl->mei_flow_ctrl_creds--;
+ } else {
+  if (WARN_ON(cl->mei_flow_ctrl_creds <= 0))
+   return -EINVAL;
+  cl->mei_flow_ctrl_creds--;
  }
- return -ENOENT;
+ return 0;
 }
 
 /**
diff --git a/drivers/misc/mei/hbm.c b/drivers/misc/mei/hbm.c
index 134586d..a2c03dc 100644
--- a/drivers/misc/mei/hbm.c
+++ b/drivers/misc/mei/hbm.c
@@ -22,6 +22,7 @@
 #include "mei_dev.h"
 #include "hbm.h"
 #include "hw-me.h"
+#include "client.h"
 
 static const char *mei_cl_conn_status_str(enum mei_cl_connect_status status)
 {
@@ -340,27 +341,34 @@ int mei_hbm_cl_flow_control_req(struct mei_device *dev, struct mei_cl *cl)
  *
  * @dev: the device structure
  * @flow: flow control.
+ *
+ * return 0 on success, < 0 otherwise
  */
-static void mei_hbm_add_single_flow_creds(struct mei_device *dev,
+static int mei_hbm_add_single_flow_creds(struct mei_device *dev,
       struct hbm_flow_control *flow)
 {
- struct mei_me_client *client;
- int i;
-
- for (i = 0; i < dev->me_clients_num; i++) {
-  client = &dev->me_clients[i];
-  if (client && flow->me_addr == client->client_id) {
-   if (client->props.single_recv_buf) {
-    client->mei_flow_ctrl_creds++;
-    dev_dbg(&dev->pdev->dev, "recv flow ctrl msg ME %d (single).\n",
-        flow->me_addr);
-    dev_dbg(&dev->pdev->dev, "flow control credentials =%d.\n",
-        client->mei_flow_ctrl_creds);
-   } else {
-    BUG(); /* error in flow control */
-   }
-  }
+ struct mei_me_client *me_cl;
+ int id;
+
+ id = mei_me_cl_by_id(dev, flow->me_addr);
+ if (id < 0) {
+  dev_err(&dev->pdev->dev, "no such me client %d\n",
+   flow->me_addr);
+  return id;
  }
+
+ me_cl = &dev->me_clients[id];
+ if (me_cl->props.single_recv_buf) {
+  me_cl->mei_flow_ctrl_creds++;
+  dev_dbg(&dev->pdev->dev, "recv flow ctrl msg ME %d (single).\n",
+      flow->me_addr);
+  dev_dbg(&dev->pdev->dev, "flow control credentials =%d.\n",
+      me_cl->mei_flow_ctrl_creds);
+ } else {
+  BUG(); /* error in flow control */
+ }
+
+ return 0;
 }
 
 /**
-- 
1.7.1