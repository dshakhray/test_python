From 7b245671cd53e58e1caf0edeab3b5bc4ff3e6198 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:19:34 -0400
Subject: [fs] sunrpc: Ensure that we handle ENOBUFS errors correctly

Message-id: <1411050057-12417-12-git-send-email-steved@redhat.com>
Patchwork-id: 96187
O-Subject: [RHEL7.1 PATCH 11/94] SUNRPC: Ensure that we handle ENOBUFS errors correctly.
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

Currently, an ENOBUFS error will result in a fatal error for the RPC
call. Normally, we will just want to wait and then retry.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 3601c4a91ebbbf1cf69f66a2abeffc6c64a4fe64
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/sunrpc/clnt.c b/net/sunrpc/clnt.c
index 2e6ab10..575e63f 100644
--- a/net/sunrpc/clnt.c
+++ b/net/sunrpc/clnt.c
@@ -1746,6 +1746,7 @@ call_bind_status(struct rpc_task *task)
  case -EHOSTDOWN:
  case -EHOSTUNREACH:
  case -ENETUNREACH:
+ case -ENOBUFS:
  case -EPIPE:
   dprintk("RPC: %5u remote rpcbind unreachable: %d\n",
     task->tk_pid, task->tk_status);
@@ -1812,6 +1813,7 @@ call_connect_status(struct rpc_task *task)
  case -ECONNABORTED:
  case -ENETUNREACH:
  case -EHOSTUNREACH:
+ case -ENOBUFS:
   if (RPC_IS_SOFTCONN(task))
    break;
   /* retry with existing socket, after a delay */
@@ -1918,6 +1920,7 @@ call_transmit_status(struct rpc_task *task)
  case -ECONNRESET:
  case -ECONNABORTED:
  case -ENOTCONN:
+ case -ENOBUFS:
  case -EPIPE:
   rpc_task_force_reencode(task);
  }
@@ -2034,6 +2037,7 @@ call_status(struct rpc_task *task)
  case -ECONNRESET:
  case -ECONNABORTED:
   rpc_force_rebind(clnt);
+ case -ENOBUFS:
   rpc_delay(task, 3*HZ);
  case -EPIPE:
  case -ENOTCONN:
diff --git a/net/sunrpc/xprtsock.c b/net/sunrpc/xprtsock.c
index 3d85759..4e75c80 100644
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@ -594,6 +594,7 @@ static int xs_local_send_request(struct rpc_task *task)
  }
 
  switch (status) {
+ case -ENOBUFS:
  case -EAGAIN:
   status = xs_nospace(task);
   break;
@@ -661,6 +662,7 @@ static int xs_udp_send_request(struct rpc_task *task)
   dprintk("RPC:       sendmsg returned unrecognized error %d\n",
    -status);
  case -ENETUNREACH:
+ case -ENOBUFS:
  case -EPIPE:
  case -ECONNREFUSED:
   /* When the server has died, an ICMP port unreachable message
@@ -758,6 +760,7 @@ static int xs_tcp_send_request(struct rpc_task *task)
   status = -ENOTCONN;
   /* Should we call xs_close() here? */
   break;
+ case -ENOBUFS:
  case -EAGAIN:
   status = xs_nospace(task);
   break;
@@ -1948,6 +1951,7 @@ static int xs_local_setup_socket(struct sock_xprt *transport)
   dprintk("RPC:       xprt %p connected to %s\n",
     xprt, xprt->address_strings[RPC_DISPLAY_ADDR]);
   xprt_set_connected(xprt);
+ case -ENOBUFS:
   break;
  case -ENOENT:
   dprintk("RPC:       xprt %p: socket %s does not exist\n",
@@ -2284,6 +2288,7 @@ static void xs_tcp_setup_socket(struct work_struct *work)
  case -ECONNREFUSED:
  case -ECONNRESET:
  case -ENETUNREACH:
+ case -ENOBUFS:
   /* retry with existing socket, after a delay */
   goto out;
  }
-- 
1.7.1