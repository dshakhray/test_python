From 82a77408a8d5396630a8b4ddede4034115387dab Mon Sep 17 00:00:00 2001
From: Michal Schmidt <mschmidt@redhat.com>
Date: Fri, 5 Sep 2014 19:49:07 -0400
Subject: [ethernet] bnx2x: slight optimization of addr compare

Message-id: <1409946615-5862-3-git-send-email-mschmidt@redhat.com>
Patchwork-id: 91549
O-Subject: [RHEL7.1 PATCH 02/70] net: bnx2x: slight optimization of addr compare
Bugzilla: 1089402
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1089402

Upstream commit:
commit 8fd90de800a838320406c29587d40fb8167ec48e
Author: dingtianhong <dingtianhong@huawei.com>
Date:   Mon Dec 30 15:40:32 2013 +0800

    net: bnx2x: slight optimization of addr compare

    Use the possibly more efficient ether_addr_equal or
    ether_addr_equal_unaligned to instead of memcmp.

    Cc: Ariel Elior <ariele@broadcom.com>
    Cc: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c
    Due to patch "bnx2x: namespace and dead code cleanups" having
    already been applied (out of order).
---

diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c
index 7ee099c..0fb6ff2 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c
@@ -614,7 +614,7 @@ static int bnx2x_check_mac_add(struct bnx2x *bp,
 
  /* Check if a requested MAC already exists */
  list_for_each_entry(pos, &o->head, link)
-  if (!memcmp(data->mac.mac, pos->u.mac.mac, ETH_ALEN) &&
+  if (ether_addr_equal(data->mac.mac, pos->u.mac.mac) &&
       (data->mac.is_inner_mac == pos->u.mac.is_inner_mac))
    return -EEXIST;
 
@@ -647,7 +647,7 @@ static struct bnx2x_vlan_mac_registry_elem *
  DP(BNX2X_MSG_SP, "Checking MAC %pM for DEL command\n", data->mac.mac);
 
  list_for_each_entry(pos, &o->head, link)
-  if ((!memcmp(data->mac.mac, pos->u.mac.mac, ETH_ALEN)) &&
+  if (ether_addr_equal(data->mac.mac, pos->u.mac.mac) &&
       (data->mac.is_inner_mac == pos->u.mac.is_inner_mac))
    return pos;
 
diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c
index 1b0a9f9..e42f48d 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c
@@ -3716,7 +3716,7 @@ enum sample_bulletin_result bnx2x_sample_bulletin(struct bnx2x *bp)
 
  /* the mac address in bulletin board is valid and is new */
  if (bulletin.valid_bitmap & 1 << MAC_ADDR_VALID &&
-     memcmp(bulletin.mac, bp->old_bulletin.mac, ETH_ALEN)) {
+     !ether_addr_equal(bulletin.mac, bp->old_bulletin.mac)) {
   /* update new mac to net device */
   memcpy(bp->dev->dev_addr, bulletin.mac, ETH_ALEN);
  }
diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
index a46d26c..3fa6c2a 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
@@ -1721,7 +1721,7 @@ static void bnx2x_vf_mbx_set_q_filters(struct bnx2x *bp,
 
   /* ...and only the mac set by the ndo */
   if (filters->n_mac_vlan_filters == 1 &&
-      memcmp(filters->filters->mac, bulletin->mac, ETH_ALEN)) {
+      !ether_addr_equal(filters->filters->mac, bulletin->mac)) {
    BNX2X_ERR("VF[%d] requested the addition of a mac address not matching the one configured by set_vf_mac ndo\n",
       vf->abs_vfid);
 
-- 
1.7.1