From f75bd29fdbf023274080380fb40868f24b333f9c Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:13:48 -0400
Subject: [powerpc] Fix bugs in emulate_step()

Message-id: <1410545655-205645-600-git-send-email-dzickus@redhat.com>
Patchwork-id: 94577
O-Subject: [RHEL7 PATCH 599/626] powerpc: Fix bugs in emulate_step()
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit e698b9667879b79e479cc985f9d74ecf126e343e
Author: Paul Mackerras <paulus@samba.org>
Date:   Sat Jul 19 17:47:57 2014 +1000

    powerpc: Fix bugs in emulate_step()

    This fixes some bugs in emulate_step().  First, the setting of the carry
    bit for the arithmetic right-shift instructions was not correct on 64-bit
    machines because we were masking with a mask of type int rather than
    unsigned long.  Secondly, the sld (shift left doubleword) instruction was
    using the wrong instruction field for the register containing the shift
    count.

    Signed-off-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/lib/sstep.c b/arch/powerpc/lib/sstep.c
index 8c4ae90..7c19bbf 100644
--- a/arch/powerpc/lib/sstep.c
+++ b/arch/powerpc/lib/sstep.c
@@ -1198,7 +1198,7 @@ int __kprobes emulate_step(struct pt_regs *regs, unsigned int instr)
    sh = regs->gpr[rb] & 0x3f;
    ival = (signed int) regs->gpr[rd];
    regs->gpr[ra] = ival >> (sh < 32 ? sh : 31);
-   if (ival < 0 && (sh >= 32 || (ival & ((1 << sh) - 1)) != 0))
+   if (ival < 0 && (sh >= 32 || (ival & ((1ul << sh) - 1)) != 0))
     regs->xer |= XER_CA;
    else
     regs->xer &= ~XER_CA;
@@ -1208,7 +1208,7 @@ int __kprobes emulate_step(struct pt_regs *regs, unsigned int instr)
    sh = rb;
    ival = (signed int) regs->gpr[rd];
    regs->gpr[ra] = ival >> sh;
-   if (ival < 0 && (ival & ((1 << sh) - 1)) != 0)
+   if (ival < 0 && (ival & ((1ul << sh) - 1)) != 0)
     regs->xer |= XER_CA;
    else
     regs->xer &= ~XER_CA;
@@ -1216,7 +1216,7 @@ int __kprobes emulate_step(struct pt_regs *regs, unsigned int instr)
 
 #ifdef __powerpc64__
   case 27: /* sld */
-   sh = regs->gpr[rd] & 0x7f;
+   sh = regs->gpr[rb] & 0x7f;
    if (sh < 64)
     regs->gpr[ra] = regs->gpr[rd] << sh;
    else
@@ -1235,7 +1235,7 @@ int __kprobes emulate_step(struct pt_regs *regs, unsigned int instr)
    sh = regs->gpr[rb] & 0x7f;
    ival = (signed long int) regs->gpr[rd];
    regs->gpr[ra] = ival >> (sh < 64 ? sh : 63);
-   if (ival < 0 && (sh >= 64 || (ival & ((1 << sh) - 1)) != 0))
+   if (ival < 0 && (sh >= 64 || (ival & ((1ul << sh) - 1)) != 0))
     regs->xer |= XER_CA;
    else
     regs->xer &= ~XER_CA;
@@ -1246,7 +1246,7 @@ int __kprobes emulate_step(struct pt_regs *regs, unsigned int instr)
    sh = rb | ((instr & 2) << 4);
    ival = (signed long int) regs->gpr[rd];
    regs->gpr[ra] = ival >> sh;
-   if (ival < 0 && (ival & ((1 << sh) - 1)) != 0)
+   if (ival < 0 && (ival & ((1ul << sh) - 1)) != 0)
     regs->xer |= XER_CA;
    else
     regs->xer &= ~XER_CA;
-- 
1.7.1