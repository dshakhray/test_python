From af486cfa9d0a5f50835f72b1db604b85edbb20f8 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 14:38:34 -0400
Subject: [ethernet] enic: fix return values in enic_set_coalesce

Message-id: <1409668716-4814-23-git-send-email-sassmann@redhat.com>
Patchwork-id: 90648
O-Subject: [RHEL7.1 PATCH 22/24] enic: fix return values in enic_set_coalesce
Bugzilla: 1107934
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Govindarajulu Varadarajan <_govind@gmx.com>

enic_set_coalesce() has two problems.

* It should return -EINVAL and not -EOPNOTSUPP for invalid coalesce values.

* In case of MSIX, enic_set_coalesce return error after applying requested
  coalescing setting partially. We should either apply all the setting requeste
  and return success or apply non and return error.

* This patch also simplifies the algo.

This was introduced by
'7c2ce6e60f703 enic: Add support for adaptive interrupt coalescing'

These changes were suggested by Ben Hutchings here
http://www.spinics.net/lists/netdev/msg283972.html

Also change enic driver version.

Signed-off-by: Govindarajulu Varadarajan <_govind@gmx.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit a16a3361927f75e6032df110920c83ca6c5045d3)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/cisco/enic/enic.h b/drivers/net/ethernet/cisco/enic/enic.h
index cdd4d82..d723d81 100644
--- a/drivers/net/ethernet/cisco/enic/enic.h
+++ b/drivers/net/ethernet/cisco/enic/enic.h
@@ -33,7 +33,7 @@
 
 #define DRV_NAME  "enic"
 #define DRV_DESCRIPTION  "Cisco VIC Ethernet NIC Driver"
-#define DRV_VERSION  "2.1.1.50"
+#define DRV_VERSION  "2.1.1.67"
 #define DRV_COPYRIGHT  "Copyright 2008-2013 Cisco Systems, Inc"
 
 #define ENIC_BARS_MAX  6
diff --git a/drivers/net/ethernet/cisco/enic/enic_ethtool.c b/drivers/net/ethernet/cisco/enic/enic_ethtool.c
index 2e50b54..c75f84b 100644
--- a/drivers/net/ethernet/cisco/enic/enic_ethtool.c
+++ b/drivers/net/ethernet/cisco/enic/enic_ethtool.c
@@ -231,7 +231,7 @@ static int enic_set_coalesce(struct net_device *netdev,
   if (ecmd->use_adaptive_rx_coalesce ||
       ecmd->rx_coalesce_usecs_low  ||
       ecmd->rx_coalesce_usecs_high)
-   return -EOPNOTSUPP;
+   return -EINVAL;
 
   intr = enic_legacy_io_intr();
   vnic_intr_coalescing_timer_set(&enic->intr[intr],
@@ -243,34 +243,29 @@ static int enic_set_coalesce(struct net_device *netdev,
   if (ecmd->use_adaptive_rx_coalesce ||
       ecmd->rx_coalesce_usecs_low  ||
       ecmd->rx_coalesce_usecs_high)
-   return -EOPNOTSUPP;
+   return -EINVAL;
 
   vnic_intr_coalescing_timer_set(&enic->intr[0],
    tx_coalesce_usecs);
   break;
  case VNIC_DEV_INTR_MODE_MSIX:
+  if (ecmd->rx_coalesce_usecs_high &&
+      (rx_coalesce_usecs_high <
+       rx_coalesce_usecs_low + ENIC_AIC_LARGE_PKT_DIFF))
+    return -EINVAL;
+
   for (i = 0; i < enic->wq_count; i++) {
    intr = enic_msix_wq_intr(enic, i);
    vnic_intr_coalescing_timer_set(&enic->intr[intr],
     tx_coalesce_usecs);
   }
 
-  if (rxcoal->use_adaptive_rx_coalesce) {
-   if (!ecmd->use_adaptive_rx_coalesce) {
-    rxcoal->use_adaptive_rx_coalesce = 0;
-    enic_intr_coal_set_rx(enic, rx_coalesce_usecs);
-   }
-  } else {
-   if (ecmd->use_adaptive_rx_coalesce)
-    rxcoal->use_adaptive_rx_coalesce = 1;
-   else
-    enic_intr_coal_set_rx(enic, rx_coalesce_usecs);
-  }
+  rxcoal->use_adaptive_rx_coalesce =
+     !!ecmd->use_adaptive_rx_coalesce;
+  if (!rxcoal->use_adaptive_rx_coalesce)
+   enic_intr_coal_set_rx(enic, rx_coalesce_usecs);
 
   if (ecmd->rx_coalesce_usecs_high) {
-   if (rx_coalesce_usecs_high <
-       (rx_coalesce_usecs_low + ENIC_AIC_LARGE_PKT_DIFF))
-    return -EINVAL;
    rxcoal->range_end = rx_coalesce_usecs_high;
    rxcoal->small_pkt_range_start = rx_coalesce_usecs_low;
    rxcoal->large_pkt_range_start = rx_coalesce_usecs_low +
-- 
1.7.1