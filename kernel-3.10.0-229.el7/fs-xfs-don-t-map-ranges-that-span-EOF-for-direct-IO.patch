From ad944f661e63287ce441812d2122949fb95402ba Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 20:59:59 -0400
Subject: [fs] xfs: don't map ranges that span EOF for direct IO

Message-id: <1412888441-4181-6-git-send-email-sandeen@redhat.com>
Patchwork-id: 97348
O-Subject: [RHEL7.1 PATCH 05/47] [fs] xfs: don't map ranges that span EOF for direct IO
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit 0e1f789d0dc38db79dfc4ddfd9cf541a8c198b7a
    Author: Dave Chinner <dchinner@redhat.com>
    Date:   Thu Apr 17 08:15:19 2014 +1000

    xfs: don't map ranges that span EOF for direct IO

    Al Viro tracked down the problem that has caused generic/263 to fail
    on XFS since the test was introduced. If is caused by
    xfs_get_blocks() mapping a single extent that spans EOF without
    marking it as buffer-new() so that the direct IO code does not zero
    the tail of the block at the new EOF. This is a long standing bug
    that has been around for many, many years.

    Because xfs_get_blocks() starts the map before EOF, it can't set
    buffer_new(), because that causes he direct IO code to also zero
    unaligned sectors at the head of the IO. This would overwrite valid
    data with zeros, and hence we cannot validly return a single extent
    that spans EOF to direct IO.

    Fix this by detecting a mapping that spans EOF and truncate it down
    to EOF. This results in the the direct IO code doing the right thing
    for unaligned data blocks before EOF, and then returning to get
    another mapping for the region beyond EOF which XFS treats correctly
    by setting buffer_new() on it. This makes direct Io behave correctly
    w.r.t. tail block zeroing beyond EOF, and fsx is happy about that.

    Again, thanks to Al Viro for finding what I couldn't.

    [ dchinner: Fix for __divdi3 build error:

     Reported-by: Paul Gortmaker <paul.gortmaker@windriver.com>
     Tested-by: Paul Gortmaker <paul.gortmaker@windriver.com>
     Signed-off-by: Mark Tinguely <tinguely@sgi.com>
     Reviewed-by: Eric Sandeen <sandeen@redhat.com>
    ]

    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Tested-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_aops.c b/fs/xfs/xfs_aops.c
index 8e23af0..c6a1ad9 100644
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@ -1351,6 +1351,14 @@ __xfs_get_blocks(
  /*
   * If this is O_DIRECT or the mpage code calling tell them how large
   * the mapping is, so that we can avoid repeated get_blocks calls.
+  *
+  * If the mapping spans EOF, then we have to break the mapping up as the
+  * mapping for blocks beyond EOF must be marked new so that sub block
+  * regions can be correctly zeroed. We can't do this for mappings within
+  * EOF unless the mapping was just allocated or is unwritten, otherwise
+  * the callers would overwrite existing data with zeros. Hence we have
+  * to split the mapping into a range up to and including EOF, and a
+  * second mapping for beyond EOF.
   */
  if (direct || size > (1 << inode->i_blkbits)) {
   xfs_off_t  mapping_size;
@@ -1361,6 +1369,12 @@ __xfs_get_blocks(
   ASSERT(mapping_size > 0);
   if (mapping_size > size)
    mapping_size = size;
+  if (offset < i_size_read(inode) &&
+      offset + mapping_size >= i_size_read(inode)) {
+   /* limit mapping to block that spans EOF */
+   mapping_size = roundup_64(i_size_read(inode) - offset,
+        1 << inode->i_blkbits);
+  }
   if (mapping_size > LONG_MAX)
    mapping_size = LONG_MAX;
 
-- 
1.7.1