From 64d570e82d0e70c3a20a1d7a87938f765f03bc44 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:53:35 -0400
Subject: [fs] nfs: Create a common nfs_pgio_result_common function

Message-id: <1403798077-28799-17-git-send-email-steved@redhat.com>
Patchwork-id: 84894
O-Subject: [RHEL7.1 PATCH 16/78] NFS: Create a common nfs_pgio_result_common function
Bugzilla: 1113248
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Anna Schumaker <Anna.Schumaker@netapp.com>

Combining these functions will let me make a single nfs_rw_common_ops
struct (see the next patch).

Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 0eecb2145c1ce18e36617008424a93836ad0a3bd
Bugzilla: 1113248
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/internal.h b/fs/nfs/internal.h
index 38a1e4c..5d67d71 100644
--- a/fs/nfs/internal.h
+++ b/fs/nfs/internal.h
@@ -243,6 +243,7 @@ struct nfs_pgio_data *nfs_pgio_data_alloc(struct nfs_pgio_header *, unsigned int
 void nfs_pgio_data_release(struct nfs_pgio_data *);
 void nfs_pgio_prepare(struct rpc_task *, void *);
 void nfs_pgio_release(void *);
+void nfs_pgio_result(struct rpc_task *, void *);
 
 static inline void nfs_iocounter_init(struct nfs_io_counter *c)
 {
diff --git a/fs/nfs/pagelist.c b/fs/nfs/pagelist.c
index 0fa211d..f74df87 100644
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@ -24,6 +24,8 @@
 #include "internal.h"
 #include "pnfs.h"
 
+#define NFSDBG_FACILITY  NFSDBG_PAGECACHE
+
 static struct kmem_cache *nfs_page_cachep;
 
 static bool nfs_pgarray_set(struct nfs_page_array *p, unsigned int pagecount)
@@ -447,6 +449,27 @@ void nfs_pageio_init(struct nfs_pageio_descriptor *desc,
 }
 EXPORT_SYMBOL_GPL(nfs_pageio_init);
 
+/**
+ * nfs_pgio_result - Basic pageio error handling
+ * @task: The task that ran
+ * @calldata: Pageio data to check
+ */
+void nfs_pgio_result(struct rpc_task *task, void *calldata)
+{
+ struct nfs_pgio_data *data = calldata;
+ struct inode *inode = data->header->inode;
+
+ dprintk("NFS: %s: %5u, (status %d)\n", __func__,
+  task->tk_pid, task->tk_status);
+
+ if (data->header->rw_ops->rw_done(task, data, inode) != 0)
+  return;
+ if (task->tk_status < 0)
+  nfs_set_pgio_error(data->header, task->tk_status, data->args.offset);
+ else
+  data->header->rw_ops->rw_result(task, data);
+}
+
 static bool nfs_match_open_context(const struct nfs_open_context *ctx1,
   const struct nfs_open_context *ctx2)
 {
diff --git a/fs/nfs/read.c b/fs/nfs/read.c
index cfa15e8..bc78bd2 100644
--- a/fs/nfs/read.c
+++ b/fs/nfs/read.c
@@ -388,15 +388,10 @@ static const struct nfs_pageio_ops nfs_pageio_read_ops = {
  * This is the callback from RPC telling us whether a reply was
  * received or some error occurred (timeout or socket shutdown).
  */
-int nfs_readpage_result(struct rpc_task *task, struct nfs_pgio_data *data)
+static int nfs_readpage_done(struct rpc_task *task, struct nfs_pgio_data *data,
+        struct inode *inode)
 {
- struct inode *inode = data->header->inode;
- int status;
-
- dprintk("NFS: %s: %5u, (status %d)\n", __func__, task->tk_pid,
-   task->tk_status);
-
- status = NFS_PROTO(inode)->read_done(task, data);
+ int status = NFS_PROTO(inode)->read_done(task, data);
  if (status != 0)
   return status;
 
@@ -429,17 +424,11 @@ static void nfs_readpage_retry(struct rpc_task *task, struct nfs_pgio_data *data
  rpc_restart_call_prepare(task);
 }
 
-static void nfs_readpage_result_common(struct rpc_task *task, void *calldata)
+static void nfs_readpage_result(struct rpc_task *task, struct nfs_pgio_data *data)
 {
- struct nfs_pgio_data *data = calldata;
  struct nfs_pgio_header *hdr = data->header;
 
- /* Note the only returns of nfs_readpage_result are 0 and -EAGAIN */
- if (nfs_readpage_result(task, data) != 0)
-  return;
- if (task->tk_status < 0)
-  nfs_set_pgio_error(hdr, task->tk_status, data->args.offset);
- else if (data->res.eof) {
+ if (data->res.eof) {
   loff_t bound;
 
   bound = data->args.offset + data->res.count;
@@ -456,7 +445,7 @@ static void nfs_readpage_result_common(struct rpc_task *task, void *calldata)
 
 static const struct rpc_call_ops nfs_read_common_ops = {
  .rpc_call_prepare = nfs_pgio_prepare,
- .rpc_call_done = nfs_readpage_result_common,
+ .rpc_call_done = nfs_pgio_result,
  .rpc_release = nfs_pgio_release,
 };
 
@@ -625,4 +614,6 @@ static const struct nfs_rw_ops nfs_rw_read_ops = {
  .rw_mode  = FMODE_READ,
  .rw_alloc_header = nfs_readhdr_alloc,
  .rw_free_header  = nfs_readhdr_free,
+ .rw_done  = nfs_readpage_done,
+ .rw_result  = nfs_readpage_result,
 };
diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index dab7676..5122472 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -1257,20 +1257,6 @@ void nfs_commit_prepare(struct rpc_task *task, void *calldata)
  NFS_PROTO(data->inode)->commit_rpc_prepare(task, data);
 }
 
-/*
- * Handle a write reply that flushes a whole page.
- *
- * FIXME: There is an inherent race with invalidate_inode_pages and
- *   writebacks since the page->count is kept > 1 for as long
- *   as the page has a write request pending.
- */
-static void nfs_writeback_done_common(struct rpc_task *task, void *calldata)
-{
- struct nfs_pgio_data *data = calldata;
-
- nfs_writeback_done(task, data);
-}
-
 static void nfs_writeback_release_common(struct nfs_pgio_data *data)
 {
  struct nfs_pgio_header *hdr = data->header;
@@ -1290,7 +1276,7 @@ static void nfs_writeback_release_common(struct nfs_pgio_data *data)
 
 static const struct rpc_call_ops nfs_write_common_ops = {
  .rpc_call_prepare = nfs_pgio_prepare,
- .rpc_call_done = nfs_writeback_done_common,
+ .rpc_call_done = nfs_pgio_result,
  .rpc_release = nfs_pgio_release,
 };
 
@@ -1322,16 +1308,11 @@ static int nfs_should_remove_suid(const struct inode *inode)
 /*
  * This function is called when the WRITE call is complete.
  */
-void nfs_writeback_done(struct rpc_task *task, struct nfs_pgio_data *data)
+static int nfs_writeback_done(struct rpc_task *task, struct nfs_pgio_data *data,
+         struct inode *inode)
 {
- struct nfs_pgio_args *argp = &data->args;
- struct nfs_pgio_res *resp = &data->res;
- struct inode  *inode = data->header->inode;
  int status;
 
- dprintk("NFS: %5u nfs_writeback_done (status %d)\n",
-  task->tk_pid, task->tk_status);
-
  /*
   * ->write_done will attempt to use post-op attributes to detect
   * conflicting writes by other clients.  A strict interpretation
@@ -1341,11 +1322,11 @@ void nfs_writeback_done(struct rpc_task *task, struct nfs_pgio_data *data)
   */
  status = NFS_PROTO(inode)->write_done(task, data);
  if (status != 0)
-  return;
- nfs_add_stats(inode, NFSIOS_SERVERWRITTENBYTES, resp->count);
+  return status;
+ nfs_add_stats(inode, NFSIOS_SERVERWRITTENBYTES, data->res.count);
 
 #if IS_ENABLED(CONFIG_NFS_V3) || IS_ENABLED(CONFIG_NFS_V4)
- if (resp->verf->committed < argp->stable && task->tk_status >= 0) {
+ if (data->res.verf->committed < data->args.stable && task->tk_status >= 0) {
   /* We tried a write call, but the server did not
    * commit data to stable storage even though we
    * requested it.
@@ -1361,25 +1342,31 @@ void nfs_writeback_done(struct rpc_task *task, struct nfs_pgio_data *data)
    dprintk("NFS:       faulty NFS server %s:"
     " (committed = %d) != (stable = %d)\n",
     NFS_SERVER(inode)->nfs_client->cl_hostname,
-    resp->verf->committed, argp->stable);
+    data->res.verf->committed, data->args.stable);
    complain = jiffies + 300 * HZ;
   }
  }
 #endif
- if (task->tk_status < 0) {
-  nfs_set_pgio_error(data->header, task->tk_status, argp->offset);
-  return;
- }
 
  /* Deal with the suid/sgid bit corner case */
  if (nfs_should_remove_suid(inode))
   nfs_mark_for_revalidate(inode);
+ return 0;
+}
+
+/*
+ * This function is called when the WRITE call is complete.
+ */
+static void nfs_writeback_result(struct rpc_task *task, struct nfs_pgio_data *data)
+{
+ struct nfs_pgio_args *argp = &data->args;
+ struct nfs_pgio_res *resp = &data->res;
 
  if (resp->count < argp->count) {
   static unsigned long    complain;
 
   /* This a short write! */
-  nfs_inc_stats(inode, NFSIOS_SHORTWRITE);
+  nfs_inc_stats(data->header->inode, NFSIOS_SHORTWRITE);
 
   /* Has the server at least made some progress? */
   if (resp->count == 0) {
@@ -1913,4 +1900,6 @@ static const struct nfs_rw_ops nfs_rw_write_ops = {
  .rw_alloc_header = nfs_writehdr_alloc,
  .rw_free_header  = nfs_writehdr_free,
  .rw_release  = nfs_writeback_release_common,
+ .rw_done  = nfs_writeback_done,
+ .rw_result  = nfs_writeback_result,
 };
diff --git a/include/linux/nfs_fs.h b/include/linux/nfs_fs.h
index 3c781e9..358a40c 100644
--- a/include/linux/nfs_fs.h
+++ b/include/linux/nfs_fs.h
@@ -520,7 +520,6 @@ extern int  nfs_writepage(struct page *page, struct writeback_control *wbc);
 extern int  nfs_writepages(struct address_space *, struct writeback_control *);
 extern int  nfs_flush_incompatible(struct file *file, struct page *page);
 extern int  nfs_updatepage(struct file *, struct page *, unsigned int, unsigned int);
-extern void nfs_writeback_done(struct rpc_task *, struct nfs_pgio_data *);
 
 /*
  * Try to write back everything synchronously (but check the
@@ -553,7 +552,6 @@ nfs_have_writebacks(struct inode *inode)
 extern int  nfs_readpage(struct file *, struct page *);
 extern int  nfs_readpages(struct file *, struct address_space *,
   struct list_head *, unsigned);
-extern int  nfs_readpage_result(struct rpc_task *, struct nfs_pgio_data *);
 extern int  nfs_readpage_async(struct nfs_open_context *, struct inode *,
           struct page *);
 
diff --git a/include/linux/nfs_page.h b/include/linux/nfs_page.h
index da00a4d..01aa29c 100644
--- a/include/linux/nfs_page.h
+++ b/include/linux/nfs_page.h
@@ -57,6 +57,8 @@ struct nfs_rw_ops {
  struct nfs_rw_header *(*rw_alloc_header)(void);
  void (*rw_free_header)(struct nfs_rw_header *);
  void (*rw_release)(struct nfs_pgio_data *);
+ int  (*rw_done)(struct rpc_task *, struct nfs_pgio_data *, struct inode *);
+ void (*rw_result)(struct rpc_task *, struct nfs_pgio_data *);
 };
 
 struct nfs_pageio_descriptor {
-- 
1.7.1