From 9330434a200affd5ea23b4f64b2d83d934af9811 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:13:15 -0400
Subject: [powerpc] eeh: Clear frozen state for child PE

Message-id: <1410545655-205645-567-git-send-email-dzickus@redhat.com>
Patchwork-id: 94584
O-Subject: [RHEL7 PATCH 566/626] powerpc/eeh: Clear frozen state for child PE
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 2c66599206938412d1781171953d565652ca3b93
Author: Gavin Shan <gwshan@linux.vnet.ibm.com>
Date:   Mon May 5 09:29:02 2014 +1000

    powerpc/eeh: Clear frozen state for child PE

    Since commit cb523e09 ("powerpc/eeh: Avoid I/O access during PE
    reset"), the PE is kept as frozen state on hardware level until
    the PE reset is done completely. After that, we explicitly clear
    the frozen state of the affected PE. However, there might have
    frozen child PEs of the affected PE and we also need clear their
    frozen state as well. Otherwise, the recovery is going to fail.

    Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/eeh_driver.c b/arch/powerpc/kernel/eeh_driver.c
index 7100a5b..8bb40e7 100644
--- a/arch/powerpc/kernel/eeh_driver.c
+++ b/arch/powerpc/kernel/eeh_driver.c
@@ -447,8 +447,9 @@ static void *eeh_pe_detach_dev(void *data, void *userdata)
  * PE reset (for 3 times), we try to clear the frozen state
  * for 3 times as well.
  */
-static int eeh_clear_pe_frozen_state(struct eeh_pe *pe)
+static void *__eeh_clear_pe_frozen_state(void *data, void *flag)
 {
+ struct eeh_pe *pe = (struct eeh_pe *)data;
  int i, rc;
 
  for (i = 0; i < 3; i++) {
@@ -461,13 +462,24 @@ static int eeh_clear_pe_frozen_state(struct eeh_pe *pe)
  }
 
  /* The PE has been isolated, clear it */
- if (rc)
+ if (rc) {
   pr_warn("%s: Can't clear frozen PHB#%x-PE#%x (%d)\n",
    __func__, pe->phb->global_number, pe->addr, rc);
- else
+  return (void *)pe;
+ }
+
+ return NULL;
+}
+
+static int eeh_clear_pe_frozen_state(struct eeh_pe *pe)
+{
+ void *rc;
+
+ rc = eeh_pe_traverse(pe, __eeh_clear_pe_frozen_state, NULL);
+ if (!rc)
   eeh_pe_state_clear(pe, EEH_PE_ISOLATED);
 
- return rc;
+ return rc ? -EIO : 0;
 }
 
 /**
-- 
1.7.1