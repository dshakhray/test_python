From c404490ecfbffe1a6fa023dba406e0e3c5cf974e Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:55:25 -0400
Subject: [fs] truncate: drop 'oldsize' truncate_pagecache() parameter

Message-id: <1414058125-4183-172-git-send-email-lczerner@redhat.com>
Patchwork-id: 98229
O-Subject: [RHEL 7.1 PATCH v2 171/171] truncate: drop 'oldsize' truncate_pagecache() parameter
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 7caef26767c1727d7abfbbbfbe8b2bb473430d48

 We're removing unneeded argument from truncate_pagecache(), however it does
 not include ceph because upstream at that point ceph was using
 truncate_inode_pages(). The switch to truncate_pagecache() was backported
 although before the truncate_pagecach() change so we need to fix it
 here.

 truncate_pagecache() doesn't care about old size since commit
 cedabed49b39 ("vfs: Fix vmtruncate() regression").  Let's drop it.

 Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
 Cc: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
 Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
 Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/adfs/inode.c b/fs/adfs/inode.c
index 5f95d1e..b9acada 100644
--- a/fs/adfs/inode.c
+++ b/fs/adfs/inode.c
@@ -50,7 +50,7 @@ static void adfs_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size)
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
 }
 
 static int adfs_write_begin(struct file *file, struct address_space *mapping,
diff --git a/fs/affs/file.c b/fs/affs/file.c
index af3261b..1d5e51d 100644
--- a/fs/affs/file.c
+++ b/fs/affs/file.c
@@ -406,7 +406,7 @@ static void affs_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   affs_truncate(inode);
  }
 }
diff --git a/fs/bfs/file.c b/fs/bfs/file.c
index ad3ea14..ae28922 100644
--- a/fs/bfs/file.c
+++ b/fs/bfs/file.c
@@ -166,7 +166,7 @@ static void bfs_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size)
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
 }
 
 static int bfs_write_begin(struct file *file, struct address_space *mapping,
diff --git a/fs/btrfs/free-space-cache.c b/fs/btrfs/free-space-cache.c
index 8326180..2b0a627 100644
--- a/fs/btrfs/free-space-cache.c
+++ b/fs/btrfs/free-space-cache.c
@@ -220,12 +220,10 @@ int btrfs_truncate_free_space_cache(struct btrfs_root *root,
         struct btrfs_trans_handle *trans,
         struct inode *inode)
 {
- loff_t oldsize;
  int ret = 0;
 
- oldsize = i_size_read(inode);
  btrfs_i_size_write(inode, 0);
- truncate_pagecache(inode, oldsize, 0);
+ truncate_pagecache(inode, 0);
 
  /*
   * We don't need an orphan item because truncating the free space cache
diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index 482f181..db05561 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -4515,7 +4515,7 @@ static int btrfs_setsize(struct inode *inode, struct iattr *attr)
   inode->i_ctime = inode->i_mtime = current_fs_time(inode->i_sb);
 
  if (newsize > oldsize) {
-  truncate_pagecache(inode, oldsize, newsize);
+  truncate_pagecache(inode, newsize);
   ret = btrfs_cont_expand(inode, oldsize, newsize);
   if (ret)
    return ret;
diff --git a/fs/ceph/inode.c b/fs/ceph/inode.c
index 5b3c847..6dfe353 100644
--- a/fs/ceph/inode.c
+++ b/fs/ceph/inode.c
@@ -1533,7 +1533,7 @@ static void ceph_invalidate_work(struct work_struct *work)
  orig_gen = ci->i_rdcache_gen;
  spin_unlock(&ci->i_ceph_lock);
 
- truncate_pagecache(inode, -1, 0);
+ truncate_pagecache(inode, 0);
 
  spin_lock(&ci->i_ceph_lock);
  if (orig_gen == ci->i_rdcache_gen &&
@@ -1635,7 +1635,7 @@ retry:
       ci->i_truncate_pending, to);
  spin_unlock(&ci->i_ceph_lock);
 
- truncate_pagecache(inode, -1, to);
+ truncate_pagecache(inode, to);
 
  spin_lock(&ci->i_ceph_lock);
  if (to == ci->i_truncate_size) {
diff --git a/fs/cifs/inode.c b/fs/cifs/inode.c
index 32a8da0..9ff8df8 100644
--- a/fs/cifs/inode.c
+++ b/fs/cifs/inode.c
@@ -1965,14 +1965,11 @@ static int cifs_truncate_page(struct address_space *mapping, loff_t from)
 
 static void cifs_setsize(struct inode *inode, loff_t offset)
 {
- loff_t oldsize;
-
  spin_lock(&inode->i_lock);
- oldsize = inode->i_size;
  i_size_write(inode, offset);
  spin_unlock(&inode->i_lock);
 
- truncate_pagecache(inode, oldsize, offset);
+ truncate_pagecache(inode, offset);
 }
 
 static int
diff --git a/fs/exofs/inode.c b/fs/exofs/inode.c
index cee0ed3..3bc143b 100644
--- a/fs/exofs/inode.c
+++ b/fs/exofs/inode.c
@@ -861,7 +861,7 @@ static int exofs_writepage(struct page *page, struct writeback_control *wbc)
 static void _write_failed(struct inode *inode, loff_t to)
 {
  if (to > inode->i_size)
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
 }
 
 int exofs_write_begin(struct file *file, struct address_space *mapping,
diff --git a/fs/ext2/inode.c b/fs/ext2/inode.c
index 7fb8ae8..115fa58 100644
--- a/fs/ext2/inode.c
+++ b/fs/ext2/inode.c
@@ -58,7 +58,7 @@ static void ext2_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   ext2_truncate_blocks(inode, inode->i_size);
  }
 }
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index d49415f..525ae8d 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -4638,7 +4638,6 @@ int ext4_setattr(struct dentry *dentry, struct iattr *attr)
 
  if (attr->ia_valid & ATTR_SIZE && attr->ia_size != inode->i_size) {
   handle_t *handle;
-  loff_t oldsize = inode->i_size;
 
   if (!(ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS))) {
    struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
@@ -4701,7 +4700,7 @@ int ext4_setattr(struct dentry *dentry, struct iattr *attr)
    * Truncate pagecache after we've waited for commit
    * in data=journal mode to make pages freeable.
    */
-  truncate_pagecache(inode, oldsize, inode->i_size);
+   truncate_pagecache(inode, inode->i_size);
  }
  /*
   * We want to call ext4_truncate() even if attr->ia_size ==
diff --git a/fs/fat/inode.c b/fs/fat/inode.c
index f546d7f..b645803 100644
--- a/fs/fat/inode.c
+++ b/fs/fat/inode.c
@@ -147,7 +147,7 @@ static void fat_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   fat_truncate_blocks(inode, inode->i_size);
  }
 }
diff --git a/fs/fuse/dir.c b/fs/fuse/dir.c
index 4936194..8353dae 100644
--- a/fs/fuse/dir.c
+++ b/fs/fuse/dir.c
@@ -1682,7 +1682,7 @@ int fuse_do_setattr(struct inode *inode, struct iattr *attr,
   * FUSE_NOWRITE, otherwise fuse_launder_page() would deadlock.
   */
  if (S_ISREG(inode->i_mode) && oldsize != outarg.attr.size) {
-  truncate_pagecache(inode, oldsize, outarg.attr.size);
+  truncate_pagecache(inode, outarg.attr.size);
   invalidate_inode_pages2(inode->i_mapping);
  }
 
diff --git a/fs/fuse/inode.c b/fs/fuse/inode.c
index 06d2c89..378ca42 100644
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@ -218,7 +218,7 @@ void fuse_change_attributes(struct inode *inode, struct fuse_attr *attr,
   bool inval = false;
 
   if (oldsize != attr->size) {
-   truncate_pagecache(inode, oldsize, attr->size);
+   truncate_pagecache(inode, attr->size);
    inval = true;
   } else if (fc->auto_inval_data) {
    struct timespec new_mtime = {
diff --git a/fs/gfs2/bmap.c b/fs/gfs2/bmap.c
index f9c4262..9e43dd6 100644
--- a/fs/gfs2/bmap.c
+++ b/fs/gfs2/bmap.c
@@ -1017,7 +1017,7 @@ static int gfs2_journaled_truncate(struct inode *inode, u64 oldsize, u64 newsize
   chunk = oldsize - newsize;
   if (chunk > max_chunk)
    chunk = max_chunk;
-  truncate_pagecache(inode, oldsize, oldsize - chunk);
+  truncate_pagecache(inode, oldsize - chunk);
   oldsize -= chunk;
   gfs2_trans_end(sdp);
   error = gfs2_trans_begin(sdp, RES_DINODE, GFS2_JTRUNC_REVOKES);
@@ -1068,7 +1068,7 @@ static int trunc_start(struct inode *inode, u64 oldsize, u64 newsize)
  if (journaled)
   error = gfs2_journaled_truncate(inode, oldsize, newsize);
  else
-  truncate_pagecache(inode, oldsize, newsize);
+  truncate_pagecache(inode, newsize);
 
  if (error) {
   brelse(dibh);
diff --git a/fs/hfs/inode.c b/fs/hfs/inode.c
index b93550a..9e2fecd 100644
--- a/fs/hfs/inode.c
+++ b/fs/hfs/inode.c
@@ -41,7 +41,7 @@ static void hfs_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   hfs_file_truncate(inode);
  }
 }
diff --git a/fs/hfsplus/inode.c b/fs/hfsplus/inode.c
index f833d35..4b4ae8c 100644
--- a/fs/hfsplus/inode.c
+++ b/fs/hfsplus/inode.c
@@ -35,7 +35,7 @@ static void hfsplus_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   hfsplus_file_truncate(inode);
  }
 }
diff --git a/fs/hpfs/file.c b/fs/hpfs/file.c
index e4ba5fe..e8d2b42 100644
--- a/fs/hpfs/file.c
+++ b/fs/hpfs/file.c
@@ -112,7 +112,7 @@ static void hpfs_write_failed(struct address_space *mapping, loff_t to)
  hpfs_lock(inode->i_sb);
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   hpfs_truncate(inode);
  }
 
diff --git a/fs/jfs/inode.c b/fs/jfs/inode.c
index 7567755..6f8fe72 100644
--- a/fs/jfs/inode.c
+++ b/fs/jfs/inode.c
@@ -306,7 +306,7 @@ static void jfs_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   jfs_truncate(inode);
  }
 }
diff --git a/fs/minix/inode.c b/fs/minix/inode.c
index d9a934a..03aaeb1 100644
--- a/fs/minix/inode.c
+++ b/fs/minix/inode.c
@@ -400,7 +400,7 @@ static void minix_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   minix_truncate(inode);
  }
 }
diff --git a/fs/nfs/inode.c b/fs/nfs/inode.c
index 080ee8e..1695e82 100644
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@ -551,7 +551,6 @@ EXPORT_SYMBOL_GPL(nfs_setattr);
  */
 static int nfs_vmtruncate(struct inode * inode, loff_t offset)
 {
- loff_t oldsize;
  int err;
 
  err = inode_newsize_ok(inode, offset);
@@ -559,14 +558,13 @@ static int nfs_vmtruncate(struct inode * inode, loff_t offset)
   goto out;
 
  spin_lock(&inode->i_lock);
- oldsize = inode->i_size;
  i_size_write(inode, offset);
  /* Optimisation */
  if (offset == 0)
   NFS_I(inode)->cache_validity &= ~NFS_INO_INVALID_DATA;
  spin_unlock(&inode->i_lock);
 
- truncate_pagecache(inode, oldsize, offset);
+ truncate_pagecache(inode, offset);
 out:
  return err;
 }
diff --git a/fs/nilfs2/inode.c b/fs/nilfs2/inode.c
index 65b9afc..4fcb0d2 100644
--- a/fs/nilfs2/inode.c
+++ b/fs/nilfs2/inode.c
@@ -254,7 +254,7 @@ void nilfs_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   nilfs_truncate(inode);
  }
 }
diff --git a/fs/ntfs/file.c b/fs/ntfs/file.c
index c5670b8..ea4ba9d 100644
--- a/fs/ntfs/file.c
+++ b/fs/ntfs/file.c
@@ -1768,7 +1768,7 @@ static void ntfs_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   ntfs_truncate_vfs(inode);
  }
 }
diff --git a/fs/omfs/file.c b/fs/omfs/file.c
index e0d9b3e..54d57d6 100644
--- a/fs/omfs/file.c
+++ b/fs/omfs/file.c
@@ -311,7 +311,7 @@ static void omfs_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   omfs_truncate(inode);
  }
 }
diff --git a/fs/sysv/itree.c b/fs/sysv/itree.c
index c1a591a..66bc316 100644
--- a/fs/sysv/itree.c
+++ b/fs/sysv/itree.c
@@ -469,7 +469,7 @@ static void sysv_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size) {
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
   sysv_truncate(inode);
  }
 }
diff --git a/fs/udf/inode.c b/fs/udf/inode.c
index 2969d61..b06be27 100644
--- a/fs/udf/inode.c
+++ b/fs/udf/inode.c
@@ -172,7 +172,7 @@ static void udf_write_failed(struct address_space *mapping, loff_t to)
  loff_t isize = inode->i_size;
 
  if (to > isize) {
-  truncate_pagecache(inode, to, isize);
+  truncate_pagecache(inode, isize);
   if (iinfo->i_alloc_type != ICBTAG_FLAG_AD_IN_ICB) {
    down_write(&iinfo->i_data_sem);
    udf_clear_extent_cache(inode);
diff --git a/fs/ufs/inode.c b/fs/ufs/inode.c
index 6bcfca1..61e8a9b 100644
--- a/fs/ufs/inode.c
+++ b/fs/ufs/inode.c
@@ -531,7 +531,7 @@ static void ufs_write_failed(struct address_space *mapping, loff_t to)
  struct inode *inode = mapping->host;
 
  if (to > inode->i_size)
-  truncate_pagecache(inode, to, inode->i_size);
+  truncate_pagecache(inode, inode->i_size);
 }
 
 static int ufs_write_begin(struct file *file, struct address_space *mapping,
diff --git a/fs/xfs/xfs_aops.c b/fs/xfs/xfs_aops.c
index dc6b240..69d462e 100644
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@ -1643,7 +1643,7 @@ xfs_vm_write_begin(
   unlock_page(page);
 
   if (pos + len > i_size_read(inode))
-   truncate_pagecache(inode, pos + len, i_size_read(inode));
+   truncate_pagecache(inode, i_size_read(inode));
 
   page_cache_release(page);
   page = NULL;
@@ -1679,7 +1679,7 @@ xfs_vm_write_end(
   loff_t  to = pos + len;
 
   if (to > isize) {
-   truncate_pagecache(inode, to, isize);
+   truncate_pagecache(inode, isize);
    xfs_vm_kill_delalloc_range(inode, isize, to);
   }
  }
diff --git a/include/linux/mm.h b/include/linux/mm.h
index a4cb85f..d28fa7f 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -1114,7 +1114,7 @@ static inline void unmap_shared_mapping_range(struct address_space *mapping,
  unmap_mapping_range(mapping, holebegin, holelen, 0);
 }
 
-extern void truncate_pagecache(struct inode *inode, loff_t old, loff_t new);
+extern void truncate_pagecache(struct inode *inode, loff_t new);
 extern void truncate_setsize(struct inode *inode, loff_t newsize);
 void truncate_pagecache_range(struct inode *inode, loff_t offset, loff_t end);
 int truncate_inode_page(struct address_space *mapping, struct page *page);
diff --git a/mm/truncate.c b/mm/truncate.c
index b06a94a..ea670fe 100644
--- a/mm/truncate.c
+++ b/mm/truncate.c
@@ -707,7 +707,6 @@ EXPORT_SYMBOL_GPL(invalidate_inode_pages2);
 /**
  * truncate_pagecache - unmap and remove pagecache that has been truncated
  * @inode: inode
- * @oldsize: old file size
  * @newsize: new file size
  *
  * inode's new i_size must already be written before truncate_pagecache
@@ -720,7 +719,7 @@ EXPORT_SYMBOL_GPL(invalidate_inode_pages2);
  * situations such as writepage being called for a page that has already
  * had its underlying blocks deallocated.
  */
-void truncate_pagecache(struct inode *inode, loff_t oldsize, loff_t newsize)
+void truncate_pagecache(struct inode *inode, loff_t newsize)
 {
  struct address_space *mapping = inode->i_mapping;
  loff_t holebegin = round_up(newsize, PAGE_SIZE);
@@ -754,12 +753,8 @@ EXPORT_SYMBOL(truncate_pagecache);
  */
 void truncate_setsize(struct inode *inode, loff_t newsize)
 {
- loff_t oldsize;
-
- oldsize = inode->i_size;
  i_size_write(inode, newsize);
-
- truncate_pagecache(inode, oldsize, newsize);
+ truncate_pagecache(inode, newsize);
 }
 EXPORT_SYMBOL(truncate_setsize);
 
-- 
1.7.1