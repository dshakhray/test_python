From d543048ab9db2edf474fd2fc338898c299ec50f5 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:14:54 -0400
Subject: [net] Preserve CHECKSUM_COMPLETE at validation

Message-id: <1409652920-431-32-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90185
O-Subject: [PATCH 31/57] [RHEL7.1 net] net: Preserve CHECKSUM_COMPLETE at validation
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

KABI: place new skbuff struct bitfield member within
GENKSYSMS guard; it does not cause location change for any
other member.

commit 5d0c2b95bc57cf8fdc0e7b3e9d7e751eb65ad052
Author: Tom Herbert <therbert@google.com>
Date:   Tue Jun 10 18:54:13 2014 -0700

    net: Preserve CHECKSUM_COMPLETE at validation

    Currently when the first checksum in a packet is validated using
    CHECKSUM_COMPLETE, ip_summed is overwritten to be CHECKSUM_UNNECESSARY
    so that any subsequent checksums in the packet are not correctly
    validated.

    This patch adds csum_valid flag in sk_buff and uses that to indicate
    validated checksum instead of setting CHECKSUM_UNNECESSARY. The bit
    is set accordingly in the skb_checksum_validate_* functions. The flag
    is checked in skb_checksum_complete, so that validation is communicated
    between checksum_init and checksum_complete sequence in TCP and UDP.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 65864ea..9c309c8 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -499,8 +499,9 @@ struct sk_buff {
  __u8   encapsulation:1;
 #ifndef __GENKSYMS__
  __u8   encap_hdr_csum:1;
+ __u8   csum_valid:1;
 #endif
- /* 5/7 bit hole (depending on ndisc_nodetype presence) */
+ /* 4/6 bit hole (depending on ndisc_nodetype presence) */
  kmemcheck_bitfield_end(flags2);
 
 #if defined CONFIG_NET_DMA || defined CONFIG_NET_RX_BUSY_POLL
@@ -2646,7 +2647,7 @@ extern __sum16 __skb_checksum_complete(struct sk_buff *skb);
 
 static inline int skb_csum_unnecessary(const struct sk_buff *skb)
 {
- return skb->ip_summed & CHECKSUM_UNNECESSARY;
+ return ((skb->ip_summed & CHECKSUM_UNNECESSARY) || skb->csum_valid);
 }
 
 /**
@@ -2680,10 +2681,8 @@ static inline bool __skb_checksum_validate_needed(struct sk_buff *skb,
         bool zero_okay,
         __sum16 check)
 {
- if (skb_csum_unnecessary(skb)) {
-  return false;
- } else if (zero_okay && !check) {
-  skb->ip_summed = CHECKSUM_UNNECESSARY;
+ if (skb_csum_unnecessary(skb) || (zero_okay && !check)) {
+  skb->csum_valid = 1;
   return false;
  }
 
@@ -2710,15 +2709,20 @@ static inline __sum16 __skb_checksum_validate_complete(struct sk_buff *skb,
 {
  if (skb->ip_summed == CHECKSUM_COMPLETE) {
   if (!csum_fold(csum_add(psum, skb->csum))) {
-   skb->ip_summed = CHECKSUM_UNNECESSARY;
+   skb->csum_valid = 1;
    return 0;
   }
  }
 
  skb->csum = psum;
 
- if (complete || skb->len <= CHECKSUM_BREAK)
-  return __skb_checksum_complete(skb);
+ if (complete || skb->len <= CHECKSUM_BREAK) {
+  __sum16 csum;
+
+  csum = __skb_checksum_complete(skb);
+  skb->csum_valid = !csum;
+  return csum;
+ }
 
  return 0;
 }
@@ -2742,6 +2746,7 @@ static inline __wsum null_compute_pseudo(struct sk_buff *skb, int proto)
     zero_okay, check, compute_pseudo) \
 ({         \
  __sum16 __ret = 0;      \
+ skb->csum_valid = 0;      \
  if (__skb_checksum_validate_needed(skb, zero_okay, check)) \
   __ret = __skb_checksum_validate_complete(skb,  \
     complete, compute_pseudo(skb, proto)); \
-- 
1.7.1