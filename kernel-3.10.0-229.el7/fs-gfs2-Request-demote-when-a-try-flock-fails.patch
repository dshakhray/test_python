From 3ecec5eab2c1801543183290098836c28567ad30 Mon Sep 17 00:00:00 2001
From: Robert S Peterson <rpeterso@redhat.com>
Date: Fri, 22 Aug 2014 12:25:21 -0400
Subject: [fs] gfs2: Request demote when a "try" flock fails

Message-id: <1951528458.10177163.1408710321908.JavaMail.zimbra@redhat.com>
Patchwork-id: 88705
O-Subject: [RHEL7.1 PATCH][bz#1132154] GFS2: Request demote when a "try" flock fails
Bugzilla: 1132154
RH-Acked-by: Abhijith Das <adas@redhat.com>
RH-Acked-by: Steven Whitehouse <swhiteho@redhat.com>

Hi,

I previously posted this for RHEL6.6. This is the RHEL7.1 port.
The upstream patch is here:

http://git.kernel.org/cgit/linux/kernel/git/steve/gfs2-3.0-nmw.git/commit/fs/gfs2?id=2ddfbdd6848d496d8088b28992d257fd02e58c9d

I tested it with my four-node cluster using reliable recreation scenarios.

Patch description:
This patch changes the flock code so that it uses the TRY_1CB flag
instead of the TRY flag on the first attempt. That forces any holding
nodes to issue a dlm callback, which requests a demote of the glock.
Then, if the "try" failed, it sleeps a small amount of time for the
demote to occur. Then it tries again, for an increasing amount of time.
Subsequent attempts to gain the "try" lock don't use "_1CB" so that
only one callback is issued.

Signed-off-by: Bob Peterson <rpeterso@redhat.com>
Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>

rhbz#1132154

Regards,

Bob Peterson
Red Hat File Systems

Signed-off-by: Bob Peterson <rpeterso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/gfs2/file.c b/fs/gfs2/file.c
index 19d1c30..c301812 100644
--- a/fs/gfs2/file.c
+++ b/fs/gfs2/file.c
@@ -26,6 +26,7 @@
 #include <linux/dlm.h>
 #include <linux/dlm_plock.h>
 #include <linux/aio.h>
+#include <linux/delay.h>
 
 #include "gfs2.h"
 #include "incore.h"
@@ -987,9 +988,10 @@ static int do_flock(struct file *file, int cmd, struct file_lock *fl)
  unsigned int state;
  int flags;
  int error = 0;
+ int sleeptime;
 
  state = (fl->fl_type == F_WRLCK) ? LM_ST_EXCLUSIVE : LM_ST_SHARED;
- flags = (IS_SETLKW(cmd) ? 0 : LM_FLAG_TRY) | GL_EXACT;
+ flags = (IS_SETLKW(cmd) ? 0 : LM_FLAG_TRY_1CB) | GL_EXACT;
 
  mutex_lock(&fp->f_fl_mutex);
 
@@ -1009,7 +1011,14 @@ static int do_flock(struct file *file, int cmd, struct file_lock *fl)
   gfs2_holder_init(gl, state, flags, fl_gh);
   gfs2_glock_put(gl);
  }
- error = gfs2_glock_nq(fl_gh);
+ for (sleeptime = 1; sleeptime <= 4; sleeptime <<= 1) {
+  error = gfs2_glock_nq(fl_gh);
+  if (error != GLR_TRYFAILED)
+   break;
+  fl_gh->gh_flags = LM_FLAG_TRY | GL_EXACT;
+  fl_gh->gh_error = 0;
+  msleep(sleeptime);
+ }
  if (error) {
   gfs2_holder_uninit(fl_gh);
   if (error == GLR_TRYFAILED)
@@ -1032,7 +1041,7 @@ static void do_unflock(struct file *file, struct file_lock *fl)
  mutex_lock(&fp->f_fl_mutex);
  flock_lock_file_wait(file, fl);
  if (fl_gh->gh_gl) {
-  gfs2_glock_dq_wait(fl_gh);
+  gfs2_glock_dq(fl_gh);
   gfs2_holder_uninit(fl_gh);
  }
  mutex_unlock(&fp->f_fl_mutex);
-- 
1.7.1