From bedfc8e6544476cdaf551e4deec9cc4b738fb028 Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 17 Dec 2014 21:39:23 -0500
Subject: [drm] i915: Ignore SURFLIVE and flip counter when the GPU gets reset

Message-id: <1418852380-13061-73-git-send-email-rclark@redhat.com>
Patchwork-id: 102203
O-Subject: [RHEL7 drm 72/89] drm/i915: Ignore SURFLIVE and flip counter when the GPU gets reset
Bugzilla: 1173317
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1173317
Upstream: since v3.18

commit bdfa7542d40e6251c232a802231b37116bd31b11

Author:     Ville Syrjala <ville.syrjala@linux.intel.com>
AuthorDate: Tue May 27 21:33:09 2014 +0300
Commit:     Rob Clark <rclark@redhat.com>
CommitDate: Mon Dec 15 14:19:00 2014 -0500

    drm/i915: Ignore SURFLIVE and flip counter when the GPU gets reset

    During a GPU reset we need to get pending page flip cleared out
    since the ring contents are gone and flip will never complete
    on its own. This used to work until the mmio vs. CS flip race
    detection came about. That piece of code is looking for a
    specific surface address in the SURFLIVE register, but as
    a flip to that address may never happen the check may never
    pass. So we should just skip the SURFLIVE and flip counter
    checks when the GPU gets reset.

    intel_display_handle_reset() tries to effectively complete
    the flip anyway by calling .update_primary_plane(). But that
    may not satisfy the conditions of the mmio vs. CS race
    detection since there's no guarantee that a modeset didn't
    sneak in between the GPU reset and intel_display_handle_reset().
    Such a modeset will not wait for pending flips due to the ongoing GPU
    reset, and then the primary plane updates performed by
    intel_display_handle_reset() will already use the new surface
    address, and thus the surface address the flip is waiting for
    might never appear in SURFLIVE. The result is that the flip
    will never complete and attempts to perform further page flips
    will fail with -EBUSY.

    During the GPU reset intel_crtc_has_pending_flip() will return
    false regardless, so the deadlock with a modeset vs. the error
    work acquiring crtc->mutex was avoided. And the reset_counter
    check in intel_crtc_has_pending_flip() actually made this bug
    even less severe since it allowed normal modesets to go through
    even though there's a pending flip.

    This is a regression introduced by me here:
     commit 75f7f3ec600524c9544cc31695155f1a9ddbe1d9
     Author: Ville Syrjala <ville.syrjala@linux.intel.com>
     Date:   Tue Apr 15 21:41:34 2014 +0300

        drm/i915: Fix mmio vs. CS flip race on ILK+

    Testcase: igt/kms_flip/flip-vs-panning-vs-hang
    Signed-off-by: Ville Syrjala <ville.syrjala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

Signed-off-by: Rob Clark <rclark@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 6bacd64..f06ecd3 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -8946,6 +8946,10 @@ static bool page_flip_finished(struct intel_crtc *crtc)
  struct drm_device *dev = crtc->base.dev;
  struct drm_i915_private *dev_priv = dev->dev_private;
 
+ if (i915_reset_in_progress(&dev_priv->gpu_error) ||
+     crtc->reset_counter != atomic_read(&dev_priv->gpu_error.reset_counter))
+  return true;
+
  /*
   * The relevant registers doen't exist on pre-ctg.
   * As the flip done interrupt doesn't trigger for mmio
-- 
1.7.1