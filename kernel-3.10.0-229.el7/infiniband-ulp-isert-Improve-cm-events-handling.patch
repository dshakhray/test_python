From dc2213e1e674123dc73d001c3fc7d61d8fbff683 Mon Sep 17 00:00:00 2001
From: Andy Grover <agrover@redhat.com>
Date: Fri, 5 Sep 2014 16:36:25 -0400
Subject: [infiniband] ulp/isert: Improve cm events handling

Message-id: <1409934989-29941-28-git-send-email-agrover@redhat.com>
Patchwork-id: 91488
O-Subject: [RHEL7.1 PATCH e-stor 27/31] Target/iser: Improve cm events handling
Bugzilla: 1129387
RH-Acked-by: Chris Leech <cleech@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

From: Sagi Grimberg <sagig@mellanox.com>

commit 88c4015fda6d014392f76d3b1688347950d7a12d upstream.

There are 4 RDMA_CM events that all basically mean that
the user should teardown the IB connection:
- DISCONNECTED
- ADDR_CHANGE
- DEVICE_REMOVAL
- TIMEWAIT_EXIT

Only in DISCONNECTED/ADDR_CHANGE it makes sense to
call rdma_disconnect (send DREQ/DREP to our initiator).
So we keep the same teardown handler for all of them
but only indicate calling rdma_disconnect for the relevant
events.

This patch also removes redundant debug prints for each single
event.

v2 changes:
 - Call isert_disconnected_handler() for DEVICE_REMOVAL (Or + Sag)

Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/isert/ib_isert.c b/drivers/infiniband/ulp/isert/ib_isert.c
index fe03cb2..09f94b2 100644
--- a/drivers/infiniband/ulp/isert/ib_isert.c
+++ b/drivers/infiniband/ulp/isert/ib_isert.c
@@ -577,8 +577,10 @@ isert_disconnect_work(struct work_struct *work)
   return;
  }
 
- /* Send DREQ/DREP towards our initiator */
- rdma_disconnect(isert_conn->conn_cm_id);
+ if (isert_conn->disconnect) {
+  /* Send DREQ/DREP towards our initiator */
+  rdma_disconnect(isert_conn->conn_cm_id);
+ }
 
  mutex_unlock(&isert_conn->conn_mutex);
 
@@ -588,10 +590,11 @@ wake_up:
 }
 
 static void
-isert_disconnected_handler(struct rdma_cm_id *cma_id)
+isert_disconnected_handler(struct rdma_cm_id *cma_id, bool disconnect)
 {
  struct isert_conn *isert_conn = (struct isert_conn *)cma_id->context;
 
+ isert_conn->disconnect = disconnect;
  INIT_WORK(&isert_conn->conn_logout_work, isert_disconnect_work);
  schedule_work(&isert_conn->conn_logout_work);
 }
@@ -600,29 +603,28 @@ static int
 isert_cma_handler(struct rdma_cm_id *cma_id, struct rdma_cm_event *event)
 {
  int ret = 0;
+ bool disconnect = false;
 
  pr_debug("isert_cma_handler: event %d status %d conn %p id %p\n",
    event->event, event->status, cma_id->context, cma_id);
 
  switch (event->event) {
  case RDMA_CM_EVENT_CONNECT_REQUEST:
-  pr_debug("RDMA_CM_EVENT_CONNECT_REQUEST: >>>>>>>>>>>>>>>\n");
   ret = isert_connect_request(cma_id, event);
   break;
  case RDMA_CM_EVENT_ESTABLISHED:
-  pr_debug("RDMA_CM_EVENT_ESTABLISHED >>>>>>>>>>>>>>\n");
   isert_connected_handler(cma_id);
   break;
- case RDMA_CM_EVENT_DISCONNECTED:
-  pr_debug("RDMA_CM_EVENT_DISCONNECTED: >>>>>>>>>>>>>>\n");
-  isert_disconnected_handler(cma_id);
-  break;
- case RDMA_CM_EVENT_DEVICE_REMOVAL:
- case RDMA_CM_EVENT_ADDR_CHANGE:
+ case RDMA_CM_EVENT_ADDR_CHANGE:    /* FALLTHRU */
+ case RDMA_CM_EVENT_DISCONNECTED:   /* FALLTHRU */
+ case RDMA_CM_EVENT_DEVICE_REMOVAL: /* FALLTHRU */
+  disconnect = true;
+ case RDMA_CM_EVENT_TIMEWAIT_EXIT:  /* FALLTHRU */
+  isert_disconnected_handler(cma_id, disconnect);
   break;
  case RDMA_CM_EVENT_CONNECT_ERROR:
  default:
-  pr_err("Unknown RDMA CMA event: %d\n", event->event);
+  pr_err("Unhandled RDMA CMA event: %d\n", event->event);
   break;
  }
 
diff --git a/drivers/infiniband/ulp/isert/ib_isert.h b/drivers/infiniband/ulp/isert/ib_isert.h
index df193dc..032f65a 100644
--- a/drivers/infiniband/ulp/isert/ib_isert.h
+++ b/drivers/infiniband/ulp/isert/ib_isert.h
@@ -105,6 +105,7 @@ struct isert_conn {
  struct completion conn_wait;
  struct completion conn_wait_comp_err;
  struct kref  conn_kref;
+ bool   disconnect;
 };
 
 #define ISERT_MAX_CQ 64
-- 
1.7.1