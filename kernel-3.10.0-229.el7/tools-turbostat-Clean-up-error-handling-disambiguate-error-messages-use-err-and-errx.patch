From 2e1b334a9319191fac02f84dfa21de28f8cea372 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Tue, 26 Aug 2014 12:49:23 -0400
Subject: [tools] turbostat: Clean up error handling; disambiguate error messages; use err and errx

Message-id: <1409057382-26432-13-git-send-email-prarit@redhat.com>
Patchwork-id: 89099
O-Subject: [RHEL7.1 PATCH BZ 1133893 12/31] turbostat: Clean up error handling; disambiguate error messages; use err and errx
Bugzilla: 1133893
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1133893

commit b2c95d90a799c9885661d431034b7ca733cc2660
Author: Josh Triplett <josh@joshtriplett.org>
Date:   Tue Aug 20 17:20:18 2013 -0700

    turbostat: Clean up error handling; disambiguate error messages; use err and errx

    Most of turbostat's error handling consists of printing an error (often
    including an errno) and exiting.  Since perror doesn't support a format
    string, those error messages are often ambiguous, such as just showing a
    file path, which doesn't uniquely identify which call failed.

    turbostat already uses _GNU_SOURCE, so switch to the err and errx
    functions from err.h, which take a format string.

    Signed-off-by: Josh Triplett <josh@joshtriplett.org>
    Signed-off-by: Len Brown <len.brown@intel.com>

Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Dean Nelson <dnelson@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/power/x86/turbostat/turbostat.c b/tools/power/x86/turbostat/turbostat.c
index d8f61f2..6dcb378 100644
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@ -23,6 +23,7 @@
 #include MSRHEADER
 #include <stdarg.h>
 #include <stdio.h>
+#include <err.h>
 #include <unistd.h>
 #include <sys/types.h>
 #include <sys/wait.h>
@@ -642,12 +643,10 @@ delta_thread(struct thread_data *new, struct thread_data *old,
  old->tsc = new->tsc - old->tsc;
 
  /* check for TSC < 1 Mcycles over interval */
- if (old->tsc < (1000 * 1000)) {
-  fprintf(stderr, "Insanely slow TSC rate, TSC stops in idle?\n");
-  fprintf(stderr, "You can disable all c-states by booting with \"idle=poll\"\n");
-  fprintf(stderr, "or just the deep ones with \"processor.max_cstate=1\"\n");
-  exit(-3);
- }
+ if (old->tsc < (1000 * 1000))
+  errx(-3, "Insanely slow TSC rate, TSC stops in idle?\n"
+       "You can disable all c-states by booting with \"idle=poll\"\n"
+       "or just the deep ones with \"processor.max_cstate=1\"");
 
  old->c1 = new->c1 - old->c1;
 
@@ -1198,10 +1197,8 @@ void free_all_buffers(void)
 FILE *fopen_or_die(const char *path, const char *mode)
 {
  FILE *filep = fopen(path, "r");
- if (!filep) {
-  perror(path);
-  exit(1);
- }
+ if (!filep)
+  err(1, "%s: open failed", path);
  return filep;
 }
 
@@ -1219,10 +1216,8 @@ int parse_int_file(const char *fmt, ...)
  vsnprintf(path, sizeof(path), fmt, args);
  va_end(args);
  filep = fopen_or_die(path, "r");
- if (fscanf(filep, "%d", &value) != 1) {
-  perror(path);
-  exit(1);
- }
+ if (fscanf(filep, "%d", &value) != 1)
+  err(1, "%s: failed to parse number from file", path);
  fclose(filep);
  return value;
 }
@@ -1337,10 +1332,8 @@ int for_all_proc_cpus(int (func)(int))
  fp = fopen_or_die(proc_stat, "r");
 
  retval = fscanf(fp, "cpu %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d\n");
- if (retval != 0) {
-  perror("/proc/stat format");
-  exit(1);
- }
+ if (retval != 0)
+  err(1, "%s: failed to parse format", proc_stat);
 
  while (1) {
   retval = fscanf(fp, "cpu%u %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d\n", &cpu_num);
@@ -1444,19 +1437,15 @@ void check_dev_msr()
 {
  struct stat sb;
 
- if (stat("/dev/cpu/0/msr", &sb)) {
-  fprintf(stderr, "no /dev/cpu/0/msr\n");
-  fprintf(stderr, "Try \"# modprobe msr\"\n");
-  exit(-5);
- }
+ if (stat("/dev/cpu/0/msr", &sb))
+  err(-5, "no /dev/cpu/0/msr\n"
+      "Try \"# modprobe msr\"");
 }
 
 void check_super_user()
 {
- if (getuid() != 0) {
-  fprintf(stderr, "must be root\n");
-  exit(-6);
- }
+ if (getuid() != 0)
+  errx(-6, "must be root");
 }
 
 int has_nehalem_turbo_ratio_limit(unsigned int family, unsigned int model)
@@ -2009,10 +1998,8 @@ void check_cpuid()
   fprintf(stderr, "%d CPUID levels; family:model:stepping 0x%x:%x:%x (%d:%d:%d)\n",
    max_level, family, model, stepping, family, model, stepping);
 
- if (!(edx & (1 << 5))) {
-  fprintf(stderr, "CPUID: no MSR\n");
-  exit(1);
- }
+ if (!(edx & (1 << 5)))
+  errx(1, "CPUID: no MSR");
 
  /*
   * check max extended function levels of CPUID.
@@ -2022,10 +2009,8 @@ void check_cpuid()
  ebx = ecx = edx = 0;
  __get_cpuid(0x80000000, &max_level, &ebx, &ecx, &edx);
 
- if (max_level < 0x80000007) {
-  fprintf(stderr, "CPUID: no invariant TSC (max_level 0x%x)\n", max_level);
-  exit(1);
- }
+ if (max_level < 0x80000007)
+  errx(1, "CPUID: no invariant TSC (max_level 0x%x)", max_level);
 
  /*
   * Non-Stop TSC is advertised by CPUID.EAX=0x80000007: EDX.bit8
@@ -2034,10 +2019,8 @@ void check_cpuid()
  __get_cpuid(0x80000007, &eax, &ebx, &ecx, &edx);
  has_invariant_tsc = edx & (1 << 8);
 
- if (!has_invariant_tsc) {
-  fprintf(stderr, "No invariant TSC\n");
-  exit(1);
- }
+ if (!has_invariant_tsc)
+  errx(1, "No invariant TSC");
 
  /*
   * APERF/MPERF is advertised by CPUID.EAX=0x6: ECX.bit0
@@ -2058,7 +2041,7 @@ void check_cpuid()
    has_epb ? ", EPB": "");
 
  if (!has_aperf)
-  exit(-1);
+  errx(-1, "No APERF");
 
  do_nehalem_platform_info = genuine_intel && has_invariant_tsc;
  do_nhm_cstates = genuine_intel; /* all Intel w/ non-stop TSC have NHM counters */
@@ -2078,9 +2061,8 @@ void check_cpuid()
 
 void usage()
 {
- fprintf(stderr, "%s: [-v][-R][-T][-p|-P|-S][-c MSR# | -s]][-C MSR#][-m MSR#][-M MSR#][-i interval_sec | command ...]\n",
-  progname);
- exit(1);
+ errx(1, "%s: [-v][-R][-T][-p|-P|-S][-c MSR# | -s]][-C MSR#][-m MSR#][-M MSR#][-i interval_sec | command ...]\n",
+      progname);
 }
 
 
@@ -2123,19 +2105,15 @@ void topology_probe()
   fprintf(stderr, "num_cpus %d max_cpu_num %d\n", topo.num_cpus, topo.max_cpu_num);
 
  cpus = calloc(1, (topo.max_cpu_num  + 1) * sizeof(struct cpu_topology));
- if (cpus == NULL) {
-  perror("calloc cpus");
-  exit(1);
- }
+ if (cpus == NULL)
+  err(1, "calloc cpus");
 
  /*
   * Allocate and initialize cpu_present_set
   */
  cpu_present_set = CPU_ALLOC((topo.max_cpu_num + 1));
- if (cpu_present_set == NULL) {
-  perror("CPU_ALLOC");
-  exit(3);
- }
+ if (cpu_present_set == NULL)
+  err(3, "CPU_ALLOC");
  cpu_present_setsize = CPU_ALLOC_SIZE((topo.max_cpu_num + 1));
  CPU_ZERO_S(cpu_present_setsize, cpu_present_set);
  for_all_proc_cpus(mark_cpu_present);
@@ -2144,10 +2122,8 @@ void topology_probe()
   * Allocate and initialize cpu_affinity_set
   */
  cpu_affinity_set = CPU_ALLOC((topo.max_cpu_num + 1));
- if (cpu_affinity_set == NULL) {
-  perror("CPU_ALLOC");
-  exit(3);
- }
+ if (cpu_affinity_set == NULL)
+  err(3, "CPU_ALLOC");
  cpu_affinity_setsize = CPU_ALLOC_SIZE((topo.max_cpu_num + 1));
  CPU_ZERO_S(cpu_affinity_setsize, cpu_affinity_set);
 
@@ -2231,8 +2207,7 @@ allocate_counters(struct thread_data **t, struct core_data **c, struct pkg_data
 
  return;
 error:
- perror("calloc counters");
- exit(1);
+ err(1, "calloc counters");
 }
 /*
  * init_counter()
@@ -2289,10 +2264,8 @@ void allocate_output_buffer()
 {
  output_buffer = calloc(1, (1 + topo.num_cpus) * 256);
  outp = output_buffer;
- if (outp == NULL) {
-  perror("calloc");
-  exit(-1);
- }
+ if (outp == NULL)
+  err(-1, "calloc output buffer");
 }
 
 void setup_all_buffers(void)
@@ -2346,17 +2319,13 @@ int fork_it(char **argv)
  } else {
 
   /* parent */
-  if (child_pid == -1) {
-   perror("fork");
-   exit(1);
-  }
+  if (child_pid == -1)
+   err(1, "fork");
 
   signal(SIGINT, SIG_IGN);
   signal(SIGQUIT, SIG_IGN);
-  if (waitpid(child_pid, &status, 0) == -1) {
-   perror("wait");
-   exit(status);
-  }
+  if (waitpid(child_pid, &status, 0) == -1)
+   err(status, "waitpid");
  }
  /*
   * n.b. fork_it() does not check for errors from for_all_cpus()
-- 
1.7.1