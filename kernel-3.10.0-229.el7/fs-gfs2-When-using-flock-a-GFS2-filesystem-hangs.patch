From 8f788a25dda1e7ca3c9b5d3aede641c109294144 Mon Sep 17 00:00:00 2001
From: Robert S Peterson <rpeterso@redhat.com>
Date: Mon, 7 Jul 2014 13:51:52 -0400
Subject: [fs] gfs2: When using flock() a GFS2 filesystem hangs

Message-id: <896062490.3792759.1404741112811.JavaMail.zimbra@redhat.com>
Patchwork-id: 85279
O-Subject: [RHEL7.1 PATCH] [bz#1111624] When using flock() a GFS2 filesystem hangs
Bugzilla: 1111624
RH-Acked-by: Abhijith Das <adas@redhat.com>
RH-Acked-by: Steven Whitehouse <swhiteho@redhat.com>

Hi,

This patch is a RHEL7 back-port of these two upstream patches:

GFS2: Allow flocks to use normal glock dq rather than dq_wait
http://git.kernel.org/cgit/linux/kernel/git/steve/gfs2-3.0-nmw.git/commit/fs/gfs2?id=02c9d43948a14db0db6d27d8e5ea6896753a821c

GFS2: Allow caching of glocks for flock
http://git.kernel.org/cgit/linux/kernel/git/steve/gfs2-3.0-nmw.git/commit/fs/gfs2?id=7b596840397a23cf6a08fd786064fcd863e9e712

These two were previously accepted as RHEL6.6 patches. Unlike RHEL6.6 and
upstream, there is intermediate patch that needs reverting, so the code
is much simpler and straightforward.

It was tested on system gfs-i8c-01.mpc.lab.eng.bos.redhat.com using
the reproducer program, bz1110421b, from the original bugzilla.

Regards,

Bob Peterson
Red Hat File Systems

Signed-off-by: Bob Peterson <rpeterso@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/gfs2/file.c b/fs/gfs2/file.c
index 3cd6d2e..19d1c30 100644
--- a/fs/gfs2/file.c
+++ b/fs/gfs2/file.c
@@ -989,7 +989,7 @@ static int do_flock(struct file *file, int cmd, struct file_lock *fl)
  int error = 0;
 
  state = (fl->fl_type == F_WRLCK) ? LM_ST_EXCLUSIVE : LM_ST_SHARED;
- flags = (IS_SETLKW(cmd) ? 0 : LM_FLAG_TRY) | GL_EXACT | GL_NOCACHE;
+ flags = (IS_SETLKW(cmd) ? 0 : LM_FLAG_TRY) | GL_EXACT;
 
  mutex_lock(&fp->f_fl_mutex);
 
@@ -999,7 +999,7 @@ static int do_flock(struct file *file, int cmd, struct file_lock *fl)
    goto out;
   flock_lock_file_wait(file,
          &(struct file_lock){.fl_type = F_UNLCK});
-  gfs2_glock_dq_wait(fl_gh);
+  gfs2_glock_dq(fl_gh);
   gfs2_holder_reinit(state, flags, fl_gh);
  } else {
   error = gfs2_glock_get(GFS2_SB(&ip->i_inode), ip->i_no_addr,
-- 
1.7.1