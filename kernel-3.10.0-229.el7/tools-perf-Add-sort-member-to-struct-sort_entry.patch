From c3307799d30a9537186c8a94cdfab989a63090de Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:07:48 -0400
Subject: [tools] perf: Add ->sort() member to struct sort_entry

Message-id: <1410181752-25631-224-git-send-email-jolsa@redhat.com>
Patchwork-id: 91878
O-Subject: [PATCH RHEL7.1 BZ1134356 223/307] perf tools: Add ->sort() member to struct sort_entry
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 202e7a6d16127323d03e912d7844aa0d614c315e
Author: Namhyung Kim <namhyung@kernel.org>
Date: Tue Mar 4 11:01:41 2014 +0900

description
===========
Currently, what the sort_entry does is just identifying hist entries
so that they can be grouped properly.  However, with -F option
support, it indeed needs to sort entries appropriately to be shown to
users.  So add ->sort() member to do it.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index b748b02..5414ba5 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -99,6 +99,12 @@ sort__comm_collapse(struct hist_entry *left, struct hist_entry *right)
  return comm__str(right->comm) - comm__str(left->comm);
 }
 
+static int64_t
+sort__comm_sort(struct hist_entry *left, struct hist_entry *right)
+{
+ return strcmp(comm__str(right->comm), comm__str(left->comm));
+}
+
 static int hist_entry__comm_snprintf(struct hist_entry *he, char *bf,
          size_t size, unsigned int width)
 {
@@ -109,6 +115,7 @@ struct sort_entry sort_comm = {
  .se_header = "Command",
  .se_cmp  = sort__comm_cmp,
  .se_collapse = sort__comm_collapse,
+ .se_sort = sort__comm_sort,
  .se_snprintf = hist_entry__comm_snprintf,
  .se_width_idx = HISTC_COMM,
 };
@@ -122,7 +129,7 @@ static int64_t _sort__dso_cmp(struct map *map_l, struct map *map_r)
  const char *dso_name_l, *dso_name_r;
 
  if (!dso_l || !dso_r)
-  return cmp_null(dso_l, dso_r);
+  return cmp_null(dso_r, dso_l);
 
  if (verbose) {
   dso_name_l = dso_l->long_name;
@@ -138,7 +145,7 @@ static int64_t _sort__dso_cmp(struct map *map_l, struct map *map_r)
 static int64_t
 sort__dso_cmp(struct hist_entry *left, struct hist_entry *right)
 {
- return _sort__dso_cmp(left->ms.map, right->ms.map);
+ return _sort__dso_cmp(right->ms.map, left->ms.map);
 }
 
 static int _hist_entry__dso_snprintf(struct map *map, char *bf,
@@ -210,6 +217,15 @@ sort__sym_cmp(struct hist_entry *left, struct hist_entry *right)
  return _sort__sym_cmp(left->ms.sym, right->ms.sym);
 }
 
+static int64_t
+sort__sym_sort(struct hist_entry *left, struct hist_entry *right)
+{
+ if (!left->ms.sym || !right->ms.sym)
+  return cmp_null(left->ms.sym, right->ms.sym);
+
+ return strcmp(right->ms.sym->name, left->ms.sym->name);
+}
+
 static int _hist_entry__sym_snprintf(struct map *map, struct symbol *sym,
          u64 ip, char level, char *bf, size_t size,
          unsigned int width)
@@ -256,6 +272,7 @@ static int hist_entry__sym_snprintf(struct hist_entry *he, char *bf,
 struct sort_entry sort_sym = {
  .se_header = "Symbol",
  .se_cmp  = sort__sym_cmp,
+ .se_sort = sort__sym_sort,
  .se_snprintf = hist_entry__sym_snprintf,
  .se_width_idx = HISTC_SYMBOL,
 };
@@ -283,7 +300,7 @@ sort__srcline_cmp(struct hist_entry *left, struct hist_entry *right)
          map__rip_2objdump(map, right->ip));
   }
  }
- return strcmp(left->srcline, right->srcline);
+ return strcmp(right->srcline, left->srcline);
 }
 
 static int hist_entry__srcline_snprintf(struct hist_entry *he, char *bf,
@@ -311,7 +328,7 @@ sort__parent_cmp(struct hist_entry *left, struct hist_entry *right)
  if (!sym_l || !sym_r)
   return cmp_null(sym_l, sym_r);
 
- return strcmp(sym_l->name, sym_r->name);
+ return strcmp(sym_r->name, sym_l->name);
 }
 
 static int hist_entry__parent_snprintf(struct hist_entry *he, char *bf,
@@ -1126,7 +1143,7 @@ __sort_dimension__alloc_hpp(struct sort_dimension *sd)
 
  hse->hpp.cmp = sd->entry->se_cmp;
  hse->hpp.collapse = sd->entry->se_collapse ? : sd->entry->se_cmp;
- hse->hpp.sort = hse->hpp.collapse;
+ hse->hpp.sort = sd->entry->se_sort ? : hse->hpp.collapse;
 
  INIT_LIST_HEAD(&hse->hpp.list);
  INIT_LIST_HEAD(&hse->hpp.sort_list);
diff --git a/tools/perf/util/sort.h b/tools/perf/util/sort.h
index 89e5057..f5a831c 100644
--- a/tools/perf/util/sort.h
+++ b/tools/perf/util/sort.h
@@ -182,6 +182,7 @@ struct sort_entry {
 
  int64_t (*se_cmp)(struct hist_entry *, struct hist_entry *);
  int64_t (*se_collapse)(struct hist_entry *, struct hist_entry *);
+ int64_t (*se_sort)(struct hist_entry *, struct hist_entry *);
  int (*se_snprintf)(struct hist_entry *he, char *bf, size_t size,
           unsigned int width);
  u8 se_width_idx;
-- 
1.7.1