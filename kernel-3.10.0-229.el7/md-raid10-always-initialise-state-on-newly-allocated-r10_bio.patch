From ffb925b3004287f90dc4e9286d22df9e9ecc78c7 Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:26:24 -0400
Subject: [md] raid10: always initialise ->state on newly allocated r10_bio

Message-id: <1409563584-9000-83-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 90019
O-Subject: [RHEL7.1 PATCH 82/82] md/raid10: always initialise ->state on newly allocated r10_bio
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: NeilBrown <neilb@suse.de>

Most places which allocate an r10_bio zero the ->state, some don't.
As the r10_bio comes from a mempool, and the allocation function uses
kzalloc it is often zero anyway.  But sometimes it isn't and it is
best to be safe.

I only noticed this because of the bug fixed by an earlier patch
where the r10_bios allocated for a reshape were left around to
be used by a subsequent resync.  In that case the R10BIO_IsReshape
flag caused problems.

Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit cb8b12b5d81cf8522076f99a90bc3b795825c3b3)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/raid10.c b/drivers/md/raid10.c
index 7d2422a..e353571 100644
--- a/drivers/md/raid10.c
+++ b/drivers/md/raid10.c
@@ -3096,6 +3096,7 @@ static sector_t sync_request(struct mddev *mddev, sector_t sector_nr,
    }
 
    r10_bio = mempool_alloc(conf->r10buf_pool, GFP_NOIO);
+   r10_bio->state = 0;
    raise_barrier(conf, rb2 != NULL);
    atomic_set(&r10_bio->remaining, 0);
 
@@ -3282,6 +3283,7 @@ static sector_t sync_request(struct mddev *mddev, sector_t sector_nr,
   if (sync_blocks < max_sync)
    max_sync = sync_blocks;
   r10_bio = mempool_alloc(conf->r10buf_pool, GFP_NOIO);
+  r10_bio->state = 0;
 
   r10_bio->mddev = mddev;
   atomic_set(&r10_bio->remaining, 0);
@@ -4397,6 +4399,7 @@ static sector_t reshape_request(struct mddev *mddev, sector_t sector_nr,
 read_more:
  /* Now schedule reads for blocks from sector_nr to last */
  r10_bio = mempool_alloc(conf->r10buf_pool, GFP_NOIO);
+ r10_bio->state = 0;
  raise_barrier(conf, sectors_done != 0);
  atomic_set(&r10_bio->remaining, 0);
  r10_bio->mddev = mddev;
-- 
1.7.1