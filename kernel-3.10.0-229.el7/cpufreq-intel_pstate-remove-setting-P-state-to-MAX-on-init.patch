From 549460a406da79d4d806e325ccc55f01abfb9ccb Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:03 -0400
Subject: [cpufreq] intel_pstate: remove setting P state to MAX on init

Message-id: <1409235879-1283-150-git-send-email-prarit@redhat.com>
Patchwork-id: 89504
O-Subject: [RHEL7.1 PATCH BZ 1134639 149/185] intel_pstate: remove setting P state to MAX on init
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit d40a63c45b506b0681918d7c62a15cc9d48c8681
Author: Dirk Brandewie <dirk.j.brandewie@intel.com>
Date:   Thu May 8 12:57:24 2014 -0700

    intel_pstate: remove setting P state to MAX on init

    Setting the P state of the core to max at init time is a hold over
    from early implementation of intel_pstate where intel_pstate disabled
    cpufreq and loaded VERY early in the boot sequence.  This was to
    ensure that intel_pstate did not affect boot time. This in not needed
    now that intel_pstate is a cpufreq driver.

    Removing this covers the case where a CPU has gone through a manual
    CPU offline/online cycle and the P state is set to MAX on init and the
    CPU immediately goes idle.  Due to HW coordination the P state request
    on the idle CPU will drag all cores to MAX P state until the load is
    reevaluated when to core goes non-idle.

    Reported-by: Patrick Marlier <patrick.marlier@gmail.com>
    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Cc: 3.14+ <stable@vger.kernel.org> # 3.14+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index 0a5adf1..24a534a 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -552,12 +552,7 @@ static void intel_pstate_get_cpu_pstates(struct cpudata *cpu)
 
  if (pstate_funcs.get_vid)
   pstate_funcs.get_vid(cpu);
-
- /*
-  * goto max pstate so we don't slow up boot if we are built-in if we are
-  * a module we will take care of it during normal operation
-  */
- intel_pstate_set_pstate(cpu, cpu->pstate.max_pstate);
+ intel_pstate_set_pstate(cpu, cpu->pstate.min_pstate);
 }
 
 static inline void intel_pstate_calc_busy(struct cpudata *cpu)
@@ -704,11 +699,6 @@ static int intel_pstate_init_cpu(unsigned int cpunum)
  cpu = all_cpu_data[cpunum];
 
  intel_pstate_get_cpu_pstates(cpu);
- if (!cpu->pstate.current_pstate) {
-  all_cpu_data[cpunum] = NULL;
-  kfree(cpu);
-  return -ENODATA;
- }
 
  cpu->cpu = cpunum;
 
@@ -719,7 +709,6 @@ static int intel_pstate_init_cpu(unsigned int cpunum)
  cpu->timer.expires = jiffies + HZ/100;
  intel_pstate_busy_pid_reset(cpu);
  intel_pstate_sample(cpu);
- intel_pstate_set_pstate(cpu, cpu->pstate.max_pstate);
 
  add_timer_on(&cpu->timer, cpunum);
 
-- 
1.7.1