From 953f83815cfda5ff34229c053ffdfc1d9ff09928 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:29 -0400
Subject: [tools] perf: Allow overriding sysfs and proc finding with env var

Message-id: <1410181752-25631-265-git-send-email-jolsa@redhat.com>
Patchwork-id: 91977
O-Subject: [PATCH RHEL7.1 BZ1134356 264/307] perf tools: Allow overriding sysfs and proc finding with env var
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit f2d9627b2b31506204417bb6842a7ea88970b700
Author: Cody P Schafer <dev@codyps.com>
Date: Tue May 27 17:21:56 2014 -0700

description
===========
SYSFS_PATH and PROC_PATH environment variables now let the user override
the detection of sysfs and proc locations for testing purposes.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/lib/api/fs/fs.c b/tools/lib/api/fs/fs.c
index 5b5eb78..c1b49c3 100644
--- a/tools/lib/api/fs/fs.c
+++ b/tools/lib/api/fs/fs.c
@@ -1,8 +1,10 @@
 /* TODO merge/factor in debugfs.c here */
 
+#include <ctype.h>
 #include <errno.h>
 #include <stdbool.h>
 #include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
 #include <sys/vfs.h>
 
@@ -96,12 +98,51 @@ static bool fs__check_mounts(struct fs *fs)
  return false;
 }
 
+static void mem_toupper(char *f, size_t len)
+{
+ while (len) {
+  *f = toupper(*f);
+  f++;
+  len--;
+ }
+}
+
+/*
+ * Check for "NAME_PATH" environment variable to override fs location (for
+ * testing). This matches the recommendation in Documentation/sysfs-rules.txt
+ * for SYSFS_PATH.
+ */
+static bool fs__env_override(struct fs *fs)
+{
+ char *override_path;
+ size_t name_len = strlen(fs->name);
+ /* name + "_PATH" + '\0' */
+ char upper_name[name_len + 5 + 1];
+ memcpy(upper_name, fs->name, name_len);
+ mem_toupper(upper_name, name_len);
+ strcpy(&upper_name[name_len], "_PATH");
+
+ override_path = getenv(upper_name);
+ if (!override_path)
+  return false;
+
+ fs->found = true;
+ strncpy(fs->path, override_path, sizeof(fs->path));
+ return true;
+}
+
 static const char *fs__get_mountpoint(struct fs *fs)
 {
+ if (fs__env_override(fs))
+  return fs->path;
+
  if (fs__check_mounts(fs))
   return fs->path;
 
- return fs__read_mounts(fs) ? fs->path : NULL;
+ if (fs__read_mounts(fs))
+  return fs->path;
+
+ return NULL;
 }
 
 static const char *fs__mountpoint(int idx)
-- 
1.7.1