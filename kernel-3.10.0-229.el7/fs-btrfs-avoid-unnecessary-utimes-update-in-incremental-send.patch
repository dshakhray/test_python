From ab29a744eb673ed3d394e1ad89e298dcda21f061 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:02:07 -0400
Subject: [fs] btrfs: avoid unnecessary utimes update in incremental send

Message-id: <1407179109-13714-241-git-send-email-sandeen@redhat.com>
Patchwork-id: 87150
O-Subject: [RHEL7.1 PATCH 240/422] Btrfs: avoid unnecessary utimes update in incremental send
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit fcbd2154d16431395e86a48859a5b547c33c09ad
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Mon Mar 3 12:28:40 2014 +0000

    Btrfs: avoid unnecessary utimes update in incremental send

    When we're finishing processing of an inode, if we're dealing with a
    directory inode that has a pending move/rename operation, we don't
    need to send a utimes update instruction to the send stream, as we'll
    do it later after doing the move/rename operation. Therefore we save
    some time here building paths and doing btree lookups.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/send.c b/fs/btrfs/send.c
index c2522e4..9d057ef 100644
--- a/fs/btrfs/send.c
+++ b/fs/btrfs/send.c
@@ -4957,18 +4957,19 @@ static int finish_inode_if_needed(struct send_ctx *sctx, int at_end)
   ret = apply_children_dir_moves(sctx);
   if (ret)
    goto out;
+  /*
+   * Need to send that every time, no matter if it actually
+   * changed between the two trees as we have done changes to
+   * the inode before. If our inode is a directory and it's
+   * waiting to be moved/renamed, we will send its utimes when
+   * it's moved/renamed, therefore we don't need to do it here.
+   */
+  sctx->send_progress = sctx->cur_ino + 1;
+  ret = send_utimes(sctx, sctx->cur_ino, sctx->cur_inode_gen);
+  if (ret < 0)
+   goto out;
  }
 
- /*
-  * Need to send that every time, no matter if it actually
-  * changed between the two trees as we have done changes to
-  * the inode before.
-  */
- sctx->send_progress = sctx->cur_ino + 1;
- ret = send_utimes(sctx, sctx->cur_ino, sctx->cur_inode_gen);
- if (ret < 0)
-  goto out;
-
 out:
  return ret;
 }
-- 
1.7.1