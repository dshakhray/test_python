From 718d50152a17013b43c9c1bb05a392d4a7e83e40 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Wed, 6 Aug 2014 03:48:02 -0400
Subject: [pcmcia] Use list_for_each_entry() for bus traversal

Message-id: <20140806034802.1438.19806.stgit@gir.stowe>
Patchwork-id: 87446
O-Subject: [RHEL7.1 PATCH 37/69] pcmcia: Use list_for_each_entry() for bus traversal
Bugzilla: 1110896
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110896
Upstream Status: 560698e9d2ca77d0adb07f3cf0ebfe519859c528

commit 560698e9d2ca77d0adb07f3cf0ebfe519859c528
Author: Yijing Wang <wangyijing@huawei.com>
Date:   Thu Feb 13 21:14:02 2014 +0800

    pcmcia: Use list_for_each_entry() for bus traversal

    Replace list_for_each() + pci_bus_b() with list_for_each_entry().

    [bhelgaas: fix "silbling" typo]
    Signed-off-by: Yijing Wang <wangyijing@huawei.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pcmcia/yenta_socket.c b/drivers/pcmcia/yenta_socket.c
index acc129e..c676a31 100644
--- a/drivers/pcmcia/yenta_socket.c
+++ b/drivers/pcmcia/yenta_socket.c
@@ -1076,7 +1076,7 @@ static void yenta_config_init(struct yenta_socket *socket)
  */
 static void yenta_fixup_parent_bridge(struct pci_bus *cardbus_bridge)
 {
- struct list_head *tmp;
+ struct pci_bus *sibling;
  unsigned char upper_limit;
  /*
   * We only check and fix the parent bridge: All systems which need
@@ -1095,18 +1095,18 @@ static void yenta_fixup_parent_bridge(struct pci_bus *cardbus_bridge)
  /* stay within the limits of the bus range of the parent: */
  upper_limit = bridge_to_fix->parent->busn_res.end;
 
- /* check the bus ranges of all silbling bridges to prevent overlap */
- list_for_each(tmp, &bridge_to_fix->parent->children) {
-  struct pci_bus *silbling = pci_bus_b(tmp);
+ /* check the bus ranges of all sibling bridges to prevent overlap */
+ list_for_each_entry(sibling, &bridge_to_fix->parent->children,
+   node) {
   /*
-   * If the silbling has a higher secondary bus number
+   * If the sibling has a higher secondary bus number
    * and it's secondary is equal or smaller than our
    * current upper limit, set the new upper limit to
-   * the bus number below the silbling's range:
+   * the bus number below the sibling's range:
    */
-  if (silbling->busn_res.start > bridge_to_fix->busn_res.end
-      && silbling->busn_res.start <= upper_limit)
-   upper_limit = silbling->busn_res.start - 1;
+  if (sibling->busn_res.start > bridge_to_fix->busn_res.end
+      && sibling->busn_res.start <= upper_limit)
+   upper_limit = sibling->busn_res.start - 1;
  }
 
  /* Show that the wanted subordinate number is not possible: */
-- 
1.7.1