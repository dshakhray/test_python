From e23d2d4e115350a1701d5692b6b837690404fb9f Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Wed, 18 Jun 2014 10:27:49 -0400
Subject: [s390] compat: make psw32_user_bits a constant value again

Message-id: <1403087280-902-4-git-send-email-brueckner@redhat.com>
Patchwork-id: 84254
O-Subject: [RHEL7.1 PATCH 03/14] [s390] s390/compat: make psw32_user_bits a constant value again
Bugzilla: 1099147
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit f26946d7ecad0afdd85e6ae56663d0fe26676b34
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Commit: Martin Schwidefsky <schwidefsky@de.ibm.com>

    s390/compat: make psw32_user_bits a constant value again

    Make psw32_user_bits a constant value again.
    This is a leftover of the code which allowed to run the kernel either
    in primary or home space which got removed with 9a905662 "s390/uaccess:
    always run the kernel in home space".

    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1099147
https://bugzilla.redhat.com/show_bug.cgi?id=1099147

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version v3.13-rc1
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=f26946d7ecad0afdd85e6ae56663d0fe26676b34

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7588402

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/include/asm/compat.h b/arch/s390/include/asm/compat.h
index 7604cab..4bf9da0 100644
--- a/arch/s390/include/asm/compat.h
+++ b/arch/s390/include/asm/compat.h
@@ -36,7 +36,9 @@
 #define PSW32_ASC_SECONDARY 0x00008000UL
 #define PSW32_ASC_HOME  0x0000C000UL
 
-extern u32 psw32_user_bits;
+#define PSW32_USER_BITS (PSW32_MASK_DAT | PSW32_MASK_IO | PSW32_MASK_EXT | \
+    PSW32_DEFAULT_KEY | PSW32_MASK_BASE | \
+    PSW32_MASK_MCHECK | PSW32_MASK_PSTATE | PSW32_ASC_HOME)
 
 #define COMPAT_USER_HZ  100
 #define COMPAT_UTS_MACHINE "s390\0\0\0\0"
diff --git a/arch/s390/kernel/compat_linux.c b/arch/s390/kernel/compat_linux.c
index 8b6e4f5..4f0446d 100644
--- a/arch/s390/kernel/compat_linux.c
+++ b/arch/s390/kernel/compat_linux.c
@@ -58,10 +58,6 @@
 
 #include "compat_linux.h"
 
-u32 psw32_user_bits = PSW32_MASK_DAT | PSW32_MASK_IO | PSW32_MASK_EXT |
-        PSW32_DEFAULT_KEY | PSW32_MASK_BASE | PSW32_MASK_MCHECK |
-        PSW32_MASK_PSTATE | PSW32_ASC_HOME;
- 
 /* For this source file, we want overflow handling. */
 
 #undef high2lowuid
diff --git a/arch/s390/kernel/compat_signal.c b/arch/s390/kernel/compat_signal.c
index 958818c..9f263b2 100644
--- a/arch/s390/kernel/compat_signal.c
+++ b/arch/s390/kernel/compat_signal.c
@@ -158,7 +158,7 @@ static int save_sigregs32(struct pt_regs *regs, _sigregs32 __user *sregs)
 
  user_sregs.regs.psw.mask = (__u32)(regs->psw.mask >> 32);
  user_sregs.regs.psw.mask &= PSW32_MASK_USER | PSW32_MASK_RI;
- user_sregs.regs.psw.mask |= psw32_user_bits;
+ user_sregs.regs.psw.mask |= PSW32_USER_BITS;
  user_sregs.regs.psw.addr = (__u32) regs->psw.addr |
   (__u32)(regs->psw.mask & PSW_MASK_BA);
  for (i = 0; i < NUM_GPRS; i++)
diff --git a/arch/s390/kernel/ptrace.c b/arch/s390/kernel/ptrace.c
index 2b9597c..decb9f9 100644
--- a/arch/s390/kernel/ptrace.c
+++ b/arch/s390/kernel/ptrace.c
@@ -540,7 +540,7 @@ static u32 __peek_user_compat(struct task_struct *child, addr_t addr)
    /* Fake a 31 bit psw mask. */
    tmp = (__u32)(regs->psw.mask >> 32);
    tmp &= PSW32_MASK_USER | PSW32_MASK_RI;
-   tmp |= psw32_user_bits;
+   tmp |= PSW32_USER_BITS;
   } else if (addr == (addr_t) &dummy32->regs.psw.addr) {
    /* Fake a 31 bit psw address. */
    tmp = (__u32) regs->psw.addr |
@@ -641,7 +641,7 @@ static int __poke_user_compat(struct task_struct *child,
 
    mask |= is_ri_task(child) ? PSW32_MASK_RI : 0;
    /* Build a 64 bit psw mask from 31 bit mask. */
-   if ((tmp ^ psw32_user_bits) & ~mask)
+   if ((tmp ^ PSW32_USER_BITS) & ~mask)
     /* Invalid psw mask. */
     return -EINVAL;
    if ((data & PSW32_MASK_ASC) == PSW32_ASC_HOME)
-- 
1.7.1