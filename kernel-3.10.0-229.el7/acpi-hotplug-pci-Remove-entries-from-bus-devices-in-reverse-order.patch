From 0c90cefa54a72b9578917332b930f537ce68da18 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 12:28:53 -0400
Subject: [acpi] hotplug/pci: Remove entries from bus->devices in reverse order

Message-id: <1411129776-21656-19-git-send-email-prarit@redhat.com>
Patchwork-id: 96375
O-Subject: [RHEL7.1 PATCH BZ 1141846 18/61] ACPI / hotplug / PCI: Remove entries from bus->devices in reverse order
Bugzilla: 1141846
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit 2d7c1b77dd59387070aab355532dd157f888325c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Feb 3 02:22:07 2014 +0100

    ACPI / hotplug / PCI: Remove entries from bus->devices in reverse order

    According to the changelog of commit 29ed1f29b68a (PCI: pciehp: Fix null
    pointer deref when hot-removing SR-IOV device) it is unsafe to walk the
    bus->devices list of a PCI bus and remove devices from it in direct order,
    because that may lead to NULL pointer dereferences related to virtual
    functions.

    For this reason, change all of the bus->devices list walks in
    acpiphp_glue.c during which devices may be removed to be carried out in
    reverse order.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

Cc: Myron Stowe <mstowe@redhat.com>
Cc: Andy Gospodarek <agospoda@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index b121440..dbb595a 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -742,7 +742,7 @@ static void trim_stale_devices(struct pci_dev *dev)
 
   /* The device is a bridge. so check the bus below it. */
   pm_runtime_get_sync(&dev->dev);
-  list_for_each_entry_safe(child, tmp, &bus->devices, bus_list)
+  list_for_each_entry_safe_reverse(child, tmp, &bus->devices, bus_list)
    trim_stale_devices(child);
 
   pm_runtime_put(&dev->dev);
@@ -773,8 +773,8 @@ static void acpiphp_check_bridge(struct acpiphp_bridge *bridge)
    ; /* do nothing */
   } else if (get_slot_status(slot) == ACPI_STA_ALL) {
    /* remove stale devices if any */
-   list_for_each_entry_safe(dev, tmp, &bus->devices,
-       bus_list)
+   list_for_each_entry_safe_reverse(dev, tmp,
+        &bus->devices, bus_list)
     if (PCI_SLOT(dev->devfn) == slot->device)
      trim_stale_devices(dev);
 
@@ -805,7 +805,7 @@ static void acpiphp_sanitize_bus(struct pci_bus *bus)
  int i;
  unsigned long type_mask = IORESOURCE_IO | IORESOURCE_MEM;
 
- list_for_each_entry_safe(dev, tmp, &bus->devices, bus_list) {
+ list_for_each_entry_safe_reverse(dev, tmp, &bus->devices, bus_list) {
   for (i=0; i<PCI_BRIDGE_RESOURCES; i++) {
    struct resource *res = &dev->resource[i];
    if ((res->flags & type_mask) && !res->start &&
-- 
1.7.1