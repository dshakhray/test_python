From 5afd3a78bb080d59db527bec1140fe014e6c157a Mon Sep 17 00:00:00 2001
From: Ilya Dryomov <ilya.dryomov@inktank.com>
Date: Tue, 18 Nov 2014 15:49:52 -0500
Subject: [fs] ceph: fix bool assignments
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1416325805-26490-38-git-send-email-idryomov@redhat.com>
Patchwork-id: 100229
O-Subject: [RHEL7.1 PATCH 37/50] ceph: fix bool assignments
Bugzilla: 1165232
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Sage Weil <sweil@redhat.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>

From: Fabian Frederick <fabf@skynet.be>

Fix some coccinelle warnings:
fs/ceph/caps.c:2400:6-10: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2401:6-15: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2402:6-17: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2403:6-22: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2404:6-22: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2405:6-19: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2440:4-20: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2469:3-16: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2490:2-18: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2519:3-7: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2549:3-12: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2575:2-6: WARNING: Assignment of bool to 0/1
fs/ceph/caps.c:2589:3-7: WARNING: Assignment of bool to 0/1

Signed-off-by: Fabian Frederick <fabf@skynet.be>
Signed-off-by: Ilya Dryomov <idryomov@redhat.com>
(cherry picked from commit ab6c2c3ebe1d4fddc1f9ae29810799419be950c0)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 fs/ceph/caps.c [ ceph fscache not in RHEL ]
---

diff --git a/fs/ceph/caps.c b/fs/ceph/caps.c
index 7530f68..f594e9e 100644
--- a/fs/ceph/caps.c
+++ b/fs/ceph/caps.c
@@ -2395,11 +2395,11 @@ static void handle_cap_grant(struct ceph_mds_client *mdsc,
  u64 max_size = le64_to_cpu(grant->max_size);
  struct timespec mtime, atime, ctime;
  int check_caps = 0;
- bool wake = 0;
- bool writeback = 0;
- bool queue_trunc = 0;
- bool queue_invalidate = 0;
- bool deleted_inode = 0;
+ bool wake = false;
+ bool writeback = false;
+ bool queue_trunc = false;
+ bool queue_invalidate = false;
+ bool deleted_inode = false;
 
  dout("handle_cap_grant inode %p cap %p mds%d seq %d %s\n",
       inode, cap, mds, seq, ceph_cap_string(newcaps));
@@ -2434,7 +2434,7 @@ static void handle_cap_grant(struct ceph_mds_client *mdsc,
    /* there were locked pages.. invalidate later
       in a separate thread. */
    if (ci->i_rdcache_revoking != ci->i_rdcache_gen) {
-    queue_invalidate = 1;
+    queue_invalidate = true;
     ci->i_rdcache_revoking = ci->i_rdcache_gen;
    }
   }
@@ -2461,7 +2461,7 @@ static void handle_cap_grant(struct ceph_mds_client *mdsc,
   set_nlink(inode, le32_to_cpu(grant->nlink));
   if (inode->i_nlink == 0 &&
       (newcaps & (CEPH_CAP_LINK_SHARED | CEPH_CAP_LINK_EXCL)))
-   deleted_inode = 1;
+   deleted_inode = true;
  }
 
  if ((issued & CEPH_CAP_XATTR_EXCL) == 0 && grant->xattr_len) {
@@ -2505,7 +2505,7 @@ static void handle_cap_grant(struct ceph_mds_client *mdsc,
     ci->i_wanted_max_size = 0;  /* reset */
     ci->i_requested_max_size = 0;
    }
-   wake = 1;
+   wake = true;
   }
  }
 
@@ -2535,7 +2535,7 @@ static void handle_cap_grant(struct ceph_mds_client *mdsc,
        ceph_cap_string(newcaps),
        ceph_cap_string(revoking));
   if (revoking & used & CEPH_CAP_FILE_BUFFER)
-   writeback = 1;  /* initiate writeback; will delay ack */
+   writeback = true;  /* initiate writeback; will delay ack */
   else if (revoking == CEPH_CAP_FILE_CACHE &&
     (newcaps & CEPH_CAP_FILE_LAZYIO) == 0 &&
     queue_invalidate)
@@ -2561,7 +2561,7 @@ static void handle_cap_grant(struct ceph_mds_client *mdsc,
   cap->implemented |= newcaps; /* add bits only, to
            * avoid stepping on a
            * pending revocation */
-  wake = 1;
+  wake = true;
  }
  BUG_ON(cap->issued & ~cap->implemented);
 
@@ -2575,7 +2575,7 @@ static void handle_cap_grant(struct ceph_mds_client *mdsc,
   kick_flushing_inode_caps(mdsc, session, inode);
   up_read(&mdsc->snap_rwsem);
   if (newcaps & ~issued)
-   wake = 1;
+   wake = true;
  }
 
  if (queue_trunc) {
-- 
1.7.1