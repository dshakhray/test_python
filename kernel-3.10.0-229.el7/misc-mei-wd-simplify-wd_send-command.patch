From 24cf1f95eab74e67148c0cef655d804859ed5a02 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 2 May 2014 14:37:36 -0400
Subject: [misc] mei: wd: simplify wd_send command

Message-id: <1399041470-21330-64-git-send-email-prarit@redhat.com>
Patchwork-id: 79349
O-Subject: [RHEL7.1 PATCH BZ 1088953 63/77] mei: wd: simplify wd_send command
Bugzilla: 1088953
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit b6d81fd66155fb6d0965502e146b136047e428b3
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Wed Feb 19 17:35:50 2014 +0200

    mei: wd: simplify wd_send command

    Add reduce credits to wd_send to remove code
    repetition and simplify error handling

    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/interrupt.c b/drivers/misc/mei/interrupt.c
index 31cb345..834220a 100644
--- a/drivers/misc/mei/interrupt.c
+++ b/drivers/misc/mei/interrupt.c
@@ -480,10 +480,9 @@ int mei_irq_write_handler(struct mei_device *dev, struct mei_cl_cb *cmpl_list)
  if (mei_cl_is_connected(&dev->wd_cl)) {
   if (dev->wd_pending &&
       mei_cl_flow_ctrl_creds(&dev->wd_cl) > 0) {
-   if (mei_wd_send(dev))
-    dev_dbg(&dev->pdev->dev, "wd send failed.\n");
-   else if (mei_cl_flow_ctrl_reduce(&dev->wd_cl))
-    return -EIO;
+   ret = mei_wd_send(dev);
+   if (ret)
+    return ret;
    dev->wd_pending = false;
   }
  }
diff --git a/drivers/misc/mei/wd.c b/drivers/misc/mei/wd.c
index 8a05df9..1dae0da 100644
--- a/drivers/misc/mei/wd.c
+++ b/drivers/misc/mei/wd.c
@@ -117,13 +117,16 @@ int mei_wd_host_init(struct mei_device *dev)
  * returns 0 if success,
  * -EIO when message send fails
  * -EINVAL when invalid message is to be sent
+ * -ENODEV on flow control failure
  */
 int mei_wd_send(struct mei_device *dev)
 {
+ struct mei_cl *cl = &dev->wd_cl;
  struct mei_msg_hdr hdr;
+ int ret;
 
- hdr.host_addr = dev->wd_cl.host_client_id;
- hdr.me_addr = dev->wd_cl.me_client_id;
+ hdr.host_addr = cl->host_client_id;
+ hdr.me_addr = cl->me_client_id;
  hdr.msg_complete = 1;
  hdr.reserved = 0;
  hdr.internal = 0;
@@ -132,10 +135,24 @@ int mei_wd_send(struct mei_device *dev)
   hdr.length = MEI_WD_START_MSG_SIZE;
  else if (!memcmp(dev->wd_data, mei_stop_wd_params, MEI_WD_HDR_SIZE))
   hdr.length = MEI_WD_STOP_MSG_SIZE;
- else
+ else {
+  dev_err(&dev->pdev->dev, "wd: invalid message is to be sent, aborting\n");
   return -EINVAL;
+ }
+
+ ret = mei_write_message(dev, &hdr, dev->wd_data);
+ if (ret) {
+  dev_err(&dev->pdev->dev, "wd: write message failed\n");
+  return ret;
+ }
 
- return mei_write_message(dev, &hdr, dev->wd_data);
+ ret = mei_cl_flow_ctrl_reduce(cl);
+ if (ret) {
+  dev_err(&dev->pdev->dev, "wd: flow_ctrl_reduce failed.\n");
+  return ret;
+ }
+
+ return 0;
 }
 
 /**
@@ -165,16 +182,9 @@ int mei_wd_stop(struct mei_device *dev)
   goto out;
 
  if (ret && mei_hbuf_acquire(dev)) {
-  ret = 0;
-
-  if (!mei_wd_send(dev)) {
-   ret = mei_cl_flow_ctrl_reduce(&dev->wd_cl);
-   if (ret)
-    goto out;
-  } else {
-   dev_err(&dev->pdev->dev, "wd: send stop failed\n");
-  }
-
+  ret = mei_wd_send(dev);
+  if (ret)
+   goto out;
   dev->wd_pending = false;
  } else {
   dev->wd_pending = true;
@@ -295,18 +305,10 @@ static int mei_wd_ops_ping(struct watchdog_device *wd_dev)
 
   dev_dbg(&dev->pdev->dev, "wd: sending ping\n");
 
-  if (mei_wd_send(dev)) {
-   dev_err(&dev->pdev->dev, "wd: send failed.\n");
-   ret = -EIO;
+  ret = mei_wd_send(dev);
+  if (ret)
    goto end;
-  }
-
-  if (mei_cl_flow_ctrl_reduce(&dev->wd_cl)) {
-   dev_err(&dev->pdev->dev, "wd: mei_cl_flow_ctrl_reduce() failed.\n");
-   ret = -EIO;
-   goto end;
-  }
-
+  dev->wd_pending = false;
  } else {
   dev->wd_pending = true;
  }
-- 
1.7.1