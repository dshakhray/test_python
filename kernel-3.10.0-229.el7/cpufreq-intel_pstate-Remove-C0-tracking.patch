From 70728ebeb4deb1419c97e691abafe658c2c2cbdd Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:09 -0400
Subject: [cpufreq] intel_pstate: Remove C0 tracking

Message-id: <1409235879-1283-156-git-send-email-prarit@redhat.com>
Patchwork-id: 89466
O-Subject: [RHEL7.1 PATCH BZ 1134639 155/185] intel_pstate: Remove C0 tracking
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit adacdf3f2b8e65aa441613cf61c4f598e9042690
Author: Dirk Brandewie <dirk.j.brandewie@intel.com>
Date:   Thu May 29 09:32:22 2014 -0700

    intel_pstate: Remove C0 tracking

    Commit fcb6a15c (intel_pstate: Take core C0 time into account for core
    busy calculation) introduced a regression referenced below.  The issue
    with "lockup" after suspend that this commit was addressing is now dealt
    with in the suspend path.

    Fixes: fcb6a15c2e7e (intel_pstate: Take core C0 time into account for core busy calculation)
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=66581
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=75121
    Reported-by: Doug Smythies <dsmythies@telus.net>
    Cc: 3.14+ <stable@vger.kernel.org> # 3.14+
    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index a6d5afa..ffef765 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -57,7 +57,6 @@ struct sample {
  int32_t core_pct_busy;
  u64 aperf;
  u64 mperf;
- unsigned long long tsc;
  int freq;
 };
 
@@ -96,7 +95,6 @@ struct cpudata {
 
  u64 prev_aperf;
  u64 prev_mperf;
- unsigned long long prev_tsc;
  struct sample sample;
 };
 
@@ -555,45 +553,36 @@ static inline void intel_pstate_calc_busy(struct cpudata *cpu)
 {
  struct sample *sample = &cpu->sample;
  int32_t core_pct;
- int32_t c0_pct;
 
  core_pct = div_fp(int_tofp(sample->aperf), int_tofp(sample->mperf));
  core_pct = mul_fp(core_pct, int_tofp(100));
  FP_ROUNDUP(core_pct);
 
- c0_pct = div_fp(int_tofp(sample->mperf), int_tofp(sample->tsc));
-
  sample->freq = fp_toint(
   mul_fp(int_tofp(cpu->pstate.max_pstate * 1000), core_pct));
 
- sample->core_pct_busy = mul_fp(core_pct, c0_pct);
+ sample->core_pct_busy = core_pct;
 }
 
 static inline void intel_pstate_sample(struct cpudata *cpu)
 {
  u64 aperf, mperf;
- unsigned long long tsc;
 
  rdmsrl(MSR_IA32_APERF, aperf);
  rdmsrl(MSR_IA32_MPERF, mperf);
- tsc = native_read_tsc();
 
  aperf = aperf >> FRAC_BITS;
  mperf = mperf >> FRAC_BITS;
- tsc = tsc >> FRAC_BITS;
 
  cpu->sample.aperf = aperf;
  cpu->sample.mperf = mperf;
- cpu->sample.tsc = tsc;
  cpu->sample.aperf -= cpu->prev_aperf;
  cpu->sample.mperf -= cpu->prev_mperf;
- cpu->sample.tsc -= cpu->prev_tsc;
 
  intel_pstate_calc_busy(cpu);
 
  cpu->prev_aperf = aperf;
  cpu->prev_mperf = mperf;
- cpu->prev_tsc = tsc;
 }
 
 static inline void intel_pstate_set_sample_time(struct cpudata *cpu)
-- 
1.7.1