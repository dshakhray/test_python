From ad94ec758fabff3565b72100c2d3fb5d21152088 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Fri, 5 Sep 2014 02:15:45 -0400
Subject: [pci] Add DMA alias iterator

Message-id: <20140905021545.32574.151.stgit@gir.stowe>
Patchwork-id: 91360
O-Subject: [RHEL7.1 PATCH 01/17] PCI: Add DMA alias iterator
Bugzilla: 1136537
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1136537
Upstream Status: c25dc82899e67a32fdcfb20dd72a37fc236fde2e

commit c25dc82899e67a32fdcfb20dd72a37fc236fde2e
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Thu May 22 17:07:30 2014 -0600

    PCI: Add DMA alias iterator

    In a mixed PCI/PCI-X/PCIe topology, bridges can take ownership of
    transactions, replacing the original requester ID with their own.
    Sometimes we just want to know the resulting device or resulting alias;
    other times we want each step in the chain.  This iterator allows either
    usage.  When an endpoint is connected via an unbroken chain of PCIe
    switches and root ports, it has no alias and its requester ID is visible to
    the root bus.  When PCI/X get in the way, we pick up aliases for bridges.

    The reason why we potentially care about each step in the path is because
    of PCI-X.  PCI-X has the concept of a requester ID, but bridges may or may
    not take ownership of various types of transactions.  We therefore leave it
    to the consumer of this function to prune out what they don't care about
    rather than attempt to flatten the alias ourselves.

    Tested-by: George Spelvin <linux@horizon.com>
    Tested-by: Pat Erley <pat-lkml@erley.org>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/search.c b/drivers/pci/search.c
index 60da0b3..7efa0a2 100644
--- a/drivers/pci/search.c
+++ b/drivers/pci/search.c
@@ -18,6 +18,76 @@ DECLARE_RWSEM(pci_bus_sem);
 EXPORT_SYMBOL_GPL(pci_bus_sem);
 
 /*
+ * pci_for_each_dma_alias - Iterate over DMA aliases for a device
+ * @pdev: starting downstream device
+ * @fn: function to call for each alias
+ * @data: opaque data to pass to @fn
+ *
+ * Starting @pdev, walk up the bus calling @fn for each possible alias
+ * of @pdev at the root bus.
+ */
+int pci_for_each_dma_alias(struct pci_dev *pdev,
+      int (*fn)(struct pci_dev *pdev,
+         u16 alias, void *data), void *data)
+{
+ struct pci_bus *bus;
+ int ret;
+
+ ret = fn(pdev, PCI_DEVID(pdev->bus->number, pdev->devfn), data);
+ if (ret)
+  return ret;
+
+ for (bus = pdev->bus; !pci_is_root_bus(bus); bus = bus->parent) {
+  struct pci_dev *tmp;
+
+  /* Skip virtual buses */
+  if (!bus->self)
+   continue;
+
+  tmp = bus->self;
+
+  /*
+   * PCIe-to-PCI/X bridges alias transactions from downstream
+   * devices using the subordinate bus number (PCI Express to
+   * PCI/PCI-X Bridge Spec, rev 1.0, sec 2.3).  For all cases
+   * where the upstream bus is PCI/X we alias to the bridge
+   * (there are various conditions in the previous reference
+   * where the bridge may take ownership of transactions, even
+   * when the secondary interface is PCI-X).
+   */
+  if (pci_is_pcie(tmp)) {
+   switch (pci_pcie_type(tmp)) {
+   case PCI_EXP_TYPE_ROOT_PORT:
+   case PCI_EXP_TYPE_UPSTREAM:
+   case PCI_EXP_TYPE_DOWNSTREAM:
+    continue;
+   case PCI_EXP_TYPE_PCI_BRIDGE:
+    ret = fn(tmp,
+      PCI_DEVID(tmp->subordinate->number,
+         PCI_DEVFN(0, 0)), data);
+    if (ret)
+     return ret;
+    continue;
+   case PCI_EXP_TYPE_PCIE_BRIDGE:
+    ret = fn(tmp,
+      PCI_DEVID(tmp->bus->number,
+         tmp->devfn), data);
+    if (ret)
+     return ret;
+    continue;
+   }
+  } else {
+   ret = fn(tmp, PCI_DEVID(tmp->bus->number, tmp->devfn),
+     data);
+   if (ret)
+    return ret;
+  }
+ }
+
+ return ret;
+}
+
+/*
  * find the upstream PCIe-to-PCI bridge of a PCI device
  * if the device is PCIE, return NULL
  * if the device isn't connected to a PCIe bridge (that is its parent is a
diff --git a/include/linux/pci.h b/include/linux/pci.h
index 0a3f2f5..a806fb6 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1781,6 +1781,10 @@ static inline struct eeh_dev *pci_dev_to_eeh_dev(struct pci_dev *pdev)
 }
 #endif
 
+int pci_for_each_dma_alias(struct pci_dev *pdev,
+      int (*fn)(struct pci_dev *pdev,
+         u16 alias, void *data), void *data);
+
 /**
  * pci_find_upstream_pcie_bridge - find upstream PCIe-to-PCI bridge of a device
  * @pdev: the PCI device
-- 
1.7.1