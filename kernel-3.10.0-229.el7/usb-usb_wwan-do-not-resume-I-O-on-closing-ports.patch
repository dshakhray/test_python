From f87a8bc680a6ad5f4067bef952019f541a2f3eec Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:08:55 -0400
Subject: [usb] usb_wwan: do not resume I/O on closing ports

Message-id: <1410887463-20674-464-git-send-email-dzickus@redhat.com>
Patchwork-id: 95457
O-Subject: [RHEL7 PATCH 463/591] USB: usb_wwan: do not resume I/O on closing ports
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit b0a9aa6da8088b722326a858ab572a13b5b6f9cb
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon May 26 19:23:32 2014 +0200

    USB: usb_wwan: do not resume I/O on closing ports

    Use tty-port initialised flag rather than private flag to determine when
    port is closing down.

    Since the tty-port flag is set prior to dropping DTR/RTS (when HUPCL is
    set) this avoid submitting the read urbs when resuming the interface in
    dtr_rts() only to immediately kill them again in shutdown().

    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/usb-wwan.h b/drivers/usb/serial/usb-wwan.h
index 8502f9a..f22dff5 100644
--- a/drivers/usb/serial/usb-wwan.h
+++ b/drivers/usb/serial/usb-wwan.h
@@ -48,7 +48,6 @@ struct usb_wwan_port_private {
  struct urb *out_urbs[N_OUT_URB];
  u8 *out_buffer[N_OUT_URB];
  unsigned long out_busy; /* Bit vector of URBs in use */
- int opened;
  struct usb_anchor delayed;
 
  /* Settings for the port */
diff --git a/drivers/usb/serial/usb_wwan.c b/drivers/usb/serial/usb_wwan.c
index bbcbdaa..2932d9c 100644
--- a/drivers/usb/serial/usb_wwan.c
+++ b/drivers/usb/serial/usb_wwan.c
@@ -395,7 +395,6 @@ int usb_wwan_open(struct tty_struct *tty, struct usb_serial_port *port)
  }
 
  spin_lock_irq(&intfdata->susp_lock);
- portdata->opened = 1;
  if (++intfdata->open_ports == 1)
   serial->interface->needs_remote_wakeup = 1;
  spin_unlock_irq(&intfdata->susp_lock);
@@ -429,8 +428,11 @@ void usb_wwan_close(struct usb_serial_port *port)
 
  portdata = usb_get_serial_port_data(port);
 
+ /*
+  * Need to take susp_lock to make sure port is not already being
+  * resumed, but no need to hold it due to ASYNC_INITIALIZED.
+  */
  spin_lock_irq(&intfdata->susp_lock);
- portdata->opened = 0;
  if (--intfdata->open_ports == 0)
   serial->interface->needs_remote_wakeup = 0;
  spin_unlock_irq(&intfdata->susp_lock);
@@ -645,11 +647,12 @@ int usb_wwan_resume(struct usb_serial *serial)
  spin_lock_irq(&intfdata->susp_lock);
  for (i = 0; i < serial->num_ports; i++) {
   port = serial->port[i];
-  portdata = usb_get_serial_port_data(port);
 
-  if (!portdata || !portdata->opened)
+  if (!test_bit(ASYNCB_INITIALIZED, &port->port.flags))
    continue;
 
+  portdata = usb_get_serial_port_data(port);
+
   if (port->interrupt_in_urb) {
    err = usb_submit_urb(port->interrupt_in_urb,
      GFP_ATOMIC);
-- 
1.7.1