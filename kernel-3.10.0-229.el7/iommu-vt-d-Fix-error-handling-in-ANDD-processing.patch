From b9153a0a113dc57c3f96d06f97fbd0200432bbd4 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Fri, 5 Sep 2014 01:51:46 -0400
Subject: [iommu] vt-d: Fix error handling in ANDD processing

Message-id: <20140905015146.31297.35291.stgit@gir.stowe>
Patchwork-id: 91353
O-Subject: [RHEL7.1 PATCH 60/65] iommu/vt-d: Fix error handling in ANDD processing
Bugzilla: 1129880 1087643
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1087643
Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1129880
Upstream Status: 7713ec066ae8adc49dd8daa02a73e6b60af6ee5f

commit 7713ec066ae8adc49dd8daa02a73e6b60af6ee5f
Author: David Woodhouse <David.Woodhouse@intel.com>
Date:   Tue Apr 1 14:58:36 2014 +0100

    iommu/vt-d: Fix error handling in ANDD processing

    If we failed to find an ACPI device to correspond to an ANDD record, we
    would fail to increment our pointer and would just process the same record
    over and over again, with predictable results.

    Turn it from a while() loop into a for() loop to let the 'continue' in
    the error paths work correctly.

    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/iommu/dmar.c b/drivers/iommu/dmar.c
index e74d77b..20d950e 100644
--- a/drivers/iommu/dmar.c
+++ b/drivers/iommu/dmar.c
@@ -662,10 +662,9 @@ static int __init dmar_acpi_dev_scope_init(void)
  if (dmar_tbl == NULL)
   return -ENODEV;
 
- andd = (void *)dmar_tbl + sizeof(struct acpi_table_dmar);
-
- while (((unsigned long)andd) <
-        ((unsigned long)dmar_tbl) + dmar_tbl->length) {
+ for (andd = (void *)dmar_tbl + sizeof(struct acpi_table_dmar);
+      ((unsigned long)andd) < ((unsigned long)dmar_tbl) + dmar_tbl->length;
+      andd = ((void *)andd) + andd->header.length) {
   if (andd->header.type == ACPI_DMAR_TYPE_ANDD) {
    acpi_handle h;
    struct acpi_device *adev;
@@ -685,7 +684,6 @@ static int __init dmar_acpi_dev_scope_init(void)
    }
    dmar_acpi_insert_dev_scope(andd->device_number, adev);
   }
-  andd = ((void *)andd) + andd->header.length;
  }
  return 0;
 }
-- 
1.7.1