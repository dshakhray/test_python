From 34e74440f1f7744e386d7b58140ab6e47025d937 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 13:18:27 -0400
Subject: [ethernet] r8169: use Giant Send

Message-id: <1410182312-19560-9-git-send-email-ivecera@redhat.com>
Patchwork-id: 91997
O-Subject: [RHEL7.1 PATCH 08/13] r8169: use Giant Send
Bugzilla: 1139247
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>

BZ: #1139247

Upstream commit(s):
commit bdfa4ed68187c436caee8adc1ef1d4b0d75ca0ae
Author: hayeswang <hayeswang@realtek.com>
Date:   Fri Jul 11 16:25:57 2014 +0800

    r8169: use Giant Send

    Replace large send with giant send for TSO for RTL8111C and later ICs.
    The large send setting of the RTL8111DP is different from the other
    chips. However, the giant send setting is the same for all the chips
    which support it. Use the giant send to synchronize the settings.

    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/realtek/r8169.c b/drivers/net/ethernet/realtek/r8169.c
index fafd42f..c611af2 100644
--- a/drivers/net/ethernet/realtek/r8169.c
+++ b/drivers/net/ethernet/realtek/r8169.c
@@ -627,6 +627,10 @@ enum rtl_tx_desc_bit_0 {
 
 /* 8102e, 8168c and beyond. */
 enum rtl_tx_desc_bit_1 {
+ /* First doubleword. */
+ TD1_GTSENV4 = (1 << 26),  /* Giant Send for IPv4 */
+#define GTTCPHO_SHIFT   18
+
  /* Second doubleword. */
 #define TD1_MSS_SHIFT   18 /* MSS position (11 bits) */
  TD1_IP_CS = (1 << 29),  /* Calculate IP checksum */
@@ -5966,10 +5970,12 @@ static bool rtl8169_tso_csum_v1(struct rtl8169_private *tp,
 static bool rtl8169_tso_csum_v2(struct rtl8169_private *tp,
     struct sk_buff *skb, u32 *opts)
 {
+ u32 transport_offset = (u32)skb_transport_offset(skb);
  u32 mss = skb_shinfo(skb)->gso_size;
 
  if (mss) {
-  opts[0] |= TD_LSO;
+  opts[0] |= TD1_GTSENV4;
+  opts[0] |= transport_offset << GTTCPHO_SHIFT;
   opts[1] |= min(mss, TD_MSS_MAX) << TD1_MSS_SHIFT;
  } else if (skb->ip_summed == CHECKSUM_PARTIAL) {
   const struct iphdr *ip = ip_hdr(skb);
-- 
1.7.1