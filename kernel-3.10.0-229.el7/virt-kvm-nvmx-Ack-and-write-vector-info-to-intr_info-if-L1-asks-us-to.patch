From e9d13e42a8f4b5c5a75c2573f7afacc4ad52f90d Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:39:40 -0400
Subject: [virt] kvm/nvmx: Ack and write vector info to intr_info if L1 asks us to

Message-id: <1406040016-3289-186-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86264
O-Subject: [RHEL7 PATCH v2 185/221] KVM: nVMX: Ack and write vector info to intr_info if L1 asks us to
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Bandan Das <bsd@redhat.com>

This feature emulates the "Acknowledge interrupt on exit" behavior.
We can safely emulate it for L1 to run L2 even if L0 itself has it
disabled (to run L1).

Signed-off-by: Bandan Das <bsd@redhat.com>
Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
(cherry picked from commit 77b0f5d67ff2781f36831cba79674c3e97bd7acf)
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/irq.c b/arch/x86/kvm/irq.c
index 484bc87..bd0da43 100644
--- a/arch/x86/kvm/irq.c
+++ b/arch/x86/kvm/irq.c
@@ -113,6 +113,7 @@ int kvm_cpu_get_interrupt(struct kvm_vcpu *v)
 
  return kvm_get_apic_interrupt(v); /* APIC */
 }
+EXPORT_SYMBOL_GPL(kvm_cpu_get_interrupt);
 
 void kvm_inject_pending_timer_irqs(struct kvm_vcpu *vcpu)
 {
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index f00a6e9..4378014 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -4526,6 +4526,16 @@ static bool nested_exit_on_intr(struct kvm_vcpu *vcpu)
   PIN_BASED_EXT_INTR_MASK;
 }
 
+/*
+ * In nested virtualization, check if L1 has set
+ * VM_EXIT_ACK_INTR_ON_EXIT
+ */
+static bool nested_exit_intr_ack_set(struct kvm_vcpu *vcpu)
+{
+ return get_vmcs12(vcpu)->vm_exit_controls &
+  VM_EXIT_ACK_INTR_ON_EXIT;
+}
+
 static bool nested_exit_on_nmi(struct kvm_vcpu *vcpu)
 {
  return get_vmcs12(vcpu)->pin_based_vm_exec_control &
@@ -8563,6 +8573,14 @@ static void nested_vmx_vmexit(struct kvm_vcpu *vcpu, u32 exit_reason,
  prepare_vmcs12(vcpu, vmcs12, exit_reason, exit_intr_info,
          exit_qualification);
 
+ if ((exit_reason == EXIT_REASON_EXTERNAL_INTERRUPT)
+     && nested_exit_intr_ack_set(vcpu)) {
+  int irq = kvm_cpu_get_interrupt(vcpu);
+  WARN_ON(irq < 0);
+  vmcs12->vm_exit_intr_info = irq |
+   INTR_INFO_VALID_MASK | INTR_TYPE_EXT_INTR;
+ }
+
  trace_kvm_nested_vmexit_inject(vmcs12->vm_exit_reason,
            vmcs12->exit_qualification,
            vmcs12->idt_vectoring_info_field,
-- 
1.7.1