From 25e55c66e2c212d2eeac28638086738b8aa7c57f Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:03:33 -0400
Subject: [acpi] hotplug/pci: Clean up bridge_mutex usage

Message-id: <20140710010333.22146.98613.stgit@gir.stowe>
Patchwork-id: 85590
O-Subject: [RHEL7.1 PATCH 051/105] ACPI / hotplug / PCI: Clean up bridge_mutex usage
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: ff181e5a4f6b536e5f3f1601cd5c54e792cd9abc

commit ff181e5a4f6b536e5f3f1601cd5c54e792cd9abc
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Jul 13 23:27:26 2013 +0200

    ACPI / hotplug / PCI: Clean up bridge_mutex usage

    Do not acquire bridge_mutex around the addition of a slot to its
    bridge's list of slots and arount the addition of a function to
    its slot's list of functions, because that doesn't help anything
    right now (those lists are walked without any locking anyway).

    However, acquire bridge_mutex around the list walk in
    acpiphp_remove_slots() and use list_for_each_entry() there,
    because we terminate the walk as soon as we find the first matching
    entry.  This prevents that list walk from colliding with bridge
    addition and removal.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index da8e52a..8098b86 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -323,9 +323,7 @@ static acpi_status register_slot(acpi_handle handle, u32 lvl, void *data,
  INIT_LIST_HEAD(&slot->funcs);
  mutex_init(&slot->crit_sect);
 
- mutex_lock(&bridge_mutex);
  list_add_tail(&slot->node, &bridge->slots);
- mutex_unlock(&bridge_mutex);
 
  /* Register slots for ejectable funtions only. */
  if (acpi_pci_check_ejectable(pbus, handle)  || is_dock_device(handle)) {
@@ -355,9 +353,7 @@ static acpi_status register_slot(acpi_handle handle, u32 lvl, void *data,
 
  slot_found:
  newfunc->slot = slot;
- mutex_lock(&bridge_mutex);
  list_add_tail(&newfunc->sibling, &slot->funcs);
- mutex_unlock(&bridge_mutex);
 
  if (pci_bus_read_dev_vendor_id(pbus, PCI_DEVFN(device, function),
            &val, 60*1000))
@@ -1025,17 +1021,21 @@ void acpiphp_enumerate_slots(struct pci_bus *bus)
 /* Destroy hotplug slots associated with the PCI bus */
 void acpiphp_remove_slots(struct pci_bus *bus)
 {
- struct acpiphp_bridge *bridge, *tmp;
+ struct acpiphp_bridge *bridge;
 
  if (acpiphp_disabled)
   return;
 
- list_for_each_entry_safe(bridge, tmp, &bridge_list, list)
+ mutex_lock(&bridge_mutex);
+ list_for_each_entry(bridge, &bridge_list, list)
   if (bridge->pci_bus == bus) {
+   mutex_unlock(&bridge_mutex);
    cleanup_bridge(bridge);
    put_bridge(bridge);
-   break;
+   return;
   }
+
+ mutex_unlock(&bridge_mutex);
 }
 
 /**
-- 
1.7.1