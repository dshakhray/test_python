From f8d5343fe3b8282ca82d5276cad5e76c799d454c Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:29:58 -0400
Subject: [net] openvswitch: Make flow mask removal symmetric

Message-id: <6dd885aef2fb6c053990abb8ab60987c429981da.1410531783.git.jbenc@redhat.com>
Patchwork-id: 94018
O-Subject: [RHEL7.1 net PATCH 25/50] openvswitch: Make flow mask removal symmetric.
Bugzilla: 1110384
RH-Acked-by: Flavio Leitner <fbl@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110384
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit 56c19868e115fcf8d62d843e1b9616bb9837d0db
Author: Jarno Rajahalme <jrajahalme@nicira.com>
Date:   Mon May 5 13:24:53 2014 -0700

    openvswitch: Make flow mask removal symmetric.

    Masks are inserted when flows are inserted to the table, so it is
    logical to correspondingly remove masks when flows are removed from
    the table, in ovs_flow_table_remove().

    This allows ovs_flow_free() to be called without locking, which will
    be used by later patches.

    Signed-off-by: Jarno Rajahalme <jrajahalme@nicira.com>
    Signed-off-by: Pravin B Shelar <pshelar@nicira.com>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/openvswitch/flow_table.c b/net/openvswitch/flow_table.c
index d8ef37b..c80df6f 100644
--- a/net/openvswitch/flow_table.c
+++ b/net/openvswitch/flow_table.c
@@ -159,25 +159,6 @@ void ovs_flow_free(struct sw_flow *flow, bool deferred)
  if (!flow)
   return;
 
- if (flow->mask) {
-  struct sw_flow_mask *mask = flow->mask;
-
-  /* ovs-lock is required to protect mask-refcount and
-   * mask list.
-   */
-  ASSERT_OVSL();
-  BUG_ON(!mask->ref_count);
-  mask->ref_count--;
-
-  if (!mask->ref_count) {
-   list_del_rcu(&mask->list);
-   if (deferred)
-    kfree_rcu(mask, rcu);
-   else
-    kfree(mask);
-  }
- }
-
  if (deferred)
   call_rcu(&flow->rcu, rcu_free_flow_callback);
  else
@@ -491,6 +472,25 @@ static struct table_instance *table_instance_expand(struct table_instance *ti)
  return table_instance_rehash(ti, ti->n_buckets * 2);
 }
 
+/* Remove 'mask' from the mask list, if it is not needed any more. */
+static void flow_mask_remove(struct flow_table *tbl, struct sw_flow_mask *mask)
+{
+ if (mask) {
+  /* ovs-lock is required to protect mask-refcount and
+   * mask list.
+   */
+  ASSERT_OVSL();
+  BUG_ON(!mask->ref_count);
+  mask->ref_count--;
+
+  if (!mask->ref_count) {
+   list_del_rcu(&mask->list);
+   kfree_rcu(mask, rcu);
+  }
+ }
+}
+
+/* Must be called with OVS mutex held. */
 void ovs_flow_tbl_remove(struct flow_table *table, struct sw_flow *flow)
 {
  struct table_instance *ti = ovsl_dereference(table->ti);
@@ -498,6 +498,11 @@ void ovs_flow_tbl_remove(struct flow_table *table, struct sw_flow *flow)
  BUG_ON(table->count == 0);
  hlist_del_rcu(&flow->hash_node[ti->node_ver]);
  table->count--;
+
+ /* RCU delete the mask. 'flow->mask' is not NULLed, as it should be
+  * accessible as long as the RCU read lock is held.
+  */
+ flow_mask_remove(table, flow->mask);
 }
 
 static struct sw_flow_mask *mask_alloc(void)
@@ -560,6 +565,7 @@ static int flow_mask_insert(struct flow_table *tbl, struct sw_flow *flow,
  return 0;
 }
 
+/* Must be called with OVS mutex held. */
 int ovs_flow_tbl_insert(struct flow_table *table, struct sw_flow *flow,
    struct sw_flow_mask *mask)
 {
-- 
1.7.1