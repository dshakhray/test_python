From 7dd8535dbbae19bd6962460057308c673943bf4e Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:19:00 -0400
Subject: [fs] nfsd: cleanup and rename nfs4_check_open

Message-id: <1410898849-22126-57-git-send-email-bfields@redhat.com>
Patchwork-id: 95806
O-Subject: [Patch RHEL7 056/165] nfsd: cleanup and rename nfs4_check_open
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Jeff Layton <jlayton@primarydata.com>

Rename it to better describe what it does, and have it just return the
stateid instead of a __be32 (which is now always nfs_ok). Also, do the
search for an existing stateid after the delegation check, to reduce
cleanup if the delegation check returns error.

Signed-off-by: Jeff Layton <jlayton@primarydata.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: a46cb7f2878d22b5df190970416cea40982ec2fb
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index da88b31..225f98c 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -3297,10 +3297,10 @@ out:
  return nfs_ok;
 }
 
-static __be32
-nfs4_check_open(struct nfs4_file *fp, struct nfsd4_open *open, struct nfs4_ol_stateid **stpp)
+static struct nfs4_ol_stateid *
+nfsd4_find_existing_open(struct nfs4_file *fp, struct nfsd4_open *open)
 {
- struct nfs4_ol_stateid *local;
+ struct nfs4_ol_stateid *local, *ret = NULL;
  struct nfs4_openowner *oo = open->op_openowner;
 
  spin_lock(&fp->fi_lock);
@@ -3308,14 +3308,13 @@ nfs4_check_open(struct nfs4_file *fp, struct nfsd4_open *open, struct nfs4_ol_st
   /* ignore lock owners */
   if (local->st_stateowner->so_is_open_owner == 0)
    continue;
-  /* remember if we have seen this open owner */
   if (local->st_stateowner == &oo->oo_owner) {
-   *stpp = local;
+   ret = local;
    break;
   }
  }
  spin_unlock(&fp->fi_lock);
- return nfs_ok;
+ return ret;
 }
 
 static inline int nfs4_access_to_access(u32 nfs4_access)
@@ -3658,12 +3657,10 @@ nfsd4_process_open2(struct svc_rqst *rqstp, struct svc_fh *current_fh, struct nf
   */
  fp = find_or_add_file(ino, open->op_file);
  if (fp != open->op_file) {
-  status = nfs4_check_open(fp, open, &stp);
-  if (status)
-   goto out;
   status = nfs4_check_deleg(cl, open, &dp);
   if (status)
    goto out;
+  stp = nfsd4_find_existing_open(fp, open);
  } else {
   open->op_file = NULL;
   status = nfserr_bad_stateid;
-- 
1.7.1