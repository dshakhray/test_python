From 79def41e226a0cf6e6e74a216dc914f93ca86b88 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 13:17:34 -0400
Subject: [acpi] scan: not cache _SUN value in struct acpi_device_pnp

Message-id: <1411132654-23843-3-git-send-email-prarit@redhat.com>
Patchwork-id: 96405
O-Subject: [RHEL7.1 PATCH BZ 1140567 2/2] ACPI / scan: not cache _SUN value in struct acpi_device_pnp
Bugzilla: 1140567
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140567

commit a383b68d9fe9864c4d3b86f67ad6488f58136435
Author: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
Date:   Wed Sep 3 13:39:13 2014 +0900

    ACPI / scan: not cache _SUN value in struct acpi_device_pnp

    The _SUN device indentification object is not guaranteed to return
    the same value every time it is executed, so we should not cache its
    return value, but rather execute it every time as needed.  If it is
    cached, an incorrect stale value may be used in some situations.

    This issue was exposed by commit 202317a573b2 (ACPI / scan: Add
    acpi_device objects for all device nodes in the namespace).  Fix it
    by avoiding to cache the return value of _SUN.

    Fixes: 202317a573b2 (ACPI / scan: Add acpi_device objects for all device nodes in the namespace)
    Signed-off-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Cc: 3.14+ <stable@vger.kernel.org> # 3.14+
    [ rjw: Changelog ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Stefan Assmann <sassmann@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 1318b2b..8e7cbb8 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -566,8 +566,14 @@ static ssize_t
 acpi_device_sun_show(struct device *dev, struct device_attribute *attr,
        char *buf) {
  struct acpi_device *acpi_dev = to_acpi_device(dev);
+ acpi_status status;
+ unsigned long long sun;
+
+ status = acpi_evaluate_integer(acpi_dev->handle, "_SUN", NULL, &sun);
+ if (ACPI_FAILURE(status))
+  return -ENODEV;
 
- return sprintf(buf, "%lu\n", acpi_dev->pnp.sun);
+ return sprintf(buf, "%llu\n", sun);
 }
 static DEVICE_ATTR(sun, 0444, acpi_device_sun_show, NULL);
 
@@ -589,7 +595,6 @@ static int acpi_device_setup_files(struct acpi_device *dev)
 {
  struct acpi_buffer buffer = {ACPI_ALLOCATE_BUFFER, NULL};
  acpi_status status;
- unsigned long long sun;
  int result = 0;
 
  /*
@@ -630,14 +635,10 @@ static int acpi_device_setup_files(struct acpi_device *dev)
  if (dev->pnp.unique_id)
   result = device_create_file(&dev->dev, &dev_attr_uid);
 
- status = acpi_evaluate_integer(dev->handle, "_SUN", NULL, &sun);
- if (ACPI_SUCCESS(status)) {
-  dev->pnp.sun = (unsigned long)sun;
+ if (acpi_has_method(dev->handle, "_SUN")) {
   result = device_create_file(&dev->dev, &dev_attr_sun);
   if (result)
    goto end;
- } else {
-  dev->pnp.sun = (unsigned long)-1;
  }
 
  if (acpi_has_method(dev->handle, "_STA")) {
diff --git a/include/acpi/acpi_bus.h b/include/acpi/acpi_bus.h
index 18e26a4..a220de7 100644
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@ -202,7 +202,6 @@ struct acpi_device_pnp {
  acpi_device_name device_name; /* Driver-determined */
  acpi_device_class device_class; /*        "          */
  union acpi_object *str_obj; /* unicode string for _STR method */
- unsigned long sun;  /* _SUN */
 };
 
 #define acpi_device_bid(d) ((d)->pnp.bus_id)
-- 
1.7.1