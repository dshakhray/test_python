From 4bea1bd42997a063a1c0726e22be332bbbd687b0 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:06:57 -0400
Subject: [tools] perf/hists/tui: Count callchain rows separately

Message-id: <1410181752-25631-173-git-send-email-jolsa@redhat.com>
Patchwork-id: 91868
O-Subject: [PATCH RHEL7.1 BZ1134356 172/307] perf hists/tui: Count callchain rows separately
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit c3b789527b236873557f53740ceac47747e0e1cb
Author: Namhyung Kim <namhyung@kernel.org>
Date: Tue Apr 22 15:56:17 2014 +0900

description
===========
When TUI hist browser expands/collapses callchains it accounted number
of callchain nodes into total entries to show.  However this code
ignores filtering so that it can make the cursor go to out of screen.

Thanks to Jiri Olsa for pointing out a bug (and a fix) in the code.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/ui/browsers/hists.c b/tools/perf/ui/browsers/hists.c
index 886eee0..b0861e3 100644
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@ -27,6 +27,7 @@ struct hist_browser {
  bool       show_dso;
  float       min_pcnt;
  u64       nr_non_filtered_entries;
+ u64       nr_callchain_rows;
 };
 
 extern void hist_browser__init_hpp(void);
@@ -35,11 +36,27 @@ static int hists__browser_title(struct hists *hists, char *bf, size_t size,
     const char *ev_name);
 static void hist_browser__update_nr_entries(struct hist_browser *hb);
 
+static struct rb_node *hists__filter_entries(struct rb_node *nd,
+          struct hists *hists,
+          float min_pcnt);
+
 static bool hist_browser__has_filter(struct hist_browser *hb)
 {
  return hists__has_filter(hb->hists) || hb->min_pcnt;
 }
 
+static u32 hist_browser__nr_entries(struct hist_browser *hb)
+{
+ u32 nr_entries;
+
+ if (hist_browser__has_filter(hb))
+  nr_entries = hb->nr_non_filtered_entries;
+ else
+  nr_entries = hb->hists->nr_entries;
+
+ return nr_entries + hb->nr_callchain_rows;
+}
+
 static void hist_browser__refresh_dimensions(struct hist_browser *browser)
 {
  /* 3 == +/- toggle symbol before actual hist_entry rendering */
@@ -49,8 +66,14 @@ static void hist_browser__refresh_dimensions(struct hist_browser *browser)
 
 static void hist_browser__reset(struct hist_browser *browser)
 {
+ /*
+  * The hists__remove_entry_filter() already folds non-filtered
+  * entries so we can assume it has 0 callchain rows.
+  */
+ browser->nr_callchain_rows = 0;
+
  hist_browser__update_nr_entries(browser);
- browser->b.nr_entries = browser->nr_non_filtered_entries;
+ browser->b.nr_entries = hist_browser__nr_entries(browser);
  hist_browser__refresh_dimensions(browser);
  ui_browser__reset_index(&browser->b);
 }
@@ -205,14 +228,16 @@ static bool hist_browser__toggle_fold(struct hist_browser *browser)
   struct hist_entry *he = browser->he_selection;
 
   hist_entry__init_have_children(he);
-  browser->hists->nr_entries -= he->nr_rows;
+  browser->b.nr_entries -= he->nr_rows;
+  browser->nr_callchain_rows -= he->nr_rows;
 
   if (he->ms.unfolded)
    he->nr_rows = callchain__count_rows(&he->sorted_chain);
   else
    he->nr_rows = 0;
-  browser->hists->nr_entries += he->nr_rows;
-  browser->b.nr_entries = browser->hists->nr_entries;
+
+  browser->b.nr_entries += he->nr_rows;
+  browser->nr_callchain_rows += he->nr_rows;
 
   return true;
  }
@@ -287,23 +312,27 @@ static void hist_entry__set_folding(struct hist_entry *he, bool unfold)
   he->nr_rows = 0;
 }
 
-static void hists__set_folding(struct hists *hists, bool unfold)
+static void
+__hist_browser__set_folding(struct hist_browser *browser, bool unfold)
 {
  struct rb_node *nd;
+ struct hists *hists = browser->hists;
 
- hists->nr_entries = 0;
-
- for (nd = rb_first(&hists->entries); nd; nd = rb_next(nd)) {
+ for (nd = rb_first(&hists->entries);
+      (nd = hists__filter_entries(nd, hists, browser->min_pcnt)) != NULL;
+      nd = rb_next(nd)) {
   struct hist_entry *he = rb_entry(nd, struct hist_entry, rb_node);
   hist_entry__set_folding(he, unfold);
-  hists->nr_entries += 1 + he->nr_rows;
+  browser->nr_callchain_rows += he->nr_rows;
  }
 }
 
 static void hist_browser__set_folding(struct hist_browser *browser, bool unfold)
 {
- hists__set_folding(browser->hists, unfold);
- browser->b.nr_entries = browser->hists->nr_entries;
+ browser->nr_callchain_rows = 0;
+ __hist_browser__set_folding(browser, unfold);
+
+ browser->b.nr_entries = hist_browser__nr_entries(browser);
  /* Go to the start, we may be way after valid entries after a collapse */
  ui_browser__reset_index(&browser->b);
 }
@@ -325,10 +354,7 @@ static int hist_browser__run(struct hist_browser *browser, const char *ev_name,
  int delay_secs = hbt ? hbt->refresh : 0;
 
  browser->b.entries = &browser->hists->entries;
- if (hist_browser__has_filter(browser))
-  browser->b.nr_entries = browser->nr_non_filtered_entries;
- else
-  browser->b.nr_entries = browser->hists->nr_entries;
+ browser->b.nr_entries = hist_browser__nr_entries(browser);
 
  hist_browser__refresh_dimensions(browser);
  hists__browser_title(browser->hists, title, sizeof(title), ev_name);
@@ -345,13 +371,10 @@ static int hist_browser__run(struct hist_browser *browser, const char *ev_name,
    u64 nr_entries;
    hbt->timer(hbt->arg);
 
-   if (hist_browser__has_filter(browser)) {
+   if (hist_browser__has_filter(browser))
     hist_browser__update_nr_entries(browser);
-    nr_entries = browser->nr_non_filtered_entries;
-   } else {
-    nr_entries = browser->hists->nr_entries;
-   }
 
+   nr_entries = hist_browser__nr_entries(browser);
    ui_browser__update_nr_entries(&browser->b, nr_entries);
 
    if (browser->hists->stats.nr_lost_warned !=
-- 
1.7.1