From 69859b19d2dd4c426561a19e241142c9bae1a6b5 Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Mon, 1 Sep 2014 20:15:24 -0400
Subject: [powerpc] perf: Add macros for defining event fields & formats

Message-id: <1409602534-23951-6-git-send-email-gduarte@redhat.com>
Patchwork-id: 90119
O-Subject: [RHEL7.1 PATCH BZ 947159 05/15] powerpc/perf: Add macros for defining event fields & formats
Bugzilla: 947159
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=947159
Upstream Status: 7b43c67950f0985be257f5fb7d656557e24d92d9

commit 7b43c67950f0985be257f5fb7d656557e24d92d9
Author: Cody P Schafer <cody@linux.vnet.ibm.com>
Date:   Fri Mar 14 16:00:40 2014 +1100

    powerpc/perf: Add macros for defining event fields & formats

    Add two macros which generate functions to extract the relevent bits
    from event->attr.config{,1,2}.

    EVENT_DEFINE_RANGE() defines an accessor for a range of bits in the
    event, as well as a "max" function that gives the maximum value of the
    field based on the bit width.

    EVENT_DEFINE_RANGE_FORMAT() defines the accessor & max routine and also
    a format attribute for use in the PMU's attr_groups.

    Signed-off-by: Cody P Schafer <cody@linux.vnet.ibm.com>
    [mpe: move to powerpc, ugly but descriptive macro names]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/perf/hv-common.h b/arch/powerpc/perf/hv-common.h
index 7e615bd..5d79cec 100644
--- a/arch/powerpc/perf/hv-common.h
+++ b/arch/powerpc/perf/hv-common.h
@@ -1,6 +1,7 @@
 #ifndef LINUX_POWERPC_PERF_HV_COMMON_H_
 #define LINUX_POWERPC_PERF_HV_COMMON_H_
 
+#include <linux/perf_event.h>
 #include <linux/types.h>
 
 struct hv_perf_caps {
@@ -14,4 +15,22 @@ struct hv_perf_caps {
 
 unsigned long hv_perf_caps_get(struct hv_perf_caps *caps);
 
+
+#define EVENT_DEFINE_RANGE_FORMAT(name, attr_var, bit_start, bit_end) \
+PMU_FORMAT_ATTR(name, #attr_var ":" #bit_start "-" #bit_end);  \
+EVENT_DEFINE_RANGE(name, attr_var, bit_start, bit_end)
+
+#define EVENT_DEFINE_RANGE(name, attr_var, bit_start, bit_end) \
+static u64 event_get_##name##_max(void)     \
+{         \
+ BUILD_BUG_ON((bit_start > bit_end)    \
+      || (bit_end >= (sizeof(1ull) * 8)));  \
+ return (((1ull << (bit_end - bit_start)) - 1) << 1) + 1; \
+}         \
+static u64 event_get_##name(struct perf_event *event)   \
+{         \
+ return (event->attr.attr_var >> (bit_start)) &   \
+  event_get_##name##_max();    \
+}
+
 #endif
-- 
1.7.1