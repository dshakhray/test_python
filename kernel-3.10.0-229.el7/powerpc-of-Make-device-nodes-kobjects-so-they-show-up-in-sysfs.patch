From ba29683a8b5a79fc40cb02b1680f5fc4f8b20036 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:10:21 -0400
Subject: [powerpc] of: Make device nodes kobjects so they show up in sysfs

Message-id: <1410545655-205645-393-git-send-email-dzickus@redhat.com>
Patchwork-id: 94610
O-Subject: [RHEL7 PATCH 392/626] of: Make device nodes kobjects so they show up in sysfs
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 75b57ecf9d1d1e17d099ab13b8f48e6e038676be
Author: Grant Likely <grant.likely@linaro.org>
Date:   Thu Feb 20 18:02:11 2014 +0000

    of: Make device nodes kobjects so they show up in sysfs

    Device tree nodes are already treated as objects, and we already want to
    expose them to userspace which is done using the /proc filesystem today.
    Right now the kernel has to do a lot of work to keep the /proc view in
    sync with the in-kernel representation. If device_nodes are switched to
    be kobjects then the device tree code can be a whole lot simpler. It
    also turns out that switching to using /sysfs from /proc results in
    smaller code and data size, and the userspace ABI won't change if
    /proc/device-tree symlinks to /sys/firmware/devicetree/base.

    v7: Add missing sysfs_bin_attr_init()
    v6: Add __of_add_property() early init fixes from Pantelis
    v5: Rename firmware/ofw to firmware/devicetree
        Fix updating property values in sysfs
    v4: Fixed build error on Powerpc
        Fixed handling of dynamic nodes on powerpc
    v3: Fixed handling of duplicate attribute and child node names
    v2: switch to using sysfs bin_attributes which solve the problem of
        reporting incorrect property size.

    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Tested-by: Sascha Hauer <s.hauer@pengutronix.de>
    Cc: Rob Herring <rob.herring@calxeda.com>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Nathan Fontenot <nfont@linux.vnet.ibm.com>
    Cc: Pantelis Antoniou <panto@antoniou-consulting.com>

kabi reason: struct device_node is defined opaque for include/linux/device.h
As a result all the kabi protected function calls in device.h will not utilize
or need any of the device_node info.  If any 3rd party wants to access this
info, they will need to include of.h and use those accessory functions, which
are not kabi protected.

In addition, all the memory seems to be allocated on the kernel side and
references to struct device_node through pointers, making kabi breakage seem
unlikely.
---
 create mode 100644 Documentation/ABI/testing/sysfs-firmware-ofw

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/ABI/testing/sysfs-firmware-ofw b/Documentation/ABI/testing/sysfs-firmware-ofw
new file mode 100644
index 0000000..f562b18
--- /dev/null
+++ b/Documentation/ABI/testing/sysfs-firmware-ofw
@@ -0,0 +1,28 @@
+What:  /sys/firmware/devicetree/*
+Date:  November 2013
+Contact: Grant Likely <grant.likely@linaro.org>
+Description:
+  When using OpenFirmware or a Flattened Device Tree to enumerate
+  hardware, the device tree structure will be exposed in this
+  directory.
+
+  It is possible for multiple device-tree directories to exist.
+  Some device drivers use a separate detached device tree which
+  have no attachment to the system tree and will appear in a
+  different subdirectory under /sys/firmware/devicetree.
+
+  Userspace must not use the /sys/firmware/devicetree/base
+  path directly, but instead should follow /proc/device-tree
+  symlink. It is possible that the absolute path will change
+  in the future, but the symlink is the stable ABI.
+
+  The /proc/device-tree symlink replaces the devicetree /proc
+  filesystem support, and has largely the same semantics and
+  should be compatible with existing userspace.
+
+  The contents of /sys/firmware/devicetree/ is a
+  hierarchy of directories, one per device tree node. The
+  directory name is the resolved path component name (node
+  name plus address). Properties are represented as files
+  in the directory. The contents of each file is the exact
+  binary data from the device tree.
diff --git a/arch/arm/boot/dts/testcases/tests-phandle.dtsi b/arch/arm/boot/dts/testcases/tests-phandle.dtsi
index 0007d3c..788a4c2 100644
--- a/arch/arm/boot/dts/testcases/tests-phandle.dtsi
+++ b/arch/arm/boot/dts/testcases/tests-phandle.dtsi
@@ -1,6 +1,9 @@
 
 / {
  testcase-data {
+  security-password = "password";
+  duplicate-name = "duplicate";
+  duplicate-name { };
   phandle-tests {
    provider0: provider0 {
     #phandle-cells = <0>;
diff --git a/arch/powerpc/platforms/pseries/dlpar.c b/arch/powerpc/platforms/pseries/dlpar.c
index a8fe5aa..022b38e 100644
--- a/arch/powerpc/platforms/pseries/dlpar.c
+++ b/arch/powerpc/platforms/pseries/dlpar.c
@@ -11,7 +11,6 @@
  */
 
 #include <linux/kernel.h>
-#include <linux/kref.h>
 #include <linux/notifier.h>
 #include <linux/spinlock.h>
 #include <linux/cpu.h>
@@ -87,7 +86,6 @@ static struct device_node *dlpar_parse_cc_node(struct cc_workarea *ccwa,
  }
 
  of_node_set_flag(dn, OF_DYNAMIC);
- kref_init(&dn->kref);
 
  return dn;
 }
diff --git a/arch/powerpc/platforms/pseries/reconfig.c b/arch/powerpc/platforms/pseries/reconfig.c
index f93cdf5..0435bb6 100644
--- a/arch/powerpc/platforms/pseries/reconfig.c
+++ b/arch/powerpc/platforms/pseries/reconfig.c
@@ -12,7 +12,6 @@
  */
 
 #include <linux/kernel.h>
-#include <linux/kref.h>
 #include <linux/notifier.h>
 #include <linux/proc_fs.h>
 #include <linux/slab.h>
@@ -70,7 +69,6 @@ static int pSeries_reconfig_add_node(const char *path, struct property *proplist
 
  np->properties = proplist;
  of_node_set_flag(np, OF_DYNAMIC);
- kref_init(&np->kref);
 
  np->parent = derive_parent(path);
  if (IS_ERR(np->parent)) {
diff --git a/arch/powerpc/sysdev/msi_bitmap.c b/arch/powerpc/sysdev/msi_bitmap.c
index 0968b66..8ba6042 100644
--- a/arch/powerpc/sysdev/msi_bitmap.c
+++ b/arch/powerpc/sysdev/msi_bitmap.c
@@ -202,7 +202,7 @@ void __init test_of_node(void)
 
  /* There should really be a struct device_node allocator */
  memset(&of_node, 0, sizeof(of_node));
- kref_init(&of_node.kref);
+ kref_init(&of_node.kobj.kref);
  of_node.full_name = node_name;
 
  check(0 == msi_bitmap_alloc(&bmp, size, &of_node));
diff --git a/drivers/of/base.c b/drivers/of/base.c
index 1d10b4e..232c236 100644
--- a/drivers/of/base.c
+++ b/drivers/of/base.c
@@ -22,6 +22,7 @@
 #include <linux/of.h>
 #include <linux/spinlock.h>
 #include <linux/slab.h>
+#include <linux/string.h>
 #include <linux/proc_fs.h>
 
 #include "of_private.h"
@@ -33,6 +34,12 @@ EXPORT_SYMBOL(of_allnodes);
 struct device_node *of_chosen;
 struct device_node *of_aliases;
 
+static struct kset *of_kset;
+
+/*
+ * Used to protect the of_aliases; but also overloaded to hold off addition of
+ * nodes to sysfs
+ */
 DEFINE_MUTEX(of_aliases_mutex);
 
 /* use when traversing tree through the allnext, child, sibling,
@@ -83,14 +90,14 @@ EXPORT_SYMBOL(of_n_size_cells);
 struct device_node *of_node_get(struct device_node *node)
 {
  if (node)
-  kref_get(&node->kref);
+  kobject_get(&node->kobj);
  return node;
 }
 EXPORT_SYMBOL(of_node_get);
 
-static inline struct device_node *kref_to_device_node(struct kref *kref)
+static inline struct device_node *kobj_to_device_node(struct kobject *kobj)
 {
- return container_of(kref, struct device_node, kref);
+ return container_of(kobj, struct device_node, kobj);
 }
 
 /**
@@ -100,16 +107,15 @@ static inline struct device_node *kref_to_device_node(struct kref *kref)
  * In of_node_put() this function is passed to kref_put()
  * as the destructor.
  */
-static void of_node_release(struct kref *kref)
+static void of_node_release(struct kobject *kobj)
 {
- struct device_node *node = kref_to_device_node(kref);
+ struct device_node *node = kobj_to_device_node(kobj);
  struct property *prop = node->properties;
 
  /* We should never be releasing nodes that haven't been detached. */
  if (!of_node_check_flag(node, OF_DETACHED)) {
   pr_err("ERROR: Bad of_node_put() on %s\n", node->full_name);
   dump_stack();
-  kref_init(&node->kref);
   return;
  }
 
@@ -142,11 +148,140 @@ static void of_node_release(struct kref *kref)
 void of_node_put(struct device_node *node)
 {
  if (node)
-  kref_put(&node->kref, of_node_release);
+  kobject_put(&node->kobj);
 }
 EXPORT_SYMBOL(of_node_put);
+#else
+static void of_node_release(struct kobject *kobj)
+{
+ /* Without CONFIG_OF_DYNAMIC, no nodes gets freed */
+}
 #endif /* CONFIG_OF_DYNAMIC */
 
+struct kobj_type of_node_ktype = {
+ .release = of_node_release,
+};
+
+static ssize_t of_node_property_read(struct file *filp, struct kobject *kobj,
+    struct bin_attribute *bin_attr, char *buf,
+    loff_t offset, size_t count)
+{
+ struct property *pp = container_of(bin_attr, struct property, attr);
+ return memory_read_from_buffer(buf, count, &offset, pp->value, pp->length);
+}
+
+static const char *safe_name(struct kobject *kobj, const char *orig_name)
+{
+ const char *name = orig_name;
+ struct kernfs_node *kn;
+ int i = 0;
+
+ /* don't be a hero. After 16 tries give up */
+ while (i < 16 && (kn = sysfs_get_dirent(kobj->sd, name))) {
+  sysfs_put(kn);
+  if (name != orig_name)
+   kfree(name);
+  name = kasprintf(GFP_KERNEL, "%s#%i", orig_name, ++i);
+ }
+
+ if (name != orig_name)
+  pr_warn("device-tree: Duplicate name in %s, renamed to \"%s\"\n",
+   kobject_name(kobj), name);
+ return name;
+}
+
+static int __of_add_property_sysfs(struct device_node *np, struct property *pp)
+{
+ int rc;
+
+ /* Important: Don't leak passwords */
+ bool secure = strncmp(pp->name, "security-", 9) == 0;
+
+ sysfs_bin_attr_init(&pp->attr);
+ pp->attr.attr.name = safe_name(&np->kobj, pp->name);
+ pp->attr.attr.mode = secure ? S_IRUSR : S_IRUGO;
+ pp->attr.size = secure ? 0 : pp->length;
+ pp->attr.read = of_node_property_read;
+
+ rc = sysfs_create_bin_file(&np->kobj, &pp->attr);
+ WARN(rc, "error adding attribute %s to node %s\n", pp->name, np->full_name);
+ return rc;
+}
+
+static int __of_node_add(struct device_node *np)
+{
+ const char *name;
+ struct property *pp;
+ int rc;
+
+ np->kobj.kset = of_kset;
+ if (!np->parent) {
+  /* Nodes without parents are new top level trees */
+  rc = kobject_add(&np->kobj, NULL, safe_name(&of_kset->kobj, "base"));
+ } else {
+  name = safe_name(&np->parent->kobj, kbasename(np->full_name));
+  if (!name || !name[0])
+   return -EINVAL;
+
+  rc = kobject_add(&np->kobj, &np->parent->kobj, "%s", name);
+ }
+ if (rc)
+  return rc;
+
+ for_each_property_of_node(np, pp)
+  __of_add_property_sysfs(np, pp);
+
+ return 0;
+}
+
+int of_node_add(struct device_node *np)
+{
+ int rc = 0;
+ kobject_init(&np->kobj, &of_node_ktype);
+ mutex_lock(&of_aliases_mutex);
+ if (of_kset)
+  rc = __of_node_add(np);
+ mutex_unlock(&of_aliases_mutex);
+ return rc;
+}
+
+#if defined(CONFIG_OF_DYNAMIC)
+static void of_node_remove(struct device_node *np)
+{
+ struct property *pp;
+
+ for_each_property_of_node(np, pp)
+  sysfs_remove_bin_file(&np->kobj, &pp->attr);
+
+ kobject_del(&np->kobj);
+}
+#endif
+
+static int __init of_init(void)
+{
+ struct device_node *np;
+
+ /* Create the kset, and register existing nodes */
+ mutex_lock(&of_aliases_mutex);
+ of_kset = kset_create_and_add("devicetree", NULL, firmware_kobj);
+ if (!of_kset) {
+  mutex_unlock(&of_aliases_mutex);
+  return -ENOMEM;
+ }
+ for_each_of_allnodes(np)
+  __of_node_add(np);
+ mutex_unlock(&of_aliases_mutex);
+
+#if !defined(CONFIG_PROC_DEVICETREE)
+ /* Symlink to the new tree when PROC_DEVICETREE is disabled */
+ if (of_allnodes)
+  proc_symlink("device-tree", NULL, "/sys/firmware/devicetree/base");
+#endif /* CONFIG_PROC_DEVICETREE */
+
+ return 0;
+}
+core_initcall(of_init);
+
 static struct property *__of_find_property(const struct device_node *np,
         const char *name, int *lenp)
 {
@@ -1314,6 +1449,14 @@ int of_add_property(struct device_node *np, struct property *prop)
  }
  *next = prop;
  raw_spin_unlock_irqrestore(&devtree_lock, flags);
+ if (rc)
+  return rc;
+
+ /* at early boot, bail hear and defer setup to of_init() */
+ if (!of_kset)
+  return 0;
+
+ __of_add_property_sysfs(np, prop);
 
 #ifdef CONFIG_PROC_DEVICETREE
  /* try to add to proc as well if it was initialized */
@@ -1361,6 +1504,12 @@ int of_remove_property(struct device_node *np, struct property *prop)
  if (!found)
   return -ENODEV;
 
+ /* at early boot, bail hear and defer setup to of_init() */
+ if (!of_kset)
+  return 0;
+
+ sysfs_remove_bin_file(&np->kobj, &prop->attr);
+
 #ifdef CONFIG_PROC_DEVICETREE
  /* try to remove the proc node as well */
  if (np->pde)
@@ -1411,6 +1560,13 @@ int of_update_property(struct device_node *np, struct property *newprop)
   next = &(*next)->next;
  }
  raw_spin_unlock_irqrestore(&devtree_lock, flags);
+ if (rc)
+  return rc;
+
+ /* Update the sysfs attribute */
+ if (oldprop)
+  sysfs_remove_bin_file(&np->kobj, &oldprop->attr);
+ __of_add_property_sysfs(np, newprop);
 
  if (!found)
   return -ENODEV;
@@ -1490,6 +1646,7 @@ int of_attach_node(struct device_node *np)
  of_allnodes = np;
  raw_spin_unlock_irqrestore(&devtree_lock, flags);
 
+ of_node_add(np);
  of_add_proc_dt_entry(np);
  return 0;
 }
@@ -1562,6 +1719,7 @@ int of_detach_node(struct device_node *np)
  raw_spin_unlock_irqrestore(&devtree_lock, flags);
 
  of_remove_proc_dt_entry(np);
+ of_node_remove(np);
  return rc;
 }
 #endif /* defined(CONFIG_OF_DYNAMIC) */
diff --git a/drivers/of/fdt.c b/drivers/of/fdt.c
index 1187737..9f3bba3 100644
--- a/drivers/of/fdt.c
+++ b/drivers/of/fdt.c
@@ -232,7 +232,6 @@ static unsigned long unflatten_dt_node(struct boot_param_header *blob,
     dad->next->sibling = np;
    dad->next = np;
   }
-  kref_init(&np->kref);
  }
  /* process properties */
  while (1) {
@@ -327,6 +326,8 @@ static unsigned long unflatten_dt_node(struct boot_param_header *blob,
    np->name = "<NULL>";
   if (!np->type)
    np->type = "<NULL>";
+
+  of_node_add(np);
  }
  while (tag == OF_DT_BEGIN_NODE || tag == OF_DT_NOP) {
   if (tag == OF_DT_NOP)
diff --git a/drivers/of/pdt.c b/drivers/of/pdt.c
index 37b56fd..2d9d7e1 100644
--- a/drivers/of/pdt.c
+++ b/drivers/of/pdt.c
@@ -180,8 +180,6 @@ static struct device_node * __init of_pdt_create_node(phandle node,
  of_pdt_incr_unique_id(dp);
  dp->parent = parent;
 
- kref_init(&dp->kref);
-
  dp->name = of_pdt_get_one_property(node, "name");
  dp->type = of_pdt_get_one_property(node, "device_type");
  dp->phandle = node;
@@ -216,6 +214,7 @@ static struct device_node * __init of_pdt_build_tree(struct device_node *parent,
   *nextp = &dp->allnext;
 
   dp->full_name = of_pdt_build_full_name(dp);
+  of_node_add(dp);
 
   dp->child = of_pdt_build_tree(dp,
     of_pdt_prom_ops->getchild(node), nextp);
@@ -246,6 +245,7 @@ void __init of_pdt_build_devicetree(phandle root_node, struct of_pdt_ops *ops)
  of_allnodes->path_component_name = "";
 #endif
  of_allnodes->full_name = "/";
+ of_node_add(of_allnodes);
 
  nextp = &of_allnodes->allnext;
  of_allnodes->child = of_pdt_build_tree(of_allnodes,
diff --git a/include/linux/of.h b/include/linux/of.h
index 1fd08ca..2fad9a4 100644
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -18,7 +18,7 @@
 #include <linux/types.h>
 #include <linux/bitops.h>
 #include <linux/errno.h>
-#include <linux/kref.h>
+#include <linux/kobject.h>
 #include <linux/mod_devicetable.h>
 #include <linux/spinlock.h>
 #include <linux/topology.h>
@@ -37,6 +37,9 @@ struct property {
  struct property *next;
  unsigned long _flags;
  unsigned int unique_id;
+#ifndef __GENKSYMS__
+ struct bin_attribute attr;
+#endif
 };
 
 #if defined(CONFIG_SPARC)
@@ -57,7 +60,7 @@ struct device_node {
  struct device_node *next; /* next device of same type */
  struct device_node *allnext; /* next in list of all nodes */
  struct proc_dir_entry *pde; /* this node's proc directory */
- struct kref kref;
+ struct kref kref;
  unsigned long _flags;
  void *data;
 #if defined(CONFIG_SPARC)
@@ -65,6 +68,9 @@ struct device_node {
  unsigned int unique_id;
  struct of_irq_controller *irq_trans;
 #endif
+#ifndef __GENKSYMS__
+ struct kobject kobj;
+#endif
 };
 
 #define MAX_PHANDLE_ARGS 8
@@ -74,6 +80,8 @@ struct of_phandle_args {
  uint32_t args[MAX_PHANDLE_ARGS];
 };
 
+extern int of_node_add(struct device_node *node);
+
 #ifdef CONFIG_OF_DYNAMIC
 extern struct device_node *of_node_get(struct device_node *node);
 extern void of_node_put(struct device_node *node);
@@ -165,6 +173,8 @@ static inline const char *of_node_full_name(const struct device_node *np)
  return np ? np->full_name : "<no-node>";
 }
 
+#define for_each_of_allnodes(dn) \
+ for (dn = of_allnodes; dn; dn = dn->allnext)
 extern struct device_node *of_find_node_by_name(struct device_node *from,
  const char *name);
 #define for_each_node_by_name(dn, name) \
-- 
1.7.1