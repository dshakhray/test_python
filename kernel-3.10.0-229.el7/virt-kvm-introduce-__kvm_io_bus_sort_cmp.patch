From ad4e531b8e3135b341b85902be59dd77d6c6c2f5 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:36:39 -0400
Subject: [virt] kvm: introduce __kvm_io_bus_sort_cmp

Message-id: <1406040016-3289-5-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86083
O-Subject: [RHEL7 PATCH v2 004/221] KVM: introduce __kvm_io_bus_sort_cmp
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

kvm_io_bus_sort_cmp is used also directly, not just as a callback for
sort and bsearch.  In these cases, it is handy to have a type-safe
variant.  This patch introduces such a variant, __kvm_io_bus_sort_cmp,
and uses it throughout kvm_main.c.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit a343c9b7673e2228bc8a9ac65aae42140f6f9977)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index a0d794a..bbe06eb 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -2837,11 +2837,9 @@ static void kvm_io_bus_destroy(struct kvm_io_bus *bus)
  kfree(bus);
 }
 
-static int kvm_io_bus_sort_cmp(const void *p1, const void *p2)
+static inline int __kvm_io_bus_sort_cmp(const struct kvm_io_range *r1,
+                                        const struct kvm_io_range *r2)
 {
- const struct kvm_io_range *r1 = p1;
- const struct kvm_io_range *r2 = p2;
-
  if (r1->addr < r2->addr)
   return -1;
  if (r1->addr + r1->len > r2->addr + r2->len)
@@ -2849,6 +2847,11 @@ static int kvm_io_bus_sort_cmp(const void *p1, const void *p2)
  return 0;
 }
 
+static int kvm_io_bus_sort_cmp(const void *p1, const void *p2)
+{
+ return __kvm_io_bus_sort_cmp(p1, p2);
+}
+
 static int kvm_io_bus_insert_dev(struct kvm_io_bus *bus, struct kvm_io_device *dev,
      gpa_t addr, int len)
 {
@@ -2882,7 +2885,7 @@ static int kvm_io_bus_get_first_dev(struct kvm_io_bus *bus,
 
  off = range - bus->range;
 
- while (off > 0 && kvm_io_bus_sort_cmp(&key, &bus->range[off-1]) == 0)
+ while (off > 0 && __kvm_io_bus_sort_cmp(&key, &bus->range[off-1]) == 0)
   off--;
 
  return off;
@@ -2898,7 +2901,7 @@ static int __kvm_io_bus_write(struct kvm_io_bus *bus,
   return -EOPNOTSUPP;
 
  while (idx < bus->dev_count &&
-  kvm_io_bus_sort_cmp(range, &bus->range[idx]) == 0) {
+  __kvm_io_bus_sort_cmp(range, &bus->range[idx]) == 0) {
   if (!kvm_iodevice_write(bus->range[idx].dev, range->addr,
      range->len, val))
    return idx;
@@ -2942,7 +2945,7 @@ int kvm_io_bus_write_cookie(struct kvm *kvm, enum kvm_bus bus_idx, gpa_t addr,
 
  /* First try the device referenced by cookie. */
  if ((cookie >= 0) && (cookie < bus->dev_count) &&
-     (kvm_io_bus_sort_cmp(&range, &bus->range[cookie]) == 0))
+     (__kvm_io_bus_sort_cmp(&range, &bus->range[cookie]) == 0))
   if (!kvm_iodevice_write(bus->range[cookie].dev, addr, len,
      val))
    return cookie;
@@ -2964,7 +2967,7 @@ static int __kvm_io_bus_read(struct kvm_io_bus *bus, struct kvm_io_range *range,
   return -EOPNOTSUPP;
 
  while (idx < bus->dev_count &&
-  kvm_io_bus_sort_cmp(range, &bus->range[idx]) == 0) {
+  __kvm_io_bus_sort_cmp(range, &bus->range[idx]) == 0) {
   if (!kvm_iodevice_read(bus->range[idx].dev, range->addr,
            range->len, val))
    return idx;
@@ -3008,7 +3011,7 @@ int kvm_io_bus_read_cookie(struct kvm *kvm, enum kvm_bus bus_idx, gpa_t addr,
 
  /* First try the device referenced by cookie. */
  if ((cookie >= 0) && (cookie < bus->dev_count) &&
-     (kvm_io_bus_sort_cmp(&range, &bus->range[cookie]) == 0))
+     (__kvm_io_bus_sort_cmp(&range, &bus->range[cookie]) == 0))
   if (!kvm_iodevice_read(bus->range[cookie].dev, addr, len,
            val))
    return cookie;
-- 
1.7.1