From ad922854f6db39407320c1264414c5121ebfa9d1 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 4 Nov 2014 16:59:30 -0500
Subject: [usb] ehci: unlink QHs even after the controller has stopped

Message-id: <1415120371-197190-2-git-send-email-dzickus@redhat.com>
Patchwork-id: 99384
O-Subject: [RHEL7 PATCH 1/2] USB: EHCI: unlink QHs even after the controller has stopped
Bugzilla: 1151491
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1151491

commit 7312b5ddd47fee2356baa78c5516ef8e04eed452
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Sep 17 11:23:54 2014 -0400

    USB: EHCI: unlink QHs even after the controller has stopped

    Old code in ehci-hcd tries to expedite disabling endpoints after the
    controller has stopped, by destroying the endpoint's associated QH
    without first unlinking the QH.  This was necessary back when the
    driver wasn't so careful about keeping track of the controller's
    state.

    But now we are careful about it, and the driver knows that when the
    controller isn't running, no unlinking delay is needed.  Furthermore,
    skipping the unlink step will trigger a BUG() in qh_destroy() when the
    preceding QH is released, because the link pointer will be non-NULL.

    Removing the lines that skip the unlinking step and go directly to
    QH_STATE_IDLE fixes the problem.

    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Joe Lawrence <joe.lawrence@stratus.com>
    Tested-by: Joe Lawrence <joe.lawrence@stratus.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/ehci-hcd.c b/drivers/usb/host/ehci-hcd.c
index 18e55f9..ee4aa8f 100644
--- a/drivers/usb/host/ehci-hcd.c
+++ b/drivers/usb/host/ehci-hcd.c
@@ -965,8 +965,6 @@ rescan:
  }
 
  qh->exception = 1;
- if (ehci->rh_state < EHCI_RH_RUNNING)
-  qh->qh_state = QH_STATE_IDLE;
  switch (qh->qh_state) {
  case QH_STATE_LINKED:
   WARN_ON(!list_empty(&qh->qtd_list));
-- 
1.7.1