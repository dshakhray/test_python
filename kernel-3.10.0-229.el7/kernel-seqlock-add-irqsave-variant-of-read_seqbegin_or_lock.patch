From 8dc92829cc454f5c3b2e1830b97273b0dcf0ea08 Mon Sep 17 00:00:00 2001
From: Rik van Riel <riel@redhat.com>
Date: Fri, 12 Sep 2014 13:22:01 -0400
Subject: [kernel] seqlock: add irqsave variant of read_seqbegin_or_lock

Message-id: <20140912092201.3942a6db@annuminas.surriel.com>
Patchwork-id: 93944
O-Subject: [RHEL7 PATCH -v2 8/7] seqlock: add irqsave variant of read_seqbegin_or_lock
Bugzilla: 1120307
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

These two patches are confirmed to fix the issue Stanislaw found,
and are on their way upstream.

Fixes bug 1120307

There are cases where read_seqbegin_or_lock needs to block irqs,
because the seqlock in question nests inside a lock that is also
be taken from irq context.

Add read_seqbegin_or_lock_irqsave and done_seqretry_irqrestore, which
are almost identical to read_seqbegin_or_lock and done_seqretry.

Signed-off-by: Rik van Riel <riel@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/seqlock.h b/include/linux/seqlock.h
index 0a2cf98..e5a9798 100644
--- a/include/linux/seqlock.h
+++ b/include/linux/seqlock.h
@@ -371,4 +371,21 @@ read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
  spin_unlock_irqrestore(&sl->lock, flags);
 }
 
+static inline unsigned long read_seqbegin_or_lock_irqsave(seqlock_t *lock,
+         int *seq)
+{
+ unsigned long flags = 0;
+ if (!(*seq & 1)) /* Even */
+  *seq = read_seqbegin(lock);
+ else   /* Odd */
+  read_seqlock_excl_irqsave(lock, flags);
+ return flags;
+}
+
+static inline void done_seqretry_irqrestore(seqlock_t *lock, int seq,
+         unsigned long flags)
+{
+ if (seq & 1)
+  read_sequnlock_excl_irqrestore(lock, flags);
+}
 #endif /* __LINUX_SEQLOCK_H */
-- 
1.7.1