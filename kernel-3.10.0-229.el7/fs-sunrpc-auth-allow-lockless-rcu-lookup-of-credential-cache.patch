From 759e87fd809837bfe91c7af8ab75b1aee3a935a5 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:34 -0400
Subject: [fs] sunrpc/auth: allow lockless (rcu) lookup of credential cache

Message-id: <1411050057-12417-72-git-send-email-steved@redhat.com>
Patchwork-id: 96250
O-Subject: [RHEL7.1 PATCH 71/94] sunrpc/auth: allow lockless (rcu) lookup of credential cache.
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: NeilBrown <neilb@suse.de>

The new flag RPCAUTH_LOOKUP_RCU to credential lookup avoids locking,
does not take a reference on the returned credential, and returns
-ECHILD if a simple lookup was not possible.

The returned value can only be used within an rcu_read_lock protected
region.

The main user of this is the new rpc_lookup_cred_nonblock() which
returns a pointer to the current credential which is only rcu-safe (no
ref-count held), and might return -ECHILD if allocation was required.

Signed-off-by: NeilBrown <neilb@suse.de>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: bd95608053b7f7813351b0defc0e3e7ef8cf2803
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/sunrpc/auth.h b/include/linux/sunrpc/auth.h
index c683b9a..8e03007 100644
--- a/include/linux/sunrpc/auth.h
+++ b/include/linux/sunrpc/auth.h
@@ -103,6 +103,7 @@ struct rpc_auth_create_args {
 
 /* Flags for rpcauth_lookupcred() */
 #define RPCAUTH_LOOKUP_NEW  0x01 /* Accept an uninitialised cred */
+#define RPCAUTH_LOOKUP_RCU  0x02 /* lock-less lookup */
 
 /*
  * Client authentication ops
@@ -154,6 +155,7 @@ void   rpc_destroy_generic_auth(void);
 void    rpc_destroy_authunix(void);
 
 struct rpc_cred * rpc_lookup_cred(void);
+struct rpc_cred * rpc_lookup_cred_nonblock(void);
 struct rpc_cred * rpc_lookup_machine_cred(const char *service_name);
 int   rpcauth_register(const struct rpc_authops *);
 int   rpcauth_unregister(const struct rpc_authops *);
diff --git a/net/sunrpc/auth.c b/net/sunrpc/auth.c
index 5211dcf..1d84887 100644
--- a/net/sunrpc/auth.c
+++ b/net/sunrpc/auth.c
@@ -520,6 +520,12 @@ rpcauth_lookup_credcache(struct rpc_auth *auth, struct auth_cred * acred,
  hlist_for_each_entry_rcu(entry, &cache->hashtable[nr], cr_hash) {
   if (!entry->cr_ops->crmatch(acred, entry, flags))
    continue;
+  if (flags & RPCAUTH_LOOKUP_RCU) {
+   if (test_bit(RPCAUTH_CRED_HASHED, &entry->cr_flags) &&
+       !test_bit(RPCAUTH_CRED_NEW, &entry->cr_flags))
+    cred = entry;
+   break;
+  }
   spin_lock(&cache->lock);
   if (test_bit(RPCAUTH_CRED_HASHED, &entry->cr_flags) == 0) {
    spin_unlock(&cache->lock);
@@ -534,6 +540,9 @@ rpcauth_lookup_credcache(struct rpc_auth *auth, struct auth_cred * acred,
  if (cred != NULL)
   goto found;
 
+ if (flags & RPCAUTH_LOOKUP_RCU)
+  return ERR_PTR(-ECHILD);
+
  new = auth->au_ops->crcreate(auth, acred, flags);
  if (IS_ERR(new)) {
   cred = new;
@@ -583,10 +592,14 @@ rpcauth_lookupcred(struct rpc_auth *auth, int flags)
  memset(&acred, 0, sizeof(acred));
  acred.uid = cred->fsuid;
  acred.gid = cred->fsgid;
- acred.group_info = get_group_info(((struct cred *)cred)->group_info);
+ if (flags & RPCAUTH_LOOKUP_RCU)
+  acred.group_info = rcu_dereference(cred->group_info);
+ else
+  acred.group_info = get_group_info(((struct cred *)cred)->group_info);
 
  ret = auth->au_ops->lookup_cred(auth, &acred, flags);
- put_group_info(acred.group_info);
+ if (!(flags & RPCAUTH_LOOKUP_RCU))
+  put_group_info(acred.group_info);
  return ret;
 }
 
diff --git a/net/sunrpc/auth_generic.c b/net/sunrpc/auth_generic.c
index ed04869..6f6b829 100644
--- a/net/sunrpc/auth_generic.c
+++ b/net/sunrpc/auth_generic.c
@@ -38,6 +38,12 @@ struct rpc_cred *rpc_lookup_cred(void)
 }
 EXPORT_SYMBOL_GPL(rpc_lookup_cred);
 
+struct rpc_cred *rpc_lookup_cred_nonblock(void)
+{
+ return rpcauth_lookupcred(&generic_auth, RPCAUTH_LOOKUP_RCU);
+}
+EXPORT_SYMBOL_GPL(rpc_lookup_cred_nonblock);
+
 /*
  * Public call interface for looking up machine creds.
  */
diff --git a/net/sunrpc/auth_null.c b/net/sunrpc/auth_null.c
index f0ebe07..712c123 100644
--- a/net/sunrpc/auth_null.c
+++ b/net/sunrpc/auth_null.c
@@ -35,6 +35,8 @@ nul_destroy(struct rpc_auth *auth)
 static struct rpc_cred *
 nul_lookup_cred(struct rpc_auth *auth, struct auth_cred *acred, int flags)
 {
+ if (flags & RPCAUTH_LOOKUP_RCU)
+  return &null_cred;
  return get_rpccred(&null_cred);
 }
 
-- 
1.7.1