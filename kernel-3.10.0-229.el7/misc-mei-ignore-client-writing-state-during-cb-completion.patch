From a294ceddfc5081fb1c4f29e4f50c34710a31ee4f Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 2 May 2014 14:37:49 -0400
Subject: [misc] mei: ignore client writing state during cb completion

Message-id: <1399041470-21330-77-git-send-email-prarit@redhat.com>
Patchwork-id: 79364
O-Subject: [RHEL7.1 PATCH BZ 1088953 76/77] mei: ignore client writing state during cb completion
Bugzilla: 1088953
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit 34ec43661fe8f1977dd0f05353302ae2ed10aabb
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Tue Apr 1 23:50:41 2014 +0300

    mei: ignore client writing state during cb completion

    Ignore client writing state during cb completion to fix a memory
    leak.

    When moving cbs to the completion list we should not look at
    writing_state as this state can be already overwritten by next
    write, the fact that a cb is on the write waiting list means
    that it was already written to the HW and we can safely complete it.

    Same pays for wait in poll handler, we do not have to check the state
    wake is done after completion list processing.

    Cc: stable@vger.kernel.org
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/interrupt.c b/drivers/misc/mei/interrupt.c
index 29b5af8..4e3cba6 100644
--- a/drivers/misc/mei/interrupt.c
+++ b/drivers/misc/mei/interrupt.c
@@ -455,8 +455,7 @@ int mei_irq_write_handler(struct mei_device *dev, struct mei_cl_cb *cmpl_list)
 
   cl->status = 0;
   list_del(&cb->list);
-  if (MEI_WRITING == cl->writing_state &&
-      cb->fop_type == MEI_FOP_WRITE &&
+  if (cb->fop_type == MEI_FOP_WRITE &&
       cl != &dev->iamthif_cl) {
    cl_dbg(dev, cl, "MEI WRITE COMPLETE\n");
    cl->writing_state = MEI_WRITE_COMPLETE;
diff --git a/drivers/misc/mei/main.c b/drivers/misc/mei/main.c
index 69ad2d7..642d622 100644
--- a/drivers/misc/mei/main.c
+++ b/drivers/misc/mei/main.c
@@ -667,8 +667,7 @@ static unsigned int mei_poll(struct file *file, poll_table *wait)
   goto out;
  }
 
- if (MEI_WRITE_COMPLETE == cl->writing_state)
-  mask |= (POLLIN | POLLRDNORM);
+ mask |= (POLLIN | POLLRDNORM);
 
 out:
  mutex_unlock(&dev->device_lock);
-- 
1.7.1