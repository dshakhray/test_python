From 3717b6863ab84a3c4952b4aab28c06f28841e31a Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:36:01 -0500
Subject: [fs] overlayfs: barriers for opening upper-layer directory

Message-id: <20141125163600.18115.44620.stgit@warthog.procyon.org.uk>
Patchwork-id: 100941
O-Subject: [PATCH 41/47] overlayfs: barriers for opening upper-layer directory
Bugzilla: 985875
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Al Viro <viro@zeniv.linux.org.uk>

make sure that
 a) all stores done by opening struct file don't leak past storing
the reference in od->upperfile
 b) the lockless side has read dependency barrier

Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Original-commit: d45f00ae43e63eff1b3d79df20610ae1ef645ebd
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/overlayfs/readdir.c b/fs/overlayfs/readdir.c
index 7ec7f2a..8f25758 100644
--- a/fs/overlayfs/readdir.c
+++ b/fs/overlayfs/readdir.c
@@ -471,12 +471,13 @@ static int ovl_dir_fsync(struct file *file, loff_t start, loff_t end,
  if (!od->is_upper && ovl_path_type(dentry) == OVL_PATH_MERGE) {
   struct inode *inode = file_inode(file);
 
-  realfile = od->upperfile;
+  realfile =lockless_dereference(od->upperfile);
   if (!realfile) {
    struct path upperpath;
 
    ovl_path_upper(dentry, &upperpath);
    realfile = ovl_path_open(&upperpath, O_RDONLY);
+   smp_mb__before_spinlock();
    mutex_lock(&inode->i_mutex);
    if (!od->upperfile) {
     if (IS_ERR(realfile)) {
-- 
1.7.1