From 0e57bd4172194d63990bd9eaa4484fe439081c69 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 12:25:55 -0400
Subject: [ethernet] tg3: Implement the SIOCGHWTSTAMP ioctl

Message-id: <1410179173-14304-2-git-send-email-ivecera@redhat.com>
Patchwork-id: 91674
O-Subject: [RHEL7.1 PATCH 01/19] tg3: Implement the SIOCGHWTSTAMP ioctl
Bugzilla: 1088637
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: #1088637

Upstream commit(s):
commit 7260899bde50cbe84bdf0a15b5642e2c3b03db32
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Mon Nov 18 22:59:43 2013 +0000

    tg3: Implement the SIOCGHWTSTAMP ioctl

    While we're doing this, fix the error code for SIOCSHWTSTAMP ioctl on
    non-timestamping hardware.

    Compile-tested only.

    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index 43b5b58..aecbc37 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -13723,14 +13723,13 @@ static void tg3_self_test(struct net_device *dev, struct ethtool_test *etest,
 
 }
 
-static int tg3_hwtstamp_ioctl(struct net_device *dev,
-         struct ifreq *ifr, int cmd)
+static int tg3_hwtstamp_set(struct net_device *dev, struct ifreq *ifr)
 {
  struct tg3 *tp = netdev_priv(dev);
  struct hwtstamp_config stmpconf;
 
  if (!tg3_flag(tp, PTP_CAPABLE))
-  return -EINVAL;
+  return -EOPNOTSUPP;
 
  if (copy_from_user(&stmpconf, ifr->ifr_data, sizeof(stmpconf)))
   return -EFAULT;
@@ -13811,6 +13810,67 @@ static int tg3_hwtstamp_ioctl(struct net_device *dev,
   -EFAULT : 0;
 }
 
+static int tg3_hwtstamp_get(struct net_device *dev, struct ifreq *ifr)
+{
+ struct tg3 *tp = netdev_priv(dev);
+ struct hwtstamp_config stmpconf;
+
+ if (!tg3_flag(tp, PTP_CAPABLE))
+  return -EOPNOTSUPP;
+
+ stmpconf.flags = 0;
+ stmpconf.tx_type = (tg3_flag(tp, TX_TSTAMP_EN) ?
+       HWTSTAMP_TX_ON : HWTSTAMP_TX_OFF);
+
+ switch (tp->rxptpctl) {
+ case 0:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_NONE;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V1_EN | TG3_RX_PTP_CTL_ALL_V1_EVENTS:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V1_L4_EVENT;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V1_EN | TG3_RX_PTP_CTL_SYNC_EVNT:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V1_L4_SYNC;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V1_EN | TG3_RX_PTP_CTL_DELAY_REQ:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V2_EN | TG3_RX_PTP_CTL_ALL_V2_EVENTS:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V2_EVENT;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V2_L2_EN | TG3_RX_PTP_CTL_ALL_V2_EVENTS:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V2_L2_EVENT;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V2_L4_EN | TG3_RX_PTP_CTL_ALL_V2_EVENTS:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V2_L4_EVENT;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V2_EN | TG3_RX_PTP_CTL_SYNC_EVNT:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V2_SYNC;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V2_L2_EN | TG3_RX_PTP_CTL_SYNC_EVNT:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V2_L2_SYNC;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V2_L4_EN | TG3_RX_PTP_CTL_SYNC_EVNT:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V2_L4_SYNC;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V2_EN | TG3_RX_PTP_CTL_DELAY_REQ:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V2_DELAY_REQ;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V2_L2_EN | TG3_RX_PTP_CTL_DELAY_REQ:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ;
+  break;
+ case TG3_RX_PTP_CTL_RX_PTP_V2_L4_EN | TG3_RX_PTP_CTL_DELAY_REQ:
+  stmpconf.rx_filter = HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ;
+  break;
+ default:
+  WARN_ON_ONCE(1);
+  return -ERANGE;
+ }
+
+ return copy_to_user(ifr->ifr_data, &stmpconf, sizeof(stmpconf)) ?
+  -EFAULT : 0;
+}
+
 static int tg3_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 {
  struct mii_ioctl_data *data = if_mii(ifr);
@@ -13864,7 +13924,10 @@ static int tg3_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
   return err;
 
  case SIOCSHWTSTAMP:
-  return tg3_hwtstamp_ioctl(dev, ifr, cmd);
+  return tg3_hwtstamp_set(dev, ifr);
+
+ case SIOCGHWTSTAMP:
+  return tg3_hwtstamp_get(dev, ifr);
 
  default:
   /* do nothing */
-- 
1.7.1