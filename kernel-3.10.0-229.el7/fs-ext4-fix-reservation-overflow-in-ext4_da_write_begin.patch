From 0445ee6d994fb98663b47fa980499cfe160814f5 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Wed, 29 Oct 2014 16:34:41 -0400
Subject: [fs] ext4: fix reservation overflow in ext4_da_write_begin

Message-id: <1414600485-1929-52-git-send-email-lczerner@redhat.com>
Patchwork-id: 98569
O-Subject: [RHEL 7.1 PATCH v2 51/55] ext4: fix reservation overflow in ext4_da_write_begin
Bugzilla: 1156096
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Eric Sandeen <sandeen@redhat.com>

BZ 1156096
https://bugzilla.redhat.com/show_bug.cgi?id=1156096

BREW 8169722
https://brewweb.devel.redhat.com/taskinfo?taskID=8169722

Upstream commit 0ff8947fc5f700172b37cbca811a38eb9cb81e08

 Delalloc write journal reservations only reserve 1 credit,
 to update the inode if necessary.  However, it may happen
 once in a filesystem's lifetime that a file will cross
 the 2G threshold, and require the LARGE_FILE feature to
 be set in the superblock as well, if it was not set already.

 This overruns the transaction reservation, and can be
 demonstrated simply on any ext4 filesystem without the LARGE_FILE
 feature already set:

 dd if=/dev/zero of=testfile bs=1 seek=2147483646 count=1 \
  conv=notrunc of=testfile
 sync
 dd if=/dev/zero of=testfile bs=1 seek=2147483647 count=1 \
  conv=notrunc of=testfile

 leads to:

 EXT4-fs: ext4_do_update_inode:4296: aborting transaction: error 28 in __ext4_handle_dirty_super
 EXT4-fs error (device loop0) in ext4_do_update_inode:4301: error 28
 EXT4-fs error (device loop0) in ext4_reserve_inode_write:4757: Readonly filesystem
 EXT4-fs error (device loop0) in ext4_dirty_inode:4876: error 28
 EXT4-fs error (device loop0) in ext4_da_write_end:2685: error 28

 Adjust the number of credits based on whether the flag is
 already set, and whether the current write may extend past the
 LARGE_FILE limit.

 Signed-off-by: Eric Sandeen <sandeen@redhat.com>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Reviewed-by: Andreas Dilger <adilger@dilger.ca>
 Cc: stable@vger.kernel.org
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 341164a..ffa46ae 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -2510,6 +2510,20 @@ static int ext4_nonda_switch(struct super_block *sb)
  return 0;
 }
 
+/* We always reserve for an inode update; the superblock could be there too */
+static int ext4_da_write_credits(struct inode *inode, loff_t pos, unsigned len)
+{
+ if (likely(EXT4_HAS_RO_COMPAT_FEATURE(inode->i_sb,
+    EXT4_FEATURE_RO_COMPAT_LARGE_FILE)))
+  return 1;
+
+ if (pos + len <= 0x7fffffffULL)
+  return 1;
+
+ /* We might need to update the superblock to set LARGE_FILE */
+ return 2;
+}
+
 static int ext4_da_write_begin(struct file *file, struct address_space *mapping,
           loff_t pos, unsigned len, unsigned flags,
           struct page **pagep, void **fsdata)
@@ -2560,7 +2574,8 @@ retry_grab:
   * of file which has an already mapped buffer.
   */
 retry_journal:
- handle = ext4_journal_start(inode, EXT4_HT_WRITE_PAGE, 1);
+ handle = ext4_journal_start(inode, EXT4_HT_WRITE_PAGE,
+    ext4_da_write_credits(inode, pos, len));
  if (IS_ERR(handle)) {
   page_cache_release(page);
   return PTR_ERR(handle);
-- 
1.7.1