From d118f012a3fee1c09233802e8d00b2ee2947feca Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:26:03 -0400
Subject: [md] always set MD_RECOVERY_INTR when interrupting a reshape thread

Message-id: <1409563584-9000-62-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 90005
O-Subject: [RHEL7.1 PATCH 61/82] md: always set MD_RECOVERY_INTR when interrupting a reshape thread.
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: NeilBrown <neilb@suse.de>

Commit 8313b8e57f55b15e5b7f7fc5d1630bbf686a9a97
   md: fix problem when adding device to read-only array with bitmap.

added a called to md_reap_sync_thread() which cause a reshape thread
to be interrupted (in particular, it could cause md_thread() to never even
call md_do_sync()).
However it didn't set MD_RECOVERY_INTR so ->finish_reshape() would not
know that the reshape didn't complete.

This only happens when mddev->ro is set and normally reshape threads
don't run in that situation.  But raid5 and raid10 can start a reshape
thread during "run" is the array is in the middle of a reshape.
They do this even if ->ro is set.

So it is best to set MD_RECOVERY_INTR before abortingg the
sync thread, just in case.

Though it rare for this to trigger a problem it can cause data corruption
because the reshape isn't finished properly.
So it is suitable for any stable which the offending commit was applied to.
(3.2 or later)

Fixes: 8313b8e57f55b15e5b7f7fc5d1630bbf686a9a97
Cc: stable@vger.kernel.org (3.2+)
Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit 2ac295a544dcae9299cba13ce250419117ae7fd1)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/md.c b/drivers/md/md.c
index 8745249..037a460 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -7826,6 +7826,7 @@ void md_check_recovery(struct mddev *mddev)
    /* There is no thread, but we need to call
     * ->spare_active and clear saved_raid_disk
     */
+   set_bit(MD_RECOVERY_INTR, &mddev->recovery);
    md_reap_sync_thread(mddev);
    clear_bit(MD_RECOVERY_NEEDED, &mddev->recovery);
    goto unlock;
-- 
1.7.1