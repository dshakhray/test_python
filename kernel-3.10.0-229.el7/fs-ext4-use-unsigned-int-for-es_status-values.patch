From 5fc3c368437b672424f3820f20569ee9cf3ca15d Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:26 -0400
Subject: [fs] ext4: use unsigned int for es_status values

Message-id: <1414058125-4183-53-git-send-email-lczerner@redhat.com>
Patchwork-id: 98147
O-Subject: [RHEL 7.1 PATCH v2 052/171] ext4: use unsigned int for es_status values
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 3be78c73179c9347bdc0a92b2898063bd2300ff7

 Don't use an unsigned long long for the es_status flags; this requires
 that we pass 64-bit values around which is painful on 32-bit systems.
 Instead pass the extent status flags around using the low 4 bits of an
 unsigned int, and shift them into place when we are reading or writing
 es_pblk.

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Reviewed-by: Zheng Liu <wenqing.lz@taobao.com>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents_status.c b/fs/ext4/extents_status.c
index 91cb110..ded2615 100644
--- a/fs/ext4/extents_status.c
+++ b/fs/ext4/extents_status.c
@@ -263,7 +263,7 @@ void ext4_es_find_delayed_extent_range(struct inode *inode,
  if (tree->cache_es) {
   es1 = tree->cache_es;
   if (in_range(lblk, es1->es_lblk, es1->es_len)) {
-   es_debug("%u cached by [%u/%u) %llu %llx\n",
+   es_debug("%u cached by [%u/%u) %llu %x\n",
      lblk, es1->es_lblk, es1->es_len,
      ext4_es_pblock(es1), ext4_es_status(es1));
    goto out;
@@ -641,13 +641,13 @@ out:
  */
 int ext4_es_insert_extent(struct inode *inode, ext4_lblk_t lblk,
      ext4_lblk_t len, ext4_fsblk_t pblk,
-     unsigned long long status)
+     unsigned int status)
 {
  struct extent_status newes;
  ext4_lblk_t end = lblk + len - 1;
  int err = 0;
 
- es_debug("add [%u/%u) %llu %llx to extent status tree of inode %lu\n",
+ es_debug("add [%u/%u) %llu %x to extent status tree of inode %lu\n",
    lblk, len, pblk, status, inode->i_ino);
 
  if (!len)
diff --git a/fs/ext4/extents_status.h b/fs/ext4/extents_status.h
index e936730..d72af84 100644
--- a/fs/ext4/extents_status.h
+++ b/fs/ext4/extents_status.h
@@ -29,16 +29,26 @@
 /*
  * These flags live in the high bits of extent_status.es_pblk
  */
-#define EXTENT_STATUS_WRITTEN (1ULL << 63)
-#define EXTENT_STATUS_UNWRITTEN (1ULL << 62)
-#define EXTENT_STATUS_DELAYED (1ULL << 61)
-#define EXTENT_STATUS_HOLE (1ULL << 60)
+#define ES_SHIFT 60
+
+#define EXTENT_STATUS_WRITTEN (1 << 3)
+#define EXTENT_STATUS_UNWRITTEN (1 << 2)
+#define EXTENT_STATUS_DELAYED (1 << 1)
+#define EXTENT_STATUS_HOLE (1 << 0)
 
 #define EXTENT_STATUS_FLAGS (EXTENT_STATUS_WRITTEN | \
      EXTENT_STATUS_UNWRITTEN | \
      EXTENT_STATUS_DELAYED | \
      EXTENT_STATUS_HOLE)
 
+#define ES_WRITTEN  (1ULL << 63)
+#define ES_UNWRITTEN  (1ULL << 62)
+#define ES_DELAYED  (1ULL << 61)
+#define ES_HOLE   (1ULL << 60)
+
+#define ES_MASK   (ES_WRITTEN | ES_UNWRITTEN | \
+     ES_DELAYED | ES_HOLE)
+
 struct ext4_sb_info;
 struct ext4_extent;
 
@@ -60,7 +70,7 @@ extern void ext4_es_init_tree(struct ext4_es_tree *tree);
 
 extern int ext4_es_insert_extent(struct inode *inode, ext4_lblk_t lblk,
      ext4_lblk_t len, ext4_fsblk_t pblk,
-     unsigned long long status);
+     unsigned int status);
 extern int ext4_es_remove_extent(struct inode *inode, ext4_lblk_t lblk,
      ext4_lblk_t len);
 extern void ext4_es_find_delayed_extent_range(struct inode *inode,
@@ -72,32 +82,32 @@ extern int ext4_es_zeroout(struct inode *inode, struct ext4_extent *ex);
 
 static inline int ext4_es_is_written(struct extent_status *es)
 {
- return (es->es_pblk & EXTENT_STATUS_WRITTEN) != 0;
+ return (es->es_pblk & ES_WRITTEN) != 0;
 }
 
 static inline int ext4_es_is_unwritten(struct extent_status *es)
 {
- return (es->es_pblk & EXTENT_STATUS_UNWRITTEN) != 0;
+ return (es->es_pblk & ES_UNWRITTEN) != 0;
 }
 
 static inline int ext4_es_is_delayed(struct extent_status *es)
 {
- return (es->es_pblk & EXTENT_STATUS_DELAYED) != 0;
+ return (es->es_pblk & ES_DELAYED) != 0;
 }
 
 static inline int ext4_es_is_hole(struct extent_status *es)
 {
- return (es->es_pblk & EXTENT_STATUS_HOLE) != 0;
+ return (es->es_pblk & ES_HOLE) != 0;
 }
 
-static inline ext4_fsblk_t ext4_es_status(struct extent_status *es)
+static inline unsigned int ext4_es_status(struct extent_status *es)
 {
- return (es->es_pblk & EXTENT_STATUS_FLAGS);
+ return es->es_pblk >> ES_SHIFT;
 }
 
 static inline ext4_fsblk_t ext4_es_pblock(struct extent_status *es)
 {
- return (es->es_pblk & ~EXTENT_STATUS_FLAGS);
+ return es->es_pblk & ~ES_MASK;
 }
 
 static inline void ext4_es_store_pblock(struct extent_status *es,
@@ -105,19 +115,16 @@ static inline void ext4_es_store_pblock(struct extent_status *es,
 {
  ext4_fsblk_t block;
 
- block = (pb & ~EXTENT_STATUS_FLAGS) |
-  (es->es_pblk & EXTENT_STATUS_FLAGS);
+ block = (pb & ~ES_MASK) | (es->es_pblk & ES_MASK);
  es->es_pblk = block;
 }
 
 static inline void ext4_es_store_status(struct extent_status *es,
-     unsigned long long status)
+     unsigned int status)
 {
- ext4_fsblk_t block;
-
- block = (status & EXTENT_STATUS_FLAGS) |
-  (es->es_pblk & ~EXTENT_STATUS_FLAGS);
- es->es_pblk = block;
+ es->es_pblk = (((ext4_fsblk_t)
+   (status & EXTENT_STATUS_FLAGS) << ES_SHIFT) |
+         (es->es_pblk & ~ES_MASK));
 }
 
 extern void ext4_es_register_shrinker(struct ext4_sb_info *sbi);
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 2630c8f..9ad4a6d 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -553,7 +553,7 @@ int ext4_map_blocks(handle_t *handle, struct inode *inode,
  }
  if (retval > 0) {
   int ret;
-  unsigned long long status;
+  unsigned int status;
 
   if (unlikely(retval != map->m_len)) {
    ext4_warning(inode->i_sb,
@@ -653,7 +653,7 @@ found:
 
  if (retval > 0) {
   int ret;
-  unsigned long long status;
+  unsigned int status;
 
   if (unlikely(retval != map->m_len)) {
    ext4_warning(inode->i_sb,
@@ -1634,7 +1634,7 @@ add_delayed:
   set_buffer_delay(bh);
  } else if (retval > 0) {
   int ret;
-  unsigned long long status;
+  unsigned int status;
 
   if (unlikely(retval != map->m_len)) {
    ext4_warning(inode->i_sb,
diff --git a/include/trace/events/ext4.h b/include/trace/events/ext4.h
index d2310af..51bee7b 100644
--- a/include/trace/events/ext4.h
+++ b/include/trace/events/ext4.h
@@ -64,10 +64,10 @@ struct extent_status;
  { EXT4_FREE_BLOCKS_NOFREE_LAST_CLUSTER, "LAST_CLUSTER" })
 
 #define show_extent_status(status) __print_flags(status, "", \
- { (1 << 3), "W" },      \
- { (1 << 2), "U" },     \
- { (1 << 1), "D" },     \
- { (1 << 0), "H" })
+ { EXTENT_STATUS_WRITTEN, "W" },   \
+ { EXTENT_STATUS_UNWRITTEN, "U" },   \
+ { EXTENT_STATUS_DELAYED, "D" },   \
+ { EXTENT_STATUS_HOLE,  "H" })
 
 
 TRACE_EVENT(ext4_free_inode,
@@ -2212,7 +2212,7 @@ TRACE_EVENT(ext4_es_insert_extent,
   __entry->lblk = es->es_lblk;
   __entry->len = es->es_len;
   __entry->pblk = ext4_es_pblock(es);
-  __entry->status = ext4_es_status(es) >> 60;
+  __entry->status = ext4_es_status(es);
  ),
 
  TP_printk("dev %d,%d ino %lu es [%u/%u) mapped %llu status %s",
@@ -2289,7 +2289,7 @@ TRACE_EVENT(ext4_es_find_delayed_extent_range_exit,
   __entry->lblk = es->es_lblk;
   __entry->len = es->es_len;
   __entry->pblk = ext4_es_pblock(es);
-  __entry->status = ext4_es_status(es) >> 60;
+  __entry->status = ext4_es_status(es);
  ),
 
  TP_printk("dev %d,%d ino %lu es [%u/%u) mapped %llu status %s",
@@ -2343,7 +2343,7 @@ TRACE_EVENT(ext4_es_lookup_extent_exit,
   __entry->lblk = es->es_lblk;
   __entry->len = es->es_len;
   __entry->pblk = ext4_es_pblock(es);
-  __entry->status = ext4_es_status(es) >> 60;
+  __entry->status = ext4_es_status(es);
   __entry->found = found;
  ),
 
-- 
1.7.1