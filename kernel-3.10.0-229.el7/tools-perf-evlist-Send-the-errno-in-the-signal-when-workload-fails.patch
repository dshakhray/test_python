From 6dbaccb0aa60b1badcf4b45ab0950db60058e2df Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:51:45 -0400
Subject: [tools] perf/evlist: Send the errno in the signal when workload fails

Message-id: <1408953210-26343-218-git-send-email-jolsa@redhat.com>
Patchwork-id: 88887
O-Subject: [PATCH RHEL7.1 BZ1133083 217/322] perf evlist: Send the errno in the signal when workload fails
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit f33cbe72e6166b97d6fa2400cb00a885b47999d7
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Thu Jan 2 15:11:25 2014 -0300

description
===========
When a tool uses perf_evlist__start_workload and the supplied workload
fails (e.g.: its binary wasn't found), perror was being used to print
the error reason.

This is undesirable, as the caller may be a GUI, when it wants to have
total control of the error reporting process.

So move to using sigaction(SA_SIGINFO) + siginfo_t->sa_value->sival_int
to communicate to the caller the errno and let it print it using the UI
of its choosing.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6ec0cbc..f987d38 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -341,6 +341,22 @@ static void record__init_features(struct record *rec)
   perf_header__clear_feat(&session->header, HEADER_BRANCH_STACK);
 }
 
+static volatile int workload_exec_errno;
+
+/*
+ * perf_evlist__prepare_workload will send a SIGUSR1
+ * if the fork fails, since we asked by setting its
+ * want_signal to true.
+ */
+static void workload_exec_failed_signal(int signo, siginfo_t *info,
+     void *ucontext __maybe_unused)
+{
+ workload_exec_errno = info->si_value.sival_int;
+ done = 1;
+ signr = signo;
+ child_finished = 1;
+}
+
 static int __cmd_record(struct record *rec, int argc, const char **argv)
 {
  int err;
@@ -359,7 +375,6 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
  on_exit(record__sig_exit, rec);
  signal(SIGCHLD, sig_handler);
  signal(SIGINT, sig_handler);
- signal(SIGUSR1, sig_handler);
  signal(SIGTERM, sig_handler);
 
  session = perf_session__new(file, false, NULL);
@@ -492,8 +507,20 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
  /*
   * Let the child rip
   */
- if (forks)
+ if (forks) {
+  struct sigaction act = {
+   .sa_flags     = SA_SIGINFO,
+   .sa_sigaction = workload_exec_failed_signal,
+  };
+  /*
+   * perf_evlist__prepare_workload will, after we call
+   * perf_evlist__start_Workload, send a SIGUSR1 if the exec call
+   * fails, that we will catch in workload_signal to flip
+   * workload_exec_errno.
+    */
+  sigaction(SIGUSR1, &act, NULL);
   perf_evlist__start_workload(evsel_list);
+ }
 
  for (;;) {
   int hits = rec->samples;
@@ -521,6 +548,14 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
   }
  }
 
+ if (forks && workload_exec_errno) {
+  char msg[512];
+  const char *emsg = strerror_r(workload_exec_errno, msg, sizeof(msg));
+  pr_err("Workload failed: %s\n", emsg);
+  err = -1;
+  goto out_delete_session;
+ }
+
  if (quiet || signr == SIGUSR1)
   return 0;
 
diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
index 1c76c7a..9d0d52d 100644
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@ -58,6 +58,7 @@
 #include "util/thread.h"
 #include "util/thread_map.h"
 
+#include <signal.h>
 #include <stdlib.h>
 #include <sys/prctl.h>
 #include <locale.h>
@@ -509,16 +510,17 @@ static void handle_initial_delay(void)
  }
 }
 
-static volatile bool workload_exec_failed;
+static volatile int workload_exec_errno;
 
 /*
  * perf_evlist__prepare_workload will send a SIGUSR1
  * if the fork fails, since we asked by setting its
  * want_signal to true.
  */
-static void workload_exec_failed_signal(int signo __maybe_unused)
+static void workload_exec_failed_signal(int signo __maybe_unused, siginfo_t *info,
+     void *ucontext __maybe_unused)
 {
- workload_exec_failed = true;
+ workload_exec_errno = info->si_value.sival_int;
 }
 
 static int __run_perf_stat(int argc, const char **argv)
@@ -596,13 +598,17 @@ static int __run_perf_stat(int argc, const char **argv)
  clock_gettime(CLOCK_MONOTONIC, &ref_time);
 
  if (forks) {
+  struct sigaction act = {
+   .sa_flags     = SA_SIGINFO,
+   .sa_sigaction = workload_exec_failed_signal,
+  };
   /*
    * perf_evlist__prepare_workload will, after we call
    * perf_evlist__start_Workload, send a SIGUSR1 if the exec call
    * fails, that we will catch in workload_signal to flip
-   * workload_exec_failed.
+   * workload_exec_errno.
     */
-  signal(SIGUSR1, workload_exec_failed_signal);
+  sigaction(SIGUSR1, &act, NULL);
 
   perf_evlist__start_workload(evsel_list);
   handle_initial_delay();
@@ -615,8 +621,11 @@ static int __run_perf_stat(int argc, const char **argv)
   }
   wait(&status);
 
-  if (workload_exec_failed)
+  if (workload_exec_errno) {
+   const char *emsg = strerror_r(workload_exec_errno, msg, sizeof(msg));
+   pr_err("Workload failed: %s\n", emsg);
    return -1;
+  }
 
   if (WIFSIGNALED(status))
    psignal(WTERMSIG(status), argv[0]);
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index b08a7ec..4a30c87 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -1073,9 +1073,14 @@ int perf_evlist__prepare_workload(struct perf_evlist *evlist, struct target *tar
 
   execvp(argv[0], (char **)argv);
 
-  perror(argv[0]);
-  if (want_signal)
-   kill(getppid(), SIGUSR1);
+  if (want_signal) {
+   union sigval val;
+
+   val.sival_int = errno;
+   if (sigqueue(getppid(), SIGUSR1, val))
+    perror(argv[0]);
+  } else
+   perror(argv[0]);
   exit(-1);
  }
 
-- 
1.7.1