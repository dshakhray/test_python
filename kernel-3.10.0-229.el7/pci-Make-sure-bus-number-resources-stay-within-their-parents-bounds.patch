From c9653dba561465ae02869036ffecd0b1a8df0563 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Wed, 6 Aug 2014 03:46:33 -0400
Subject: [pci] Make sure bus number resources stay within their parents bounds

Message-id: <20140806034632.1438.29409.stgit@gir.stowe>
Patchwork-id: 87432
O-Subject: [RHEL7.1 PATCH 23/69] PCI: Make sure bus number resources stay within their parents bounds
Bugzilla: 1110896
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110896
Upstream Status: 1820ffdccb9b4398c5f0f70360edc68e039c3c72

commit 1820ffdccb9b4398c5f0f70360edc68e039c3c72
Author: Andreas Noever <andreas.noever@gmail.com>
Date:   Thu Jan 23 21:59:25 2014 +0100

    PCI: Make sure bus number resources stay within their parents bounds

    Right now we use 0xff for busn_res.end when probing and later reduce it to
    the value that is actually used. This does not work if a parent bridge has
    already a lower subordinate value. For example during hotplug of a new
    bridge below an already-configured bridge the following message is printed
    from pci_bus_insert_busn_res():

      pci_bus 0000:06: busn_res: can not insert [bus 06-ff] under [bus 05-9b] (c

    This patch clamps the bus range to that of the parent and also ensures that
    we do not exceed the parents range when assigning the final subordinate
    value.

    We also check that busses configured by the firmware fit into their parents
    bounds.

    [bhelgaas: reword dev_warn() and fix printk format warning]
    Signed-off-by: Andreas Noever <andreas.noever@gmail.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index fc19d73..0dac968 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -825,7 +825,7 @@ int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max, int pass)
  /* Check if setup is sensible at all */
  if (!pass &&
      (primary != bus->number || secondary <= bus->number ||
-      secondary > subordinate)) {
+      secondary > subordinate || subordinate > bus->busn_res.end)) {
   dev_info(&dev->dev, "bridge configuration invalid ([bus %02x-%02x]), reconfiguring\n",
     secondary, subordinate);
   broken = 1;
@@ -897,7 +897,8 @@ int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max, int pass)
    child = pci_add_new_bus(bus, dev, max+1);
    if (!child)
     goto out;
-   pci_bus_insert_busn_res(child, max+1, 0xff);
+   pci_bus_insert_busn_res(child, max+1,
+      bus->busn_res.end);
   }
   max++;
   buses = (buses & 0xff000000)
@@ -970,6 +971,11 @@ int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max, int pass)
   /*
    * Set the subordinate bus number to its real value.
    */
+  if (max > bus->busn_res.end) {
+   dev_warn(&dev->dev, "max busn %02x is outside %pR\n",
+     max, &bus->busn_res);
+   max = bus->busn_res.end;
+  }
   pci_bus_update_busn_res_end(child, max);
   pci_write_config_byte(dev, PCI_SUBORDINATE_BUS, max);
  }
-- 
1.7.1