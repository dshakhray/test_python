From 7814e4f7254cc0aa5ff4ed461f62e00d829fa9ef Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Thu, 14 Aug 2014 14:42:26 -0400
Subject: [ethernet] e1000e: Add support for EEE in Sx states

Message-id: <1408027348-9610-33-git-send-email-jogreene@redhat.com>
Patchwork-id: 87728
O-Subject: [RHEL7.1 PATCH 32/34] e1000e: Add support for EEE in Sx states
Bugzilla: 1091119
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: 1091119
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7834849
Tested: By me. Acceptable. See BZ for details

On I217 and newer hardware, EEE is enabled in the PHY by the software
when link is up and disabled by the hardware when link is lost.

To enable EEE in Sx (When both ends of the link support, and are enabled
for, EEE and 100Mbps), we need to disable LPLU and configure the PHY to
automatically enable EEE when link is up, since there will be no software
to complete the task.

To configure this in the PHY, the Auto Enable LPI bit in the Low Power
Idle GPIO Control register must be set.  For normal operation in S0, this
bit must be cleared.

Signed-off-by: Dave Ertman <david.m.ertman@intel.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit b4c1e6bf1c8522a6c6c8f29226a1e2cf126431df)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/e1000e/ich8lan.c b/drivers/net/ethernet/intel/e1000e/ich8lan.c
index 56d074d..b8a5ee1 100644
--- a/drivers/net/ethernet/intel/e1000e/ich8lan.c
+++ b/drivers/net/ethernet/intel/e1000e/ich8lan.c
@@ -4574,14 +4574,23 @@ void e1000_suspend_workarounds_ich8lan(struct e1000_hw *hw)
 
    /* Disable LPLU if both link partners support 100BaseT
     * EEE and 100Full is advertised on both ends of the
-    * link.
+    * link, and enable Auto Enable LPI since there will
+    * be no driver to enable LPI while in Sx.
     */
    if ((eee_advert & I82579_EEE_100_SUPPORTED) &&
        (dev_spec->eee_lp_ability &
         I82579_EEE_100_SUPPORTED) &&
-       (hw->phy.autoneg_advertised & ADVERTISE_100_FULL))
+       (hw->phy.autoneg_advertised & ADVERTISE_100_FULL)) {
     phy_ctrl &= ~(E1000_PHY_CTRL_D0A_LPLU |
            E1000_PHY_CTRL_NOND0A_LPLU);
+
+    /* Set Auto Enable LPI after link up */
+    e1e_rphy_locked(hw,
+      I217_LPI_GPIO_CTRL, &phy_reg);
+    phy_reg |= I217_LPI_GPIO_CTRL_AUTO_EN_LPI;
+    e1e_wphy_locked(hw,
+      I217_LPI_GPIO_CTRL, phy_reg);
+   }
   }
 
   /* For i217 Intel Rapid Start Technology support,
@@ -4678,6 +4687,11 @@ void e1000_resume_workarounds_pchlan(struct e1000_hw *hw)
    return;
   }
 
+  /* Clear Auto Enable LPI after link up */
+  e1e_rphy_locked(hw, I217_LPI_GPIO_CTRL, &phy_reg);
+  phy_reg &= ~I217_LPI_GPIO_CTRL_AUTO_EN_LPI;
+  e1e_wphy_locked(hw, I217_LPI_GPIO_CTRL, phy_reg);
+
   if (!(er32(FWSM) & E1000_ICH_FWSM_FW_VALID)) {
    /* Restore clear on SMB if no manageability engine
     * is present
diff --git a/drivers/net/ethernet/intel/e1000e/ich8lan.h b/drivers/net/ethernet/intel/e1000e/ich8lan.h
index 5515126..8066a49 100644
--- a/drivers/net/ethernet/intel/e1000e/ich8lan.h
+++ b/drivers/net/ethernet/intel/e1000e/ich8lan.h
@@ -217,6 +217,10 @@
 #define I217_INBAND_CTRL_LINK_STAT_TX_TIMEOUT_MASK 0x3F00
 #define I217_INBAND_CTRL_LINK_STAT_TX_TIMEOUT_SHIFT 8
 
+/* Low Power Idle GPIO Control */
+#define I217_LPI_GPIO_CTRL   PHY_REG(772, 18)
+#define I217_LPI_GPIO_CTRL_AUTO_EN_LPI  0x0800
+
 /* PHY Low Power Idle Control */
 #define I82579_LPI_CTRL    PHY_REG(772, 20)
 #define I82579_LPI_CTRL_100_ENABLE  0x2000
-- 
1.7.1