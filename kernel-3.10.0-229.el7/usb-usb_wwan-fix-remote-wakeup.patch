From 1464ca86b46dd2befa76e1e3721d84912eb16aad Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:08:43 -0400
Subject: [usb] usb_wwan: fix remote wakeup

Message-id: <1410887463-20674-452-git-send-email-dzickus@redhat.com>
Patchwork-id: 95604
O-Subject: [RHEL7 PATCH 451/591] USB: usb_wwan: fix remote wakeup
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit c1c0180340aa73e747744abd7e06239f261d4ade
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon May 26 19:23:20 2014 +0200

    USB: usb_wwan: fix remote wakeup

    Make sure that needs_remote_wake up is always set when there are open
    ports.

    Currently close() would unconditionally set needs_remote_wakeup to 0
    even though there might still be open ports. This could lead to blocked
    input and possibly dropped data on devices that do not support remote
    wakeup (and which must therefore not be runtime suspended while open).

    Add an open_ports counter (protected by the susp_lock) and only clear
    needs_remote_wakeup when the last port is closed.

    Note that there are currently no multi-port drivers using the usb_wwan
    implementation.

    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/usb-wwan.h b/drivers/usb/serial/usb-wwan.h
index 684739b..aca45ef 100644
--- a/drivers/usb/serial/usb-wwan.h
+++ b/drivers/usb/serial/usb-wwan.h
@@ -39,6 +39,7 @@ struct usb_wwan_intf_private {
  spinlock_t susp_lock;
  unsigned int suspended:1;
  int in_flight;
+ unsigned int open_ports;
  int (*send_setup) (struct usb_serial_port *port);
  void *private;
 };
diff --git a/drivers/usb/serial/usb_wwan.c b/drivers/usb/serial/usb_wwan.c
index ab8c175..daaa5d7 100644
--- a/drivers/usb/serial/usb_wwan.c
+++ b/drivers/usb/serial/usb_wwan.c
@@ -411,9 +411,10 @@ int usb_wwan_open(struct tty_struct *tty, struct usb_serial_port *port)
  if (intfdata->send_setup)
   intfdata->send_setup(port);
 
- serial->interface->needs_remote_wakeup = 1;
  spin_lock_irq(&intfdata->susp_lock);
  portdata->opened = 1;
+ if (++intfdata->open_ports == 1)
+  serial->interface->needs_remote_wakeup = 1;
  spin_unlock_irq(&intfdata->susp_lock);
  /* this balances a get in the generic USB serial code */
  usb_autopm_put_interface(serial->interface);
@@ -448,6 +449,8 @@ void usb_wwan_close(struct usb_serial_port *port)
  /* Stop reading/writing urbs */
  spin_lock_irq(&intfdata->susp_lock);
  portdata->opened = 0;
+ if (--intfdata->open_ports == 0)
+  serial->interface->needs_remote_wakeup = 0;
  spin_unlock_irq(&intfdata->susp_lock);
 
  for (;;) {
@@ -466,7 +469,6 @@ void usb_wwan_close(struct usb_serial_port *port)
 
  /* balancing - important as an error cannot be handled*/
  usb_autopm_get_interface_no_resume(serial->interface);
- serial->interface->needs_remote_wakeup = 0;
 }
 EXPORT_SYMBOL(usb_wwan_close);
 
-- 
1.7.1