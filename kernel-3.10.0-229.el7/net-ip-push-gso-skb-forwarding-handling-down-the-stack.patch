From 63c24fb153a0bf61d1838867c724180099b4e517 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Sat, 14 Jun 2014 22:58:20 -0400
Subject: [net] ip: push gso skb forwarding handling down the stack

Message-id: <1402786701-27071-6-git-send-email-fwestpha@redhat.com>
Patchwork-id: 83973
O-Subject: [PATCH 5/6] [RHEL7.1 net] net: ip: push gso skb forwarding handling down the stack
Bugzilla: 1109214
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>

BZ: 1109214

due to lack f87c10a8aa1e82498c42d0335524d6ae7cf5a52b
('ipv4: introduce ip_dst_mtu_maybe_forward and protect forwarding path against pmtu spoofing')
in RHEL7, the test for IPSKB_FORWARDED flag in ip_finish_output_gso()
was removed (not set for forward path).

commit c7ba65d7b64984ff371cb5630b36af23506c50d5
Author: Florian Westphal <fw@strlen.de>
Date:   Mon May 5 15:00:43 2014 +0200

    net: ip: push gso skb forwarding handling down the stack

    Doing the segmentation in the forward path has one major drawback:

    When using virtio, we may process gso udp packets coming
    from host network stack.  In that case, netfilter POSTROUTING
    will see one packet with udp header followed by multiple ip
    fragments.

    Delay the segmentation and do it after POSTROUTING invocation
    to avoid this.

    Fixes: fe6cc55f3a9 ("net: ip, ipv6: handle gso skbs in forwarding path")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/ip_forward.c b/net/ipv4/ip_forward.c
index bd1c5ba..d4d2724 100644
--- a/net/ipv4/ip_forward.c
+++ b/net/ipv4/ip_forward.c
@@ -56,54 +56,6 @@ static bool ip_exceeds_mtu(const struct sk_buff *skb, unsigned int mtu)
  return true;
 }
 
-static bool ip_gso_exceeds_dst_mtu(const struct sk_buff *skb)
-{
- unsigned int mtu;
-
- if (skb->local_df || !skb_is_gso(skb))
-  return false;
-
- mtu = dst_mtu(skb_dst(skb));
-
- /* if seglen > mtu, do software segmentation for IP fragmentation on
-  * output.  DF bit cannot be set since ip_forward would have sent
-  * icmp error.
-  */
- return skb_gso_network_seglen(skb) > mtu;
-}
-
-/* called if GSO skb needs to be fragmented on forward */
-static int ip_forward_finish_gso(struct sk_buff *skb)
-{
- struct dst_entry *dst = skb_dst(skb);
- netdev_features_t features;
- struct sk_buff *segs;
- int ret = 0;
-
- features = netif_skb_dev_features(skb, dst->dev);
- segs = skb_gso_segment(skb, features & ~NETIF_F_GSO_MASK);
- if (IS_ERR(segs)) {
-  kfree_skb(skb);
-  return -ENOMEM;
- }
-
- consume_skb(skb);
-
- do {
-  struct sk_buff *nskb = segs->next;
-  int err;
-
-  segs->next = NULL;
-  err = dst_output(segs);
-
-  if (err && ret == 0)
-   ret = err;
-  segs = nskb;
- } while (segs);
-
- return ret;
-}
-
 static int ip_forward_finish(struct sk_buff *skb)
 {
  struct ip_options *opt = &(IPCB(skb)->opt);
@@ -114,9 +66,6 @@ static int ip_forward_finish(struct sk_buff *skb)
  if (unlikely(opt->optlen))
   ip_forward_options(skb);
 
- if (ip_gso_exceeds_dst_mtu(skb))
-  return ip_forward_finish_gso(skb);
-
  return dst_output(skb);
 }
 
diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index 7c3233e..04d3ba3 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -219,6 +219,46 @@ static inline int ip_skb_dst_mtu(struct sk_buff *skb)
         skb_dst(skb)->dev->mtu : dst_mtu(skb_dst(skb));
 }
 
+static int ip_finish_output_gso(struct sk_buff *skb)
+{
+ netdev_features_t features;
+ struct sk_buff *segs;
+ int ret = 0;
+
+ if (skb_gso_network_seglen(skb) <= ip_skb_dst_mtu(skb))
+  return ip_finish_output2(skb);
+
+ /* Slowpath -  GSO segment length is exceeding the dst MTU.
+  *
+  * This can happen in two cases:
+  * 1) TCP GRO packet, DF bit not set
+  * 2) skb arrived via virtio-net, we thus get TSO/GSO skbs directly
+  * from host network stack.
+  */
+ features = netif_skb_features(skb);
+ segs = skb_gso_segment(skb, features & ~NETIF_F_GSO_MASK);
+ if (IS_ERR(segs)) {
+  kfree_skb(skb);
+  return -ENOMEM;
+ }
+
+ consume_skb(skb);
+
+ do {
+  struct sk_buff *nskb = segs->next;
+  int err;
+
+  segs->next = NULL;
+  err = ip_fragment(segs, ip_finish_output2);
+
+  if (err && ret == 0)
+   ret = err;
+  segs = nskb;
+ } while (segs);
+
+ return ret;
+}
+
 static int ip_finish_output(struct sk_buff *skb)
 {
 #if defined(CONFIG_NETFILTER) && defined(CONFIG_XFRM)
@@ -228,10 +268,13 @@ static int ip_finish_output(struct sk_buff *skb)
   return dst_output(skb);
  }
 #endif
- if (skb->len > ip_skb_dst_mtu(skb) && !skb_is_gso(skb))
+ if (skb_is_gso(skb))
+  return ip_finish_output_gso(skb);
+
+ if (skb->len > ip_skb_dst_mtu(skb))
   return ip_fragment(skb, ip_finish_output2);
- else
-  return ip_finish_output2(skb);
+
+ return ip_finish_output2(skb);
 }
 
 int ip_mc_output(struct sk_buff *skb)
-- 
1.7.1