From 6ffa984fc97731ce2346fb89bec7be75e901a441 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 21:00:17 -0400
Subject: [fs] xfs: Fix rounding in xfs_alloc_fix_len()

Message-id: <1412888441-4181-24-git-send-email-sandeen@redhat.com>
Patchwork-id: 97346
O-Subject: [RHEL7.1 PATCH 23/47] [fs] xfs: Fix rounding in xfs_alloc_fix_len()
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit 30265117ee1e23fa91920f337a3ea91207f700dc
    Author: Jan Kara <jack@suse.cz>
    Date:   Fri Jun 6 16:06:37 2014 +1000

    xfs: Fix rounding in xfs_alloc_fix_len()

    Rounding in xfs_alloc_fix_len() is wrong. As the comment states, the
    result should be a number of a form (k*prod+mod) however due to sign
    mistake the result is different. As a result allocations on raid arrays
    could be misaligned in some cases.

    This also seems to fix occasional assertion failure:
     XFS_WANT_CORRUPTED_GOTO(rlen <= flen, error0)
    in xfs_alloc_ag_vextent_size().

    Also add an assertion that the result of xfs_alloc_fix_len() is of
    expected form.

    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_alloc.c b/fs/xfs/xfs_alloc.c
index c1cf6a3..1351a24 100644
--- a/fs/xfs/xfs_alloc.c
+++ b/fs/xfs/xfs_alloc.c
@@ -257,16 +257,14 @@ xfs_alloc_fix_len(
  k = rlen % args->prod;
  if (k == args->mod)
   return;
- if (k > args->mod) {
-  if ((int)(rlen = rlen - k - args->mod) < (int)args->minlen)
-   return;
- } else {
-  if ((int)(rlen = rlen - args->prod - (args->mod - k)) <
-      (int)args->minlen)
-   return;
- }
- ASSERT(rlen >= args->minlen);
- ASSERT(rlen <= args->maxlen);
+ if (k > args->mod)
+  rlen = rlen - (k - args->mod);
+ else
+  rlen = rlen - args->prod + (args->mod - k);
+ if ((int)rlen < (int)args->minlen)
+  return;
+ ASSERT(rlen >= args->minlen && rlen <= args->maxlen);
+ ASSERT(rlen % args->prod == args->mod);
  args->len = rlen;
 }
 
-- 
1.7.1