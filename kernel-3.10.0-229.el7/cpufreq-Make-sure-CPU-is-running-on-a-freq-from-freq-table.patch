From f5272aaf4d586a0b36626822849253ee00eb217f Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:04 -0400
Subject: [cpufreq] Make sure CPU is running on a freq from freq-table

Message-id: <1409235879-1283-91-git-send-email-prarit@redhat.com>
Patchwork-id: 89413
O-Subject: [RHEL7.1 PATCH BZ 1134639 090/185] cpufreq: Make sure CPU is running on a freq from freq-table
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit d3916691c90dfc9f08328d5cef8181e9ea508c55
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Dec 3 11:20:46 2013 +0530

    cpufreq: Make sure CPU is running on a freq from freq-table

    Sometimes boot loaders set CPU frequency to a value outside of frequency table
    present with cpufreq core. In such cases CPU might be unstable if it has to run
    on that frequency for long duration of time and so its better to set it to a
    frequency which is specified in freq-table. This also makes cpufreq stats
    inconsistent as cpufreq-stats would fail to register because current frequency
    of CPU isn't found in freq-table.

    Because we don't want this change to affect boot process badly, we go for the
    next freq which is >= policy->cur ('cur' must be set by now, otherwise we will
    end up setting freq to lowest of the table as 'cur' is initialized to zero).

    In case current frequency doesn't match any frequency from freq-table, we throw
    warnings to user, so that user can get this fixed in their bootloaders or
    freq-tables.

    Reported-by: Carlos Hernandez <ceh@ti.com>
    Reported-and-tested-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Also include define of CPUFREQ_NEED_INITIAL_FREQ_CHECK from commit
ae6b427.

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 25921a0..30f5107 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1067,6 +1067,46 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   }
  }
 
+ /*
+  * Sometimes boot loaders set CPU frequency to a value outside of
+  * frequency table present with cpufreq core. In such cases CPU might be
+  * unstable if it has to run on that frequency for long duration of time
+  * and so its better to set it to a frequency which is specified in
+  * freq-table. This also makes cpufreq stats inconsistent as
+  * cpufreq-stats would fail to register because current frequency of CPU
+  * isn't found in freq-table.
+  *
+  * Because we don't want this change to effect boot process badly, we go
+  * for the next freq which is >= policy->cur ('cur' must be set by now,
+  * otherwise we will end up setting freq to lowest of the table as 'cur'
+  * is initialized to zero).
+  *
+  * We are passing target-freq as "policy->cur - 1" otherwise
+  * __cpufreq_driver_target() would simply fail, as policy->cur will be
+  * equal to target-freq.
+  */
+ if ((cpufreq_driver->flags & CPUFREQ_NEED_INITIAL_FREQ_CHECK)
+     && has_target()) {
+  /* Are we running at unknown frequency ? */
+  ret = cpufreq_frequency_table_get_index(policy, policy->cur);
+  if (ret == -EINVAL) {
+   /* Warn user and fix it */
+   pr_warn("%s: CPU%d: Running at unlisted freq: %u KHz\n",
+    __func__, policy->cpu, policy->cur);
+   ret = __cpufreq_driver_target(policy, policy->cur - 1,
+    CPUFREQ_RELATION_L);
+
+   /*
+    * Reaching here after boot in a few seconds may not
+    * mean that system will remain stable at "unknown"
+    * frequency for longer duration. Hence, a BUG_ON().
+    */
+   BUG_ON(ret);
+   pr_warn("%s: CPU%d: Unlisted initial frequency changed to: %u KHz\n",
+    __func__, policy->cpu, policy->cur);
+  }
+ }
+
  /* related cpus should atleast have policy->cpus */
  cpumask_or(policy->related_cpus, policy->related_cpus, policy->cpus);
 
diff --git a/drivers/cpufreq/freq_table.c b/drivers/cpufreq/freq_table.c
index 3458d27..a8ac042 100644
--- a/drivers/cpufreq/freq_table.c
+++ b/drivers/cpufreq/freq_table.c
@@ -178,7 +178,29 @@ int cpufreq_frequency_table_target(struct cpufreq_policy *policy,
 }
 EXPORT_SYMBOL_GPL(cpufreq_frequency_table_target);
 
+int cpufreq_frequency_table_get_index(struct cpufreq_policy *policy,
+  unsigned int freq)
+{
+ struct cpufreq_frequency_table *table;
+ int i;
+
+ table = cpufreq_frequency_get_table(policy->cpu);
+ if (unlikely(!table)) {
+  pr_debug("%s: Unable to find frequency table\n", __func__);
+  return -ENOENT;
+ }
+
+ for (i = 0; table[i].frequency != CPUFREQ_TABLE_END; i++) {
+  if (table[i].frequency == freq)
+   return i;
+ }
+
+ return -EINVAL;
+}
+EXPORT_SYMBOL_GPL(cpufreq_frequency_table_get_index);
+
 static DEFINE_PER_CPU(struct cpufreq_frequency_table *, cpufreq_show_table);
+
 /**
  * show_available_freqs - show available frequencies for the specified CPU
  */
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index 9737ed0..41626be 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -291,6 +291,15 @@ struct cpufreq_driver {
  */
 #define CPUFREQ_ASYNC_NOTIFICATION  (1 << 4)
 
+/*
+ * Set by drivers which want cpufreq core to check if CPU is running at a
+ * frequency present in freq-table exposed by the driver. For these drivers if
+ * CPU is found running at an out of table freq, we will try to set it to a fre
+ * from the table. And if that fails, we will stop further boot process by
+ * issuing a BUG_ON().
+ */
+#define CPUFREQ_NEED_INITIAL_FREQ_CHECK (1 << 5)
+
 int cpufreq_register_driver(struct cpufreq_driver *driver_data);
 int cpufreq_unregister_driver(struct cpufreq_driver *driver_data);
 
@@ -451,6 +460,8 @@ int cpufreq_frequency_table_target(struct cpufreq_policy *policy,
        unsigned int target_freq,
        unsigned int relation,
        unsigned int *index);
+int cpufreq_frequency_table_get_index(struct cpufreq_policy *policy,
+  unsigned int freq);
 
 /* the following 3 funtions are for cpufreq core use only */
 struct cpufreq_frequency_table *cpufreq_frequency_get_table(unsigned int cpu);
-- 
1.7.1