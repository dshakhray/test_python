From 844a065dfd2c36e2fd0c718ee253889addb98e55 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:12 -0400
Subject: [md] dm: change sector_count member in clone_info from sector_t to unsigned

Message-id: <1405543364-20901-9-git-send-email-snitzer@redhat.com>
Patchwork-id: 85895
O-Subject: [RHEL7.1 PATCH 08/40] dm: change sector_count member in clone_info from sector_t to unsigned
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1117872

Upstream commit e0d6609a5fe34463ae2fd48d846931f70de8b37b
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Mar 14 18:40:39 2014 -0400

    dm: change sector_count member in clone_info from sector_t to unsigned

    It is impossible to create bios with 2^23 or more sectors (the size is
    stored as a 32-bit byte count in the bio). So we convert some sector_t
    values to unsigned integers.

    This is needed for the next commit ("dm: introduce
    dm_accept_partial_bio") that replaces integer value arguments with
    pointers, so the size of the integer must match.

    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index c8715f0..b5efd14 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -1163,11 +1163,11 @@ struct clone_info {
  struct bio *bio;
  struct dm_io *io;
  sector_t sector;
- sector_t sector_count;
+ unsigned sector_count;
  unsigned short idx;
 };
 
-static void bio_setup_sector(struct bio *bio, sector_t sector, sector_t len)
+static void bio_setup_sector(struct bio *bio, sector_t sector, unsigned len)
 {
  bio->bi_sector = sector;
  bio->bi_size = to_bytes(len);
@@ -1255,7 +1255,7 @@ static struct dm_target_io *alloc_tio(struct clone_info *ci,
 
 static void __clone_and_map_simple_bio(struct clone_info *ci,
            struct dm_target *ti,
-           unsigned target_bio_nr, sector_t len)
+           unsigned target_bio_nr, unsigned len)
 {
  struct dm_target_io *tio = alloc_tio(ci, ti, ci->bio->bi_max_vecs, target_bio_nr);
  struct bio *clone = &tio->clone;
@@ -1273,7 +1273,7 @@ static void __clone_and_map_simple_bio(struct clone_info *ci,
 }
 
 static void __send_duplicate_bios(struct clone_info *ci, struct dm_target *ti,
-      unsigned num_bios, sector_t len)
+      unsigned num_bios, unsigned len)
 {
  unsigned target_bio_nr;
 
@@ -1344,7 +1344,7 @@ static int __send_changing_extent_only(struct clone_info *ci,
            is_split_required_fn is_split_required)
 {
  struct dm_target *ti;
- sector_t len;
+ unsigned len;
  unsigned num_bios;
 
  do {
@@ -1363,9 +1363,9 @@ static int __send_changing_extent_only(struct clone_info *ci,
    return -EOPNOTSUPP;
 
   if (is_split_required && !is_split_required(ti))
-   len = min(ci->sector_count, max_io_len_target_boundary(ci->sector, ti));
+   len = min((sector_t)ci->sector_count, max_io_len_target_boundary(ci->sector, ti));
   else
-   len = min(ci->sector_count, max_io_len(ci->sector, ti));
+   len = min((sector_t)ci->sector_count, max_io_len(ci->sector, ti));
 
   __send_duplicate_bios(ci, ti, num_bios, len);
 
@@ -1389,7 +1389,7 @@ static int __send_write_same(struct clone_info *ci)
 /*
  * Find maximum number of sectors / bvecs we can process with a single bio.
  */
-static sector_t __len_within_target(struct clone_info *ci, sector_t max, int *idx)
+static unsigned __len_within_target(struct clone_info *ci, sector_t max, int *idx)
 {
  struct bio *bio = ci->bio;
  sector_t bv_len, total_len = 0;
@@ -1404,7 +1404,7 @@ static sector_t __len_within_target(struct clone_info *ci, sector_t max, int *id
   total_len += bv_len;
  }
 
- return total_len;
+ return (unsigned) total_len;
 }
 
 static int __split_bvec_across_targets(struct clone_info *ci,
@@ -1414,7 +1414,7 @@ static int __split_bvec_across_targets(struct clone_info *ci,
  struct bio_vec *bv = bio->bi_io_vec + ci->idx;
  sector_t remaining = to_sector(bv->bv_len);
  unsigned offset = 0;
- sector_t len;
+ unsigned len;
 
  do {
   if (offset) {
@@ -1447,7 +1447,8 @@ static int __split_and_process_non_flush(struct clone_info *ci)
 {
  struct bio *bio = ci->bio;
  struct dm_target *ti;
- sector_t len, max;
+ unsigned len;
+ sector_t max;
  int idx;
 
  if (unlikely(bio->bi_rw & REQ_DISCARD))
-- 
1.7.1