From a584bba1373c2b3fbb3e3b81de2de981566cc637 Mon Sep 17 00:00:00 2001
From: Frank Sorenson <sorenson@redhat.com>
Date: Wed, 1 Oct 2014 19:17:57 -0400
Subject: [fs] eliminate BUG() call when there's an unexpected lock on file close

Message-id: <1412191077-23810-1-git-send-email-sorenson@redhat.com>
Patchwork-id: 96855
O-Subject: [RHEL7.0 PATCH BZ1148130] fs: eliminate BUG() call when there's an unexpected lock on file close
Bugzilla: 1148130
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Dave Wysochanski <dwysocha@redhat.com>

This patch fixes https://bugzilla.redhat.com/show_bug.cgi?id=1148130

The patch is a clean backport from upstream to RHEL 7, and matches
a patch that recently went into RHEL6 as a result of BZ 1113096

The problem has been seen in a customer environment, and has been
reproduced in a test environment.  This patch changes the BUG()
to a WARN(), logs info about the lock, and deletes it.  The
underlying issue of a leftover lock still exists, and is
still under investigation.

Original patch header from upstream:

commit 8c3cac5e6a85f03602ffe09c44f14418699e31ec
Author: Jeff Layton <jlayton@redhat.com>
Date:   2014-02-03 12:13:07 -0500

locks: eliminate BUG() call when there's an unexpected lock on file close

A leftover lock on the list is surely a sign of a problem of some sort,
but it's not necessarily a reason to panic the box. Instead, just log a
warning with some info about the lock, and then delete it like we would
any other lock.

In the event that the filesystem declares a ->lock f_op, we may end up
leaking something, but that's generally preferable to an immediate
panic.

Acked-by: J. Bruce Fields <bfields@fieldses.org>
Signed-off-by: Jeff Layton <jlayton@redhat.com>

Signed-off-by: Frank Sorenson <sorenson@redhat.com>
Upstream commit: 8c3cac5e6a85f03602ffe09c44f14418699e31ec
Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1148130

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/locks.c b/fs/locks.c
index 7336920..864088f 100644
--- a/fs/locks.c
+++ b/fs/locks.c
@@ -2235,16 +2235,28 @@ void locks_remove_flock(struct file *filp)
 
  while ((fl = *before) != NULL) {
   if (fl->fl_file == filp) {
-   if (IS_FLOCK(fl)) {
-    locks_delete_lock(before);
-    continue;
-   }
    if (IS_LEASE(fl)) {
     lease_modify(before, F_UNLCK);
     continue;
    }
-   /* What? */
-   BUG();
+
+   /*
+    * There's a leftover lock on the list of a type that
+    * we didn't expect to see. Most likely a classic
+    * POSIX lock that ended up not getting released
+    * properly, or that raced onto the list somehow. Log
+    * some info about it and then just remove it from
+    * the list.
+    */
+   WARN(!IS_FLOCK(fl),
+    "leftover lock: dev=%u:%u ino=%lu type=%hhd flags=0x%x start=%lld end=%lld\n",
+    MAJOR(inode->i_sb->s_dev),
+    MINOR(inode->i_sb->s_dev), inode->i_ino,
+    fl->fl_type, fl->fl_flags,
+    fl->fl_start, fl->fl_end);
+
+   locks_delete_lock(before);
+   continue;
    }
   before = &fl->fl_next;
  }
-- 
1.7.1