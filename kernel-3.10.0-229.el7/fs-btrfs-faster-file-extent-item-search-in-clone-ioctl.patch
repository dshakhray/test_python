From 7d7d8b0577b9f60fb664996c2c8f5f64d836e127 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:00:05 -0400
Subject: [fs] btrfs: faster file extent item search in clone ioctl

Message-id: <1407179109-13714-119-git-send-email-sandeen@redhat.com>
Patchwork-id: 87165
O-Subject: [RHEL7.1 PATCH 118/422] Btrfs: faster file extent item search in clone ioctl
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe David Borba Manana <fdmanana@gmail.com>

commit e4355f34ef9fc75a93875fd075137ef2ea378883
Author: Filipe David Borba Manana <fdmanana@gmail.com>
Date:   Mon Jan 13 19:35:01 2014 +0000

    Btrfs: faster file extent item search in clone ioctl

    When we are looking for file extent items that intersect the cloning
    range, for each one that falls completely outside the range, don't
    release the path and do another full tree search - just move on
    to the next slot and copy the file extent item into our buffer only
    if the item intersects the cloning range.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index b19d3eb..2d96f4b 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -2883,12 +2883,14 @@ static int btrfs_clone(struct inode *src, struct inode *inode,
    * note the key will change type as we walk through the
    * tree.
    */
+  path->leave_spinning = 1;
   ret = btrfs_search_slot(NULL, BTRFS_I(src)->root, &key, path,
     0, 0);
   if (ret < 0)
    goto out;
 
   nritems = btrfs_header_nritems(path->nodes[0]);
+process_slot:
   if (path->slots[0] >= nritems) {
    ret = btrfs_next_leaf(BTRFS_I(src)->root, path);
    if (ret < 0)
@@ -2915,11 +2917,6 @@ static int btrfs_clone(struct inode *src, struct inode *inode,
    u8 comp;
    u64 endoff;
 
-   size = btrfs_item_size_nr(leaf, slot);
-   read_extent_buffer(leaf, buf,
-        btrfs_item_ptr_offset(leaf, slot),
-        size);
-
    extent = btrfs_item_ptr(leaf, slot,
       struct btrfs_file_extent_item);
    comp = btrfs_file_extent_compression(leaf, extent);
@@ -2938,11 +2935,20 @@ static int btrfs_clone(struct inode *src, struct inode *inode,
     datal = btrfs_file_extent_ram_bytes(leaf,
             extent);
    }
-   btrfs_release_path(path);
 
    if (key.offset + datal <= off ||
-       key.offset >= off + len - 1)
-    goto next;
+       key.offset >= off + len - 1) {
+    path->slots[0]++;
+    goto process_slot;
+   }
+
+   size = btrfs_item_size_nr(leaf, slot);
+   read_extent_buffer(leaf, buf,
+        btrfs_item_ptr_offset(leaf, slot),
+        size);
+
+   btrfs_release_path(path);
+   path->leave_spinning = 0;
 
    memcpy(&new_key, &key, sizeof(new_key));
    new_key.objectid = btrfs_ino(inode);
@@ -3113,7 +3119,6 @@ static int btrfs_clone(struct inode *src, struct inode *inode,
    }
    ret = btrfs_end_transaction(trans, root);
   }
-next:
   btrfs_release_path(path);
   key.offset++;
  }
-- 
1.7.1