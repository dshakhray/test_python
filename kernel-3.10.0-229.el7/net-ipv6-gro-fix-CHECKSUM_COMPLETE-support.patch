From e502bd4e8f30162cd57a8a8989d6046f5d401bdb Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Sun, 14 Sep 2014 19:49:55 -0400
Subject: [net] ipv6: gro: fix CHECKSUM_COMPLETE support

Message-id: <1410724197-31885-6-git-send-email-fwestpha@redhat.com>
Patchwork-id: 94698
O-Subject: [PATCH 59/57 RHEL7.1 net] ipv6: gro: fix CHECKSUM_COMPLETE support
Bugzilla: 1131999
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>

BZ: 1131999

commit 4de462ab63e23953fd05da511aeb460ae10cc726
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon May 19 21:56:34 2014 -0700

    ipv6: gro: fix CHECKSUM_COMPLETE support

    When GRE support was added in linux-3.14, CHECKSUM_COMPLETE handling
    broke on GRE+IPv6 because we did not update/use the appropriate csum :

    GRO layer is supposed to use/update NAPI_GRO_CB(skb)->csum instead of
    skb->csum

    Tested using a GRE tunnel and IPv6 traffic. GRO aggregation now happens
    at the first level (ethernet device) instead of being done in gre
    tunnel. Native IPv6+TCP is still properly aggregated.

    Fixes: bf5a755f5e918 ("net-gre-gro: Add GRE support to the GRO stack")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jerry Chu <hkchu@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv6/ip6_offload.c b/net/ipv6/ip6_offload.c
index 200504e..c12d5c7 100644
--- a/net/ipv6/ip6_offload.c
+++ b/net/ipv6/ip6_offload.c
@@ -197,7 +197,6 @@ static struct sk_buff **ipv6_gro_receive(struct sk_buff **head,
  unsigned int off;
  u16 flush = 1;
  int proto;
- __wsum csum;
 
  off = skb_gro_offset(skb);
  hlen = off + sizeof(*iph);
@@ -265,13 +264,10 @@ static struct sk_buff **ipv6_gro_receive(struct sk_buff **head,
 
  NAPI_GRO_CB(skb)->flush |= flush;
 
- csum = skb->csum;
- skb_postpull_rcsum(skb, iph, skb_network_header_len(skb));
+ skb_gro_postpull_rcsum(skb, iph, nlen);
 
  pp = ops->callbacks.gro_receive(head, skb);
 
- skb->csum = csum;
-
 out_unlock:
  rcu_read_unlock();
 
diff --git a/net/ipv6/tcpv6_offload.c b/net/ipv6/tcpv6_offload.c
index 0d78132..8517d3c 100644
--- a/net/ipv6/tcpv6_offload.c
+++ b/net/ipv6/tcpv6_offload.c
@@ -42,7 +42,7 @@ static struct sk_buff **tcp6_gro_receive(struct sk_buff **head,
  if (NAPI_GRO_CB(skb)->flush)
   goto skip_csum;
 
- wsum = skb->csum;
+ wsum = NAPI_GRO_CB(skb)->csum;
 
  switch (skb->ip_summed) {
  case CHECKSUM_NONE:
-- 
1.7.1