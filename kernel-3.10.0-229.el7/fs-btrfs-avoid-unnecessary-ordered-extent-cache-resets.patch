From ea37c6dfebddc31d8cfef47c7bc1360d42fce068 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 18:58:47 -0400
Subject: [fs] btrfs: avoid unnecessary ordered extent cache resets

Message-id: <1407179109-13714-41-git-send-email-sandeen@redhat.com>
Patchwork-id: 86987
O-Subject: [RHEL7.1 PATCH 040/422] Btrfs: avoid unnecessary ordered extent cache resets
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe David Borba Manana <fdmanana@gmail.com>

commit 1b8e7e45e57cc98bf6c8ab9b3087d634636ba2e6
Author: Filipe David Borba Manana <fdmanana@gmail.com>
Date:   Fri Nov 22 18:54:58 2013 +0000

    Btrfs: avoid unnecessary ordered extent cache resets

    After an ordered extent completes, don't blindly reset the
    inode's ordered tree last accessed ordered extent pointer.

    While running the xfstests I noticed that about 29% of the
    time the ordered extent to which tree->last pointed was not
    the same as our just completed ordered extent. After that I
    ran the following sysbench test (after a prepare phase) and
    noticed that about 68% of the time tree->last pointed to
    a different ordered extent too.

    sysbench --test=fileio --file-num=32 --file-total-size=4G \
        --file-test-mode=rndwr --num-threads=512 \
        --file-block-size=32768 --max-time=60 --max-requests=0 run

    Therefore reset tree->last on ordered extent removal only if
    it pointed to the ordered extent we're removing from the tree.

    Results from 4 runs of the following test before and after
    applying this patch:

    $ sysbench --test=fileio --file-num=32 --file-total-size=4G \
      --file-test-mode=seqwr --num-threads=512 \
      --file-block-size=32768 --max-time=60 --file-io-mode=sync prepare
    $ sysbench --test=fileio --file-num=32 --file-total-size=4G \
      --file-test-mode=seqwr --num-threads=512 \
      --file-block-size=32768 --max-time=60 --file-io-mode=sync run

    Before this path:

    run 1 - 64.049Mb/sec
    run 2 - 63.455Mb/sec
    run 3 - 64.656Mb/sec
    run 4 - 63.833Mb/sec

    After this patch:

    run 1 - 66.149Mb/sec
    run 2 - 68.459Mb/sec
    run 3 - 66.338Mb/sec
    run 4 - 66.176Mb/sec

    With random writes (--file-test-mode=rndwr) I had huge fluctuations
    on the results (+- 35% easily).

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ordered-data.c b/fs/btrfs/ordered-data.c
index 69582d5..b8c2ded 100644
--- a/fs/btrfs/ordered-data.c
+++ b/fs/btrfs/ordered-data.c
@@ -520,7 +520,8 @@ void btrfs_remove_ordered_extent(struct inode *inode,
  spin_lock_irq(&tree->lock);
  node = &entry->rb_node;
  rb_erase(node, &tree->tree);
- tree->last = NULL;
+ if (tree->last == node)
+  tree->last = NULL;
  set_bit(BTRFS_ORDERED_COMPLETE, &entry->flags);
  spin_unlock_irq(&tree->lock);
 
-- 
1.7.1