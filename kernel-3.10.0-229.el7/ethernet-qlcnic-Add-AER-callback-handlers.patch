From 7590636285363d1ad66680b2c8ec9bcecf050cd7 Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Thu, 21 Aug 2014 13:04:56 -0400
Subject: [ethernet] qlcnic: Add AER callback handlers

Message-id: <1408626422-3941-13-git-send-email-cdupuis@redhat.com>
Patchwork-id: 88549
O-Subject: [PATCH RHEL 7.1 012/138] qlcnic: Add AER callback handlers.
Bugzilla: 1089352
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Pratik Pujar <pratik.pujar@qlogic.com>

Bug 1089352 (https://bugzilla.redhat.com/show_bug.cgi?id=1089352)

net commit id 4460f2e83c61e21c2e78a28a327b716252b13069

o Generic AER callback handlers will make use of qlcnic_hardware_ops structure
  to call adapter specific handlers.

Signed-off-by: Pratik Pujar <pratik.pujar@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
index 8c15bc5..ff43c48 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
@@ -1480,6 +1480,10 @@ void qlcnic_delete_lb_filters(struct qlcnic_adapter *adapter);
 int qlcnic_dump_fw(struct qlcnic_adapter *);
 int qlcnic_enable_fw_dump_state(struct qlcnic_adapter *);
 bool qlcnic_check_fw_dump_state(struct qlcnic_adapter *);
+pci_ers_result_t qlcnic_82xx_io_error_detected(struct pci_dev *,
+            pci_channel_state_t);
+pci_ers_result_t qlcnic_82xx_io_slot_reset(struct pci_dev *);
+void qlcnic_82xx_io_resume(struct pci_dev *);
 
 /* Functions from qlcnic_init.c */
 void qlcnic_schedule_work(struct qlcnic_adapter *, work_func_t, int);
@@ -1725,6 +1729,10 @@ struct qlcnic_hardware_ops {
  void (*set_mac_filter_count) (struct qlcnic_adapter *);
  void (*free_mac_list) (struct qlcnic_adapter *);
  int (*read_phys_port_id) (struct qlcnic_adapter *);
+ pci_ers_result_t (*io_error_detected) (struct pci_dev *,
+            pci_channel_state_t);
+ pci_ers_result_t (*io_slot_reset) (struct pci_dev *);
+ void (*io_resume) (struct pci_dev *);
 };
 
 extern struct qlcnic_nic_template qlcnic_vf_ops;
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
index 3dea364..ce016c6 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
@@ -540,6 +540,9 @@ static struct qlcnic_hardware_ops qlcnic_hw_ops = {
  .set_mac_filter_count  = qlcnic_82xx_set_mac_filter_count,
  .free_mac_list   = qlcnic_82xx_free_mac_list,
  .read_phys_port_id  = qlcnic_82xx_read_phys_port_id,
+ .io_error_detected  = qlcnic_82xx_io_error_detected,
+ .io_slot_reset   = qlcnic_82xx_io_slot_reset,
+ .io_resume   = qlcnic_82xx_io_resume,
 };
 
 static void qlcnic_get_multiq_capability(struct qlcnic_adapter *adapter)
@@ -3426,19 +3429,6 @@ static int qlcnic_attach_func(struct pci_dev *pdev)
   return err;
  }
 
- if (qlcnic_83xx_check(adapter)) {
-  /* register for NIC IDC AEN Events */
-  qlcnic_83xx_register_nic_idc_func(adapter, 1);
-  err = qlcnic_83xx_setup_mbx_intr(adapter);
-  if (err) {
-   dev_err(&adapter->pdev->dev,
-    "failed to setup mbx interrupt\n");
-   qlcnic_clr_all_drv_state(adapter, 1);
-   clear_bit(__QLCNIC_AER, &adapter->state);
-   goto done;
-  }
- }
-
  if (netif_running(netdev)) {
   err = qlcnic_attach(adapter);
   if (err) {
@@ -3459,8 +3449,8 @@ static int qlcnic_attach_func(struct pci_dev *pdev)
  return err;
 }
 
-static pci_ers_result_t qlcnic_io_error_detected(struct pci_dev *pdev,
-      pci_channel_state_t state)
+pci_ers_result_t qlcnic_82xx_io_error_detected(struct pci_dev *pdev,
+            pci_channel_state_t state)
 {
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  struct net_device *netdev = adapter->netdev;
@@ -3479,12 +3469,6 @@ static pci_ers_result_t qlcnic_io_error_detected(struct pci_dev *pdev,
  if (netif_running(netdev))
   qlcnic_down(adapter, netdev);
 
- if (qlcnic_83xx_check(adapter)) {
-  qlcnic_83xx_free_mbx_intr(adapter);
-  qlcnic_83xx_register_nic_idc_func(adapter, 0);
-  cancel_delayed_work_sync(&adapter->idc_aen_work);
- }
-
  qlcnic_detach(adapter);
  qlcnic_teardown_intr(adapter);
 
@@ -3496,13 +3480,13 @@ static pci_ers_result_t qlcnic_io_error_detected(struct pci_dev *pdev,
  return PCI_ERS_RESULT_NEED_RESET;
 }
 
-static pci_ers_result_t qlcnic_io_slot_reset(struct pci_dev *pdev)
+pci_ers_result_t qlcnic_82xx_io_slot_reset(struct pci_dev *pdev)
 {
  return qlcnic_attach_func(pdev) ? PCI_ERS_RESULT_DISCONNECT :
     PCI_ERS_RESULT_RECOVERED;
 }
 
-static void qlcnic_io_resume(struct pci_dev *pdev)
+void qlcnic_82xx_io_resume(struct pci_dev *pdev)
 {
  u32 state;
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
@@ -3512,9 +3496,48 @@ static void qlcnic_io_resume(struct pci_dev *pdev)
  if (state == QLCNIC_DEV_READY && test_and_clear_bit(__QLCNIC_AER,
            &adapter->state))
   qlcnic_schedule_work(adapter, qlcnic_fw_poll_work,
-      FW_POLL_DELAY);
+         FW_POLL_DELAY);
 }
 
+static pci_ers_result_t qlcnic_io_error_detected(struct pci_dev *pdev,
+       pci_channel_state_t state)
+{
+ struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
+ struct qlcnic_hardware_ops *hw_ops = adapter->ahw->hw_ops;
+
+ if (hw_ops->io_error_detected) {
+  return hw_ops->io_error_detected(pdev, state);
+ } else {
+  dev_err(&pdev->dev, "AER error_detected handler not registered.\n");
+  return PCI_ERS_RESULT_DISCONNECT;
+ }
+}
+
+static pci_ers_result_t qlcnic_io_slot_reset(struct pci_dev *pdev)
+{
+ struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
+ struct qlcnic_hardware_ops *hw_ops = adapter->ahw->hw_ops;
+
+ if (hw_ops->io_slot_reset) {
+  return hw_ops->io_slot_reset(pdev);
+ } else {
+  dev_err(&pdev->dev, "AER slot_reset handler not registered.\n");
+  return PCI_ERS_RESULT_DISCONNECT;
+ }
+}
+
+static void qlcnic_io_resume(struct pci_dev *pdev)
+{
+ struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
+ struct qlcnic_hardware_ops *hw_ops = adapter->ahw->hw_ops;
+
+ if (hw_ops->io_resume)
+  hw_ops->io_resume(pdev);
+ else
+  dev_err(&pdev->dev, "AER resume handler not registered.\n");
+}
+
+
 static int
 qlcnicvf_start_firmware(struct qlcnic_adapter *adapter)
 {
-- 
1.7.1