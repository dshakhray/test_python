From 79de402a82612d13f80f612bfd5f494668d3c620 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:05:54 -0400
Subject: [virt] kvm/ppc: book3s hv - Avoid unbalanced increments of VPA yield count

Message-id: <1410545655-205645-126-git-send-email-dzickus@redhat.com>
Patchwork-id: 94115
O-Subject: [RHEL7 PATCH 125/626] KVM: PPC: Book3S HV: Avoid unbalanced increments of VPA yield count
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 8c2dbb79c62e9da4857b873435925d3654d9fccd
Author: Paul Mackerras <paulus@samba.org>
Date:   Fri Sep 6 13:24:35 2013 +1000

    KVM: PPC: Book3S HV: Avoid unbalanced increments of VPA yield count

    The yield count in the VPA is supposed to be incremented every time
    we enter the guest, and every time we exit the guest, so that its
    value is even when the vcpu is running in the guest and odd when it
    isn't.  However, it's currently possible that we increment the yield
    count on the way into the guest but then find that other CPU threads
    are already exiting the guest, so we go back to nap mode via the
    secondary_too_late label.  In this situation we don't increment the
    yield count again, breaking the relationship between the LSB of the
    count and whether the vcpu is in the guest.

    To fix this, we move the increment of the yield count to a point
    after we have checked whether other CPU threads are exiting.

    Signed-off-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Alexander Graf <agraf@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_hv_rmhandlers.S b/arch/powerpc/kvm/book3s_hv_rmhandlers.S
index fc86369..f8c6b29 100644
--- a/arch/powerpc/kvm/book3s_hv_rmhandlers.S
+++ b/arch/powerpc/kvm/book3s_hv_rmhandlers.S
@@ -405,16 +405,6 @@ END_FTR_SECTION_IFSET(CPU_FTR_ARCH_206)
  /* Save R1 in the PACA */
  std r1, HSTATE_HOST_R1(r13)
 
- /* Increment yield count if they have a VPA */
- ld r3, VCPU_VPA(r4)
- cmpdi r3, 0
- beq 25f
- lwz r5, LPPACA_YIELDCOUNT(r3)
- addi r5, r5, 1
- stw r5, LPPACA_YIELDCOUNT(r3)
- li r6, 1
- stb r6, VCPU_VPA_DIRTY(r4)
-25:
  /* Load up DAR and DSISR */
  ld r5, VCPU_DAR(r4)
  lwz r6, VCPU_DSISR(r4)
@@ -525,6 +515,16 @@ END_FTR_SECTION_IFSET(CPU_FTR_ARCH_201)
  mtspr SPRN_RMOR,r8
  isync
 
+ /* Increment yield count if they have a VPA */
+ ld r3, VCPU_VPA(r4)
+ cmpdi r3, 0
+ beq 25f
+ lwz r5, LPPACA_YIELDCOUNT(r3)
+ addi r5, r5, 1
+ stw r5, LPPACA_YIELDCOUNT(r3)
+ li r6, 1
+ stb r6, VCPU_VPA_DIRTY(r4)
+25:
  /* Check if HDEC expires soon */
  mfspr r3,SPRN_HDEC
  cmpwi r3,10
-- 
1.7.1