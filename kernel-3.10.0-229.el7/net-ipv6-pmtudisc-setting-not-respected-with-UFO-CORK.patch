From b61d2891ae493907472beab4b6b146477f6da3d3 Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Sun, 10 Aug 2014 16:10:06 -0400
Subject: [net] ipv6: pmtudisc setting not respected with UFO/CORK

Message-id: <b231b6a4a239310ecd3d3e2774b24ec99578ff2a.1407685044.git.hannes@redhat.com>
Patchwork-id: 87566
O-Subject: [PATCH net RHEL7 2/3] ipv6: pmtudisc setting not respected with UFO/CORK
Bugzilla: 1127218
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1127218
Upstream Status: 4df98e76cde7c6
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7823897
Tested: verified on beaker with strace and tracepath(6)

Upstream Commit:
commit 4df98e76cde7c64b5606d82584c65dda4151bd6a
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Mon Dec 16 12:36:44 2013 +0100

    ipv6: pmtudisc setting not respected with UFO/CORK

    Sockets marked with IPV6_PMTUDISC_PROBE (or later IPV6_PMTUDISC_INTERFACE)
    don't respect this setting when the outgoing interface supports UFO.

    We had the same problem in IPv4, which was fixed in commit
    daba287b299ec7a2c61ae3a714920e90e8396ad5 ("ipv4: fix DO and PROBE pmtu
    mode regarding local fragmentation with UFO/CORK").

    Also IPV6_DONTFRAG mode did not care about already corked data, thus
    it may generate a fragmented frame even if this socket option was
    specified. It also did not care about the length of the ipv6 header and
    possible options.

    In the error path allow the user to receive the pmtu notifications via
    both, rxpmtu method or error queue. The user may opted in for both,
    so deliver the notification to both error handlers (the handlers check
    if the error needs to be enqueued).

    Also report back consistent pmtu values when sending on an already
    cork-appended socket.

    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hsowa@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv6/ip6_output.c b/net/ipv6/ip6_output.c
index 2c84fe2..9a58dff 100644
--- a/net/ipv6/ip6_output.c
+++ b/net/ipv6/ip6_output.c
@@ -1207,11 +1207,35 @@ int ip6_append_data(struct sock *sk, int getfrag(void *from, char *to,
 
  fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +
    (opt ? opt->opt_nflen : 0);
- maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen - sizeof(struct frag_hdr);
+ maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen -
+       sizeof(struct frag_hdr);
 
  if (mtu <= sizeof(struct ipv6hdr) + IPV6_MAXPLEN) {
-  if (cork->length + length > sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen) {
-   ipv6_local_error(sk, EMSGSIZE, fl6, mtu-exthdrlen);
+  unsigned int maxnonfragsize, headersize;
+
+  headersize = sizeof(struct ipv6hdr) +
+        (opt ? opt->tot_len : 0) +
+        (dst_allfrag(&rt->dst) ?
+         sizeof(struct frag_hdr) : 0) +
+        rt->rt6i_nfheader_len;
+
+  maxnonfragsize = (np->pmtudisc >= IPV6_PMTUDISC_DO) ?
+     mtu : sizeof(struct ipv6hdr) + IPV6_MAXPLEN;
+
+  /* dontfrag active */
+  if ((cork->length + length > mtu - headersize) && dontfrag &&
+      (sk->sk_protocol == IPPROTO_UDP ||
+       sk->sk_protocol == IPPROTO_RAW)) {
+   ipv6_local_rxpmtu(sk, fl6, mtu - headersize +
+         sizeof(struct ipv6hdr));
+   goto emsgsize;
+  }
+
+  if (cork->length + length > maxnonfragsize - headersize) {
+emsgsize:
+   ipv6_local_error(sk, EMSGSIZE, fl6,
+      mtu - headersize +
+      sizeof(struct ipv6hdr));
    return -EMSGSIZE;
   }
  }
@@ -1236,12 +1260,6 @@ int ip6_append_data(struct sock *sk, int getfrag(void *from, char *to,
   * --yoshfuji
   */
 
- if ((length > mtu) && dontfrag && (sk->sk_protocol == IPPROTO_UDP ||
-        sk->sk_protocol == IPPROTO_RAW)) {
-  ipv6_local_rxpmtu(sk, fl6, mtu-exthdrlen);
-  return -EMSGSIZE;
- }
-
  skb = skb_peek_tail(&sk->sk_write_queue);
  cork->length += length;
  if (((length > mtu) ||
-- 
1.7.1