From 94ad99917421078c58a2c1e228809259f036eda0 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:01:13 -0400
Subject: [usb] see if URB comes from a completion handler

Message-id: <1410887463-20674-2-git-send-email-dzickus@redhat.com>
Patchwork-id: 95093
O-Subject: [RHEL7 PATCH 001/591] USB: see if URB comes from a completion handler
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit c7ccde6eac6d3c4bc6110cc3fd76ef3823bc0831
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Sep 3 13:58:43 2013 -0400

    USB: see if URB comes from a completion handler

    Now that URBs can be completed inside tasklets, we need a way of
    determining whether a completion handler for a given endpoint is
    currently running.  Otherwise it's not possible to maintain the API
    guarantee about keeping isochronous streams synchronous when an
    underrun occurs.

    This patch adds a field and a routine to check whether a completion
    handler for a periodic endpoint is running.  At the moment no
    analogous routine appears to be necessary for async endpoints, but one
    can always be added.

    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/core/hcd.c b/drivers/usb/core/hcd.c
index f20a044..44fec42 100644
--- a/drivers/usb/core/hcd.c
+++ b/drivers/usb/core/hcd.c
@@ -1704,7 +1704,9 @@ static void usb_giveback_urb_bh(unsigned long param)
 
   urb = list_entry(local_list.next, struct urb, urb_list);
   list_del_init(&urb->urb_list);
+  bh->completing_ep = urb->ep;
   __usb_hcd_giveback_urb(urb);
+  bh->completing_ep = NULL;
  }
 
  /* check if there are new URBs to giveback */
diff --git a/include/linux/usb/hcd.h b/include/linux/usb/hcd.h
index 75efc45..8c86513 100644
--- a/include/linux/usb/hcd.h
+++ b/include/linux/usb/hcd.h
@@ -73,6 +73,7 @@ struct giveback_urb_bh {
  spinlock_t lock;
  struct list_head  head;
  struct tasklet_struct bh;
+ struct usb_host_endpoint *completing_ep;
 };
 
 struct usb_hcd {
@@ -378,6 +379,12 @@ static inline int hcd_giveback_urb_in_bh(struct usb_hcd *hcd)
  return hcd->driver->flags & HCD_BH;
 }
 
+static inline bool hcd_periodic_completion_in_progress(struct usb_hcd *hcd,
+  struct usb_host_endpoint *ep)
+{
+ return hcd->high_prio_bh.completing_ep == ep;
+}
+
 extern int usb_hcd_link_urb_to_ep(struct usb_hcd *hcd, struct urb *urb);
 extern int usb_hcd_check_unlink_urb(struct usb_hcd *hcd, struct urb *urb,
   int status);
-- 
1.7.1