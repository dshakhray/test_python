From 6c53e0c6a15b2e5dfb32d27c247b78748975058e Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:09:01 -0400
Subject: [tools] perf: Add global list of opened dso objects

Message-id: <1410181752-25631-297-git-send-email-jolsa@redhat.com>
Patchwork-id: 91927
O-Subject: [PATCH RHEL7.1 BZ1134356 296/307] perf tools: Add global list of opened dso objects
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit eba5102d2f0b4117edd089f2d882d9386025c829
Author: Jiri Olsa <jolsa@kernel.org>
Date: Wed Apr 30 15:00:59 2014 +0200

description
===========
Adding global list of opened dso objects, so we can
track them and use the list for caching dso data file
descriptors.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/dso.c b/tools/perf/util/dso.c
index 5acb4b8..5d7c7bc 100644
--- a/tools/perf/util/dso.c
+++ b/tools/perf/util/dso.c
@@ -136,7 +136,22 @@ int dso__read_binary_type_filename(const struct dso *dso,
  return ret;
 }
 
-static int open_dso(struct dso *dso, struct machine *machine)
+/*
+ * Global list of open DSOs.
+ */
+static LIST_HEAD(dso__data_open);
+
+static void dso__list_add(struct dso *dso)
+{
+ list_add_tail(&dso->data.open_entry, &dso__data_open);
+}
+
+static void dso__list_del(struct dso *dso)
+{
+ list_del(&dso->data.open_entry);
+}
+
+static int __open_dso(struct dso *dso, struct machine *machine)
 {
  int fd;
  char *root_dir = (char *)"";
@@ -159,14 +174,35 @@ static int open_dso(struct dso *dso, struct machine *machine)
  return fd;
 }
 
-void dso__data_close(struct dso *dso)
+static int open_dso(struct dso *dso, struct machine *machine)
+{
+ int fd = __open_dso(dso, machine);
+
+ if (fd > 0)
+  dso__list_add(dso);
+
+ return fd;
+}
+
+static void close_data_fd(struct dso *dso)
 {
  if (dso->data.fd >= 0) {
   close(dso->data.fd);
   dso->data.fd = -1;
+  dso__list_del(dso);
  }
 }
 
+static void close_dso(struct dso *dso)
+{
+ close_data_fd(dso);
+}
+
+void dso__data_close(struct dso *dso)
+{
+ close_dso(dso);
+}
+
 int dso__data_fd(struct dso *dso, struct machine *machine)
 {
  enum dso_binary_type binary_type_data[] = {
@@ -499,6 +535,7 @@ struct dso *dso__new(const char *name)
   dso->kernel = DSO_TYPE_USER;
   dso->needs_swap = DSO_SWAP__UNSET;
   INIT_LIST_HEAD(&dso->node);
+  INIT_LIST_HEAD(&dso->data.open_entry);
  }
 
  return dso;
diff --git a/tools/perf/util/dso.h b/tools/perf/util/dso.h
index e48dcf5..90988bf 100644
--- a/tools/perf/util/dso.h
+++ b/tools/perf/util/dso.h
@@ -103,6 +103,7 @@ struct dso {
  struct {
   struct rb_root  cache;
   int   fd;
+  struct list_head open_entry;
  } data;
 
  char   name[0];
-- 
1.7.1