From 44f1f711d7833d691de962463de73471001d2022 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:11 -0400
Subject: [kernel] perf: Add active_entry list head to struct perf_event

Message-id: <1408953210-26343-4-git-send-email-jolsa@redhat.com>
Patchwork-id: 88723
O-Subject: [PATCH RHEL7.1 BZ1133083 003/322] perf: Add active_entry list head to struct perf_event
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 71ad88efebbcde374bddf904b96f3a7fc82d45d4
Author: Stephane Eranian <eranian@google.com>
Date: Tue Nov 12 17:58:48 2013 +0100

KABI
=====
The 'struct perf_event*' pointer is used within 'struct thread_struct',
making perf_event struct KABI-broken any time we change it. At the moment
we dont have any perf related function on KABI list, so masking the change
with __GENKSYMS__ macro.

Merged with:
  f3ae75de98c4 perf/x86: Fix active_entry initialization
to avoid more KABI confusion. Adding new active_entry entry
into the #ifndef __GENKSYMS__ section.

description
===========
This patch adds a new field to the struct perf_event.
It is intended to be used to chain events which are
active (enabled). It helps in the hardware layer
for PMUs which do not have actual counter restrictions, i.e.,
free running read-only counters. Active events are chained
as opposed to being tracked via the counter they use.

To save space we use a union with hlist_entry as both
are mutually exclusive (suggested by Jiri Olsa).
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/perf_event.h b/include/linux/perf_event.h
index 5c036e0..9d542fa 100644
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@ -454,6 +454,7 @@ struct perf_event {
   * group in tact which avoids us using the other two entries.
   */
  struct list_head  migrate_entry;
+ struct list_head  active_entry;
 #endif
 #endif /* CONFIG_PERF_EVENTS */
 };
diff --git a/kernel/events/core.c b/kernel/events/core.c
index 42948f9..ab1798f 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -6664,6 +6664,8 @@ perf_event_alloc(struct perf_event_attr *attr, int cpu,
  INIT_LIST_HEAD(&event->event_entry);
  INIT_LIST_HEAD(&event->sibling_list);
  INIT_LIST_HEAD(&event->rb_entry);
+ INIT_LIST_HEAD(&event->active_entry);
+ INIT_HLIST_NODE(&event->hlist_entry);
 
  init_waitqueue_head(&event->waitq);
  init_irq_work(&event->pending, perf_pending_event);
-- 
1.7.1