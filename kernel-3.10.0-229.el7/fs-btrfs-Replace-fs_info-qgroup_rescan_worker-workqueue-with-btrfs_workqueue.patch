From d3425cf6fd0802ed0661214fb0e6e7e1d2fa9e7b Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:02:01 -0400
Subject: [fs] btrfs: Replace fs_info->qgroup_rescan_worker workqueue with btrfs_workqueue

Message-id: <1407179109-13714-235-git-send-email-sandeen@redhat.com>
Patchwork-id: 87138
O-Subject: [RHEL7.1 PATCH 234/422] btrfs: Replace fs_info->qgroup_rescan_worker workqueue with btrfs_workqueue.
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Qu Wenruo <quwenruo@cn.fujitsu.com>

commit fc97fab0ea59fb923cbe91b7d208ffc6f1d8a95c
Author: Qu Wenruo <quwenruo@cn.fujitsu.com>
Date:   Fri Feb 28 10:46:16 2014 +0800

    btrfs: Replace fs_info->qgroup_rescan_worker workqueue with btrfs_workqueue.

    Replace the fs_info->qgroup_rescan_worker with the newly created
    btrfs_workqueue.

    Signed-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
    Tested-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ctree.h b/fs/btrfs/ctree.h
index c07b67f..7b50def 100644
--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -1648,9 +1648,9 @@ struct btrfs_fs_info {
  /* qgroup rescan items */
  struct mutex qgroup_rescan_lock; /* protects the progress item */
  struct btrfs_key qgroup_rescan_progress;
- struct btrfs_workers qgroup_rescan_workers;
+ struct btrfs_workqueue_struct *qgroup_rescan_workers;
  struct completion qgroup_rescan_completion;
- struct btrfs_work qgroup_rescan_work;
+ struct btrfs_work_struct qgroup_rescan_work;
 
  /* filesystem state */
  unsigned long fs_state;
diff --git a/fs/btrfs/disk-io.c b/fs/btrfs/disk-io.c
index 7c0f429..05e0820 100644
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -2009,7 +2009,7 @@ static void btrfs_stop_all_workers(struct btrfs_fs_info *fs_info)
  btrfs_destroy_workqueue(fs_info->caching_workers);
  btrfs_destroy_workqueue(fs_info->readahead_workers);
  btrfs_destroy_workqueue(fs_info->flush_workers);
- btrfs_stop_workers(&fs_info->qgroup_rescan_workers);
+ btrfs_destroy_workqueue(fs_info->qgroup_rescan_workers);
 }
 
 static void free_root_extent_buffers(struct btrfs_root *root)
@@ -2522,15 +2522,14 @@ int open_ctree(struct super_block *sb,
   btrfs_alloc_workqueue("delayed-meta", flags, max_active, 0);
  fs_info->readahead_workers =
   btrfs_alloc_workqueue("readahead", flags, max_active, 2);
- btrfs_init_workers(&fs_info->qgroup_rescan_workers, "qgroup-rescan", 1,
-      &fs_info->generic_worker);
+ fs_info->qgroup_rescan_workers =
+  btrfs_alloc_workqueue("qgroup-rescan", flags, 1, 0);
 
  /*
   * btrfs_start_workers can really only fail because of ENOMEM so just
   * return -ENOMEM if any of these fail.
   */
  ret = btrfs_start_workers(&fs_info->generic_worker);
- ret |= btrfs_start_workers(&fs_info->qgroup_rescan_workers);
  if (ret) {
   err = -ENOMEM;
   goto fail_sb_buffer;
@@ -2542,7 +2541,8 @@ int open_ctree(struct super_block *sb,
        fs_info->endio_write_workers && fs_info->endio_raid56_workers &&
        fs_info->endio_freespace_worker && fs_info->rmw_workers &&
        fs_info->caching_workers && fs_info->readahead_workers &&
-       fs_info->fixup_workers && fs_info->delayed_workers)) {
+       fs_info->fixup_workers && fs_info->delayed_workers &&
+       fs_info->qgroup_rescan_workers)) {
   err = -ENOMEM;
   goto fail_sb_buffer;
  }
diff --git a/fs/btrfs/qgroup.c b/fs/btrfs/qgroup.c
index 472302a..38617cc 100644
--- a/fs/btrfs/qgroup.c
+++ b/fs/btrfs/qgroup.c
@@ -1509,8 +1509,8 @@ int btrfs_run_qgroups(struct btrfs_trans_handle *trans,
   ret = qgroup_rescan_init(fs_info, 0, 1);
   if (!ret) {
    qgroup_rescan_zero_tracking(fs_info);
-   btrfs_queue_worker(&fs_info->qgroup_rescan_workers,
-        &fs_info->qgroup_rescan_work);
+   btrfs_queue_work(fs_info->qgroup_rescan_workers,
+      &fs_info->qgroup_rescan_work);
   }
   ret = 0;
  }
@@ -1984,7 +1984,7 @@ out:
  return ret;
 }
 
-static void btrfs_qgroup_rescan_worker(struct btrfs_work *work)
+static void btrfs_qgroup_rescan_worker(struct btrfs_work_struct *work)
 {
  struct btrfs_fs_info *fs_info = container_of(work, struct btrfs_fs_info,
            qgroup_rescan_work);
@@ -2095,7 +2095,8 @@ qgroup_rescan_init(struct btrfs_fs_info *fs_info, u64 progress_objectid,
 
  memset(&fs_info->qgroup_rescan_work, 0,
         sizeof(fs_info->qgroup_rescan_work));
- fs_info->qgroup_rescan_work.func = btrfs_qgroup_rescan_worker;
+ btrfs_init_work(&fs_info->qgroup_rescan_work,
+   btrfs_qgroup_rescan_worker, NULL, NULL);
 
  if (ret) {
 err:
@@ -2158,8 +2159,8 @@ btrfs_qgroup_rescan(struct btrfs_fs_info *fs_info)
 
  qgroup_rescan_zero_tracking(fs_info);
 
- btrfs_queue_worker(&fs_info->qgroup_rescan_workers,
-      &fs_info->qgroup_rescan_work);
+ btrfs_queue_work(fs_info->qgroup_rescan_workers,
+    &fs_info->qgroup_rescan_work);
 
  return 0;
 }
@@ -2190,6 +2191,6 @@ void
 btrfs_qgroup_rescan_resume(struct btrfs_fs_info *fs_info)
 {
  if (fs_info->qgroup_flags & BTRFS_QGROUP_STATUS_FLAG_RESCAN)
-  btrfs_queue_worker(&fs_info->qgroup_rescan_workers,
-       &fs_info->qgroup_rescan_work);
+  btrfs_queue_work(fs_info->qgroup_rescan_workers,
+     &fs_info->qgroup_rescan_work);
 }
-- 
1.7.1