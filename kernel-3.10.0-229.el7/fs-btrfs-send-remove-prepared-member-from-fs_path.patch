From 3795a1f0035fcb847203f11b6e30bf736ca4894d Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:00:58 -0400
Subject: [fs] btrfs: send: remove prepared member from fs_path

Message-id: <1407179109-13714-172-git-send-email-sandeen@redhat.com>
Patchwork-id: 87197
O-Subject: [RHEL7.1 PATCH 171/422] btrfs: send: remove prepared member from fs_path
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: David Sterba <dsterba@suse.cz>

commit b23ab57d485c985c10ee7c03627359bfbba590d8
Author: David Sterba <dsterba@suse.cz>
Date:   Mon Feb 3 19:23:19 2014 +0100

    btrfs: send: remove prepared member from fs_path

    The member is used only to return value back from
    fs_path_prepare_for_add, we can do it locally and save 8 bytes for the
    inline_buf path.

    Signed-off-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/send.c b/fs/btrfs/send.c
index 08edd0a..851ebfd 100644
--- a/fs/btrfs/send.c
+++ b/fs/btrfs/send.c
@@ -51,7 +51,6 @@ struct fs_path {
   struct {
    char *start;
    char *end;
-   char *prepared;
 
    char *buf;
    int buf_len;
@@ -338,7 +337,8 @@ static int fs_path_ensure_buf(struct fs_path *p, int len)
  return 0;
 }
 
-static int fs_path_prepare_for_add(struct fs_path *p, int name_len)
+static int fs_path_prepare_for_add(struct fs_path *p, int name_len,
+       char **prepared)
 {
  int ret;
  int new_len;
@@ -354,11 +354,11 @@ static int fs_path_prepare_for_add(struct fs_path *p, int name_len)
   if (p->start != p->end)
    *--p->start = '/';
   p->start -= name_len;
-  p->prepared = p->start;
+  *prepared = p->start;
  } else {
   if (p->start != p->end)
    *p->end++ = '/';
-  p->prepared = p->end;
+  *prepared = p->end;
   p->end += name_len;
   *p->end = 0;
  }
@@ -370,12 +370,12 @@ out:
 static int fs_path_add(struct fs_path *p, const char *name, int name_len)
 {
  int ret;
+ char *prepared;
 
- ret = fs_path_prepare_for_add(p, name_len);
+ ret = fs_path_prepare_for_add(p, name_len, &prepared);
  if (ret < 0)
   goto out;
- memcpy(p->prepared, name, name_len);
- p->prepared = NULL;
+ memcpy(prepared, name, name_len);
 
 out:
  return ret;
@@ -384,12 +384,12 @@ out:
 static int fs_path_add_path(struct fs_path *p, struct fs_path *p2)
 {
  int ret;
+ char *prepared;
 
- ret = fs_path_prepare_for_add(p, p2->end - p2->start);
+ ret = fs_path_prepare_for_add(p, p2->end - p2->start, &prepared);
  if (ret < 0)
   goto out;
- memcpy(p->prepared, p2->start, p2->end - p2->start);
- p->prepared = NULL;
+ memcpy(prepared, p2->start, p2->end - p2->start);
 
 out:
  return ret;
@@ -400,13 +400,13 @@ static int fs_path_add_from_extent_buffer(struct fs_path *p,
        unsigned long off, int len)
 {
  int ret;
+ char *prepared;
 
- ret = fs_path_prepare_for_add(p, len);
+ ret = fs_path_prepare_for_add(p, len, &prepared);
  if (ret < 0)
   goto out;
 
- read_extent_buffer(eb, p->prepared, off, len);
- p->prepared = NULL;
+ read_extent_buffer(eb, prepared, off, len);
 
 out:
  return ret;
-- 
1.7.1