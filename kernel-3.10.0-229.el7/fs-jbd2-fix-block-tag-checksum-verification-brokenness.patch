From ce5185d65c37ed765e62f15e39ae0d4253e06a61 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:52:36 -0400
Subject: [fs] jbd2: fix block tag checksum verification brokenness

Message-id: <1414058125-4183-3-git-send-email-lczerner@redhat.com>
Patchwork-id: 98130
O-Subject: [RHEL 7.1 PATCH v2 002/171] jbd2: fix block tag checksum verification brokenness
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: "Darrick J. Wong" <darrick.wong@oracle.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit eee06c56784496805b198964c59fa8cd7c00bf48

 Al Viro complained of a ton of bogosity with regards to the jbd2 block
 tag header checksum.  This one checksum is 16 bits, so cut off the
 upper 16 bits and treat it as a 16-bit value and don't mess around
 with be32* conversions.  Fortunately metadata checksumming is still
 "experimental" and not in a shipping e2fsprogs, so there should be few
 users affected by this.

 Reported-by: Al Viro <viro@ZenIV.linux.org.uk>
 Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/jbd2/commit.c b/fs/jbd2/commit.c
index ab3c9d9..a1bb184 100644
--- a/fs/jbd2/commit.c
+++ b/fs/jbd2/commit.c
@@ -343,20 +343,21 @@ static void jbd2_block_tag_csum_set(journal_t *j, journal_block_tag_t *tag,
 {
  struct page *page = bh->b_page;
  __u8 *addr;
- __u32 csum;
+ __u32 csum32;
 
  if (!JBD2_HAS_INCOMPAT_FEATURE(j, JBD2_FEATURE_INCOMPAT_CSUM_V2))
   return;
 
  sequence = cpu_to_be32(sequence);
  addr = kmap_atomic(page);
- csum = jbd2_chksum(j, j->j_csum_seed, (__u8 *)&sequence,
-     sizeof(sequence));
- csum = jbd2_chksum(j, csum, addr + offset_in_page(bh->b_data),
-     bh->b_size);
+ csum32 = jbd2_chksum(j, j->j_csum_seed, (__u8 *)&sequence,
+        sizeof(sequence));
+ csum32 = jbd2_chksum(j, csum32, addr + offset_in_page(bh->b_data),
+        bh->b_size);
  kunmap_atomic(addr);
 
- tag->t_checksum = cpu_to_be32(csum);
+ /* We only have space to store the lower 16 bits of the crc32c. */
+ tag->t_checksum = cpu_to_be16(csum32);
 }
 /*
  * jbd2_journal_commit_transaction
diff --git a/fs/jbd2/recovery.c b/fs/jbd2/recovery.c
index 626846b..d485146 100644
--- a/fs/jbd2/recovery.c
+++ b/fs/jbd2/recovery.c
@@ -399,18 +399,17 @@ static int jbd2_commit_block_csum_verify(journal_t *j, void *buf)
 static int jbd2_block_tag_csum_verify(journal_t *j, journal_block_tag_t *tag,
           void *buf, __u32 sequence)
 {
- __u32 provided, calculated;
+ __u32 csum32;
 
  if (!JBD2_HAS_INCOMPAT_FEATURE(j, JBD2_FEATURE_INCOMPAT_CSUM_V2))
   return 1;
 
  sequence = cpu_to_be32(sequence);
- calculated = jbd2_chksum(j, j->j_csum_seed, (__u8 *)&sequence,
-     sizeof(sequence));
- calculated = jbd2_chksum(j, calculated, buf, j->j_blocksize);
- provided = be32_to_cpu(tag->t_checksum);
+ csum32 = jbd2_chksum(j, j->j_csum_seed, (__u8 *)&sequence,
+        sizeof(sequence));
+ csum32 = jbd2_chksum(j, csum32, buf, j->j_blocksize);
 
- return provided == cpu_to_be32(calculated);
+ return tag->t_checksum == cpu_to_be16(csum32);
 }
 
 static int do_one_pass(journal_t *journal,
-- 
1.7.1