From 688267913e63ef8f30a3c34f029a1b8bbc6de0a3 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:27:00 -0400
Subject: [net] genetlink: pass family to functions using groups

Message-id: <639df970e97078a1420c97790dbd85cb304bc79a.1410528958.git.jbenc@redhat.com>
Patchwork-id: 93960
O-Subject: [RHEL7.1 net PATCH 18/23] genetlink: pass family to functions using groups
Bugzilla: 1140656
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140656
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

RHEL backport: removed modules that we don't have or don't enable. Conflicts
in nl80211.c but the resolution was straightforward.

commit 68eb55031da7c967d954e5f9415cd05f4abdb692
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Nov 19 15:19:38 2013 +0100

    genetlink: pass family to functions using groups

    This doesn't really change anything, but prepares for the
    next patch that will change the APIs to pass the group ID
    within the family, rather than the global group ID.

    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/event.c b/drivers/acpi/event.c
index 1442737..4361e12 100644
--- a/drivers/acpi/event.c
+++ b/drivers/acpi/event.c
@@ -240,7 +240,8 @@ int acpi_bus_generate_netlink_event(const char *device_class,
   return result;
  }
 
- genlmsg_multicast(skb, 0, acpi_event_mcgrp.id, GFP_ATOMIC);
+ genlmsg_multicast(&acpi_event_genl_family,
+     skb, 0, acpi_event_mcgrp.id, GFP_ATOMIC);
  return 0;
 }
 
diff --git a/drivers/net/team/team.c b/drivers/net/team/team.c
index 3b6ec6d..d4da53a 100644
--- a/drivers/net/team/team.c
+++ b/drivers/net/team/team.c
@@ -2713,8 +2713,9 @@ static struct genl_multicast_group team_change_event_mcgrp = {
 static int team_nl_send_multicast(struct sk_buff *skb,
       struct team *team, u32 portid)
 {
- return genlmsg_multicast_netns(dev_net(team->dev), skb, 0,
-           team_change_event_mcgrp.id, GFP_KERNEL);
+ return genlmsg_multicast_netns(&team_nl_family, dev_net(team->dev),
+           skb, 0, team_change_event_mcgrp.id,
+           GFP_KERNEL);
 }
 
 static int team_nl_send_event_options_get(struct team *team,
diff --git a/drivers/scsi/pmcraid.c b/drivers/scsi/pmcraid.c
index bfb72ec..d829edc 100644
--- a/drivers/scsi/pmcraid.c
+++ b/drivers/scsi/pmcraid.c
@@ -1512,7 +1512,8 @@ static int pmcraid_notify_aen(
  }
 
  result =
-  genlmsg_multicast(skb, 0, pmcraid_event_family.id, GFP_ATOMIC);
+  genlmsg_multicast(&pmcraid_event_family, skb, 0,
+      pmcraid_event_family.id, GFP_ATOMIC);
 
  /* If there are no listeners, genlmsg_multicast may return non-zero
   * value.
diff --git a/drivers/thermal/thermal_core.c b/drivers/thermal/thermal_core.c
index d755440..03ec6bf 100644
--- a/drivers/thermal/thermal_core.c
+++ b/drivers/thermal/thermal_core.c
@@ -1910,7 +1910,8 @@ int thermal_generate_netlink_event(struct thermal_zone_device *tz,
   return result;
  }
 
- result = genlmsg_multicast(skb, 0, thermal_event_mcgrp.id, GFP_ATOMIC);
+ result = genlmsg_multicast(&thermal_event_genl_family, skb, 0,
+       thermal_event_mcgrp.id, GFP_ATOMIC);
  if (result)
   dev_err(&tz->device, "Failed to send netlink event:%d", result);
 
diff --git a/fs/quota/netlink.c b/fs/quota/netlink.c
index aa22fe0..a5b5edd 100644
--- a/fs/quota/netlink.c
+++ b/fs/quota/netlink.c
@@ -88,7 +88,7 @@ void quota_send_warning(struct kqid qid, dev_t dev,
   goto attr_err_out;
  genlmsg_end(skb, msg_head);
 
- genlmsg_multicast(skb, 0, quota_mcgrp.id, GFP_NOFS);
+ genlmsg_multicast(&quota_genl_family, skb, 0, quota_mcgrp.id, GFP_NOFS);
  return;
 attr_err_out:
  printk(KERN_ERR "VFS: Not enough space to compose quota message!\n");
diff --git a/include/linux/genl_magic_func.h b/include/linux/genl_magic_func.h
index 4708603..5b9b8ae 100644
--- a/include/linux/genl_magic_func.h
+++ b/include/linux/genl_magic_func.h
@@ -286,7 +286,8 @@ static int CONCAT_(GENL_MAGIC_FAMILY, _genl_multicast_ ## group)( \
   CONCAT_(GENL_MAGIC_FAMILY, _mcg_ ## group).id; \
  if (!group_id)       \
   return -EINVAL;      \
- return genlmsg_multicast(skb, 0, group_id, flags);  \
+ return genlmsg_multicast(&ZZZ_genl_family, skb, 0,  \
+     group_id, flags);   \
 }
 
 #include GENL_MAGIC_INCLUDE_FILE
diff --git a/include/net/genetlink.h b/include/net/genetlink.h
index d626f30..1732903 100644
--- a/include/net/genetlink.h
+++ b/include/net/genetlink.h
@@ -175,7 +175,8 @@ static inline int _genl_register_family_with_ops(struct genl_family *family,
 int genl_unregister_family(struct genl_family *family);
 int genl_register_mc_group(struct genl_family *family,
       struct genl_multicast_group *grp);
-void genl_notify(struct sk_buff *skb, struct net *net, u32 portid,
+void genl_notify(struct genl_family *family,
+   struct sk_buff *skb, struct net *net, u32 portid,
    u32 group, struct nlmsghdr *nlh, gfp_t flags);
 
 struct sk_buff *genlmsg_new_unicast(size_t payload, struct genl_info *info,
@@ -257,13 +258,15 @@ static inline void genlmsg_cancel(struct sk_buff *skb, void *hdr)
 
 /**
  * genlmsg_multicast_netns - multicast a netlink message to a specific netns
+ * @family: the generic netlink family
  * @net: the net namespace
  * @skb: netlink message as socket buffer
  * @portid: own netlink portid to avoid sending to yourself
  * @group: multicast group id
  * @flags: allocation flags
  */
-static inline int genlmsg_multicast_netns(struct net *net, struct sk_buff *skb,
+static inline int genlmsg_multicast_netns(struct genl_family *family,
+       struct net *net, struct sk_buff *skb,
        u32 portid, unsigned int group, gfp_t flags)
 {
  return nlmsg_multicast(net->genl_sock, skb, portid, group, flags);
@@ -271,19 +274,23 @@ static inline int genlmsg_multicast_netns(struct net *net, struct sk_buff *skb,
 
 /**
  * genlmsg_multicast - multicast a netlink message to the default netns
+ * @family: the generic netlink family
  * @skb: netlink message as socket buffer
  * @portid: own netlink portid to avoid sending to yourself
  * @group: multicast group id
  * @flags: allocation flags
  */
-static inline int genlmsg_multicast(struct sk_buff *skb, u32 portid,
+static inline int genlmsg_multicast(struct genl_family *family,
+        struct sk_buff *skb, u32 portid,
         unsigned int group, gfp_t flags)
 {
- return genlmsg_multicast_netns(&init_net, skb, portid, group, flags);
+ return genlmsg_multicast_netns(family, &init_net, skb,
+           portid, group, flags);
 }
 
 /**
  * genlmsg_multicast_allns - multicast a netlink message to all net namespaces
+ * @family: the generic netlink family
  * @skb: netlink message as socket buffer
  * @portid: own netlink portid to avoid sending to yourself
  * @group: multicast group id
@@ -291,7 +298,8 @@ static inline int genlmsg_multicast(struct sk_buff *skb, u32 portid,
  *
  * This function must hold the RTNL or rcu_read_lock().
  */
-int genlmsg_multicast_allns(struct sk_buff *skb, u32 portid,
+int genlmsg_multicast_allns(struct genl_family *family,
+       struct sk_buff *skb, u32 portid,
        unsigned int group, gfp_t flags);
 
 /**
@@ -364,6 +372,7 @@ static inline struct sk_buff *genlmsg_new(size_t payload, gfp_t flags)
 
 /**
  * genl_set_err - report error to genetlink broadcast listeners
+ * @family: the generic netlink family
  * @net: the network namespace to report the error to
  * @portid: the PORTID of a process that we want to skip (if any)
  * @group: the broadcast group that will notice the error
@@ -372,7 +381,8 @@ static inline struct sk_buff *genlmsg_new(size_t payload, gfp_t flags)
  * This function returns the number of broadcast listeners that have set the
  * NETLINK_RECV_NO_ENOBUFS socket option.
  */
-static inline int genl_set_err(struct net *net, u32 portid, u32 group, int code)
+static inline int genl_set_err(struct genl_family *family, struct net *net,
+          u32 portid, u32 group, int code)
 {
  return netlink_set_err(net->genl_sock, portid, group, code);
 }
diff --git a/net/core/drop_monitor.c b/net/core/drop_monitor.c
index 63b8bd4..6775173 100644
--- a/net/core/drop_monitor.c
+++ b/net/core/drop_monitor.c
@@ -120,7 +120,8 @@ static void send_dm_alert(struct work_struct *work)
  skb = reset_per_cpu_data(data);
 
  if (skb)
-  genlmsg_multicast(skb, 0, dm_mcgrp.id, GFP_KERNEL);
+  genlmsg_multicast(&net_drop_monitor_family, skb, 0,
+      dm_mcgrp.id, GFP_KERNEL);
 }
 
 /*
diff --git a/net/ieee802154/netlink.c b/net/ieee802154/netlink.c
index 1a81709..5172f46 100644
--- a/net/ieee802154/netlink.c
+++ b/net/ieee802154/netlink.c
@@ -70,7 +70,7 @@ int ieee802154_nl_mcast(struct sk_buff *msg, unsigned int group)
  if (genlmsg_end(msg, hdr) < 0)
   goto out;
 
- return genlmsg_multicast(msg, 0, group, GFP_ATOMIC);
+ return genlmsg_multicast(&nl802154_family, msg, 0, group, GFP_ATOMIC);
 out:
  nlmsg_free(msg);
  return -ENOBUFS;
diff --git a/net/netlink/genetlink.c b/net/netlink/genetlink.c
index ad92394..137a0e6 100644
--- a/net/netlink/genetlink.c
+++ b/net/netlink/genetlink.c
@@ -904,11 +904,12 @@ static int genl_ctrl_event(int event, struct genl_family *family,
   return PTR_ERR(msg);
 
  if (!family->netnsok) {
-  genlmsg_multicast_netns(&init_net, msg, 0,
+  genlmsg_multicast_netns(&genl_ctrl, &init_net, msg, 0,
      GENL_ID_CTRL, GFP_KERNEL);
  } else {
   rcu_read_lock();
-  genlmsg_multicast_allns(msg, 0, GENL_ID_CTRL, GFP_ATOMIC);
+  genlmsg_multicast_allns(&genl_ctrl, msg, 0,
+     GENL_ID_CTRL, GFP_ATOMIC);
   rcu_read_unlock();
  }
 
@@ -1014,14 +1015,15 @@ static int genlmsg_mcast(struct sk_buff *skb, u32 portid, unsigned long group,
  return err;
 }
 
-int genlmsg_multicast_allns(struct sk_buff *skb, u32 portid, unsigned int group,
-       gfp_t flags)
+int genlmsg_multicast_allns(struct genl_family *family, struct sk_buff *skb,
+       u32 portid, unsigned int group, gfp_t flags)
 {
  return genlmsg_mcast(skb, portid, group, flags);
 }
 EXPORT_SYMBOL(genlmsg_multicast_allns);
 
-void genl_notify(struct sk_buff *skb, struct net *net, u32 portid, u32 group,
+void genl_notify(struct genl_family *family,
+   struct sk_buff *skb, struct net *net, u32 portid, u32 group,
    struct nlmsghdr *nlh, gfp_t flags)
 {
  struct sock *sk = net->genl_sock;
diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index 4188edb..e0c28aa 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -62,10 +62,11 @@
 
 int ovs_net_id __read_mostly;
 
-static void ovs_notify(struct sk_buff *skb, struct genl_info *info,
+static void ovs_notify(struct genl_family *family,
+         struct sk_buff *skb, struct genl_info *info,
          struct genl_multicast_group *grp)
 {
- genl_notify(skb, genl_info_net(info), info->snd_portid,
+ genl_notify(family, skb, genl_info_net(info), info->snd_portid,
       grp->id, info->nlhdr, GFP_KERNEL);
 }
 
@@ -881,9 +882,10 @@ static int ovs_flow_cmd_new_or_set(struct sk_buff *skb, struct genl_info *info)
  ovs_unlock();
 
  if (!IS_ERR(reply))
-  ovs_notify(reply, info, &ovs_dp_flow_multicast_group);
+  ovs_notify(&dp_flow_genl_family, reply, info,
+      &ovs_dp_flow_multicast_group);
  else
-  genl_set_err(sock_net(skb->sk), 0,
+  genl_set_err(&dp_flow_genl_family, sock_net(skb->sk), 0,
         ovs_dp_flow_multicast_group.id, PTR_ERR(reply));
  return 0;
 
@@ -993,7 +995,8 @@ static int ovs_flow_cmd_del(struct sk_buff *skb, struct genl_info *info)
  ovs_flow_free(flow, true);
  ovs_unlock();
 
- ovs_notify(reply, info, &ovs_dp_flow_multicast_group);
+ ovs_notify(&dp_flow_genl_family, reply, info,
+     &ovs_dp_flow_multicast_group);
  return 0;
 unlock:
  ovs_unlock();
@@ -1273,7 +1276,8 @@ static int ovs_dp_cmd_new(struct sk_buff *skb, struct genl_info *info)
 
  ovs_unlock();
 
- ovs_notify(reply, info, &ovs_dp_datapath_multicast_group);
+ ovs_notify(&dp_datapath_genl_family, reply, info,
+     &ovs_dp_datapath_multicast_group);
  return 0;
 
 err_destroy_local_port:
@@ -1340,7 +1344,8 @@ static int ovs_dp_cmd_del(struct sk_buff *skb, struct genl_info *info)
  __dp_destroy(dp);
  ovs_unlock();
 
- ovs_notify(reply, info, &ovs_dp_datapath_multicast_group);
+ ovs_notify(&dp_datapath_genl_family, reply, info,
+     &ovs_dp_datapath_multicast_group);
 
  return 0;
 unlock:
@@ -1365,14 +1370,15 @@ static int ovs_dp_cmd_set(struct sk_buff *skb, struct genl_info *info)
  reply = ovs_dp_cmd_build_info(dp, info, OVS_DP_CMD_NEW);
  if (IS_ERR(reply)) {
   err = PTR_ERR(reply);
-  genl_set_err(sock_net(skb->sk), 0,
+  genl_set_err(&dp_datapath_genl_family, sock_net(skb->sk), 0,
         ovs_dp_datapath_multicast_group.id, err);
   err = 0;
   goto unlock;
  }
 
  ovs_unlock();
- ovs_notify(reply, info, &ovs_dp_datapath_multicast_group);
+ ovs_notify(&dp_datapath_genl_family, reply, info,
+     &ovs_dp_datapath_multicast_group);
 
  return 0;
 unlock:
@@ -1463,7 +1469,7 @@ static const struct nla_policy vport_policy[OVS_VPORT_ATTR_MAX + 1] = {
  [OVS_VPORT_ATTR_OPTIONS] = { .type = NLA_NESTED },
 };
 
-static struct genl_family dp_vport_genl_family = {
+struct genl_family dp_vport_genl_family = {
  .id = GENL_ID_GENERATE,
  .hdrsize = sizeof(struct ovs_header),
  .name = OVS_VPORT_FAMILY,
@@ -1633,7 +1639,8 @@ static int ovs_vport_cmd_new(struct sk_buff *skb, struct genl_info *info)
   goto exit_unlock;
  }
 
- ovs_notify(reply, info, &ovs_dp_vport_multicast_group);
+ ovs_notify(&dp_vport_genl_family, reply, info,
+     &ovs_dp_vport_multicast_group);
 
 exit_unlock:
  ovs_unlock();
@@ -1680,7 +1687,8 @@ static int ovs_vport_cmd_set(struct sk_buff *skb, struct genl_info *info)
  BUG_ON(err < 0);
 
  ovs_unlock();
- ovs_notify(reply, info, &ovs_dp_vport_multicast_group);
+ ovs_notify(&dp_vport_genl_family, reply, info,
+     &ovs_dp_vport_multicast_group);
  return 0;
 
 exit_free:
@@ -1717,7 +1725,8 @@ static int ovs_vport_cmd_del(struct sk_buff *skb, struct genl_info *info)
  err = 0;
  ovs_dp_detach_port(vport);
 
- ovs_notify(reply, info, &ovs_dp_vport_multicast_group);
+ ovs_notify(&dp_vport_genl_family, reply, info,
+     &ovs_dp_vport_multicast_group);
 
 exit_unlock:
  ovs_unlock();
diff --git a/net/openvswitch/datapath.h b/net/openvswitch/datapath.h
index 9d9366f..62619a4 100644
--- a/net/openvswitch/datapath.h
+++ b/net/openvswitch/datapath.h
@@ -181,6 +181,7 @@ static inline struct vport *ovs_vport_ovsl(const struct datapath *dp, int port_n
 }
 
 extern struct notifier_block ovs_dp_device_notifier;
+extern struct genl_family dp_vport_genl_family;
 extern struct genl_multicast_group ovs_dp_vport_multicast_group;
 
 void ovs_dp_process_received_packet(struct vport *, struct sk_buff *);
diff --git a/net/openvswitch/dp_notify.c b/net/openvswitch/dp_notify.c
index 9e3111a..5287212 100644
--- a/net/openvswitch/dp_notify.c
+++ b/net/openvswitch/dp_notify.c
@@ -34,13 +34,14 @@ static void dp_detach_port_notify(struct vport *vport)
        OVS_VPORT_CMD_DEL);
  ovs_dp_detach_port(vport);
  if (IS_ERR(notify)) {
-  genl_set_err(ovs_dp_get_net(dp), 0,
+  genl_set_err(&dp_vport_genl_family, ovs_dp_get_net(dp), 0,
         ovs_dp_vport_multicast_group.id,
         PTR_ERR(notify));
   return;
  }
 
- genlmsg_multicast_netns(ovs_dp_get_net(dp), notify, 0,
+ genlmsg_multicast_netns(&dp_vport_genl_family,
+    ovs_dp_get_net(dp), notify, 0,
     ovs_dp_vport_multicast_group.id,
     GFP_KERNEL);
 }
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index b1275e5..be48e7b 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -6596,7 +6596,7 @@ void cfg80211_testmode_event(struct sk_buff *skb, gfp_t gfp)
 
  nla_nest_end(skb, data);
  genlmsg_end(skb, hdr);
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), skb, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), skb, 0,
     nl80211_testmode_mcgrp.id, gfp);
 }
 EXPORT_SYMBOL(cfg80211_testmode_event);
@@ -9029,7 +9029,7 @@ void nl80211_notify_dev_rename(struct cfg80211_registered_device *rdev)
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_config_mcgrp.id, GFP_KERNEL);
 }
 
@@ -9141,7 +9141,7 @@ void nl80211_send_scan_start(struct cfg80211_registered_device *rdev,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_scan_mcgrp.id, GFP_KERNEL);
 }
 
@@ -9160,7 +9160,7 @@ void nl80211_send_scan_done(struct cfg80211_registered_device *rdev,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_scan_mcgrp.id, GFP_KERNEL);
 }
 
@@ -9179,7 +9179,7 @@ void nl80211_send_scan_aborted(struct cfg80211_registered_device *rdev,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_scan_mcgrp.id, GFP_KERNEL);
 }
 
@@ -9198,7 +9198,7 @@ void nl80211_send_sched_scan_results(struct cfg80211_registered_device *rdev,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_scan_mcgrp.id, GFP_KERNEL);
 }
 
@@ -9216,7 +9216,7 @@ void nl80211_send_sched_scan(struct cfg80211_registered_device *rdev,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_scan_mcgrp.id, GFP_KERNEL);
 }
 
@@ -9271,8 +9271,8 @@ void nl80211_send_reg_change_event(struct regulatory_request *request)
  genlmsg_end(msg, hdr);
 
  rcu_read_lock();
- genlmsg_multicast_allns(msg, 0, nl80211_regulatory_mcgrp.id,
-    GFP_ATOMIC);
+ genlmsg_multicast_allns(&nl80211_fam, msg, 0,
+    nl80211_regulatory_mcgrp.id, GFP_ATOMIC);
  rcu_read_unlock();
 
  return;
@@ -9307,7 +9307,7 @@ static void nl80211_send_mlme_event(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -9399,7 +9399,7 @@ static void nl80211_send_mlme_timeout(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -9455,7 +9455,7 @@ void nl80211_send_connect_result(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -9494,7 +9494,7 @@ void nl80211_send_roamed(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -9532,7 +9532,7 @@ void nl80211_send_disconnected(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, GFP_KERNEL);
  return;
 
@@ -9566,7 +9566,7 @@ void nl80211_send_ibss_bssid(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -9607,7 +9607,7 @@ void cfg80211_notify_new_peer_candidate(struct net_device *dev, const u8 *addr,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -9646,7 +9646,7 @@ void nl80211_michael_mic_failure(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -9699,8 +9699,8 @@ void nl80211_send_beacon_hint_event(struct wiphy *wiphy,
  genlmsg_end(msg, hdr);
 
  rcu_read_lock();
- genlmsg_multicast_allns(msg, 0, nl80211_regulatory_mcgrp.id,
-    GFP_ATOMIC);
+ genlmsg_multicast_allns(&nl80211_fam, msg, 0,
+    nl80211_regulatory_mcgrp.id, GFP_ATOMIC);
  rcu_read_unlock();
 
  return;
@@ -9745,7 +9745,7 @@ static void nl80211_send_remain_on_chan_event(
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -9800,7 +9800,7 @@ void cfg80211_new_sta(struct net_device *dev, const u8 *mac_addr,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
 }
 EXPORT_SYMBOL(cfg80211_new_sta);
@@ -9830,7 +9830,7 @@ void cfg80211_del_sta(struct net_device *dev, const u8 *mac_addr, gfp_t gfp)
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -9866,7 +9866,7 @@ void cfg80211_conn_failed(struct net_device *dev, const u8 *mac_addr,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10032,7 +10032,7 @@ void cfg80211_mgmt_tx_status(struct wireless_dev *wdev, u64 cookie,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10081,7 +10081,7 @@ void cfg80211_cqm_rssi_notify(struct net_device *dev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10126,7 +10126,7 @@ static void nl80211_gtk_rekey_notify(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10184,7 +10184,7 @@ nl80211_pmksa_candidate_notify(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10231,7 +10231,7 @@ static void nl80211_ch_switch_notify(struct cfg80211_registered_device *rdev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10306,7 +10306,7 @@ void cfg80211_cqm_txe_notify(struct net_device *dev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10358,7 +10358,7 @@ nl80211_radar_notify(struct cfg80211_registered_device *rdev,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10405,7 +10405,7 @@ void cfg80211_cqm_pktloss_notify(struct net_device *dev,
 
  genlmsg_end(msg, hdr);
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10450,7 +10450,7 @@ void cfg80211_probe_status(struct net_device *dev, const u8 *addr,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10604,7 +10604,7 @@ void cfg80211_report_wowlan_wakeup(struct wireless_dev *wdev,
  if (err < 0)
   goto free_msg;
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10651,7 +10651,7 @@ void cfg80211_tdls_oper_request(struct net_device *dev, const u8 *peer,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, gfp);
  return;
 
@@ -10739,7 +10739,7 @@ void cfg80211_ft_event(struct net_device *netdev,
   return;
  }
 
- genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+ genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
     nl80211_mlme_mcgrp.id, GFP_KERNEL);
 }
 EXPORT_SYMBOL(cfg80211_ft_event);
-- 
1.7.1