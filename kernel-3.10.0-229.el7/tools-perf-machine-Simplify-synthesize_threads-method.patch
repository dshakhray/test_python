From 55571bd407fdb40e6ec4e39265174d84cb7a23cf Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:27:35 -0400
Subject: [tools] perf/machine: Simplify synthesize_threads method

Message-id: <1408462094-14194-287-git-send-email-jolsa@redhat.com>
Patchwork-id: 88289
O-Subject: [PATCH RHEL7.1 BZ1131394 286/325] perf machine: Simplify synthesize_threads method
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit a33fbd56ec83b5421090b4d8f2032f635e6a9488
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Mon Nov 11 11:36:12 2013 -0300

description
===========
Several tools (top, kvm) don't need to be called back to process each of
the syntheiszed records, instead relying on the machine__process_event
function to change the per machine data structures that represent
threads and mmaps, so provide a way to ask for this common idiom.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
index f5d2c4b..346bb59 100644
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@ -1544,9 +1544,8 @@ static int kvm_events_live(struct perf_kvm_stat *kvm,
  }
  kvm->session->evlist = kvm->evlist;
  perf_session__set_id_hdr_size(kvm->session);
- machine__synthesize_threads(&kvm->session->machines.host, &kvm->tool,
-        &kvm->opts.target, kvm->evlist->threads,
-        perf_event__process, false);
+ machine__synthesize_threads(&kvm->session->machines.host, &kvm->opts.target,
+        kvm->evlist->threads, false);
  err = kvm_live_open_events(kvm);
  if (err)
   goto out;
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 41d1f37..fc68b26 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -480,8 +480,8 @@ static int __cmd_record(struct perf_record *rec, int argc, const char **argv)
       perf_event__synthesize_guest_os, tool);
  }
 
- err = machine__synthesize_threads(machine, tool, &opts->target, evsel_list->threads,
-       process_synthesized_event, opts->sample_address);
+ err = __machine__synthesize_threads(machine, tool, &opts->target, evsel_list->threads,
+         process_synthesized_event, opts->sample_address);
  if (err != 0)
   goto out_delete_session;
 
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index c3a936e..8c520d9 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -950,9 +950,8 @@ static int __cmd_top(struct perf_top *top)
  if (ret)
   goto out_delete;
 
- machine__synthesize_threads(&top->session->machines.host, &top->tool,
-        &opts->target, top->evlist->threads,
-        perf_event__process, false);
+ machine__synthesize_threads(&top->session->machines.host, &opts->target,
+        top->evlist->threads, false);
  ret = perf_top__start_counters(top);
  if (ret)
   goto out_delete;
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 7690324..c3008b1 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -1340,8 +1340,8 @@ static int trace__symbols_init(struct trace *trace, struct perf_evlist *evlist)
  if (trace->host == NULL)
   return -ENOMEM;
 
- err = machine__synthesize_threads(trace->host, &trace->tool, &trace->opts.target,
-       evlist->threads, trace__tool_process, false);
+ err = __machine__synthesize_threads(trace->host, &trace->tool, &trace->opts.target,
+         evlist->threads, trace__tool_process, false);
  if (err)
   symbol__exit();
 
diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index 9f2c61d..680700b 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -1395,9 +1395,9 @@ int machine__for_each_thread(struct machine *machine,
  return rc;
 }
 
-int machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
-    struct perf_target *target, struct thread_map *threads,
-    perf_event__handler_t process, bool data_mmap)
+int __machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
+      struct perf_target *target, struct thread_map *threads,
+      perf_event__handler_t process, bool data_mmap)
 {
  if (perf_target__has_task(target))
   return perf_event__synthesize_thread_map(tool, threads, process, machine, data_mmap);
diff --git a/tools/perf/util/machine.h b/tools/perf/util/machine.h
index 14a89d2..fedd1df 100644
--- a/tools/perf/util/machine.h
+++ b/tools/perf/util/machine.h
@@ -179,7 +179,15 @@ int machine__for_each_thread(struct machine *machine,
         int (*fn)(struct thread *thread, void *p),
         void *priv);
 
-int machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
-    struct perf_target *target, struct thread_map *threads,
-    perf_event__handler_t process, bool data_mmap);
+int __machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
+      struct perf_target *target, struct thread_map *threads,
+      perf_event__handler_t process, bool data_mmap);
+static inline
+int machine__synthesize_threads(struct machine *machine, struct perf_target *target,
+    struct thread_map *threads, bool data_mmap)
+{
+ return __machine__synthesize_threads(machine, NULL, target, threads,
+          perf_event__process, data_mmap);
+}
+
 #endif /* __PERF_MACHINE_H */
-- 
1.7.1