From d16678f73c2ab7f68a5901e464a9c65c954a5c7c Mon Sep 17 00:00:00 2001
From: Denys Vlasenko <dvlasenk@redhat.com>
Date: Thu, 12 Jun 2014 15:26:32 -0400
Subject: [kernel] auditsc: audit_krule mask accesses need bounds checking

Message-id: <1402586792-11377-1-git-send-email-dvlasenk@redhat.com>
Patchwork-id: 83695
O-Subject: [PATCH RHEL7 BZ 1102710] auditsc: audit_krule mask accesses need bounds checking
Bugzilla: 1102710
CVE: CVE-2014-3917
RH-Acked-by: Paul Moore <pmoore@redhat.com>

CVE-2014-3917:
BZ:
https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=1102710

Brew build:
https://brewweb.devel.redhat.com/taskinfo?taskID=7557775

Upstream status of the patch:
upstream commit a3c54931199565930d6d84f4c3456f6440aefd41
Author: Andy Lutomirski <luto@amacapital.net>
Date:   Wed May 28 23:09:58 2014 -0400

    auditsc: audit_krule mask accesses need bounds checking

    Fixes an easy DoS and possible information disclosure.

    This does nothing about the broken state of x32 auditing.

    eparis: If the admin has enabled auditd and has specifically loaded
    audit rules.  This bug has been around since before git.  Wow...

Test Status:
Before the patch, the following causes oops in audit_filter_syscall:
    (1) Activate audit; add any audit rule:
    auditctl -a exit,always -S open -F success=0
    (2) Make a syscall with very large syscall#:
    int main() { return syscall(2*1000*1000*1000, 0, 0, 0, 0, 0, 0); }
After the patch, oops does not happen. Syscall returns ENOSYS.

Signed-off-by: Denys Vlasenko <dvlasenk@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/auditsc.c b/kernel/auditsc.c
index 1e1e900..989c24e 100644
--- a/kernel/auditsc.c
+++ b/kernel/auditsc.c
@@ -720,6 +720,22 @@ static enum audit_state audit_filter_task(struct task_struct *tsk, char **key)
  return AUDIT_BUILD_CONTEXT;
 }
 
+static int audit_in_mask(const struct audit_krule *rule, unsigned long val)
+{
+ int word, bit;
+
+ if (val > 0xffffffff)
+  return false;
+
+ word = AUDIT_WORD(val);
+ if (word >= AUDIT_BITMASK_SIZE)
+  return false;
+
+ bit = AUDIT_BIT(val);
+
+ return rule->mask[word] & bit;
+}
+
 /* At syscall entry and exit time, this filter is called if the
  * audit_state is not low enough that auditing cannot take place, but is
  * also not high enough that we already know we have to write an audit
@@ -737,11 +753,8 @@ static enum audit_state audit_filter_syscall(struct task_struct *tsk,
 
  rcu_read_lock();
  if (!list_empty(list)) {
-  int word = AUDIT_WORD(ctx->major);
-  int bit  = AUDIT_BIT(ctx->major);
-
   list_for_each_entry_rcu(e, list, list) {
-   if ((e->rule.mask[word] & bit) == bit &&
+   if (audit_in_mask(&e->rule, ctx->major) &&
        audit_filter_rules(tsk, &e->rule, ctx, NULL,
             &state, false)) {
     rcu_read_unlock();
@@ -761,20 +774,16 @@ static enum audit_state audit_filter_syscall(struct task_struct *tsk,
 static int audit_filter_inode_name(struct task_struct *tsk,
        struct audit_names *n,
        struct audit_context *ctx) {
- int word, bit;
  int h = audit_hash_ino((u32)n->ino);
  struct list_head *list = &audit_inode_hash[h];
  struct audit_entry *e;
  enum audit_state state;
 
- word = AUDIT_WORD(ctx->major);
- bit  = AUDIT_BIT(ctx->major);
-
  if (list_empty(list))
   return 0;
 
  list_for_each_entry_rcu(e, list, list) {
-  if ((e->rule.mask[word] & bit) == bit &&
+  if (audit_in_mask(&e->rule, ctx->major) &&
       audit_filter_rules(tsk, &e->rule, ctx, n, &state, false)) {
    ctx->current_state = state;
    return 1;
-- 
1.7.1