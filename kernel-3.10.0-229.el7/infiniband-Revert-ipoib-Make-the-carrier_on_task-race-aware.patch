From 1d53183ae18f1caffd929e93eef627e984642da8 Mon Sep 17 00:00:00 2001
From: Doug Ledford <dledford@redhat.com>
Date: Wed, 28 Jan 2015 23:10:36 -0500
Subject: [infiniband] Revert: ipoib: Make the carrier_on_task race aware

Message-id: <9e0ce0a0c2597d73616d63277e236419f7a1b5fe.1422486318.git.dledford@redhat.com>
Patchwork-id: 103876
O-Subject: [Patch RHEL7 7/8] Revert "[infiniband] ipoib: Make the carrier_on_task race aware"
Bugzilla: 1179740
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

This reverts commit 073e73abb87994f247e92aeab7962996c687d6eb.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/ipoib/ipoib_multicast.c b/drivers/infiniband/ulp/ipoib/ipoib_multicast.c
index 7e9cd39..a0a4285 100644
--- a/drivers/infiniband/ulp/ipoib/ipoib_multicast.c
+++ b/drivers/infiniband/ulp/ipoib/ipoib_multicast.c
@@ -353,27 +353,18 @@ void ipoib_mcast_carrier_on_task(struct work_struct *work)
          carrier_on_task);
  struct ib_port_attr attr;
 
+ /*
+  * Take rtnl_lock to avoid racing with ipoib_stop() and
+  * turning the carrier back on while a device is being
+  * removed.
+  */
  if (ib_query_port(priv->ca, priv->port, &attr) ||
      attr.state != IB_PORT_ACTIVE) {
   ipoib_dbg(priv, "Keeping carrier off until IB port is active\n");
   return;
  }
 
- /*
-  * Take rtnl_lock to avoid racing with ipoib_stop() and
-  * turning the carrier back on while a device is being
-  * removed.  However, ipoib_stop() will attempt to flush
-  * the workqueue while holding the rtnl lock, so loop
-  * on trylock until either we get the lock or we see
-  * FLAG_ADMIN_UP go away as that signals that we are bailing
-  * and can safely ignore the carrier on work
-  */
- while (!rtnl_trylock()) {
-  if (!test_bit(IPOIB_FLAG_ADMIN_UP, &priv->flags))
-   return;
-  else
-   msleep(20);
- }
+ rtnl_lock();
  if (!ipoib_cm_admin_enabled(priv->dev))
   dev_set_mtu(priv->dev, min(priv->mcast_mtu, priv->admin_mtu));
  netif_carrier_on(priv->dev);
-- 
1.7.1