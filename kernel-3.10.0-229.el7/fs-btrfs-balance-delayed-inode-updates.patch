From 335031f92fbb31b3afeb1cdf73b056c4f9580f76 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:01:07 -0400
Subject: [fs] btrfs: balance delayed inode updates

Message-id: <1407179109-13714-181-git-send-email-sandeen@redhat.com>
Patchwork-id: 87020
O-Subject: [RHEL7.1 PATCH 180/422] Btrfs: balance delayed inode updates
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Josef Bacik <jbacik@fb.com>

commit c581afc8db4e9aaa8af2246bb72c1bf72825014d
Author: Josef Bacik <jbacik@fb.com>
Date:   Thu Feb 6 16:06:06 2014 -0500

    Btrfs: balance delayed inode updates

    While trying to reproduce a delayed ref problem I noticed the box kept falling
    over using all 80gb of my ram with btrfs_inode's and btrfs_delayed_node's.
    Turns out this is because we only throttle delayed inode updates in
    btrfs_dirty_inode, which doesn't actually get called that often, especially when
    all you are doing is creating a bunch of files.  So balance delayed inode
    updates everytime we create a new inode.  With this patch we no longer use up
    all of our ram with delayed inode updates.  Thanks,

    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index 84be070..1902750 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -5811,6 +5811,7 @@ static int btrfs_mknod(struct inode *dir, struct dentry *dentry,
  }
 out_unlock:
  btrfs_end_transaction(trans, root);
+ btrfs_balance_delayed_items(root);
  btrfs_btree_balance_dirty(root);
  if (drop_inode) {
   inode_dec_link_count(inode);
@@ -5884,6 +5885,7 @@ out_unlock:
   inode_dec_link_count(inode);
   iput(inode);
  }
+ btrfs_balance_delayed_items(root);
  btrfs_btree_balance_dirty(root);
  return err;
 }
@@ -5942,6 +5944,7 @@ static int btrfs_link(struct dentry *old_dentry, struct inode *dir,
  }
 
  btrfs_end_transaction(trans, root);
+ btrfs_balance_delayed_items(root);
 fail:
  if (drop_inode) {
   inode_dec_link_count(inode);
@@ -6008,6 +6011,7 @@ out_fail:
  btrfs_end_transaction(trans, root);
  if (drop_on_err)
   iput(inode);
+ btrfs_balance_delayed_items(root);
  btrfs_btree_balance_dirty(root);
  return err;
 }
-- 
1.7.1