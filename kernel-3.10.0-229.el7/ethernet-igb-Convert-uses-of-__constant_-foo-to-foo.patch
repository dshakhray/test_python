From e92bbfb0f401e43e2695e0ce62af7e9fa8ee1dde Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 26 Aug 2014 14:11:52 -0400
Subject: [ethernet] igb: Convert uses of __constant_<foo> to <foo>

Message-id: <1409062359-13063-35-git-send-email-sassmann@redhat.com>
Patchwork-id: 89199
O-Subject: [RHEL7.1 PATCH 34/81] igb: Convert uses of __constant_<foo> to <foo>
Bugzilla: 1091121
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Joe Perches <joe@perches.com>

The use of __constant_<foo> has been unnecessary for quite awhile now.

Make these uses consistent with the rest of the kernel.

Signed-off-by: Joe Perches <joe@perches.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 7c4d16ffb79540dd157efe1eaebfa513f0ebdd9b)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 46f089d..d175529 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -4592,7 +4592,7 @@ static int igb_tso(struct igb_ring *tx_ring,
  /* ADV DTYP TUCMD MKRLOC/ISCSIHEDLEN */
  type_tucmd = E1000_ADVTXD_TUCMD_L4T_TCP;
 
- if (first->protocol == __constant_htons(ETH_P_IP)) {
+ if (first->protocol == htons(ETH_P_IP)) {
   struct iphdr *iph = ip_hdr(skb);
   iph->tot_len = 0;
   iph->check = 0;
@@ -4648,12 +4648,12 @@ static void igb_tx_csum(struct igb_ring *tx_ring, struct igb_tx_buffer *first)
  } else {
   u8 l4_hdr = 0;
   switch (first->protocol) {
-  case __constant_htons(ETH_P_IP):
+  case htons(ETH_P_IP):
    vlan_macip_lens |= skb_network_header_len(skb);
    type_tucmd |= E1000_ADVTXD_TUCMD_IPV4;
    l4_hdr = ip_hdr(skb)->protocol;
    break;
-  case __constant_htons(ETH_P_IPV6):
+  case htons(ETH_P_IPV6):
    vlan_macip_lens |= skb_network_header_len(skb);
    l4_hdr = ipv6_hdr(skb)->nexthdr;
    break;
@@ -6738,7 +6738,7 @@ static unsigned int igb_get_headlen(unsigned char *data,
  hdr.network += ETH_HLEN;
 
  /* handle any vlan tag if present */
- if (protocol == __constant_htons(ETH_P_8021Q)) {
+ if (protocol == htons(ETH_P_8021Q)) {
   if ((hdr.network - data) > (max_len - VLAN_HLEN))
    return max_len;
 
@@ -6747,7 +6747,7 @@ static unsigned int igb_get_headlen(unsigned char *data,
  }
 
  /* handle L3 protocols */
- if (protocol == __constant_htons(ETH_P_IP)) {
+ if (protocol == htons(ETH_P_IP)) {
   if ((hdr.network - data) > (max_len - sizeof(struct iphdr)))
    return max_len;
 
@@ -6761,7 +6761,7 @@ static unsigned int igb_get_headlen(unsigned char *data,
   /* record next protocol if header is present */
   if (!(hdr.ipv4->frag_off & htons(IP_OFFSET)))
    nexthdr = hdr.ipv4->protocol;
- } else if (protocol == __constant_htons(ETH_P_IPV6)) {
+ } else if (protocol == htons(ETH_P_IPV6)) {
   if ((hdr.network - data) > (max_len - sizeof(struct ipv6hdr)))
    return max_len;
 
-- 
1.7.1