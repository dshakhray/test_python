From 1577981c0e8eedf0f9d6deefb8bb3fd1b8b2d77b Mon Sep 17 00:00:00 2001
From: Paul Moore <pmoore@redhat.com>
Date: Fri, 8 Aug 2014 19:42:59 -0400
Subject: [kernel] capabilities: remove undefined caps from all processes

Message-id: <20140808194259.2183.77361.stgit@localhost>
Patchwork-id: 87557
O-Subject: [RHEL7 PATCH] capabilities: remove undefined caps from all processes
Bugzilla: 1123063
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Eric Paris <eparis@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1123063
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7803053
Upstream: Present in the linux-security tree, see commit ID below
Testing: Tested by myself and others, see the BZ

 commit: 7d8b6c63751cfbbe5eef81a48c22978b3407a3ad
 From: Eric Paris <eparis@redhat.com>
 Date: 2014-07-23 15:36:26 -0400

 CAPABILITIES: remove undefined caps from all processes

 This is effectively a revert of 7b9a7ec565505699f503b4fcf61500dceb36e744
 plus fixing it a different way...

 We found, when trying to run an application from an application which
 had dropped privs that the kernel does security checks on undefined
 capability bits.  This was ESPECIALLY difficult to debug as those
 undefined bits are hidden from /proc/$PID/status.

 Consider a root application which drops all capabilities from ALL 4
 capability sets.  We assume, since the application is going to set
 eff/perm/inh from an array that it will clear not only the defined caps
 less than CAP_LAST_CAP, but also the higher 28ish bits which are
 undefined future capabilities.

 The BSET gets cleared differently.  Instead it is cleared one bit at a
 time.  The problem here is that in security/commoncap.c::cap_task_prctl()
 we actually check the validity of a capability being read.  So any task
 which attempts to 'read all things set in bset' followed by 'unset all
 things set in bset' will not even attempt to unset the undefined bits
 higher than CAP_LAST_CAP.

 So the 'parent' will look something like:
 CapInh: 0000000000000000
 CapPrm: 0000000000000000
 CapEff: 0000000000000000
 CapBnd: ffffffc000000000

 All of this 'should' be fine.  Given that these are undefined bits that
 aren't supposed to have anything to do with permissions.  But they do...

 So lets now consider a task which cleared the eff/perm/inh completely
 and cleared all of the valid caps in the bset (but not the invalid caps
 it couldn't read out of the kernel).  We know that this is exactly what
 the libcap-ng library does and what the go capabilities library does.
 They both leave you in that above situation if you try to clear all of
 you capapabilities from all 4 sets.  If that root task calls execve()
 the child task will pick up all caps not blocked by the bset.  The bset
 however does not block bits higher than CAP_LAST_CAP.  So now the child
 task has bits in eff which are not in the parent.  These are
 'meaningless' undefined bits, but still bits which the parent doesn't
 have.

 The problem is now in cred_cap_issubset() (or any operation which does a
 subset test) as the child, while a subset for valid cap bits, is not a
 subset for invalid cap bits!  So now we set durring commit creds that
 the child is not dumpable.  Given it is 'more priv' than its parent.  It
 also means the parent cannot ptrace the child and other stupidity.

 The solution here:
 1) stop hiding capability bits in status
  This makes debugging easier!

 2) stop giving any task undefined capability bits.  it's simple, it you
 don't put those invalid bits in CAP_FULL_SET you won't get them in init
 and you won't get them in any other task either.
  This fixes the cap_issubset() tests and resulting fallout (which
  made the init task in a docker container untraceable among other
  things)

 3) mask out undefined bits when sys_capset() is called as it might use
 ~0, ~0 to denote 'all capabilities' for backward/forward compatibility.
  This lets 'capsh --caps="all=eip" -- -c /bin/bash' run.

 4) mask out undefined bit when we read a file capability off of disk as
 again likely all bits are set in the xattr for forward/backward
 compatibility.
  This lets 'setcap all+pe /bin/bash; /bin/bash' run

 Signed-off-by: Eric Paris <eparis@redhat.com>
 Reviewed-by: Kees Cook <keescook@chromium.org>
 Cc: Andrew Vagin <avagin@openvz.org>
 Cc: Andrew G. Morgan <morgan@kernel.org>
 Cc: Serge E. Hallyn <serge.hallyn@canonical.com>
 Cc: Kees Cook <keescook@chromium.org>
 Cc: Steve Grubb <sgrubb@redhat.com>
 Cc: Dan Walsh <dwalsh@redhat.com>
 Cc: stable@vger.kernel.org
 Signed-off-by: James Morris <james.l.morris@oracle.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/proc/array.c b/fs/proc/array.c
index 1bd2077..fafb03d 100644
--- a/fs/proc/array.c
+++ b/fs/proc/array.c
@@ -306,15 +306,11 @@ static void render_cap_t(struct seq_file *m, const char *header,
  seq_puts(m, header);
  CAP_FOR_EACH_U32(__capi) {
   seq_printf(m, "%08x",
-      a->cap[(_KERNEL_CAPABILITY_U32S-1) - __capi]);
+      a->cap[CAP_LAST_U32 - __capi]);
  }
  seq_putc(m, '\n');
 }
 
-/* Remove non-existent capabilities */
-#define NORM_CAPS(v) (v.cap[CAP_TO_INDEX(CAP_LAST_CAP)] &= \
-    CAP_TO_MASK(CAP_LAST_CAP + 1) - 1)
-
 static inline void task_cap(struct seq_file *m, struct task_struct *p)
 {
  const struct cred *cred;
@@ -328,11 +324,6 @@ static inline void task_cap(struct seq_file *m, struct task_struct *p)
  cap_bset = cred->cap_bset;
  rcu_read_unlock();
 
- NORM_CAPS(cap_inheritable);
- NORM_CAPS(cap_permitted);
- NORM_CAPS(cap_effective);
- NORM_CAPS(cap_bset);
-
  render_cap_t(m, "CapInh:\t", &cap_inheritable);
  render_cap_t(m, "CapPrm:\t", &cap_permitted);
  render_cap_t(m, "CapEff:\t", &cap_effective);
diff --git a/include/linux/capability.h b/include/linux/capability.h
index d9a4f7f..8a76085 100644
--- a/include/linux/capability.h
+++ b/include/linux/capability.h
@@ -78,8 +78,11 @@ extern const kernel_cap_t __cap_init_eff_set;
 # error Fix up hand-coded capability macro initializers
 #else /* HAND-CODED capability initializers */
 
+#define CAP_LAST_U32   ((_KERNEL_CAPABILITY_U32S) - 1)
+#define CAP_LAST_U32_VALID_MASK  (CAP_TO_MASK(CAP_LAST_CAP + 1) -1)
+
 # define CAP_EMPTY_SET    ((kernel_cap_t){{ 0, 0 }})
-# define CAP_FULL_SET     ((kernel_cap_t){{ ~0, ~0 }})
+# define CAP_FULL_SET     ((kernel_cap_t){{ ~0, CAP_LAST_U32_VALID_MASK }})
 # define CAP_FS_SET       ((kernel_cap_t){{ CAP_FS_MASK_B0 \
         | CAP_TO_MASK(CAP_LINUX_IMMUTABLE), \
         CAP_FS_MASK_B1 } })
diff --git a/kernel/audit.c b/kernel/audit.c
index e89c076..f6badb2 100644
--- a/kernel/audit.c
+++ b/kernel/audit.c
@@ -1538,7 +1538,7 @@ void audit_log_cap(struct audit_buffer *ab, char *prefix, kernel_cap_t *cap)
  audit_log_format(ab, " %s=", prefix);
  CAP_FOR_EACH_U32(i) {
   audit_log_format(ab, "%08x",
-     cap->cap[(_KERNEL_CAPABILITY_U32S-1) - i]);
+     cap->cap[CAP_LAST_U32 - i]);
  }
 }
 
diff --git a/kernel/capability.c b/kernel/capability.c
index a4b6744..0a843d5 100644
--- a/kernel/capability.c
+++ b/kernel/capability.c
@@ -268,6 +268,10 @@ SYSCALL_DEFINE2(capset, cap_user_header_t, header, const cap_user_data_t, data)
   i++;
  }
 
+ effective.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;
+ permitted.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;
+ inheritable.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;
+
  new = prepare_creds();
  if (!new)
   return -ENOMEM;
diff --git a/security/commoncap.c b/security/commoncap.c
index c44b6fe..c9219a6 100644
--- a/security/commoncap.c
+++ b/security/commoncap.c
@@ -421,6 +421,9 @@ int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data
   cpu_caps->inheritable.cap[i] = le32_to_cpu(caps.data[i].inheritable);
  }
 
+ cpu_caps->permitted.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;
+ cpu_caps->inheritable.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;
+
  return 0;
 }
 
-- 
1.7.1