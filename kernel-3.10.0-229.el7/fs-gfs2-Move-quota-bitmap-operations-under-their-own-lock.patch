From b4657ffb9cf75f13afdd28875248b8fecae1b471 Mon Sep 17 00:00:00 2001
From: Abhijith Das <adas@redhat.com>
Date: Fri, 15 Aug 2014 19:56:40 -0400
Subject: [fs] gfs2: Move quota bitmap operations under their own lock

Message-id: <1408132603-52384-15-git-send-email-adas@redhat.com>
Patchwork-id: 87815
O-Subject: [RHEL7.1 PATCH 14/17] GFS2: Move quota bitmap operations under their own lock
Bugzilla: 1026406
RH-Acked-by: Robert S Peterson <rpeterso@redhat.com>
RH-Acked-by: Steven Whitehouse <swhiteho@redhat.com>

Gradually, the global qd_lock is being used for less and less.
After this patch it will only be used for the per super block
list whose purpose is to allow syncing of changes back to the
master quota file from the local quota changes file. Fixing
up that process to make it more efficient will be the subject
of a later patch, however this patch removes another barrier
to doing that.

Resolves: rhbz#1026406
Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
Cc: Abhijith Das <adas@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/gfs2/incore.h b/fs/gfs2/incore.h
index 1d672a2..73d987d 100644
--- a/fs/gfs2/incore.h
+++ b/fs/gfs2/incore.h
@@ -731,6 +731,7 @@ struct gfs2_sbd {
 
  unsigned int sd_quota_slots;
  unsigned long *sd_quota_bitmap;
+ spinlock_t sd_bitmap_lock;
 
  u64 sd_quota_sync_gen;
 
diff --git a/fs/gfs2/ops_fstype.c b/fs/gfs2/ops_fstype.c
index 88acebc..902da6b 100644
--- a/fs/gfs2/ops_fstype.c
+++ b/fs/gfs2/ops_fstype.c
@@ -98,6 +98,7 @@ static struct gfs2_sbd *init_sbd(struct super_block *sb)
  init_waitqueue_head(&sdp->sd_quota_wait);
  INIT_LIST_HEAD(&sdp->sd_trunc_list);
  spin_lock_init(&sdp->sd_trunc_lock);
+ spin_lock_init(&sdp->sd_bitmap_lock);
 
  spin_lock_init(&sdp->sd_log_lock);
  atomic_set(&sdp->sd_log_pinned, 0);
diff --git a/fs/gfs2/quota.c b/fs/gfs2/quota.c
index bc62eeb..fb7b368 100644
--- a/fs/gfs2/quota.c
+++ b/fs/gfs2/quota.c
@@ -76,6 +76,7 @@
 #define GFS2_QD_HASH_MASK       (GFS2_QD_HASH_SIZE - 1)
 
 /* Lock order: qd_lock -> bucket lock -> qd->lockref.lock -> lru lock */
+/*                     -> sd_bitmap_lock                              */
 static DEFINE_SPINLOCK(qd_lock);
 struct list_lru gfs2_qd_lru;
 
@@ -310,7 +311,7 @@ static int slot_get(struct gfs2_quota_data *qd)
  unsigned int bit;
  int error = 0;
 
- spin_lock(&qd_lock);
+ spin_lock(&sdp->sd_bitmap_lock);
  if (qd->qd_slot_count != 0)
   goto out;
 
@@ -322,7 +323,7 @@ static int slot_get(struct gfs2_quota_data *qd)
 out:
   qd->qd_slot_count++;
  }
- spin_unlock(&qd_lock);
+ spin_unlock(&sdp->sd_bitmap_lock);
 
  return error;
 }
@@ -331,23 +332,23 @@ static void slot_hold(struct gfs2_quota_data *qd)
 {
  struct gfs2_sbd *sdp = qd->qd_sbd;
 
- spin_lock(&qd_lock);
+ spin_lock(&sdp->sd_bitmap_lock);
  gfs2_assert(sdp, qd->qd_slot_count);
  qd->qd_slot_count++;
- spin_unlock(&qd_lock);
+ spin_unlock(&sdp->sd_bitmap_lock);
 }
 
 static void slot_put(struct gfs2_quota_data *qd)
 {
  struct gfs2_sbd *sdp = qd->qd_sbd;
 
- spin_lock(&qd_lock);
+ spin_lock(&sdp->sd_bitmap_lock);
  gfs2_assert(sdp, qd->qd_slot_count);
  if (!--qd->qd_slot_count) {
   BUG_ON(!test_and_clear_bit(qd->qd_slot, sdp->sd_quota_bitmap));
   qd->qd_slot = -1;
  }
- spin_unlock(&qd_lock);
+ spin_unlock(&sdp->sd_bitmap_lock);
 }
 
 static int bh_get(struct gfs2_quota_data *qd)
@@ -425,8 +426,7 @@ static int qd_check_sync(struct gfs2_sbd *sdp, struct gfs2_quota_data *qd,
  list_move_tail(&qd->qd_list, &sdp->sd_quota_list);
  set_bit(QDF_LOCKED, &qd->qd_flags);
  qd->qd_change_sync = qd->qd_change;
- gfs2_assert_warn(sdp, qd->qd_slot_count);
- qd->qd_slot_count++;
+ slot_hold(qd);
  return 1;
 }
 
-- 
1.7.1