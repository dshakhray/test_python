From 00fdf6ab071ad70f833369302b085f89ddc7833f Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:26:19 -0400
Subject: [md] raid5: avoid livelock caused by non-aligned writes

Message-id: <1409563584-9000-78-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 90016
O-Subject: [RHEL7.1 PATCH 77/82] md/raid5: avoid livelock caused by non-aligned writes.
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: NeilBrown <neilb@suse.de>

If a stripe in a raid6 array received a write to each data block while
the array is degraded, and if any of these writes to a missing device
are not page-aligned, then a live-lock happens.

In this case the P and Q blocks need to be read so that the part of
the missing block which is *not* being updated by the write can be
constructed.  Due to a logic error, these blocks are not loaded, so
the update cannot proceed and the stripe is 'handled' repeatedly in an
infinite loop.

This bug is unlikely as most writes are page aligned.  However as it
can lead to a livelock it is suitable for -stable.  It was introduced
in 3.16.

Cc: stable@vger.kernel.org (v3.16)
Fixed: 67f455486d2ea20b2d94d6adf5b9b783d079e321
Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit a40687ff73a5b14909d6aa522f7d778b158911c5)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index b9e17fb..f16933d 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -2922,7 +2922,7 @@ static int fetch_block(struct stripe_head *sh, struct stripe_head_state *s,
        (!test_bit(R5_Insync, &dev->flags) || test_bit(STRIPE_PREREAD_ACTIVE, &sh->state)) &&
        !test_bit(R5_OVERWRITE, &fdev[0]->flags)) ||
       (sh->raid_conf->level == 6 && s->failed && s->to_write &&
-       s->to_write < sh->raid_conf->raid_disks - 2 &&
+       s->to_write - s->non_overwrite < sh->raid_conf->raid_disks - 2 &&
        (!test_bit(R5_Insync, &dev->flags) || test_bit(STRIPE_PREREAD_ACTIVE, &sh->state))))) {
   /* we would like to get this block, possibly by computing it,
    * otherwise read it if the backing disk is insync
-- 
1.7.1