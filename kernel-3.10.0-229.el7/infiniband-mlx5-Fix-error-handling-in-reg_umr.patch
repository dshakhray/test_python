From 42889b732b6dc4177cfcb0724fc760be1298bf47 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 12:01:03 -0400
Subject: [infiniband] mlx5: Fix error handling in reg_umr

Message-id: <e90e9df25e84b4a65c489601c5d9b23d4e97eab0.1410425016.git.avadai@redhat.com>
Patchwork-id: 93747
O-Subject: [Patch RHEL7.1 V1 127/197] IB/mlx5: Fix error handling in reg_umr
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Haggai Eran <haggaie@mellanox.com>

If ib_post_send fails when posting the UMR work request in reg_umr,
the code doesn't release the temporary pas buffer allocated, and
doesn't dma_unmap it.

Signed-off-by: Haggai Eran <haggaie@mellanox.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 096f7e72c604e983e14b84b84fc37593fc433585)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/hw/mlx5/mr.c b/drivers/infiniband/hw/mlx5/mr.c
index 81392b2..ad58985 100644
--- a/drivers/infiniband/hw/mlx5/mr.c
+++ b/drivers/infiniband/hw/mlx5/mr.c
@@ -730,7 +730,7 @@ static struct mlx5_ib_mr *reg_umr(struct ib_pd *pd, struct ib_umem *umem,
  struct mlx5_ib_mr *mr;
  struct ib_sge sg;
  int size = sizeof(u64) * npages;
- int err;
+ int err = 0;
  int i;
 
  for (i = 0; i < 1; i++) {
@@ -751,7 +751,7 @@ static struct mlx5_ib_mr *reg_umr(struct ib_pd *pd, struct ib_umem *umem,
  mr->pas = kmalloc(size + MLX5_UMR_ALIGN - 1, GFP_KERNEL);
  if (!mr->pas) {
   err = -ENOMEM;
-  goto error;
+  goto free_mr;
  }
 
  mlx5_ib_populate_pas(dev, umem, page_shift,
@@ -760,9 +760,8 @@ static struct mlx5_ib_mr *reg_umr(struct ib_pd *pd, struct ib_umem *umem,
  mr->dma = dma_map_single(ddev, mr_align(mr->pas, MLX5_UMR_ALIGN), size,
      DMA_TO_DEVICE);
  if (dma_mapping_error(ddev, mr->dma)) {
-  kfree(mr->pas);
   err = -ENOMEM;
-  goto error;
+  goto free_pas;
  }
 
  memset(&wr, 0, sizeof(wr));
@@ -778,26 +777,28 @@ static struct mlx5_ib_mr *reg_umr(struct ib_pd *pd, struct ib_umem *umem,
  err = ib_post_send(umrc->qp, &wr, &bad);
  if (err) {
   mlx5_ib_warn(dev, "post send failed, err %d\n", err);
-  up(&umrc->sem);
-  goto error;
+  goto unmap_dma;
  }
  wait_for_completion(&mr->done);
- up(&umrc->sem);
+ if (mr->status != IB_WC_SUCCESS) {
+  mlx5_ib_warn(dev, "reg umr failed\n");
+  err = -EFAULT;
+ }
 
+unmap_dma:
+ up(&umrc->sem);
  dma_unmap_single(ddev, mr->dma, size, DMA_TO_DEVICE);
+
+free_pas:
  kfree(mr->pas);
 
- if (mr->status != IB_WC_SUCCESS) {
-  mlx5_ib_warn(dev, "reg umr failed\n");
-  err = -EFAULT;
-  goto error;
+free_mr:
+ if (err) {
+  free_cached_mr(dev, mr);
+  return ERR_PTR(err);
  }
 
  return mr;
-
-error:
- free_cached_mr(dev, mr);
- return ERR_PTR(err);
 }
 
 static struct mlx5_ib_mr *reg_create(struct ib_pd *pd, u64 virt_addr,
-- 
1.7.1