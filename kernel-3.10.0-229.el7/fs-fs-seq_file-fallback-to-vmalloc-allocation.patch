From 69077d9764e99dd08380e924c098ec0d00d4fdce Mon Sep 17 00:00:00 2001
From: Ian Kent <ikent@redhat.com>
Date: Mon, 1 Sep 2014 00:19:48 -0400
Subject: [fs] fs: seq_file: fallback to vmalloc allocation

Message-id: <20140901001948.3450.82896.stgit@perseus.themaw.net>
Patchwork-id: 89935
O-Subject: [RHEL-7.1 PATCH 3/3] fs: seq_file: fallback to vmalloc allocation
Bugzilla: 1095623
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Heiko Carstens <heiko.carstens@de.ibm.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1095623
Upstream commit: 058504ed

edit: imk
This patch has been altered to add a function seq_buf_free() because
the upstream interrupt context independent kvfree() function is not
available in the current rhel-7.0 kernel. The change to backport that
functionality looked like a bigger job than is justified for this
change so I added the function instead.
end edit: imk

There are a couple of seq_files which use the single_open() interface.
This interface requires that the whole output must fit into a single
buffer.

E.g.  for /proc/stat allocation failures have been observed because an
order-4 memory allocation failed due to memory fragmentation.  In such
situations reading /proc/stat is not possible anymore.

Therefore change the seq_file code to fallback to vmalloc allocations
which will usually result in a couple of order-0 allocations and hence
also work if memory is fragmented.

For reference a call trace where reading from /proc/stat failed:

  sadc: page allocation failure: order:4, mode:0x1040d0
  CPU: 1 PID: 192063 Comm: sadc Not tainted 3.10.0-123.el7.s390x #1
  [...]
  Call Trace:
    show_stack+0x6c/0xe8
    warn_alloc_failed+0xd6/0x138
    __alloc_pages_nodemask+0x9da/0xb68
    __get_free_pages+0x2e/0x58
    kmalloc_order_trace+0x44/0xc0
    stat_open+0x5a/0xd8
    proc_reg_open+0x8a/0x140
    do_dentry_open+0x1bc/0x2c8
    finish_open+0x46/0x60
    do_last+0x382/0x10d0
    path_openat+0xc8/0x4f8
    do_filp_open+0x46/0xa8
    do_sys_open+0x114/0x1f0
    sysc_tracego+0x14/0x1a

Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
Tested-by: David Rientjes <rientjes@google.com>
Cc: Ian Kent <raven@themaw.net>
Cc: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
Cc: Thorsten Diehl <thorsten.diehl@de.ibm.com>
Cc: Andrea Righi <andrea@betterlinux.com>
Cc: Christoph Hellwig <hch@infradead.org>
Cc: Al Viro <viro@zeniv.linux.org.uk>
Cc: Stefan Bader <stefan.bader@canonical.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/seq_file.c b/fs/seq_file.c
index 092951e..4159ff8 100644
--- a/fs/seq_file.c
+++ b/fs/seq_file.c
@@ -8,8 +8,10 @@
 #include <linux/fs.h>
 #include <linux/export.h>
 #include <linux/seq_file.h>
+#include <linux/vmalloc.h>
 #include <linux/slab.h>
 #include <linux/cred.h>
+#include <linux/mm.h>
 
 #include <asm/uaccess.h>
 #include <asm/page.h>
@@ -30,6 +32,24 @@ static void seq_set_overflow(struct seq_file *m)
  m->count = m->size;
 }
 
+static void *seq_buf_alloc(unsigned long size)
+{
+ void *buf;
+
+ buf = kmalloc(size, GFP_KERNEL | __GFP_NOWARN);
+ if (!buf && size > PAGE_SIZE)
+  buf = vmalloc(size);
+ return buf;
+}
+
+static void seq_buf_free(const void *buf)
+{
+ if (unlikely(is_vmalloc_addr(buf)))
+  vfree(buf);
+ else
+  kfree(buf);
+}
+
 /**
  * seq_open - initialize sequential file
  * @file: file we initialize
@@ -96,7 +116,7 @@ static int traverse(struct seq_file *m, loff_t offset)
   return 0;
  }
  if (!m->buf) {
-  m->buf = kmalloc(m->size = PAGE_SIZE, GFP_KERNEL);
+  m->buf = seq_buf_alloc(m->size = PAGE_SIZE);
   if (!m->buf)
    return -ENOMEM;
  }
@@ -135,9 +155,9 @@ static int traverse(struct seq_file *m, loff_t offset)
 
 Eoverflow:
  m->op->stop(m, p);
- kfree(m->buf);
+ seq_buf_free(m->buf);
  m->count = 0;
- m->buf = kmalloc(m->size <<= 1, GFP_KERNEL);
+ m->buf = seq_buf_alloc(m->size <<= 1);
  return !m->buf ? -ENOMEM : -EAGAIN;
 }
 
@@ -192,7 +212,7 @@ ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
 
  /* grab buffer if we didn't have one */
  if (!m->buf) {
-  m->buf = kmalloc(m->size = PAGE_SIZE, GFP_KERNEL);
+  m->buf = seq_buf_alloc(m->size = PAGE_SIZE);
   if (!m->buf)
    goto Enomem;
  }
@@ -232,9 +252,9 @@ ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
   if (m->count < m->size)
    goto Fill;
   m->op->stop(m, p);
-  kfree(m->buf);
+  seq_buf_free(m->buf);
   m->count = 0;
-  m->buf = kmalloc(m->size <<= 1, GFP_KERNEL);
+  m->buf = seq_buf_alloc(m->size <<= 1);
   if (!m->buf)
    goto Enomem;
   m->version = 0;
@@ -350,7 +370,7 @@ EXPORT_SYMBOL(seq_lseek);
 int seq_release(struct inode *inode, struct file *file)
 {
  struct seq_file *m = file->private_data;
- kfree(m->buf);
+ seq_buf_free(m->buf);
  kfree(m);
  return 0;
 }
@@ -605,13 +625,13 @@ EXPORT_SYMBOL(single_open);
 int single_open_size(struct file *file, int (*show)(struct seq_file *, void *),
   void *data, size_t size)
 {
- char *buf = kmalloc(size, GFP_KERNEL);
+ char *buf = seq_buf_alloc(size);
  int ret;
  if (!buf)
   return -ENOMEM;
  ret = single_open(file, show, data);
  if (ret) {
-  kfree(buf);
+  seq_buf_free(buf);
   return ret;
  }
  ((struct seq_file *)file->private_data)->buf = buf;
-- 
1.7.1