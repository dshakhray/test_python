From 9189a38dce1c870371426653b221bb8e7c4fd1cc Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 11:59:22 -0400
Subject: [infiniband] core: Fix kobject leak on device register error flow

Message-id: <3b99ec5a7ce02811c04430465eebf2108af48ab2.1410425016.git.avadai@redhat.com>
Patchwork-id: 93587
O-Subject: [Patch RHEL7.1 V1 026/197] IB/core: Fix kobject leak on device register error flow
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Haggai Eran <haggaie@mellanox.com>

The ports kobject isn't being released during error flow in device
registration.  This patch refactors the ports kobject cleanup into a
single function called from both the error flow in device registration
and from the unregistration function.

A couple of attributes aren't being deleted (iw_stats_group, and
ib_class_attributes).  While this may be handled implicitly by the
destruction of their kobjects, it seems better to handle all the
attributes the same way.

Signed-off-by: Haggai Eran <haggaie@mellanox.com>

[ Make free_port_list_attributes() static.  - Roland ]

Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 584482ac80e13250061fcc85ea8a68c6a31d5033)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/core/sysfs.c b/drivers/infiniband/core/sysfs.c
index 68fa798..cbd0383 100644
--- a/drivers/infiniband/core/sysfs.c
+++ b/drivers/infiniband/core/sysfs.c
@@ -816,6 +816,22 @@ static struct attribute_group iw_stats_group = {
  .attrs = iw_proto_stats_attrs,
 };
 
+static void free_port_list_attributes(struct ib_device *device)
+{
+ struct kobject *p, *t;
+
+ list_for_each_entry_safe(p, t, &device->port_list, entry) {
+  struct ib_port *port = container_of(p, struct ib_port, kobj);
+  list_del(&p->entry);
+  sysfs_remove_group(p, &pma_group);
+  sysfs_remove_group(p, &port->pkey_group);
+  sysfs_remove_group(p, &port->gid_group);
+  kobject_put(p);
+ }
+
+ kobject_put(device->ports_parent);
+}
+
 int ib_device_register_sysfs(struct ib_device *device,
         int (*port_callback)(struct ib_device *,
         u8, struct kobject *))
@@ -869,19 +885,7 @@ int ib_device_register_sysfs(struct ib_device *device,
  return 0;
 
 err_put:
- {
-  struct kobject *p, *t;
-  struct ib_port *port;
-
-  list_for_each_entry_safe(p, t, &device->port_list, entry) {
-   list_del(&p->entry);
-   port = container_of(p, struct ib_port, kobj);
-   sysfs_remove_group(p, &pma_group);
-   sysfs_remove_group(p, &port->pkey_group);
-   sysfs_remove_group(p, &port->gid_group);
-   kobject_put(p);
-  }
- }
+ free_port_list_attributes(device);
 
 err_unregister:
  device_unregister(class_dev);
@@ -892,22 +896,18 @@ err:
 
 void ib_device_unregister_sysfs(struct ib_device *device)
 {
- struct kobject *p, *t;
- struct ib_port *port;
-
  /* Hold kobject until ib_dealloc_device() */
- kobject_get(&device->dev.kobj);
+ struct kobject *kobj_dev = kobject_get(&device->dev.kobj);
+ int i;
 
- list_for_each_entry_safe(p, t, &device->port_list, entry) {
-  list_del(&p->entry);
-  port = container_of(p, struct ib_port, kobj);
-  sysfs_remove_group(p, &pma_group);
-  sysfs_remove_group(p, &port->pkey_group);
-  sysfs_remove_group(p, &port->gid_group);
-  kobject_put(p);
- }
+ if (device->node_type == RDMA_NODE_RNIC && device->get_protocol_stats)
+  sysfs_remove_group(kobj_dev, &iw_stats_group);
+
+ free_port_list_attributes(device);
+
+ for (i = 0; i < ARRAY_SIZE(ib_class_attributes); ++i)
+  device_remove_file(&device->dev, ib_class_attributes[i]);
 
- kobject_put(device->ports_parent);
  device_unregister(&device->dev);
 }
 
-- 
1.7.1