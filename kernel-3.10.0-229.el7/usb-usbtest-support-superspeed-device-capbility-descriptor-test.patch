From bd7704df7cbfa9324082a73ce876ea8eaa2b1720 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:03:48 -0400
Subject: [usb] usbtest: support superspeed device capbility descriptor test

Message-id: <1410887463-20674-157-git-send-email-dzickus@redhat.com>
Patchwork-id: 95197
O-Subject: [RHEL7 PATCH 156/591] usb: usbtest: support superspeed device capbility descriptor test
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit b8fef79518f6a6843e53a4d578c20873ce742a1f
Author: Huang Rui <ray.huang@amd.com>
Date:   Wed Oct 30 11:27:39 2013 +0800

    usb: usbtest: support superspeed device capbility descriptor test

    In Test 9 of usbtest module, it is used for performing chapter 9 tests N
    times.

    SuperSpeed USB Device Capability descriptor is one of the generic
    device-level capbility descriptors which added in section 9.6.2.2 of USB
    3.0 spec.

    This patch adds to support getting SuperSpeed USB Device Capability
    descriptor test scenario for USB 3.0.

    Signed-off-by: Huang Rui <ray.huang@amd.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/misc/usbtest.c b/drivers/usb/misc/usbtest.c
index 1c78e74..d6fcbc4 100644
--- a/drivers/usb/misc/usbtest.c
+++ b/drivers/usb/misc/usbtest.c
@@ -628,6 +628,35 @@ static int is_good_ext(struct usbtest_dev *tdev, u8 *buf)
  return 1;
 }
 
+static int is_good_ss_cap(struct usbtest_dev *tdev, u8 *buf)
+{
+ struct usb_ss_cap_descriptor *ss;
+
+ ss = (struct usb_ss_cap_descriptor *) buf;
+
+ if (ss->bLength != USB_DT_USB_SS_CAP_SIZE) {
+  ERROR(tdev, "bogus superspeed device capability descriptor length\n");
+  return 0;
+ }
+
+ /*
+  * only bit[1] of bmAttributes is used for LTM and others are
+  * reserved
+  */
+ if (ss->bmAttributes & ~0x02) { /* reserved == 0 */
+  ERROR(tdev, "reserved bits set in bmAttributes\n");
+  return 0;
+ }
+
+ /* bits[0:3] of wSpeedSupported is used and others are reserved */
+ if (le16_to_cpu(ss->wSpeedSupported) & ~0x0f) { /* reserved == 0 */
+  ERROR(tdev, "reserved bits set in wSpeedSupported\n");
+  return 0;
+ }
+
+ return 1;
+}
+
 /* sanity test for standard requests working with usb_control_mesg() and some
  * of the utility functions which use it.
  *
@@ -773,6 +802,14 @@ static int ch9_postconfig(struct usbtest_dev *dev)
      return -EDOM;
     }
     break;
+   case USB_SS_CAP_TYPE:
+    if (buf + USB_DT_USB_SS_CAP_SIZE >
+      dev->buf + total ||
+      !is_good_ss_cap(dev, buf)) {
+     dev_err(&iface->dev, "bogus superspeed device capability descriptor\n");
+     return -EDOM;
+    }
+    break;
    default:
     break;
    }
-- 
1.7.1