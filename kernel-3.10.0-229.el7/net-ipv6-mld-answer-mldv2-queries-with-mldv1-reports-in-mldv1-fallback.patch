From 8cbdb4865604a9435aecbc0a8dcfaa4d51777c12 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Thu, 9 Oct 2014 16:44:16 -0400
Subject: [net] ipv6: mld: answer mldv2 queries with mldv1 reports in mldv1 fallback

Message-id: <7eef207e86c1006c2d54de9f39009e7c18e9a582.1412786389.git.dborkman@redhat.com>
Patchwork-id: 97301
O-Subject: [RHEL7 PATCH net] ipv6: mld: answer mldv2 queries with mldv1 reports in mldv1 fallback
Bugzilla: 1143429
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Jesper Brouer <jbrouer@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1143429
Upstream Status: 35f7aa5309c048bb70e58571942795fa9411ce6a
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8076970
Tested: verified on 2 beaker machines with trafgen mldv1/mldv2 query script

Upstream Commit:
commit 35f7aa5309c048bb70e58571942795fa9411ce6a
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Sat Sep 20 14:03:55 2014 +0200

    ipv6: mld: answer mldv2 queries with mldv1 reports in mldv1 fallback

    RFC2710 (MLDv1), section 3.7. says:

      The length of a received MLD message is computed by taking the
      IPv6 Payload Length value and subtracting the length of any IPv6
      extension headers present between the IPv6 header and the MLD
      message. If that length is greater than 24 octets, that indicates
      that there are other fields present *beyond* the fields described
      above, perhaps belonging to a *future backwards-compatible* version
      of MLD. An implementation of the version of MLD specified in this
      document *MUST NOT* send an MLD message longer than 24 octets and
      MUST ignore anything past the first 24 octets of a received MLD
      message.

    RFC3810 (MLDv2), section 8.2.1. states for *listeners* regarding
    presence of MLDv1 routers:

      In order to be compatible with MLDv1 routers, MLDv2 hosts MUST
      operate in version 1 compatibility mode. [...] When Host
      Compatibility Mode is MLDv2, a host acts using the MLDv2 protocol
      on that interface. When Host Compatibility Mode is MLDv1, a host
      acts in MLDv1 compatibility mode, using *only* the MLDv1 protocol,
      on that interface. [...]

    While section 8.3.1. specifies *router* behaviour regarding presence
    of MLDv1 routers:

      MLDv2 routers may be placed on a network where there is at least
      one MLDv1 router. The following requirements apply:

      If an MLDv1 router is present on the link, the Querier MUST use
      the *lowest* version of MLD present on the network. This must be
      administratively assured. Routers that desire to be compatible
      with MLDv1 MUST have a configuration option to act in MLDv1 mode;
      if an MLDv1 router is present on the link, the system administrator
      must explicitly configure all MLDv2 routers to act in MLDv1 mode.
      When in MLDv1 mode, the Querier MUST send periodic General Queries
      truncated at the Multicast Address field (i.e., 24 bytes long),
      and SHOULD also warn about receiving an MLDv2 Query (such warnings
      must be rate-limited). The Querier MUST also fill in the Maximum
      Response Delay in the Maximum Response Code field, i.e., the
      exponential algorithm described in section 5.1.3. is not used. [...]

    That means that we should not get queries from different versions of
    MLD. When there's a MLDv1 router present, MLDv2 enforces truncation
    and MRC == MRD (both fields are overlapping within the 24 octet range).

    Section 8.3.2. specifies behaviour in the presence of MLDv1 multicast
    address *listeners*:

      MLDv2 routers may be placed on a network where there are hosts
      that have not yet been upgraded to MLDv2. In order to be compatible
      with MLDv1 hosts, MLDv2 routers MUST operate in version 1 compatibility
      mode. MLDv2 routers keep a compatibility mode per multicast address
      record. The compatibility mode of a multicast address is determined
      from the Multicast Address Compatibility Mode variable, which can be
      in one of the two following states: MLDv1 or MLDv2.

      The Multicast Address Compatibility Mode of a multicast address
      record is set to MLDv1 whenever an MLDv1 Multicast Listener Report is
      *received* for that multicast address. At the same time, the Older
      Version Host Present timer for the multicast address is set to Older
      Version Host Present Timeout seconds. The timer is re-set whenever a
      new MLDv1 Report is received for that multicast address. If the Older
      Version Host Present timer expires, the router switches back to
      Multicast Address Compatibility Mode of MLDv2 for that multicast
      address. [...]

    That means, what can happen is the following scenario, that hosts can
    act in MLDv1 compatibility mode when they previously have received an
    MLDv1 query (or, simply operate in MLDv1 mode-only); and at the same
    time, an MLDv2 router could start up and transmits MLDv2 startup query
    messages while being unaware of the current operational mode.

    Given RFC2710, section 3.7 we would need to answer to that with an MLDv1
    listener report, so that the router according to RFC3810, section 8.3.2.
    would receive that and internally switch to MLDv1 compatibility as well.

    Right now, I believe since the initial implementation of MLDv2, Linux
    hosts would just silently drop such MLDv2 queries instead of replying
    with an MLDv1 listener report, which would prevent a MLDv2 router going
    into fallback mode (until it receives other MLDv1 queries).

    Since the mapping of MRC to MRD in exactly such cases can make use of
    the exponential algorithm from 5.1.3, we cannot [strictly speaking] be
    aware in MLDv1 of the encoding in MRC, it seems also not mentioned by
    the RFC. Since encodings are the same up to 32767, assume in such a
    situation this value as a hard upper limit we would clamp. We have asked
    one of the RFC authors on that regard, and he mentioned that there seem
    not to be any implementations that make use of that exponential algorithm
    on startup messages. In any case, this patch fixes this MLD
    interoperability issue.

    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/mld.h b/include/net/mld.h
index faa1d16..01d7513 100644
--- a/include/net/mld.h
+++ b/include/net/mld.h
@@ -88,12 +88,15 @@ struct mld2_query {
 #define MLDV2_QQIC_EXP(value) (((value) >> 4) & 0x07)
 #define MLDV2_QQIC_MAN(value) ((value) & 0x0f)
 
+#define MLD_EXP_MIN_LIMIT 32768UL
+#define MLDV1_MRD_MAX_COMPAT (MLD_EXP_MIN_LIMIT - 1)
+
 static inline unsigned long mldv2_mrc(const struct mld2_query *mlh2)
 {
  /* RFC3810, 5.1.3. Maximum Response Code */
  unsigned long ret, mc_mrc = ntohs(mlh2->mld2q_mrc);
 
- if (mc_mrc < 32768) {
+ if (mc_mrc < MLD_EXP_MIN_LIMIT) {
   ret = mc_mrc;
  } else {
   unsigned long mc_man, mc_exp;
diff --git a/net/ipv6/mcast.c b/net/ipv6/mcast.c
index 2ba022f..4b542b5 100644
--- a/net/ipv6/mcast.c
+++ b/net/ipv6/mcast.c
@@ -1241,7 +1241,7 @@ static void mld_update_qri(struct inet6_dev *idev,
 }
 
 static int mld_process_v1(struct inet6_dev *idev, struct mld_msg *mld,
-     unsigned long *max_delay)
+     unsigned long *max_delay, bool v1_query)
 {
  unsigned long mldv1_md;
 
@@ -1249,11 +1249,32 @@ static int mld_process_v1(struct inet6_dev *idev, struct mld_msg *mld,
  if (mld_in_v2_mode_only(idev))
   return -EINVAL;
 
- /* MLDv1 router present */
  mldv1_md = ntohs(mld->mld_maxdelay);
+
+ /* When in MLDv1 fallback and a MLDv2 router start-up being
+  * unaware of current MLDv1 operation, the MRC == MRD mapping
+  * only works when the exponential algorithm is not being
+  * used (as MLDv1 is unaware of such things).
+  *
+  * According to the RFC author, the MLDv2 implementations
+  * he's aware of all use a MRC < 32768 on start up queries.
+  *
+  * Thus, should we *ever* encounter something else larger
+  * than that, just assume the maximum possible within our
+  * reach.
+  */
+ if (!v1_query)
+  mldv1_md = min(mldv1_md, MLDV1_MRD_MAX_COMPAT);
+
  *max_delay = max(msecs_to_jiffies(mldv1_md), 1UL);
 
- mld_set_v1_mode(idev);
+ /* MLDv1 router present: we need to go into v1 mode *only*
+  * when an MLDv1 query is received as per section 9.12. of
+  * RFC3810! And we know from RFC2710 section 3.7 that MLDv1
+  * queries MUST be of exactly 24 octets.
+  */
+ if (v1_query)
+  mld_set_v1_mode(idev);
 
  /* cancel MLDv2 report timer */
  mld_gq_stop_timer(idev);
@@ -1268,10 +1289,6 @@ static int mld_process_v1(struct inet6_dev *idev, struct mld_msg *mld,
 static int mld_process_v2(struct inet6_dev *idev, struct mld2_query *mld,
      unsigned long *max_delay)
 {
- /* hosts need to stay in MLDv1 mode, discard MLDv2 queries */
- if (mld_in_v1_mode(idev))
-  return -EINVAL;
-
  *max_delay = max(msecs_to_jiffies(mldv2_mrc(mld)), 1UL);
 
  mld_update_qrv(idev, mld);
@@ -1328,8 +1345,11 @@ int igmp6_event_query(struct sk_buff *skb)
      !(group_type&IPV6_ADDR_MULTICAST))
   return -EINVAL;
 
- if (len == MLD_V1_QUERY_LEN) {
-  err = mld_process_v1(idev, mld, &max_delay);
+ if (len < MLD_V1_QUERY_LEN) {
+  return -EINVAL;
+ } else if (len == MLD_V1_QUERY_LEN || mld_in_v1_mode(idev)) {
+  err = mld_process_v1(idev, mld, &max_delay,
+         len == MLD_V1_QUERY_LEN);
   if (err < 0)
    return err;
  } else if (len >= MLD_V2_QUERY_LEN_MIN) {
@@ -1361,8 +1381,9 @@ int igmp6_event_query(struct sk_buff *skb)
    mlh2 = (struct mld2_query *)skb_transport_header(skb);
    mark = 1;
   }
- } else
+ } else {
   return -EINVAL;
+ }
 
  read_lock_bh(&idev->lock);
  if (group_type == IPV6_ADDR_ANY) {
-- 
1.7.1