From 66aa6b41a703ed3d8acaad32e0c5e6064b39cb8a Mon Sep 17 00:00:00 2001
From: Jacob Tanenbaum <jtanenba@redhat.com>
Date: Mon, 24 Nov 2014 19:03:02 -0500
Subject: [fs] proc/task_mmu: fix missing check during hugepage migration

Message-id: <1416855782-2812-1-git-send-email-jtanenba@redhat.com>
Patchwork-id: 100862
O-Subject: [RHEL7 PATCHv2 BZ1105040 CVE-2014-3940] Kernel: missing check during hugepage migration
Bugzilla: 1105040
CVE: CVE-2014-3940
RH-Acked-by: Rafael Aquini <aquini@redhat.com>

Linux kernel built with the HugeTLB file system(CONFIG_HUGETLBFS
+ CONFIG_HUGETLB_PAGE) along with Non Uniform Memory Access(CONFIG_NUMA)
support is vulnerable to possible race conditions. It could occur when kernel
attempts to perform hugepage migration.

Only backported hunk 1 of the following upstream patch. Backporting the
second hunk of the patch requires backporting features of hugepage
migration that would be beyond the scope of the security bug.

Backport of hunk 1 of the following:
commit d4c54919ed86302094c0ca7d48a8cbd4ee753e92
Author: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Date:   Fri Jun 6 10:00:01 2014 -0400

The age table walker doesn't check non-present hugetlb entry in common
path, so hugetlb_entry() callbacks must check it. The reason for this
behavior is that some callers want to handle it in its own way.

[ I think that reason is bogus, btw - it should just do what the regular
code does, which is to call the "pte_hole()" function for such hugetlb
entries - Linus]

However, some callers don't check it now, which causes unpredictable
result, for example when we have a race between migrating hugepage and
reading /proc/pid/numa_maps. This patch fixes it by adding !pte_present
checks on buggy callbacks.

This bug exists for years and got visible by introducing hugepage
migration.

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1105040
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8268305
Beaker: https://beaker.engineering.redhat.com/jobs/806555

No issues seen in Brew build or Beaker tests

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index 65fe2e8..feaf02c 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -1229,7 +1229,7 @@ static int gather_hugetbl_stats(pte_t *pte, unsigned long hmask,
  struct numa_maps *md;
  struct page *page;
 
- if (pte_none(*pte))
+ if (!pte_present(*pte))
   return 0;
 
  page = pte_page(*pte);
-- 
1.7.1