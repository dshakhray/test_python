From bdad1119cb851caab6d887ddb963a1737c97d5dc Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:25:20 -0400
Subject: [net] libceph: primary_affinity decode bits
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-214-git-send-email-sweil@redhat.com>
Patchwork-id: 89736
O-Subject: [PATCH 213/303] libceph: primary_affinity decode bits
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

Add two helpers to decode primary_affinity (full map, vector<u32>) and
new_primary_affinity (inc map, map<u32, u32>) and switch to them.

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Alex Elder <elder@linaro.org>
(cherry picked from commit 63a6993f521b2629872e89c02a336fb3f18b092b)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ceph/osdmap.c b/net/ceph/osdmap.c
index 0ac1293..9568e62 100644
--- a/net/ceph/osdmap.c
+++ b/net/ceph/osdmap.c
@@ -959,6 +959,60 @@ static int set_primary_affinity(struct ceph_osdmap *map, int osd, u32 aff)
  return 0;
 }
 
+static int decode_primary_affinity(void **p, void *end,
+       struct ceph_osdmap *map)
+{
+ u32 len, i;
+
+ ceph_decode_32_safe(p, end, len, e_inval);
+ if (len == 0) {
+  kfree(map->osd_primary_affinity);
+  map->osd_primary_affinity = NULL;
+  return 0;
+ }
+ if (len != map->max_osd)
+  goto e_inval;
+
+ ceph_decode_need(p, end, map->max_osd*sizeof(u32), e_inval);
+
+ for (i = 0; i < map->max_osd; i++) {
+  int ret;
+
+  ret = set_primary_affinity(map, i, ceph_decode_32(p));
+  if (ret)
+   return ret;
+ }
+
+ return 0;
+
+e_inval:
+ return -EINVAL;
+}
+
+static int decode_new_primary_affinity(void **p, void *end,
+           struct ceph_osdmap *map)
+{
+ u32 n;
+
+ ceph_decode_32_safe(p, end, n, e_inval);
+ while (n--) {
+  u32 osd, aff;
+  int ret;
+
+  ceph_decode_32_safe(p, end, osd, e_inval);
+  ceph_decode_32_safe(p, end, aff, e_inval);
+
+  ret = set_primary_affinity(map, osd, aff);
+  if (ret)
+   return ret;
+ }
+
+ return 0;
+
+e_inval:
+ return -EINVAL;
+}
+
 /*
  * decode a full map.
  */
@@ -1042,6 +1096,17 @@ static int osdmap_decode(void **p, void *end, struct ceph_osdmap *map)
    goto bad;
  }
 
+ /* primary_affinity */
+ if (struct_v >= 2) {
+  err = decode_primary_affinity(p, end, map);
+  if (err)
+   goto bad;
+ } else {
+  /* XXX can this happen? */
+  kfree(map->osd_primary_affinity);
+  map->osd_primary_affinity = NULL;
+ }
+
  /* crush */
  ceph_decode_32_safe(p, end, len, e_inval);
  map->crush = crush_decode(*p, min(*p + len, end));
@@ -1249,6 +1314,13 @@ struct ceph_osdmap *osdmap_apply_incremental(void **p, void *end,
    goto bad;
  }
 
+ /* new_primary_affinity */
+ if (struct_v >= 2) {
+  err = decode_new_primary_affinity(p, end, map);
+  if (err)
+   goto bad;
+ }
+
  /* ignore the rest */
  *p = end;
 
-- 
1.7.1