From b107f1f617d438c552435b05db373afe5f02e147 Mon Sep 17 00:00:00 2001
From: Sai Vemuri <svemuri@redhat.com>
Date: Thu, 11 Sep 2014 22:43:17 -0400
Subject: [infiniband] cxgb4: Force T5 connections to use TAHOE congestion control

Message-id: <1410475447-94392-59-git-send-email-svemuri@redhat.com>
Patchwork-id: 93819
O-Subject: [RHEL7.1 PATCH BZ 1124947 058/108] RDMA/cxgb4: Force T5 connections to use TAHOE congestion control
Bugzilla: 1124947
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

This is required to work around a T5 HW issue.

Signed-off-by: Steve Wise <swise@opengridcomputing.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 92e5011ab0e073ab8fbb726c11529021e5e63973)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/hw/cxgb4/cm.c b/drivers/infiniband/hw/cxgb4/cm.c
index f9b04bc..1f863a9 100644
--- a/drivers/infiniband/hw/cxgb4/cm.c
+++ b/drivers/infiniband/hw/cxgb4/cm.c
@@ -587,6 +587,10 @@ static int send_connect(struct c4iw_ep *ep)
   opt2 |= SACK_EN(1);
  if (wscale && enable_tcp_window_scaling)
   opt2 |= WND_SCALE_EN(1);
+ if (is_t5(ep->com.dev->rdev.lldi.adapter_type)) {
+  opt2 |= T5_OPT_2_VALID;
+  opt2 |= V_CONG_CNTRL(CONG_ALG_TAHOE);
+ }
  t4_set_arp_err_handler(skb, NULL, act_open_req_arp_failure);
 
  if (is_t4(ep->com.dev->rdev.lldi.adapter_type)) {
@@ -2018,6 +2022,10 @@ static void accept_cr(struct c4iw_ep *ep, struct sk_buff *skb,
   if (tcph->ece && tcph->cwr)
    opt2 |= CCTRL_ECN(1);
  }
+ if (is_t5(ep->com.dev->rdev.lldi.adapter_type)) {
+  opt2 |= T5_OPT_2_VALID;
+  opt2 |= V_CONG_CNTRL(CONG_ALG_TAHOE);
+ }
 
  rpl = cplhdr(skb);
  INIT_TP_WR(rpl, ep->hwtid);
diff --git a/drivers/infiniband/hw/cxgb4/t4fw_ri_api.h b/drivers/infiniband/hw/cxgb4/t4fw_ri_api.h
index dc193c2..efad0cc 100644
--- a/drivers/infiniband/hw/cxgb4/t4fw_ri_api.h
+++ b/drivers/infiniband/hw/cxgb4/t4fw_ri_api.h
@@ -836,4 +836,18 @@ struct ulptx_idata {
 #define V_RX_DACK_CHANGE(x) ((x) << S_RX_DACK_CHANGE)
 #define F_RX_DACK_CHANGE    V_RX_DACK_CHANGE(1U)
 
+enum {                     /* TCP congestion control algorithms */
+ CONG_ALG_RENO,
+ CONG_ALG_TAHOE,
+ CONG_ALG_NEWRENO,
+ CONG_ALG_HIGHSPEED
+};
+
+#define S_CONG_CNTRL    14
+#define M_CONG_CNTRL    0x3
+#define V_CONG_CNTRL(x) ((x) << S_CONG_CNTRL)
+#define G_CONG_CNTRL(x) (((x) >> S_CONG_CNTRL) & M_CONG_CNTRL)
+
+#define T5_OPT_2_VALID      ((1U) << 31)
+
 #endif /* _T4FW_RI_API_H_ */
-- 
1.7.1