From c0b0d08c2a70d4200ecc160709a489d41e85e68f Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:25:24 -0400
Subject: [net] libceph: introduce pg_to_raw_osds() and raw_to_up_osds() helpers
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-218-git-send-email-sweil@redhat.com>
Patchwork-id: 89653
O-Subject: [PATCH 217/303] libceph: introduce pg_to_raw_osds() and raw_to_up_osds() helpers
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

pg_to_raw_osds() helper for computing a raw (crush) set, which can
contain non-existant and down osds.

raw_to_up_osds() helper for pruning non-existant and down osds from the
raw set, therefore transforming it into an up set, and determining up
primary.

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Alex Elder <elder@linaro.org>
(cherry picked from commit 2bd93d4d7ec2dd461cfb87c6d8a9b1ef9b30de08)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ceph/osdmap.c b/net/ceph/osdmap.c
index 9568e62..b8bbef0 100644
--- a/net/ceph/osdmap.c
+++ b/net/ceph/osdmap.c
@@ -1521,6 +1521,82 @@ static int *calc_pg_raw(struct ceph_osdmap *osdmap, struct ceph_pg pgid,
 }
 
 /*
+ * Calculate raw (crush) set for given pgid.
+ *
+ * Return raw set length, or error.
+ */
+static int pg_to_raw_osds(struct ceph_osdmap *osdmap,
+     struct ceph_pg_pool_info *pool,
+     struct ceph_pg pgid, u32 pps, int *osds)
+{
+ int ruleno;
+ int len;
+
+ /* crush */
+ ruleno = crush_find_rule(osdmap->crush, pool->crush_ruleset,
+     pool->type, pool->size);
+ if (ruleno < 0) {
+  pr_err("no crush rule: pool %lld ruleset %d type %d size %d\n",
+         pgid.pool, pool->crush_ruleset, pool->type,
+         pool->size);
+  return -ENOENT;
+ }
+
+ len = do_crush(osdmap, ruleno, pps, osds,
+         min_t(int, pool->size, CEPH_PG_MAX_SIZE),
+         osdmap->osd_weight, osdmap->max_osd);
+ if (len < 0) {
+  pr_err("error %d from crush rule %d: pool %lld ruleset %d type %d size %d\n",
+         len, ruleno, pgid.pool, pool->crush_ruleset,
+         pool->type, pool->size);
+  return len;
+ }
+
+ return len;
+}
+
+/*
+ * Given raw set, calculate up set and up primary.
+ *
+ * Return up set length.  *primary is set to up primary osd id, or -1
+ * if up set is empty.
+ */
+static int raw_to_up_osds(struct ceph_osdmap *osdmap,
+     struct ceph_pg_pool_info *pool,
+     int *osds, int len, int *primary)
+{
+ int up_primary = -1;
+ int i;
+
+ if (ceph_can_shift_osds(pool)) {
+  int removed = 0;
+
+  for (i = 0; i < len; i++) {
+   if (ceph_osd_is_down(osdmap, osds[i])) {
+    removed++;
+    continue;
+   }
+   if (removed)
+    osds[i - removed] = osds[i];
+  }
+
+  len -= removed;
+  if (len > 0)
+   up_primary = osds[0];
+ } else {
+  for (i = len - 1; i >= 0; i--) {
+   if (ceph_osd_is_down(osdmap, osds[i]))
+    osds[i] = CRUSH_ITEM_NONE;
+   else
+    up_primary = osds[i];
+  }
+ }
+
+ *primary = up_primary;
+ return len;
+}
+
+/*
  * Return acting set for given pgid.
  */
 int ceph_calc_pg_acting(struct ceph_osdmap *osdmap, struct ceph_pg pgid,
-- 
1.7.1