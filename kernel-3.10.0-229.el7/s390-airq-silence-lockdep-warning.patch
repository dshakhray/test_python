From 143c5ef8a92ae0d3f2a71bc8873626be162ef61d Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Wed, 23 Jul 2014 10:50:11 -0400
Subject: [s390] airq: silence lockdep warning

Message-id: <1406112611-9862-24-git-send-email-brueckner@redhat.com>
Patchwork-id: 86333
O-Subject: [RHEL7.1 PATCH 23/23] [s390] s390/airq: silence lockdep warning
Bugzilla: 1088554
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 0eb69a0c584d0eaec6c2b6663e03184625c3517b
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Commit: Martin Schwidefsky <schwidefsky@de.ibm.com>

    s390/airq: silence lockdep warning

    airq_iv_(alloc|free) is called by some users with interrupts enabled
    and by some with interrupts disabled which leads to the following
    lockdep warning:

    [ INFO: possible irq lock inversion dependency detected ]
    3.14.0-15249-gbf29b7b-dirty #25 Not tainted
    ---------------------------------------------------------
    insmod/2108 just changed the state of lock:
     (&(&iv->lock)->rlock){+.....}, at: [<000000000046ee3e>] airq_iv_alloc+0x62/0x228
    but this lock was taken by another, HARDIRQ-READ-safe lock in the past:
     (&info->lock){.-.-..}

    and interrupts could create inverse lock ordering between them.

    other info that might help us debug this:
     Possible interrupt unsafe locking scenario:

           CPU0                    CPU1
           ----                    ----
      lock(&(&iv->lock)->rlock);
                                   local_irq_disable();
                                   lock(&info->lock);
                                   lock(&(&iv->lock)->rlock);
      <Interrupt>
        lock(&info->lock);

     *** DEADLOCK ***

    Although this is a false alarm (since each airq user consistently
    calls these functions from the same context) fix this by ensuring
    that interrupts are disabled when the airq lock is held.

    Reported-by: Frank Blaschka <frank.blaschka@de.ibm.com>
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1088554
https://bugzilla.redhat.com/show_bug.cgi?id=1088554

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version v3.16-rc2
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=0eb69a0c584d0eaec6c2b6663e03184625c3517b

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7725759

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/cio/airq.c b/drivers/s390/cio/airq.c
index a9efddc..d3f446e 100644
--- a/drivers/s390/cio/airq.c
+++ b/drivers/s390/cio/airq.c
@@ -180,11 +180,11 @@ EXPORT_SYMBOL(airq_iv_release);
 unsigned long airq_iv_alloc(struct airq_iv *iv, unsigned long num)
 {
  const unsigned long be_to_le = BITS_PER_LONG - 1;
- unsigned long bit, i;
+ unsigned long bit, i, flags;
 
  if (!iv->avail || num == 0)
   return -1UL;
- spin_lock(&iv->lock);
+ spin_lock_irqsave(&iv->lock, flags);
  bit = find_first_bit_left(iv->avail, iv->bits);
  while (bit + num <= iv->bits) {
   for (i = 1; i < num; i++)
@@ -202,9 +202,8 @@ unsigned long airq_iv_alloc(struct airq_iv *iv, unsigned long num)
  }
  if (bit + num > iv->bits)
   bit = -1UL;
- spin_unlock(&iv->lock);
+ spin_unlock_irqrestore(&iv->lock, flags);
  return bit;
-
 }
 EXPORT_SYMBOL(airq_iv_alloc);
 
@@ -218,11 +217,11 @@ void airq_iv_free(struct airq_iv *iv, unsigned long bit, unsigned long num)
 {
  const unsigned long be_to_le = BITS_PER_LONG - 1;
 
- unsigned long i;
+ unsigned long i, flags;
 
  if (!iv->avail || num == 0)
   return;
- spin_lock(&iv->lock);
+ spin_lock_irqsave(&iv->lock, flags);
  for (i = 0; i < num; i++) {
   /* Clear (possibly left over) interrupt bit */
   clear_bit((bit + i) ^ be_to_le, iv->vector);
@@ -234,7 +233,7 @@ void airq_iv_free(struct airq_iv *iv, unsigned long bit, unsigned long num)
   while (iv->end > 0 && !test_bit((iv->end - 1) ^ be_to_le, iv->avail))
    iv->end--;
  }
- spin_unlock(&iv->lock);
+ spin_unlock_irqrestore(&iv->lock, flags);
 }
 EXPORT_SYMBOL(airq_iv_free);
 
-- 
1.7.1