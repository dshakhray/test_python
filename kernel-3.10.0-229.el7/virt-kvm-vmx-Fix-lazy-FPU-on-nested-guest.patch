From 5b767593f1dc4d8ff29dda19013491b1574d3c86 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:38:27 -0400
Subject: [virt] kvm/vmx: Fix lazy FPU on nested guest

Message-id: <1406040016-3289-113-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86191
O-Subject: [RHEL7 PATCH v2 112/221] kvm, vmx: Fix lazy FPU on nested guest
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Anthoine Bourgeois <bourgeois@bertin.fr>

If a nested guest does a NM fault but its CR0 doesn't contain the TS
flag (because it was already cleared by the guest with L1 aid) then we
have to activate FPU ourselves in L0 and then continue to L2. If TS flag
is set then we fallback on the previous behavior, forward the fault to
L1 if it asked for.

Signed-off-by: Anthoine Bourgeois <bourgeois@bertin.fr>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit e504c9098ed6acd9e1079c5e10e4910724ad429f)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 9e0cd6f..60e709a 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -6643,6 +6643,9 @@ static bool nested_vmx_exit_handled(struct kvm_vcpu *vcpu)
    return 0;
   else if (is_page_fault(intr_info))
    return enable_ept;
+  else if (is_no_device(intr_info) &&
+    !(nested_read_cr0(vmcs12) & X86_CR0_TS))
+   return 0;
   return vmcs12->exception_bitmap &
     (1u << (intr_info & INTR_INFO_VECTOR_MASK));
  case EXIT_REASON_EXTERNAL_INTERRUPT:
-- 
1.7.1