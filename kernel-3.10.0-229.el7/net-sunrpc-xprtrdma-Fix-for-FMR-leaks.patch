From 0158472fdf699781e8e2a2422388aa207c4c2ea2 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:54:11 -0400
Subject: [net] sunrpc/xprtrdma: Fix for FMR leaks

Message-id: <1403798077-28799-53-git-send-email-steved@redhat.com>
Patchwork-id: 84939
O-Subject: [RHEL7.1 PATCH 52/78] nfs-rdma: Fix for FMR leaks
Bugzilla: 1113248
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Allen Andrews <allen.andrews@emulex.com>

Two memory region leaks were found during testing:

1. rpcrdma_buffer_create: While allocating RPCRDMA_FRMR's
ib_alloc_fast_reg_mr is called and then ib_alloc_fast_reg_page_list is
called.  If ib_alloc_fast_reg_page_list returns an error it bails out of
the routine dropping the last ib_alloc_fast_reg_mr frmr region creating a
memory leak.  Added code to dereg the last frmr if
ib_alloc_fast_reg_page_list fails.

2. rpcrdma_buffer_destroy: While cleaning up, the routine will only free
the MR's on the rb_mws list if there are rb_send_bufs present.  However, in
rpcrdma_buffer_create while the rb_mws list is being built if one of the MR
allocation requests fail after some MR's have been allocated on the rb_mws
list the routine never gets to create any rb_send_bufs but instead jumps to
the rpcrdma_buffer_destroy routine which will never free the MR's on rb_mws
list because the rb_send_bufs were never created.   This leaks all the MR's
on the rb_mws list that were created prior to one of the MR allocations
failing.

Issue(2) was seen during testing. Our adapter had a finite number of MR's
available and we created enough connections to where we saw an MR
allocation failure on our Nth NFS connection request. After the kernel
cleaned up the resources it had allocated for the Nth connection we noticed
that FMR's had been leaked due to the coding error described above.

Issue(1) was seen during a code review while debugging issue(2).

Signed-off-by: Allen Andrews <allen.andrews@emulex.com>
Reviewed-by: Chuck Lever <chuck.lever@oracle.com>
Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
Upstream Id: 4034ba04231f554abb97ad8900a4c1af03f8e21d
Bugzilla: 1113248
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/sunrpc/xprtrdma/verbs.c b/net/sunrpc/xprtrdma/verbs.c
index 55fb09a..8f9704e 100644
--- a/net/sunrpc/xprtrdma/verbs.c
+++ b/net/sunrpc/xprtrdma/verbs.c
@@ -1081,6 +1081,8 @@ rpcrdma_buffer_create(struct rpcrdma_buffer *buf, struct rpcrdma_ep *ep,
     dprintk("RPC:       %s: "
      "ib_alloc_fast_reg_page_list "
      "failed %i\n", __func__, rc);
+
+    ib_dereg_mr(r->r.frmr.fr_mr);
     goto out;
    }
    list_add(&r->mw_list, &buf->rb_mws);
@@ -1217,41 +1219,6 @@ rpcrdma_buffer_destroy(struct rpcrdma_buffer *buf)
    kfree(buf->rb_recv_bufs[i]);
   }
   if (buf->rb_send_bufs && buf->rb_send_bufs[i]) {
-   while (!list_empty(&buf->rb_mws)) {
-    r = list_entry(buf->rb_mws.next,
-     struct rpcrdma_mw, mw_list);
-    list_del(&r->mw_list);
-    switch (ia->ri_memreg_strategy) {
-    case RPCRDMA_FRMR:
-     rc = ib_dereg_mr(r->r.frmr.fr_mr);
-     if (rc)
-      dprintk("RPC:       %s:"
-       " ib_dereg_mr"
-       " failed %i\n",
-       __func__, rc);
-     ib_free_fast_reg_page_list(r->r.frmr.fr_pgl);
-     break;
-    case RPCRDMA_MTHCAFMR:
-     rc = ib_dealloc_fmr(r->r.fmr);
-     if (rc)
-      dprintk("RPC:       %s:"
-       " ib_dealloc_fmr"
-       " failed %i\n",
-       __func__, rc);
-     break;
-    case RPCRDMA_MEMWINDOWS_ASYNC:
-    case RPCRDMA_MEMWINDOWS:
-     rc = ib_dealloc_mw(r->r.mw);
-     if (rc)
-      dprintk("RPC:       %s:"
-       " ib_dealloc_mw"
-       " failed %i\n",
-       __func__, rc);
-     break;
-    default:
-     break;
-    }
-   }
    rpcrdma_deregister_internal(ia,
      buf->rb_send_bufs[i]->rl_handle,
      &buf->rb_send_bufs[i]->rl_iov);
@@ -1259,6 +1226,42 @@ rpcrdma_buffer_destroy(struct rpcrdma_buffer *buf)
   }
  }
 
+ while (!list_empty(&buf->rb_mws)) {
+  r = list_entry(buf->rb_mws.next,
+   struct rpcrdma_mw, mw_list);
+  list_del(&r->mw_list);
+  switch (ia->ri_memreg_strategy) {
+  case RPCRDMA_FRMR:
+   rc = ib_dereg_mr(r->r.frmr.fr_mr);
+   if (rc)
+    dprintk("RPC:       %s:"
+     " ib_dereg_mr"
+     " failed %i\n",
+     __func__, rc);
+   ib_free_fast_reg_page_list(r->r.frmr.fr_pgl);
+   break;
+  case RPCRDMA_MTHCAFMR:
+   rc = ib_dealloc_fmr(r->r.fmr);
+   if (rc)
+    dprintk("RPC:       %s:"
+     " ib_dealloc_fmr"
+     " failed %i\n",
+     __func__, rc);
+   break;
+  case RPCRDMA_MEMWINDOWS_ASYNC:
+  case RPCRDMA_MEMWINDOWS:
+   rc = ib_dealloc_mw(r->r.mw);
+   if (rc)
+    dprintk("RPC:       %s:"
+     " ib_dealloc_mw"
+     " failed %i\n",
+     __func__, rc);
+   break;
+  default:
+   break;
+  }
+ }
+
  kfree(buf->rb_pool);
 }
 
-- 
1.7.1