From 1fb3e305a97db3928153e64528d2b9f19581c315 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:19:38 -0400
Subject: [fs] nfsv4: Fix OPEN w/create access mode checking

Message-id: <1411050057-12417-16-git-send-email-steved@redhat.com>
Patchwork-id: 96189
O-Subject: [RHEL7.1 PATCH 15/94] NFSv4: Fix OPEN w/create access mode checking
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

POSIX states that open("foo", O_CREAT|O_RDONLY, 000) should succeed if
the file "foo" does not already exist. With the current NFS client,
it will fail with an EACCES error because of the permissions checks in
nfs4_opendata_access().

Fix is to turn that test off if the server says that we created the file.

Reported-by: "Frank S. Filz" <ffilzlnx@mindspring.com>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: f3792d63d2a377b7cbe91a204e9582c4cf831eb3
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 803d77c..7c536ca 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -1952,6 +1952,14 @@ static int _nfs4_recover_proc_open(struct nfs4_opendata *data)
  return status;
 }
 
+/*
+ * Additional permission checks in order to distinguish between an
+ * open for read, and an open for execute. This works around the
+ * fact that NFSv4 OPEN treats read and execute permissions as being
+ * the same.
+ * Note that in the non-execute case, we want to turn off permission
+ * checking if we just created a new file (POSIX open() semantics).
+ */
 static int nfs4_opendata_access(struct rpc_cred *cred,
     struct nfs4_opendata *opendata,
     struct nfs4_state *state, fmode_t fmode,
@@ -1966,14 +1974,14 @@ static int nfs4_opendata_access(struct rpc_cred *cred,
   return 0;
 
  mask = 0;
- /* don't check MAY_WRITE - a newly created file may not have
-  * write mode bits, but POSIX allows the creating process to write.
-  * use openflags to check for exec, because fmode won't
-  * always have FMODE_EXEC set when file open for exec. */
+ /*
+  * Use openflags to check for exec, because fmode won't
+  * always have FMODE_EXEC set when file open for exec.
+  */
  if (openflags & __FMODE_EXEC) {
   /* ONLY check for exec rights */
   mask = MAY_EXEC;
- } else if (fmode & FMODE_READ)
+ } else if ((fmode & FMODE_READ) && !opendata->file_created)
   mask = MAY_READ;
 
  cache.cred = cred;
-- 
1.7.1