From 0c6fca7f9e63acad933baa79f719a5b947ac6e1b Mon Sep 17 00:00:00 2001
From: Motohiro Kosaki <mkosaki@redhat.com>
Date: Wed, 10 Sep 2014 16:16:14 -0400
Subject: [x86] mm/numa: fix array index overflow when synchronizing nid to memblock.reserved

Message-id: <1410365775-5132-20-git-send-email-mkosaki@redhat.com>
Patchwork-id: 93495
O-Subject: [RHEL7 PATCH 19/20] arch/x86/mm/numa.c: fix array index overflow when synchronizing nid to memblock.reserved.
Bugzilla: 810042
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>

From: KOSAKI Motohiro <mkosaki@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=810042
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7914549
target RHEL version: 7.1
upstream status: merged
changes from upstream: none

commit 7bc35fdde6724549a0239b71e08b9f33d8bf2bfb
Author: Tang Chen <tangchen@cn.fujitsu.com>
Date:   Thu Feb 6 12:04:27 2014 -0800

    arch/x86/mm/numa.c: fix array index overflow when synchronizing nid to memblock.reserved.

    The following path will cause array out of bound.

    memblock_add_region() will always set nid in memblock.reserved to
    MAX_NUMNODES.  In numa_register_memblks(), after we set all nid to
    correct valus in memblock.reserved, we called setup_node_data(), and
    used memblock_alloc_nid() to allocate memory, with nid set to
    MAX_NUMNODES.

    The nodemask_t type can be seen as a bit array.  And the index is 0 ~
    MAX_NUMNODES-1.

    After that, when we call node_set() in numa_clear_kernel_node_hotplug(),
    the nodemask_t got an index of value MAX_NUMNODES, which is out of [0 ~
    MAX_NUMNODES-1].

    See below:

    numa_init()
     |---> numa_register_memblks()
     |      |---> memblock_set_node(memory)  set correct nid in memblock.memory
     |      |---> memblock_set_node(reserved) set correct nid in memblock.reserved
     |      |......
     |      |---> setup_node_data()
     |             |---> memblock_alloc_nid() here, nid is set to MAX_NUMNODES (1024)
     |......
     |---> numa_clear_kernel_node_hotplug()
            |---> node_set()   here, we have an index 1024, and overflowed

    This patch moves nid setting to numa_clear_kernel_node_hotplug() to fix
    this problem.

    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Tang Chen <tangchen@cn.fujitsu.com>
    Tested-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
    Reported-by: Dave Jones <davej@redhat.com>
    Cc: David Rientjes <rientjes@google.com>
    Tested-by: Dave Jones <davej@redhat.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: KOSAKI Motohiro <mkosaki@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/mm/numa.c b/arch/x86/mm/numa.c
index e34cb0a..9e0f45e 100644
--- a/arch/x86/mm/numa.c
+++ b/arch/x86/mm/numa.c
@@ -488,14 +488,6 @@ static int __init numa_register_memblks(struct numa_meminfo *mi)
   struct numa_memblk *mb = &mi->blk[i];
   memblock_set_node(mb->start, mb->end - mb->start,
       &memblock.memory, mb->nid);
-
-  /*
-   * At this time, all memory regions reserved by memblock are
-   * used by the kernel. Set the nid in memblock.reserved will
-   * mark out all the nodes the kernel resides in.
-   */
-  memblock_set_node(mb->start, mb->end - mb->start,
-      &memblock.reserved, mb->nid);
  }
 
  /*
@@ -564,6 +556,17 @@ static void __init numa_clear_kernel_node_hotplug(void)
  unsigned long start, end;
  struct memblock_type *type = &memblock.reserved;
 
+ /*
+  * At this time, all memory regions reserved by memblock are
+  * used by the kernel. Set the nid in memblock.reserved will
+  * mark out all the nodes the kernel resides in.
+  */
+ for (i = 0; i < numa_meminfo.nr_blks; i++) {
+  struct numa_memblk *mb = &numa_meminfo.blk[i];
+  memblock_set_node(mb->start, mb->end - mb->start,
+      &memblock.reserved, mb->nid);
+ }
+
  /* Mark all kernel nodes. */
  for (i = 0; i < type->cnt; i++)
   node_set(type->regions[i].nid, numa_kernel_nodes);
-- 
1.7.1