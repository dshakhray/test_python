From 5353de9ed642c92610f63563c5d30f92495bae09 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:08:16 -0400
Subject: [powerpc] Fix races with irq_work

Message-id: <1410545655-205645-268-git-send-email-dzickus@redhat.com>
Patchwork-id: 94329
O-Subject: [RHEL7 PATCH 267/626] powerpc: Fix races with irq_work
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 0215f7d8c53fb192cd4491ede0ece5cca6b5db57
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Tue Jan 14 17:11:39 2014 +1100

    powerpc: Fix races with irq_work

    If we set irq_work on a processor and immediately afterward, before the
    irq work has a chance to be processed, we change the decrementer value,
    we can seriously delay the handling of that irq_work.

    Fix it by checking in a few places for pending irq work, first before
    changing the decrementer in decrementer_set_next_event() and after
    changing it in the same function and in timer_interrupt().

    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index a59860b..04b9b61 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -536,6 +536,9 @@ void timer_interrupt(struct pt_regs * regs)
   now = *next_tb - now;
   if (now <= DECREMENTER_MAX)
    set_dec((int)now);
+  /* We may have raced with new irq work */
+  if (test_irq_work_pending())
+   set_dec(1);
   __get_cpu_var(irq_stat).timer_irqs_others++;
  }
 
@@ -802,8 +805,16 @@ static void __init clocksource_init(void)
 static int decrementer_set_next_event(unsigned long evt,
           struct clock_event_device *dev)
 {
+ /* Don't adjust the decrementer if some irq work is pending */
+ if (test_irq_work_pending())
+  return 0;
  __get_cpu_var(decrementers_next_tb) = get_tb_or_rtc() + evt;
  set_dec(evt);
+
+ /* We may have raced with new irq work */
+ if (test_irq_work_pending())
+  set_dec(1);
+
  return 0;
 }
 
-- 
1.7.1