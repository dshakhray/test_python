From ff50745c38657e25918976482ac1a5bb25e362c1 Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:26:13 -0400
Subject: [md] flush writes before starting a recovery

Message-id: <1409563584-9000-72-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 90018
O-Subject: [RHEL7.1 PATCH 71/82] md: flush writes before starting a recovery.
Bugzilla: 1085530 1115749
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: NeilBrown <neilb@suse.de>

When we write to a degraded array which has a bitmap, we
make sure the relevant bit in the bitmap remains set when
the write completes (so a 're-add' can quickly rebuilt a
temporarily-missing device).

If, immediately after such a write starts, we incorporate a spare,
commence recovery, and skip over the region where the write is
happening (because the 'needs recovery' flag isn't set yet),
then that write will not get to the new device.

Once the recovery finishes the new device will be trusted, but will
have incorrect data, leading to possible corruption.

We cannot set the 'needs recovery' flag when we start the write as we
do not know easily if the write will be "degraded" or not.  That
depends on details of the particular raid level and particular write
request.

This patch fixes a corruption issue of long standing and so it
suitable for any -stable kernel.  It applied correctly to 3.0 at
least and will minor editing to earlier kernels.

Reported-by: Bill <billstuff2001@sbcglobal.net>
Tested-by: Bill <billstuff2001@sbcglobal.net>
Cc: stable@vger.kernel.org
Link: http://lkml.kernel.org/r/53A518BB.60709@sbcglobal.net
Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit 133d4527eab8d199a62eee6bd433f0776842df2e)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/md.c b/drivers/md/md.c
index c33e233..89db114 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -7501,6 +7501,19 @@ void md_do_sync(struct md_thread *thread)
        rdev->recovery_offset < j)
     j = rdev->recovery_offset;
   rcu_read_unlock();
+
+  /* If there is a bitmap, we need to make sure all
+   * writes that started before we added a spare
+   * complete before we start doing a recovery.
+   * Otherwise the write might complete and (via
+   * bitmap_endwrite) set a bit in the bitmap after the
+   * recovery has checked that bit and skipped that
+   * region.
+   */
+  if (mddev->bitmap) {
+   mddev->pers->quiesce(mddev, 1);
+   mddev->pers->quiesce(mddev, 0);
+  }
  }
 
  printk(KERN_INFO "md: %s of RAID array %s\n", desc, mdname(mddev));
-- 
1.7.1