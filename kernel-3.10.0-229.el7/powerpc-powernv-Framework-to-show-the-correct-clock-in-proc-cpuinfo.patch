From 8f738c5b6b6f2c1dc7ceb4f180f9c813c5ac09bb Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:12:22 -0400
Subject: [powerpc] powernv: Framework to show the correct clock in /proc/cpuinfo

Message-id: <1410545655-205645-514-git-send-email-dzickus@redhat.com>
Patchwork-id: 94566
O-Subject: [RHEL7 PATCH 513/626] powerpc: powernv: Framework to show the correct clock in /proc/cpuinfo
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 2299d03a632c7586403ab43a11b418ee1ae47f1a
Author: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
Date:   Tue Mar 11 17:01:18 2014 +0530

    powerpc: powernv: Framework to show the correct clock in /proc/cpuinfo

    Currently, the code in setup-common.c for powerpc assumes that all
    clock rates are same in a smp system. This value is cached in the
    variable named ppc_proc_freq and is the value that is reported in
    /proc/cpuinfo.

    However on the PowerNV platform, the clock rate is same only across
    the threads of the same core. Hence the value that is reported in
    /proc/cpuinfo is incorrect on PowerNV platforms. We need a better way
    to query and report the correct value of the processor clock in
    /proc/cpuinfo.

    The patch achieves this by creating a machdep_call named
    get_proc_freq() which is expected to returns the frequency in Hz. The
    code in show_cpuinfo() can invoke this method to display the correct
    clock rate on platforms that have implemented this method. On the
    other powerpc platforms it can use the value cached in ppc_proc_freq.

    Signed-off-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/machdep.h b/arch/powerpc/include/asm/machdep.h
index d851417..d76cb68 100644
--- a/arch/powerpc/include/asm/machdep.h
+++ b/arch/powerpc/include/asm/machdep.h
@@ -101,6 +101,8 @@ struct machdep_calls {
  /* Optional, may be NULL. */
  void  (*show_cpuinfo)(struct seq_file *m);
  void  (*show_percpuinfo)(struct seq_file *m, int i);
+ /* Returns the current operating frequency of "cpu" in Hz */
+ unsigned long   (*get_proc_freq)(unsigned int cpu);
 
  void  (*init_IRQ)(void);
 
diff --git a/arch/powerpc/kernel/setup-common.c b/arch/powerpc/kernel/setup-common.c
index 79b7612..3cf25c8 100644
--- a/arch/powerpc/kernel/setup-common.c
+++ b/arch/powerpc/kernel/setup-common.c
@@ -212,6 +212,7 @@ static int show_cpuinfo(struct seq_file *m, void *v)
 {
  unsigned long cpu_id = (unsigned long)v - 1;
  unsigned int pvr;
+ unsigned long proc_freq;
  unsigned short maj;
  unsigned short min;
 
@@ -263,12 +264,19 @@ static int show_cpuinfo(struct seq_file *m, void *v)
 #endif /* CONFIG_TAU */
 
  /*
-  * Assume here that all clock rates are the same in a
-  * smp system.  -- Cort
+  * Platforms that have variable clock rates, should implement
+  * the method ppc_md.get_proc_freq() that reports the clock
+  * rate of a given cpu. The rest can use ppc_proc_freq to
+  * report the clock rate that is same across all cpus.
   */
- if (ppc_proc_freq)
+ if (ppc_md.get_proc_freq)
+  proc_freq = ppc_md.get_proc_freq(cpu_id);
+ else
+  proc_freq = ppc_proc_freq;
+
+ if (proc_freq)
   seq_printf(m, "clock\t\t: %lu.%06luMHz\n",
-      ppc_proc_freq / 1000000, ppc_proc_freq % 1000000);
+      proc_freq / 1000000, proc_freq % 1000000);
 
  if (ppc_md.show_percpuinfo != NULL)
   ppc_md.show_percpuinfo(m, cpu_id);
-- 
1.7.1