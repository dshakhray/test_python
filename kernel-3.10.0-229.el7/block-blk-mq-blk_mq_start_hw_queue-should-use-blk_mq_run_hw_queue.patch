From 1af4a24a780ea685956cb3afb6c45e54a8855817 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 27 Jun 2014 18:05:23 -0400
Subject: [block] blk-mq: blk_mq_start_hw_queue() should use blk_mq_run_hw_queue()

Message-id: <1403892324-21735-2-git-send-email-snitzer@redhat.com>
Patchwork-id: 85078
O-Subject: [RHEL7.1 PATCH 160/150] blk-mq: blk_mq_start_hw_queue() should use blk_mq_run_hw_queue()
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 0ffbce80c263821161190f20e74a12f7aa8eab7b
Author: Jens Axboe <axboe@fb.com>
Date:   Wed Jun 25 08:22:34 2014 -0600

    blk-mq: blk_mq_start_hw_queue() should use blk_mq_run_hw_queue()

    Currently it calls __blk_mq_run_hw_queue(), which depends on the
    CPU placement being correct. This means it's not possible to call
    blk_mq_start_hw_queues(q) from a context that is correct for all
    queues, leading to triggering the

    WARN_ON(!cpumask_test_cpu(raw_smp_processor_id(), hctx->cpumask));

    in __blk_mq_run_hw_queue().

    Reported-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 0ef2dc7..ad69ef6 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -878,7 +878,7 @@ void blk_mq_start_hw_queue(struct blk_mq_hw_ctx *hctx)
  clear_bit(BLK_MQ_S_STOPPED, &hctx->state);
 
  preempt_disable();
- __blk_mq_run_hw_queue(hctx);
+ blk_mq_run_hw_queue(hctx, false);
  preempt_enable();
 }
 EXPORT_SYMBOL(blk_mq_start_hw_queue);
-- 
1.7.1