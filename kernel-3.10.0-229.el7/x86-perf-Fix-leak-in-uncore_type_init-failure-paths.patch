From 576d51bbd6aa63bc4381cf6dab2b087d4bef54b5 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:26 -0400
Subject: [x86] perf: Fix leak in uncore_type_init failure paths

Message-id: <1408953210-26343-19-git-send-email-jolsa@redhat.com>
Patchwork-id: 88744
O-Subject: [PATCH RHEL7.1 BZ1133083 018/322] perf/x86: Fix leak in uncore_type_init failure paths
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit b7b4839d93e50adccef29eccb694807cdcb8bee3
Author: Dave Jones <davej@redhat.com>
Date: Thu Mar 6 12:20:28 2014 -0500

description
===========
The error path of uncore_type_init() frees up any allocations
that were made along the way, but it relies upon type->pmus
being set, which only happens if the function succeeds. As
type->pmus remains null in this case, the call to
uncore_type_exit will do nothing.

Moving the assignment earlier will allow us to actually free
those allocations should something go awry.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/cpu/perf_event_intel_uncore.c b/arch/x86/kernel/cpu/perf_event_intel_uncore.c
index 25b48dc..6c17666 100644
--- a/arch/x86/kernel/cpu/perf_event_intel_uncore.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_uncore.c
@@ -3109,6 +3109,8 @@ static int __init uncore_type_init(struct intel_uncore_type *type)
  if (!pmus)
   return -ENOMEM;
 
+ type->pmus = pmus;
+
  type->unconstrainted = (struct event_constraint)
   __EVENT_CONSTRAINT(0, (1ULL << type->num_counters) - 1,
     0, type->num_counters, 0, 0);
@@ -3144,7 +3146,6 @@ static int __init uncore_type_init(struct intel_uncore_type *type)
  }
 
  type->pmu_group = &uncore_pmu_attr_group;
- type->pmus = pmus;
  return 0;
 fail:
  uncore_type_exit(type);
-- 
1.7.1