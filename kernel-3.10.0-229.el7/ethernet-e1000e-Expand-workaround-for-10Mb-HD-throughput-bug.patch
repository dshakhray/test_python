From d4453ac9a2a61f36aa688e9f131d28ce4878268b Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Thu, 14 Aug 2014 14:42:15 -0400
Subject: [ethernet] e1000e: Expand workaround for 10Mb HD throughput bug

Message-id: <1408027348-9610-22-git-send-email-jogreene@redhat.com>
Patchwork-id: 87718
O-Subject: [RHEL7.1 PATCH 21/34] e1000e: Expand workaround for 10Mb HD throughput bug
Bugzilla: 1091119
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

In commit 772d05c51c4f4896c120ad418b1e91144a2ac813 "e1000e: slow performance
between two 82579 connected via 10Mbit hub", a workaround was put into place
to address the overaggressive transmit behavior of 82579 parts when connecting
at 10Mbs half-duplex.

This same behavior is seen on i217 and i218 parts as well.  This patch expands
the original workaround to encompass these parts.

Signed-off-by: Dave Ertman <davidx.m.ertman@intel.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit fbb9ab10a289ff28b70f53af302d119401960a39)

BZ: 1091119
Testing: Acceptable, see BZ
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7834849
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/e1000e/ich8lan.c b/drivers/net/ethernet/intel/e1000e/ich8lan.c
index 9a9dc5d..77e7964 100644
--- a/drivers/net/ethernet/intel/e1000e/ich8lan.c
+++ b/drivers/net/ethernet/intel/e1000e/ich8lan.c
@@ -1286,14 +1286,17 @@ static s32 e1000_check_for_copper_link_ich8lan(struct e1000_hw *hw)
    return ret_val;
  }
 
- /* When connected at 10Mbps half-duplex, 82579 parts are excessively
+ /* When connected at 10Mbps half-duplex, some parts are excessively
   * aggressive resulting in many collisions. To avoid this, increase
   * the IPG and reduce Rx latency in the PHY.
   */
- if ((hw->mac.type == e1000_pch2lan) && link) {
+ if (((hw->mac.type == e1000_pch2lan) ||
+      (hw->mac.type == e1000_pch_lpt)) && link) {
   u32 reg;
   reg = er32(STATUS);
   if (!(reg & (E1000_STATUS_FD | E1000_STATUS_SPEED_MASK))) {
+   u16 emi_addr;
+
    reg = er32(TIPG);
    reg &= ~E1000_TIPG_IPGT_MASK;
    reg |= 0xFF;
@@ -1304,8 +1307,12 @@ static s32 e1000_check_for_copper_link_ich8lan(struct e1000_hw *hw)
    if (ret_val)
     return ret_val;
 
-   ret_val =
-       e1000_write_emi_reg_locked(hw, I82579_RX_CONFIG, 0);
+   if (hw->mac.type == e1000_pch2lan)
+    emi_addr = I82579_RX_CONFIG;
+   else
+    emi_addr = I217_RX_CONFIG;
+
+   ret_val = e1000_write_emi_reg_locked(hw, emi_addr, 0);
 
    hw->phy.ops.release(hw);
 
diff --git a/drivers/net/ethernet/intel/e1000e/ich8lan.h b/drivers/net/ethernet/intel/e1000e/ich8lan.h
index bead50f..8fc6c15 100644
--- a/drivers/net/ethernet/intel/e1000e/ich8lan.h
+++ b/drivers/net/ethernet/intel/e1000e/ich8lan.h
@@ -242,6 +242,7 @@
 #define I217_EEE_CAPABILITY 0x8000 /* IEEE MMD Register 3.20 */
 #define I217_EEE_ADVERTISEMENT 0x8001 /* IEEE MMD Register 7.60 */
 #define I217_EEE_LP_ABILITY 0x8002 /* IEEE MMD Register 7.61 */
+#define I217_RX_CONFIG  0xB20C /* Receive configuration */
 
 #define E1000_EEE_RX_LPI_RCVD 0x0400 /* Tx LP idle received */
 #define E1000_EEE_TX_LPI_RCVD 0x0800 /* Rx LP idle received */
-- 
1.7.1