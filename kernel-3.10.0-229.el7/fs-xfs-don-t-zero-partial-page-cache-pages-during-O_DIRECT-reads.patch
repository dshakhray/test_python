From 3b747767c78572eb26f8503472aa5759733f7584 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 21:00:37 -0400
Subject: [fs] xfs: don't zero partial page cache pages during O_DIRECT reads

Message-id: <1412888441-4181-44-git-send-email-sandeen@redhat.com>
Patchwork-id: 97325
O-Subject: [RHEL7.1 PATCH 43/47] [fs] xfs: don't zero partial page cache pages during O_DIRECT reads
Bugzilla: 1130294 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Note, above subject is edited to correctly reflect read, vs.
write in the original commit.

Thanks,
-Eric

    commit 85e584da3212140ee80fd047f9058bbee0bc00d5
    Author: Chris Mason <clm@fb.com>
    Date:   Tue Sep 2 12:12:52 2014 +1000

    xfs: don't zero partial page cache pages during O_DIRECT writes

    xfs is using truncate_pagecache_range to invalidate the page cache
    during DIO reads.  This is different from the other filesystems who
    only invalidate pages during DIO writes.

    truncate_pagecache_range is meant to be used when we are freeing the
    underlying data structs from disk, so it will zero any partial
    ranges in the page.  This means a DIO read can zero out part of the
    page cache page, and it is possible the page will stay in cache.

    buffered reads will find an up to date page with zeros instead of
    the data actually on disk.

    This patch fixes things by using invalidate_inode_pages2_range
    instead.  It preserves the page cache invalidation, but won't zero
    any pages.

    [dchinner: catch error and warn if it fails. Comment.]

    cc: stable@vger.kernel.org
    Signed-off-by: Chris Mason <clm@fb.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_file.c b/fs/xfs/xfs_file.c
index eb6c3dc..1e4da82 100644
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@ -303,7 +303,16 @@ xfs_file_aio_read(
     xfs_rw_iunlock(ip, XFS_IOLOCK_EXCL);
     return ret;
    }
-   truncate_pagecache_range(VFS_I(ip), pos, -1);
+
+   /*
+    * Invalidate whole pages. This can return an error if
+    * we fail to invalidate a page, but this should never
+    * happen on XFS. Warn if it does fail.
+    */
+   ret = invalidate_inode_pages2_range(VFS_I(ip)->i_mapping,
+      pos >> PAGE_CACHE_SHIFT, -1);
+   WARN_ON_ONCE(ret);
+   ret = 0;
   }
   xfs_rw_ilock_demote(ip, XFS_IOLOCK_EXCL);
  }
-- 
1.7.1