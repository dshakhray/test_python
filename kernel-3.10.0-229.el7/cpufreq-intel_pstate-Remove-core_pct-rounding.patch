From faa40df7d93707543333152826368238f4bc1c6b Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:35 -0400
Subject: [cpufreq] intel_pstate: Remove core_pct rounding

Message-id: <1409235879-1283-182-git-send-email-prarit@redhat.com>
Patchwork-id: 89444
O-Subject: [RHEL7.1 PATCH BZ 1134639 181/185] cpufreq: intel_pstate: Remove core_pct rounding
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 78e2708691e9289f97750eb71aca31b5a2973d94
Author: Stratos Karafotis <stratosk@semaphore.gr>
Date:   Fri Jul 18 08:37:27 2014 -0700

    cpufreq: intel_pstate: Remove core_pct rounding

    The specific rounding adds conditionally only 1/256 to fractional
    part of core_pct.

    We can safely remove it without any noticeable impact in
    calculations.

    Use div64_u64 instead of div_u64 to avoid possible overflow of
    sample->mperf as divisor

    Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index 2ff85f6..c5eac94 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -545,13 +545,9 @@ static inline void intel_pstate_calc_busy(struct cpudata *cpu)
 {
  struct sample *sample = &cpu->sample;
  int64_t core_pct;
- int32_t rem;
 
  core_pct = int_tofp(sample->aperf) * int_tofp(100);
- core_pct = div_u64_rem(core_pct, int_tofp(sample->mperf), &rem);
-
- if ((rem << 1) >= int_tofp(sample->mperf))
-  core_pct += 1;
+ core_pct = div64_u64(core_pct, int_tofp(sample->mperf));
 
  sample->freq = fp_toint(
   mul_fp(int_tofp(cpu->pstate.max_pstate * 1000), core_pct));
-- 
1.7.1