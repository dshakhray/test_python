From 3e120032c1bc31c2f541e29dc30e9e7771bc2c46 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:14:27 -0400
Subject: [net] Generalize checksum_init functions

Message-id: <1409652920-431-5-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90190
O-Subject: [PATCH 04/57] [RHEL7.1 net] net: Generalize checksum_init functions
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

commit 76ba0aae673075c77a8b775e9133c8e8b1a44563
Author: Tom Herbert <therbert@google.com>
Date:   Fri May 2 16:29:18 2014 -0700

    net: Generalize checksum_init functions

    Create a general __skb_checksum_validate function (actually a
    macro) to subsume the various checksum_init functions. This
    function can either init the checksum, or do the full validation
    (logically checksum_init+skb_check_complete)-- a flag specifies
    if full vaidation is performed. Also, there is a flag to the function
    to indicate that zero checksums are allowed (to support optional
    UDP checksums).

    Added several stub functions for calling __skb_checksum_validate.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index b858ab1..bbab65a 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -2664,6 +2664,99 @@ static inline __sum16 skb_checksum_complete(struct sk_buff *skb)
         0 : __skb_checksum_complete(skb);
 }
 
+/* Check if we need to perform checksum complete validation.
+ *
+ * Returns true if checksum complete is needed, false otherwise
+ * (either checksum is unnecessary or zero checksum is allowed).
+ */
+static inline bool __skb_checksum_validate_needed(struct sk_buff *skb,
+        bool zero_okay,
+        __sum16 check)
+{
+ if (skb_csum_unnecessary(skb)) {
+  return false;
+ } else if (zero_okay && !check) {
+  skb->ip_summed = CHECKSUM_UNNECESSARY;
+  return false;
+ }
+
+ return true;
+}
+
+/* For small packets <= CHECKSUM_BREAK peform checksum complete directly
+ * in checksum_init.
+ */
+#define CHECKSUM_BREAK 76
+
+/* Validate (init) checksum based on checksum complete.
+ *
+ * Return values:
+ *   0: checksum is validated or try to in skb_checksum_complete. In the latter
+ * case the ip_summed will not be CHECKSUM_UNNECESSARY and the pseudo
+ * checksum is stored in skb->csum for use in __skb_checksum_complete
+ *   non-zero: value of invalid checksum
+ *
+ */
+static inline __sum16 __skb_checksum_validate_complete(struct sk_buff *skb,
+             bool complete,
+             __wsum psum)
+{
+ if (skb->ip_summed == CHECKSUM_COMPLETE) {
+  if (!csum_fold(csum_add(psum, skb->csum))) {
+   skb->ip_summed = CHECKSUM_UNNECESSARY;
+   return 0;
+  }
+ }
+
+ skb->csum = psum;
+
+ if (complete || skb->len <= CHECKSUM_BREAK)
+  return __skb_checksum_complete(skb);
+
+ return 0;
+}
+
+static inline __wsum null_compute_pseudo(struct sk_buff *skb, int proto)
+{
+ return 0;
+}
+
+/* Perform checksum validate (init). Note that this is a macro since we only
+ * want to calculate the pseudo header which is an input function if necessary.
+ * First we try to validate without any computation (checksum unnecessary) and
+ * then calculate based on checksum complete calling the function to compute
+ * pseudo header.
+ *
+ * Return values:
+ *   0: checksum is validated or try to in skb_checksum_complete
+ *   non-zero: value of invalid checksum
+ */
+#define __skb_checksum_validate(skb, proto, complete,   \
+    zero_okay, check, compute_pseudo) \
+({         \
+ __sum16 __ret = 0;      \
+ if (__skb_checksum_validate_needed(skb, zero_okay, check)) \
+  __ret = __skb_checksum_validate_complete(skb,  \
+    complete, compute_pseudo(skb, proto)); \
+ __ret;        \
+})
+
+#define skb_checksum_init(skb, proto, compute_pseudo)   \
+ __skb_checksum_validate(skb, proto, false, false, 0, compute_pseudo)
+
+#define skb_checksum_init_zero_check(skb, proto, check, compute_pseudo) \
+ __skb_checksum_validate(skb, proto, false, true, check, compute_pseudo)
+
+#define skb_checksum_validate(skb, proto, compute_pseudo)  \
+ __skb_checksum_validate(skb, proto, true, false, 0, compute_pseudo)
+
+#define skb_checksum_validate_zero_check(skb, proto, check,  \
+      compute_pseudo)  \
+ __skb_checksum_validate_(skb, proto, true, true, check, compute_pseudo)
+
+#define skb_checksum_simple_validate(skb)    \
+ __skb_checksum_validate(skb, 0, true, false, 0, null_compute_pseudo)
+
 #if defined(CONFIG_NF_CONNTRACK) || defined(CONFIG_NF_CONNTRACK_MODULE)
 extern void nf_conntrack_destroy(struct nf_conntrack *nfct);
 static inline void nf_conntrack_put(struct nf_conntrack *nfct)
-- 
1.7.1