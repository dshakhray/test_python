From 0f7b24c0faf323c619e2fc681a608e99cb84eded Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:24:16 -0400
Subject: [tools] perf/trace: Allow passing parms to arg formatters

Message-id: <1408462094-14194-88-git-send-email-jolsa@redhat.com>
Patchwork-id: 88100
O-Subject: [PATCH RHEL7.1 BZ1131394 087/325] perf trace: Allow passing parms to arg formatters
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 1f115cb72e44391fac3ab1c562a77b421469ac2d
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Tue Sep 3 15:50:28 2013 -0300

description
===========
So that we can have generic formatters that act upon specific
parameters.

Start using them with a simple string table that assumes entries
will be indexes to a string table, like with the 'which' parm
for the set and getitimer syscalls
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 1b305eb..aeb3387 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -35,10 +35,35 @@
 
 struct syscall_arg {
  unsigned long val;
+ void       *parm;
  u8       idx;
  u8       mask;
 };
 
+struct strarray {
+ int     nr_entries;
+ const char **entries;
+};
+
+#define DEFINE_STRARRAY(array) struct strarray strarray__##array = { \
+ .nr_entries = ARRAY_SIZE(array), \
+ .entries = array, \
+}
+
+static size_t syscall_arg__scnprintf_strarray(char *bf, size_t size,
+           struct syscall_arg *arg)
+{
+ int idx = arg->val;
+ struct strarray *sa = arg->parm;
+
+ if (idx < 0 || idx >= sa->nr_entries)
+  return scnprintf(bf, size, "%d", idx);
+
+ return scnprintf(bf, size, "%s", sa->entries[idx]);
+}
+
+#define SCA_STRARRAY syscall_arg__scnprintf_strarray
+
 static size_t syscall_arg__scnprintf_hex(char *bf, size_t size,
       struct syscall_arg *arg)
 {
@@ -229,6 +254,9 @@ static size_t syscall_arg__scnprintf_futex_op(char *bf, size_t size, struct sysc
  return printed;
 }
 
+static const char *itimers[] = { "REAL", "VIRTUAL", "PROF", };
+static DEFINE_STRARRAY(itimers);
+
 #define SCA_FUTEX_OP  syscall_arg__scnprintf_futex_op
 
 static size_t syscall_arg__scnprintf_open_flags(char *bf, size_t size,
@@ -291,6 +319,7 @@ static struct syscall_fmt {
  const char *name;
  const char *alias;
  size_t    (*arg_scnprintf[6])(char *bf, size_t size, struct syscall_arg *arg);
+ void    *arg_parm[6];
  bool    errmsg;
  bool    timeout;
  bool    hexret;
@@ -305,6 +334,9 @@ static struct syscall_fmt {
  { .name     = "fstatat",    .errmsg = true, .alias = "newfstatat", },
  { .name     = "futex",     .errmsg = true,
    .arg_scnprintf = { [1] = SCA_FUTEX_OP, /* op */ }, },
+ { .name     = "getitimer",  .errmsg = true,
+   .arg_scnprintf = { [0] = SCA_STRARRAY, /* which */ },
+   .arg_parm  = { [0] = &strarray__itimers, /* which */ }, },
  { .name     = "ioctl",     .errmsg = true,
    .arg_scnprintf = { [2] = SCA_HEX, /* arg */ }, },
  { .name     = "lseek",     .errmsg = true,
@@ -338,6 +370,9 @@ static struct syscall_fmt {
  { .name     = "read",     .errmsg = true, },
  { .name     = "recvfrom",   .errmsg = true, },
  { .name     = "select",     .errmsg = true, .timeout = true, },
+ { .name     = "setitimer",  .errmsg = true,
+   .arg_scnprintf = { [0] = SCA_STRARRAY, /* which */ },
+   .arg_parm  = { [0] = &strarray__itimers, /* which */ }, },
  { .name     = "socket",     .errmsg = true, },
  { .name     = "stat",     .errmsg = true, .alias = "newstat", },
  { .name     = "uname",     .errmsg = true, .alias = "newuname", },
@@ -361,6 +396,7 @@ struct syscall {
  bool      filtered;
  struct syscall_fmt  *fmt;
  size_t      (**arg_scnprintf)(char *bf, size_t size, struct syscall_arg *arg);
+ void      **arg_parm;
 };
 
 static size_t fprintf_duration(unsigned long t, FILE *fp)
@@ -528,6 +564,9 @@ static int syscall__set_arg_fmts(struct syscall *sc)
  if (sc->arg_scnprintf == NULL)
   return -1;
 
+ if (sc->fmt)
+  sc->arg_parm = sc->fmt->arg_parm;
+
  for (field = sc->tp_format->format.fields->next; field; field = field->next) {
   if (sc->fmt && sc->fmt->arg_scnprintf[idx])
    sc->arg_scnprintf[idx] = sc->fmt->arg_scnprintf[idx];
@@ -619,6 +658,8 @@ static size_t syscall__scnprintf_args(struct syscall *sc, char *bf, size_t size,
           "%s%s: ", printed ? ", " : "", field->name);
    if (sc->arg_scnprintf && sc->arg_scnprintf[arg.idx]) {
     arg.val = args[arg.idx];
+    if (sc->arg_parm)
+     arg.parm = sc->arg_parm[arg.idx];
     printed += sc->arg_scnprintf[arg.idx](bf + printed,
               size - printed, &arg);
    } else {
-- 
1.7.1