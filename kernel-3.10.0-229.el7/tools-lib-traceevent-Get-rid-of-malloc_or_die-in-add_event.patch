From 7b5f16c6be3328cbaae049ba32fe2e15e50a1d23 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:50:08 -0400
Subject: [tools] lib/traceevent: Get rid of malloc_or_die() in add_event()

Message-id: <1408953210-26343-121-git-send-email-jolsa@redhat.com>
Patchwork-id: 88836
O-Subject: [PATCH RHEL7.1 BZ1133083 120/322] tools lib traceevent: Get rid of malloc_or_die() in add_event()
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 234520d3fbe43ef72268c4959f85ae326459378c
Author: Namhyung Kim <namhyung@kernel.org>
Date: Mon Dec 9 14:34:04 2013 +0900

description
===========
Make it return error value since its only caller find_event() now can
handle allocation error properly.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/lib/traceevent/parse-filter.c b/tools/lib/traceevent/parse-filter.c
index b3a61d4..2b73abf 100644
--- a/tools/lib/traceevent/parse-filter.c
+++ b/tools/lib/traceevent/parse-filter.c
@@ -245,15 +245,19 @@ static void free_arg(struct filter_arg *arg)
  free(arg);
 }
 
-static void add_event(struct event_list **events,
+static int add_event(struct event_list **events,
         struct event_format *event)
 {
  struct event_list *list;
 
- list = malloc_or_die(sizeof(*list));
+ list = malloc(sizeof(*list));
+ if (list == NULL)
+  return -1;
+
  list->next = *events;
  *events = list;
  list->event = event;
+ return 0;
 }
 
 static int event_match(struct event_format *event,
@@ -276,6 +280,7 @@ find_event(struct pevent *pevent, struct event_list **events,
  regex_t ereg;
  regex_t sreg;
  int match = 0;
+ int fail = 0;
  char *reg;
  int ret;
  int i;
@@ -310,7 +315,10 @@ find_event(struct pevent *pevent, struct event_list **events,
   event = pevent->events[i];
   if (event_match(event, sys_name ? &sreg : NULL, &ereg)) {
    match = 1;
-   add_event(events, event);
+   if (add_event(events, event) < 0) {
+    fail = 1;
+    break;
+   }
   }
  }
 
@@ -320,6 +328,8 @@ find_event(struct pevent *pevent, struct event_list **events,
 
  if (!match)
   return -1;
+ if (fail)
+  return -2;
 
  return 0;
 }
-- 
1.7.1