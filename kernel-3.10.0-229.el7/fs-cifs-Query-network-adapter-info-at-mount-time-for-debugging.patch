From 0b6cf355c0db80e5cf9487e972dd256e660ec2cf Mon Sep 17 00:00:00 2001
From: Sachin Prabhu <sprabhu@redhat.com>
Date: Mon, 28 Jul 2014 12:16:17 -0400
Subject: [fs] cifs: Query network adapter info at mount time for debugging

Message-id: <1406549822-10376-25-git-send-email-sprabhu@redhat.com>
Patchwork-id: 86769
O-Subject: [RHEL7.1 PATCH 24/69] [bz1082049]Query network adapter info at mount time for debugging
Bugzilla: 1082049
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Steve French <smfrench@gmail.com>

When CONFIG_CIFS_STATS2 enabled query adapter info for debugging

It is easy now in SMB3 to query the information about the server's
network interfaces (and at least Windows 8 and above do this, if not
other clients) there are some useful pieces of information you can get
including:

- all of the network interfaces that the server advertises (not just
the one you are mounting over), and with SMB3 supporting multichannel
this helps with more than just failover (also aggregating multiple
sockets under one mount)

- whether the adapter supports RSS (useful to know if you want to
estimate whether setting up two or more socket connections to the same
address is going to be faster due to RSS offload in the adapter)

- whether the server supports RDMA

- whether the server has IPv6 interfaces (if you connected over IPv4
but prefer IPv6 e.g.)

- what the link speed is (you might want to reconnect over a higher
speed interface if available)

(Of course we could also rerequest this on every mount cheaplly to the
same server, as Windows apparently does, so we can update the adapter
info on new mounts, and also on every reconnect if the network
interface drops temporarily - so we don't have to rely on info from
the first mount to this server)

It is trivial to request this information - and certainly will be useful
when we get to the point of doing multichannel (and eventually RDMA),
but some of this (linkspeed etc.) info may help for debugging in
the meantime.  Enable this request when CONFIG_CIFS_STATS2 is on
(only for smb3 mounts since it is an SMB3 or later ioctl).

Signed-off-by: Steve French <smfrench@gmail.com>
(cherry picked from commit c481e9feee78c6ce1ba0a1c8c892049f6514f6cf)

Signed-off-by: Sachin Prabhu <sprabhu@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/cifs/smb2ops.c b/fs/cifs/smb2ops.c
index cc70d48..6e3e053 100644
--- a/fs/cifs/smb2ops.c
+++ b/fs/cifs/smb2ops.c
@@ -209,6 +209,32 @@ smb2_negotiate_rsize(struct cifs_tcon *tcon, struct smb_vol *volume_info)
  return rsize;
 }
 
+#ifdef CONFIG_CIFS_STATS2
+static int
+SMB3_request_interfaces(const unsigned int xid, struct cifs_tcon *tcon)
+{
+ int rc;
+ unsigned int ret_data_len = 0;
+ struct network_interface_info_ioctl_rsp *out_buf;
+
+ rc = SMB2_ioctl(xid, tcon, NO_FILE_ID, NO_FILE_ID,
+   FSCTL_QUERY_NETWORK_INTERFACE_INFO, true /* is_fsctl */,
+   NULL /* no data input */, 0 /* no data input */,
+   (char **)&out_buf, &ret_data_len);
+
+ if ((rc == 0)  && (ret_data_len > 0)) {
+  /* Dump info on first interface */
+  cifs_dbg(FYI, "Adapter Capability 0x%x\t",
+   le32_to_cpu(out_buf->Capability));
+  cifs_dbg(FYI, "Link Speed %lld\n",
+   le64_to_cpu(out_buf->LinkSpeed));
+ } else
+  cifs_dbg(VFS, "error %d on ioctl to get interface list\n", rc);
+
+ return rc;
+}
+#endif /* STATS2 */
+
 static void
 smb3_qfs_tcon(const unsigned int xid, struct cifs_tcon *tcon)
 {
@@ -229,6 +255,10 @@ smb3_qfs_tcon(const unsigned int xid, struct cifs_tcon *tcon)
  if (rc)
   return;
 
+#ifdef CONFIG_CIFS_STATS2
+ SMB3_request_interfaces(xid, tcon);
+#endif /* STATS2 */
+
  SMB2_QFS_attr(xid, tcon, fid.persistent_fid, fid.volatile_fid,
    FS_ATTRIBUTE_INFORMATION);
  SMB2_QFS_attr(xid, tcon, fid.persistent_fid, fid.volatile_fid,
-- 
1.7.1