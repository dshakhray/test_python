From 1ebb07c646debc7ad1a5c45c29bb3666426f3319 Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Mon, 8 Dec 2014 17:32:58 -0500
Subject: [net] xfrm: revert ipv4 mtu determination to dst_mtu

Message-id: <982ee95b45f036ea744da20112ddc2bf4f61364e.1418058212.git.hannes@redhat.com>
Patchwork-id: 101175
O-Subject: [RHEL7.1 net 02/13] xfrm: revert ipv4 mtu determination to dst_mtu
Bugzilla: 1170116
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1170116
Upstream Status: 5a25cf1e310888eb333f9e034be84a8117111d30
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8344420

Upstream Commit:
commit 5a25cf1e310888eb333f9e034be84a8117111d30
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Mon Aug 26 12:31:19 2013 +0200

    xfrm: revert ipv4 mtu determination to dst_mtu

    In commit 0ea9d5e3e0e03a63b11392f5613378977dae7eca ("xfrm: introduce
    helper for safe determination of mtu") I switched the determination of
    ipv4 mtus from dst_mtu to ip_skb_dst_mtu. This was an error because in
    case of IP_PMTUDISC_PROBE we fall back to the interface mtu, which is
    never correct for ipv4 ipsec.

    This patch partly reverts 0ea9d5e3e0e03a63b11392f5613378977dae7eca
    ("xfrm: introduce helper for safe determination of mtu").

    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/xfrm.h b/include/net/xfrm.h
index 8975a25..5211203 100644
--- a/include/net/xfrm.h
+++ b/include/net/xfrm.h
@@ -20,7 +20,6 @@
 #include <net/route.h>
 #include <net/ipv6.h>
 #include <net/ip6_fib.h>
-#include <net/ip6_route.h>
 #include <net/flow.h>
 
 #include <linux/interrupt.h>
@@ -1783,15 +1782,4 @@ static inline int xfrm_tunnel_check(struct sk_buff *skb, struct xfrm_state *x,
  return 0;
 }
 
-static inline int xfrm_skb_dst_mtu(struct sk_buff *skb)
-{
- struct sock *sk = skb->sk;
-
- if (sk && sk->sk_family == AF_INET6)
-  return ip6_skb_dst_mtu(skb);
- else if (sk && sk->sk_family == AF_INET)
-  return ip_skb_dst_mtu(skb);
- return dst_mtu(skb_dst(skb));
-}
-
 #endif /* _NET_XFRM_H */
diff --git a/net/ipv4/xfrm4_output.c b/net/ipv4/xfrm4_output.c
index 658b67f..4c2cbb6 100644
--- a/net/ipv4/xfrm4_output.c
+++ b/net/ipv4/xfrm4_output.c
@@ -28,7 +28,7 @@ static int xfrm4_tunnel_check_size(struct sk_buff *skb)
  if (!(ip_hdr(skb)->frag_off & htons(IP_DF)) || skb->local_df)
   goto out;
 
- mtu = xfrm_skb_dst_mtu(skb);
+ mtu = dst_mtu(skb_dst(skb));
  if (skb->len > mtu) {
   if (skb->sk)
    ip_local_error(skb->sk, EMSGSIZE, ip_hdr(skb)->daddr,
diff --git a/net/ipv6/xfrm6_output.c b/net/ipv6/xfrm6_output.c
index 7bcbcb4..a6d851e 100644
--- a/net/ipv6/xfrm6_output.c
+++ b/net/ipv6/xfrm6_output.c
@@ -136,10 +136,12 @@ static int __xfrm6_output(struct sk_buff *skb)
 {
  struct dst_entry *dst = skb_dst(skb);
  struct xfrm_state *x = dst->xfrm;
- int mtu = xfrm_skb_dst_mtu(skb);
+ int mtu;
 
- if (mtu < IPV6_MIN_MTU)
-  mtu = IPV6_MIN_MTU;
+ if (skb->protocol == htons(ETH_P_IPV6))
+  mtu = ip6_skb_dst_mtu(skb);
+ else
+  mtu = dst_mtu(skb_dst(skb));
 
  if (skb->len > mtu && xfrm6_local_dontfrag(skb)) {
   xfrm6_local_rxpmtu(skb, mtu);
-- 
1.7.1