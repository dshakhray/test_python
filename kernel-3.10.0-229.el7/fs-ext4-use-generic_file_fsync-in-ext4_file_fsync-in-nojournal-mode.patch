From aed1ad45adb3913f7976bd2e9ccc5af767c0a8ff Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:52:58 -0400
Subject: [fs] ext4: use generic_file_fsync() in ext4_file_fsync() in nojournal mode

Message-id: <1414058125-4183-25-git-send-email-lczerner@redhat.com>
Patchwork-id: 98115
O-Subject: [RHEL 7.1 PATCH v2 024/171] ext4: use generic_file_fsync() in ext4_file_fsync() in nojournal mode
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 37b10dd06334ebc89f551d405a0fe27e1a622458

 Just use the generic function instead of duplicating it.  We only need
 to reshuffle the read-only check a bit (which is there to prevent
 writing to a filesystem which has been remounted read-only after error
 I assume).

 Reviewed-by: Zheng Liu <wenqing.lz@taobao.com>
 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/fsync.c b/fs/ext4/fsync.c
index 41e008a..00e640b 100644
--- a/fs/ext4/fsync.c
+++ b/fs/ext4/fsync.c
@@ -73,32 +73,6 @@ static int ext4_sync_parent(struct inode *inode)
  return ret;
 }
 
-/**
- * __sync_file - generic_file_fsync without the locking and filemap_write
- * @inode: inode to sync
- * @datasync: only sync essential metadata if true
- *
- * This is just generic_file_fsync without the locking.  This is needed for
- * nojournal mode to make sure this inodes data/metadata makes it to disk
- * properly.  The i_mutex should be held already.
- */
-static int __sync_inode(struct inode *inode, int datasync)
-{
- int err;
- int ret;
-
- ret = sync_mapping_buffers(inode->i_mapping);
- if (!(inode->i_state & I_DIRTY))
-  return ret;
- if (datasync && !(inode->i_state & I_DIRTY_DATASYNC))
-  return ret;
-
- err = sync_inode_metadata(inode, 1);
- if (ret == 0)
-  ret = err;
- return ret;
-}
-
 /*
  * akpm: A new design for ext4_sync_file().
  *
@@ -116,7 +90,7 @@ int ext4_sync_file(struct file *file, loff_t start, loff_t end, int datasync)
  struct inode *inode = file->f_mapping->host;
  struct ext4_inode_info *ei = EXT4_I(inode);
  journal_t *journal = EXT4_SB(inode->i_sb)->s_journal;
- int ret, err;
+ int ret = 0, err;
  tid_t commit_tid;
  bool needs_barrier = false;
 
@@ -124,26 +98,26 @@ int ext4_sync_file(struct file *file, loff_t start, loff_t end, int datasync)
 
  trace_ext4_sync_file_enter(file, datasync);
 
- ret = filemap_write_and_wait_range(inode->i_mapping, start, end);
- if (ret)
-  return ret;
- mutex_lock(&inode->i_mutex);
-
  if (inode->i_sb->s_flags & MS_RDONLY) {
   /* Make sure that we read updated s_mount_flags value */
   smp_rmb();
   if (EXT4_SB(inode->i_sb)->s_mount_flags & EXT4_MF_FS_ABORTED)
    ret = -EROFS;
-  goto out;
+  goto out_trace;
  }
 
  if (!journal) {
-  ret = __sync_inode(inode, datasync);
+  ret = generic_file_fsync(file, start, end, datasync);
   if (!ret && !hlist_empty(&inode->i_dentry))
    ret = ext4_sync_parent(inode);
-  goto out;
+  goto out_trace;
  }
 
+ ret = filemap_write_and_wait_range(inode->i_mapping, start, end);
+ if (ret)
+  return ret;
+ mutex_lock(&inode->i_mutex);
+
  /*
   * data=writeback,ordered:
   *  The caller's filemap_fdatawrite()/wait will sync the data.
@@ -173,8 +147,9 @@ int ext4_sync_file(struct file *file, loff_t start, loff_t end, int datasync)
   if (!ret)
    ret = err;
  }
- out:
+out:
  mutex_unlock(&inode->i_mutex);
+out_trace:
  trace_ext4_sync_file_exit(inode, ret);
  return ret;
 }
-- 
1.7.1