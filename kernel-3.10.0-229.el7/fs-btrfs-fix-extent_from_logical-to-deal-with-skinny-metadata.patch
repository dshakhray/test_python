From 8e4289075932db3bc35eccc8cf7af09fc237256c Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 18:59:52 -0400
Subject: [fs] btrfs: fix extent_from_logical to deal with skinny metadata

Message-id: <1407179109-13714-106-git-send-email-sandeen@redhat.com>
Patchwork-id: 87064
O-Subject: [RHEL7.1 PATCH 105/422] Btrfs: fix extent_from_logical to deal with skinny metadata
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Josef Bacik <jbacik@fb.com>

commit 580f0a678ebeba85d30b6a7f22ce32c472263c72
Author: Josef Bacik <jbacik@fb.com>
Date:   Thu Jan 23 16:03:45 2014 -0500

    Btrfs: fix extent_from_logical to deal with skinny metadata

    I don't think this is an issue and I've not seen it in practice but
    extent_from_logical will fail to find a skinny extent because it uses
    btrfs_previous_item and gives it the normal extent item type.  This is just not
    a place to use btrfs_previous_item since we care about either normal extents or
    skinny extents, so open code btrfs_previous_item to properly check.  This would
    only affect metadata and the only place this is used for metadata is scrub and
    I'm pretty sure it's just for printing stuff out, not actually doing any work so
    hopefully it was never a problem other than a cosmetic one.  Thanks,

    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/backref.c b/fs/btrfs/backref.c
index 34a8952..dcf2448 100644
--- a/fs/btrfs/backref.c
+++ b/fs/btrfs/backref.c
@@ -1302,20 +1302,45 @@ int extent_from_logical(struct btrfs_fs_info *fs_info, u64 logical,
  ret = btrfs_search_slot(NULL, fs_info->extent_root, &key, path, 0, 0);
  if (ret < 0)
   return ret;
- ret = btrfs_previous_item(fs_info->extent_root, path,
-     0, BTRFS_EXTENT_ITEM_KEY);
- if (ret < 0)
-  return ret;
 
- btrfs_item_key_to_cpu(path->nodes[0], found_key, path->slots[0]);
+ while (1) {
+  u32 nritems;
+  if (path->slots[0] == 0) {
+   btrfs_set_path_blocking(path);
+   ret = btrfs_prev_leaf(fs_info->extent_root, path);
+   if (ret != 0) {
+    if (ret > 0) {
+     pr_debug("logical %llu is not within "
+       "any extent\n", logical);
+     ret = -ENOENT;
+    }
+    return ret;
+   }
+  } else {
+   path->slots[0]--;
+  }
+  nritems = btrfs_header_nritems(path->nodes[0]);
+  if (nritems == 0) {
+   pr_debug("logical %llu is not within any extent\n",
+     logical);
+   return -ENOENT;
+  }
+  if (path->slots[0] == nritems)
+   path->slots[0]--;
+
+  btrfs_item_key_to_cpu(path->nodes[0], found_key,
+          path->slots[0]);
+  if (found_key->type == BTRFS_EXTENT_ITEM_KEY ||
+      found_key->type == BTRFS_METADATA_ITEM_KEY)
+   break;
+ }
+
  if (found_key->type == BTRFS_METADATA_ITEM_KEY)
   size = fs_info->extent_root->leafsize;
  else if (found_key->type == BTRFS_EXTENT_ITEM_KEY)
   size = found_key->offset;
 
- if ((found_key->type != BTRFS_EXTENT_ITEM_KEY &&
-      found_key->type != BTRFS_METADATA_ITEM_KEY) ||
-     found_key->objectid > logical ||
+ if (found_key->objectid > logical ||
      found_key->objectid + size <= logical) {
   pr_debug("logical %llu is not within any extent\n", logical);
   return -ENOENT;
-- 
1.7.1