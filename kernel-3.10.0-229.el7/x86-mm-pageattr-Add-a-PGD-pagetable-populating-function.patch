From 339186f3a52ff897abeb46ac87a495b9701ee7aa Mon Sep 17 00:00:00 2001
From: Dave Young <dyoung@redhat.com>
Date: Thu, 22 May 2014 02:42:59 -0400
Subject: [x86] mm/pageattr: Add a PGD pagetable populating function

Message-id: <1400726607-13717-8-git-send-email-dyoung@redhat.com>
Patchwork-id: 80108
O-Subject: [RHEL7.1 PATCH 07/35] x86/mm/pageattr: Add a PGD pagetable populating function
Bugzilla: 1080109
RH-Acked-by: Chao WANG <chaowang@redhat.com>
RH-Acked-by: Vivek Goyal <vgoyal@redhat.com>

Resolves: bz1080109

Brew build:
https://brewweb.devel.redhat.com/taskinfo?taskID=7480539

Test: Tested kexec/kdump on HP workstation and qemu.

Upstream commit:
commit f3f729661e8db476ac427a97de015307aebb7404
Author: Borislav Petkov <bp@suse.de>
Date:   Thu Oct 31 17:25:01 2013 +0100

    x86/mm/pageattr: Add a PGD pagetable populating function

    This allocates, if necessary, and populates the corresponding PGD entry
    with a PUD page. The next population level is a dummy macro which will
    be removed by the next patch and it is added here to keep the patch
    small and easily reviewable but not break bisection, at the same time.

    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Matt Fleming <matt.fleming@intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index c53de62..4b47ae0 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -666,6 +666,45 @@ static int split_large_page(pte_t *kpte, unsigned long address)
  return 0;
 }
 
+#define populate_pud(cpa, addr, pgd, pgprot) (-1)
+
+/*
+ * Restrictions for kernel page table do not necessarily apply when mapping in
+ * an alternate PGD.
+ */
+static int populate_pgd(struct cpa_data *cpa, unsigned long addr)
+{
+ pgprot_t pgprot = __pgprot(_KERNPG_TABLE);
+ bool allocd_pgd = false;
+ pgd_t *pgd_entry;
+ pud_t *pud = NULL; /* shut up gcc */
+ int ret;
+
+ pgd_entry = cpa->pgd + pgd_index(addr);
+
+ /*
+  * Allocate a PUD page and hand it down for mapping.
+  */
+ if (pgd_none(*pgd_entry)) {
+  pud = (pud_t *)get_zeroed_page(GFP_KERNEL | __GFP_NOTRACK);
+  if (!pud)
+   return -1;
+
+  set_pgd(pgd_entry, __pgd(__pa(pud) | _KERNPG_TABLE));
+  allocd_pgd = true;
+ }
+
+ pgprot_val(pgprot) &= ~pgprot_val(cpa->mask_clr);
+ pgprot_val(pgprot) |=  pgprot_val(cpa->mask_set);
+
+ ret = populate_pud(cpa, addr, pgd_entry, pgprot);
+ if (ret < 0)
+  return ret;
+
+ cpa->numpages = ret;
+ return 0;
+}
+
 static int __cpa_process_fault(struct cpa_data *cpa, unsigned long vaddr,
           int primary)
 {
-- 
1.7.1