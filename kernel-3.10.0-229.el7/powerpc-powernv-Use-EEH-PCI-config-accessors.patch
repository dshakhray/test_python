From be1e8f746e40198eebd0dd38b43fb6f5f442fdf1 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:11:50 -0400
Subject: [powerpc] powernv: Use EEH PCI config accessors

Message-id: <1410545655-205645-482-git-send-email-dzickus@redhat.com>
Patchwork-id: 94477
O-Subject: [RHEL7 PATCH 481/626] powerpc/powernv: Use EEH PCI config accessors
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 1d9a544646cd0c2c9367aea6d3a7b6f42c9467ac
Author: Gavin Shan <gwshan@linux.vnet.ibm.com>
Date:   Thu Apr 24 18:00:13 2014 +1000

    powerpc/powernv: Use EEH PCI config accessors

    For EEH PowerNV backends, they need use their own PCI config
    accesors as the normal one could be blocked during PE reset.
    The patch also removes necessary parameter "hose" for the
    function ioda_eeh_bridge_reset().

    Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

backport notes: another prematurely pulled in commit caused the context of
this patch to change
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/platforms/powernv/eeh-ioda.c b/arch/powerpc/platforms/powernv/eeh-ioda.c
index c50ba8c..9c35363 100644
--- a/arch/powerpc/platforms/powernv/eeh-ioda.c
+++ b/arch/powerpc/platforms/powernv/eeh-ioda.c
@@ -491,28 +491,29 @@ out:
  return 0;
 }
 
-static int ioda_eeh_bridge_reset(struct pci_controller *hose,
-  struct pci_dev *dev, int option)
+static int ioda_eeh_bridge_reset(struct pci_dev *dev, int option)
+
 {
- u16 ctrl;
+ struct device_node *dn = pci_device_to_OF_node(dev);
+ u32 ctrl;
 
- pr_debug("%s: Reset device %04x:%02x:%02x.%01x with option %d\n",
-   __func__, hose->global_number, dev->bus->number,
-   PCI_SLOT(dev->devfn), PCI_FUNC(dev->devfn), option);
+ pr_debug("%s: Reset PCI bus %04x:%02x with option %d\n",
+   __func__, pci_domain_nr(dev->bus),
+   dev->bus->number, option);
 
  switch (option) {
  case EEH_RESET_FUNDAMENTAL:
  case EEH_RESET_HOT:
-  pci_read_config_word(dev, PCI_BRIDGE_CONTROL, &ctrl);
+  eeh_ops->read_config(dn, PCI_BRIDGE_CONTROL, 2, &ctrl);
   ctrl |= PCI_BRIDGE_CTL_BUS_RESET;
-  pci_write_config_word(dev, PCI_BRIDGE_CONTROL, ctrl);
+  eeh_ops->write_config(dn, PCI_BRIDGE_CONTROL, 2, ctrl);
 
   msleep(EEH_PE_RST_HOLD_TIME);
   break;
  case EEH_RESET_DEACTIVATE:
-  pci_read_config_word(dev, PCI_BRIDGE_CONTROL, &ctrl);
+  eeh_ops->read_config(dn, PCI_BRIDGE_CONTROL, 2, &ctrl);
   ctrl &= ~PCI_BRIDGE_CTL_BUS_RESET;
-  pci_write_config_word(dev, PCI_BRIDGE_CONTROL, ctrl);
+  eeh_ops->write_config(dn, PCI_BRIDGE_CONTROL, 2, ctrl);
 
   msleep(EEH_PE_RST_SETTLE_TIME);
   break;
@@ -569,7 +570,7 @@ static int ioda_eeh_reset(struct eeh_pe *pe, int option)
   if (pci_is_root_bus(bus))
    ret = ioda_eeh_root_reset(hose, option);
   else
-   ret = ioda_eeh_bridge_reset(hose, bus->self, option);
+   ret = ioda_eeh_bridge_reset(bus->self, option);
  }
 
  return ret;
-- 
1.7.1