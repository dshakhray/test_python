From 2ee1d153e3c89788017e6c0427ab821887ba8ab8 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:04:03 -0400
Subject: [usb] serial: fix race in generic write

Message-id: <1410887463-20674-172-git-send-email-dzickus@redhat.com>
Patchwork-id: 95293
O-Subject: [RHEL7 PATCH 171/591] USB: serial: fix race in generic write
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 6f6485463aada1ec6a0f3db6a03eb8e393d6bb55
Author: Johan Hovold <jhovold@gmail.com>
Date:   Sat Nov 9 12:38:09 2013 +0100

    USB: serial: fix race in generic write

    Fix race in generic write implementation, which could lead to
    temporarily degraded throughput.

    The current generic write implementation introduced by commit
    27c7acf22047 ("USB: serial: reimplement generic fifo-based writes") has
    always had this bug, although it's fairly hard to trigger and the
    consequences are not likely to be noticed.

    Specifically, a write() on one CPU while the completion handler is
    running on another could result in only one of the two write urbs being
    utilised to empty the remainder of the write fifo (unless there is a
    second write() that doesn't race during that time).

    Cc: stable <stable@vger.kernel.org> # 2.6.35
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/generic.c b/drivers/usb/serial/generic.c
index 2b01ec8..e36b25a 100644
--- a/drivers/usb/serial/generic.c
+++ b/drivers/usb/serial/generic.c
@@ -173,16 +173,8 @@ retry:
   clear_bit_unlock(USB_SERIAL_WRITE_BUSY, &port->flags);
   return result;
  }
- /*
-  * Try sending off another urb, unless called from completion handler
-  * (in which case there will be no free urb or no data).
-  */
- if (mem_flags != GFP_ATOMIC)
-  goto retry;
 
- clear_bit_unlock(USB_SERIAL_WRITE_BUSY, &port->flags);
-
- return 0;
+ goto retry; /* try sending off another urb */
 }
 EXPORT_SYMBOL_GPL(usb_serial_generic_write_start);
 
-- 
1.7.1