From 9194c2d8b02cfc961245ca881aec1409e8323851 Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Wed, 20 Aug 2014 18:59:18 -0400
Subject: [scsi] scsi_debug: reduce duplication between prot_verify_read and prot_verify_write

Message-id: <1408561176-18133-40-git-send-email-emilne@redhat.com>
Patchwork-id: 88454
O-Subject: [RHEL7.1 PATCH e-stor 39/57] [SCSI] scsi_debug: reduce duplication between prot_verify_read and prot_verify_write
Bugzilla: 1132100
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Ewan D. Milne" <emilne@redhat.com>

upstream commit beb40ea42bd65511bc275a7d58d3753835906be5

Tested by Ewan D. Milne and Barry Donahue with a combination
of manual and automated testing.  No issues seen.

upstream commit beb40ea42bd65511bc275a7d58d3753835906be5
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Sat Jun 29 17:59:19 2013 +0900

    [SCSI] scsi_debug: reduce duplication between prot_verify_read and prot_verify_write

    In order to reduce code duplication between prot_verify_read() and
    prot_verify_write(), this moves common code into the new functions.

    [jejb: fix unitialised variable warning]
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Acked-by: "Martin K. Petersen" <martin.petersen@oracle.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

Signed-off-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/scsi_debug.c b/drivers/scsi/scsi_debug.c
index 314c374..d9d9ae2 100644
--- a/drivers/scsi/scsi_debug.c
+++ b/drivers/scsi/scsi_debug.c
@@ -1710,6 +1710,50 @@ static int do_device_access(struct scsi_cmnd *scmd,
  return ret;
 }
 
+static u16 dif_compute_csum(const void *buf, int len)
+{
+ u16 csum;
+
+ switch (scsi_debug_guard) {
+ case 1:
+  csum = ip_compute_csum(buf, len);
+  break;
+ case 0:
+  csum = cpu_to_be16(crc_t10dif(buf, len));
+  break;
+ }
+ return csum;
+}
+
+static int dif_verify(struct sd_dif_tuple *sdt, const void *data,
+        sector_t sector, u32 ei_lba)
+{
+ u16 csum = dif_compute_csum(data, scsi_debug_sector_size);
+
+ if (sdt->guard_tag != csum) {
+  pr_err("%s: GUARD check failed on sector %lu rcvd 0x%04x, data 0x%04x\n",
+   __func__,
+   (unsigned long)sector,
+   be16_to_cpu(sdt->guard_tag),
+   be16_to_cpu(csum));
+  return 0x01;
+ }
+ if (scsi_debug_dif == SD_DIF_TYPE1_PROTECTION &&
+     be32_to_cpu(sdt->ref_tag) != (sector & 0xffffffff)) {
+  pr_err("%s: REF check failed on sector %lu\n",
+   __func__, (unsigned long)sector);
+  return 0x03;
+ }
+ if (scsi_debug_dif == SD_DIF_TYPE2_PROTECTION &&
+     be32_to_cpu(sdt->ref_tag) != ei_lba) {
+  pr_err("%s: REF check failed on sector %lu\n",
+   __func__, (unsigned long)sector);
+   dif_errors++;
+  return 0x03;
+ }
+ return 0;
+}
+
 static int prot_verify_read(struct scsi_cmnd *SCpnt, sector_t start_sec,
        unsigned int sectors, u32 ei_lba)
 {
@@ -1725,53 +1769,19 @@ static int prot_verify_read(struct scsi_cmnd *SCpnt, sector_t start_sec,
  sdt = dif_storep + start_sec;
 
  for (i = 0 ; i < sectors ; i++) {
-  u16 csum;
+  int ret;
 
   if (sdt[i].app_tag == 0xffff)
    continue;
 
   sector = start_sec + i;
 
-  switch (scsi_debug_guard) {
-  case 1:
-   csum = ip_compute_csum(fake_storep +
-            sector * scsi_debug_sector_size,
-            scsi_debug_sector_size);
-   break;
-  case 0:
-   csum = crc_t10dif(fake_storep +
-       sector * scsi_debug_sector_size,
-       scsi_debug_sector_size);
-   csum = cpu_to_be16(csum);
-   break;
-  default:
-   BUG();
-  }
-
-  if (sdt[i].guard_tag != csum) {
-   printk(KERN_ERR "%s: GUARD check failed on sector %lu" \
-          " rcvd 0x%04x, data 0x%04x\n", __func__,
-          (unsigned long)sector,
-          be16_to_cpu(sdt[i].guard_tag),
-          be16_to_cpu(csum));
-   dif_errors++;
-   return 0x01;
-  }
-
-  if (scsi_debug_dif == SD_DIF_TYPE1_PROTECTION &&
-      be32_to_cpu(sdt[i].ref_tag) != (sector & 0xffffffff)) {
-   printk(KERN_ERR "%s: REF check failed on sector %lu\n",
-          __func__, (unsigned long)sector);
-   dif_errors++;
-   return 0x03;
-  }
-
-  if (scsi_debug_dif == SD_DIF_TYPE2_PROTECTION &&
-      be32_to_cpu(sdt[i].ref_tag) != ei_lba) {
-   printk(KERN_ERR "%s: REF check failed on sector %lu\n",
-          __func__, (unsigned long)sector);
+  ret = dif_verify(&sdt[i],
+     fake_storep + sector * scsi_debug_sector_size,
+     sector, ei_lba);
+  if (ret) {
    dif_errors++;
-   return 0x03;
+   return ret;
   }
 
   ei_lba++;
@@ -1880,7 +1890,6 @@ static int prot_verify_write(struct scsi_cmnd *SCpnt, sector_t start_sec,
  sector_t tmp_sec = start_sec;
  sector_t sector;
  int ppage_offset;
- unsigned short csum;
 
  sector = do_div(tmp_sec, sdebug_store_sectors);
 
@@ -1911,50 +1920,8 @@ static int prot_verify_write(struct scsi_cmnd *SCpnt, sector_t start_sec,
 
    sdt = paddr + ppage_offset;
 
-   switch (scsi_debug_guard) {
-   case 1:
-    csum = ip_compute_csum(daddr + j,
-             scsi_debug_sector_size);
-    break;
-   case 0:
-    csum = cpu_to_be16(crc_t10dif(daddr + j,
-            scsi_debug_sector_size));
-    break;
-   default:
-    BUG();
-    ret = 0;
-    goto out;
-   }
-
-   if (sdt->guard_tag != csum) {
-    printk(KERN_ERR
-           "%s: GUARD check failed on sector %lu " \
-           "rcvd 0x%04x, calculated 0x%04x\n",
-           __func__, (unsigned long)sector,
-           be16_to_cpu(sdt->guard_tag),
-           be16_to_cpu(csum));
-    ret = 0x01;
-    dump_sector(daddr + j, scsi_debug_sector_size);
-    goto out;
-   }
-
-   if (scsi_debug_dif == SD_DIF_TYPE1_PROTECTION &&
-       be32_to_cpu(sdt->ref_tag)
-       != (start_sec & 0xffffffff)) {
-    printk(KERN_ERR
-           "%s: REF check failed on sector %lu\n",
-           __func__, (unsigned long)sector);
-    ret = 0x03;
-    dump_sector(daddr + j, scsi_debug_sector_size);
-    goto out;
-   }
-
-   if (scsi_debug_dif == SD_DIF_TYPE2_PROTECTION &&
-       be32_to_cpu(sdt->ref_tag) != ei_lba) {
-    printk(KERN_ERR
-           "%s: REF check failed on sector %lu\n",
-           __func__, (unsigned long)sector);
-    ret = 0x03;
+   ret = dif_verify(sdt, daddr + j, start_sec, ei_lba);
+   if (ret) {
     dump_sector(daddr + j, scsi_debug_sector_size);
     goto out;
    }
-- 
1.7.1