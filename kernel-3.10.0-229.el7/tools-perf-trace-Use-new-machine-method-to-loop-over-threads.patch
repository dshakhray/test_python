From 713240a6d9482e94e77df2e0d92a816873faae5e Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:25:26 -0400
Subject: [tools] perf/trace: Use new machine method to loop over threads

Message-id: <1408462094-14194-158-git-send-email-jolsa@redhat.com>
Patchwork-id: 88140
O-Subject: [PATCH RHEL7.1 BZ1131394 157/325] perf trace: Use new machine method to loop over threads
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 896cbb56bfee6ad99e0ee1b8209dc678f1a49f5a
Author: David Ahern <dsahern@gmail.com>
Date: Sat Sep 28 13:12:59 2013 -0600

description
===========
Use the new machine method that loops over threads to dump summary data.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 887ff88..0c46af7 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -1753,37 +1753,57 @@ static size_t trace__fprintf_threads_header(FILE *fp)
  return printed;
 }
 
+/* struct used to pass data to per-thread function */
+struct summary_data {
+ FILE *fp;
+ struct trace *trace;
+ size_t printed;
+};
+
+static int trace__fprintf_one_thread(struct thread *thread, void *priv)
+{
+ struct summary_data *data = priv;
+ FILE *fp = data->fp;
+ size_t printed = data->printed;
+ struct trace *trace = data->trace;
+ struct thread_trace *ttrace = thread->priv;
+ const char *color;
+ double ratio;
+
+ if (ttrace == NULL)
+  return 0;
+
+ ratio = (double)ttrace->nr_events / trace->nr_events * 100.0;
+
+ color = PERF_COLOR_NORMAL;
+ if (ratio > 50.0)
+  color = PERF_COLOR_RED;
+ else if (ratio > 25.0)
+  color = PERF_COLOR_GREEN;
+ else if (ratio > 5.0)
+  color = PERF_COLOR_YELLOW;
+
+ printed += color_fprintf(fp, color, "%20s", thread->comm);
+ printed += fprintf(fp, " - %-5d :%11lu   [", thread->tid, ttrace->nr_events);
+ printed += color_fprintf(fp, color, "%5.1f%%", ratio);
+ printed += fprintf(fp, " ] %10.3f ms\n", ttrace->runtime_ms);
+
+ data->printed += printed;
+
+ return 0;
+}
+
 static size_t trace__fprintf_thread_summary(struct trace *trace, FILE *fp)
 {
- size_t printed = trace__fprintf_threads_header(fp);
- struct rb_node *nd;
-
- for (nd = rb_first(&trace->host->threads); nd; nd = rb_next(nd)) {
-  struct thread *thread = rb_entry(nd, struct thread, rb_node);
-  struct thread_trace *ttrace = thread->priv;
-  const char *color;
-  double ratio;
-
-  if (ttrace == NULL)
-   continue;
-
-  ratio = (double)ttrace->nr_events / trace->nr_events * 100.0;
-
-  color = PERF_COLOR_NORMAL;
-  if (ratio > 50.0)
-   color = PERF_COLOR_RED;
-  else if (ratio > 25.0)
-   color = PERF_COLOR_GREEN;
-  else if (ratio > 5.0)
-   color = PERF_COLOR_YELLOW;
-
-  printed += color_fprintf(fp, color, "%20s", thread->comm);
-  printed += fprintf(fp, " - %-5d :%11lu   [", thread->tid, ttrace->nr_events);
-  printed += color_fprintf(fp, color, "%5.1f%%", ratio);
-  printed += fprintf(fp, " ] %10.3f ms\n", ttrace->runtime_ms);
- }
+ struct summary_data data = {
+  .fp = fp,
+  .trace = trace
+ };
+ data.printed = trace__fprintf_threads_header(fp);
 
- return printed;
+ machine__for_each_thread(trace->host, trace__fprintf_one_thread, &data);
+
+ return data.printed;
 }
 
 static int trace__set_duration(const struct option *opt, const char *str,
-- 
1.7.1