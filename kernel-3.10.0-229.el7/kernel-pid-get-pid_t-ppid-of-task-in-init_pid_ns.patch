From 768d9445339e265c78057352e4d388969eb42fdc Mon Sep 17 00:00:00 2001
From: Richard Guy Briggs <rgb@redhat.com>
Date: Tue, 23 Sep 2014 03:59:04 -0400
Subject: [kernel] pid: get pid_t ppid of task in init_pid_ns

Message-id: <18bac2154b449b2ded27a54004e6481726fb919d.1411415193.git.rgb@redhat.com>
Patchwork-id: 96453
O-Subject: [RHEL7 PATCH 1/5] pid: get pid_t ppid of task in init_pid_ns
Bugzilla: 1010455
RH-Acked-by: Paul Moore <pmoore@redhat.com>

Added the functions task_ppid_nr_ns() and task_ppid_nr() to abstract the lookup
of the PPID (real_parent's pid_t) of a process, including rcu locking, in the
arbitrary and init_pid_ns.
This provides an alternative to sys_getppid(), which is relative to the child
process' pid namespace.

Upstream: ad36d28
(informed by ebiederman's 6c621b7e)
Cc: stable@vger.kernel.org
Cc: Eric W. Biederman <ebiederm@xmission.com>
Signed-off-by: Richard Guy Briggs <rgb@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 869c96c..1b2696e 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1621,6 +1621,24 @@ static inline pid_t task_tgid_vnr(struct task_struct *tsk)
 }
 
 
+static int pid_alive(const struct task_struct *p);
+static inline pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
+{
+ pid_t pid = 0;
+
+ rcu_read_lock();
+ if (pid_alive(tsk))
+  pid = task_tgid_nr_ns(rcu_dereference(tsk->real_parent), ns);
+ rcu_read_unlock();
+
+ return pid;
+}
+
+static inline pid_t task_ppid_nr(const struct task_struct *tsk)
+{
+ return task_ppid_nr_ns(tsk, &init_pid_ns);
+}
+
 static inline pid_t task_pgrp_nr_ns(struct task_struct *tsk,
      struct pid_namespace *ns)
 {
@@ -1660,7 +1678,7 @@ static inline pid_t task_pgrp_nr(struct task_struct *tsk)
  *
  * Return: 1 if the process is alive. 0 otherwise.
  */
-static inline int pid_alive(struct task_struct *p)
+static inline int pid_alive(const struct task_struct *p)
 {
  return p->pids[PIDTYPE_PID].pid != NULL;
 }
-- 
1.7.1