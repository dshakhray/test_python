From daff499a2f9dc00feb7a3ac8d0a3782ceb80de74 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:03:02 -0400
Subject: [acpi] hotplug/pci: Allow slots without new devices to be rescanned

Message-id: <20140710010301.22146.89213.stgit@gir.stowe>
Patchwork-id: 85585
O-Subject: [RHEL7.1 PATCH 046/105] ACPI / hotplug / PCI: Allow slots without new devices to be rescanned
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: b91182a67c53db227e34921838dd683090ecfabc

commit b91182a67c53db227e34921838dd683090ecfabc
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Sat Jul 13 23:27:26 2013 +0200

    ACPI / hotplug / PCI: Allow slots without new devices to be rescanned

    Currently, enable_device() checks the return value of pci_scan_slot()
    and returns immediately if that's 0 (meaning that no new functions
    have been found in the slot).  However, if one of the functions in
    the slot is a bridge, some new devices may appear below it even if
    the bridge itself is present continuously, so it generally is
    necessary to do the rescan anyway just in case.  [In particular,
    that's necessary with the Thunderbolt daisy chaining in which case
    new devices may be connected to the existing ones down the chain.]

    The correctness of this change relies on the ability of
    pcibios_resource_survey_bus() to detect if it has already been called
    for the given bus and to skip it if so.  Failure to do that will lead
    to resource allocation conflicts.

    [rjw: Changelog]
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index a4e4b99..83e5407 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -542,18 +542,13 @@ static int __ref enable_device(struct acpiphp_slot *slot)
  struct pci_dev *dev;
  struct pci_bus *bus = slot->bus;
  struct acpiphp_func *func;
- int num, max, pass;
+ int max, pass;
  LIST_HEAD(add_list);
 
  list_for_each_entry(func, &slot->funcs, sibling)
   acpiphp_bus_add(func_to_handle(func));
 
- num = pci_scan_slot(bus, PCI_DEVFN(slot->device, 0));
- if (num == 0) {
-  /* Maybe only part of funcs are added. */
-  pr_debug("No new device found\n");
-  goto err_exit;
- }
+ pci_scan_slot(bus, PCI_DEVFN(slot->device, 0));
 
  max = acpiphp_max_busnr(bus);
  for (pass = 0; pass < 2; pass++) {
@@ -598,8 +593,6 @@ static int __ref enable_device(struct acpiphp_slot *slot)
   }
  }
 
-
- err_exit:
  return 0;
 }
 
-- 
1.7.1