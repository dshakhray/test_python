From 127306ac53d72a59095d16a8e4c88bcd9a5ee275 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 00:59:56 -0400
Subject: [acpi] dock: Rework the handling of notifications

Message-id: <20140710005955.22146.77890.stgit@gir.stowe>
Patchwork-id: 85555
O-Subject: [RHEL7.1 PATCH 016/105] ACPI / dock: Rework the handling of notifications
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 59401ccce8729e5c43f9781cc5570da5ca470e27

commit 59401ccce8729e5c43f9781cc5570da5ca470e27
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Jun 30 23:48:49 2013 +0200

    ACPI / dock: Rework the handling of notifications

    The ACPI dock driver uses register_acpi_bus_notifier() which
    installs a notifier triggered globally for all system notifications.
    That first of all is inefficient, because the dock driver is only
    interested in notifications associated with the devices it handles,
    but it has to handle all system notifies for all devices.  Moreover,
    it does that even if no docking stations are present in the system
    (CONFIG_ACPI_DOCK set is sufficient for that to happen).  Besides,
    that is inconvenient, because it requires the driver to do extra work
    for each notification to find the target dock station object.

    For these reasons, rework the dock driver to install a notify
    handler individually for each dock station in the system using
    acpi_install_notify_handler().  This allows the dock station
    object to be passed directly to the notify handler and makes it
    possible to simplify the dock driver quite a bit.  It also
    reduces the overhead related to the handling of all system
    notifies when CONFIG_ACPI_DOCK is set.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/dock.c b/drivers/acpi/dock.c
index b1170d6..a326c79 100644
--- a/drivers/acpi/dock.c
+++ b/drivers/acpi/dock.c
@@ -607,18 +607,17 @@ static int handle_eject_request(struct dock_station *ds, u32 event)
 
 /**
  * dock_notify - act upon an acpi dock notification
- * @handle: the dock station handle
+ * @ds: dock station
  * @event: the acpi event
- * @data: our driver data struct
  *
  * If we are notified to dock, then check to see if the dock is
  * present and then dock.  Notify all drivers of the dock event,
  * and then hotplug and devices that may need hotplugging.
  */
-static void dock_notify(acpi_handle handle, u32 event, void *data)
+static void dock_notify(struct dock_station *ds, u32 event)
 {
- struct dock_station *ds = data;
- struct acpi_device *tmp;
+ acpi_handle handle = ds->handle;
+ struct acpi_device *ad;
  int surprise_removal = 0;
 
  /*
@@ -641,8 +640,7 @@ static void dock_notify(acpi_handle handle, u32 event, void *data)
  switch (event) {
  case ACPI_NOTIFY_BUS_CHECK:
  case ACPI_NOTIFY_DEVICE_CHECK:
-  if (!dock_in_progress(ds) && acpi_bus_get_device(ds->handle,
-     &tmp)) {
+  if (!dock_in_progress(ds) && acpi_bus_get_device(handle, &ad)) {
    begin_dock(ds);
    dock(ds);
    if (!dock_present(ds)) {
@@ -679,9 +677,8 @@ static void dock_notify(acpi_handle handle, u32 event, void *data)
 }
 
 struct dock_data {
- acpi_handle handle;
- unsigned long event;
  struct dock_station *ds;
+ u32 event;
 };
 
 static void acpi_dock_deferred_cb(void *context)
@@ -689,52 +686,31 @@ static void acpi_dock_deferred_cb(void *context)
  struct dock_data *data = context;
 
  acpi_scan_lock_acquire();
- dock_notify(data->handle, data->event, data->ds);
+ dock_notify(data->ds, data->event);
  acpi_scan_lock_release();
  kfree(data);
 }
 
-static int acpi_dock_notifier_call(struct notifier_block *this,
- unsigned long event, void *data)
+static void dock_notify_handler(acpi_handle handle, u32 event, void *data)
 {
- struct dock_station *dock_station;
- acpi_handle handle = data;
+ struct dock_data *dd;
 
  if (event != ACPI_NOTIFY_BUS_CHECK && event != ACPI_NOTIFY_DEVICE_CHECK
     && event != ACPI_NOTIFY_EJECT_REQUEST)
-  return 0;
-
- acpi_scan_lock_acquire();
-
- list_for_each_entry(dock_station, &dock_stations, sibling) {
-  if (dock_station->handle == handle) {
-   struct dock_data *dd;
-   acpi_status status;
-
-   dd = kmalloc(sizeof(*dd), GFP_KERNEL);
-   if (!dd)
-    break;
+  return;
 
-   dd->handle = handle;
-   dd->event = event;
-   dd->ds = dock_station;
-   status = acpi_os_hotplug_execute(acpi_dock_deferred_cb,
-        dd);
-   if (ACPI_FAILURE(status))
-    kfree(dd);
+ dd = kmalloc(sizeof(*dd), GFP_KERNEL);
+ if (dd) {
+  acpi_status status;
 
-   break;
-  }
+  dd->ds = data;
+  dd->event = event;
+  status = acpi_os_hotplug_execute(acpi_dock_deferred_cb, dd);
+  if (ACPI_FAILURE(status))
+   kfree(dd);
  }
-
- acpi_scan_lock_release();
- return 0;
 }
 
-static struct notifier_block dock_acpi_notifier = {
- .notifier_call = acpi_dock_notifier_call,
-};
-
 /**
  * find_dock_devices - find devices on the dock station
  * @handle: the handle of the device we are examining
@@ -868,6 +844,7 @@ static int __init dock_add(acpi_handle handle)
  int ret, id;
  struct dock_station ds, *dock_station;
  struct platform_device *dd;
+ acpi_status status;
 
  id = dock_station_count;
  memset(&ds, 0, sizeof(ds));
@@ -908,6 +885,11 @@ static int __init dock_add(acpi_handle handle)
  if (ret)
   goto err_rmgroup;
 
+ status = acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,
+          dock_notify_handler, dock_station);
+ if (ACPI_FAILURE(status))
+  goto err_rmgroup;
+
  dock_station_count++;
  list_add(&dock_station->sibling, &dock_stations);
  return 0;
@@ -953,7 +935,6 @@ void __init acpi_dock_init(void)
  }
 
  ATOMIC_INIT_NOTIFIER_HEAD(&dock_notifier_list);
- register_acpi_bus_notifier(&dock_acpi_notifier);
  pr_info(PREFIX "%s: %d docks/bays found\n",
   ACPI_DOCK_DRIVER_DESCRIPTION, dock_station_count);
 }
-- 
1.7.1