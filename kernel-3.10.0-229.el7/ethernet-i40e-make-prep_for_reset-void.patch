From a7ee4e565e9340274156edc2f9fdfe40ab2e5230 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:39:17 -0400
Subject: [ethernet] i40e: make prep_for_reset void

Message-id: <1409658042-22689-197-git-send-email-sassmann@redhat.com>
Patchwork-id: 90389
O-Subject: [RHEL7.1 PATCH 196/281] i40e: make prep_for_reset void
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Shannon Nelson <shannon.nelson@intel.com>

The return from i40e_prep_for_reset() was being ignored by almost all
its callers.  The one place it wasn't ignored could have caused a silent
and confusing failure of the driver to finish a reset.  Since we really
are doing a rebuild anyway, ignore this last case as well and simply
make the function a void type.

Change-ID: Ia4fed7f903d39a6c47c5722625a53e59c3f7ed53
Signed-off-by: Shannon Nelson <shannon.nelson@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 23cfbe074da66305d992c663b778d12476eeefce)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 0e2f3da..c625760 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -5611,7 +5611,7 @@ static void i40e_fdir_teardown(struct i40e_pf *pf)
  *
  * Close up the VFs and other things in prep for pf Reset.
   **/
-static int i40e_prep_for_reset(struct i40e_pf *pf)
+static void i40e_prep_for_reset(struct i40e_pf *pf)
 {
  struct i40e_hw *hw = &pf->hw;
  i40e_status ret = 0;
@@ -5619,7 +5619,7 @@ static int i40e_prep_for_reset(struct i40e_pf *pf)
 
  clear_bit(__I40E_RESET_INTR_RECEIVED, &pf->state);
  if (test_and_set_bit(__I40E_RESET_RECOVERY_PENDING, &pf->state))
-  return 0;
+  return;
 
  dev_dbg(&pf->pdev->dev, "Tearing down internal switch for reset\n");
 
@@ -5636,13 +5636,10 @@ static int i40e_prep_for_reset(struct i40e_pf *pf)
  /* call shutdown HMC */
  if (hw->hmc.hmc_obj) {
   ret = i40e_shutdown_lan_hmc(hw);
-  if (ret) {
+  if (ret)
    dev_warn(&pf->pdev->dev,
      "shutdown_lan_hmc failed: %d\n", ret);
-   clear_bit(__I40E_RESET_RECOVERY_PENDING, &pf->state);
-  }
  }
- return ret;
 }
 
 /**
@@ -5816,11 +5813,8 @@ end_core_reset:
  **/
 static void i40e_handle_reset_warning(struct i40e_pf *pf)
 {
- i40e_status ret;
-
- ret = i40e_prep_for_reset(pf);
- if (!ret)
-  i40e_reset_and_rebuild(pf, false);
+ i40e_prep_for_reset(pf);
+ i40e_reset_and_rebuild(pf, false);
 }
 
 /**
-- 
1.7.1