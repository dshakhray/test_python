From d2f446e9da96520da2676063ac5323a049844a81 Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Mon, 8 Sep 2014 14:31:01 -0400
Subject: [scsi] hpsa: mark last scatter gather element as the last

Message-id: <1410186734-19986-11-git-send-email-thenzl@redhat.com>
Patchwork-id: 92047
O-Subject: [RHEL6.6 e-stor PATCH 10/83] hpsa: mark last scatter gather element as the last
Bugzilla: 1069185
RH-Acked-by: Maurizio Lombardi <mlombard@redhat.com>
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Ewan Milne <emilne@redhat.com>

This is normally optional, but for SSD Smart Path support (in
subsequent patches) it is required.

Signed-off-by: Matt Gates <matthew.gates@hp.com>
Signed-off-by: Stephen M. Cameron <scameron@beardog.cce.hp.com>
Signed-off-by: James Bottomley <JBottomley@Parallels.com>
(cherry picked from commit e1d9cbfa09cdd39c4821777a6980dd643e5493ad)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/hpsa.c b/drivers/scsi/hpsa.c
index da7eb12..c71d44b 100644
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@ -1456,6 +1456,7 @@ static int hpsa_map_one(struct pci_dev *pdev,
  cp->SG[0].Addr.upper =
    (u32) ((addr64 >> 32) & (u64) 0x00000000FFFFFFFF);
  cp->SG[0].Len = buflen;
+ cp->SG[0].Ext = HPSA_SG_LAST; /* we are not chaining */
  cp->Header.SGList = (u8) 1;   /* no. SGs contig in this cmd */
  cp->Header.SGTotal = (u16) 1; /* total sgs in this cmd list */
  return 0;
@@ -2157,7 +2158,7 @@ static int hpsa_scatter_gather(struct ctlr_info *h,
   curr_sg->Addr.lower = (u32) (addr64 & 0x0FFFFFFFFULL);
   curr_sg->Addr.upper = (u32) ((addr64 >> 32) & 0x0FFFFFFFFULL);
   curr_sg->Len = len;
-  curr_sg->Ext = 0;  /* we are not chaining */
+  curr_sg->Ext = (i < scsi_sg_count(cmd) - 1) ? 0 : HPSA_SG_LAST;
   curr_sg++;
  }
 
@@ -3059,7 +3060,7 @@ static int hpsa_passthru_ioctl(struct ctlr_info *h, void __user *argp)
   c->SG[0].Addr.lower = temp64.val32.lower;
   c->SG[0].Addr.upper = temp64.val32.upper;
   c->SG[0].Len = iocommand.buf_size;
-  c->SG[0].Ext = 0; /* we are not chaining*/
+  c->SG[0].Ext = HPSA_SG_LAST; /* we are not chaining*/
  }
  hpsa_scsi_do_simple_cmd_core_if_no_lockup(h, c);
  if (iocommand.buf_size > 0)
@@ -3189,8 +3190,7 @@ static int hpsa_big_passthru_ioctl(struct ctlr_info *h, void __user *argp)
    c->SG[i].Addr.lower = temp64.val32.lower;
    c->SG[i].Addr.upper = temp64.val32.upper;
    c->SG[i].Len = buff_size[i];
-   /* we are not chaining */
-   c->SG[i].Ext = 0;
+   c->SG[i].Ext = i < sg_used - 1 ? 0 : HPSA_SG_LAST;
   }
  }
  hpsa_scsi_do_simple_cmd_core_if_no_lockup(h, c);
diff --git a/drivers/scsi/hpsa_cmd.h b/drivers/scsi/hpsa_cmd.h
index 3f96b66..22cf799 100644
--- a/drivers/scsi/hpsa_cmd.h
+++ b/drivers/scsi/hpsa_cmd.h
@@ -25,6 +25,7 @@
 #define SENSEINFOBYTES          32 /* may vary between hbas */
 #define SG_ENTRIES_IN_CMD 32 /* Max SG entries excluding chain blocks */
 #define HPSA_SG_CHAIN  0x80000000
+#define HPSA_SG_LAST  0x40000000
 #define MAXREPLYQS              256
 
 /* Command Status value */
-- 
1.7.1