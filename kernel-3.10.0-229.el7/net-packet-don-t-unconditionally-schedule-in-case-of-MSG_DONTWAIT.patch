From d47ba80aebbb3d4233e44c9629c5dd5619eb25d4 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Tue, 11 Feb 2014 13:28:23 -0500
Subject: [net] packet: don't unconditionally schedule() in case of MSG_DONTWAIT

Message-id: <2e1a863c65f86f4f274aaf3b6658d040381dca2a.1392120367.git.dborkman@redhat.com>
Patchwork-id: 76115
O-Subject: [RHEL7 PATCH net 2/5] packet: don't unconditionally schedule() in case of MSG_DONTWAIT
Bugzilla: 1052366
RH-Acked-by: Thomas Graf <tgraf@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1052366
Upstream Status: 87a2fd286adf35a87cf6cb30fa80a0726eb74f76
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7027130
Tested: verified on beaker

Upstream Commit:
commit 87a2fd286adf35a87cf6cb30fa80a0726eb74f76
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Wed Jan 15 16:25:35 2014 +0100

    packet: don't unconditionally schedule() in case of MSG_DONTWAIT

    In tpacket_snd(), when we've discovered a first frame that is
    not in status TP_STATUS_SEND_REQUEST, and return a NULL buffer,
    we exit the send routine in case of MSG_DONTWAIT, since we've
    finished traversing the mmaped send ring buffer and don't care
    about pending frames.

    While doing so, we still unconditionally call an expensive
    schedule() in the packet_current_frame() "error" path, which
    is unnecessary in this case since it's enough to just quit
    the function.

    Also, in case MSG_DONTWAIT is not set, we should rather test
    for need_resched() first and do schedule() only if necessary
    since meanwhile pending frames could already have finished
    processing and called skb destructor.

    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index 4f60d2c..0086902 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -2077,6 +2077,7 @@ static int tpacket_snd(struct packet_sock *po, struct msghdr *msg)
  int err, reserve = 0;
  void *ph;
  struct sockaddr_ll *saddr = (struct sockaddr_ll *)msg->msg_name;
+ bool need_wait = !(msg->msg_flags & MSG_DONTWAIT);
  int tp_len, size_max;
  unsigned char *addr;
  int len_sum = 0;
@@ -2119,10 +2120,10 @@ static int tpacket_snd(struct packet_sock *po, struct msghdr *msg)
 
  do {
   ph = packet_current_frame(po, &po->tx_ring,
-    TP_STATUS_SEND_REQUEST);
-
+       TP_STATUS_SEND_REQUEST);
   if (unlikely(ph == NULL)) {
-   schedule();
+   if (need_wait && need_resched())
+    schedule();
    continue;
   }
 
@@ -2175,10 +2176,8 @@ static int tpacket_snd(struct packet_sock *po, struct msghdr *msg)
   }
   packet_increment_head(&po->tx_ring);
   len_sum += tp_len;
- } while (likely((ph != NULL) ||
-   ((!(msg->msg_flags & MSG_DONTWAIT)) &&
-    (atomic_read(&po->tx_ring.pending))))
-  );
+ } while (likely((ph != NULL) || (need_wait &&
+      atomic_read(&po->tx_ring.pending))));
 
  err = len_sum;
  goto out_put;
-- 
1.7.1