From e26c70b95ffa1eeb560a99876b5f14645f619015 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:01:13 -0400
Subject: [fs] btrfs: always choose work from prio_head first

Message-id: <1407179109-13714-187-git-send-email-sandeen@redhat.com>
Patchwork-id: 87119
O-Subject: [RHEL7.1 PATCH 186/422] btrfs: always choose work from prio_head first
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Stanislaw Gruszka <stf_xl@wp.pl>

commit 51b98effa4c673feaa7237ba87645ea60d8f3578
Author: Stanislaw Gruszka <stf_xl@wp.pl>
Date:   Sat Feb 8 23:18:43 2014 +0100

    btrfs: always choose work from prio_head first

    In case we do not refill, we can overwrite cur pointer from prio_head
    by one from not prioritized head, what looks as something that was
    not intended.

    This change make we always take works from prio_head first until it's
    not empty.

    Signed-off-by: Stanislaw Gruszka <stf_xl@wp.pl>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/async-thread.c b/fs/btrfs/async-thread.c
index c1e0b0c..0b78bf2 100644
--- a/fs/btrfs/async-thread.c
+++ b/fs/btrfs/async-thread.c
@@ -262,18 +262,19 @@ static struct btrfs_work *get_next_work(struct btrfs_worker_thread *worker,
  struct btrfs_work *work = NULL;
  struct list_head *cur = NULL;
 
- if (!list_empty(prio_head))
+ if (!list_empty(prio_head)) {
   cur = prio_head->next;
+  goto out;
+ }
 
  smp_mb();
  if (!list_empty(&worker->prio_pending))
   goto refill;
 
- if (!list_empty(head))
+ if (!list_empty(head)) {
   cur = head->next;
-
- if (cur)
   goto out;
+ }
 
 refill:
  spin_lock_irq(&worker->lock);
-- 
1.7.1