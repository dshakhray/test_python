From 23742cf1e2dbe93e9685ef30eefaf132944b00f8 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:55:08 -0400
Subject: [fs] ext4: fix zeroing of page during writeback

Message-id: <1414058125-4183-155-git-send-email-lczerner@redhat.com>
Patchwork-id: 98224
O-Subject: [RHEL 7.1 PATCH v2 154/171] ext4: fix zeroing of page during writeback
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit eeece469dedadf3918bad50ad80f4616a0064e90

 Tail of a page straddling inode size must be zeroed when being written
 out due to POSIX requirement that modifications of mmaped page beyond
 inode size must not be written to the file. ext4_bio_write_page() did
 this only for blocks fully beyond inode size but didn't properly zero
 blocks partially beyond inode size. Fix this.

 The problem has been uncovered by mmap_11-4 test in openposix test suite
 (part of LTP).

 Reported-by: Xiaoguang Wang <wangxg.fnst@cn.fujitsu.com>
 Fixes: 5a0dc7365c240
 Fixes: bd2d0210cf22f
 CC: stable@vger.kernel.org
 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/page-io.c b/fs/ext4/page-io.c
index 14250bf..7d6335f 100644
--- a/fs/ext4/page-io.c
+++ b/fs/ext4/page-io.c
@@ -437,6 +437,17 @@ int ext4_bio_write_page(struct ext4_io_submit *io,
  ClearPageError(page);
 
  /*
+  * Comments copied from block_write_full_page_endio:
+  *
+  * The page straddles i_size.  It must be zeroed out on each and every
+  * writepage invocation because it may be mmapped.  "A file is mapped
+  * in multiples of the page size.  For a file that is not a multiple of
+  * the page size, the remaining memory is zeroed when mapped, and
+  * writes to that region are not written out to the file."
+  */
+ if (len < PAGE_CACHE_SIZE)
+  zero_user_segment(page, len, PAGE_CACHE_SIZE);
+ /*
   * In the first loop we prepare and mark buffers to submit. We have to
   * mark all buffers in the page before submitting so that
   * end_page_writeback() cannot be called from ext4_bio_end_io() when IO
@@ -447,19 +458,6 @@ int ext4_bio_write_page(struct ext4_io_submit *io,
  do {
   block_start = bh_offset(bh);
   if (block_start >= len) {
-   /*
-    * Comments copied from block_write_full_page_endio:
-    *
-    * The page straddles i_size.  It must be zeroed out on
-    * each and every writepage invocation because it may
-    * be mmapped.  "A file is mapped in multiples of the
-    * page size.  For a file that is not a multiple of
-    * the  page size, the remaining memory is zeroed when
-    * mapped, and writes to that region are not written
-    * out to the file."
-    */
-   zero_user_segment(page, block_start,
-       block_start + blocksize);
    clear_buffer_dirty(bh);
    set_buffer_uptodate(bh);
    continue;
-- 
1.7.1