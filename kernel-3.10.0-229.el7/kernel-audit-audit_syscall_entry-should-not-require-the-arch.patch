From cc5f3b05fa28eee5b420aecdfd9a91c22d18786f Mon Sep 17 00:00:00 2001
From: Richard Guy Briggs <rgb@redhat.com>
Date: Wed, 1 Oct 2014 21:35:58 -0400
Subject: [kernel] audit: audit_syscall_entry() should not require the arch

Message-id: <65481d1159c6382c89a673ec42f5be1961ccbdd0.1412192166.git.rgb@redhat.com>
Patchwork-id: 96861
O-Subject: [RHEL7 PATCH V2 5/9] ARCH: AUDIT: audit_syscall_entry() should not require the arch
Bugzilla: 1053921
RH-Acked-by: Eric Paris <eparis@redhat.com>
RH-Acked-by: Paul Moore <pmoore@redhat.com>

From: Eric Paris <eparis@redhat.com>

We have a function where the arch can be queried, syscall_get_arch().
So rather than have every single piece of arch specific code use and/or
duplicate syscall_get_arch(), just have the audit code use the
syscall_get_arch() code.

RGB: Removed blobs for unsupported arches.

Upstream-commit: 9139740
Based-on-patch-by: Richard Briggs <rgb@redhat.com>
Signed-off-by: Eric Paris <eparis@redhat.com>
Cc: linux-alpha@vger.kernel.org
Cc: linux-arm-kernel@lists.infradead.org
Cc: linux-ia64@vger.kernel.org
Cc: microblaze-uclinux@itee.uq.edu.au
Cc: linux-mips@linux-mips.org
Cc: linux@lists.openrisc.net
Cc: linux-parisc@vger.kernel.org
Cc: linuxppc-dev@lists.ozlabs.org
Cc: linux-s390@vger.kernel.org
Cc: linux-sh@vger.kernel.org
Cc: sparclinux@vger.kernel.org
Cc: user-mode-linux-devel@lists.sourceforge.net
Cc: linux-xtensa@linux-xtensa.org
Cc: x86@kernel.org
Signed-off-by: Richard Guy Briggs <rgb@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/ptrace.c b/arch/powerpc/kernel/ptrace.c
index f95498d..f39e3f2 100644
--- a/arch/powerpc/kernel/ptrace.c
+++ b/arch/powerpc/kernel/ptrace.c
@@ -1788,14 +1788,11 @@ long do_syscall_trace_enter(struct pt_regs *regs)
 
 #ifdef CONFIG_PPC64
  if (!is_32bit_task())
-  audit_syscall_entry(AUDIT_ARCH_PPC64,
-        regs->gpr[0],
-        regs->gpr[3], regs->gpr[4],
+  audit_syscall_entry(regs->gpr[0], regs->gpr[3], regs->gpr[4],
         regs->gpr[5], regs->gpr[6]);
  else
 #endif
-  audit_syscall_entry(AUDIT_ARCH_PPC,
-        regs->gpr[0],
+  audit_syscall_entry(regs->gpr[0],
         regs->gpr[3] & 0xffffffff,
         regs->gpr[4] & 0xffffffff,
         regs->gpr[5] & 0xffffffff,
diff --git a/arch/s390/kernel/ptrace.c b/arch/s390/kernel/ptrace.c
index decb9f9..b113cc3 100644
--- a/arch/s390/kernel/ptrace.c
+++ b/arch/s390/kernel/ptrace.c
@@ -792,9 +792,7 @@ asmlinkage long do_syscall_trace_enter(struct pt_regs *regs)
  if (unlikely(test_thread_flag(TIF_SYSCALL_TRACEPOINT)))
   trace_sys_enter(regs, regs->gprs[2]);
 
- audit_syscall_entry(is_compat_task() ?
-    AUDIT_ARCH_S390 : AUDIT_ARCH_S390X,
-       regs->gprs[2], regs->orig_gpr2,
+ audit_syscall_entry(regs->gprs[2], regs->orig_gpr2,
        regs->gprs[3], regs->gprs[4],
        regs->gprs[5]);
 out:
diff --git a/arch/um/kernel/ptrace.c b/arch/um/kernel/ptrace.c
index 694d551..62435ef 100644
--- a/arch/um/kernel/ptrace.c
+++ b/arch/um/kernel/ptrace.c
@@ -165,8 +165,7 @@ static void send_sigtrap(struct task_struct *tsk, struct uml_pt_regs *regs,
  */
 void syscall_trace_enter(struct pt_regs *regs)
 {
- audit_syscall_entry(HOST_AUDIT_ARCH,
-       UPT_SYSCALL_NR(&regs->regs),
+ audit_syscall_entry(UPT_SYSCALL_NR(&regs->regs),
        UPT_SYSCALL_ARG1(&regs->regs),
        UPT_SYSCALL_ARG2(&regs->regs),
        UPT_SYSCALL_ARG3(&regs->regs),
diff --git a/arch/x86/kernel/ptrace.c b/arch/x86/kernel/ptrace.c
index 29a8120..b7cc6a0 100644
--- a/arch/x86/kernel/ptrace.c
+++ b/arch/x86/kernel/ptrace.c
@@ -1522,15 +1522,11 @@ long syscall_trace_enter(struct pt_regs *regs)
   trace_sys_enter(regs, regs->orig_ax);
 
  if (IS_IA32)
-  audit_syscall_entry(AUDIT_ARCH_I386,
-        regs->orig_ax,
-        regs->bx, regs->cx,
+  audit_syscall_entry(regs->orig_ax, regs->bx, regs->cx,
         regs->dx, regs->si);
 #ifdef CONFIG_X86_64
  else
-  audit_syscall_entry(AUDIT_ARCH_X86_64,
-        regs->orig_ax,
-        regs->di, regs->si,
+  audit_syscall_entry(regs->orig_ax, regs->di, regs->si,
         regs->dx, regs->r10);
 #endif
 
diff --git a/arch/x86/um/asm/ptrace.h b/arch/x86/um/asm/ptrace.h
index 54f8102..e59eef2 100644
--- a/arch/x86/um/asm/ptrace.h
+++ b/arch/x86/um/asm/ptrace.h
@@ -47,8 +47,6 @@ struct user_desc;
 
 #ifdef CONFIG_X86_32
 
-#define HOST_AUDIT_ARCH AUDIT_ARCH_I386
-
 extern int ptrace_get_thread_area(struct task_struct *child, int idx,
                                   struct user_desc __user *user_desc);
 
@@ -57,8 +55,6 @@ extern int ptrace_set_thread_area(struct task_struct *child, int idx,
 
 #else
 
-#define HOST_AUDIT_ARCH AUDIT_ARCH_X86_64
-
 #define PT_REGS_R8(r) UPT_R8(&(r)->regs)
 #define PT_REGS_R9(r) UPT_R9(&(r)->regs)
 #define PT_REGS_R10(r) UPT_R10(&(r)->regs)
diff --git a/include/linux/audit.h b/include/linux/audit.h
index a406419..811eece 100644
--- a/include/linux/audit.h
+++ b/include/linux/audit.h
@@ -26,6 +26,7 @@
 #include <linux/sched.h>
 #include <linux/ptrace.h>
 #include <uapi/linux/audit.h>
+#include <asm/syscall.h>
 
 struct audit_sig_info {
  uid_t  uid;
@@ -126,12 +127,12 @@ static inline void audit_free(struct task_struct *task)
  if (unlikely(task->audit_context))
   __audit_free(task);
 }
-static inline void audit_syscall_entry(int arch, int major, unsigned long a0,
+static inline void audit_syscall_entry(int major, unsigned long a0,
            unsigned long a1, unsigned long a2,
            unsigned long a3)
 {
  if (unlikely(current->audit_context))
-  __audit_syscall_entry(arch, major, a0, a1, a2, a3);
+  __audit_syscall_entry(syscall_get_arch(), major, a0, a1, a2, a3);
 }
 static inline void audit_syscall_exit(void *pt_regs)
 {
@@ -307,7 +308,7 @@ static inline int audit_alloc(struct task_struct *task)
 }
 static inline void audit_free(struct task_struct *task)
 { }
-static inline void audit_syscall_entry(int arch, int major, unsigned long a0,
+static inline void audit_syscall_entry(int major, unsigned long a0,
            unsigned long a1, unsigned long a2,
            unsigned long a3)
 { }
-- 
1.7.1