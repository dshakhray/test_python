From 618e92ffb9d5696d8619dd7a45d46c1a80153c27 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@redhat.com>
Date: Wed, 22 Oct 2014 19:19:22 -0400
Subject: [scsi] fcoe: Convert uses of compare_ether_addr to ether_addr_equal

Message-id: <1414005562-16279-9-git-send-email-nhorman@redhat.com>
Patchwork-id: 98082
O-Subject: [RHEL7.1 v2 PATCH 8/8] scsi: Convert uses of compare_ether_addr to ether_addr_equal
Bugzilla: 1087099
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tomas Henzl <thenzl@redhat.com>

Preliminary to removing compare_ether_addr altogether:

Use the new bool function ether_addr_equal to add
some clarity and reduce the likelihood for misuse
of compare_ether_addr for sorting.

Done via cocci script:

$ cat compare_ether_addr.cocci
@@
expression a,b;
@@
- !compare_ether_addr(a, b)
+ ether_addr_equal(a, b)

@@
expression a,b;
@@
- compare_ether_addr(a, b)
+ !ether_addr_equal(a, b)

@@
expression a,b;
@@
- !ether_addr_equal(a, b) == 0
+ ether_addr_equal(a, b)

@@
expression a,b;
@@
- !ether_addr_equal(a, b) != 0
+ !ether_addr_equal(a, b)

@@
expression a,b;
@@
- ether_addr_equal(a, b) == 0
+ !ether_addr_equal(a, b)

@@
expression a,b;
@@
- ether_addr_equal(a, b) != 0
+ ether_addr_equal(a, b)

@@
expression a,b;
@@
- !!ether_addr_equal(a, b)
+ ether_addr_equal(a, b)

Signed-off-by: Joe Perches <joe@perches.com>
Signed-off-by: Robert Love <robert.w.love@intel.com>
(cherry picked from commit 6942df7f775107b504f10de42c81971f514d718d)

BZ: 1087099
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8150961
Testing: Tested by Intel
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/bnx2fc/bnx2fc_fcoe.c b/drivers/scsi/bnx2fc/bnx2fc_fcoe.c
index 91011b1..44614b0 100644
--- a/drivers/scsi/bnx2fc/bnx2fc_fcoe.c
+++ b/drivers/scsi/bnx2fc/bnx2fc_fcoe.c
@@ -537,8 +537,7 @@ static void bnx2fc_recv_frame(struct sk_buff *skb)
  vn_port = fc_vport_id_lookup(lport, ntoh24(fh->fh_d_id));
  if (vn_port) {
   port = lport_priv(vn_port);
-  if (compare_ether_addr(port->data_src_addr, dest_mac)
-      != 0) {
+  if (!ether_addr_equal(port->data_src_addr, dest_mac)) {
    BNX2FC_HBA_DBG(lport, "fpma mismatch\n");
    kfree_skb(skb);
    return;
diff --git a/drivers/scsi/fcoe/fcoe.c b/drivers/scsi/fcoe/fcoe.c
index 4a8530a..9c20dfc 100644
--- a/drivers/scsi/fcoe/fcoe.c
+++ b/drivers/scsi/fcoe/fcoe.c
@@ -1458,7 +1458,7 @@ static int fcoe_rcv(struct sk_buff *skb, struct net_device *netdev,
  eh = eth_hdr(skb);
 
  if (is_fip_mode(ctlr) &&
-     compare_ether_addr(eh->h_source, ctlr->dest_addr)) {
+     !ether_addr_equal(eh->h_source, ctlr->dest_addr)) {
   FCOE_NETDEV_DBG(netdev, "wrong source mac address:%pM\n",
     eh->h_source);
   goto err;
diff --git a/drivers/scsi/fcoe/fcoe_ctlr.c b/drivers/scsi/fcoe/fcoe_ctlr.c
index d25e2c3..ec3a32a 100644
--- a/drivers/scsi/fcoe/fcoe_ctlr.c
+++ b/drivers/scsi/fcoe/fcoe_ctlr.c
@@ -339,7 +339,7 @@ static void fcoe_ctlr_announce(struct fcoe_ctlr *fip)
  spin_unlock_bh(&fip->ctlr_lock);
  sel = fip->sel_fcf;
 
- if (sel && !compare_ether_addr(sel->fcf_mac, fip->dest_addr))
+ if (sel && ether_addr_equal(sel->fcf_mac, fip->dest_addr))
   goto unlock;
  if (!is_zero_ether_addr(fip->dest_addr)) {
   printk(KERN_NOTICE "libfcoe: host%d: "
@@ -1039,7 +1039,7 @@ static void fcoe_ctlr_recv_adv(struct fcoe_ctlr *fip, struct sk_buff *skb)
   if (fcf->switch_name == new.switch_name &&
       fcf->fabric_name == new.fabric_name &&
       fcf->fc_map == new.fc_map &&
-      compare_ether_addr(fcf->fcf_mac, new.fcf_mac) == 0) {
+      ether_addr_equal(fcf->fcf_mac, new.fcf_mac)) {
    found = 1;
    break;
   }
@@ -1379,7 +1379,7 @@ static void fcoe_ctlr_recv_clr_vlink(struct fcoe_ctlr *fip,
    mp = (struct fip_mac_desc *)desc;
    if (dlen < sizeof(*mp))
     goto err;
-   if (compare_ether_addr(mp->fd_mac, fcf->fcf_mac))
+   if (!ether_addr_equal(mp->fd_mac, fcf->fcf_mac))
     goto err;
    desc_mask &= ~BIT(FIP_DT_MAC);
    break;
@@ -1457,8 +1457,8 @@ static void fcoe_ctlr_recv_clr_vlink(struct fcoe_ctlr *fip,
     * 'port_id' is already validated, check MAC address and
     * wwpn
     */
-   if (compare_ether_addr(fip->get_src_addr(vn_port),
-      vp->fd_mac) != 0 ||
+   if (!ether_addr_equal(fip->get_src_addr(vn_port),
+           vp->fd_mac) ||
     get_unaligned_be64(&vp->fd_wwpn) !=
        vn_port->wwpn)
     continue;
@@ -1521,12 +1521,12 @@ static int fcoe_ctlr_recv_handler(struct fcoe_ctlr *fip, struct sk_buff *skb)
   goto drop;
  eh = eth_hdr(skb);
  if (fip->mode == FIP_MODE_VN2VN) {
-  if (compare_ether_addr(eh->h_dest, fip->ctl_src_addr) &&
-      compare_ether_addr(eh->h_dest, fcoe_all_vn2vn) &&
-      compare_ether_addr(eh->h_dest, fcoe_all_p2p))
+  if (!ether_addr_equal(eh->h_dest, fip->ctl_src_addr) &&
+      !ether_addr_equal(eh->h_dest, fcoe_all_vn2vn) &&
+      !ether_addr_equal(eh->h_dest, fcoe_all_p2p))
    goto drop;
- } else if (compare_ether_addr(eh->h_dest, fip->ctl_src_addr) &&
-     compare_ether_addr(eh->h_dest, fcoe_all_enode))
+ } else if (!ether_addr_equal(eh->h_dest, fip->ctl_src_addr) &&
+     !ether_addr_equal(eh->h_dest, fcoe_all_enode))
   goto drop;
  fiph = (struct fip_header *)skb->data;
  op = ntohs(fiph->fip_op);
@@ -1898,7 +1898,7 @@ int fcoe_ctlr_recv_flogi(struct fcoe_ctlr *fip, struct fc_lport *lport,
    * address_mode flag to use FC_OUI-based Ethernet DA.
    * Otherwise we use the FCoE gateway addr
    */
-  if (!compare_ether_addr(sa, (u8[6])FC_FCOE_FLOGI_MAC)) {
+  if (ether_addr_equal(sa, (u8[6])FC_FCOE_FLOGI_MAC)) {
    fcoe_ctlr_map_dest(fip);
   } else {
    memcpy(fip->dest_addr, sa, ETH_ALEN);
diff --git a/drivers/scsi/fcoe/fcoe_sysfs.c b/drivers/scsi/fcoe/fcoe_sysfs.c
index 6f9b2c5..8ecd6f9 100644
--- a/drivers/scsi/fcoe/fcoe_sysfs.c
+++ b/drivers/scsi/fcoe/fcoe_sysfs.c
@@ -657,7 +657,7 @@ static int fcoe_fcf_device_match(struct fcoe_fcf_device *new,
  if (new->switch_name == old->switch_name &&
      new->fabric_name == old->fabric_name &&
      new->fc_map == old->fc_map &&
-     compare_ether_addr(new->mac, old->mac) == 0)
+     ether_addr_equal(new->mac, old->mac))
   return 1;
  return 0;
 }
-- 
1.7.1