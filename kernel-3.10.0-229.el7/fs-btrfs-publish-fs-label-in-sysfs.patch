From 9a410262bad9abf9626e9b5db855d66d63696411 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 18:58:26 -0400
Subject: [fs] btrfs: publish fs label in sysfs

Message-id: <1407179109-13714-20-git-send-email-sandeen@redhat.com>
Patchwork-id: 86966
O-Subject: [RHEL7.1 PATCH 019/422] btrfs: publish fs label in sysfs
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Jeff Mahoney <jeffm@suse.com>

commit f8ba9c11f8320be0d553d4b18000e35f7ad672ac
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Fri Nov 1 13:07:06 2013 -0400

    btrfs: publish fs label in sysfs

    This adds a writeable attribute which describes the label.

    Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/sysfs.c b/fs/btrfs/sysfs.c
index ec63153..669fdf7 100644
--- a/fs/btrfs/sysfs.c
+++ b/fs/btrfs/sysfs.c
@@ -355,6 +355,49 @@ static const struct attribute *allocation_attrs[] = {
  NULL,
 };
 
+static ssize_t btrfs_label_show(struct kobject *kobj,
+    struct kobj_attribute *a, char *buf)
+{
+ struct btrfs_fs_info *fs_info = to_fs_info(kobj);
+ return snprintf(buf, PAGE_SIZE, "%s\n", fs_info->super_copy->label);
+}
+
+static ssize_t btrfs_label_store(struct kobject *kobj,
+     struct kobj_attribute *a,
+     const char *buf, size_t len)
+{
+ struct btrfs_fs_info *fs_info = to_fs_info(kobj);
+ struct btrfs_trans_handle *trans;
+ struct btrfs_root *root = fs_info->fs_root;
+ int ret;
+
+ if (len >= BTRFS_LABEL_SIZE) {
+  pr_err("btrfs: unable to set label with more than %d bytes\n",
+         BTRFS_LABEL_SIZE - 1);
+  return -EINVAL;
+ }
+
+ trans = btrfs_start_transaction(root, 0);
+ if (IS_ERR(trans))
+  return PTR_ERR(trans);
+
+ spin_lock(&root->fs_info->super_lock);
+ strcpy(fs_info->super_copy->label, buf);
+ spin_unlock(&root->fs_info->super_lock);
+ ret = btrfs_commit_transaction(trans, root);
+
+ if (!ret)
+  return len;
+
+ return ret;
+}
+BTRFS_ATTR_RW(label, 0644, btrfs_label_show, btrfs_label_store);
+
+static struct attribute *btrfs_attrs[] = {
+ BTRFS_ATTR_PTR(label),
+ NULL,
+};
+
 static void btrfs_release_super_kobj(struct kobject *kobj)
 {
  struct btrfs_fs_info *fs_info = to_fs_info(kobj);
@@ -364,6 +407,7 @@ static void btrfs_release_super_kobj(struct kobject *kobj)
 static struct kobj_type btrfs_ktype = {
  .sysfs_ops = &kobj_sysfs_ops,
  .release = btrfs_release_super_kobj,
+ .default_attrs = btrfs_attrs,
 };
 
 static inline struct btrfs_fs_info *to_fs_info(struct kobject *kobj)
-- 
1.7.1