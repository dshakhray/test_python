From 821fb1f2701c571003e29460330fa9ff8d968e4c Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:33:46 -0500
Subject: [fs] fuse: add renameat2 support

Message-id: <20141125163346.18115.50306.stgit@warthog.procyon.org.uk>
Patchwork-id: 100913
O-Subject: [PATCH 12/47] fuse: add renameat2 support
Bugzilla: 985875
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Miklos Szeredi <mszeredi@suse.cz>

Support RENAME_EXCHANGE and RENAME_NOREPLACE flags on the userspace ABI.

Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
Original-commit: 1560c974dcd40a8d3f193283acd7cc6aee13dc13
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/fuse/dir.c b/fs/fuse/dir.c
index 8353dae..bc6243d 100644
--- a/fs/fuse/dir.c
+++ b/fs/fuse/dir.c
@@ -759,23 +759,26 @@ static int fuse_rmdir(struct inode *dir, struct dentry *entry)
  return err;
 }
 
-static int fuse_rename(struct inode *olddir, struct dentry *oldent,
-         struct inode *newdir, struct dentry *newent)
+static int fuse_rename_common(struct inode *olddir, struct dentry *oldent,
+         struct inode *newdir, struct dentry *newent,
+         unsigned int flags, int opcode, size_t argsize)
 {
  int err;
- struct fuse_rename_in inarg;
+ struct fuse_rename2_in inarg;
  struct fuse_conn *fc = get_fuse_conn(olddir);
- struct fuse_req *req = fuse_get_req_nopages(fc);
+ struct fuse_req *req;
 
+ req = fuse_get_req_nopages(fc);
  if (IS_ERR(req))
   return PTR_ERR(req);
 
- memset(&inarg, 0, sizeof(inarg));
+ memset(&inarg, 0, argsize);
  inarg.newdir = get_node_id(newdir);
- req->in.h.opcode = FUSE_RENAME;
+ inarg.flags = flags;
+ req->in.h.opcode = opcode;
  req->in.h.nodeid = get_node_id(olddir);
  req->in.numargs = 3;
- req->in.args[0].size = sizeof(inarg);
+ req->in.args[0].size = argsize;
  req->in.args[0].value = &inarg;
  req->in.args[1].size = oldent->d_name.len + 1;
  req->in.args[1].value = oldent->d_name.name;
@@ -788,12 +791,16 @@ static int fuse_rename(struct inode *olddir, struct dentry *oldent,
   /* ctime changes */
   fuse_invalidate_attr(oldent->d_inode);
 
+  if (flags & RENAME_EXCHANGE) {
+   fuse_invalidate_attr(newent->d_inode);
+  }
+
   fuse_invalidate_attr(olddir);
   if (olddir != newdir)
    fuse_invalidate_attr(newdir);
 
   /* newent will end up negative */
-  if (newent->d_inode) {
+  if (!(flags & RENAME_EXCHANGE) && newent->d_inode) {
    fuse_invalidate_attr(newent->d_inode);
    fuse_invalidate_entry_cache(newent);
   }
@@ -811,6 +818,36 @@ static int fuse_rename(struct inode *olddir, struct dentry *oldent,
  return err;
 }
 
+static int fuse_rename(struct inode *olddir, struct dentry *oldent,
+         struct inode *newdir, struct dentry *newent)
+{
+ return fuse_rename_common(olddir, oldent, newdir, newent, 0,
+      FUSE_RENAME, sizeof(struct fuse_rename_in));
+}
+
+static int fuse_rename2(struct inode *olddir, struct dentry *oldent,
+   struct inode *newdir, struct dentry *newent,
+   unsigned int flags)
+{
+ struct fuse_conn *fc = get_fuse_conn(olddir);
+ int err;
+
+ if (flags & ~(RENAME_NOREPLACE | RENAME_EXCHANGE))
+  return -EINVAL;
+
+ if (fc->no_rename2 || fc->minor < 23)
+  return -EINVAL;
+
+ err = fuse_rename_common(olddir, oldent, newdir, newent, flags,
+     FUSE_RENAME2, sizeof(struct fuse_rename2_in));
+ if (err == -ENOSYS) {
+  fc->no_rename2 = 1;
+  err = -EINVAL;
+ }
+ return err;
+
+}
+
 static int fuse_link(struct dentry *entry, struct inode *newdir,
        struct dentry *newent)
 {
@@ -1900,6 +1937,7 @@ static const struct inode_operations fuse_dir_inode_operations = {
  .unlink  = fuse_unlink,
  .rmdir  = fuse_rmdir,
  .rename  = fuse_rename,
+ .rename2 = fuse_rename2,
  .link  = fuse_link,
  .setattr = fuse_setattr,
  .create  = fuse_create,
diff --git a/fs/fuse/fuse_i.h b/fs/fuse/fuse_i.h
index 5ced199..9704cb1 100644
--- a/fs/fuse/fuse_i.h
+++ b/fs/fuse/fuse_i.h
@@ -534,6 +534,9 @@ struct fuse_conn {
  /** Is fallocate not implemented by fs? */
  unsigned no_fallocate:1;
 
+ /** Is rename with flags implemented by fs? */
+ unsigned no_rename2:1;
+
  /** Use enhanced/automatic page cache invalidation. */
  unsigned auto_inval_data:1;
 
diff --git a/include/uapi/linux/fuse.h b/include/uapi/linux/fuse.h
index 60bb2f9..3069fc1 100644
--- a/include/uapi/linux/fuse.h
+++ b/include/uapi/linux/fuse.h
@@ -93,6 +93,14 @@
  *
  * 7.22
  *  - add FUSE_ASYNC_DIO
+ *
+ * 7.23
+ *  - add FUSE_WRITEBACK_CACHE
+ *  - add time_gran to fuse_init_out
+ *  - add reserved space to fuse_init_out
+ *  - add FATTR_CTIME
+ *  - add ctime and ctimensec to fuse_setattr_in
+ *  - add FUSE_RENAME2 request
  */
 
 #ifndef _LINUX_FUSE_H
@@ -343,6 +351,7 @@ enum fuse_opcode {
  FUSE_BATCH_FORGET  = 42,
  FUSE_FALLOCATE     = 43,
  FUSE_READDIRPLUS   = 44,
+ FUSE_RENAME2       = 45,
 
  /* CUSE specific operations */
  CUSE_INIT          = 4096,
@@ -421,6 +430,12 @@ struct fuse_rename_in {
  uint64_t newdir;
 };
 
+struct fuse_rename2_in {
+ uint64_t newdir;
+ uint32_t flags;
+ uint32_t padding;
+};
+
 struct fuse_link_in {
  uint64_t oldnodeid;
 };
-- 
1.7.1