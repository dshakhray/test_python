From 822c30568f7266800e355f62e294cfcc8095d354 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:09:50 -0400
Subject: [usb] synchronize port poweroff and khubd

Message-id: <1410887463-20674-519-git-send-email-dzickus@redhat.com>
Patchwork-id: 95527
O-Subject: [RHEL7 PATCH 518/591] usb: synchronize port poweroff and khubd
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=821903

commit 097a155f05e88dc71184ceb93ad1aab1a13d1e41
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue May 20 18:09:20 2014 -0700

    usb: synchronize port poweroff and khubd

    If a port is powered-off, or in the process of being powered-off, prevent
    khubd from operating on it.  Otherwise, the following sequence of events
    leading to an unintended disconnect may occur:

    Events:
    (0) <set pm_qos_no_poweroff to '0' for port1>
    (1) hub 2-2:1.0: hub_resume
    (2) hub 2-2:1.0: port 1: status 0301 change 0000
    (3) hub 2-2:1.0: state 7 ports 4 chg 0002 evt 0000
    (4) hub 2-2:1.0: port 1, power off status 0000, change 0000, 12 Mb/s
    (5) usb 2-2.1: USB disconnect, device number 5

    Description:
    (1) hub is resumed before sending a ClearPortFeature request
    (2) hub_activate() notices the port is connected and sets
        hub->change_bits for the port
    (3) hub_events() starts, but at the same time the port suspends
    (4) hub_connect_change() sees the disabled port and triggers disconnect

    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 6753d0f..b6d32b6 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -4786,6 +4786,10 @@ static void port_event(struct usb_hub *hub, int port1)
     USB_PORT_FEAT_C_PORT_CONFIG_ERROR);
  }
 
+ /* skip port actions that require the port to be powered on */
+ if (!pm_runtime_active(&port_dev->dev))
+  return;
+
  if (hub_handle_remote_wakeup(hub, port1, portstatus, portchange))
   connect_change = 1;
 
@@ -4912,11 +4916,26 @@ static void hub_events(void)
 
   /* deal with port status changes */
   for (i = 1; i <= hdev->maxchild; i++) {
+   struct usb_port *port_dev = hub->ports[i - 1];
+
    if (!test_bit(i, hub->busy_bits)
      && (test_bit(i, hub->event_bits)
       || test_bit(i, hub->change_bits)
-      || test_bit(i, hub->wakeup_bits)))
+      || test_bit(i, hub->wakeup_bits))) {
+    /*
+     * The get_noresume and barrier ensure that if
+     * the port was in the process of resuming, we
+     * flush that work and keep the port active for
+     * the duration of the port_event().  However,
+     * if the port is runtime pm suspended
+     * (powered-off), we leave it in that state, run
+     * an abbreviated port_event(), and move on.
+     */
+    pm_runtime_get_noresume(&port_dev->dev);
+    pm_runtime_barrier(&port_dev->dev);
     port_event(hub, i);
+    pm_runtime_put_sync(&port_dev->dev);
+   }
   }
 
   /* deal with hub status changes */
-- 
1.7.1