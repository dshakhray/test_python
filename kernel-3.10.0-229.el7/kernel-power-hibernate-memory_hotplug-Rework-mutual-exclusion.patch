From 3ff61ebd5b90f2173030a16fd552ad84430adaf5 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:05:49 -0400
Subject: [kernel] power/hibernate/memory_hotplug: Rework mutual exclusion

Message-id: <20140710010548.22146.35594.stgit@gir.stowe>
Patchwork-id: 85612
O-Subject: [RHEL7.1 PATCH 073/105] PM / hibernate / memory hotplug: Rework mutual exclusion
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 942f40155a743f4204308d62405dacaa4bfadb11

commit 942f40155a743f4204308d62405dacaa4bfadb11
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Aug 30 14:19:46 2013 +0200

    PM / hibernate / memory hotplug: Rework mutual exclusion

    Since all of the memory hotplug operations have to be carried out
    under device_hotplug_lock, they won't need to acquire pm_mutex if
    device_hotplug_lock is held around hibernation.

    For this reason, make the hibernation code acquire
    device_hotplug_lock after freezing user space processes and
    release it before thawing them.  At the same tim drop the
    lock_system_sleep() and unlock_system_sleep() calls from
    lock_memory_hotplug() and unlock_memory_hotplug(), respectively.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/power/hibernate.c b/kernel/power/hibernate.c
index 778deac..abaff17 100644
--- a/kernel/power/hibernate.c
+++ b/kernel/power/hibernate.c
@@ -657,6 +657,7 @@ int hibernate(void)
  if (error)
   goto Exit;
 
+ lock_device_hotplug();
  /* Allocate memory management structures */
  error = create_basic_memory_bitmaps();
  if (error)
@@ -690,6 +691,7 @@ int hibernate(void)
  Free_bitmaps:
  free_basic_memory_bitmaps();
  Thaw:
+ unlock_device_hotplug();
  thaw_processes();
 
  /* Don't bother checking whether freezer_test_done is true */
@@ -819,6 +821,7 @@ static int software_resume(void)
 
  pr_debug("PM: Loading hibernation image.\n");
 
+ lock_device_hotplug();
  error = create_basic_memory_bitmaps();
  if (error)
   goto Thaw;
@@ -832,6 +835,7 @@ static int software_resume(void)
  swsusp_free();
  free_basic_memory_bitmaps();
  Thaw:
+ unlock_device_hotplug();
  thaw_processes();
  Finish:
  pm_notifier_call_chain(PM_POST_RESTORE);
diff --git a/kernel/power/user.c b/kernel/power/user.c
index 2b4391c..95203b1 100644
--- a/kernel/power/user.c
+++ b/kernel/power/user.c
@@ -205,6 +205,7 @@ static long snapshot_ioctl(struct file *filp, unsigned int cmd,
  if (!mutex_trylock(&pm_mutex))
   return -EBUSY;
 
+ lock_device_hotplug();
  data = filp->private_data;
 
  switch (cmd) {
@@ -377,6 +378,7 @@ static long snapshot_ioctl(struct file *filp, unsigned int cmd,
 
  }
 
+ unlock_device_hotplug();
  mutex_unlock(&pm_mutex);
 
  return error;
diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c
index 081b4d6..3ce1326 100644
--- a/mm/memory_hotplug.c
+++ b/mm/memory_hotplug.c
@@ -51,14 +51,10 @@ DEFINE_MUTEX(mem_hotplug_mutex);
 void lock_memory_hotplug(void)
 {
  mutex_lock(&mem_hotplug_mutex);
-
- /* for exclusive hibernation if CONFIG_HIBERNATION=y */
- lock_system_sleep();
 }
 
 void unlock_memory_hotplug(void)
 {
- unlock_system_sleep();
  mutex_unlock(&mem_hotplug_mutex);
 }
 
-- 
1.7.1