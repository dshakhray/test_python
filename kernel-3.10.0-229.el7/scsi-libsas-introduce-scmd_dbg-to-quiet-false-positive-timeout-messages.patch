From f3c0a7f01129666aac004e91046defdfa9938cb1 Mon Sep 17 00:00:00 2001
From: David Milburn <dmilburn@redhat.com>
Date: Mon, 5 May 2014 17:31:26 -0400
Subject: [scsi] libsas: introduce scmd_dbg() to quiet false positive "timeout" messages

Message-id: <1399311086-27431-1-git-send-email-dmilburn@redhat.com>
Patchwork-id: 79385
O-Subject: [RHEL7.1 PATCH] libsas: introduce scmd_dbg() to quiet false positive "timeout" messages
Bugzilla: 1074987
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Tomas Henzl <thenzl@redhat.com>

commit 3af74a3c07d93e34fce3d6c6dcd73676d8381d21
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Feb 6 12:23:07 2014 -0800

    [SCSI] libsas: introduce scmd_dbg() to quiet false positive "timeout" messages

    libsas sometimes short circuits timeouts to force commands into error
    recovery.  It is misleading to log that the command timed-out in
    sas_scsi_timed_out() when in fact it was just queued for error handling.
    It's also redundant in the case of a true timeout as libata eh will
    detect and report timeouts via it's AC_ERR_TIMEOUT facility.

    Given that some environments consider "timeout" errors to be indicative
    of impending device failure demote the sas_scsi_timed_out() timeout
    message to be disabled by default.  This parallels ata_scsi_timed_out().

    [jejb: checkpatch fix]
    Reported-by: Xun Ni <xun.ni@intel.com>
    Tested-by: Nelson Cheng <nelson.cheng@intel.com>
    Acked-by: Lukasz Dorau <lukasz.dorau@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

Test kernel verified by Intel.

https://brewweb.devel.redhat.com/taskinfo?taskID=7288360
https://bugzilla.redhat.com/show_bug.cgi?id=1074987
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/libsas/sas_scsi_host.c b/drivers/scsi/libsas/sas_scsi_host.c
index 6e795a1..48ecd9f 100644
--- a/drivers/scsi/libsas/sas_scsi_host.c
+++ b/drivers/scsi/libsas/sas_scsi_host.c
@@ -862,7 +862,7 @@ out:
 
 enum blk_eh_timer_return sas_scsi_timed_out(struct scsi_cmnd *cmd)
 {
- scmd_printk(KERN_DEBUG, cmd, "command %p timed out\n", cmd);
+ scmd_dbg(cmd, "command %p timed out\n", cmd);
 
  return BLK_EH_NOT_HANDLED;
 }
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index 6a1a4b7..529be09 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -272,12 +272,24 @@ struct scsi_dh_data {
 #define sdev_printk(prefix, sdev, fmt, a...) \
  dev_printk(prefix, &(sdev)->sdev_gendev, fmt, ##a)
 
+#define sdev_dbg(sdev, fmt, a...) \
+ dev_dbg(&(sdev)->sdev_gendev, fmt, ##a)
+
 #define scmd_printk(prefix, scmd, fmt, a...)    \
         (scmd)->request->rq_disk ?     \
  sdev_printk(prefix, (scmd)->device, "[%s] " fmt,  \
       (scmd)->request->rq_disk->disk_name, ##a) :  \
  sdev_printk(prefix, (scmd)->device, fmt, ##a)
 
+#define scmd_dbg(scmd, fmt, a...)        \
+ do {           \
+  if ((scmd)->request->rq_disk)       \
+   sdev_dbg((scmd)->device, "[%s] " fmt,     \
+     (scmd)->request->rq_disk->disk_name, ##a);\
+  else          \
+   sdev_dbg((scmd)->device, fmt, ##a);     \
+ } while (0)
+
 enum scsi_target_state {
  STARGET_CREATED = 1,
  STARGET_RUNNING,
-- 
1.7.1