From b9a23b914c7ecf46ecf6972d3fae426f56549c74 Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 17 Dec 2014 21:38:33 -0500
Subject: [drm] i915: fix plane/cursor handling when runtime suspended

Message-id: <1418852380-13061-23-git-send-email-rclark@redhat.com>
Patchwork-id: 102171
O-Subject: [RHEL7 drm 22/89] drm/i915: fix plane/cursor handling when runtime suspended
Bugzilla: 1153301
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1153301
Upstream: since v3.16.4

commit d5af5eab57dcde1ae3575bc86f5240d645db27e1

Author:     Paulo Zanoni <paulo.r.zanoni@intel.com>
AuthorDate: Fri Aug 15 15:59:32 2014 -0300
Commit:     Rob Clark <rclark@redhat.com>
CommitDate: Wed Dec 10 17:14:55 2014 -0500

    drm/i915: fix plane/cursor handling when runtime suspended

    commit d6dd6843ff4a57c662dbc378b9f99a9c034b0956 upstream.

    If we're runtime suspended and try to use the plane interfaces, we
    will get a lot of WARNs saying we did the wrong thing.

    We need to get runtime PM references to pin the objects, and to
    change the fences. The pin functions are the ideal places for
    this, but intel_crtc_cursor_set_obj() doesn't call them, so we also
    have to add get/put calls inside it. There is no problem if we runtime
    suspend right after these functions are finished, because the
    registers written are forwarded to system memory.

    Note: for a complete fix of the cursor-dpms test case, we also need
    the patch named "drm/i915: Don't try to enable cursor from setplane
    when crtc is disabled".

    v2: - Narrow the put/get calls on intel_crtc_cursor_set_obj() (Daniel)
    v3: - Make get/put also surround the fence and unpin calls (Daniel and
          Ville).
        - Merge all the plane changes into a single patch since they're
          the same fix.
        - Add the comment requested by Daniel.
    v4: - Remove spurious whitespace (Ville).
    v5: - Remove intel_crtc_update_cursor() chunk since Ville did an
          equivalent fix in another patch (Ville).
    v6: - Remove unpin chunk: it will be on a separate patch (Ville,
          Chris, Daniel).
    v7: - Same thing, new color.

    Testcase: igt/pm_rpm/cursor
    Testcase: igt/pm_rpm/cursor-dpms
    Testcase: igt/pm_rpm/legacy-planes
    Testcase: igt/pm_rpm/legacy-planes-dpms
    Testcase: igt/pm_rpm/universal-planes
    Testcase: igt/pm_rpm/universal-planes-dpms
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=81645
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=82603
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Ville Syrjala <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Rob Clark <rclark@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index db8f15b..daf081d 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -2208,6 +2208,15 @@ intel_pin_and_fence_fb_obj(struct drm_device *dev,
  if (need_vtd_wa(dev) && alignment < 256 * 1024)
   alignment = 256 * 1024;
 
+ /*
+  * Global gtt pte registers are special registers which actually forward
+  * writes to a chunk of system memory. Which means that there is no risk
+  * that the register values disappear as soon as we call
+  * intel_runtime_pm_put(), so it is correct to wrap only the
+  * pin/unpin/fence and not more.
+  */
+ intel_runtime_pm_get(dev_priv);
+
  dev_priv->mm.interruptible = false;
  ret = i915_gem_object_pin_to_display_plane(obj, alignment, pipelined);
  if (ret)
@@ -2225,12 +2234,14 @@ intel_pin_and_fence_fb_obj(struct drm_device *dev,
  i915_gem_object_pin_fence(obj);
 
  dev_priv->mm.interruptible = true;
+ intel_runtime_pm_put(dev_priv);
  return 0;
 
 err_unpin:
  i915_gem_object_unpin_from_display_plane(obj);
 err_interruptible:
  dev_priv->mm.interruptible = true;
+ intel_runtime_pm_put(dev_priv);
  return ret;
 }
 
@@ -8108,6 +8119,15 @@ static int intel_crtc_cursor_set(struct drm_crtc *crtc,
    goto fail_locked;
   }
 
+  /*
+   * Global gtt pte registers are special registers which actually
+   * forward writes to a chunk of system memory. Which means that
+   * there is no risk that the register values disappear as soon
+   * as we call intel_runtime_pm_put(), so it is correct to wrap
+   * only the pin/unpin/fence and not more.
+   */
+  intel_runtime_pm_get(dev_priv);
+
   /* Note that the w/a also requires 2 PTE of padding following
    * the bo. We currently fill all unused PTE with the shadow
    * page and so we should always have valid PTE following the
@@ -8120,16 +8140,20 @@ static int intel_crtc_cursor_set(struct drm_crtc *crtc,
   ret = i915_gem_object_pin_to_display_plane(obj, alignment, NULL);
   if (ret) {
    DRM_DEBUG_KMS("failed to move cursor bo into the GTT\n");
+   intel_runtime_pm_put(dev_priv);
    goto fail_locked;
   }
 
   ret = i915_gem_object_put_fence(obj);
   if (ret) {
    DRM_DEBUG_KMS("failed to release fence for cursor");
+   intel_runtime_pm_put(dev_priv);
    goto fail_unpin;
   }
 
   addr = i915_gem_obj_ggtt_offset(obj);
+
+  intel_runtime_pm_put(dev_priv);
  } else {
   int align = IS_I830(dev) ? 16 * 1024 : 256;
   ret = i915_gem_object_attach_phys(obj, align);
-- 
1.7.1