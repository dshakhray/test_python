From d970a08dec78fefe70af7e47f2141be52648cd85 Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:19:08 -0400
Subject: [alsa] core: Use standard printk helpers

Message-id: <140972823573-111-patchset-jkysela@redhat.com>
Patchwork-id: 90811
O-Subject: [RHEL 7.1 PATCH 110/442] ALSA: core: Use standard printk helpers
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

Use dev_err() & co as much as possible.  If not available (no device
assigned at the calling point), use pr_xxx() helpers instead.

Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: f2f9307a4f26a9fbe47fff486a9cee5885af748f)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/core/device.c b/sound/core/device.c
index df88def..ad9869d 100644
--- a/sound/core/device.c
+++ b/sound/core/device.c
@@ -50,7 +50,7 @@ int snd_device_new(struct snd_card *card, snd_device_type_t type,
   return -ENXIO;
  dev = kzalloc(sizeof(*dev), GFP_KERNEL);
  if (dev == NULL) {
-  snd_printk(KERN_ERR "Cannot allocate device\n");
+  dev_err(card->dev, "Cannot allocate device, type=%d\n", type);
   return -ENOMEM;
  }
  dev->card = card;
@@ -90,17 +90,17 @@ int snd_device_free(struct snd_card *card, void *device_data)
   if (dev->state == SNDRV_DEV_REGISTERED &&
       dev->ops->dev_disconnect)
    if (dev->ops->dev_disconnect(dev))
-    snd_printk(KERN_ERR
-        "device disconnect failure\n");
+    dev_err(card->dev,
+     "device disconnect failure\n");
   if (dev->ops->dev_free) {
    if (dev->ops->dev_free(dev))
-    snd_printk(KERN_ERR "device free failure\n");
+    dev_err(card->dev, "device free failure\n");
   }
   kfree(dev);
   return 0;
  }
- snd_printd("device free %p (from %pF), not found\n", device_data,
-     __builtin_return_address(0));
+ dev_dbg(card->dev, "device free %p (from %pF), not found\n",
+  device_data, __builtin_return_address(0));
  return -ENXIO;
 }
 
@@ -131,13 +131,14 @@ int snd_device_disconnect(struct snd_card *card, void *device_data)
   if (dev->state == SNDRV_DEV_REGISTERED &&
       dev->ops->dev_disconnect) {
    if (dev->ops->dev_disconnect(dev))
-    snd_printk(KERN_ERR "device disconnect failure\n");
+    dev_err(card->dev,
+     "device disconnect failure\n");
    dev->state = SNDRV_DEV_DISCONNECTED;
   }
   return 0;
  }
- snd_printd("device disconnect %p (from %pF), not found\n", device_data,
-     __builtin_return_address(0));
+ dev_dbg(card->dev, "device disconnect %p (from %pF), not found\n",
+  device_data, __builtin_return_address(0));
  return -ENXIO;
 }
 
@@ -170,7 +171,7 @@ int snd_device_register(struct snd_card *card, void *device_data)
    dev->state = SNDRV_DEV_REGISTERED;
    return 0;
   }
-  snd_printd("snd_device_register busy\n");
+  dev_dbg(card->dev, "snd_device_register busy\n");
   return -EBUSY;
  }
  snd_BUG();
diff --git a/sound/core/info.c b/sound/core/info.c
index e79baa1..90c19e9 100644
--- a/sound/core/info.c
+++ b/sound/core/info.c
@@ -418,9 +418,14 @@ static int snd_info_entry_release(struct inode *inode, struct file *file)
    if (entry->c.text.write) {
     entry->c.text.write(entry, data->wbuffer);
     if (data->wbuffer->error) {
-     snd_printk(KERN_WARNING "data write error to %s (%i)\n",
-      entry->name,
-      data->wbuffer->error);
+     if (entry->card)
+      dev_warn(entry->card->dev, "info: data write error to %s (%i)\n",
+        entry->name,
+        data->wbuffer->error);
+     else
+      pr_warn("ALSA: info: data write error to %s (%i)\n",
+       entry->name,
+       data->wbuffer->error);
     }
    }
    kfree(data->wbuffer->buffer);
diff --git a/sound/core/init.c b/sound/core/init.c
index b5a3909..3e2a036 100644
--- a/sound/core/init.c
+++ b/sound/core/init.c
@@ -113,11 +113,11 @@ static inline int init_info_for_card(struct snd_card *card)
  struct snd_info_entry *entry;
 
  if ((err = snd_info_card_register(card)) < 0) {
-  snd_printd("unable to create card info\n");
+  dev_dbg(card->dev, "unable to create card info\n");
   return err;
  }
  if ((entry = snd_info_create_card_entry(card, "id", card->proc_root)) == NULL) {
-  snd_printd("unable to create card entry\n");
+  dev_dbg(card->dev, "unable to create card entry\n");
   return err;
  }
  entry->c.text.read = snd_card_id_read;
@@ -217,7 +217,7 @@ int snd_card_new(struct device *parent, int idx, const char *xid,
   err = -ENODEV;
  if (err < 0) {
   mutex_unlock(&snd_card_mutex);
-  snd_printk(KERN_ERR "cannot find the slot for index %d (range 0-%i), error: %d\n",
+  dev_err(parent, "cannot find the slot for index %d (range 0-%i), error: %d\n",
     idx, snd_ecards_limit - 1, err);
   kfree(card);
   return err;
@@ -254,12 +254,12 @@ int snd_card_new(struct device *parent, int idx, const char *xid,
  /* snd_cards_bitmask and snd_cards are set with snd_card_register */
  err = snd_ctl_create(card);
  if (err < 0) {
-  snd_printk(KERN_ERR "unable to register control minors\n");
+  dev_err(parent, "unable to register control minors\n");
   goto __error;
  }
  err = snd_info_card_create(card);
  if (err < 0) {
-  snd_printk(KERN_ERR "unable to create card info\n");
+  dev_err(parent, "unable to create card info\n");
   goto __error_ctl;
  }
  *card_ret = card;
@@ -422,7 +422,7 @@ int snd_card_disconnect(struct snd_card *card)
  /* notify all devices that we are disconnected */
  err = snd_device_disconnect_all(card);
  if (err < 0)
-  snd_printk(KERN_ERR "not all devices for card %i can be disconnected\n", card->number);
+  dev_err(card->dev, "not all devices for card %i can be disconnected\n", card->number);
 
  snd_info_card_disconnect(card);
  if (card->registered) {
@@ -455,22 +455,22 @@ static int snd_card_do_free(struct snd_card *card)
   snd_mixer_oss_notify_callback(card, SND_MIXER_OSS_NOTIFY_FREE);
 #endif
  if (snd_device_free_all(card, SNDRV_DEV_CMD_PRE) < 0) {
-  snd_printk(KERN_ERR "unable to free all devices (pre)\n");
+  dev_err(card->dev, "unable to free all devices (pre)\n");
   /* Fatal, but this situation should never occur */
  }
  if (snd_device_free_all(card, SNDRV_DEV_CMD_NORMAL) < 0) {
-  snd_printk(KERN_ERR "unable to free all devices (normal)\n");
+  dev_err(card->dev, "unable to free all devices (normal)\n");
   /* Fatal, but this situation should never occur */
  }
  if (snd_device_free_all(card, SNDRV_DEV_CMD_POST) < 0) {
-  snd_printk(KERN_ERR "unable to free all devices (post)\n");
+  dev_err(card->dev, "unable to free all devices (post)\n");
   /* Fatal, but this situation should never occur */
  }
  if (card->private_free)
   card->private_free(card);
  snd_info_free_entry(card->proc_id);
  if (snd_info_card_free(card) < 0) {
-  snd_printk(KERN_WARNING "unable to free card info\n");
+  dev_warn(card->dev, "unable to free card info\n");
   /* Not fatal error */
  }
  if (card->release_completion)
@@ -596,7 +596,7 @@ static void snd_card_set_id_no_lock(struct snd_card *card, const char *src,
   goto again;
  }
  /* last resort... */
- snd_printk(KERN_ERR "unable to set card id (%s)\n", id);
+ dev_err(card->dev, "unable to set card id (%s)\n", id);
  if (card->proc_root->name)
   strlcpy(card->id, card->proc_root->name, sizeof(card->id));
 }
@@ -948,7 +948,7 @@ int snd_card_file_remove(struct snd_card *card, struct file *file)
  }
  spin_unlock(&card->files_lock);
  if (!found) {
-  snd_printk(KERN_ERR "ALSA card file remove problem (%p)\n", file);
+  dev_err(card->dev, "card file remove problem (%p)\n", file);
   return -ENOENT;
  }
  kfree(found);
diff --git a/sound/core/isadma.c b/sound/core/isadma.c
index e2b3861..31e8544 100644
--- a/sound/core/isadma.c
+++ b/sound/core/isadma.c
@@ -106,7 +106,7 @@ unsigned int snd_dma_pointer(unsigned long dma, unsigned int size)
   result = result1;
 #ifdef CONFIG_SND_DEBUG
  if (result > size)
-  snd_printk(KERN_ERR "pointer (0x%x) for DMA #%ld is greater than transfer size (0x%x)\n", result, dma, size);
+  pr_err("ALSA: pointer (0x%x) for DMA #%ld is greater than transfer size (0x%x)\n", result, dma, size);
 #endif
  if (result >= size || result == 0)
   return 0;
diff --git a/sound/core/memalloc.c b/sound/core/memalloc.c
index 578b2e9..363cd3e 100644
--- a/sound/core/memalloc.c
+++ b/sound/core/memalloc.c
@@ -211,7 +211,7 @@ int snd_dma_alloc_pages(int type, struct device *device, size_t size,
   break;
 #endif
  default:
-  printk(KERN_ERR "snd-malloc: invalid device type %d\n", type);
+  pr_err("snd-malloc: invalid device type %d\n", type);
   dmab->area = NULL;
   dmab->addr = 0;
   return -ENXIO;
@@ -288,7 +288,7 @@ void snd_dma_free_pages(struct snd_dma_buffer *dmab)
   break;
 #endif
  default:
-  printk(KERN_ERR "snd-malloc: invalid device type %d\n", dmab->dev.type);
+  pr_err("snd-malloc: invalid device type %d\n", dmab->dev.type);
  }
 }
 
diff --git a/sound/core/seq/seq_device.c b/sound/core/seq/seq_device.c
index 040c60e..a1f00ca 100644
--- a/sound/core/seq/seq_device.c
+++ b/sound/core/seq/seq_device.c
@@ -168,7 +168,7 @@ void snd_seq_device_load_drivers(void)
 
 /*
  * register a sequencer device
- * card = card info (NULL allowed)
+ * card = card info
  * device = device number (if any)
  * id = id of driver
  * result = return pointer (NULL allowed if unnecessary)
diff --git a/sound/core/sound.c b/sound/core/sound.c
index 9b3e19e..5aba681 100644
--- a/sound/core/sound.c
+++ b/sound/core/sound.c
@@ -468,7 +468,7 @@ static int __init alsa_sound_init(void)
  snd_major = major;
  snd_ecards_limit = cards_limit;
  if (register_chrdev(major, "alsa", &snd_fops)) {
-  snd_printk(KERN_ERR "unable to register native major device number %d\n", major);
+  pr_err("ALSA core: unable to register native major device number %d\n", major);
   return -EIO;
  }
  if (snd_info_init() < 0) {
@@ -477,7 +477,7 @@ static int __init alsa_sound_init(void)
  }
  snd_info_minor_register();
 #ifndef MODULE
- printk(KERN_INFO "Advanced Linux Sound Architecture Driver Initialized.\n");
+ pr_info("Advanced Linux Sound Architecture Driver Initialized.\n");
 #endif
  return 0;
 }
diff --git a/sound/core/vmaster.c b/sound/core/vmaster.c
index 842a97d..6c58e6f 100644
--- a/sound/core/vmaster.c
+++ b/sound/core/vmaster.c
@@ -101,7 +101,7 @@ static int slave_init(struct link_slave *slave)
  if (slave->info.count > 2  ||
      (slave->info.type != SNDRV_CTL_ELEM_TYPE_INTEGER &&
       slave->info.type != SNDRV_CTL_ELEM_TYPE_BOOLEAN)) {
-  snd_printk(KERN_ERR "invalid slave element\n");
+  pr_err("ALSA: vmaster: invalid slave element\n");
   kfree(uinfo);
   return -EINVAL;
  }
-- 
1.7.1