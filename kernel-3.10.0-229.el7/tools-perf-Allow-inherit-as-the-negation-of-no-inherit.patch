From abab4db67dd1eccc95c11e78a6956fe5c9225b0c Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:39 -0400
Subject: [tools] perf: Allow '--inherit' as the negation of '--no-inherit'

Message-id: <1408953210-26343-32-git-send-email-jolsa@redhat.com>
Patchwork-id: 88777
O-Subject: [PATCH RHEL7.1 BZ1133083 031/322] perf tools: Allow '--inherit' as the negation of '--no-inherit'
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 4bc437964ef540462bd15af4a713da62961809aa
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Mon Nov 18 11:55:55 2013 +0200

description
===========
Long options can be negated by prefixing them with 'no-'.  However
options that already start with 'no-', such as '--no-inherit' result in
ugly double 'no's.

Avoid that by accepting that the removal of 'no-' also negates the long
option.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/parse-options.c b/tools/perf/util/parse-options.c
index 31f404a..b6b39ff 100644
--- a/tools/perf/util/parse-options.c
+++ b/tools/perf/util/parse-options.c
@@ -224,6 +224,24 @@ static int parse_long_opt(struct parse_opt_ctx_t *p, const char *arg,
    return 0;
   }
   if (!rest) {
+   if (!prefixcmp(options->long_name, "no-")) {
+    /*
+     * The long name itself starts with "no-", so
+     * accept the option without "no-" so that users
+     * do not have to enter "no-no-" to get the
+     * negation.
+     */
+    rest = skip_prefix(arg, options->long_name + 3);
+    if (rest) {
+     flags |= OPT_UNSET;
+     goto match;
+    }
+    /* Abbreviated case */
+    if (!prefixcmp(options->long_name + 3, arg)) {
+     flags |= OPT_UNSET;
+     goto is_abbreviated;
+    }
+   }
    /* abbreviated? */
    if (!strncmp(options->long_name, arg, arg_end - arg)) {
 is_abbreviated:
@@ -259,6 +277,7 @@ is_abbreviated:
    if (!rest)
     continue;
   }
+match:
   if (*rest) {
    if (*rest != '=')
     continue;
-- 
1.7.1