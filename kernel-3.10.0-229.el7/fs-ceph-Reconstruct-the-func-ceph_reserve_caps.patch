From 12b351ebd2fccd3f40500668f029be30a9bad76a Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:22:15 -0400
Subject: [fs] ceph: Reconstruct the func ceph_reserve_caps
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-29-git-send-email-sweil@redhat.com>
Patchwork-id: 89607
O-Subject: [PATCH 028/303] ceph: Reconstruct the func ceph_reserve_caps.
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: majianpeng <majianpeng@gmail.com>

Drop ignored return value.  Fix allocation failure case to not leak.

Signed-off-by: Jianpeng Ma <majianpeng@gmail.com>
Reviewed-by: Sage Weil <sage@inktank.com>
(cherry picked from commit 93faca6ef45822b0825bb181859b1a8911e9c4c1)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/caps.c b/fs/ceph/caps.c
index 9a5ccc9..8ec27b1 100644
--- a/fs/ceph/caps.c
+++ b/fs/ceph/caps.c
@@ -147,7 +147,7 @@ void ceph_adjust_min_caps(struct ceph_mds_client *mdsc, int delta)
  spin_unlock(&mdsc->caps_list_lock);
 }
 
-int ceph_reserve_caps(struct ceph_mds_client *mdsc,
+void ceph_reserve_caps(struct ceph_mds_client *mdsc,
         struct ceph_cap_reservation *ctx, int need)
 {
  int i;
@@ -155,7 +155,6 @@ int ceph_reserve_caps(struct ceph_mds_client *mdsc,
  int have;
  int alloc = 0;
  LIST_HEAD(newcaps);
- int ret = 0;
 
  dout("reserve caps ctx=%p need=%d\n", ctx, need);
 
@@ -174,14 +173,15 @@ int ceph_reserve_caps(struct ceph_mds_client *mdsc,
 
  for (i = have; i < need; i++) {
   cap = kmem_cache_alloc(ceph_cap_cachep, GFP_NOFS);
-  if (!cap) {
-   ret = -ENOMEM;
-   goto out_alloc_count;
-  }
+  if (!cap)
+   break;
   list_add(&cap->caps_item, &newcaps);
   alloc++;
  }
- BUG_ON(have + alloc != need);
+ /* we didn't manage to reserve as much as we needed */
+ if (have + alloc != need)
+  pr_warn("reserve caps ctx=%p ENOMEM need=%d got=%d\n",
+   ctx, need, have + alloc);
 
  spin_lock(&mdsc->caps_list_lock);
  mdsc->caps_total_count += alloc;
@@ -197,13 +197,6 @@ int ceph_reserve_caps(struct ceph_mds_client *mdsc,
  dout("reserve caps ctx=%p %d = %d used + %d resv + %d avail\n",
       ctx, mdsc->caps_total_count, mdsc->caps_use_count,
       mdsc->caps_reserve_count, mdsc->caps_avail_count);
- return 0;
-
-out_alloc_count:
- /* we didn't manage to reserve as much as we needed */
- pr_warning("reserve caps ctx=%p ENOMEM need=%d got=%d\n",
-     ctx, need, have);
- return ret;
 }
 
 int ceph_unreserve_caps(struct ceph_mds_client *mdsc,
diff --git a/fs/ceph/super.h b/fs/ceph/super.h
index 7ccfdb4..dfbb729 100644
--- a/fs/ceph/super.h
+++ b/fs/ceph/super.h
@@ -534,7 +534,7 @@ extern int __ceph_caps_mds_wanted(struct ceph_inode_info *ci);
 extern void ceph_caps_init(struct ceph_mds_client *mdsc);
 extern void ceph_caps_finalize(struct ceph_mds_client *mdsc);
 extern void ceph_adjust_min_caps(struct ceph_mds_client *mdsc, int delta);
-extern int ceph_reserve_caps(struct ceph_mds_client *mdsc,
+extern void ceph_reserve_caps(struct ceph_mds_client *mdsc,
         struct ceph_cap_reservation *ctx, int need);
 extern int ceph_unreserve_caps(struct ceph_mds_client *mdsc,
           struct ceph_cap_reservation *ctx);
-- 
1.7.1