From 388c38ae39cad932571a8262f3dbdd17e65d39b2 Mon Sep 17 00:00:00 2001
From: Rui Wang <ruwang@redhat.com>
Date: Fri, 22 Aug 2014 03:52:00 -0400
Subject: [trace] Add __field_struct macro for TRACE_EVENT()

Message-id: <1408679528-32070-3-git-send-email-ruwang@redhat.com>
Patchwork-id: 88692
O-Subject: [PATCH RHEL7.1 BZ1085141 02/10] tracing: Add __field_struct macro for TRACE_EVENT()
Bugzilla: 1085141
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: "Chen, Gong" <gong.chen@linux.intel.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1085141

Backport of:
Original commit: 4d4c9cc839a308be3289a361ccba4447ee140552
Original Author: Steven Rostedt <rostedt@goodmis.org>
Original Date: Tue, 17 Jun 2014 08:59:16 -0400

 Currently the __field() macro in TRACE_EVENT is only good for primitive
 values, such as integers and pointers, but it fails on complex data types
 such as structures or unions. This is because the __field() macro
 determines if the variable is signed or not with the test of:

   (((type)(-1)) < (type)1)

 Unfortunately, that fails when type is a structure.

 Since trace events should support structures as fields a new macro
 is created for such a case called __field_struct() which acts exactly
 the same as __field() does but it does not do the signed type check
 and just uses a constant false for that answer.

Signed-off-by: Chen, Gong <gong.chen@linux.intel.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/trace/ftrace.h b/include/trace/ftrace.h
index fa02f09..ce12d6c 100644
--- a/include/trace/ftrace.h
+++ b/include/trace/ftrace.h
@@ -44,6 +44,12 @@
 #undef __field_ext
 #define __field_ext(type, item, filter_type) type item;
 
+#undef __field_struct
+#define __field_struct(type, item) type item;
+
+#undef __field_struct_ext
+#define __field_struct_ext(type, item, filter_type) type item;
+
 #undef __array
 #define __array(type, item, len) type item[len];
 
@@ -115,6 +121,12 @@
 #undef __field_ext
 #define __field_ext(type, item, filter_type)
 
+#undef __field_struct
+#define __field_struct(type, item)
+
+#undef __field_struct_ext
+#define __field_struct_ext(type, item, filter_type)
+
 #undef __array
 #define __array(type, item, len)
 
@@ -297,9 +309,21 @@ static struct trace_event_functions ftrace_event_type_funcs_##call = { \
  if (ret)       \
   return ret;
 
+#undef __field_struct_ext
+#define __field_struct_ext(type, item, filter_type)   \
+ ret = trace_define_field(event_call, #type, #item,  \
+     offsetof(typeof(field), item),  \
+     sizeof(field.item),   \
+     0, filter_type);   \
+ if (ret)       \
+  return ret;
+
 #undef __field
 #define __field(type, item) __field_ext(type, item, FILTER_OTHER)
 
+#undef __field_struct
+#define __field_struct(type, item) __field_struct_ext(type, item, FILTER_OTHER)
+
 #undef __array
 #define __array(type, item, len)     \
  do {        \
@@ -361,6 +385,12 @@ ftrace_define_fields_##call(struct ftrace_event_call *event_call) \
 #undef __field_ext
 #define __field_ext(type, item, filter_type)
 
+#undef __field_struct
+#define __field_struct(type, item)
+
+#undef __field_struct_ext
+#define __field_struct_ext(type, item, filter_type)
+
 #undef __array
 #define __array(type, item, len)
 
@@ -491,6 +521,9 @@ static inline notrace int ftrace_get_offsets_##call(   \
 #undef __field
 #define __field(type, item)
 
+#undef __field_struct
+#define __field_struct(type, item)
+
 #undef __array
 #define __array(type, item, len)
 
diff --git a/samples/trace_events/trace-events-sample.h b/samples/trace_events/trace-events-sample.h
index 6af3732..4b0113f 100644
--- a/samples/trace_events/trace-events-sample.h
+++ b/samples/trace_events/trace-events-sample.h
@@ -56,7 +56,8 @@
  * struct:  This defines the way the data will be stored in the ring buffer.
  *    There are currently two types of elements. __field and __array.
  *    a __field is broken up into (type, name). Where type can be any
- *    type but an array.
+ *    primitive type (integer, long or pointer). __field_struct() can
+ *    be any static complex data value (struct, union, but not an array).
  *    For an array. there are three fields. (type, name, size). The
  *    type of elements in the array, the name of the field and the size
  *    of the array.
-- 
1.7.1