From 2c305588ea2f9fbb9a68b2c63667309152875646 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 24 Oct 2014 20:55:34 -0400
Subject: [net] handle encapsulation offloads when computing segment lengths

Message-id: <9bc147b29312c9cb7ff8ae64b33991978ab18c16.1414183890.git.jbenc@redhat.com>
Patchwork-id: 98462
O-Subject: [RHEL7.1 net PATCH 5/5] net: core: handle encapsulation offloads when computing segment lengths
Bugzilla: 1144571
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Jesper Brouer <jbrouer@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1144571
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8159555

commit f993bc25e5196e60514c216d0bca0f600de64af8
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Oct 20 13:49:18 2014 +0200

    net: core: handle encapsulation offloads when computing segment lengths

    if ->encapsulation is set we have to use inner_tcp_hdrlen and add the
    size of the inner network headers too.

    This is 'mostly harmless'; tbf might send skb that is slightly over
    quota or drop skb even if it would have fit.

    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index c222690..4c4375c 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -3679,14 +3679,21 @@ EXPORT_SYMBOL_GPL(skb_scrub_packet);
 unsigned int skb_gso_transport_seglen(const struct sk_buff *skb)
 {
  const struct skb_shared_info *shinfo = skb_shinfo(skb);
+ unsigned int thlen = 0;
 
- if (likely(shinfo->gso_type & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6)))
-  return tcp_hdrlen(skb) + shinfo->gso_size;
+ if (skb->encapsulation) {
+  thlen = skb_inner_transport_header(skb) -
+   skb_transport_header(skb);
 
+  if (likely(shinfo->gso_type & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6)))
+   thlen += inner_tcp_hdrlen(skb);
+ } else if (likely(shinfo->gso_type & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6))) {
+  thlen = tcp_hdrlen(skb);
+ }
  /* UFO sets gso_size to the size of the fragmentation
   * payload, i.e. the size of the L4 (UDP) header is already
   * accounted for.
   */
- return shinfo->gso_size;
+ return thlen + shinfo->gso_size;
 }
 EXPORT_SYMBOL_GPL(skb_gso_transport_seglen);
-- 
1.7.1