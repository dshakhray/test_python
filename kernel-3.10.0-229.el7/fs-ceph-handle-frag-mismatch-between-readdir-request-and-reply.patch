From 81b7a138d99b58491f88d5768a96e18570ca9986 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:22:56 -0400
Subject: [fs] ceph: handle frag mismatch between readdir request and reply
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-70-git-send-email-sweil@redhat.com>
Patchwork-id: 89805
O-Subject: [PATCH 069/303] ceph: handle frag mismatch between readdir request and reply
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Yan, Zheng" <zheng.z.yan@intel.com>

If client has outdated directory fragments information, it may request
readdir an non-existent directory fragment. In this case, the MDS finds
an approximate directory fragment and sends its contents back to the
client. When receiving a reply with fragment that is different than the
requested one, the client need to reset the 'readdir offset'.

Signed-off-by: Yan, Zheng <zheng.z.yan@intel.com>
Reviewed-by: Sage Weil <sage@inktank.com>
(cherry picked from commit 81c6aea5275eae453719d7f3924da07e668265c5)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/dir.c b/fs/ceph/dir.c
index 0e4da4a..81c1ce0 100644
--- a/fs/ceph/dir.c
+++ b/fs/ceph/dir.c
@@ -355,8 +355,18 @@ more:
   }
 
   /* note next offset and last dentry name */
+  rinfo = &req->r_reply_info;
+  if (le32_to_cpu(rinfo->dir_dir->frag) != frag) {
+   frag = le32_to_cpu(rinfo->dir_dir->frag);
+   if (ceph_frag_is_leftmost(frag))
+    fi->next_offset = 2;
+   else
+    fi->next_offset = 0;
+   off = fi->next_offset;
+  }
   fi->offset = fi->next_offset;
   fi->last_readdir = req;
+  fi->frag = frag;
 
   if (req->r_reply_info.dir_end) {
    kfree(fi->last_name);
@@ -366,7 +376,6 @@ more:
    else
     fi->next_offset = 0;
   } else {
-   rinfo = &req->r_reply_info;
    err = note_last_dentry(fi,
            rinfo->dir_dname[rinfo->dir_nr-1],
            rinfo->dir_dname_len[rinfo->dir_nr-1]);
diff --git a/fs/ceph/inode.c b/fs/ceph/inode.c
index 98515b1..2708fa4 100644
--- a/fs/ceph/inode.c
+++ b/fs/ceph/inode.c
@@ -1267,8 +1267,20 @@ int ceph_readdir_prepopulate(struct ceph_mds_request *req,
  int err = 0, i;
  struct inode *snapdir = NULL;
  struct ceph_mds_request_head *rhead = req->r_request->front.iov_base;
- u64 frag = le32_to_cpu(rhead->args.readdir.frag);
  struct ceph_dentry_info *di;
+ u64 r_readdir_offset = req->r_readdir_offset;
+ u32 frag = le32_to_cpu(rhead->args.readdir.frag);
+
+ if (rinfo->dir_dir &&
+     le32_to_cpu(rinfo->dir_dir->frag) != frag) {
+  dout("readdir_prepopulate got new frag %x -> %x\n",
+       frag, le32_to_cpu(rinfo->dir_dir->frag));
+  frag = le32_to_cpu(rinfo->dir_dir->frag);
+  if (ceph_frag_is_leftmost(frag))
+   r_readdir_offset = 2;
+  else
+   r_readdir_offset = 0;
+ }
 
  if (req->r_aborted)
   return readdir_prepopulate_inodes_only(req, session);
@@ -1332,7 +1344,7 @@ retry_lookup:
   }
 
   di = dn->d_fsdata;
-  di->offset = ceph_make_fpos(frag, i + req->r_readdir_offset);
+  di->offset = ceph_make_fpos(frag, i + r_readdir_offset);
 
   /* inode */
   if (dn->d_inode) {
diff --git a/fs/ceph/mds_client.c b/fs/ceph/mds_client.c
index b7bda5d..f51ab26 100644
--- a/fs/ceph/mds_client.c
+++ b/fs/ceph/mds_client.c
@@ -2238,8 +2238,7 @@ static void handle_reply(struct ceph_mds_session *session, struct ceph_msg *msg)
  err = ceph_fill_trace(mdsc->fsc->sb, req, req->r_session);
  if (err == 0) {
   if (result == 0 && (req->r_op == CEPH_MDS_OP_READDIR ||
-        req->r_op == CEPH_MDS_OP_LSSNAP) &&
-      rinfo->dir_nr)
+        req->r_op == CEPH_MDS_OP_LSSNAP))
    ceph_readdir_prepopulate(req, req->r_session);
   ceph_unreserve_caps(mdsc, &req->r_caps_reservation);
  }
-- 
1.7.1