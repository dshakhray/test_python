From 7aff961f70a828d4a64d85e955f4e076f23124c5 Mon Sep 17 00:00:00 2001
From: Nikolay Aleksandrov <nikolay@redhat.com>
Date: Fri, 5 Sep 2014 11:04:05 -0400
Subject: [ethernet] sfc: Add per-queue statistics in ethtool

Message-id: <1409915048-26438-30-git-send-email-nikolay@redhat.com>
Patchwork-id: 91420
O-Subject: [RHEL7.1 PATCH BZ 1110888 29/32] sfc: Add per-queue statistics in ethtool
Bugzilla: 1110888
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Andrew Rybchenko <Andrew.Rybchenko@oktetlabs.ru>

Implement per channel software TX and RX packet counters
accessed as ethtool statistics.

This allows confirmation with MAC statistics.

Signed-off-by: Shradha Shah <sshah@solarflare.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8ccf3800dbdeaf26bcdefa471c9c8e0da7e6ec7a)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/sfc/ethtool.c b/drivers/net/ethernet/sfc/ethtool.c
index 1aa73a7..bcc750c 100644
--- a/drivers/net/ethernet/sfc/ethtool.c
+++ b/drivers/net/ethernet/sfc/ethtool.c
@@ -359,6 +359,37 @@ static int efx_ethtool_fill_self_tests(struct efx_nic *efx,
  return n;
 }
 
+static size_t efx_describe_per_queue_stats(struct efx_nic *efx, u8 *strings)
+{
+ size_t n_stats = 0;
+ struct efx_channel *channel;
+
+ efx_for_each_channel(channel, efx) {
+  if (efx_channel_has_tx_queues(channel)) {
+   n_stats++;
+   if (strings != NULL) {
+    snprintf(strings, ETH_GSTRING_LEN,
+      "tx-%u.tx_packets",
+      channel->tx_queue[0].queue /
+      EFX_TXQ_TYPES);
+
+    strings += ETH_GSTRING_LEN;
+   }
+  }
+ }
+ efx_for_each_channel(channel, efx) {
+  if (efx_channel_has_rx_queue(channel)) {
+   n_stats++;
+   if (strings != NULL) {
+    snprintf(strings, ETH_GSTRING_LEN,
+      "rx-%d.rx_packets", channel->channel);
+    strings += ETH_GSTRING_LEN;
+   }
+  }
+ }
+ return n_stats;
+}
+
 static int efx_ethtool_get_sset_count(struct net_device *net_dev,
           int string_set)
 {
@@ -367,8 +398,9 @@ static int efx_ethtool_get_sset_count(struct net_device *net_dev,
  switch (string_set) {
  case ETH_SS_STATS:
   return efx->type->describe_stats(efx, NULL) +
-   EFX_ETHTOOL_SW_STAT_COUNT +
-   efx_ptp_describe_stats(efx, NULL);
+         EFX_ETHTOOL_SW_STAT_COUNT +
+         efx_describe_per_queue_stats(efx, NULL) +
+         efx_ptp_describe_stats(efx, NULL);
  case ETH_SS_TEST:
   return efx_ethtool_fill_self_tests(efx, NULL, NULL, NULL);
  default:
@@ -390,6 +422,8 @@ static void efx_ethtool_get_strings(struct net_device *net_dev,
    strlcpy(strings + i * ETH_GSTRING_LEN,
     efx_sw_stat_desc[i].name, ETH_GSTRING_LEN);
   strings += EFX_ETHTOOL_SW_STAT_COUNT * ETH_GSTRING_LEN;
+  strings += (efx_describe_per_queue_stats(efx, strings) *
+       ETH_GSTRING_LEN);
   efx_ptp_describe_stats(efx, strings);
   break;
  case ETH_SS_TEST:
@@ -409,6 +443,7 @@ static void efx_ethtool_get_stats(struct net_device *net_dev,
  const struct efx_sw_stat_desc *stat;
  struct efx_channel *channel;
  struct efx_tx_queue *tx_queue;
+ struct efx_rx_queue *rx_queue;
  int i;
 
  spin_lock_bh(&efx->stats_lock);
@@ -444,6 +479,25 @@ static void efx_ethtool_get_stats(struct net_device *net_dev,
 
  spin_unlock_bh(&efx->stats_lock);
 
+ efx_for_each_channel(channel, efx) {
+  if (efx_channel_has_tx_queues(channel)) {
+   *data = 0;
+   efx_for_each_channel_tx_queue(tx_queue, channel) {
+    *data += tx_queue->tx_packets;
+   }
+   data++;
+  }
+ }
+ efx_for_each_channel(channel, efx) {
+  if (efx_channel_has_rx_queue(channel)) {
+   *data = 0;
+   efx_for_each_channel_rx_queue(rx_queue, channel) {
+    *data += rx_queue->rx_packets;
+   }
+   data++;
+  }
+ }
+
  efx_ptp_update_stats(efx, data);
 }
 
diff --git a/drivers/net/ethernet/sfc/net_driver.h b/drivers/net/ethernet/sfc/net_driver.h
index 8a02d45..fb2e3bf 100644
--- a/drivers/net/ethernet/sfc/net_driver.h
+++ b/drivers/net/ethernet/sfc/net_driver.h
@@ -249,6 +249,8 @@ struct efx_tx_queue {
  unsigned int tso_packets;
  unsigned int pushes;
  unsigned int pio_packets;
+ /* Statistics to supplement MAC stats */
+ unsigned long tx_packets;
 
  /* Members shared between paths and sometimes updated */
  unsigned int empty_read_count ____cacheline_aligned_in_smp;
@@ -358,6 +360,8 @@ struct efx_rx_queue {
  unsigned int recycle_count;
  struct timer_list slow_fill;
  unsigned int slow_fill_count;
+ /* Statistics to supplement MAC stats */
+ unsigned long rx_packets;
 };
 
 enum efx_sync_events_state {
diff --git a/drivers/net/ethernet/sfc/rx.c b/drivers/net/ethernet/sfc/rx.c
index bf537a2..a7bb63a 100644
--- a/drivers/net/ethernet/sfc/rx.c
+++ b/drivers/net/ethernet/sfc/rx.c
@@ -530,6 +530,8 @@ void efx_rx_packet(struct efx_rx_queue *rx_queue, unsigned int index,
  struct efx_channel *channel = efx_rx_queue_channel(rx_queue);
  struct efx_rx_buffer *rx_buf;
 
+ rx_queue->rx_packets++;
+
  rx_buf = efx_rx_buffer(rx_queue, index);
  rx_buf->flags |= flags;
 
diff --git a/drivers/net/ethernet/sfc/tx.c b/drivers/net/ethernet/sfc/tx.c
index ede8dcc..283e5f8 100644
--- a/drivers/net/ethernet/sfc/tx.c
+++ b/drivers/net/ethernet/sfc/tx.c
@@ -452,6 +452,8 @@ finish_packet:
  /* Pass off to hardware */
  efx_nic_push_buffers(tx_queue);
 
+ tx_queue->tx_packets++;
+
  efx_tx_maybe_stop_queue(tx_queue);
 
  return NETDEV_TX_OK;
@@ -1245,6 +1247,8 @@ static int tso_start_new_packet(struct efx_tx_queue *tx_queue,
 
  ++tx_queue->tso_packets;
 
+ ++tx_queue->tx_packets;
+
  return 0;
 }
 
-- 
1.7.1