From b34ea02e377d9c7e364301a4fcc169288d52a4b3 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Thu, 23 Oct 2014 20:01:24 -0400
Subject: [md] dm: improve documentation and code clarity in dm_merge_bvec

Message-id: <1414094494-22068-15-git-send-email-snitzer@redhat.com>
Patchwork-id: 98358
O-Subject: [RHEL7.2 PATCH 14/24] dm: improve documentation and code clarity in dm_merge_bvec
Bugzilla: 1156164
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1156164

Upstream linux-dm.git commit 20441d223eb65e22b42e3315cbf868bfd6bdb91c
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Thu Oct 9 19:32:22 2014 -0400

    dm: improve documentation and code clarity in dm_merge_bvec

    These code changes do not introduce a functional change.

    But bio_add_page() will never attempt to build up a bio larger than
    queue_max_sectors().  Similarly, bio_get_nr_vecs() is also bound by
    queue_max_sectors().  Therefore, there is no point in allowing
    dm_merge_bvec() to answer "how many sectors can a bio have at this
    offset?" with anything larger than queue_max_sectors().  Using
    queue_max_sectors() rather than BIO_MAX_SECTORS serves to more
    accurately convey the limits that are being imposed.

    Also, use unlikely() to clarify the fact that the defensive code in
    dm_merge_bvec() relative to max_size going negative shouldn't ever
    happen -- if it does happen there is a bug in the block layer for
    requesting larger than dm_merge_bvec()'s initial response for a given
    offset.  Also, update a comment in dm_merge_bvec() relative to
    max_hw_sectors_kb.  And fix empty newline whitespace.

    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index a8b8e37..eef59b4 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -1579,9 +1579,9 @@ static int dm_merge_bvec(struct request_queue *q,
   * Find maximum amount of I/O that won't need splitting
   */
  max_sectors = min(max_io_len(bvm->bi_sector, ti),
-     (sector_t) BIO_MAX_SECTORS);
+     (sector_t) queue_max_sectors(q));
  max_size = (max_sectors << SECTOR_SHIFT) - bvm->bi_size;
- if (max_size < 0)
+ if (unlikely(max_size < 0)) /* this shouldn't _ever_ happen */
   max_size = 0;
 
  /*
@@ -1593,10 +1593,10 @@ static int dm_merge_bvec(struct request_queue *q,
   max_size = ti->type->merge(ti, bvm, biovec, max_size);
  /*
   * If the target doesn't support merge method and some of the devices
-  * provided their merge_bvec method (we know this by looking at
-  * queue_max_hw_sectors), then we can't allow bios with multiple vector
-  * entries.  So always set max_size to 0, and the code below allows
-  * just one page.
+  * provided their merge_bvec method (we know this by looking for the
+  * max_hw_sectors that dm_set_device_limits may set), then we can't
+  * allow bios with multiple vector entries.  So always set max_size
+  * to 0, and the code below allows just one page.
   */
  else if (queue_max_hw_sectors(q) <= PAGE_SIZE >> 9)
   max_size = 0;
-- 
1.7.1