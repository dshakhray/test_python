From 74622e0d75f22e4c2188ee96951e1ea8364713bb Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:04:05 -0400
Subject: [powerpc] prom: Scan reserved-ranges node for memory reservations

Message-id: <1410545655-205645-17-git-send-email-dzickus@redhat.com>
Patchwork-id: 94086
O-Subject: [RHEL7 PATCH 016/626] powerpc/prom: Scan reserved-ranges node for memory reservations
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 0962e8004e97409072bb6caee7b3ba948a5fb93a
Author: Jeremy Kerr <jk@ozlabs.org>
Date:   Wed Apr 24 14:26:30 2013 +0800

    powerpc/prom: Scan reserved-ranges node for memory reservations

    Based on benh's proposal at
    https://lists.ozlabs.org/pipermail/linuxppc-dev/2012-September/101237.html,
    this change provides support for reserving memory from the
    reserved-ranges node at the root of the device tree.

    We just call memblock_reserve on these ranges for now.

    Signed-off-by: Jeremy Kerr <jk@ozlabs.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/prom.c b/arch/powerpc/kernel/prom.c
index 727f6ae..b45ef0c 100644
--- a/arch/powerpc/kernel/prom.c
+++ b/arch/powerpc/kernel/prom.c
@@ -561,6 +561,33 @@ void __init early_init_dt_setup_initrd_arch(unsigned long start,
 }
 #endif
 
+static bool __init early_reserve_mem_dt(void)
+{
+ unsigned long i, len, dt_root;
+ const __be32 *prop;
+
+ dt_root = of_get_flat_dt_root();
+
+ prop = of_get_flat_dt_prop(dt_root, "reserved-ranges", &len);
+
+ if (!prop)
+  return false;
+
+ /* Each reserved range is an (address,size) pair, 2 cells each,
+  * totalling 4 cells per range. */
+ for (i = 0; i < len / (sizeof(*prop) * 4); i++) {
+  u64 base, size;
+
+  base = of_read_number(prop + (i * 4) + 0, 2);
+  size = of_read_number(prop + (i * 4) + 2, 2);
+
+  if (size)
+   memblock_reserve(base, size);
+ }
+
+ return true;
+}
+
 static void __init early_reserve_mem(void)
 {
  u64 base, size;
@@ -576,6 +603,14 @@ static void __init early_reserve_mem(void)
  self_size = be32_to_cpu(initial_boot_params->totalsize);
  memblock_reserve(self_base, self_size);
 
+ /*
+  * Try looking for reserved-regions property in the DT first; if
+  * it's present, it'll contain all of the necessary reservation
+  * info
+  */
+ if (early_reserve_mem_dt())
+  return;
+
 #ifdef CONFIG_BLK_DEV_INITRD
  /* then reserve the initrd, if any */
  if (initrd_start && (initrd_end > initrd_start))
-- 
1.7.1