From d8454eaf80b729e43e6e4abd88a8288b3317d0ac Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Tue, 7 Oct 2014 20:58:10 -0400
Subject: [net] ipv6: remove rt6i_genid

Message-id: <14cf15fd4bf7c9cffa4f1435686d2126ffe07907.1412712186.git.hannes@redhat.com>
Patchwork-id: 97146
O-Subject: [RHEL7.1 net PATCH v2 6/6] ipv6: remove rt6i_genid
Bugzilla: 1150017
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1150017
Upstream Status: 705f1c869d577c8055736dd02501f26a2507dd5b
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8075311

I left rt6i_genid in struct rt6_info, but it is unused after this
commit. It was removed upstream.

Upstream Commit:
commit 705f1c869d577c8055736dd02501f26a2507dd5b
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Sun Sep 28 00:46:06 2014 +0200

    ipv6: remove rt6i_genid

    Eric Dumazet noticed that all no-nonexthop or no-gateway routes which
    are already marked DST_HOST (e.g. input routes routes) will always be
    invalidated during sk_dst_check. Thus per-socket dst caching absolutely
    had no effect and early demuxing had no effect.

    Thus this patch removes rt6i_genid: fn_sernum already gets modified during
    add operations, so we only must ensure we mutate fn_sernum during ipv6
    address remove operations. This is a fairly cost extensive operations,
    but address removal should not happen that often. Also our mtu update
    functions do the same and we heard no complains so far. xfrm policy
    changes also cause a call into fib6_flush_trees. Also plug a hole in
    rt6_info (no cacheline changes).

    I verified via tracing that this change has effect.

    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: YOSHIFUJI Hideaki <hideaki@yoshifuji.org>
    Cc: Vlad Yasevich <vyasevich@gmail.com>
    Cc: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Cc: Martin Lau <kafai@fb.com>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/ip6_fib.h b/include/net/ip6_fib.h
index f5a8ce2..de849ef 100644
--- a/include/net/ip6_fib.h
+++ b/include/net/ip6_fib.h
@@ -119,6 +119,10 @@ struct rt6_info {
  struct inet6_dev  *rt6i_idev;
  unsigned long   _rt6i_peer;
 
+ /* RHEL specific:
+  * this field is not used any more since commit
+  * "ipv6: remove rt6i_genid"
+  */
  u32    rt6i_genid;
 
  /* more non-fragment space at head required */
diff --git a/include/net/net_namespace.h b/include/net/net_namespace.h
index 2804112..3ff3315 100644
--- a/include/net/net_namespace.h
+++ b/include/net/net_namespace.h
@@ -126,7 +126,6 @@ struct net {
 #ifndef __GENKSYMS__
  unsigned int  dev_unreg_count;
  atomic_t  fnhe_genid;
- atomic_t  rt6_genid;
 #endif
 };
 
@@ -350,26 +349,12 @@ static inline void rt_genid_bump_ipv4(struct net *net)
  atomic_inc(&net->rt_genid);
 }
 
-#if IS_ENABLED(CONFIG_IPV6)
-static inline int rt_genid_ipv6(struct net *net)
-{
- return atomic_read(&net->rt6_genid);
-}
-
-static inline void rt_genid_bump_ipv6(struct net *net)
-{
- atomic_inc(&net->rt6_genid);
-}
-#else
-static inline int rt_genid_ipv6(struct net *net)
-{
- return 0;
-}
-
+extern void (*__fib6_flush_trees)(struct net *net);
 static inline void rt_genid_bump_ipv6(struct net *net)
 {
+ if (__fib6_flush_trees)
+  __fib6_flush_trees(net);
 }
-#endif
 
 /* For callers who don't really care about whether it's IPv4 or IPv6 */
 static inline void rt_genid_bump_all(struct net *net)
diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index 81dfed4..d411100 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -4705,10 +4705,11 @@ static void __ipv6_ifa_notify(int event, struct inet6_ifaddr *ifp)
 
   if (ip6_del_rt(ifp->rt))
    dst_free(&ifp->rt->dst);
+
+  rt_genid_bump_ipv6(net);
   break;
  }
  atomic_inc(&net->ipv6.dev_addr_genid);
- rt_genid_bump_ipv6(net);
 }
 
 static void ipv6_ifa_notify(int event, struct inet6_ifaddr *ifp)
diff --git a/net/ipv6/addrconf_core.c b/net/ipv6/addrconf_core.c
index 4c11cbc..8e32394 100644
--- a/net/ipv6/addrconf_core.c
+++ b/net/ipv6/addrconf_core.c
@@ -8,6 +8,13 @@
 #include <net/addrconf.h>
 #include <net/ip.h>
 
+/* if ipv6 module registers this function is used by xfrm to force all
+ * sockets to relookup their nodes - this is fairly expensive, be
+ * careful
+ */
+void (*__fib6_flush_trees)(struct net *);
+EXPORT_SYMBOL(__fib6_flush_trees);
+
 #define IPV6_ADDR_SCOPE_TYPE(scope) ((scope) << 16)
 
 static inline unsigned int ipv6_addr_scope2type(unsigned int scope)
diff --git a/net/ipv6/af_inet6.c b/net/ipv6/af_inet6.c
index aa008b0..92b5ad4 100644
--- a/net/ipv6/af_inet6.c
+++ b/net/ipv6/af_inet6.c
@@ -763,7 +763,6 @@ static int __net_init inet6_net_init(struct net *net)
 
  net->ipv6.sysctl.bindv6only = 0;
  net->ipv6.sysctl.icmpv6_time = 1*HZ;
- atomic_set(&net->rt6_genid, 0);
 
  err = ipv6_init_mibs(net);
  if (err)
diff --git a/net/ipv6/ip6_fib.c b/net/ipv6/ip6_fib.c
index af636de..fad3b24 100644
--- a/net/ipv6/ip6_fib.c
+++ b/net/ipv6/ip6_fib.c
@@ -1584,6 +1584,24 @@ static void fib6_prune_clones(struct net *net, struct fib6_node *fn,
  fib6_clean_tree(net, fn, fib6_prune_clone, 1, rt);
 }
 
+static int fib6_update_sernum(struct rt6_info *rt, void *arg)
+{
+ __u32 sernum = *(__u32 *)arg;
+
+ if (rt->rt6i_node &&
+     rt->rt6i_node->fn_sernum != sernum)
+  rt->rt6i_node->fn_sernum = sernum;
+
+ return 0;
+}
+
+static void fib6_flush_trees(struct net *net)
+{
+ __u32 new_sernum = fib6_new_sernum();
+
+ fib6_clean_all(net, fib6_update_sernum, &new_sernum);
+}
+
 /*
  * Garbage collection
  */
@@ -1766,6 +1784,8 @@ int __init fib6_init(void)
          NULL);
  if (ret)
   goto out_unregister_subsys;
+
+ __fib6_flush_trees = fib6_flush_trees;
 out:
  return ret;
 
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index 2aeffa5..546b35f 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -283,7 +283,6 @@ static inline struct rt6_info *ip6_dst_alloc(struct net *net,
 
   memset(dst + 1, 0, sizeof(*rt) - sizeof(*dst));
   rt6_init_peer(rt, table ? &table->tb6_peers : net->ipv6.peers);
-  rt->rt6i_genid = rt_genid_ipv6(net);
   INIT_LIST_HEAD(&rt->rt6i_siblings);
   rt->rt6i_nsiblings = 0;
  }
@@ -1088,9 +1087,6 @@ static struct dst_entry *ip6_dst_check(struct dst_entry *dst, u32 cookie)
   * DST_OBSOLETE_FORCE_CHK which forces validation calls down
   * into this function always.
   */
- if (rt->rt6i_genid != rt_genid_ipv6(dev_net(rt->dst.dev)))
-  return NULL;
-
  if (!rt->rt6i_node || (rt->rt6i_node->fn_sernum != cookie))
   return NULL;
 
-- 
1.7.1