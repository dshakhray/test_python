From a2da1eaa5769e73aff7dc080ebc701a292a4339c Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:30 -0400
Subject: [cpufreq] intel_pstate: Keep values in aperf/mperf in full precision

Message-id: <1409235879-1283-177-git-send-email-prarit@redhat.com>
Patchwork-id: 89442
O-Subject: [RHEL7.1 PATCH BZ 1134639 176/185] cpufreq: intel_pstate: Keep values in aperf/mperf in full precision
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit ac658131d79e775efb0b819cc5a833e581d4de28
Author: Stratos Karafotis <stratosk@semaphore.gr>
Date:   Fri Jul 18 08:37:25 2014 -0700

    cpufreq: intel_pstate: Keep values in aperf/mperf in full precision

    Currently we shift right aperf and mperf variables by FRAC_BITS
    to prevent overflow when we convert them to fix point numbers
    (shift left by FRAC_BITS).

    But this is not necessary, because we actually use delta aperf and mperf
    which are much less than APERF and MPERF values.

    So, use the unmodified APERF and MPERF values in calculation.
    This also adds 8 bits in precision, although the gain is insignificant.

    Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index a998bd8..20b0698 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -584,9 +584,6 @@ static inline void intel_pstate_sample(struct cpudata *cpu)
  rdmsrl(MSR_IA32_MPERF, mperf);
  local_irq_restore(flags);
 
- aperf = aperf >> FRAC_BITS;
- mperf = mperf >> FRAC_BITS;
-
  cpu->last_sample_time = cpu->sample.time;
  cpu->sample.time = ktime_get();
  cpu->sample.aperf = aperf;
-- 
1.7.1