From 1b8a81771a93c454737830e0c7aff57546cdf6ef Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:02 -0400
Subject: [cpufreq] send new set of notification for transition failures

Message-id: <1409235879-1283-89-git-send-email-prarit@redhat.com>
Patchwork-id: 89406
O-Subject: [RHEL7.1 PATCH BZ 1134639 088/185] cpufreq: send new set of notification for transition failures
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit ab1b1c4e8223f9ee66aa93aaf64c36e77cadffac
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon Dec 2 11:04:13 2013 +0530

    cpufreq: send new set of notification for transition failures

    In the current code, if we fail during a frequency transition, we
    simply send the POSTCHANGE notification with the old frequency. This
    isn't enough.

    One of the core users of these notifications is the code responsible
    for keeping loops_per_jiffy aligned with frequency changes. And mostly
    it is written as:

     if ((val == CPUFREQ_PRECHANGE  && freq->old < freq->new) ||
         (val == CPUFREQ_POSTCHANGE && freq->old > freq->new)) {
      update-loops-per-jiffy...
     }

    So, suppose we are changing to a higher frequency and failed during
    transition, then following will happen:
    - CPUFREQ_PRECHANGE notification with freq-new > freq-old
    - CPUFREQ_POSTCHANGE notification with freq-new == freq-old

    The first one will update loops_per_jiffy and second one will do
    nothing. Even if we send the 2nd notification by exchanging values of
    freq-new and old, some users of these notifications might get
    unstable.

    This can be fixed by simply calling cpufreq_notify_post_transition()
    with error code and this routine will take care of sending
    notifications in the correct order.

    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    [rjw: Folded 3 patches into one, rebased unicore2 changes]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index bc3f10f..93739a3 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1723,17 +1723,8 @@ int __cpufreq_driver_target(struct cpufreq_policy *policy,
    pr_err("%s: Failed to change cpu frequency: %d\n",
      __func__, retval);
 
-  if (notify) {
-   /*
-    * Notify with old freq in case we failed to change
-    * frequency
-    */
-   if (retval)
-    freqs.new = freqs.old;
-
-   cpufreq_notify_transition(policy, &freqs,
-     CPUFREQ_POSTCHANGE);
-  }
+  if (notify)
+   cpufreq_notify_post_transition(policy, &freqs, retval);
  }
 
 out:
diff --git a/drivers/cpufreq/pcc-cpufreq.c b/drivers/cpufreq/pcc-cpufreq.c
index 1a306ce..5034c29 100644
--- a/drivers/cpufreq/pcc-cpufreq.c
+++ b/drivers/cpufreq/pcc-cpufreq.c
@@ -213,6 +213,7 @@ static int pcc_cpufreq_target(struct cpufreq_policy *policy,
   cpu, target_freq,
   (pcch_virt_addr + pcc_cpu_data->input_offset));
 
+ freqs.old = policy->cur;
  freqs.new = target_freq;
  cpufreq_notify_transition(policy, &freqs, CPUFREQ_PRECHANGE);
 
@@ -228,25 +229,20 @@ static int pcc_cpufreq_target(struct cpufreq_policy *policy,
  memset_io((pcch_virt_addr + pcc_cpu_data->input_offset), 0, BUF_SZ);
 
  status = ioread16(&pcch_hdr->status);
+ iowrite16(0, &pcch_hdr->status);
+
+ cpufreq_notify_post_transition(policy, &freqs, status != CMD_COMPLETE);
+ spin_unlock(&pcc_lock);
+
  if (status != CMD_COMPLETE) {
   pr_debug("target: FAILED for cpu %d, with status: 0x%x\n",
    cpu, status);
-  goto cmd_incomplete;
+  return -EINVAL;
  }
- iowrite16(0, &pcch_hdr->status);
 
- cpufreq_notify_transition(policy, &freqs, CPUFREQ_POSTCHANGE);
  pr_debug("target: was SUCCESSFUL for cpu %d\n", cpu);
- spin_unlock(&pcc_lock);
 
  return 0;
-
-cmd_incomplete:
- freqs.new = freqs.old;
- cpufreq_notify_transition(policy, &freqs, CPUFREQ_POSTCHANGE);
- iowrite16(0, &pcch_hdr->status);
- spin_unlock(&pcc_lock);
- return -EINVAL;
 }
 
 static int pcc_get_offset(int cpu)
diff --git a/drivers/cpufreq/powernow-k8.c b/drivers/cpufreq/powernow-k8.c
index c771db9..0c85050 100644
--- a/drivers/cpufreq/powernow-k8.c
+++ b/drivers/cpufreq/powernow-k8.c
@@ -964,14 +964,9 @@ static int transition_frequency_fidvid(struct powernow_k8_data *data,
  cpufreq_cpu_put(policy);
 
  cpufreq_notify_transition(policy, &freqs, CPUFREQ_PRECHANGE);
-
  res = transition_fid_vid(data, fid, vid);
- if (res)
-  freqs.new = freqs.old;
- else
-  freqs.new = find_khz_freq_from_fid(data->currfid);
+ cpufreq_notify_post_transition(policy, &freqs, res);
 
- cpufreq_notify_transition(policy, &freqs, CPUFREQ_POSTCHANGE);
  return res;
 }
 
-- 
1.7.1