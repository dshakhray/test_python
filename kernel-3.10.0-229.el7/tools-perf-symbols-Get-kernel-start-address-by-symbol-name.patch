From f8ba3cbeb126a3efed7643c1b74a4879de1b5af6 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:09:12 -0400
Subject: [tools] perf/symbols: Get kernel start address by symbol name

Message-id: <1410181752-25631-308-git-send-email-jolsa@redhat.com>
Patchwork-id: 91943
O-Subject: [PATCH RHEL7.1 BZ1134356 307/307] perf symbols: Get kernel start address by symbol name
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit a93f0e551af9e194db38bfe16001e17a3a1d189a
Author: Simon Que <sque@chromium.org>
Date: Mon Jun 16 11:32:09 2014 -0700

description
===========
The function machine__get_kernel_start_addr() was taking the first symbol
of kallsyms as the start address. This is incorrect in certain cases
where the first symbol is something at 0, while the actual kernel
functions begin at a later point (e.g. 0x80200000).

This patch fixes machine__get_kernel_start_addr() to search for the
symbol "_text" or "_stext", which marks the beginning of kernel mapping.
This was already being done in machine__create_kernel_maps(). Thus, this
patch is just a refactor, to move that code into
machine__get_kernel_start_addr().
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index 0e5fea9..c73e1fc 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -496,18 +496,6 @@ struct process_args {
  u64 start;
 };
 
-static int symbol__in_kernel(void *arg, const char *name,
-        char type __maybe_unused, u64 start)
-{
- struct process_args *args = arg;
-
- if (strchr(name, '['))
-  return 0;
-
- args->start = start;
- return 1;
-}
-
 static void machine__get_kallsyms_filename(struct machine *machine, char *buf,
         size_t bufsz)
 {
@@ -517,27 +505,41 @@ static void machine__get_kallsyms_filename(struct machine *machine, char *buf,
   scnprintf(buf, bufsz, "%s/proc/kallsyms", machine->root_dir);
 }
 
-/* Figure out the start address of kernel map from /proc/kallsyms */
-static u64 machine__get_kernel_start_addr(struct machine *machine)
+const char *ref_reloc_sym_names[] = {"_text", "_stext", NULL};
+
+/* Figure out the start address of kernel map from /proc/kallsyms.
+ * Returns the name of the start symbol in *symbol_name. Pass in NULL as
+ * symbol_name if it's not that important.
+ */
+static u64 machine__get_kernel_start_addr(struct machine *machine,
+       const char **symbol_name)
 {
  char filename[PATH_MAX];
- struct process_args args;
+ int i;
+ const char *name;
+ u64 addr = 0;
 
  machine__get_kallsyms_filename(machine, filename, PATH_MAX);
 
  if (symbol__restricted_filename(filename, "/proc/kallsyms"))
   return 0;
 
- if (kallsyms__parse(filename, &args, symbol__in_kernel) <= 0)
-  return 0;
+ for (i = 0; (name = ref_reloc_sym_names[i]) != NULL; i++) {
+  addr = kallsyms__get_function_start(filename, name);
+  if (addr)
+   break;
+ }
+
+ if (symbol_name)
+  *symbol_name = name;
 
- return args.start;
+ return addr;
 }
 
 int __machine__create_kernel_maps(struct machine *machine, struct dso *kernel)
 {
  enum map_type type;
- u64 start = machine__get_kernel_start_addr(machine);
+ u64 start = machine__get_kernel_start_addr(machine, NULL);
 
  for (type = 0; type < MAP__NR_TYPES; ++type) {
   struct kmap *kmap;
@@ -852,23 +854,11 @@ static int machine__create_modules(struct machine *machine)
  return 0;
 }
 
-const char *ref_reloc_sym_names[] = {"_text", "_stext", NULL};
-
 int machine__create_kernel_maps(struct machine *machine)
 {
  struct dso *kernel = machine__get_kernel(machine);
- char filename[PATH_MAX];
  const char *name;
- u64 addr = 0;
- int i;
-
- machine__get_kallsyms_filename(machine, filename, PATH_MAX);
-
- for (i = 0; (name = ref_reloc_sym_names[i]) != NULL; i++) {
-  addr = kallsyms__get_function_start(filename, name);
-  if (addr)
-   break;
- }
+ u64 addr = machine__get_kernel_start_addr(machine, &name);
  if (!addr)
   return -1;
 
-- 
1.7.1