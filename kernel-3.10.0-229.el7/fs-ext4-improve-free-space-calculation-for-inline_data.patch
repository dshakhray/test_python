From cb72b629af6afda4dd1fa351c488d17d3997a7ed Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:12 -0400
Subject: [fs] ext4: improve free space calculation for inline_data

Message-id: <1414058125-4183-39-git-send-email-lczerner@redhat.com>
Patchwork-id: 98140
O-Subject: [RHEL 7.1 PATCH v2 038/171] ext4: improve free space calculation for inline_data
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: boxi liu <boxi10liu@gmail.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit c4932dbe63dae2d23b4f596caa5d286ebfe042cf

 In ext4 feature inline_data,it use the xattr's space to store the
 inline data in inode.When we calculate the inline data as the xattr,we
 add the pad.But in get_max_inline_xattr_value_size() function we count
 the free space without pad.It cause some contents are moved to a block
 even if it can be
 stored in the inode.

 Signed-off-by: liulei <lewis.liulei@huawei.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Reviewed-by: Tao Ma <boyu.mt@taobao.com>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inline.c b/fs/ext4/inline.c
index 33331b4..b8a0746 100644
--- a/fs/ext4/inline.c
+++ b/fs/ext4/inline.c
@@ -72,7 +72,7 @@ static int get_max_inline_xattr_value_size(struct inode *inode,
   entry = (struct ext4_xattr_entry *)
    ((void *)raw_inode + EXT4_I(inode)->i_inline_off);
 
-  free += le32_to_cpu(entry->e_value_size);
+  free += EXT4_XATTR_SIZE(le32_to_cpu(entry->e_value_size));
   goto out;
  }
 
-- 
1.7.1