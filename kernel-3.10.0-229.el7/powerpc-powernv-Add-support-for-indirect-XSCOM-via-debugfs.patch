From 8ff5de5b5a4aaa16fd0140e7998b2d112c0431b3 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:06:52 -0400
Subject: [powerpc] powernv: Add support for indirect XSCOM via debugfs

Message-id: <1410545655-205645-184-git-send-email-dzickus@redhat.com>
Patchwork-id: 94189
O-Subject: [RHEL7 PATCH 183/626] powerpc/powernv: Add support for indirect XSCOM via debugfs
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 80546ac51396bd1d2e37cc78c7bed44c08f90352
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Thu Oct 10 19:19:15 2013 +1100

    powerpc/powernv: Add support for indirect XSCOM via debugfs

    Indirect XSCOM addresses normally have the top bit set (of the 64-bit
    address). This doesn't work via the normal debugfs interface, so we use
    a different encoding, which we need to convert before calling OPAL.

    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/platforms/powernv/opal-xscom.c b/arch/powerpc/platforms/powernv/opal-xscom.c
index 09a90d8..4d99a8f 100644
--- a/arch/powerpc/platforms/powernv/opal-xscom.c
+++ b/arch/powerpc/platforms/powernv/opal-xscom.c
@@ -71,11 +71,33 @@ static int opal_xscom_err_xlate(int64_t rc)
  }
 }
 
+static u64 opal_scom_unmangle(u64 reg)
+{
+ /*
+  * XSCOM indirect addresses have the top bit set. Additionally
+  * the reset of the top 3 nibbles is always 0.
+  *
+  * Because the debugfs interface uses signed offsets and shifts
+  * the address left by 3, we basically cannot use the top 4 bits
+  * of the 64-bit address, and thus cannot use the indirect bit.
+  *
+  * To deal with that, we support the indirect bit being in bit
+  * 4 (IBM notation) instead of bit 0 in this API, we do the
+  * conversion here. To leave room for further xscom address
+  * expansion, we only clear out the top byte
+  *
+  */
+ if (reg & (1ull << 59))
+  reg = (reg & ~(0xffull << 56)) | (1ull << 63);
+ return reg;
+}
+
 static int opal_scom_read(scom_map_t map, u64 reg, u64 *value)
 {
  struct opal_scom_map *m = map;
  int64_t rc;
 
+ reg = opal_scom_unmangle(reg);
  rc = opal_xscom_read(m->chip, m->addr + reg, (uint64_t *)__pa(value));
  return opal_xscom_err_xlate(rc);
 }
@@ -85,6 +107,7 @@ static int opal_scom_write(scom_map_t map, u64 reg, u64 value)
  struct opal_scom_map *m = map;
  int64_t rc;
 
+ reg = opal_scom_unmangle(reg);
  rc = opal_xscom_write(m->chip, m->addr + reg, value);
  return opal_xscom_err_xlate(rc);
 }
-- 
1.7.1