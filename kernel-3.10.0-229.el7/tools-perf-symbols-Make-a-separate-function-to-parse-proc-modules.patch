From 2b9887e7dd4d6705f9a7c2c146c27e41b5e7e366 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:25:28 -0400
Subject: [tools] perf/symbols: Make a separate function to parse /proc/modules

Message-id: <1408462094-14194-160-git-send-email-jolsa@redhat.com>
Patchwork-id: 88135
O-Subject: [PATCH RHEL7.1 BZ1131394 159/325] perf symbols: Make a separate function to parse /proc/modules
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 316d70d6dbde540b275289563cbddd9f0c903fc6
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Tue Oct 8 11:45:48 2013 +0300

description
===========
Make a separate function to parse /proc/modules so that it can be
reused.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index 901397a..6b861ae 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -793,12 +793,22 @@ static int machine__set_modules_path(struct machine *machine)
  return map_groups__set_modules_path_dir(&machine->kmaps, modules_path);
 }
 
-static int machine__create_modules(struct machine *machine)
+static int machine__create_module(void *arg, const char *name, u64 start)
 {
- char *line = NULL;
- size_t n;
- FILE *file;
+ struct machine *machine = arg;
  struct map *map;
+
+ map = machine__new_module(machine, start, name);
+ if (map == NULL)
+  return -1;
+
+ dso__kernel_module_get_build_id(map->dso, machine->root_dir);
+
+ return 0;
+}
+
+static int machine__create_modules(struct machine *machine)
+{
  const char *modules;
  char path[PATH_MAX];
 
@@ -812,56 +822,15 @@ static int machine__create_modules(struct machine *machine)
  if (symbol__restricted_filename(modules, "/proc/modules"))
   return -1;
 
- file = fopen(modules, "r");
- if (file == NULL)
+ if (modules__parse(modules, machine, machine__create_module))
   return -1;
 
- while (!feof(file)) {
-  char name[PATH_MAX];
-  u64 start;
-  char *sep;
-  int line_len;
-
-  line_len = getline(&line, &n, file);
-  if (line_len < 0)
-   break;
-
-  if (!line)
-   goto out_failure;
-
-  line[--line_len] = '\0'; /* \n */
-
-  sep = strrchr(line, 'x');
-  if (sep == NULL)
-   continue;
-
-  hex2u64(sep + 1, &start);
-
-  sep = strchr(line, ' ');
-  if (sep == NULL)
-   continue;
-
-  *sep = '\0';
-
-  snprintf(name, sizeof(name), "[%s]", line);
-  map = machine__new_module(machine, start, name);
-  if (map == NULL)
-   goto out_delete_line;
-  dso__kernel_module_get_build_id(map->dso, machine->root_dir);
- }
+ if (!machine__set_modules_path(machine))
+  return 0;
 
- free(line);
- fclose(file);
+ pr_debug("Problems setting modules path maps, continuing anyway...\n");
 
- if (machine__set_modules_path(machine) < 0) {
-  pr_debug("Problems setting modules path maps, continuing anyway...\n");
- }
  return 0;
-
-out_delete_line:
- free(line);
-out_failure:
- return -1;
 }
 
 int machine__create_kernel_maps(struct machine *machine)
diff --git a/tools/perf/util/symbol.c b/tools/perf/util/symbol.c
index 48c3879..5fd9513 100644
--- a/tools/perf/util/symbol.c
+++ b/tools/perf/util/symbol.c
@@ -500,6 +500,64 @@ out_failure:
  return -1;
 }
 
+int modules__parse(const char *filename, void *arg,
+     int (*process_module)(void *arg, const char *name,
+      u64 start))
+{
+ char *line = NULL;
+ size_t n;
+ FILE *file;
+ int err = 0;
+
+ file = fopen(filename, "r");
+ if (file == NULL)
+  return -1;
+
+ while (1) {
+  char name[PATH_MAX];
+  u64 start;
+  char *sep;
+  ssize_t line_len;
+
+  line_len = getline(&line, &n, file);
+  if (line_len < 0) {
+   if (feof(file))
+    break;
+   err = -1;
+   goto out;
+  }
+
+  if (!line) {
+   err = -1;
+   goto out;
+  }
+
+  line[--line_len] = '\0'; /* \n */
+
+  sep = strrchr(line, 'x');
+  if (sep == NULL)
+   continue;
+
+  hex2u64(sep + 1, &start);
+
+  sep = strchr(line, ' ');
+  if (sep == NULL)
+   continue;
+
+  *sep = '\0';
+
+  scnprintf(name, sizeof(name), "[%s]", line);
+
+  err = process_module(arg, name, start);
+  if (err)
+   break;
+ }
+out:
+ free(line);
+ fclose(file);
+ return err;
+}
+
 struct process_kallsyms_args {
  struct map *map;
  struct dso *dso;
diff --git a/tools/perf/util/symbol.h b/tools/perf/util/symbol.h
index 9b8b213..2d3eb43 100644
--- a/tools/perf/util/symbol.h
+++ b/tools/perf/util/symbol.h
@@ -223,6 +223,9 @@ int sysfs__read_build_id(const char *filename, void *bf, size_t size);
 int kallsyms__parse(const char *filename, void *arg,
       int (*process_symbol)(void *arg, const char *name,
        char type, u64 start));
+int modules__parse(const char *filename, void *arg,
+     int (*process_module)(void *arg, const char *name,
+      u64 start));
 int filename__read_debuglink(const char *filename, char *debuglink,
         size_t size);
 
-- 
1.7.1