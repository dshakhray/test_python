From e74abb370194d2ee4859f0cef3d1d9f198ee0067 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:07:28 -0400
Subject: [pci] Revert: acpi / hotplug / pci: Avoid doing too much for spurious notifies

Message-id: <20140710010727.22146.68951.stgit@gir.stowe>
Patchwork-id: 85628
O-Subject: [RHEL7.1 PATCH 089/105] Revert "ACPI / hotplug / PCI: Avoid doing too much for spurious notifies"
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: ab1225901da2d4cd2dcbae6840e93abbef417064

commit ab1225901da2d4cd2dcbae6840e93abbef417064
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Oct 30 14:40:36 2013 +0200

    Revert "ACPI / hotplug / PCI: Avoid doing too much for spurious notifies"

    Commit 2dc4128 (ACPI / hotplug / PCI: Avoid doing too much for
    spurious notifies) changed the enable_slot() to check return value of
    pci_scan_slot() and if it is zero return early from the function. It
    means that there were no new devices in this particular slot.

    However, if a device appeared deeper in the hierarchy the code now
    ignores it causing things like Thunderbolt chaining fail to recognize
    new devices.

    The problem with Alex Williamson's machine was solved with commit
    a47d8c8 (ACPI / hotplug / PCI: Avoid parent bus rescans on spurious
    device checks) and hence we should be able to restore the original
    functionality that we always rescan on bus check notification.

    On a device check notification we still check what acpiphp_rescan_slot()
    returns and on zero bail out early.

    Fixes: 2dc41281b1d1 (ACPI / hotplug / PCI: Avoid doing too much for spurious notifies)
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index 9d066b8..a9b3a19 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -552,9 +552,8 @@ static void __ref enable_slot(struct acpiphp_slot *slot)
  struct acpiphp_func *func;
  int max, pass;
  LIST_HEAD(add_list);
- int nr_found;
 
- nr_found = acpiphp_rescan_slot(slot);
+ acpiphp_rescan_slot(slot);
  max = acpiphp_max_busnr(bus);
  for (pass = 0; pass < 2; pass++) {
   list_for_each_entry(dev, &bus->devices, bus_list) {
@@ -574,9 +573,6 @@ static void __ref enable_slot(struct acpiphp_slot *slot)
   }
  }
  __pci_bus_assign_resources(bus, &add_list, NULL);
- /* Nothing more to do here if there are no new devices on this bus. */
- if (!nr_found && (slot->flags & SLOT_ENABLED))
-  return;
 
  acpiphp_sanitize_bus(bus);
  acpiphp_set_hpp_values(bus);
-- 
1.7.1