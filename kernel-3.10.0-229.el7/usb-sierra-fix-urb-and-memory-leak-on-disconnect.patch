From f417d0c384b01630bcbee47892687788c6785de9 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:08:16 -0400
Subject: [usb] sierra: fix urb and memory leak on disconnect

Message-id: <1410887463-20674-425-git-send-email-dzickus@redhat.com>
Patchwork-id: 95448
O-Subject: [RHEL7 PATCH 424/591] USB: sierra: fix urb and memory leak on disconnect
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 014333f77c0b71123d6ef7d31a9724e0699c9548
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon May 26 19:22:53 2014 +0200

    USB: sierra: fix urb and memory leak on disconnect

    The delayed-write queue was never emptied on disconnect, something which
    would lead to leaked urbs and transfer buffers if the device is
    disconnected before being runtime resumed due to a write.

    Fixes: e6929a9020ac ("USB: support for autosuspend in sierra while
    online")

    Cc: <stable@vger.kernel.org> # v2.6.32
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/sierra.c b/drivers/usb/serial/sierra.c
index dd9820d..1a42649 100644
--- a/drivers/usb/serial/sierra.c
+++ b/drivers/usb/serial/sierra.c
@@ -759,6 +759,7 @@ static void sierra_close(struct usb_serial_port *port)
  struct usb_serial *serial = port->serial;
  struct sierra_port_private *portdata;
  struct sierra_intf_private *intfdata = port->serial->private;
+ struct urb *urb;
 
  portdata = usb_get_serial_port_data(port);
 
@@ -780,6 +781,18 @@ static void sierra_close(struct usb_serial_port *port)
  portdata->opened = 0;
  spin_unlock_irq(&intfdata->susp_lock);
 
+ for (;;) {
+  urb = usb_get_from_anchor(&portdata->delayed);
+  if (!urb)
+   break;
+  kfree(urb->transfer_buffer);
+  usb_free_urb(urb);
+  usb_autopm_put_interface_async(serial->interface);
+  spin_lock(&portdata->lock);
+  portdata->outstanding_urbs--;
+  spin_unlock(&portdata->lock);
+ }
+
  sierra_stop_rx_urbs(port);
  for (i = 0; i < portdata->num_in_urbs; i++) {
   sierra_release_urb(portdata->in_urbs[i]);
-- 
1.7.1