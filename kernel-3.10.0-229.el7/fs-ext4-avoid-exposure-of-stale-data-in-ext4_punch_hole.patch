From b7b4a5b000ad9b641d98b04578bd3abf26068c63 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:33 -0400
Subject: [fs] ext4: avoid exposure of stale data in ext4_punch_hole()

Message-id: <1414058125-4183-120-git-send-email-lczerner@redhat.com>
Patchwork-id: 98214
O-Subject: [RHEL 7.1 PATCH v2 119/171] ext4: avoid exposure of stale data in ext4_punch_hole()
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Maxim Patlasov <MPatlasov@parallels.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit e251f9bca99c0f219eff9c76034476c2b17d3dba

 While handling punch-hole fallocate, it's useless to truncate page cache
 before removing the range from extent tree (or block map in indirect case)
 because page cache can be re-populated (by read-ahead or read(2) or mmap-ed
 read) immediately after truncating page cache, but before updating extent
 tree (or block map). In that case the user will see stale data even after
 fallocate is completed.

 Until the problem of data corruption resulting from pages backed by
 already freed blocks is fully resolved, the simple thing we can do now
 is to add another truncation of pagecache after punch hole is done.

 Signed-off-by: Maxim Patlasov <mpatlasov@parallels.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Reviewed-by: Jan Kara <jack@suse.cz>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index d0794f6..0866e31 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -3629,6 +3629,12 @@ int ext4_punch_hole(struct inode *inode, loff_t offset, loff_t length)
  up_write(&EXT4_I(inode)->i_data_sem);
  if (IS_SYNC(inode))
   ext4_handle_sync(handle);
+
+ /* Now release the pages again to reduce race window */
+ if (last_block_offset > first_block_offset)
+  truncate_pagecache_range(inode, first_block_offset,
+      last_block_offset);
+
  inode->i_mtime = inode->i_ctime = ext4_current_time(inode);
  ext4_mark_inode_dirty(handle, inode);
 out_stop:
-- 
1.7.1