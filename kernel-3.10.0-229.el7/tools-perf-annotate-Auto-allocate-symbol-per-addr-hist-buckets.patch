From 648f763239ed31f00087115148b1034eb7bc54ae Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:51:00 -0400
Subject: [tools] perf/annotate: Auto allocate symbol per addr hist buckets

Message-id: <1408953210-26343-173-git-send-email-jolsa@redhat.com>
Patchwork-id: 88871
O-Subject: [PATCH RHEL7.1 BZ1133083 172/322] perf annotate: Auto allocate symbol per addr hist buckets
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit b66d8c0caa8f7925ae75fed243b0482a901f21e1
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Wed Dec 18 15:37:41 2013 -0300

description
===========
Instead of open coding it in multiple places in 'report' and 'top'.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index 3a14dbe..b75fc36 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -140,22 +140,11 @@ static int perf_report__add_mem_hist_entry(struct perf_tool *tool,
    goto out;
  }
 
- if (sort__has_sym && he->mem_info->daddr.sym && use_browser > 0) {
-  struct annotation *notes;
-
-  mx = he->mem_info;
-
-  notes = symbol__annotation(mx->daddr.sym);
-  if (notes->src == NULL && symbol__alloc_hist(mx->daddr.sym) < 0)
-   goto out;
-
-  err = symbol__inc_addr_samples(mx->daddr.sym,
-            mx->daddr.map,
-            evsel->idx,
-            mx->daddr.al_addr);
-  if (err)
-   goto out;
- }
+ mx = he->mem_info;
+ err = symbol__inc_addr_samples(mx->daddr.sym, mx->daddr.map,
+           evsel->idx, mx->daddr.al_addr);
+ if (err)
+  goto out;
 
  evsel->hists.stats.total_period += cost;
  hists__inc_nr_events(&evsel->hists, PERF_RECORD_SAMPLE);
@@ -214,35 +203,19 @@ static int perf_report__add_branch_hist_entry(struct perf_tool *tool,
   he = __hists__add_entry(&evsel->hists, al, parent, &bi[i], NULL,
      1, 1, 0);
   if (he) {
-   struct annotation *notes;
    bx = he->branch_info;
-   if (bx->from.sym && use_browser == 1 && sort__has_sym) {
-    notes = symbol__annotation(bx->from.sym);
-    if (!notes->src
-        && symbol__alloc_hist(bx->from.sym) < 0)
-     goto out;
-
-    err = symbol__inc_addr_samples(bx->from.sym,
-              bx->from.map,
-              evsel->idx,
-              bx->from.al_addr);
-    if (err)
-     goto out;
-   }
+   err = symbol__inc_addr_samples(bx->from.sym,
+             bx->from.map, evsel->idx,
+             bx->from.al_addr);
+   if (err)
+    goto out;
+
+   err = symbol__inc_addr_samples(bx->to.sym,
+             bx->to.map, evsel->idx,
+             bx->to.al_addr);
+   if (err)
+    goto out;
 
-   if (bx->to.sym && use_browser == 1 && sort__has_sym) {
-    notes = symbol__annotation(bx->to.sym);
-    if (!notes->src
-        && symbol__alloc_hist(bx->to.sym) < 0)
-     goto out;
-
-    err = symbol__inc_addr_samples(bx->to.sym,
-              bx->to.map,
-              evsel->idx,
-              bx->to.al_addr);
-    if (err)
-     goto out;
-   }
    evsel->hists.stats.total_period += 1;
    hists__inc_nr_events(&evsel->hists, PERF_RECORD_SAMPLE);
   } else
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 03d37a7..73df9c0 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -189,14 +189,6 @@ static void perf_top__record_precise_ip(struct perf_top *top,
  if (pthread_mutex_trylock(&notes->lock))
   return;
 
- if (notes->src == NULL && symbol__alloc_hist(sym) < 0) {
-  pthread_mutex_unlock(&notes->lock);
-  pr_err("Not enough memory for annotating '%s' symbol!\n",
-         sym->name);
-  sleep(1);
-  return;
- }
-
  ip = he->ms.map->map_ip(he->ms.map, ip);
  err = symbol__inc_addr_samples(sym, he->ms.map, counter, ip);
 
@@ -204,6 +196,11 @@ static void perf_top__record_precise_ip(struct perf_top *top,
 
  if (err == -ERANGE && !he->ms.map->erange_warned)
   ui__warn_map_erange(he->ms.map, sym, ip);
+ else if (err == -ENOMEM) {
+  pr_err("Not enough memory for annotating '%s' symbol!\n",
+         sym->name);
+  sleep(1);
+ }
 }
 
 static void perf_top__show_details(struct perf_top *top)
diff --git a/tools/perf/util/annotate.c b/tools/perf/util/annotate.c
index 0fcd81e..93614cd 100644
--- a/tools/perf/util/annotate.c
+++ b/tools/perf/util/annotate.c
@@ -464,17 +464,12 @@ void symbol__annotate_zero_histograms(struct symbol *sym)
  pthread_mutex_unlock(&notes->lock);
 }
 
-int symbol__inc_addr_samples(struct symbol *sym, struct map *map,
-        int evidx, u64 addr)
+static int __symbol__inc_addr_samples(struct symbol *sym, struct map *map,
+          struct annotation *notes, int evidx, u64 addr)
 {
  unsigned offset;
- struct annotation *notes;
  struct sym_hist *h;
 
- notes = symbol__annotation(sym);
- if (notes->src == NULL)
-  return -ENOMEM;
-
  pr_debug3("%s: addr=%#" PRIx64 "\n", __func__, map->unmap_ip(map, addr));
 
  if (addr < sym->start || addr > sym->end)
@@ -491,6 +486,23 @@ int symbol__inc_addr_samples(struct symbol *sym, struct map *map,
  return 0;
 }
 
+int symbol__inc_addr_samples(struct symbol *sym, struct map *map,
+        int evidx, u64 addr)
+{
+ struct annotation *notes;
+
+ if (sym == NULL || use_browser != 1 || !sort__has_sym)
+  return 0;
+
+ notes = symbol__annotation(sym);
+ if (notes->src == NULL) {
+  if (symbol__alloc_hist(sym) < 0)
+   return -ENOMEM;
+ }
+
+ return __symbol__inc_addr_samples(sym, map, notes, evidx, addr);
+}
+
 static void disasm_line__init_ins(struct disasm_line *dl)
 {
  dl->ins = ins__find(dl->name);
-- 
1.7.1