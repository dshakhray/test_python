From 5834ca704f2ef75463e00f56ba4b709da53e20cc Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sat, 19 Jul 2014 04:23:22 -0400
Subject: [pci] Prevent bus conflicts while checking for bridge apertures

Message-id: <20140719042321.19438.48904.stgit@gir.stowe>
Patchwork-id: 85968
O-Subject: [RHEL7.1 PATCH 06/81] PCI: Prevent bus conflicts while checking for bridge apertures
Bugzilla: 1110895
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110895
Upstream Status: d2f54d9b3ee32bc006a7ff25d716b32feba4b522

commit d2f54d9b3ee32bc006a7ff25d716b32feba4b522
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Wed Nov 27 15:31:07 2013 -0700

    PCI: Prevent bus conflicts while checking for bridge apertures

    pci_bridge_check_ranges() determines whether the bridge supports an I/O
    aperture and a prefetchable memory aperture.

    Previously, if the I/O aperture was unsupported, disabled, or configured at
    [io 0x0000-0x0fff], we wrote 0xf0 to PCI_IO_BASE and PCI_IO_LIMIT, which,
    if the bridge supports it, enables the I/O aperture at [io 0xf000-0xffff].
    The enabled aperture may conflict with other devices in the system.

    Similarly, we wrote 0xfff0 to PCI_PREF_MEMORY_BASE and
    PCI_PREF_MEMORY_LIMIT, which enables the prefetchable memory aperture at
    [mem 0xfff00000-0xffffffff], and that may also conflict with other devices.

    All we need to know is whether the base and limit registers are writable,
    so we can use values that leave the apertures disabled, e.g., PCI_IO_BASE =
    0xf0, PCI_IO_LIMIT = 0xe0, PCI_PREF_MEMORY_BASE = 0xfff0,
    PCI_PREF_MEMORY_LIMIT = 0xffe0.

    Writing non-zero values to both the base and limit registers means we
    detect whether either or both are writable, as we did before.

    Reported-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
    Based-on-patch-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/setup-bus.c b/drivers/pci/setup-bus.c
index 219a410..8035029 100644
--- a/drivers/pci/setup-bus.c
+++ b/drivers/pci/setup-bus.c
@@ -665,21 +665,23 @@ static void pci_bridge_check_ranges(struct pci_bus *bus)
 
  pci_read_config_word(bridge, PCI_IO_BASE, &io);
  if (!io) {
-  pci_write_config_word(bridge, PCI_IO_BASE, 0xf0f0);
+  pci_write_config_word(bridge, PCI_IO_BASE, 0xe0f0);
   pci_read_config_word(bridge, PCI_IO_BASE, &io);
   pci_write_config_word(bridge, PCI_IO_BASE, 0x0);
  }
  if (io)
   b_res[0].flags |= IORESOURCE_IO;
+
  /*  DECchip 21050 pass 2 errata: the bridge may miss an address
      disconnect boundary by one PCI data phase.
      Workaround: do not use prefetching on this device. */
  if (bridge->vendor == PCI_VENDOR_ID_DEC && bridge->device == 0x0001)
   return;
+
  pci_read_config_dword(bridge, PCI_PREF_MEMORY_BASE, &pmem);
  if (!pmem) {
   pci_write_config_dword(bridge, PCI_PREF_MEMORY_BASE,
-            0xfff0fff0);
+            0xffe0fff0);
   pci_read_config_dword(bridge, PCI_PREF_MEMORY_BASE, &pmem);
   pci_write_config_dword(bridge, PCI_PREF_MEMORY_BASE, 0x0);
  }
-- 
1.7.1