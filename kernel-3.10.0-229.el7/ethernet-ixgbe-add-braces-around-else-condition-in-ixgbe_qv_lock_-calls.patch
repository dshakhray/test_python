From ed4831a1c42b047055c38c7ae5bbf2f6a6fbd1da Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Wed, 10 Sep 2014 18:28:24 -0400
Subject: [ethernet] ixgbe: add braces around else condition in ixgbe_qv_lock_* calls

Message-id: <1410373750-11341-5-git-send-email-jogreene@redhat.com>
Patchwork-id: 93512
O-Subject: [RHEL7.1 PATCH 04/50] ixgbe: add braces around else condition in ixgbe_qv_lock_* calls
Bugzilla: 1091123
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

BZ: 1091123
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7919168
Tested: In beaker. See BZ for details

This patch adds braces around the ixgbe_qv_lock_* calls which previously only
had braces around the if portion. Kernel style guidelines for this require
parenthesis around all conditions if they are required around one. In addition
the comment while not illegal C syntax makes the code look wrong at a cursory
glance. This patch corrects the style and adds braces so that the full if-else
block is uniform.

Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 78d820e848f6a905cb88492cb717787be1f2b43d)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 drivers/net/ethernet/intel/ixgbe/ixgbe.h

Conflicts:
 drivers/net/ethernet/intel/ixgbe/ixgbe.h
---

diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe.h b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
index d44d2df..89fd3d8 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
@@ -408,9 +408,10 @@ static inline bool ixgbe_qv_lock_napi(struct ixgbe_q_vector *q_vector)
 #ifdef LL_EXTENDED_STATS
   q_vector->tx.ring->stats.yields++;
 #endif
- } else
+ } else {
   /* we don't care if someone yielded */
   q_vector->state = IXGBE_QV_STATE_NAPI;
+ }
  spin_unlock_bh(&q_vector->lock);
  return rc;
 }
@@ -442,9 +443,10 @@ static inline bool ixgbe_qv_lock_poll(struct ixgbe_q_vector *q_vector)
 #ifdef LL_EXTENDED_STATS
   q_vector->rx.ring->stats.yields++;
 #endif
- } else
+ } else {
   /* preserve yield marks */
   q_vector->state |= IXGBE_QV_STATE_POLL;
+ }
  spin_unlock_bh(&q_vector->lock);
  return rc;
 }
-- 
1.7.1