From fd4ed74b32e582e289b3a4f6d3a93bec37e48026 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Thu, 28 Aug 2014 18:58:24 -0400
Subject: [md] dm-crypt: fix access beyond the end of allocated space

Message-id: <1409252304-2902-1-git-send-email-snitzer@redhat.com>
Patchwork-id: 89844
O-Subject: [RHEL7.1 PATCH] dm crypt: fix access beyond the end of allocated space
Bugzilla: 1135066
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>

BZ: 1135066

Upstream linux-dm.git commit d49ec52ff6ddcda178fc2476a109cf1bd1fa19ed
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Thu Aug 28 11:09:31 2014 -0400

    dm crypt: fix access beyond the end of allocated space

    The DM crypt target accesses memory beyond allocated space resulting in
    a crash on 32 bit x86 systems.

    This bug is very old (it dates back to 2.6.25 commit 3a7f6c990ad04 "dm
    crypt: use async crypto").  However, this bug was masked by the fact
    that kmalloc rounds the size up to the next power of two.  This bug
    wasn't exposed until 3.17-rc1 commit 298a9fa08a ("dm crypt: use per-bio
    data").  By switching to using per-bio data there was no longer any
    padding beyond the end of a dm-crypt allocated memory block.

    To minimize allocation overhead dm-crypt puts several structures into one
    block allocated with kmalloc.  The block holds struct ablkcipher_request,
    cipher-specific scratch pad (crypto_ablkcipher_reqsize(any_tfm(cc))),
    struct dm_crypt_request and an initialization vector.

    The variable dmreq_start is set to offset of struct dm_crypt_request
    within this memory block.  dm-crypt allocates the block with this size:
    cc->dmreq_start + sizeof(struct dm_crypt_request) + cc->iv_size.

    When accessing the initialization vector, dm-crypt uses the function
    iv_of_dmreq, which performs this calculation: ALIGN((unsigned long)(dmreq
    + 1), crypto_ablkcipher_alignmask(any_tfm(cc)) + 1).

    dm-crypt allocated "cc->iv_size" bytes beyond the end of dm_crypt_request
    structure.  However, when dm-crypt accesses the initialization vector, it
    takes a pointer to the end of dm_crypt_request, aligns it, and then uses
    it as the initialization vector.  If the end of dm_crypt_request is not
    aligned on a crypto_ablkcipher_alignmask(any_tfm(cc)) boundary the
    alignment causes the initialization vector to point beyond the allocated
    space.

    Fix this bug by calculating the variable iv_size_padding and adding it
    to the allocated size.

    Also correct the alignment of dm_crypt_request.  struct dm_crypt_request
    is specific to dm-crypt (it isn't used by the crypto subsystem at all),
    so it is aligned on __alignof__(struct dm_crypt_request).

    Also align per_bio_data_size on ARCH_KMALLOC_MINALIGN, so that it is
    aligned as if the block was allocated with kmalloc.

    Reported-by: Krzysztof Kolasa <kkolasa@winsoft.pl>
    Tested-by: Milan Broz <gmazyland@gmail.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-crypt.c b/drivers/md/dm-crypt.c
index 42cf32d..0bdd144 100644
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@ -1701,6 +1701,7 @@ static int crypt_ctr(struct dm_target *ti, unsigned int argc, char **argv)
  unsigned int key_size, opt_params;
  unsigned long long tmpll;
  int ret;
+ size_t iv_size_padding;
  struct dm_arg_set as;
  const char *opt_string;
  char dummy;
@@ -1737,20 +1738,32 @@ static int crypt_ctr(struct dm_target *ti, unsigned int argc, char **argv)
 
  cc->dmreq_start = sizeof(struct ablkcipher_request);
  cc->dmreq_start += crypto_ablkcipher_reqsize(any_tfm(cc));
- cc->dmreq_start = ALIGN(cc->dmreq_start, crypto_tfm_ctx_alignment());
- cc->dmreq_start += crypto_ablkcipher_alignmask(any_tfm(cc)) &
-      ~(crypto_tfm_ctx_alignment() - 1);
+ cc->dmreq_start = ALIGN(cc->dmreq_start, __alignof__(struct dm_crypt_request));
+
+ if (crypto_ablkcipher_alignmask(any_tfm(cc)) < CRYPTO_MINALIGN) {
+  /* Allocate the padding exactly */
+  iv_size_padding = -(cc->dmreq_start + sizeof(struct dm_crypt_request))
+    & crypto_ablkcipher_alignmask(any_tfm(cc));
+ } else {
+  /*
+   * If the cipher requires greater alignment than kmalloc
+   * alignment, we don't know the exact position of the
+   * initialization vector. We must assume worst case.
+   */
+  iv_size_padding = crypto_ablkcipher_alignmask(any_tfm(cc));
+ }
 
  cc->req_pool = mempool_create_kmalloc_pool(MIN_IOS, cc->dmreq_start +
-   sizeof(struct dm_crypt_request) + cc->iv_size);
+   sizeof(struct dm_crypt_request) + iv_size_padding + cc->iv_size);
  if (!cc->req_pool) {
   ti->error = "Cannot allocate crypt request mempool";
   goto bad;
  }
 
  cc->per_bio_data_size = ti->per_bio_data_size =
-    sizeof(struct dm_crypt_io) + cc->dmreq_start +
-    sizeof(struct dm_crypt_request) + cc->iv_size;
+  ALIGN(sizeof(struct dm_crypt_io) + cc->dmreq_start +
+        sizeof(struct dm_crypt_request) + iv_size_padding + cc->iv_size,
+        ARCH_KMALLOC_MINALIGN);
 
  cc->page_pool = mempool_create_page_pool(MIN_POOL_PAGES, 0);
  if (!cc->page_pool) {
-- 
1.7.1