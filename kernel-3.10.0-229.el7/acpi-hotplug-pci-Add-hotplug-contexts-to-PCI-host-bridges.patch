From cb5e6f8ba648fdb02bce6013b6e0fae6831b7843 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 12:29:33 -0400
Subject: [acpi] hotplug/pci: Add hotplug contexts to PCI host bridges

Message-id: <1411129776-21656-59-git-send-email-prarit@redhat.com>
Patchwork-id: 96381
O-Subject: [RHEL7.1 PATCH BZ 1141846 58/61] ACPI / hotplug / PCI: Add hotplug contexts to PCI host bridges
Bugzilla: 1141846
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit 882d18a702c66404fcb62b84748f719f9b47441c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Jun 10 22:46:35 2014 +0200

    ACPI / hotplug / PCI: Add hotplug contexts to PCI host bridges

    After relatively recent changes in the ACPI-based PCI hotplug
    (ACPIPHP) code, the acpiphp_check_host_bridge() executed for PCI
    host bridges via acpi_pci_root_scan_dependent() doesn't do anything
    useful, because those bridges do not have hotplug contexts.  That
    happens by mistake, so fix it by making acpiphp_enumerate_slots()
    add hotplug contexts to PCI host bridges too and modify
    acpiphp_remove_slots() to drop those contexts for host bridges
    as appropriate.

    Link: https://bugzilla.kernel.org/show_bug.cgi?id=76901
    Fixes: 2d8b1d566a5f (ACPI / hotplug / PCI: Get rid of check_sub_bridges())
    Reported-and-tested-by: Gavin Guo <gavin.guo@canonical.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Cc: 3.15+ <stable@vger.kernel.org> # 3.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Myron Stowe <mstowe@redhat.com>
Cc: Andy Gospodarek <agospoda@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp.h b/drivers/pci/hotplug/acpiphp.h
index 2b85924..b0e61bf 100644
--- a/drivers/pci/hotplug/acpiphp.h
+++ b/drivers/pci/hotplug/acpiphp.h
@@ -142,6 +142,16 @@ static inline acpi_handle func_to_handle(struct acpiphp_func *func)
  return func_to_acpi_device(func)->handle;
 }
 
+struct acpiphp_root_context {
+ struct acpi_hotplug_context hp;
+ struct acpiphp_bridge *root_bridge;
+};
+
+static inline struct acpiphp_root_context *to_acpiphp_root_context(struct acpi_hotplug_context *hp)
+{
+ return container_of(hp, struct acpiphp_root_context, hp);
+}
+
 /*
  * struct acpiphp_attention_info - device specific attention registration
  *
diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index bccc27e..af53580 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -374,17 +374,13 @@ static acpi_status acpiphp_add_context(acpi_handle handle, u32 lvl, void *data,
 
 static struct acpiphp_bridge *acpiphp_dev_to_bridge(struct acpi_device *adev)
 {
- struct acpiphp_context *context;
  struct acpiphp_bridge *bridge = NULL;
 
  acpi_lock_hp_context();
- context = acpiphp_get_context(adev);
- if (context) {
-  bridge = context->bridge;
+ if (adev->hp) {
+  bridge = to_acpiphp_root_context(adev->hp)->root_bridge;
   if (bridge)
    get_bridge(bridge);
-
-  acpiphp_put_context(context);
  }
  acpi_unlock_hp_context();
  return bridge;
@@ -883,7 +879,17 @@ void acpiphp_enumerate_slots(struct pci_bus *bus)
   */
  get_device(&bus->dev);
 
- if (!pci_is_root_bus(bridge->pci_bus)) {
+ acpi_lock_hp_context();
+ if (pci_is_root_bus(bridge->pci_bus)) {
+  struct acpiphp_root_context *root_context;
+
+  root_context = kzalloc(sizeof(*root_context), GFP_KERNEL);
+  if (!root_context)
+   goto err;
+
+  root_context->root_bridge = bridge;
+  acpi_set_hp_context(adev, &root_context->hp, NULL, NULL, NULL);
+ } else {
   struct acpiphp_context *context;
 
   /*
@@ -892,21 +898,16 @@ void acpiphp_enumerate_slots(struct pci_bus *bus)
    * parent is going to be handled by pciehp, in which case this
    * bridge is not interesting to us either.
    */
-  acpi_lock_hp_context();
   context = acpiphp_get_context(adev);
-  if (!context) {
-   acpi_unlock_hp_context();
-   put_device(&bus->dev);
-   pci_dev_put(bridge->pci_dev);
-   kfree(bridge);
-   return;
-  }
+  if (!context)
+   goto err;
+
   bridge->context = context;
   context->bridge = bridge;
   /* Get a reference to the parent bridge. */
   get_bridge(context->func.parent);
-  acpi_unlock_hp_context();
  }
+ acpi_unlock_hp_context();
 
  /* Must be added to the list prior to calling acpiphp_add_context(). */
  mutex_lock(&bridge_mutex);
@@ -921,6 +922,30 @@ void acpiphp_enumerate_slots(struct pci_bus *bus)
   cleanup_bridge(bridge);
   put_bridge(bridge);
  }
+ return;
+
+ err:
+ acpi_unlock_hp_context();
+ put_device(&bus->dev);
+ pci_dev_put(bridge->pci_dev);
+ kfree(bridge);
+}
+
+void acpiphp_drop_bridge(struct acpiphp_bridge *bridge)
+{
+ if (pci_is_root_bus(bridge->pci_bus)) {
+  struct acpiphp_root_context *root_context;
+  struct acpi_device *adev;
+
+  acpi_lock_hp_context();
+  adev = ACPI_COMPANION(bridge->pci_bus->bridge);
+  root_context = to_acpiphp_root_context(adev->hp);
+  adev->hp = NULL;
+  acpi_unlock_hp_context();
+  kfree(root_context);
+ }
+ cleanup_bridge(bridge);
+ put_bridge(bridge);
 }
 
 /**
@@ -938,8 +963,7 @@ void acpiphp_remove_slots(struct pci_bus *bus)
  list_for_each_entry(bridge, &bridge_list, list)
   if (bridge->pci_bus == bus) {
    mutex_unlock(&bridge_mutex);
-   cleanup_bridge(bridge);
-   put_bridge(bridge);
+   acpiphp_drop_bridge(bridge);
    return;
   }
 
-- 
1.7.1