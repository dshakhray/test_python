From 0258e8237cd669c2bac4c1b70dc2ecfbbac156cd Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:26 -0400
Subject: [fs] ext4: Add new flag(FALLOC_FL_COLLAPSE_RANGE) for fallocate

Message-id: <1414059176-6044-3-git-send-email-lczerner@redhat.com>
Patchwork-id: 98279
O-Subject: [RHEL 7.1 PATCH 02/32] fs: Add new flag(FALLOC_FL_COLLAPSE_RANGE) for fallocate
Bugzilla: 1150171

From: Namjae Jeon <namjae.jeon@samsung.com>

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit 00f5e61998dd17f5375d9dfc01331f104b83f841

 This patch is in response of the following post:
 http://lwn.net/Articles/556136/
 "ext4: introduce two new ioctls"

 Dave chinner suggested that truncate_block_range
 (which was one of the ioctls name) should be a fallocate operation
 and not any fs specific ioctl, hence we add this functionality to new flags of fallocate.

 This new functionality of collapsing range could be used by media editing tools
 which does non linear editing to quickly purge and edit parts of a media file.
 This will immensely improve the performance of these operations.
 The limitation of fs block size aligned offsets can be easily handled
 by media codecs which are encapsulated in a conatiner as they have to
 just change the offset to next keyframe value to match the proper alignment.

 Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
 Signed-off-by: Ashish Sangwan <a.sangwan@samsung.com>
 Reviewed-by: Dave Chinner <dchinner@redhat.com>
 Signed-off-by: Dave Chinner <david@fromorbit.com>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/open.c b/fs/open.c
index a3504a1..05cad6d 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -231,7 +231,8 @@ int do_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
   return -EINVAL;
 
  /* Return error if mode is not supported */
- if (mode & ~(FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE))
+ if (mode & ~(FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE |
+       FALLOC_FL_COLLAPSE_RANGE))
   return -EOPNOTSUPP;
 
  /* Punch hole must have keep size set */
@@ -239,11 +240,20 @@ int do_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
      !(mode & FALLOC_FL_KEEP_SIZE))
   return -EOPNOTSUPP;
 
+ /* Collapse range should only be used exclusively. */
+ if ((mode & FALLOC_FL_COLLAPSE_RANGE) &&
+     (mode & ~FALLOC_FL_COLLAPSE_RANGE))
+  return -EINVAL;
+
  if (!(file->f_mode & FMODE_WRITE))
   return -EBADF;
 
- /* It's not possible punch hole on append only file */
- if (mode & FALLOC_FL_PUNCH_HOLE && IS_APPEND(inode))
+ /*
+  * It's not possible to punch hole or perform collapse range
+  * on append only file
+  */
+ if (mode & (FALLOC_FL_PUNCH_HOLE | FALLOC_FL_COLLAPSE_RANGE)
+     && IS_APPEND(inode))
   return -EPERM;
 
  if (IS_IMMUTABLE(inode))
@@ -271,6 +281,14 @@ int do_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
  if (((offset + len) > inode->i_sb->s_maxbytes) || ((offset + len) < 0))
   return -EFBIG;
 
+ /*
+  * There is no need to overlap collapse range with EOF, in which case
+  * it is effectively a truncate operation
+  */
+ if ((mode & FALLOC_FL_COLLAPSE_RANGE) &&
+     (offset + len >= i_size_read(inode)))
+  return -EINVAL;
+
  if (!file->f_op->fallocate)
   return -EOPNOTSUPP;
 
diff --git a/include/uapi/linux/falloc.h b/include/uapi/linux/falloc.h
index 990c4cc..5ff562d 100644
--- a/include/uapi/linux/falloc.h
+++ b/include/uapi/linux/falloc.h
@@ -5,5 +5,26 @@
 #define FALLOC_FL_PUNCH_HOLE 0x02 /* de-allocates range */
 #define FALLOC_FL_NO_HIDE_STALE 0x04 /* reserved codepoint */
 
+/*
+ * FALLOC_FL_COLLAPSE_RANGE is used to remove a range of a file
+ * without leaving a hole in the file. The contents of the file beyond
+ * the range being removed is appended to the start offset of the range
+ * being removed (i.e. the hole that was punched is "collapsed"),
+ * resulting in a file layout that looks like the range that was
+ * removed never existed. As such collapsing a range of a file changes
+ * the size of the file, reducing it by the same length of the range
+ * that has been removed by the operation.
+ *
+ * Different filesystems may implement different limitations on the
+ * granularity of the operation. Most will limit operations to
+ * filesystem block size boundaries, but this boundary may be larger or
+ * smaller depending on the filesystem and/or the configuration of the
+ * filesystem or file.
+ *
+ * Attempting to collapse a range that crosses the end of the file is
+ * considered an illegal operation - just use ftruncate(2) if you need
+ * to collapse a range that crosses EOF.
+ */
+#define FALLOC_FL_COLLAPSE_RANGE 0x08
 
 #endif /* _UAPI_FALLOC_H_ */
-- 
1.7.1