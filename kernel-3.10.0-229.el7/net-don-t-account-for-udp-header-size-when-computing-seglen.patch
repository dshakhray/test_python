From 008dc036911b9f74ca18dcc6bde156c0a4bc6b98 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Sat, 14 Jun 2014 22:58:16 -0400
Subject: [net] don't account for udp header size when computing seglen

Message-id: <1402786701-27071-2-git-send-email-fwestpha@redhat.com>
Patchwork-id: 83971
O-Subject: [PATCH 1/6] [RHEL7.1 net] net: core: don't account for udp header size when computing seglen
Bugzilla: 1109214
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>

BZ: 1109214

commit 6d39d589bb76ee8a1c6cde6822006ae0053decff
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Apr 9 10:28:50 2014 +0200

    net: core: don't account for udp header size when computing seglen

    In case of tcp, gso_size contains the tcpmss.

    For UFO (udp fragmentation offloading) skbs, gso_size is the fragment
    payload size, i.e. we must not account for udp header size.

    Otherwise, when using virtio drivers, a to-be-forwarded UFO GSO packet
    will be needlessly fragmented in the forward path, because we think its
    individual segments are too large for the outgoing link.

    Fixes: fe6cc55f3a9a053 ("net: ip, ipv6: handle gso skbs in forwarding path")
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Reported-by: Tobias Brunner <tobias@strongswan.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Florian Westphal <fwestpha@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 011d9f4..7f65ea9 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -3664,12 +3664,14 @@ EXPORT_SYMBOL_GPL(skb_scrub_packet);
 unsigned int skb_gso_transport_seglen(const struct sk_buff *skb)
 {
  const struct skb_shared_info *shinfo = skb_shinfo(skb);
- unsigned int hdr_len;
 
  if (likely(shinfo->gso_type & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6)))
-  hdr_len = tcp_hdrlen(skb);
- else
-  hdr_len = sizeof(struct udphdr);
- return hdr_len + shinfo->gso_size;
+  return tcp_hdrlen(skb) + shinfo->gso_size;
+
+ /* UFO sets gso_size to the size of the fragmentation
+  * payload, i.e. the size of the L4 (UDP) header is already
+  * accounted for.
+  */
+ return shinfo->gso_size;
 }
 EXPORT_SYMBOL_GPL(skb_gso_transport_seglen);
-- 
1.7.1