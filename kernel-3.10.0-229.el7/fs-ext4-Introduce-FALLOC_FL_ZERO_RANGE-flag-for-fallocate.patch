From ec5ee99e74a3b54440bda6b54e9b61d8bea602e4 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:29 -0400
Subject: [fs] ext4: Introduce FALLOC_FL_ZERO_RANGE flag for fallocate

Message-id: <1414059176-6044-6-git-send-email-lczerner@redhat.com>
Patchwork-id: 98281
O-Subject: [RHEL 7.1 PATCH 05/32] fs: Introduce FALLOC_FL_ZERO_RANGE flag for fallocate
Bugzilla: 1150171

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit 409332b65d3ed8cfa7a8030f1e9d52f372219642

 Introduce new FALLOC_FL_ZERO_RANGE flag for fallocate. This has the same
 functionality as xfs ioctl XFS_IOC_ZERO_RANGE.

 It can be used to convert a range of file to zeros preferably without
 issuing data IO. Blocks should be preallocated for the regions that span
 holes in the file, and the entire range is preferable converted to
 unwritten extents - even though file system may choose to zero out the
 extent or do whatever which will result in reading zeros from the range
 while the range remains allocated for the file.

 This can be also used to preallocate blocks past EOF in the same way as
 with fallocate. Flag FALLOC_FL_KEEP_SIZE which should cause the inode
 size to remain the same.

 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
 Reviewed-by: Dave Chinner <dchinner@redhat.com>
 Signed-off-by: Dave Chinner <david@fromorbit.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/open.c b/fs/open.c
index 05cad6d..1ef868e 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -232,7 +232,12 @@ int do_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
 
  /* Return error if mode is not supported */
  if (mode & ~(FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE |
-       FALLOC_FL_COLLAPSE_RANGE))
+       FALLOC_FL_COLLAPSE_RANGE | FALLOC_FL_ZERO_RANGE))
+  return -EOPNOTSUPP;
+
+ /* Punch hole and zero range are mutually exclusive */
+ if ((mode & (FALLOC_FL_PUNCH_HOLE | FALLOC_FL_ZERO_RANGE)) ==
+     (FALLOC_FL_PUNCH_HOLE | FALLOC_FL_ZERO_RANGE))
   return -EOPNOTSUPP;
 
  /* Punch hole must have keep size set */
diff --git a/include/uapi/linux/falloc.h b/include/uapi/linux/falloc.h
index 5ff562d..d1197ae 100644
--- a/include/uapi/linux/falloc.h
+++ b/include/uapi/linux/falloc.h
@@ -27,4 +27,18 @@
  */
 #define FALLOC_FL_COLLAPSE_RANGE 0x08
 
+/*
+ * FALLOC_FL_ZERO_RANGE is used to convert a range of file to zeros preferably
+ * without issuing data IO. Blocks should be preallocated for the regions that
+ * span holes in the file, and the entire range is preferable converted to
+ * unwritten extents - even though file system may choose to zero out the
+ * extent or do whatever which will result in reading zeros from the range
+ * while the range remains allocated for the file.
+ *
+ * This can be also used to preallocate blocks past EOF in the same way as
+ * with fallocate. Flag FALLOC_FL_KEEP_SIZE should cause the inode
+ * size to remain the same.
+ */
+#define FALLOC_FL_ZERO_RANGE  0x10
+
 #endif /* _UAPI_FALLOC_H_ */
-- 
1.7.1