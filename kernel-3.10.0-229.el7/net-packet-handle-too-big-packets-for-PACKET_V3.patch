From a5b2eecaafa1a468b005b0ff114b72a6ef281119 Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Mon, 13 Oct 2014 19:35:15 -0400
Subject: [net] packet: handle too big packets for PACKET_V3

Message-id: <38310e1b3eb466dcd8fe0b3c4c103f42d085c08f.1413228906.git.hannes@redhat.com>
Patchwork-id: 97518
O-Subject: [PHEL7.1 net PATCH] packet: handle too big packets for PACKET_V3
Bugzilla: 1152248
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Jesper Brouer <jbrouer@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1152248
Upstream Status: dc808110bb62b64a448696ecac3938902c92e1ab
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8096280

Tested with hacked netsniff-ng with tp_block_size forced to 4096 bytes.

Upstream Commit:
commit dc808110bb62b64a448696ecac3938902c92e1ab
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 15 09:16:04 2014 -0700

    packet: handle too big packets for PACKET_V3

    af_packet can currently overwrite kernel memory by out of bound
    accesses, because it assumed a [new] block can always hold one frame.

    This is not generally the case, even if most existing tools do it right.

    This patch clamps too long frames as API permits, and issue a one time
    error on syslog.

    [  394.357639] tpacket_rcv: packet too big, clamped from 5042 to 3966. macoff=82

    In this example, packet header tp_snaplen was set to 3966,
    and tp_len was set to 5042 (skb->len)

    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Fixes: f6fb8f100b80 ("af-packet: TPACKET_V3 flexible buffer implementation.")
    Acked-by: Daniel Borkmann <dborkman@redhat.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index 77c5d16..d8f1603 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -565,6 +565,7 @@ static void init_prb_bdqc(struct packet_sock *po,
  p1->tov_in_jiffies = msecs_to_jiffies(p1->retire_blk_tov);
  p1->blk_sizeof_priv = req_u->req3.tp_sizeof_priv;
 
+ p1->max_frame_len = p1->kblk_size - BLK_PLUS_PRIV(p1->blk_sizeof_priv);
  prb_init_ft_ops(p1, req_u);
  prb_setup_retire_blk_timer(po, tx_ring);
  prb_open_block(p1, pbd);
@@ -1855,6 +1856,18 @@ static int tpacket_rcv(struct sk_buff *skb, struct net_device *dev,
    if ((int)snaplen < 0)
     snaplen = 0;
   }
+ } else if (unlikely(macoff + snaplen >
+       GET_PBDQC_FROM_RB(&po->rx_ring)->max_frame_len)) {
+  u32 nval;
+
+  nval = GET_PBDQC_FROM_RB(&po->rx_ring)->max_frame_len - macoff;
+  pr_err_once("tpacket_rcv: packet too big, clamped from %u to %u. macoff=%u\n",
+       snaplen, nval, macoff);
+  snaplen = nval;
+  if (unlikely((int)snaplen < 0)) {
+   snaplen = 0;
+   macoff = GET_PBDQC_FROM_RB(&po->rx_ring)->max_frame_len;
+  }
  }
  spin_lock(&sk->sk_receive_queue.lock);
  h.raw = packet_current_rx_frame(po, skb,
@@ -3716,6 +3729,10 @@ static int packet_set_ring(struct sock *sk, union tpacket_req_u *req_u,
    goto out;
   if (unlikely(req->tp_block_size & (PAGE_SIZE - 1)))
    goto out;
+  if (po->tp_version >= TPACKET_V3 &&
+      (int)(req->tp_block_size -
+     BLK_PLUS_PRIV(req_u->req3.tp_sizeof_priv)) <= 0)
+   goto out;
   if (unlikely(req->tp_frame_size < po->tp_hdrlen +
      po->tp_reserve))
    goto out;
diff --git a/net/packet/internal.h b/net/packet/internal.h
index aaeee2c..8d3add8 100644
--- a/net/packet/internal.h
+++ b/net/packet/internal.h
@@ -29,6 +29,7 @@ struct tpacket_kbdq_core {
  char  *pkblk_start;
  char  *pkblk_end;
  int  kblk_size;
+ unsigned int max_frame_len;
  unsigned int knum_blocks;
  uint64_t knxt_seq_num;
  char  *prev;
-- 
1.7.1