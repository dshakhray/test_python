From 7fb2e61f61950d61dea34ba538fb160080ccacbc Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Wed, 3 Sep 2014 15:15:52 -0400
Subject: [ethernet] bna: Convert uses of __constant_<foo> to <foo>

Message-id: <1409757361-26781-5-git-send-email-ivecera@redhat.com>
Patchwork-id: 91168
O-Subject: [RHEL7.1 PATCH 04/13] brocade: Convert uses of __constant_<foo> to <foo>
Bugzilla: 1136912
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

BZ: #1136912

Upstream commit(s):
commit b779d0afccffaceda3169b3810faa23444f13b9e
Author: Joe Perches <joe@perches.com>
Date:   Wed Mar 12 10:22:30 2014 -0700

    brocade: Convert uses of __constant_<foo> to <foo>

    The use of __constant_<foo> has been unnecessary for quite awhile now.

    Make these uses consistent with the rest of the kernel.

    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/brocade/bna/bnad.c b/drivers/net/ethernet/brocade/bna/bnad.c
index aeec9cc..cb76253 100644
--- a/drivers/net/ethernet/brocade/bna/bnad.c
+++ b/drivers/net/ethernet/brocade/bna/bnad.c
@@ -2845,13 +2845,11 @@ bnad_txq_wi_prepare(struct bnad *bnad, struct bna_tcb *tcb,
   }
   if (unlikely((gso_size + skb_transport_offset(skb) +
          tcp_hdrlen(skb)) >= skb->len)) {
-   txqent->hdr.wi.opcode =
-    __constant_htons(BNA_TXQ_WI_SEND);
+   txqent->hdr.wi.opcode = htons(BNA_TXQ_WI_SEND);
    txqent->hdr.wi.lso_mss = 0;
    BNAD_UPDATE_CTR(bnad, tx_skb_tso_too_short);
   } else {
-   txqent->hdr.wi.opcode =
-    __constant_htons(BNA_TXQ_WI_SEND_LSO);
+   txqent->hdr.wi.opcode = htons(BNA_TXQ_WI_SEND_LSO);
    txqent->hdr.wi.lso_mss = htons(gso_size);
   }
 
@@ -2865,7 +2863,7 @@ bnad_txq_wi_prepare(struct bnad *bnad, struct bna_tcb *tcb,
    htons(BNA_TXQ_WI_L4_HDR_N_OFFSET(
    tcp_hdrlen(skb) >> 2, skb_transport_offset(skb)));
  } else  {
-  txqent->hdr.wi.opcode = __constant_htons(BNA_TXQ_WI_SEND);
+  txqent->hdr.wi.opcode = htons(BNA_TXQ_WI_SEND);
   txqent->hdr.wi.lso_mss = 0;
 
   if (unlikely(skb->len > (bnad->netdev->mtu + ETH_HLEN))) {
@@ -2876,11 +2874,10 @@ bnad_txq_wi_prepare(struct bnad *bnad, struct bna_tcb *tcb,
   if (skb->ip_summed == CHECKSUM_PARTIAL) {
    u8 proto = 0;
 
-   if (skb->protocol == __constant_htons(ETH_P_IP))
+   if (skb->protocol == htons(ETH_P_IP))
     proto = ip_hdr(skb)->protocol;
 #ifdef NETIF_F_IPV6_CSUM
-   else if (skb->protocol ==
-     __constant_htons(ETH_P_IPV6)) {
+   else if (skb->protocol == htons(ETH_P_IPV6)) {
     /* nexthdr may not be TCP immediately. */
     proto = ipv6_hdr(skb)->nexthdr;
    }
@@ -3062,8 +3059,7 @@ bnad_start_xmit(struct sk_buff *skb, struct net_device *netdev)
    vect_id = 0;
    BNA_QE_INDX_INC(prod, q_depth);
    txqent = &((struct bna_txq_entry *)tcb->sw_q)[prod];
-   txqent->hdr.wi_ext.opcode =
-    __constant_htons(BNA_TXQ_WI_EXTENSION);
+   txqent->hdr.wi_ext.opcode = htons(BNA_TXQ_WI_EXTENSION);
    unmap = &unmap_q[prod];
   }
 
-- 
1.7.1