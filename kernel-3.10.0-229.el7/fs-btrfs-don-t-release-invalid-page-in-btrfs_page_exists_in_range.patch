From 1457600cde932b05f847a9793ebb8e042f2c0e6d Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:04:24 -0400
Subject: [fs] btrfs: don't release invalid page in btrfs_page_exists_in_range()

Message-id: <1407179109-13714-378-git-send-email-sandeen@redhat.com>
Patchwork-id: 87370
O-Subject: [RHEL7.1 PATCH 377/422] Btrfs: don't release invalid page in btrfs_page_exists_in_range()
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit 6fdef6d43cb897bcbbed13786e8cc8cccabc442a
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Thu Jun 5 13:22:26 2014 +0100

    Btrfs: don't release invalid page in btrfs_page_exists_in_range()

    In inode.c:btrfs_page_exists_in_range(), if the page we got from
    the radix tree is an exception entry, which can't be retried, we
    exit the loop with a non-NULL page and then call page_cache_release
    against it, which is not ok since it's not a valid page. This could
    also make us return true when we shouldn't.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index 5fc3070..b39b4dc 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -6771,6 +6771,7 @@ bool btrfs_page_exists_in_range(struct inode *inode, loff_t start, loff_t end)
     * here as an exceptional entry: so return it without
     * attempting to raise page count.
     */
+   page = NULL;
    break; /* TODO: Is this relevant for this use case? */
   }
 
-- 
1.7.1