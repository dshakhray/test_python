From 662dcba26f8c93ea720246c5aba828ced0ba1d9f Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Mon, 8 Sep 2014 14:31:23 -0400
Subject: [scsi] hpsa: allow VPD page zero to be queried

Message-id: <1410186734-19986-33-git-send-email-thenzl@redhat.com>
Patchwork-id: 92061
O-Subject: [RHEL6.6 e-stor PATCH 32/83] hpsa: allow VPD page zero to be queried
Bugzilla: 1069185
RH-Acked-by: Maurizio Lombardi <mlombard@redhat.com>
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Ewan Milne <emilne@redhat.com>

Code was confused and assumed that page zero was not
VPD page and all non-zero pages were VPD pages.

Signed-off-by: Stephen M. Cameron <scameron@beardog.cce.hp.com>
Signed-off-by: James Bottomley <JBottomley@Parallels.com>
(cherry picked from commit b7bb24eb4e9c42bbfb4e62a68924fc905bbc7fbf)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/hpsa.c b/drivers/scsi/hpsa.c
index 6b97761..53d5825 100644
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@ -201,8 +201,9 @@ static void cmd_special_free(struct ctlr_info *h, struct CommandList *c);
 static struct CommandList *cmd_alloc(struct ctlr_info *h);
 static struct CommandList *cmd_special_alloc(struct ctlr_info *h);
 static int fill_cmd(struct CommandList *c, u8 cmd, struct ctlr_info *h,
- void *buff, size_t size, u8 page_code, unsigned char *scsi3addr,
+ void *buff, size_t size, u16 page_code, unsigned char *scsi3addr,
  int cmd_type);
+#define VPD_PAGE (1 << 8)
 
 static int hpsa_scsi_queue_command(struct Scsi_Host *h, struct scsi_cmnd *cmd);
 static void hpsa_scan_start(struct Scsi_Host *);
@@ -1896,7 +1897,7 @@ static void hpsa_scsi_interpret_error(struct CommandList *cp)
 }
 
 static int hpsa_scsi_do_inquiry(struct ctlr_info *h, unsigned char *scsi3addr,
-   unsigned char page, unsigned char *buf,
+   u16 page, unsigned char *buf,
    unsigned char bufsize)
 {
  int rc = IO_OK;
@@ -1966,7 +1967,7 @@ static void hpsa_get_raid_level(struct ctlr_info *h,
  buf = kzalloc(64, GFP_KERNEL);
  if (!buf)
   return;
- rc = hpsa_scsi_do_inquiry(h, scsi3addr, 0xC1, buf, 64);
+ rc = hpsa_scsi_do_inquiry(h, scsi3addr, VPD_PAGE | 0xC1, buf, 64);
  if (rc == 0)
   *raid_level = buf[8];
  if (*raid_level > RAID_UNKNOWN)
@@ -2095,7 +2096,7 @@ static void hpsa_get_ioaccel_status(struct ctlr_info *h,
  if (!buf)
   return;
  rc = hpsa_scsi_do_inquiry(h, scsi3addr,
-   HPSA_VPD_LV_IOACCEL_STATUS, buf, 64);
+   VPD_PAGE | HPSA_VPD_LV_IOACCEL_STATUS, buf, 64);
  if (rc != 0)
   goto out;
 
@@ -2128,7 +2129,7 @@ static int hpsa_get_device_id(struct ctlr_info *h, unsigned char *scsi3addr,
  buf = kzalloc(64, GFP_KERNEL);
  if (!buf)
   return -1;
- rc = hpsa_scsi_do_inquiry(h, scsi3addr, 0x83, buf, 64);
+ rc = hpsa_scsi_do_inquiry(h, scsi3addr, VPD_PAGE | 0x83, buf, 64);
  if (rc == 0)
   memcpy(device_id, &buf[8], buflen);
  kfree(buf);
@@ -4647,7 +4648,7 @@ static int hpsa_send_host_reset(struct ctlr_info *h, unsigned char *scsi3addr,
 }
 
 static int fill_cmd(struct CommandList *c, u8 cmd, struct ctlr_info *h,
- void *buff, size_t size, u8 page_code, unsigned char *scsi3addr,
+ void *buff, size_t size, u16 page_code, unsigned char *scsi3addr,
  int cmd_type)
 {
  int pci_dir = XFER_NONE;
@@ -4670,9 +4671,9 @@ static int fill_cmd(struct CommandList *c, u8 cmd, struct ctlr_info *h,
   switch (cmd) {
   case HPSA_INQUIRY:
    /* are we trying to read a vital product page */
-   if (page_code != 0) {
+   if (page_code & VPD_PAGE) {
     c->Request.CDB[1] = 0x01;
-    c->Request.CDB[2] = page_code;
+    c->Request.CDB[2] = (page_code & 0xff);
    }
    c->Request.CDBLen = 6;
    c->Request.Type.Attribute = ATTR_SIMPLE;
-- 
1.7.1