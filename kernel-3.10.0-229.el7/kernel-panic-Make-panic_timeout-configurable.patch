From 107bc98c9aa7ef857c4d54778d5b664dc46c9198 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:13:58 -0400
Subject: [kernel] panic: Make panic_timeout configurable

Message-id: <1410545655-205645-610-git-send-email-dzickus@redhat.com>
Patchwork-id: 94485
O-Subject: [RHEL7 PATCH 609/626] panic: Make panic_timeout configurable
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 5800dc3cff87c3a1548382298bb16e1fb4ec7e32
Author: Jason Baron <jbaron@akamai.com>
Date:   Mon Nov 25 23:23:04 2013 +0000

    panic: Make panic_timeout configurable

    The panic_timeout value can be set via the command line option
    'panic=x', or via /proc/sys/kernel/panic, however that is not
    sufficient when the panic occurs before we are able to set up
    these values. Thus, add a CONFIG_PANIC_TIMEOUT so that we can
    set the desired value from the .config.

    The default panic_timeout value continues to be 0 - wait
    forever. Also adds set_arch_panic_timeout(new_timeout,
    arch_default_timeout), which is intended to be used by arches in
    arch_setup(). The idea being that the new_timeout is only set if
    the user hasn't changed from the arch_default_timeout.

    Signed-off-by: Jason Baron <jbaron@akamai.com>
    Cc: benh@kernel.crashing.org
    Cc: paulus@samba.org
    Cc: ralf@linux-mips.org
    Cc: mpe@ellerman.id.au
    Cc: felipe.contreras@gmail.com
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1a1674daec27c534df409697025ac568ebcee91e.1385418410.git.jbaron@akamai.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index c12aa4e..cca262c 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -393,6 +393,15 @@ extern int panic_on_oops;
 extern int panic_on_unrecovered_nmi;
 extern int panic_on_io_nmi;
 extern int sysctl_panic_on_stackoverflow;
+/*
+ * Only to be used by arch init code. If the user over-wrote the default
+ * CONFIG_PANIC_TIMEOUT, honor it.
+ */
+static inline void set_arch_panic_timeout(int timeout, int arch_default_timeout)
+{
+ if (panic_timeout == arch_default_timeout)
+  panic_timeout = timeout;
+}
 extern const char *print_tainted(void);
 enum lockdep_ok {
  LOCKDEP_STILL_OK,
diff --git a/kernel/panic.c b/kernel/panic.c
index 58520a5..f4058fc 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -32,7 +32,7 @@ static int pause_on_oops;
 static int pause_on_oops_flag;
 static DEFINE_SPINLOCK(pause_on_oops_lock);
 
-int panic_timeout;
+int panic_timeout = CONFIG_PANIC_TIMEOUT;
 EXPORT_SYMBOL_GPL(panic_timeout);
 
 ATOMIC_NOTIFIER_HEAD(panic_notifier_list);
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index 9957e64..e2280ad 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -315,6 +315,15 @@ config BOOTPARAM_HUNG_TASK_PANIC_VALUE
  default 0 if !BOOTPARAM_HUNG_TASK_PANIC
  default 1 if BOOTPARAM_HUNG_TASK_PANIC
 
+config PANIC_TIMEOUT
+ int "panic timeout"
+ default 0
+ help
+   Set the timeout value (in seconds) until a reboot occurs when the
+   the kernel panics. If n = 0, then we wait forever. A timeout
+   value n > 0 will wait n seconds before rebooting, while a timeout
+   value n < 0 will reboot immediately.
+
 config SCHED_DEBUG
  bool "Collect scheduler debugging info"
  depends on DEBUG_KERNEL && PROC_FS
-- 
1.7.1