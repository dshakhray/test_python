From cb435eb89846578f7eff6b7a6c187efd818c3dff Mon Sep 17 00:00:00 2001
From: Sachin Prabhu <sprabhu@redhat.com>
Date: Tue, 27 Jan 2015 16:40:43 -0500
Subject: [fs] fix deadlock in cifs_ioctl_clone()

Message-id: <1422376843-8702-1-git-send-email-sprabhu@redhat.com>
Patchwork-id: 103658
O-Subject: [RHEL7 PATCH fs] [bz1183980] fix deadlock in cifs_ioctl_clone()
Bugzilla: 1183980
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Al Viro <viro@zeniv.linux.org.uk>

Fixes bz: 1183980

It really needs to check that src is non-directory *and* use
{un,}lock_two_nodirectories().  As it is, it's trivial to cause
double-lock (ioctl(fd, CIFS_IOC_COPYCHUNK_FILE, fd)) and if the
last argument is an fd of directory, we are asking for trouble
by violating the locking order - all directories go before all
non-directories.  If the last argument is an fd of parent
directory, it has 50% odds of locking child before parent,
which will cause AB-BA deadlock if we race with unlink().

Cc: stable@vger.kernel.org @ 3.13+
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 378ff1a53b5724f3ac97b0aba3c9ecac072f6fcd)

Signed-off-by: Sachin Prabhu <sprabhu@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/cifs/ioctl.c b/fs/cifs/ioctl.c
index 45cb59b..8b7898b 100644
--- a/fs/cifs/ioctl.c
+++ b/fs/cifs/ioctl.c
@@ -86,21 +86,16 @@ static long cifs_ioctl_clone(unsigned int xid, struct file *dst_file,
  }
 
  src_inode = file_inode(src_file.file);
+ rc = -EINVAL;
+ if (S_ISDIR(src_inode->i_mode))
+  goto out_fput;
 
  /*
   * Note: cifs case is easier than btrfs since server responsible for
   * checks for proper open modes and file type and if it wants
   * server could even support copy of range where source = target
   */
-
- /* so we do not deadlock racing two ioctls on same files */
- if (target_inode < src_inode) {
-  mutex_lock_nested(&target_inode->i_mutex, I_MUTEX_PARENT);
-  mutex_lock_nested(&src_inode->i_mutex, I_MUTEX_CHILD);
- } else {
-  mutex_lock_nested(&src_inode->i_mutex, I_MUTEX_PARENT);
-  mutex_lock_nested(&target_inode->i_mutex, I_MUTEX_CHILD);
- }
+ lock_two_nondirectories(target_inode, src_inode);
 
  /* determine range to clone */
  rc = -EINVAL;
@@ -124,13 +119,7 @@ static long cifs_ioctl_clone(unsigned int xid, struct file *dst_file,
 out_unlock:
  /* although unlocking in the reverse order from locking is not
     strictly necessary here it is a little cleaner to be consistent */
- if (target_inode < src_inode) {
-  mutex_unlock(&src_inode->i_mutex);
-  mutex_unlock(&target_inode->i_mutex);
- } else {
-  mutex_unlock(&target_inode->i_mutex);
-  mutex_unlock(&src_inode->i_mutex);
- }
+ unlock_two_nondirectories(src_inode, target_inode);
 out_fput:
  fdput(src_file);
 out_drop_write:
-- 
1.7.1