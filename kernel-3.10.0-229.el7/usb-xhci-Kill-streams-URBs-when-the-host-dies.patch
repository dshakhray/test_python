From c59d3a3545be598d2b6dc7b9672b5c9649be1a0a Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:06:59 -0400
Subject: [usb] xhci: Kill streams URBs when the host dies

Message-id: <1410887463-20674-348-git-send-email-dzickus@redhat.com>
Patchwork-id: 95521
O-Subject: [RHEL7 PATCH 347/591] xhci: Kill streams URBs when the host dies.
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 21d0e51bfb290349adc02fa8fec716d77f53df51
Author: Sarah Sharp <sarah.a.sharp@linux.intel.com>
Date:   Fri Feb 21 14:29:02 2014 -0800

    xhci: Kill streams URBs when the host dies.

    If the host controller stops responding to commands, we need to kill all
    the URBs that were queued to all endpoints.  The current code would only
    kill URBs that had been queued to the endpoint rings.  ep->ring is set
    to NULL if streams has been enabled for the endpoint, which means URBs
    submitted with a non-zero stream_id would never get killed.  Fix this.

    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index 919c8fa..c98d9ee 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -921,13 +921,27 @@ static void xhci_kill_endpoint_urbs(struct xhci_hcd *xhci,
  struct xhci_ring *ring;
 
  ep = &xhci->devs[slot_id]->eps[ep_index];
- ring = ep->ring;
- if (!ring)
-  return;
- xhci_dbg_trace(xhci, trace_xhci_dbg_cancel_urb,
-   "Killing URBs for slot ID %u, ep index %u",
-   slot_id, ep_index);
- xhci_kill_ring_urbs(xhci, ring);
+ if ((ep->ep_state & EP_HAS_STREAMS) ||
+   (ep->ep_state & EP_GETTING_NO_STREAMS)) {
+  int stream_id;
+
+  for (stream_id = 0; stream_id < ep->stream_info->num_streams;
+    stream_id++) {
+   xhci_dbg_trace(xhci, trace_xhci_dbg_cancel_urb,
+     "Killing URBs for slot ID %u, ep index %u, stream %u",
+     slot_id, ep_index, stream_id + 1);
+   xhci_kill_ring_urbs(xhci,
+     ep->stream_info->stream_rings[stream_id]);
+  }
+ } else {
+  ring = ep->ring;
+  if (!ring)
+   return;
+  xhci_dbg_trace(xhci, trace_xhci_dbg_cancel_urb,
+    "Killing URBs for slot ID %u, ep index %u",
+    slot_id, ep_index);
+  xhci_kill_ring_urbs(xhci, ring);
+ }
  while (!list_empty(&ep->cancelled_td_list)) {
   cur_td = list_first_entry(&ep->cancelled_td_list,
     struct xhci_td, cancelled_td_list);
-- 
1.7.1