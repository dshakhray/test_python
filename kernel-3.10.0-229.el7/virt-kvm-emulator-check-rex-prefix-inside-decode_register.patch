From 7cf06a37ae338833c76708339d3e093c2d07e2af Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:38:21 -0400
Subject: [virt] kvm/emulator: check rex prefix inside decode_register()

Message-id: <1406040016-3289-107-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86185
O-Subject: [RHEL7 PATCH v2 106/221] KVM: emulator: check rex prefix inside decode_register()
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Gleb Natapov <gleb@redhat.com>

All decode_register() callers check if instruction has rex prefix
to properly decode one byte operand. It make sense to move the check
inside.

Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Gleb Natapov <gleb@redhat.com>
(cherry picked from commit aa9ac1a6323d21065e121902fef4f1b6c07c37c7)
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/emulate.c b/arch/x86/kvm/emulate.c
index 99785bb..4c7b4b9 100644
--- a/arch/x86/kvm/emulate.c
+++ b/arch/x86/kvm/emulate.c
@@ -785,9 +785,10 @@ static int do_insn_fetch(struct x86_emulate_ctxt *ctxt,
  * @highbyte_regs specifies whether to decode AH,CH,DH,BH.
  */
 static void *decode_register(struct x86_emulate_ctxt *ctxt, u8 modrm_reg,
-        int highbyte_regs)
+        int byteop)
 {
  void *p;
+ int highbyte_regs = (ctxt->rex_prefix == 0) && byteop;
 
  if (highbyte_regs && modrm_reg >= 4 && modrm_reg < 8)
   p = (unsigned char *)reg_rmw(ctxt, modrm_reg & 3) + 1;
@@ -1024,7 +1025,6 @@ static void decode_register_operand(struct x86_emulate_ctxt *ctxt,
         struct operand *op)
 {
  unsigned reg = ctxt->modrm_reg;
- int highbyte_regs = ctxt->rex_prefix == 0;
 
  if (!(ctxt->d & ModRM))
   reg = (ctxt->b & 7) | ((ctxt->rex_prefix & 1) << 3);
@@ -1046,10 +1046,10 @@ static void decode_register_operand(struct x86_emulate_ctxt *ctxt,
 
  op->type = OP_REG;
  if (ctxt->d & ByteOp) {
-  op->addr.reg = decode_register(ctxt, reg, highbyte_regs);
+  op->addr.reg = decode_register(ctxt, reg, true);
   op->bytes = 1;
  } else {
-  op->addr.reg = decode_register(ctxt, reg, 0);
+  op->addr.reg = decode_register(ctxt, reg, false);
   op->bytes = ctxt->op_bytes;
  }
  fetch_register_operand(op);
@@ -1082,12 +1082,10 @@ static int decode_modrm(struct x86_emulate_ctxt *ctxt,
  ctxt->modrm_seg = VCPU_SREG_DS;
 
  if (ctxt->modrm_mod == 3) {
-  int highbyte_regs = ctxt->rex_prefix == 0;
-
   op->type = OP_REG;
   op->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;
   op->addr.reg = decode_register(ctxt, ctxt->modrm_rm,
-            highbyte_regs && (ctxt->d & ByteOp));
+    ctxt->d & ByteOp);
   if (ctxt->d & Sse) {
    op->type = OP_XMM;
    op->bytes = 16;
@@ -4123,10 +4121,8 @@ static int decode_operand(struct x86_emulate_ctxt *ctxt, struct operand *op,
  case OpMem8:
   ctxt->memop.bytes = 1;
   if (ctxt->memop.type == OP_REG) {
-   int highbyte_regs = ctxt->rex_prefix == 0;
-
-   ctxt->memop.addr.reg = decode_register(ctxt, ctxt->modrm_rm,
-            highbyte_regs);
+   ctxt->memop.addr.reg = decode_register(ctxt,
+     ctxt->modrm_rm, true);
    fetch_register_operand(&ctxt->memop);
   }
   goto mem_common;
-- 
1.7.1