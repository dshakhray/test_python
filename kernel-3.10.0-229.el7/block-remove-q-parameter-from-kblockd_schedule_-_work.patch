From dbb0952ad80ec5f70e1f7aafa0887f69cecdf66c Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:10 -0400
Subject: [block] remove 'q' parameter from kblockd_schedule_*_work()

Message-id: <1402670238-13916-23-git-send-email-snitzer@redhat.com>
Patchwork-id: 83779
O-Subject: [RHEL7.1 PATCH 022/150] block: remove 'q' parameter from kblockd_schedule_*_work()
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 59c3d45e487315e6e05a3f2310b61109f8e503e7
Author: Jens Axboe <axboe@fb.com>
Date:   Tue Apr 8 09:15:35 2014 -0600

    block: remove 'q' parameter from kblockd_schedule_*_work()

    The queue parameter is never used, just get rid of it.

    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-core.c b/block/blk-core.c
index d9d9afc..fe50be2 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -2896,14 +2896,14 @@ free_and_out:
 }
 EXPORT_SYMBOL_GPL(blk_rq_prep_clone);
 
-int kblockd_schedule_work(struct request_queue *q, struct work_struct *work)
+int kblockd_schedule_work(struct work_struct *work)
 {
  return queue_work(kblockd_workqueue, work);
 }
 EXPORT_SYMBOL(kblockd_schedule_work);
 
-int kblockd_schedule_delayed_work(struct request_queue *q,
-   struct delayed_work *dwork, unsigned long delay)
+int kblockd_schedule_delayed_work(struct delayed_work *dwork,
+      unsigned long delay)
 {
  return queue_delayed_work(kblockd_workqueue, dwork, delay);
 }
diff --git a/block/blk-flush.c b/block/blk-flush.c
index 8fcb09c..8e80986 100644
--- a/block/blk-flush.c
+++ b/block/blk-flush.c
@@ -144,7 +144,7 @@ static bool blk_flush_queue_rq(struct request *rq, bool add_front)
 {
  if (rq->q->mq_ops) {
   INIT_WORK(&rq->mq_flush_work, mq_flush_run);
-  kblockd_schedule_work(rq->q, &rq->mq_flush_work);
+  kblockd_schedule_work(&rq->mq_flush_work);
   return false;
  } else {
   if (add_front)
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 1d2a9bd..9c8f1f4 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -608,11 +608,8 @@ void blk_mq_run_hw_queue(struct blk_mq_hw_ctx *hctx, bool async)
 
  if (!async)
   __blk_mq_run_hw_queue(hctx);
- else {
-  struct request_queue *q = hctx->queue;
-
-  kblockd_schedule_delayed_work(q, &hctx->delayed_work, 0);
- }
+ else
+  kblockd_schedule_delayed_work(&hctx->delayed_work, 0);
 }
 
 void blk_mq_run_queues(struct request_queue *q, bool async)
diff --git a/block/cfq-iosched.c b/block/cfq-iosched.c
index 5bc4d27..8c294b7 100644
--- a/block/cfq-iosched.c
+++ b/block/cfq-iosched.c
@@ -908,7 +908,7 @@ static inline void cfq_schedule_dispatch(struct cfq_data *cfqd)
 {
  if (cfqd->busy_queues) {
   cfq_log(cfqd, "schedule dispatch");
-  kblockd_schedule_work(cfqd->queue, &cfqd->unplug_work);
+  kblockd_schedule_work(&cfqd->unplug_work);
  }
 }
 
diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index 65d2b01..c2b0f7a 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -184,7 +184,7 @@ static void __scsi_queue_insert(struct scsi_cmnd *cmd, int reason, int unbusy)
  cmd->result = 0;
  spin_lock_irqsave(q->queue_lock, flags);
  blk_requeue_request(q, cmd->request);
- kblockd_schedule_work(q, &device->requeue_work);
+ kblockd_schedule_work(&device->requeue_work);
  spin_unlock_irqrestore(q->queue_lock, flags);
 }
 
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 1f4ac90..e66be4d 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -1387,8 +1387,8 @@ static inline void put_dev_sector(Sector p)
 }
 
 struct work_struct;
-int kblockd_schedule_work(struct request_queue *q, struct work_struct *work);
-int kblockd_schedule_delayed_work(struct request_queue *q, struct delayed_work *dwork, unsigned long delay);
+int kblockd_schedule_work(struct work_struct *work);
+int kblockd_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
 
 #ifdef CONFIG_BLK_CGROUP
 /*
-- 
1.7.1