From 9adf29533dfd2a1f5df643b1048109493b4dde06 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 20 Mar 2014 17:08:59 -0400
Subject: [misc] mei: fix lockdep warning when registering mei watchdog

Message-id: <1395335339-32693-1-git-send-email-prarit@redhat.com>
Patchwork-id: 78456
O-Subject: [RHEL7.0 PATCH BZ 971855] x86, watchdog, mei, fix lockdep warning when registering mei watchdog
Bugzilla: 971855
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=971855
Build info:
Date: Thu Mar 20 11:07:35 EDT 2014
Build OS: Red Hat Enterprise Linux Workstation release 7.0 Beta (Maipo)
System name: intel-rosecity-07.lab.bos.redhat.com with -j48
Built on: kernel-3.10.0-112.el7
Arch built: x86_64

During shutdown, or a cat /dev/watchdog, the following lockdep warning is
seen:

[  170.790457]
[  170.791955] ======================================================
[  170.798133] [ INFO: possible circular locking dependency detected ]
[  170.804386] 3.10.0-0.rc4.60.el7.x86_64.debug #1 Not tainted
[  170.809961] -------------------------------------------------------
[  170.816225] systemd/1 is trying to acquire lock:
[  170.820840]  (&dev->device_lock){+.+.+.}, at: [<ffffffff814726dd>]
mei_wd_ops_start+0x2d/0xf0
[  170.829453]
[  170.829453] but task is already holding lock:
[  170.835265]  (&wdd->lock){+.+...}, at: [<ffffffff8150b352>]
watchdog_start+0x22/0x80
[  170.843062]
[  170.843062] which lock already depends on the new lock.
[  170.843062]
[  170.851242]
[  170.851242] the existing dependency chain (in reverse order) is:
[  170.858729]
-> #2 (&wdd->lock){+.+...}:
[  170.862828]        [<ffffffff810de5e6>] __lock_acquire+0x3c6/0xb70
[  170.869033]        [<ffffffff810df584>] lock_acquire+0xa4/0x1f0
[  170.874944]        [<ffffffff816bce30>] mutex_lock_nested+0x80/0x400
[  170.881297]        [<ffffffff8150b352>] watchdog_start+0x22/0x80
[  170.887307]        [<ffffffff8150b598>] watchdog_open+0x88/0xf0
[  170.893218]        [<ffffffff81436587>] misc_open+0xb7/0x1d0
[  170.898879]        [<ffffffff811e3572>] chrdev_open+0x92/0x1d0
[  170.904711]        [<ffffffff811dc4af>] do_dentry_open+0x24f/0x320
[  170.910885]        [<ffffffff811dc5c0>] finish_open+0x40/0x50
[  170.916632]        [<ffffffff811ee181>] do_last+0x4e1/0xe60
[  170.922233]        [<ffffffff811eebb3>] path_openat+0xb3/0x4c0
[  170.928063]        [<ffffffff811ef648>] do_filp_open+0x38/0x80
[  170.933890]        [<ffffffff811dd8f9>] do_sys_open+0xe9/0x1c0
[  170.939716]        [<ffffffff811dd9ee>] SyS_open+0x1e/0x20
[  170.945197]        [<ffffffff816ca299>] system_call_fastpath+0x16/0x1b
[  170.951724]
-> #1 (misc_mtx){+.+.+.}:
[  170.955621]        [<ffffffff810de5e6>] __lock_acquire+0x3c6/0xb70
[  170.961810]        [<ffffffff810df584>] lock_acquire+0xa4/0x1f0
[  170.967732]        [<ffffffff816bce30>] mutex_lock_nested+0x80/0x400
[  170.974087]        [<ffffffff814362e9>] misc_register+0x29/0x120
[  170.980096]        [<ffffffff8150baa5>]
watchdog_dev_register+0x35/0x120
[  170.986819]        [<ffffffff8150b10c>]
watchdog_register_device+0xac/0x1f0
[  170.993769]        [<ffffffff81472d79>] mei_watchdog_register+0x19/0x70
[  171.000390]        [<ffffffff8146c299>] mei_hbm_dispatch+0x249/0xc10
[  171.006747]        [<ffffffff8146ce93>] mei_irq_read_handler+0xe3/0x8c0
[  171.013359]        [<ffffffff814758e5>]
mei_me_irq_thread_handler+0x115/0x310
[  171.020486]        [<ffffffff8111dad0>] irq_thread_fn+0x20/0x50
[  171.026414]        [<ffffffff8111df7f>] irq_thread+0x12f/0x160
[  171.032241]        [<ffffffff8109a47d>] kthread+0xed/0x100
[  171.037730]        [<ffffffff816ca1ec>] ret_from_fork+0x7c/0xb0
[  171.043643]
-> #0 (&dev->device_lock){+.+.+.}:
[  171.048310]        [<ffffffff810dd7f3>]
validate_chain.isra.43+0x10c3/0x10d0
[  171.055383]        [<ffffffff810de5e6>] __lock_acquire+0x3c6/0xb70
[  171.061554]        [<ffffffff810df584>] lock_acquire+0xa4/0x1f0
[  171.067469]        [<ffffffff816bce30>] mutex_lock_nested+0x80/0x400
[  171.073823]        [<ffffffff814726dd>] mei_wd_ops_start+0x2d/0xf0
[  171.079995]        [<ffffffff8150b38d>] watchdog_start+0x5d/0x80
[  171.085995]        [<ffffffff8150b598>] watchdog_open+0x88/0xf0
[  171.091916]        [<ffffffff81436587>] misc_open+0xb7/0x1d0
[  171.097573]        [<ffffffff811e3572>] chrdev_open+0x92/0x1d0
[  171.103407]        [<ffffffff811dc4af>] do_dentry_open+0x24f/0x320
[  171.109580]        [<ffffffff811dc5c0>] finish_open+0x40/0x50
[  171.115322]        [<ffffffff811ee181>] do_last+0x4e1/0xe60
[  171.120889]        [<ffffffff811eebb3>] path_openat+0xb3/0x4c0
[  171.126716]        [<ffffffff811ef648>] do_filp_open+0x38/0x80
[  171.132543]        [<ffffffff811dd8f9>] do_sys_open+0xe9/0x1c0
[  171.138368]        [<ffffffff811dd9ee>] SyS_open+0x1e/0x20
[  171.143847]        [<ffffffff816ca299>] system_call_fastpath+0x16/0x1b
[  171.150374]
[  171.150374] other info that might help us debug this:
[  171.150374]
[  171.158386] Chain exists of:
  &dev->device_lock --> misc_mtx --> &wdd->lock

  [  171.165797]  Possible unsafe locking scenario:
  [  171.165797]
  [  171.171718]        CPU0                    CPU1
  [  171.176238]        ----                    ----
  [  171.180749]   lock(&wdd->lock);
  [  171.183915]                                lock(misc_mtx);
  [  171.189431]                                lock(&wdd->lock);
  [  171.195122]   lock(&dev->device_lock);
  [  171.198915]
  [  171.198915]  *** DEADLOCK ***
  [  171.198915]
  [  171.204839] 2 locks held by systemd/1:
  [  171.208571]  #0:  (misc_mtx){+.+.+.}, at: [<ffffffff814364f8>]
  misc_open+0x28/0x1d0
  [  171.216291]  #1:  (&wdd->lock){+.+...}, at: [<ffffffff8150b352>]
  watchdog_start+0x22/0x80
  [  171.224540]
  [  171.224540] stack backtrace:
  [  171.228887] CPU: 3 PID: 1 Comm: systemd Not tainted
  3.10.0-0.rc4.60.el7.x86_64.debug #1
  [  171.236883] Hardware name: Hewlett-Packard  /3396, BIOS K01 v02.51
  06/15/2012
  [  171.243997]  ffffffff8269f520 ffff880100c55988 ffffffff816b8bbd
  ffff880100c559c8
  [  171.251441]  ffffffff816b2b3e ffff880100c55a00 0000000000000001
  ffff8801005709e0
  [  171.258877]  0000000000000002 ffff880100570000 ffff8801005709e0
  ffff880100c55a70
  [  171.266320] Call Trace:
  [  171.268762]  [<ffffffff816b8bbd>] dump_stack+0x19/0x1b
  [  171.273914]  [<ffffffff816b2b3e>] print_circular_bug+0x201/0x210
  [  171.279902]  [<ffffffff810dd7f3>]
  validate_chain.isra.43+0x10c3/0x10d0
  [  171.286438]  [<ffffffff810b1695>] ? sched_clock_cpu+0xb5/0x100
  [  171.292255]  [<ffffffff810de5e6>] __lock_acquire+0x3c6/0xb70
  [  171.297925]  [<ffffffff810de5e6>] ? __lock_acquire+0x3c6/0xb70
  [  171.303752]  [<ffffffff810df584>] lock_acquire+0xa4/0x1f0
  [  171.309137]  [<ffffffff814726dd>] ? mei_wd_ops_start+0x2d/0xf0
  [  171.314974]  [<ffffffff816bce30>] mutex_lock_nested+0x80/0x400
  [  171.320801]  [<ffffffff814726dd>] ? mei_wd_ops_start+0x2d/0xf0
  [  171.326635]  [<ffffffff814726dd>] ? mei_wd_ops_start+0x2d/0xf0
  [  171.332464]  [<ffffffff8150b352>] ? watchdog_start+0x22/0x80
  [  171.338117]  [<ffffffff8150b352>] ? watchdog_start+0x22/0x80
  [  171.343770]  [<ffffffff814726dd>] mei_wd_ops_start+0x2d/0xf0
  [  171.349417]  [<ffffffff8150b38d>] watchdog_start+0x5d/0x80
  [  171.354909]  [<ffffffff8150b598>] watchdog_open+0x88/0xf0
  [  171.360304]  [<ffffffff81436587>] misc_open+0xb7/0x1d0
  [  171.365439]  [<ffffffff811e3572>] chrdev_open+0x92/0x1d0
  [  171.370738]  [<ffffffff811dc4af>] do_dentry_open+0x24f/0x320
  [  171.376403]  [<ffffffff812e6ebc>] ?
  security_inode_permission+0x1c/0x30
  [  171.383007]  [<ffffffff811e34e0>] ? cdev_put+0x30/0x30
  [  171.388137]  [<ffffffff811dc5c0>] finish_open+0x40/0x50
  [  171.393340]  [<ffffffff811ee181>] do_last+0x4e1/0xe60
  [  171.398407]  [<ffffffff811eebb3>] path_openat+0xb3/0x4c0
  [  171.403714]  [<ffffffff810d95ad>] ? trace_hardirqs_off+0xd/0x10
  [  171.409629]  [<ffffffff8101fcb5>] ? native_sched_clock+0x15/0x80
  [  171.415638]  [<ffffffff810d95ad>] ? trace_hardirqs_off+0xd/0x10
  [  171.421551]  [<ffffffff811ef648>] do_filp_open+0x38/0x80
  [  171.426860]  [<ffffffff816c03a7>] ? _raw_spin_unlock+0x27/0x40
  [  171.432692]  [<ffffffff811fe58f>] ? __alloc_fd+0xaf/0x200
  [  171.438075]  [<ffffffff811dd8f9>] do_sys_open+0xe9/0x1c0
  [  171.443383]  [<ffffffff811dd9ee>] SyS_open+0x1e/0x20
  [  171.448340]  [<ffffffff816ca299>] system_call_fastpath+0x16/0x1b

The issue is that the dev->device_lock does not need to be held when
registering the mei watchdog driver.  I proposed

http://marc.info/?l=linux-kernel&m=139531961731665&w=2

upstream.  Tomas Winkler pointed out that he has made a similar but
deeper change as part of https://lkml.org/lkml/2014/2/17/283 which is
queued in char-misc-next.  I am referencing the above URL and *only*
patching mei_watchdog_register() to avoid the lockdep warning.

Successfully tested by me.

Cc: dzickus@redhat.com
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/wd.c b/drivers/misc/mei/wd.c
index 6251a4e..8ab1a5a 100644
--- a/drivers/misc/mei/wd.c
+++ b/drivers/misc/mei/wd.c
@@ -370,9 +370,15 @@ static struct watchdog_device amt_wd_dev = {
 
 void mei_watchdog_register(struct mei_device *dev)
 {
- if (watchdog_register_device(&amt_wd_dev)) {
-  dev_err(&dev->pdev->dev,
-   "wd: unable to register watchdog device.\n");
+ int ret;
+
+ /* unlock to perserve correct locking order */
+ mutex_unlock(&dev->device_lock);
+ ret = watchdog_register_device(&amt_wd_dev);
+ mutex_lock(&dev->device_lock);
+ if (ret) {
+  dev_err(&dev->pdev->dev, "wd: unable to register watchdog device = %d.\n",
+   ret);
   return;
  }
 
-- 
1.7.1