From be4b1841491cb504468b7ab2ae4363e22e1e4f64 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Thu, 13 Nov 2014 01:53:38 -0500
Subject: [md] dm-bio-prison: introduce support for locking ranges of blocks

Message-id: <1415843623-26132-5-git-send-email-snitzer@redhat.com>
Patchwork-id: 99884
O-Subject: [RHEL7.1 PATCH 4/9] dm bio prison: introduce support for locking ranges of blocks
Bugzilla: 1159001
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1159001

Upstream linux-dm.git commit 5f274d886598c9fd26d2499bf3f68306f170e9db
Author: Joe Thornber <ejt@redhat.com>
Date:   Wed Sep 17 10:17:39 2014 +0100

    dm bio prison: introduce support for locking ranges of blocks

    Ranges will be placed in the same cell if they overlap.

    Range locking is a prerequisite for more efficient multi-block discard
    support in both the cache and thin-provisioning targets.

    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-bio-prison.c b/drivers/md/dm-bio-prison.c
index bbe22a5..be06530 100644
--- a/drivers/md/dm-bio-prison.c
+++ b/drivers/md/dm-bio-prison.c
@@ -95,10 +95,10 @@ static int cmp_keys(struct dm_cell_key *lhs,
  if (lhs->dev > rhs->dev)
   return 1;
 
- if (lhs->block < rhs->block)
+ if (lhs->block_end <= rhs->block_begin)
   return -1;
 
- if (lhs->block > rhs->block)
+ if (lhs->block_begin >= rhs->block_end)
   return 1;
 
  return 0;
diff --git a/drivers/md/dm-bio-prison.h b/drivers/md/dm-bio-prison.h
index b039886..74cf011 100644
--- a/drivers/md/dm-bio-prison.h
+++ b/drivers/md/dm-bio-prison.h
@@ -23,11 +23,14 @@
  */
 struct dm_bio_prison;
 
-/* FIXME: this needs to be more abstract */
+/*
+ * Keys define a range of blocks within either a virtual or physical
+ * device.
+ */
 struct dm_cell_key {
  int virtual;
  dm_thin_id dev;
- dm_block_t block;
+ dm_block_t block_begin, block_end;
 };
 
 /*
@@ -59,7 +62,7 @@ void dm_bio_prison_free_cell(struct dm_bio_prison *prison,
         struct dm_bio_prison_cell *cell);
 
 /*
- * Creates, or retrieves a cell for the given key.
+ * Creates, or retrieves a cell that overlaps the given key.
  *
  * Returns 1 if pre-existing cell returned, zero if new cell created using
  * @cell_prealloc.
@@ -70,7 +73,8 @@ int dm_get_cell(struct dm_bio_prison *prison,
   struct dm_bio_prison_cell **cell_result);
 
 /*
- * An atomic op that combines retrieving a cell, and adding a bio to it.
+ * An atomic op that combines retrieving or creating a cell, and adding a
+ * bio to it.
  *
  * Returns 1 if the cell was already held, 0 if @inmate is the new holder.
  */
diff --git a/drivers/md/dm-cache-target.c b/drivers/md/dm-cache-target.c
index b5d03d4..a15c70f 100644
--- a/drivers/md/dm-cache-target.c
+++ b/drivers/md/dm-cache-target.c
@@ -430,7 +430,8 @@ static void build_key(dm_oblock_t oblock, struct dm_cell_key *key)
 {
  key->virtual = 0;
  key->dev = 0;
- key->block = from_oblock(oblock);
+ key->block_begin = from_oblock(oblock);
+ key->block_end = key->block_begin + 1ULL;
 }
 
 /*
diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index f85f54f..2a02d40 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -115,7 +115,8 @@ static void build_data_key(struct dm_thin_device *td,
 {
  key->virtual = 0;
  key->dev = dm_thin_dev_id(td);
- key->block = b;
+ key->block_begin = b;
+ key->block_end = b + 1ULL;
 }
 
 static void build_virtual_key(struct dm_thin_device *td, dm_block_t b,
@@ -123,7 +124,8 @@ static void build_virtual_key(struct dm_thin_device *td, dm_block_t b,
 {
  key->virtual = 1;
  key->dev = dm_thin_dev_id(td);
- key->block = b;
+ key->block_begin = b;
+ key->block_end = b + 1ULL;
 }
 
 /*----------------------------------------------------------------*/
-- 
1.7.1