From 9a340d245ba74e18ff2cfdd05b1dc74fadfab2ba Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Thu, 21 Aug 2014 13:05:04 -0400
Subject: [ethernet] qlcnic: use standard NAPI weights

Message-id: <1408626422-3941-21-git-send-email-cdupuis@redhat.com>
Patchwork-id: 88598
O-Subject: [PATCH RHEL 7.1 020/138] qlcnic: use standard NAPI weights
Bugzilla: 1089352
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Michal Schmidt <mschmidt@redhat.com>

Bug 1089352 (https://bugzilla.redhat.com/show_bug.cgi?id=1089352)

net commit id df95fc44c09f4c33e1d453674487a78f2779ba23

Since commit 82dc3c63 ("net: introduce NAPI_POLL_WEIGHT")
netif_napi_add() produces an error message if a NAPI poll weight
greater than 64 is requested.

qlcnic requests the weight as large as 256 for some of its rings, and
smaller values for other rings. For instance in qlcnic_82xx_napi_add()
I think the intention was to give the tx+rx ring a bigger weight than
to rx-only rings, but it's actually doing the opposite. So I'm assuming
the weights do not really matter much.

Just use the standard NAPI weights for all rings.

Signed-off-by: Michal Schmidt <mschmidt@redhat.com>
Acked-by: Himanshu Madhani <himanshu.madhani@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
index 2d773e7..df34c0e 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
@@ -948,7 +948,6 @@ struct qlcnic_ipaddr {
 #define QLCNIC_PCI_REG_MSIX_TBL  0x44
 #define QLCNIC_MSIX_TBL_PGSIZE  4096
 
-#define QLCNIC_NETDEV_WEIGHT 128
 #define QLCNIC_ADAPTER_UP_MAGIC 777
 
 #define __QLCNIC_FW_ATTACHED  0
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c
index 10553c2..548e534 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c
@@ -1457,7 +1457,7 @@ void qlcnic_82xx_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring)
 int qlcnic_82xx_napi_add(struct qlcnic_adapter *adapter,
     struct net_device *netdev)
 {
- int ring, max_sds_rings;
+ int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  struct qlcnic_host_tx_ring *tx_ring;
@@ -1465,25 +1465,22 @@ int qlcnic_82xx_napi_add(struct qlcnic_adapter *adapter,
  if (qlcnic_alloc_sds_rings(recv_ctx, adapter->max_sds_rings))
   return -ENOMEM;
 
- max_sds_rings = adapter->max_sds_rings;
-
  for (ring = 0; ring < adapter->max_sds_rings; ring++) {
   sds_ring = &recv_ctx->sds_rings[ring];
   if (qlcnic_check_multi_tx(adapter) &&
       !adapter->ahw->diag_test &&
       (adapter->max_drv_tx_rings > 1)) {
    netif_napi_add(netdev, &sds_ring->napi, qlcnic_rx_poll,
-     QLCNIC_NETDEV_WEIGHT * 2);
+           NAPI_POLL_WEIGHT);
   } else {
    if (ring == (adapter->max_sds_rings - 1))
     netif_napi_add(netdev, &sds_ring->napi,
             qlcnic_poll,
-            QLCNIC_NETDEV_WEIGHT /
-            max_sds_rings);
+            NAPI_POLL_WEIGHT);
    else
     netif_napi_add(netdev, &sds_ring->napi,
             qlcnic_rx_poll,
-            QLCNIC_NETDEV_WEIGHT * 2);
+            NAPI_POLL_WEIGHT);
   }
  }
 
@@ -1496,7 +1493,7 @@ int qlcnic_82xx_napi_add(struct qlcnic_adapter *adapter,
   for (ring = 0; ring < adapter->max_drv_tx_rings; ring++) {
    tx_ring = &adapter->tx_ring[ring];
    netif_napi_add(netdev, &tx_ring->napi, qlcnic_tx_poll,
-           QLCNIC_NETDEV_WEIGHT);
+           NAPI_POLL_WEIGHT);
   }
  }
 
@@ -1962,7 +1959,7 @@ void qlcnic_83xx_napi_disable(struct qlcnic_adapter *adapter)
 int qlcnic_83xx_napi_add(struct qlcnic_adapter *adapter,
     struct net_device *netdev)
 {
- int ring, max_sds_rings, temp;
+ int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
@@ -1970,25 +1967,22 @@ int qlcnic_83xx_napi_add(struct qlcnic_adapter *adapter,
  if (qlcnic_alloc_sds_rings(recv_ctx, adapter->max_sds_rings))
   return -ENOMEM;
 
- max_sds_rings = adapter->max_sds_rings;
  for (ring = 0; ring < adapter->max_sds_rings; ring++) {
   sds_ring = &recv_ctx->sds_rings[ring];
   if (adapter->flags & QLCNIC_MSIX_ENABLED) {
-   if (!(adapter->flags & QLCNIC_TX_INTR_SHARED)) {
+   if (!(adapter->flags & QLCNIC_TX_INTR_SHARED))
     netif_napi_add(netdev, &sds_ring->napi,
             qlcnic_83xx_rx_poll,
-            QLCNIC_NETDEV_WEIGHT * 2);
-   } else {
-    temp = QLCNIC_NETDEV_WEIGHT / max_sds_rings;
+            NAPI_POLL_WEIGHT);
+   else
     netif_napi_add(netdev, &sds_ring->napi,
             qlcnic_83xx_msix_sriov_vf_poll,
-            temp);
-   }
+            NAPI_POLL_WEIGHT);
 
   } else {
    netif_napi_add(netdev, &sds_ring->napi,
            qlcnic_83xx_poll,
-           QLCNIC_NETDEV_WEIGHT / max_sds_rings);
+           NAPI_POLL_WEIGHT);
   }
  }
 
@@ -2003,7 +1997,7 @@ int qlcnic_83xx_napi_add(struct qlcnic_adapter *adapter,
    tx_ring = &adapter->tx_ring[ring];
    netif_napi_add(netdev, &tx_ring->napi,
            qlcnic_83xx_msix_tx_poll,
-           QLCNIC_NETDEV_WEIGHT);
+           NAPI_POLL_WEIGHT);
   }
  }
 
-- 
1.7.1