From fb8451d605423965d6a2bc7080e78749e94bf058 Mon Sep 17 00:00:00 2001
From: Larry Woodman <lwoodman@redhat.com>
Date: Wed, 4 Jun 2014 19:55:35 -0400
Subject: [kernel] futex: prevent requeue pi on same futex

Message-id: <1401911738-28010-2-git-send-email-lwoodman@redhat.com>
Patchwork-id: 82564
O-Subject: [RHEL7.1 PATCH 1/4] futex-prevent-requeue-pi-on-same-futex.patch futex
Bugzilla: 1104520
CVE: CVE-2014-3153
RH-Acked-by: Petr Matousek <pmatouse@redhat.com>
RH-Acked-by: Rafael Aquini <aquini@redhat.com>

From Thomas Gleixner <tglx@linutronix.de>
 Commit: 7fb9d98d427d9764eb7bf534addf273a58c5f656
 Date: Tue, 3 Jun 2014 12:27:06 +0000
 Subject: [PATCH 1/4] futex-prevent-requeue-pi-on-same-futex.patch futex:

  Forbid uaddr == uaddr2 in futex_requeue(..., requeue_pi=1)
 If uaddr == uaddr2, then we have broken the rule of only requeueing
 from a non-pi futex to a pi futex with this call. If we attempt this,
 then dangling pointers may be left for rt_waiter resulting in an
 exploitable condition.

 This change brings futex_requeue() into line with
 futex_wait_requeue_pi() which performs the same check as per commit
 6f7b0a2a5 (futex: Forbid uaddr == uaddr2 in futex_wait_requeue_pi())

 [ tglx: Compare the resulting keys as well, as uaddrs might be
        different depending on the mapping ]

 Reported-by: Pinkie Pie
 Signed-off-by: Will Drewry <wad@chromium.org>
 Signed-off-by: Kees Cook <keescook@chromium.org>
 Cc: stable@vger.kernel.org
 Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/futex.c b/kernel/futex.c
index baece19..e67c01d 100644
--- a/kernel/futex.c
+++ b/kernel/futex.c
@@ -1409,6 +1409,13 @@ static int futex_requeue(u32 __user *uaddr1, unsigned int flags,
 
  if (requeue_pi) {
   /*
+   * Requeue PI only works on two distinct uaddrs. This
+   * check is only valid for private futexes. See below.
+   */
+  if (uaddr1 == uaddr2)
+   return -EINVAL;
+
+  /*
    * requeue_pi requires a pi_state, try to allocate it now
    * without any locks in case it fails.
    */
@@ -1446,6 +1453,15 @@ retry:
  if (unlikely(ret != 0))
   goto out_put_key1;
 
+ /*
+  * The check above which compares uaddrs is not sufficient for
+  * shared futexes. We need to compare the keys:
+  */
+ if (requeue_pi && match_futex(&key1, &key2)) {
+  ret = -EINVAL;
+  goto out_put_keys;
+ }
+
  hb1 = hash_futex(&key1);
  hb2 = hash_futex(&key2);
 
@@ -2481,6 +2497,15 @@ static int futex_wait_requeue_pi(u32 __user *uaddr, unsigned int flags,
  if (ret)
   goto out_key2;
 
+ /*
+  * The check above which compares uaddrs is not sufficient for
+  * shared futexes. We need to compare the keys:
+  */
+ if (match_futex(&q.key, &key2)) {
+  ret = -EINVAL;
+  goto out_put_keys;
+ }
+
  /* Queue the futex_q, drop the hb lock, wait for wakeup. */
  futex_wait_queue_me(hb, &q, to);
 
-- 
1.7.1