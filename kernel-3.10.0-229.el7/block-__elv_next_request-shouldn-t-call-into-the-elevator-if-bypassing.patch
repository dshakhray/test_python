From 6bdbdebf748faabeaccbb74bd0cd6d6a8432ad3a Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:53 -0400
Subject: [block] __elv_next_request() shouldn't call into the elevator if bypassing

Message-id: <1402670238-13916-126-git-send-email-snitzer@redhat.com>
Patchwork-id: 83832
O-Subject: [RHEL7.1 PATCH 125/150] block: __elv_next_request() shouldn't call into the elevator if bypassing
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 556ee818c06f37b2e583af0363e6b16d0e0270de
Author: Tejun Heo <tj@kernel.org>
Date:   Wed Jan 29 14:56:16 2014 -0700

    block: __elv_next_request() shouldn't call into the elevator if bypassing

    request_queue bypassing is used to suppress higher-level function of a
    request_queue so that they can be switched, reconfigured and shut
    down.  A request_queue does the followings while bypassing.

    * bypasses elevator and io_cq association and queues requests directly
      to the FIFO dispatch queue.

    * bypasses block cgroup request_list lookup and always uses the root
      request_list.

    Once confirmed to be bypassing, specific elevator and block cgroup
    policy implementations can assume that nothing is in flight for them
    and perform various operations which would be dangerous otherwise.

    Such confirmation is acheived by short-circuiting all new requests
    directly to the dispatch queue and waiting for all the requests which
    were issued before to finish.  Unfortunately, while the request
    allocating and draining sides were properly handled, we forgot to
    actually plug the request dispatch path.  Even after bypassing mode is
    confirmed, if the attached driver tries to fetch a request and the
    dispatch queue is empty, __elv_next_request() would invoke the current
    elevator's elevator_dispatch_fn() callback.  As all in-flight requests
    were drained, the elevator wouldn't contain any request but once
    bypass is confirmed we don't even know whether the elevator is even
    there.  It might be in the process of being switched and half torn
    down.

    Frank Mayhar reports that this actually happened while switching
    elevators, leading to an oops.

    Let's fix it by making __elv_next_request() avoid invoking the
    elevator_dispatch_fn() callback if the queue is bypassing.  It already
    avoids invoking the callback if the queue is dying.  As a dying queue
    is guaranteed to be bypassing, we can simply replace blk_queue_dying()
    check with blk_queue_bypass().

    Reported-by: Frank Mayhar <fmayhar@google.com>
    References: http://lkml.kernel.org/g/1390319905.20232.38.camel@bobble.lax.corp.google.com
    Cc: stable@vger.kernel.org
    Tested-by: Frank Mayhar <fmayhar@google.com>

    Signed-off-by: Jens Axboe <axboe@kernel.dk>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk.h b/block/blk.h
index 70d1b2f..45385e9 100644
--- a/block/blk.h
+++ b/block/blk.h
@@ -116,7 +116,7 @@ static inline struct request *__elv_next_request(struct request_queue *q)
    q->flush_queue_delayed = 1;
    return NULL;
   }
-  if (unlikely(blk_queue_dying(q)) ||
+  if (unlikely(blk_queue_bypass(q)) ||
       !q->elevator->type->ops.elevator_dispatch_fn(q, 0))
    return NULL;
  }
-- 
1.7.1