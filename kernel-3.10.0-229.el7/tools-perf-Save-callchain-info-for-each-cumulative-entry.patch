From 6030be3ece1338adf5aec4b0c954d5cdaf8940d3 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:07 -0400
Subject: [tools] perf: Save callchain info for each cumulative entry

Message-id: <1410181752-25631-243-git-send-email-jolsa@redhat.com>
Patchwork-id: 91921
O-Subject: [PATCH RHEL7.1 BZ1134356 242/307] perf tools: Save callchain info for each cumulative entry
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit be7f855a3eebe07f797b9e4a43bf59bab8ca3dbe
Author: Namhyung Kim <namhyung@kernel.org>
Date: Thu Dec 26 17:44:10 2013 +0900

description
===========
When accumulating callchain entry, also save current snapshot of the
chain so that it can show the rest of the chain.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index bf03db5..c6f5f52 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -738,6 +738,14 @@ iter_add_single_cumulative_entry(struct hist_entry_iter *iter,
  iter->he = he;
  he_cache[iter->curr++] = he;
 
+ callchain_append(he->callchain, &callchain_cursor, sample->period);
+
+ /*
+  * We need to re-initialize the cursor since callchain_append()
+  * advanced the cursor to the end.
+  */
+ callchain_cursor_commit(&callchain_cursor);
+
  /*
   * The iter->he will be over-written after ->add_next_entry()
   * called so inc stats for the original entry now.
@@ -760,8 +768,6 @@ iter_next_cumulative_entry(struct hist_entry_iter *iter,
  if (node == NULL)
   return 0;
 
- callchain_cursor_advance(&callchain_cursor);
-
  return fill_callchain_info(al, node, iter->hide_unresolved);
 }
 
@@ -785,6 +791,11 @@ iter_add_next_cumulative_entry(struct hist_entry_iter *iter,
   .parent = iter->parent,
  };
  int i;
+ struct callchain_cursor cursor;
+
+ callchain_cursor_snapshot(&cursor, &callchain_cursor);
+
+ callchain_cursor_advance(&callchain_cursor);
 
  /*
   * Check if there's duplicate entries in the callchain.
@@ -804,6 +815,7 @@ iter_add_next_cumulative_entry(struct hist_entry_iter *iter,
  iter->he = he;
  he_cache[iter->curr++] = he;
 
+ callchain_append(he->callchain, &cursor, sample->period);
  return 0;
 }
 
-- 
1.7.1