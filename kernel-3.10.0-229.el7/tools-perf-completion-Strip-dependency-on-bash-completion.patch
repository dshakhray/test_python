From 5636cea48b9ac05c4fa0a0b290c85bfae7a37489 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:24:35 -0400
Subject: [tools] perf/completion: Strip dependency on bash-completion

Message-id: <1408462094-14194-107-git-send-email-jolsa@redhat.com>
Patchwork-id: 88072
O-Subject: [PATCH RHEL7.1 BZ1131394 106/325] perf completion: Strip dependency on bash-completion
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit c3fb6717e90049b93d0f5f5714a4d878799d89c2
Author: Ramkumar Ramachandra <artagnon@gmail.com>
Date: Thu Jul 4 18:11:30 2013 +0530

description
===========
The bash-completion package defines the _get_comp_words_by_ref function.
There is no need to depend on it, as we can reimplement it like git.git
has.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/bash_completion b/tools/perf/bash_completion
index 35fdda1..ee9c6d8 100644
--- a/tools/perf/bash_completion
+++ b/tools/perf/bash_completion
@@ -1,5 +1,81 @@
 # perf completion
 
+# Taken from git.git's completion script.
+__my_reassemble_comp_words_by_ref()
+{
+ local exclude i j first
+ # Which word separators to exclude?
+ exclude="${1//[^$COMP_WORDBREAKS]}"
+ cword_=$COMP_CWORD
+ if [ -z "$exclude" ]; then
+  words_=("${COMP_WORDS[@]}")
+  return
+ fi
+ # List of word completion separators has shrunk;
+ # re-assemble words to complete.
+ for ((i=0, j=0; i < ${#COMP_WORDS[@]}; i++, j++)); do
+  # Append each nonempty word consisting of just
+  # word separator characters to the current word.
+  first=t
+  while
+   [ $i -gt 0 ] &&
+   [ -n "${COMP_WORDS[$i]}" ] &&
+   # word consists of excluded word separators
+   [ "${COMP_WORDS[$i]//[^$exclude]}" = "${COMP_WORDS[$i]}" ]
+  do
+   # Attach to the previous token,
+   # unless the previous token is the command name.
+   if [ $j -ge 2 ] && [ -n "$first" ]; then
+    ((j--))
+   fi
+   first=
+   words_[$j]=${words_[j]}${COMP_WORDS[i]}
+   if [ $i = $COMP_CWORD ]; then
+    cword_=$j
+   fi
+   if (($i < ${#COMP_WORDS[@]} - 1)); then
+    ((i++))
+   else
+    # Done.
+    return
+   fi
+  done
+  words_[$j]=${words_[j]}${COMP_WORDS[i]}
+  if [ $i = $COMP_CWORD ]; then
+   cword_=$j
+  fi
+ done
+}
+
+type _get_comp_words_by_ref &>/dev/null ||
+_get_comp_words_by_ref()
+{
+ local exclude cur_ words_ cword_
+ if [ "$1" = "-n" ]; then
+  exclude=$2
+  shift 2
+ fi
+ __my_reassemble_comp_words_by_ref "$exclude"
+ cur_=${words_[cword_]}
+ while [ $# -gt 0 ]; do
+  case "$1" in
+  cur)
+   cur=$cur_
+   ;;
+  prev)
+   prev=${words_[$cword_-1]}
+   ;;
+  words)
+   words=("${words_[@]}")
+   ;;
+  cword)
+   cword=$cword_
+   ;;
+  esac
+  shift
+ done
+}
+
 type __ltrim_colon_completions &>/dev/null ||
 __ltrim_colon_completions()
 {
@@ -19,12 +95,7 @@ _perf()
  local cur prev cmd
 
  COMPREPLY=()
- if function_exists _get_comp_words_by_ref; then
-  _get_comp_words_by_ref -n : cur prev
- else
-  cur=$(_get_cword :)
-  prev=${COMP_WORDS[COMP_CWORD-1]}
- fi
+ _get_comp_words_by_ref -n : cur prev
 
  cmd=${COMP_WORDS[0]}
 
-- 
1.7.1