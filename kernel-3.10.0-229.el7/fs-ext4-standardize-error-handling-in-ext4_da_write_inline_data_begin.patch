From 8d7961ce71252dad2828d1203a906fc32d301647 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:08 -0400
Subject: [fs] ext4: standardize error handling in ext4_da_write_inline_data_begin()

Message-id: <1414058125-4183-95-git-send-email-lczerner@redhat.com>
Patchwork-id: 98230
O-Subject: [RHEL 7.1 PATCH v2 094/171] ext4: standardize error handling in ext4_da_write_inline_data_begin()
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 52e4477758eef45c2fa28b087abf83847126bc28

 The function has a bit non-standard (for ext4) error recovery in that it
 used a mix of 'out' labels and testing for 'handle' being NULL. There
 isn't a good reason for that in the function so clean it up a bit.

 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inline.c b/fs/ext4/inline.c
index c1a1d08..8625d10 100644
--- a/fs/ext4/inline.c
+++ b/fs/ext4/inline.c
@@ -859,7 +859,6 @@ retry_journal:
  handle = ext4_journal_start(inode, EXT4_HT_INODE, 1);
  if (IS_ERR(handle)) {
   ret = PTR_ERR(handle);
-  handle = NULL;
   goto out;
  }
 
@@ -869,7 +868,7 @@ retry_journal:
  if (inline_size >= pos + len) {
   ret = ext4_prepare_inline_data(handle, inode, pos + len);
   if (ret && ret != -ENOSPC)
-   goto out;
+   goto out_journal;
  }
 
  if (ret == -ENOSPC) {
@@ -878,7 +877,6 @@ retry_journal:
            flags,
            fsdata);
   ext4_journal_stop(handle);
-  handle = NULL;
   if (ret == -ENOSPC &&
       ext4_should_retry_alloc(inode->i_sb, &retries))
    goto retry_journal;
@@ -894,7 +892,7 @@ retry_journal:
  page = grab_cache_page_write_begin(mapping, 0, flags);
  if (!page) {
   ret = -ENOMEM;
-  goto out;
+  goto out_journal;
  }
 
  down_read(&EXT4_I(inode)->xattr_sem);
@@ -911,16 +909,15 @@ retry_journal:
 
  up_read(&EXT4_I(inode)->xattr_sem);
  *pagep = page;
- handle = NULL;
  brelse(iloc.bh);
  return 1;
 out_release_page:
  up_read(&EXT4_I(inode)->xattr_sem);
  unlock_page(page);
  page_cache_release(page);
+out_journal:
+ ext4_journal_stop(handle);
 out:
- if (handle)
-  ext4_journal_stop(handle);
  brelse(iloc.bh);
  return ret;
 }
-- 
1.7.1