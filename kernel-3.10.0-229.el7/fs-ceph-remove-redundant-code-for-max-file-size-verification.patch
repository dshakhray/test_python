From e56c9421ff030934c03100207ced9c85a6400878 Mon Sep 17 00:00:00 2001
From: Ilya Dryomov <ilya.dryomov@inktank.com>
Date: Tue, 18 Nov 2014 15:49:42 -0500
Subject: [fs] ceph: remove redundant code for max file size verification
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1416325805-26490-28-git-send-email-idryomov@redhat.com>
Patchwork-id: 100220
O-Subject: [RHEL7.1 PATCH 27/50] ceph: remove redundant code for max file size verification
Bugzilla: 1165232
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Sage Weil <sweil@redhat.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>

From: Chao Yu <chao2.yu@samsung.com>

Both ceph_update_writeable_page and ceph_setattr will verify file size
with max size ceph supported.
There are two caller for ceph_update_writeable_page, ceph_write_begin and
ceph_page_mkwrite. For ceph_write_begin, we have already verified the size in
generic_write_checks of ceph_write_iter; for ceph_page_mkwrite, we have no
chance to change file size when mmap. Likewise we have already verified the size
in inode_change_ok when we call ceph_setattr.
So let's remove the redundant code for max file size verification.

Signed-off-by: Chao Yu <chao2.yu@samsung.com>
Reviewed-by: Yan, Zheng <zyan@redhat.com>
(cherry picked from commit a4483e8a424d76bc1dfacdd94e739fba29d7f83f)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 fs/ceph/inode.c [ ceph acls not in RHEL ]
---

diff --git a/fs/ceph/addr.c b/fs/ceph/addr.c
index 5bccccb..a6ef424 100644
--- a/fs/ceph/addr.c
+++ b/fs/ceph/addr.c
@@ -1048,12 +1048,6 @@ retry_locked:
  /* past end of file? */
  i_size = inode->i_size;   /* caller holds i_mutex */
 
- if (i_size + len > inode->i_sb->s_maxbytes) {
-  /* file is too big */
-  r = -EINVAL;
-  goto fail;
- }
-
  if (page_off >= i_size ||
      (pos_in_page == 0 && (pos+len) >= i_size &&
       end_in_page - pos_in_page != PAGE_CACHE_SIZE)) {
@@ -1071,9 +1065,6 @@ retry_locked:
  if (r < 0)
   goto fail_nosnap;
  goto retry_locked;
-
-fail:
- up_read(&mdsc->snap_rwsem);
 fail_nosnap:
  unlock_page(page);
  return r;
diff --git a/fs/ceph/inode.c b/fs/ceph/inode.c
index af3f489..c229616 100644
--- a/fs/ceph/inode.c
+++ b/fs/ceph/inode.c
@@ -1799,10 +1799,6 @@ int ceph_setattr(struct dentry *dentry, struct iattr *attr)
  if (ia_valid & ATTR_SIZE) {
   dout("setattr %p size %lld -> %lld\n", inode,
        inode->i_size, attr->ia_size);
-  if (attr->ia_size > inode->i_sb->s_maxbytes) {
-   err = -EINVAL;
-   goto out;
-  }
   if ((issued & CEPH_CAP_FILE_EXCL) &&
       attr->ia_size > inode->i_size) {
    inode->i_size = attr->ia_size;
@@ -1876,10 +1872,6 @@ int ceph_setattr(struct dentry *dentry, struct iattr *attr)
  if (mask & CEPH_SETATTR_SIZE)
   __ceph_do_pending_vmtruncate(inode);
  return err;
-out:
- spin_unlock(&ci->i_ceph_lock);
- ceph_mdsc_put_request(req);
- return err;
 }
 
 /*
-- 
1.7.1