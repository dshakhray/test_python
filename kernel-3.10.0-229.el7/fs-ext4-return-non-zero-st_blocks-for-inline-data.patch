From 540d861385e5a78084a1340346c70294349d52d6 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:53 -0400
Subject: [fs] ext4: return non-zero st_blocks for inline data

Message-id: <1414058125-4183-80-git-send-email-lczerner@redhat.com>
Patchwork-id: 98179
O-Subject: [RHEL 7.1 PATCH v2 079/171] ext4: return non-zero st_blocks for inline data
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Andreas Dilger <andreas.dilger@intel.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 9206c561554c948111d3cf6fc563a0beaaf790b3

 Return a non-zero st_blocks to userspace for statfs() and friends.
 Some versions of tar will assume that files with st_blocks == 0
 do not contain any data and will skip reading them entirely.

 Signed-off-by: Andreas Dilger <andreas.dilger@intel.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index c124925..fdce9b3 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -4710,6 +4710,15 @@ int ext4_getattr(struct vfsmount *mnt, struct dentry *dentry,
  generic_fillattr(inode, stat);
 
  /*
+  * If there is inline data in the inode, the inode will normally not
+  * have data blocks allocated (it may have an external xattr block).
+  * Report at least one sector for such files, so tools like tar, rsync,
+  * others doen't incorrectly think the file is completely sparse.
+  */
+ if (unlikely(ext4_has_inline_data(inode)))
+  stat->blocks += (stat->size + 511) >> 9;
+
+ /*
   * We can't update i_blocks if the block allocation is delayed
   * otherwise in the case of system crash before the real block
   * allocation is done, we will have i_blocks inconsistent with
@@ -4720,9 +4729,8 @@ int ext4_getattr(struct vfsmount *mnt, struct dentry *dentry,
   * blocks for this file.
   */
  delalloc_blocks = EXT4_C2B(EXT4_SB(inode->i_sb),
-    EXT4_I(inode)->i_reserved_data_blocks);
-
- stat->blocks += delalloc_blocks << (inode->i_sb->s_blocksize_bits-9);
+       EXT4_I(inode)->i_reserved_data_blocks);
+ stat->blocks += delalloc_blocks << (inode->i_sb->s_blocksize_bits - 9);
  return 0;
 }
 
-- 
1.7.1