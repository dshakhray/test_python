From b748b21e9f060297d28f37a84321e024971071a4 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:32 -0400
Subject: [md] dm-mpath: fix IO hang due to logic bug in multipath_busy

Message-id: <1405543364-20901-29-git-send-email-snitzer@redhat.com>
Patchwork-id: 85908
O-Subject: [RHEL7.1 PATCH 28/40] dm mpath: fix IO hang due to logic bug in multipath_busy
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1117872

Upstream commit 7a7a3b45fed9a144dbf766ee842a4c5d0632b81d
Author: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
Date:   Tue Jul 8 00:55:14 2014 +0000

    dm mpath: fix IO hang due to logic bug in multipath_busy

    Commit e80991773 ("dm mpath: push back requests instead of queueing")
    modified multipath_busy() to return true if !pg_ready().  pg_ready()
    checks the current state of the multipath device and may return false
    even if a new IO is needed to change the state.

    Bart Van Assche reported that he had multipath IO lockup when he was
    performing cable pull tests.  Analysis showed that the multipath
    device had a single path group with both paths active, but that the
    path group itself was not active.  During the multipath device state
    transitions 'queue_io' got set but nothing could clear it.  Clearing
    'queue_io' only happens in __choose_pgpath(), but it won't be called
    if multipath_busy() returns true due to pg_ready() returning false
    when 'queue_io' is set.

    As such the !pg_ready() check in multipath_busy() is wrong because new
    IO will not be sent to multipath target and the multipath state change
    won't happen.  That results in multipath IO lockup.

    The intent of multipath_busy() is to avoid unnecessary cycles of
    dequeue + request_fn + requeue if it is known that the multipath
    device will requeue.

    Such "busy" situations would be:
      - path group is being activated
      - there is no path and the multipath is setup to requeue if no path

    Fix multipath_busy() to return "busy" early only for these specific
    situations.

    Reported-by: Bart Van Assche <bvanassche@acm.org>
    Tested-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org # v3.15

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-mpath.c b/drivers/md/dm-mpath.c
index d51c9d7..f6a228d 100644
--- a/drivers/md/dm-mpath.c
+++ b/drivers/md/dm-mpath.c
@@ -1631,8 +1631,9 @@ static int multipath_busy(struct dm_target *ti)
 
  spin_lock_irqsave(&m->lock, flags);
 
- /* pg_init in progress, requeue until done */
- if (!pg_ready(m)) {
+ /* pg_init in progress or no paths available */
+ if (m->pg_init_in_progress ||
+     (!m->nr_valid_paths && m->queue_if_no_path)) {
   busy = 1;
   goto out;
  }
-- 
1.7.1