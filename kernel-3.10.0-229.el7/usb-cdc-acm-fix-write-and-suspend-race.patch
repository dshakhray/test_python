From d71321a3c66e6a91831d674bdc884ecef9fafd6a Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:08:59 -0400
Subject: [usb] cdc-acm: fix write and suspend race

Message-id: <1410887463-20674-468-git-send-email-dzickus@redhat.com>
Patchwork-id: 95501
O-Subject: [RHEL7 PATCH 467/591] USB: cdc-acm: fix write and suspend race
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 5a345c20c17d87099224a4be12e69e5bd7023dca
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon May 26 19:23:36 2014 +0200

    USB: cdc-acm: fix write and suspend race

    Fix race between write() and suspend() which could lead to writes being
    dropped (or I/O while suspended) if the device is runtime suspended
    while a write request is being processed.

    Specifically, suspend() releases the write_lock after determining the
    device is idle but before incrementing the susp_count, thus leaving a
    window where a concurrent write() can submit an urb.

    Fixes: 11ea859d64b6 ("USB: additional power savings for cdc-acm devices
    that support remote wakeup")

    Cc: <stable@vger.kernel.org>        # v2.6.27
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/class/cdc-acm.c b/drivers/usb/class/cdc-acm.c
index 904efb6..3bd4226 100644
--- a/drivers/usb/class/cdc-acm.c
+++ b/drivers/usb/class/cdc-acm.c
@@ -1514,18 +1514,15 @@ static int acm_suspend(struct usb_interface *intf, pm_message_t message)
  struct acm *acm = usb_get_intfdata(intf);
  int cnt;
 
+ spin_lock_irq(&acm->read_lock);
+ spin_lock(&acm->write_lock);
  if (PMSG_IS_AUTO(message)) {
-  int b;
-
-  spin_lock_irq(&acm->write_lock);
-  b = acm->transmitting;
-  spin_unlock_irq(&acm->write_lock);
-  if (b)
+  if (acm->transmitting) {
+   spin_unlock(&acm->write_lock);
+   spin_unlock_irq(&acm->read_lock);
    return -EBUSY;
+  }
  }
-
- spin_lock_irq(&acm->read_lock);
- spin_lock(&acm->write_lock);
  cnt = acm->susp_count++;
  spin_unlock(&acm->write_lock);
  spin_unlock_irq(&acm->read_lock);
-- 
1.7.1