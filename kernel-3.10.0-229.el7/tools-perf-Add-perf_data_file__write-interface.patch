From b265cd2ee2237210d2d467c1c0989f7e6ee6efaf Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:49:05 -0400
Subject: [tools] perf: Add perf_data_file__write interface

Message-id: <1408953210-26343-58-git-send-email-jolsa@redhat.com>
Patchwork-id: 88761
O-Subject: [PATCH RHEL7.1 BZ1133083 057/322] perf tools: Add perf_data_file__write interface
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 6f9a317f2a2d4950880ecfa7eea53ed79f85255f
Author: Jiri Olsa <jolsa@redhat.com>
Date: Thu Nov 28 11:30:17 2013 +0100

description
===========
Adding perf_data_file__write interface to centralize output to files.
The function prototype is:

  ssize_t perf_data_file__write(struct perf_data_file *file,
                                void *buf, size_t size);

Returns number of bytes written or -1 in case of error.

NOTE: Also indenting 'struct perf_data_file' members, no functional
      change done.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/data.c b/tools/perf/util/data.c
index 7d09faf..1fbcd8b 100644
--- a/tools/perf/util/data.c
+++ b/tools/perf/util/data.c
@@ -118,3 +118,9 @@ void perf_data_file__close(struct perf_data_file *file)
 {
  close(file->fd);
 }
+
+ssize_t perf_data_file__write(struct perf_data_file *file,
+         void *buf, size_t size)
+{
+ return writen(file->fd, buf, size);
+}
diff --git a/tools/perf/util/data.h b/tools/perf/util/data.h
index 8c2df80..2b15d0c 100644
--- a/tools/perf/util/data.h
+++ b/tools/perf/util/data.h
@@ -9,12 +9,12 @@ enum perf_data_mode {
 };
 
 struct perf_data_file {
- const char *path;
- int fd;
- bool is_pipe;
- bool force;
- unsigned long size;
- enum perf_data_mode mode;
+ const char  *path;
+ int    fd;
+ bool    is_pipe;
+ bool    force;
+ unsigned long   size;
+ enum perf_data_mode  mode;
 };
 
 static inline bool perf_data_file__is_read(struct perf_data_file *file)
@@ -44,5 +44,7 @@ static inline unsigned long perf_data_file__size(struct perf_data_file *file)
 
 int perf_data_file__open(struct perf_data_file *file);
 void perf_data_file__close(struct perf_data_file *file);
+ssize_t perf_data_file__write(struct perf_data_file *file,
+         void *buf, size_t size);
 
 #endif /* __PERF_DATA_H */
-- 
1.7.1