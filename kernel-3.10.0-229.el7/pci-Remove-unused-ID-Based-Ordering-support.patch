From 0d8f29482c52873e80e6cca937e159b8ece13e6a Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sat, 19 Jul 2014 04:27:52 -0400
Subject: [pci] Remove unused ID-Based Ordering support

Message-id: <20140719042752.19438.82460.stgit@gir.stowe>
Patchwork-id: 86011
O-Subject: [RHEL7.1 PATCH 49/81] PCI: Remove unused ID-Based Ordering support
Bugzilla: 1110895
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110895
Upstream Status: 7c2dd2d7cfabdb37875c5e481a0c3cc5962bb0b6

commit 7c2dd2d7cfabdb37875c5e481a0c3cc5962bb0b6
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Fri Jan 10 14:01:11 2014 -0700

    PCI: Remove unused ID-Based Ordering support

    My philosophy is unused code is dead code.  And dead code is subject to bit
    rot and is a likely source of bugs.  Use it or lose it.

    This reverts b48d4425b602 ("PCI: add ID-based ordering enable/disable
    support"), removing these interfaces:

        pci_enable_ido()
        pci_disable_ido()

    [bhelgaas: split to separate patch, also remove prototypes from pci.h]
    Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: Jesse Barnes <jbarnes@virtuousgeek.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index af3db6e..ab8e403 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -2180,46 +2180,6 @@ void pci_configure_ari(struct pci_dev *dev)
  }
 }
 
-/**
- * pci_enable_ido - enable ID-based Ordering on a device
- * @dev: the PCI device
- * @type: which types of IDO to enable
- *
- * Enable ID-based ordering on @dev.  @type can contain the bits
- * %PCI_EXP_IDO_REQUEST and/or %PCI_EXP_IDO_COMPLETION to indicate
- * which types of transactions are allowed to be re-ordered.
- */
-void pci_enable_ido(struct pci_dev *dev, unsigned long type)
-{
- u16 ctrl = 0;
-
- if (type & PCI_EXP_IDO_REQUEST)
-  ctrl |= PCI_EXP_DEVCTL2_IDO_REQ_EN;
- if (type & PCI_EXP_IDO_COMPLETION)
-  ctrl |= PCI_EXP_DEVCTL2_IDO_CMP_EN;
- if (ctrl)
-  pcie_capability_set_word(dev, PCI_EXP_DEVCTL2, ctrl);
-}
-EXPORT_SYMBOL(pci_enable_ido);
-
-/**
- * pci_disable_ido - disable ID-based ordering on a device
- * @dev: the PCI device
- * @type: which types of IDO to disable
- */
-void pci_disable_ido(struct pci_dev *dev, unsigned long type)
-{
- u16 ctrl = 0;
-
- if (type & PCI_EXP_IDO_REQUEST)
-  ctrl |= PCI_EXP_DEVCTL2_IDO_REQ_EN;
- if (type & PCI_EXP_IDO_COMPLETION)
-  ctrl |= PCI_EXP_DEVCTL2_IDO_CMP_EN;
- if (ctrl)
-  pcie_capability_clear_word(dev, PCI_EXP_DEVCTL2, ctrl);
-}
-EXPORT_SYMBOL(pci_disable_ido);
-
 static int pci_acs_enable;
 
 /**
diff --git a/include/linux/pci.h b/include/linux/pci.h
index d439aab..bd94582 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1029,11 +1029,6 @@ int pci_save_vc_state(struct pci_dev *dev);
 void pci_restore_vc_state(struct pci_dev *dev);
 void pci_allocate_vc_save_buffers(struct pci_dev *dev);
 
-#define PCI_EXP_IDO_REQUEST (1<<0)
-#define PCI_EXP_IDO_COMPLETION (1<<1)
-void pci_enable_ido(struct pci_dev *dev, unsigned long type);
-void pci_disable_ido(struct pci_dev *dev, unsigned long type);
-
 /* For use by arch with custom probe code */
 void set_pcie_port_type(struct pci_dev *pdev);
 void set_pcie_hotplug_bridge(struct pci_dev *pdev);
@@ -1469,14 +1464,6 @@ static inline int pci_enable_wake(struct pci_dev *dev, pci_power_t state,
  return 0;
 }
 
-static inline void pci_enable_ido(struct pci_dev *dev, unsigned long type)
-{
-}
-
-static inline void pci_disable_ido(struct pci_dev *dev, unsigned long type)
-{
-}
-
 static inline int pci_request_regions(struct pci_dev *dev, const char *res_name)
 {
  return -EIO;
-- 
1.7.1