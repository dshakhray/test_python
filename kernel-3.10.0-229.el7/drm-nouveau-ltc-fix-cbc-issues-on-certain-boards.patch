From 6544036bc1d3f44463a01b4008bba14681f1f3a7 Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 17 Dec 2014 21:39:08 -0500
Subject: [drm] nouveau/ltc: fix cbc issues on certain boards

Message-id: <1418852380-13061-58-git-send-email-rclark@redhat.com>
Patchwork-id: 102193
O-Subject: [RHEL7 drm 57/89] drm/nouveau/ltc: fix cbc issues on certain boards
Bugzilla: 1173317
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1173317
Upstream: 3.17

commit 6095307344a49a71f72076b75660223a66c76d2d

Author:     Ben Skeggs <bskeggs@redhat.com>
AuthorDate: Wed Oct 22 06:47:09 2014 +1000
Commit:     Rob Clark <rclark@redhat.com>
CommitDate: Wed Dec 10 17:45:32 2014 -0500

    drm/nouveau/ltc: fix cbc issues on certain boards

    commit fe3d9c4b87bb98222a502cc585844a0b950786fb upstream

    A mismatch between FB and LTC's idea of how big a large page is causes
    issues such as black "holes" in rendering to occur on some boards
    (those where LTC is configured for 64KiB large pages) when compression
    is used.

    Confirmed to fix at least the GK107 MBP.

    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

Signed-off-by: Rob Clark <rclark@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/core/subdev/bar/nvc0.c b/drivers/gpu/drm/nouveau/core/subdev/bar/nvc0.c
index ca8139b..016ac9a 100644
--- a/drivers/gpu/drm/nouveau/core/subdev/bar/nvc0.c
+++ b/drivers/gpu/drm/nouveau/core/subdev/bar/nvc0.c
@@ -200,7 +200,6 @@ nvc0_bar_init(struct nouveau_object *object)
 
  nv_mask(priv, 0x000200, 0x00000100, 0x00000000);
  nv_mask(priv, 0x000200, 0x00000100, 0x00000100);
- nv_mask(priv, 0x100c80, 0x00000001, 0x00000000);
 
  nv_wr32(priv, 0x001704, 0x80000000 | priv->bar[1].mem->addr >> 12);
  if (priv->bar[0].mem)
diff --git a/drivers/gpu/drm/nouveau/core/subdev/fb/nvc0.c b/drivers/gpu/drm/nouveau/core/subdev/fb/nvc0.c
index 0670ae3..0a6ca9f 100644
--- a/drivers/gpu/drm/nouveau/core/subdev/fb/nvc0.c
+++ b/drivers/gpu/drm/nouveau/core/subdev/fb/nvc0.c
@@ -60,6 +60,7 @@ nvc0_fb_init(struct nouveau_object *object)
 
  if (priv->r100c10_page)
   nv_wr32(priv, 0x100c10, priv->r100c10 >> 8);
+ nv_mask(priv, 0x100c80, 0x00000001, 0x00000000); /* 128KiB lpg */
  return 0;
 }
 
diff --git a/drivers/gpu/drm/nouveau/core/subdev/ltcg/gf100.c b/drivers/gpu/drm/nouveau/core/subdev/ltcg/gf100.c
index effe888..9454647 100644
--- a/drivers/gpu/drm/nouveau/core/subdev/ltcg/gf100.c
+++ b/drivers/gpu/drm/nouveau/core/subdev/ltcg/gf100.c
@@ -200,6 +200,7 @@ gf100_ltcg_init(struct nouveau_object *object)
 {
  struct nouveau_ltcg *ltcg = (struct nouveau_ltcg *)object;
  struct gf100_ltcg_priv *priv = (struct gf100_ltcg_priv *)ltcg;
+ u32 lpg128 = !(nv_rd32(priv, 0x100c80) & 0x00000001);
  int ret;
 
  ret = nouveau_ltcg_init(ltcg);
@@ -211,6 +212,7 @@ gf100_ltcg_init(struct nouveau_object *object)
  if (nv_device(ltcg)->card_type >= NV_E0)
   nv_wr32(priv, 0x17e000, priv->ltc_nr);
  nv_wr32(priv, 0x17e8d4, priv->tag_base);
+ nv_mask(priv, 0x17e8c0, 0x00000002, lpg128 ? 0x00000002 : 0x00000000);
  return 0;
 }
 
diff --git a/drivers/gpu/drm/nouveau/core/subdev/ltcg/gm107.c b/drivers/gpu/drm/nouveau/core/subdev/ltcg/gm107.c
index e79d0e8..48ca7a4 100644
--- a/drivers/gpu/drm/nouveau/core/subdev/ltcg/gm107.c
+++ b/drivers/gpu/drm/nouveau/core/subdev/ltcg/gm107.c
@@ -119,6 +119,7 @@ gm107_ltcg_init(struct nouveau_object *object)
 {
  struct nouveau_ltcg *ltcg = (struct nouveau_ltcg *)object;
  struct gf100_ltcg_priv *priv = (struct gf100_ltcg_priv *)ltcg;
+ u32 lpg128 = !(nv_rd32(priv, 0x100c80) & 0x00000001);
  int ret;
 
  ret = nouveau_ltcg_init(ltcg);
@@ -127,6 +128,7 @@ gm107_ltcg_init(struct nouveau_object *object)
 
  nv_wr32(priv, 0x17e27c, priv->ltc_nr);
  nv_wr32(priv, 0x17e278, priv->tag_base);
+ nv_mask(priv, 0x17e264, 0x00000002, lpg128 ? 0x00000002 : 0x00000000);
  return 0;
 }
 
-- 
1.7.1