From 3327199ef81f3d9edd60b38befa2e55784cef96a Mon Sep 17 00:00:00 2001
From: Dave Young <dyoung@redhat.com>
Date: Thu, 22 May 2014 02:43:15 -0400
Subject: [x86] boot: Add xloadflags bit for EFI runtime support on kexec

Message-id: <1400726607-13717-24-git-send-email-dyoung@redhat.com>
Patchwork-id: 80124
O-Subject: [RHEL7.1 PATCH 23/35] x86: Add xloadflags bit for EFI runtime support on kexec
Bugzilla: 1080109
RH-Acked-by: Chao WANG <chaowang@redhat.com>
RH-Acked-by: Vivek Goyal <vgoyal@redhat.com>

Resolves: bz1080109

Brew build:
https://brewweb.devel.redhat.com/taskinfo?taskID=7480539

Test: Tested kexec/kdump on HP workstation and qemu.

Upstream commit:
commit 456a29ddada79198c5965300e04103c40c481f62
Author: Dave Young <dyoung@redhat.com>
Date:   Fri Dec 20 18:02:20 2013 +0800

    x86: Add xloadflags bit for EFI runtime support on kexec

    Old kexec-tools can not load new kernels. The reason is kexec-tools does
    not fill efi_info in x86 setup header previously, thus EFI failed to
    initialize.  In new kexec-tools it will by default to fill efi_info and
    pass other EFI required infomation to 2nd kernel so kexec kernel EFI
    initialization can succeed finally.

    To prevent from breaking userspace, add a new xloadflags bit so
    kexec-tools can check the flag and switch to old logic.

    Signed-off-by: Dave Young <dyoung@redhat.com>
    Acked-by: Borislav Petkov <bp@suse.de>
    Tested-by: Toshi Kani <toshi.kani@hp.com>
    Signed-off-by: Matt Fleming <matt.fleming@intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/x86/boot.txt b/Documentation/x86/boot.txt
index 3840b6f..0989116 100644
--- a/Documentation/x86/boot.txt
+++ b/Documentation/x86/boot.txt
@@ -608,6 +608,9 @@ Protocol:       2.12+
  - If 1, the kernel supports the 64-bit EFI handoff entry point
           given at handover_offset + 0x200.
 
+  Bit 4 (read): XLF_EFI_KEXEC
+ - If 1, the kernel supports kexec EFI boot with EFI runtime support.
+
 Field name: cmdline_size
 Type:  read
 Offset/size: 0x238/4
diff --git a/arch/x86/boot/header.S b/arch/x86/boot/header.S
index 9ec06a1..ec3b8ba 100644
--- a/arch/x86/boot/header.S
+++ b/arch/x86/boot/header.S
@@ -391,7 +391,14 @@ xloadflags:
 #else
 # define XLF23 0
 #endif
-   .word XLF0 | XLF1 | XLF23
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_EFI) && defined(CONFIG_KEXEC)
+# define XLF4 XLF_EFI_KEXEC
+#else
+# define XLF4 0
+#endif
+
+   .word XLF0 | XLF1 | XLF23 | XLF4
 
 cmdline_size:   .long   COMMAND_LINE_SIZE-1     #length of the command line,
                                                 #added with boot protocol
diff --git a/arch/x86/include/uapi/asm/bootparam.h b/arch/x86/include/uapi/asm/bootparam.h
index 80c4cc2..b49c0cf 100644
--- a/arch/x86/include/uapi/asm/bootparam.h
+++ b/arch/x86/include/uapi/asm/bootparam.h
@@ -24,6 +24,7 @@
 #define XLF_CAN_BE_LOADED_ABOVE_4G (1<<1)
 #define XLF_EFI_HANDOVER_32  (1<<2)
 #define XLF_EFI_HANDOVER_64  (1<<3)
+#define XLF_EFI_KEXEC   (1<<4)
 
 #ifndef __ASSEMBLY__
 
-- 
1.7.1