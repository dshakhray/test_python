From 1dea3e8948f95a99197aedc8f2272685fd639bae Mon Sep 17 00:00:00 2001
From: Jeff Moyer <jmoyer@redhat.com>
Date: Tue, 3 Jun 2014 22:57:34 -0400
Subject: [fs] aio: fix plug memory disclosure and fix reqs_active accounting backport

Message-id: <x49a99tvbxd.fsf@segfault.boston.devel.redhat.com>
Patchwork-id: 5177
O-Subject: Re: [kernel team] [RHEL7 PATCH] aio: plug memory disclosure and fix reqs_active accounting
Bugzilla: 1094605
CVE: CVE-2014-0206

Mateusz Guzik <mguzik@redhat.com> writes:

> aio: plug memory disclosure and fix reqs_active accounting
>
> Security: CVE-2014-0206
>
> Previously the code failed to validate 'head' parameter (modifable by
> userspace) before use. In effect random memory pages could be disclosed
> to userspace. Fix the problem by making sure 'head' fits the range, like
> previous code did.
>
> Other part of the problem is userspace reading events on its own, which
> results in unreliable reqs_active counter. Fix the problem by
> decrementing the counter up on completion instead of reading.
>
> The problem was introduced with:
> commit a31ad380bed817aa25f8830ad23e1a0480fef797
> Author: Kent Overstreet <koverstreet@google.com>
> Date:   Tue May 7 16:18:45 2013 -0700
>
>     aio: make aio_read_evt() more efficient, convert to hrtimers
>
> Patch below was written by Benjamin LaHaise and backported by me
> (slight changes) to 3.10 kernel.

Before this patch, aio_read_events was responsible for decrementing
reqs_active.  As such, when there were no more processes waiting around
for events, free_ioctx would have to decrement the count itself.

After this patch, aio_complete does the decrementing of ctx->nr_active,
and then free_ioctx does it *again*.

Here is a completely untested patch that might fix it.  Jarod, you can
kick off a build with this while I do some testing or wait an hour or
two for me to do that--it's up to you.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/aio.c b/fs/aio.c
index 542a1ef..b061fb2 100644
--- a/fs/aio.c
+++ b/fs/aio.c
@@ -497,8 +497,6 @@ static void free_ioctx(struct kioctx *ctx)
     atomic_read(&ctx->reqs_active) <= 0);
 
   avail = (head <= ctx->tail ? ctx->tail : ctx->nr_events) - head;
-
-  atomic_sub(avail, &ctx->reqs_active);
   head += avail;
   head %= ctx->nr_events;
  }
-- 
1.7.1