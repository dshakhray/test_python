From ed98d8e35f31ac638d702f111346d1885bfb9fef Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:33:20 -0400
Subject: [fs] nfs: Ensure that we free existing layout segments if we get a new layout

Message-id: <1403796815-28580-15-git-send-email-steved@redhat.com>
Patchwork-id: 84848
O-Subject: [RHEL7.1 PATCH 14/29] NFSv4.1: Ensure that we free existing layout segments if we get a new layout
Bugzilla: 1111170
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

If the server returns a completely new layout stateid in response to our
LAYOUTGET, then make sure to free any existing layout segments.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upsteam Id: 78096ccac561ce2d89fbff1d1aa451bf4090a1a2
Bugzilla: 1111170
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/pnfs.c b/fs/nfs/pnfs.c
index 6e67ada..cb53d45 100644
--- a/fs/nfs/pnfs.c
+++ b/fs/nfs/pnfs.c
@@ -665,6 +665,17 @@ static bool pnfs_seqid_is_newer(u32 s1, u32 s2)
  return (s32)(s1 - s2) > 0;
 }
 
+static void
+pnfs_verify_layout_stateid(struct pnfs_layout_hdr *lo,
+  const nfs4_stateid *new,
+  struct list_head *free_me_list)
+{
+ if (nfs4_stateid_match_other(&lo->plh_stateid, new))
+  return;
+ /* Layout is new! Kill existing layout segments */
+ pnfs_mark_matching_lsegs_invalid(lo, free_me_list, NULL);
+}
+
 /* update lo->plh_stateid with new if is more recent */
 void
 pnfs_set_layout_stateid(struct pnfs_layout_hdr *lo, const nfs4_stateid *new,
@@ -1315,6 +1326,7 @@ pnfs_layout_process(struct nfs4_layoutget *lgp)
  struct nfs4_layoutget_res *res = &lgp->res;
  struct pnfs_layout_segment *lseg;
  struct inode *ino = lo->plh_inode;
+ LIST_HEAD(free_me);
  int status = 0;
 
  /* Inject layout blob into I/O device driver */
@@ -1341,6 +1353,8 @@ pnfs_layout_process(struct nfs4_layoutget *lgp)
   goto out_forget_reply;
  }
 
+ /* Check that the new stateid matches the old stateid */
+ pnfs_verify_layout_stateid(lo, &res->stateid, &free_me);
  /* Done processing layoutget. Set the layout stateid */
  pnfs_set_layout_stateid(lo, &res->stateid, false);
 
@@ -1355,6 +1369,7 @@ pnfs_layout_process(struct nfs4_layoutget *lgp)
  }
 
  spin_unlock(&ino->i_lock);
+ pnfs_free_lseg_list(&free_me);
  return lseg;
 out:
  return ERR_PTR(status);
-- 
1.7.1