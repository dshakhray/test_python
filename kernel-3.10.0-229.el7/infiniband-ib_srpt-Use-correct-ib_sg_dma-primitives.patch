From 1f4a7a01c2e667d639bf912445681adc58a653c9 Mon Sep 17 00:00:00 2001
From: Andy Grover <agrover@redhat.com>
Date: Fri, 5 Sep 2014 16:36:11 -0400
Subject: [infiniband] ib_srpt: Use correct ib_sg_dma primitives

Message-id: <1409934989-29941-14-git-send-email-agrover@redhat.com>
Patchwork-id: 91471
O-Subject: [RHEL7.1 PATCH e-stor 13/31] ib_srpt: Use correct ib_sg_dma primitives
Bugzilla: 1129387
RH-Acked-by: Chris Leech <cleech@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

From: Mike Marciniszyn <mike.marciniszyn@intel.com>

commit b076808051f2c80d38e03fb2f1294f525c7a446d upstream.

The code was incorrectly using sg_dma_address() and
sg_dma_len() instead of ib_sg_dma_address() and
ib_sg_dma_len().

This prevents srpt from functioning with the
Intel HCA and indeed will corrupt memory
badly.

Cc: Bart Van Assche <bvanassche@acm.org>
Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
Tested-by: Vinod Kumar <vinod.kumar@intel.com>
Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/srpt/ib_srpt.c b/drivers/infiniband/ulp/srpt/ib_srpt.c
index 6c66a72..64953df 100644
--- a/drivers/infiniband/ulp/srpt/ib_srpt.c
+++ b/drivers/infiniband/ulp/srpt/ib_srpt.c
@@ -1078,6 +1078,7 @@ static void srpt_unmap_sg_to_ib_sge(struct srpt_rdma_ch *ch,
 static int srpt_map_sg_to_ib_sge(struct srpt_rdma_ch *ch,
      struct srpt_send_ioctx *ioctx)
 {
+ struct ib_device *dev = ch->sport->sdev->device;
  struct se_cmd *cmd;
  struct scatterlist *sg, *sg_orig;
  int sg_cnt;
@@ -1124,7 +1125,7 @@ static int srpt_map_sg_to_ib_sge(struct srpt_rdma_ch *ch,
 
  db = ioctx->rbufs;
  tsize = cmd->data_length;
- dma_len = sg_dma_len(&sg[0]);
+ dma_len = ib_sg_dma_len(dev, &sg[0]);
  riu = ioctx->rdma_ius;
 
  /*
@@ -1155,7 +1156,8 @@ static int srpt_map_sg_to_ib_sge(struct srpt_rdma_ch *ch,
      ++j;
      if (j < count) {
       sg = sg_next(sg);
-      dma_len = sg_dma_len(sg);
+      dma_len = ib_sg_dma_len(
+        dev, sg);
      }
     }
    } else {
@@ -1192,8 +1194,8 @@ static int srpt_map_sg_to_ib_sge(struct srpt_rdma_ch *ch,
  tsize = cmd->data_length;
  riu = ioctx->rdma_ius;
  sg = sg_orig;
- dma_len = sg_dma_len(&sg[0]);
- dma_addr = sg_dma_address(&sg[0]);
+ dma_len = ib_sg_dma_len(dev, &sg[0]);
+ dma_addr = ib_sg_dma_address(dev, &sg[0]);
 
  /* this second loop is really mapped sg_addres to rdma_iu->ib_sge */
  for (i = 0, j = 0;
@@ -1216,8 +1218,10 @@ static int srpt_map_sg_to_ib_sge(struct srpt_rdma_ch *ch,
      ++j;
      if (j < count) {
       sg = sg_next(sg);
-      dma_len = sg_dma_len(sg);
-      dma_addr = sg_dma_address(sg);
+      dma_len = ib_sg_dma_len(
+        dev, sg);
+      dma_addr = ib_sg_dma_address(
+        dev, sg);
      }
     }
    } else {
-- 
1.7.1