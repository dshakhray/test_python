From 2a2967d38d4c5d51e7a0094c2574800ea8b2bb21 Mon Sep 17 00:00:00 2001
From: Marcelo Leitner <mleitner@redhat.com>
Date: Tue, 2 Dec 2014 17:25:47 -0500
Subject: [net] vxlan: Do not reuse sockets for a different address family

Message-id: <22b8119993ea5b3082e10e32787c30fc4cc5b389.1417530798.git.mleitner@redhat.com>
Patchwork-id: 101073
O-Subject: [RHEL7.1 net PATCH] vxlan: Do not reuse sockets for a different address family
Bugzilla: 1146107
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>

Backport of upstream commit: 19ca9fc1445b76b60d34148f7ff837b055f5dcf3
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8316939
Testing: me, with the commands below
BZ: 1146107
Backport notes:
    Context changes due to vxlan->net / dev_net(dev) as we are missing
    f01ec1c017 ("vxlan: add x-netns support")

 commit 19ca9fc1445b76b60d34148f7ff837b055f5dcf3
 Author: Marcelo Leitner <mleitner@redhat.com>
 Date:   Thu Nov 13 14:43:08 2014 -0200

    vxlan: Do not reuse sockets for a different address family

    Currently, we only match against local port number in order to reuse
    socket. But if this new vxlan wants an IPv6 socket and a IPv4 one bound
    to that port, vxlan will reuse an IPv4 socket as IPv6 and a panic will
    follow. The following steps reproduce it:

       # ip link add vxlan6 type vxlan id 42 group 229.10.10.10 \
           srcport 5000 6000 dev eth0
       # ip link add vxlan7 type vxlan id 43 group ff0e::110 \
           srcport 5000 6000 dev eth0
       # ip link set vxlan6 up
       # ip link set vxlan7 up
       <panic>

    [    4.187481] BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
    ...
    [    4.188076] Call Trace:
    [    4.188085]  [<ffffffff81667c4a>] ? ipv6_sock_mc_join+0x3a/0x630
    [    4.188098]  [<ffffffffa05a6ad6>] vxlan_igmp_join+0x66/0xd0 [vxlan]
    [    4.188113]  [<ffffffff810a3430>] process_one_work+0x220/0x710
    [    4.188125]  [<ffffffff810a33c4>] ? process_one_work+0x1b4/0x710
    [    4.188138]  [<ffffffff810a3a3b>] worker_thread+0x11b/0x3a0
    [    4.188149]  [<ffffffff810a3920>] ? process_one_work+0x710/0x710

    So address family must also match in order to reuse a socket.

    Reported-by: Jean-Tsung Hsiao <jhsiao@redhat.com>
    Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 1b7ef25..c489092 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -272,13 +272,15 @@ static inline struct vxlan_rdst *first_remote_rtnl(struct vxlan_fdb *fdb)
  return list_first_entry(&fdb->remotes, struct vxlan_rdst, list);
 }
 
-/* Find VXLAN socket based on network namespace and UDP port */
-static struct vxlan_sock *vxlan_find_sock(struct net *net, __be16 port)
+/* Find VXLAN socket based on network namespace, address family and UDP port */
+static struct vxlan_sock *vxlan_find_sock(struct net *net,
+       sa_family_t family, __be16 port)
 {
  struct vxlan_sock *vs;
 
  hlist_for_each_entry_rcu(vs, vs_head(net, port), hlist) {
-  if (inet_sk(vs->sock->sk)->inet_sport == port)
+  if (inet_sk(vs->sock->sk)->inet_sport == port &&
+      inet_sk(vs->sock->sk)->sk.sk_family == family)
    return vs;
  }
  return NULL;
@@ -297,11 +299,12 @@ static struct vxlan_dev *vxlan_vs_find_vni(struct vxlan_sock *vs, u32 id)
 }
 
 /* Look up VNI in a per net namespace table */
-static struct vxlan_dev *vxlan_find_vni(struct net *net, u32 id, __be16 port)
+static struct vxlan_dev *vxlan_find_vni(struct net *net, u32 id,
+     sa_family_t family, __be16 port)
 {
  struct vxlan_sock *vs;
 
- vs = vxlan_find_sock(net, port);
+ vs = vxlan_find_sock(net, family, port);
  if (!vs)
   return NULL;
 
@@ -1800,7 +1803,8 @@ static void vxlan_xmit_one(struct sk_buff *skb, struct net_device *dev,
    struct vxlan_dev *dst_vxlan;
 
    ip_rt_put(rt);
-   dst_vxlan = vxlan_find_vni(dev_net(dev), vni, dst_port);
+   dst_vxlan = vxlan_find_vni(dev_net(dev), vni,
+         dst->sa.sa_family, dst_port);
    if (!dst_vxlan)
     goto tx_error;
    vxlan_encap_bypass(skb, vxlan, dst_vxlan);
@@ -1853,7 +1857,8 @@ static void vxlan_xmit_one(struct sk_buff *skb, struct net_device *dev,
    struct vxlan_dev *dst_vxlan;
 
    dst_release(ndst);
-   dst_vxlan = vxlan_find_vni(dev_net(dev), vni, dst_port);
+   dst_vxlan = vxlan_find_vni(dev_net(dev), vni,
+         dst->sa.sa_family, dst_port);
    if (!dst_vxlan)
     goto tx_error;
    vxlan_encap_bypass(skb, vxlan, dst_vxlan);
@@ -2010,13 +2015,15 @@ static int vxlan_init(struct net_device *dev)
  struct vxlan_dev *vxlan = netdev_priv(dev);
  struct vxlan_net *vn = net_generic(dev_net(dev), vxlan_net_id);
  struct vxlan_sock *vs;
+ bool ipv6 = vxlan->flags & VXLAN_F_IPV6;
 
  dev->tstats = alloc_percpu(struct pcpu_tstats);
  if (!dev->tstats)
   return -ENOMEM;
 
  spin_lock(&vn->sock_lock);
- vs = vxlan_find_sock(dev_net(dev), vxlan->dst_port);
+ vs = vxlan_find_sock(dev_net(dev), ipv6 ? AF_INET6 : AF_INET,
+        vxlan->dst_port);
  if (vs) {
   /* If we have a socket with same port already, reuse it */
   atomic_inc(&vs->refcnt);
@@ -2486,6 +2493,7 @@ struct vxlan_sock *vxlan_sock_add(struct net *net, __be16 port,
 {
  struct vxlan_net *vn = net_generic(net, vxlan_net_id);
  struct vxlan_sock *vs;
+ bool ipv6 = flags & VXLAN_F_IPV6;
 
  vs = vxlan_socket_create(net, port, rcv, data, flags);
  if (!IS_ERR(vs))
@@ -2495,7 +2503,7 @@ struct vxlan_sock *vxlan_sock_add(struct net *net, __be16 port,
   return vs;
 
  spin_lock(&vn->sock_lock);
- vs = vxlan_find_sock(net, port);
+ vs = vxlan_find_sock(net, ipv6 ? AF_INET6 : AF_INET, port);
  if (vs) {
   if (vs->rcv == rcv)
    atomic_inc(&vs->refcnt);
@@ -2653,7 +2661,8 @@ static int vxlan_newlink(struct net *net, struct net_device *dev,
      nla_get_u8(data[IFLA_VXLAN_UDP_ZERO_CSUM6_RX]))
   vxlan->flags |= VXLAN_F_UDP_ZERO_CSUM6_RX;
 
- if (vxlan_find_vni(net, vni, vxlan->dst_port)) {
+ if (vxlan_find_vni(net, vni, use_ipv6 ? AF_INET6 : AF_INET,
+      vxlan->dst_port)) {
   pr_info("duplicate VNI %u\n", vni);
   return -EEXIST;
  }
-- 
1.7.1