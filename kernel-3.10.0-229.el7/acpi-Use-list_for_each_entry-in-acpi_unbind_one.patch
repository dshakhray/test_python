From d463466fd55b1d23817f133cedb9d678e5bd1c93 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 28 Aug 2014 03:04:17 -0400
Subject: [acpi] Use list_for_each_entry() in acpi_unbind_one()

Message-id: <20140828030417.2117.60122.stgit@gir.stowe>
Patchwork-id: 89295
O-Subject: [RHEL7.1 PATCH 07/30] ACPI: Use list_for_each_entry() in acpi_unbind_one()
Bugzilla: 1128632
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1128632
Upstream Status: 3e3327837c180781960188563b4e4d5c004c2b29

commit 3e3327837c180781960188563b4e4d5c004c2b29
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Aug 7 01:22:08 2013 +0200

    ACPI: Use list_for_each_entry() in acpi_unbind_one()

    Since acpi_unbind_one() walks physical_node_list under the ACPI
    device object's physical_node_lock mutex and the walk may be
    terminated as soon as the matching entry has been found, it is
    not necessary to use list_for_each_safe() for that walk, so use
    list_for_each_entry() instead and make the code slightly more
    straightforward.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>
    Acked-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/glue.c b/drivers/acpi/glue.c
index 69641c0..570628e 100644
--- a/drivers/acpi/glue.c
+++ b/drivers/acpi/glue.c
@@ -279,7 +279,6 @@ int acpi_unbind_one(struct device *dev)
  struct acpi_device_physical_node *entry;
  struct acpi_device *acpi_dev;
  acpi_status status;
- struct list_head *node, *next;
 
  if (!ACPI_HANDLE(dev))
   return 0;
@@ -289,25 +288,24 @@ int acpi_unbind_one(struct device *dev)
   goto err;
 
  mutex_lock(&acpi_dev->physical_node_lock);
- list_for_each_safe(node, next, &acpi_dev->physical_node_list) {
-  char physical_node_name[PHYSICAL_NODE_NAME_SIZE];
-
-  entry = list_entry(node, struct acpi_device_physical_node,
-       node);
-  if (entry->dev != dev)
-   continue;
-
-  list_del(node);
-  acpi_dev->physical_node_count--;
-
-  acpi_physnode_link_name(physical_node_name, entry->node_id);
-  sysfs_remove_link(&acpi_dev->dev.kobj, physical_node_name);
-  sysfs_remove_link(&dev->kobj, "firmware_node");
-  ACPI_HANDLE_SET(dev, NULL);
-  /* acpi_bind_one increase refcnt by one */
-  put_device(dev);
-  kfree(entry);
- }
+
+ list_for_each_entry(entry, &acpi_dev->physical_node_list, node)
+  if (entry->dev == dev) {
+   char physnode_name[PHYSICAL_NODE_NAME_SIZE];
+
+   list_del(&entry->node);
+   acpi_dev->physical_node_count--;
+
+   acpi_physnode_link_name(physnode_name, entry->node_id);
+   sysfs_remove_link(&acpi_dev->dev.kobj, physnode_name);
+   sysfs_remove_link(&dev->kobj, "firmware_node");
+   ACPI_HANDLE_SET(dev, NULL);
+   /* acpi_bind_one() increase refcnt by one. */
+   put_device(dev);
+   kfree(entry);
+   break;
+  }
+
  mutex_unlock(&acpi_dev->physical_node_lock);
 
  return 0;
-- 
1.7.1