From 3881f2cd4750cde5755c7e1ec547620b8f035b8d Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:04:09 -0400
Subject: [fs] btrfs: set dead flag on the right root when destroying snapshot

Message-id: <1407179109-13714-363-git-send-email-sandeen@redhat.com>
Patchwork-id: 87364
O-Subject: [RHEL7.1 PATCH 362/422] Btrfs: set dead flag on the right root when destroying snapshot
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit c55bfa67e94e22ec0449fe7c55b3ef20fbe13348
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Sun May 25 03:55:44 2014 +0100

    Btrfs: set dead flag on the right root when destroying snapshot

    We were setting the BTRFS_ROOT_SUBVOL_DEAD flag on the root of the
    parent of our target snapshot, instead of setting it in the target
    snapshot's root.

    This is easy to observe by running the following scenario:

        mkfs.btrfs -f /dev/sdd
        mount /dev/sdd /mnt

        btrfs subvolume create /mnt/first_subvol
        btrfs subvolume snapshot -r /mnt /mnt/mysnap1

        btrfs subvolume delete /mnt/first_subvol
        btrfs subvolume snapshot -r /mnt /mnt/mysnap2

        btrfs send -p /mnt/mysnap1 /mnt/mysnap2 -f /tmp/send.data

    The send command failed because the send ioctl returned -EPERM.
    A test case for xfstests follows.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Reviewed-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index 362720a..38f2169 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -2312,16 +2312,16 @@ static noinline int btrfs_ioctl_snap_destroy(struct file *file,
   * again is not run concurrently.
   */
  spin_lock(&dest->root_item_lock);
- root_flags = btrfs_root_flags(&root->root_item);
- if (root->send_in_progress == 0) {
-  btrfs_set_root_flags(&root->root_item,
+ root_flags = btrfs_root_flags(&dest->root_item);
+ if (dest->send_in_progress == 0) {
+  btrfs_set_root_flags(&dest->root_item,
     root_flags | BTRFS_ROOT_SUBVOL_DEAD);
   spin_unlock(&dest->root_item_lock);
  } else {
   spin_unlock(&dest->root_item_lock);
   btrfs_warn(root->fs_info,
    "Attempt to delete subvolume %llu during send",
-   root->root_key.objectid);
+   dest->root_key.objectid);
   err = -EPERM;
   goto out_dput;
  }
@@ -2416,8 +2416,8 @@ out_up_write:
 out_unlock:
  if (err) {
   spin_lock(&dest->root_item_lock);
-  root_flags = btrfs_root_flags(&root->root_item);
-  btrfs_set_root_flags(&root->root_item,
+  root_flags = btrfs_root_flags(&dest->root_item);
+  btrfs_set_root_flags(&dest->root_item,
     root_flags & ~BTRFS_ROOT_SUBVOL_DEAD);
   spin_unlock(&dest->root_item_lock);
  }
-- 
1.7.1