From 1dd8e5c76782bca3d74be748943061fb13208f99 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Wed, 18 Dec 2013 13:53:03 -0500
Subject: [tools] bpf_exp: free duplicated labels at exit time

Message-id: <1efb754c3af77d179ef701a6df317297121b1d9d.1387364406.git.dborkman@redhat.com>
Patchwork-id: 72492
O-Subject: [RHEL7 PATCH net 5/5] bpf_exp: free duplicated labels at exit time
Bugzilla: 958035
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Thomas Graf <tgraf@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=958035
Upstream Status: d207cf4c1ad27c6f8881857ca301f8489826116d (net-next)
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=6751484
Tested: verified on beaker

Upstream Commit:
commit d207cf4c1ad27c6f8881857ca301f8489826116d
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Mon Dec 16 11:45:01 2013 +0100

    bpf_exp: free duplicated labels at exit time

    Valgrind found that extracted labels that are passed from the lexer
    weren't freed upon exit. Therefore, add a small helper function that
    walks label tables and frees them. Since also NULL can be passed to
    free(3), we do not need to take care of that here. While at it, fix
    up a spacing error in bpf_set_curr_label().

    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/net/bpf_exp.y b/tools/net/bpf_exp.y
index f524110..d15efc9 100644
--- a/tools/net/bpf_exp.y
+++ b/tools/net/bpf_exp.y
@@ -40,8 +40,8 @@ extern void yyerror(const char *str);
 
 extern void bpf_asm_compile(FILE *fp, bool cstyle);
 static void bpf_set_curr_instr(uint16_t op, uint8_t jt, uint8_t jf, uint32_t k);
-static void bpf_set_curr_label(const char *label);
-static void bpf_set_jmp_label(const char *label, enum jmp_type type);
+static void bpf_set_curr_label(char *label);
+static void bpf_set_jmp_label(char *label, enum jmp_type type);
 
 %}
 
@@ -573,7 +573,7 @@ txa
 
 static int curr_instr = 0;
 static struct sock_filter out[BPF_MAXINSNS];
-static const char **labels, **labels_jt, **labels_jf, **labels_k;
+static char **labels, **labels_jt, **labels_jf, **labels_k;
 
 static void bpf_assert_max(void)
 {
@@ -594,13 +594,13 @@ static void bpf_set_curr_instr(uint16_t code, uint8_t jt, uint8_t jf,
  curr_instr++;
 }
 
-static void bpf_set_curr_label(const char *label)
+static void bpf_set_curr_label(char *label)
 {
  bpf_assert_max();
-        labels[curr_instr] = label;
+ labels[curr_instr] = label;
 }
 
-static void bpf_set_jmp_label(const char *label, enum jmp_type type)
+static void bpf_set_jmp_label(char *label, enum jmp_type type)
 {
  bpf_assert_max();
  switch (type) {
@@ -717,12 +717,25 @@ static void bpf_init(void)
  assert(labels_k);
 }
 
+static void bpf_destroy_labels(void)
+{
+ int i;
+
+ for (i = 0; i < curr_instr; i++) {
+  free(labels_jf[i]);
+  free(labels_jt[i]);
+  free(labels_k[i]);
+  free(labels[i]);
+ }
+}
+
 static void bpf_destroy(void)
 {
- free(labels);
+ bpf_destroy_labels();
  free(labels_jt);
  free(labels_jf);
  free(labels_k);
+ free(labels);
 }
 
 void bpf_asm_compile(FILE *fp, bool cstyle)
-- 
1.7.1