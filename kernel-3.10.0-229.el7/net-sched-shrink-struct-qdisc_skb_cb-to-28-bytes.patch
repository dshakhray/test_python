From c9f515609c9268e38d05c58ac1050500f9325abf Mon Sep 17 00:00:00 2001
From: Doug Ledford <dledford@redhat.com>
Date: Wed, 24 Sep 2014 17:27:54 -0400
Subject: [net] sched: shrink struct qdisc_skb_cb to 28 bytes

Message-id: <aa8a0104c8358235b3945bc67d0ab875248ac71f.1411578494.git.dledford@redhat.com>
Patchwork-id: 96673
O-Subject: [Patch RHEL7 01/26] net: sched: shrink struct qdisc_skb_cb to 28 bytes
Bugzilla: 1107621 1140601
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

upstream commit id: 257117862634d89de33fec74858b1a0ba5ab444b (Dave's net.git)

bz#1140601

From: Eric Dumazet <edumazet@google.com>

We cannot make struct qdisc_skb_cb bigger without impacting IPoIB,
or increasing skb->cb[] size.

Commit e0f31d849867 ("flow_keys: Record IP layer protocol in
skb_flow_dissect()") broke IPoIB.

Only current offender is sch_choke, and this one do not need an
absolutely precise flow key.

If we store 17 bytes of flow key, its more than enough. (Its the actual
size of flow_keys if it was a packed structure, but we might add new
fields at the end of it later)

Signed-off-by: Eric Dumazet <edumazet@google.com>
Fixes: e0f31d849867 ("flow_keys: Record IP layer protocol in skb_flow_dissect()")
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/sch_generic.h b/include/net/sch_generic.h
index a6bc5f7..de28b07 100644
--- a/include/net/sch_generic.h
+++ b/include/net/sch_generic.h
@@ -231,7 +231,8 @@ struct qdisc_skb_cb {
  unsigned int  pkt_len;
  u16   slave_dev_queue_mapping;
  u16   _pad;
- unsigned char  data[24];
+#define QDISC_CB_PRIV_LEN 20
+ unsigned char  data[QDISC_CB_PRIV_LEN];
 };
 
 static inline void qdisc_cb_private_validate(const struct sk_buff *skb, int sz)
diff --git a/net/sched/sch_choke.c b/net/sched/sch_choke.c
index 7ce6ec0..5a3cd61 100644
--- a/net/sched/sch_choke.c
+++ b/net/sched/sch_choke.c
@@ -133,10 +133,16 @@ static void choke_drop_by_idx(struct Qdisc *sch, unsigned int idx)
  --sch->q.qlen;
 }
 
+/* private part of skb->cb[] that a qdisc is allowed to use
+ * is limited to QDISC_CB_PRIV_LEN bytes.
+ * As a flow key might be too large, we store a part of it only.
+ */
+#define CHOKE_K_LEN min_t(u32, sizeof(struct flow_keys), QDISC_CB_PRIV_LEN - 3)
+
 struct choke_skb_cb {
  u16   classid;
  u8   keys_valid;
- struct flow_keys keys;
+ u8   keys[QDISC_CB_PRIV_LEN - 3];
 };
 
 static inline struct choke_skb_cb *choke_skb_cb(const struct sk_buff *skb)
@@ -163,22 +169,26 @@ static u16 choke_get_classid(const struct sk_buff *skb)
 static bool choke_match_flow(struct sk_buff *skb1,
         struct sk_buff *skb2)
 {
+ struct flow_keys temp;
+
  if (skb1->protocol != skb2->protocol)
   return false;
 
  if (!choke_skb_cb(skb1)->keys_valid) {
   choke_skb_cb(skb1)->keys_valid = 1;
-  skb_flow_dissect(skb1, &choke_skb_cb(skb1)->keys);
+  skb_flow_dissect(skb1, &temp);
+  memcpy(&choke_skb_cb(skb1)->keys, &temp, CHOKE_K_LEN);
  }
 
  if (!choke_skb_cb(skb2)->keys_valid) {
   choke_skb_cb(skb2)->keys_valid = 1;
-  skb_flow_dissect(skb2, &choke_skb_cb(skb2)->keys);
+  skb_flow_dissect(skb2, &temp);
+  memcpy(&choke_skb_cb(skb2)->keys, &temp, CHOKE_K_LEN);
  }
 
  return !memcmp(&choke_skb_cb(skb1)->keys,
          &choke_skb_cb(skb2)->keys,
-         sizeof(struct flow_keys));
+         CHOKE_K_LEN);
 }
 
 /*
-- 
1.7.1