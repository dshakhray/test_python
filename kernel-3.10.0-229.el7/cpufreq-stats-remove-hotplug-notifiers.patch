From 2b666034dc74edf3364d0e46129973cbec446186 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:06 -0400
Subject: [cpufreq] stats: remove hotplug notifiers

Message-id: <1409235879-1283-93-git-send-email-prarit@redhat.com>
Patchwork-id: 89423
O-Subject: [RHEL7.1 PATCH BZ 1134639 092/185] cpufreq: stats: remove hotplug notifiers
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 027cc2e4a6127fdf29e17a422aacb5ecd9830cbb
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Jan 7 07:10:11 2014 +0530

    cpufreq: stats: remove hotplug notifiers

    Either CPUs are hot-unplugged or suspend/resume occurs, cpufreq core
    will send notifications to cpufreq-stats and stats structure and sysfs
    entries would be correctly handled..

    And so we don't actually need hotcpu notifiers in cpufreq-stats anymore.
    We were only handling cpu hot-unplug events here and that are already
    taken care of by POLICY notifiers.

    Acked-by: Nicolas Pitre <nico@linaro.org>
    Tested-by: Nicolas Pitre <nico@linaro.org>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index 03a87ac..655bea6 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -295,11 +295,8 @@ static int cpufreq_stat_notifier_policy(struct notifier_block *nb,
  if (val == CPUFREQ_CREATE_POLICY)
   ret = cpufreq_stats_create_table(policy, table);
  else if (val == CPUFREQ_REMOVE_POLICY) {
-  /* This might already be freed by cpu hotplug notifier */
-  if (per_cpu(cpufreq_stats_table, cpu)) {
-   cpufreq_stats_free_sysfs(cpu);
-   cpufreq_stats_free_table(cpu);
-  }
+  cpufreq_stats_free_sysfs(cpu);
+  cpufreq_stats_free_table(cpu);
  }
 
  return ret;
@@ -341,33 +338,6 @@ static int cpufreq_stat_notifier_trans(struct notifier_block *nb,
  return 0;
 }
 
-static int cpufreq_stat_cpu_callback(struct notifier_block *nfb,
-            unsigned long action,
-            void *hcpu)
-{
- unsigned int cpu = (unsigned long)hcpu;
-
- /* Don't free/allocate stats during suspend/resume */
- if (action & CPU_TASKS_FROZEN)
-  return 0;
-
- switch (action) {
- case CPU_DOWN_PREPARE:
-  cpufreq_stats_free_sysfs(cpu);
-  break;
- case CPU_DEAD:
-  cpufreq_stats_free_table(cpu);
-  break;
- }
- return NOTIFY_OK;
-}
-
-/* priority=1 so this will get called before cpufreq_remove_dev */
-static struct notifier_block cpufreq_stat_cpu_notifier __refdata = {
- .notifier_call = cpufreq_stat_cpu_callback,
- .priority = 1,
-};
-
 static struct notifier_block notifier_policy_block = {
  .notifier_call = cpufreq_stat_notifier_policy
 };
@@ -387,14 +357,11 @@ static int __init cpufreq_stats_init(void)
  if (ret)
   return ret;
 
- register_hotcpu_notifier(&cpufreq_stat_cpu_notifier);
-
  ret = cpufreq_register_notifier(&notifier_trans_block,
     CPUFREQ_TRANSITION_NOTIFIER);
  if (ret) {
   cpufreq_unregister_notifier(&notifier_policy_block,
     CPUFREQ_POLICY_NOTIFIER);
-  unregister_hotcpu_notifier(&cpufreq_stat_cpu_notifier);
   for_each_online_cpu(cpu)
    cpufreq_stats_free_table(cpu);
   return ret;
@@ -410,7 +377,6 @@ static void __exit cpufreq_stats_exit(void)
    CPUFREQ_POLICY_NOTIFIER);
  cpufreq_unregister_notifier(&notifier_trans_block,
    CPUFREQ_TRANSITION_NOTIFIER);
- unregister_hotcpu_notifier(&cpufreq_stat_cpu_notifier);
  for_each_online_cpu(cpu) {
   cpufreq_stats_free_table(cpu);
   cpufreq_stats_free_sysfs(cpu);
-- 
1.7.1