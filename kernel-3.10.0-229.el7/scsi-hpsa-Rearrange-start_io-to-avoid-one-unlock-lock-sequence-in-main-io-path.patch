From abc47b90be9da9c1cdb1c0080daa6ba47851a029 Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Mon, 8 Sep 2014 14:31:58 -0400
Subject: [scsi] hpsa: Rearrange start_io to avoid one unlock/lock sequence in main io path

Message-id: <1410186734-19986-68-git-send-email-thenzl@redhat.com>
Patchwork-id: 92086
O-Subject: [RHEL6.6 e-stor PATCH 67/83] hpsa: Rearrange start_io to avoid one unlock/lock sequence in main io path
Bugzilla: 1069185
RH-Acked-by: Maurizio Lombardi <mlombard@redhat.com>
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Ewan Milne <emilne@redhat.com>

Signed-off-by: Stephen M. Cameron <scameron@beardog.cce.hp.com>
Reviewed-by: Joe Handzik <joseph.t.handzik@hp.com>
Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 0b57075deb3c082db6fbf528f3f6a3854b81bd83)
---
 drivers/scsi/hpsa.c | 24 ++++++++++++++++--------
 1 file changed, 16 insertions(+), 8 deletions(-)

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/hpsa.c b/drivers/scsi/hpsa.c
index bd950d7..7a20000 100644
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@ -200,7 +200,8 @@ static int number_of_controllers;
 static irqreturn_t do_hpsa_intr_intx(int irq, void *dev_id);
 static irqreturn_t do_hpsa_intr_msi(int irq, void *dev_id);
 static int hpsa_ioctl(struct scsi_device *dev, int cmd, void *arg);
-static void start_io(struct ctlr_info *h);
+static void lock_and_start_io(struct ctlr_info *h);
+static void start_io(struct ctlr_info *h, unsigned long *flags);
 
 #ifdef CONFIG_COMPAT
 static int hpsa_compat_ioctl(struct scsi_device *dev, int cmd, void *arg);
@@ -851,8 +852,8 @@ static void enqueue_cmd_and_start_io(struct ctlr_info *h,
  spin_lock_irqsave(&h->lock, flags);
  addQ(&h->reqQ, c);
  h->Qdepth++;
+ start_io(h, &flags);
  spin_unlock_irqrestore(&h->lock, flags);
- start_io(h);
 }
 
 static inline void removeQ(struct CommandList *c)
@@ -5465,13 +5466,12 @@ static void __iomem *remap_pci_mem(ulong base, ulong size)
 
 /* Takes cmds off the submission queue and sends them to the hardware,
  * then puts them on the queue of cmds waiting for completion.
+ * Assumes h->lock is held
  */
-static void start_io(struct ctlr_info *h)
+static void start_io(struct ctlr_info *h, unsigned long *flags)
 {
  struct CommandList *c;
- unsigned long flags;
 
- spin_lock_irqsave(&h->lock, flags);
  while (!list_empty(&h->reqQ)) {
   c = list_entry(h->reqQ.next, struct CommandList, list);
   /* can't do anything if fifo is full */
@@ -5496,10 +5496,18 @@ static void start_io(struct ctlr_info *h)
   h->commands_outstanding++;
 
   /* Tell the controller execute command */
-  spin_unlock_irqrestore(&h->lock, flags);
+  spin_unlock_irqrestore(&h->lock, *flags);
   h->access.submit_command(h, c);
-  spin_lock_irqsave(&h->lock, flags);
+  spin_lock_irqsave(&h->lock, *flags);
  }
+}
+
+static void lock_and_start_io(struct ctlr_info *h)
+{
+ unsigned long flags;
+
+ spin_lock_irqsave(&h->lock, flags);
+ start_io(h, &flags);
  spin_unlock_irqrestore(&h->lock, flags);
 }
 
@@ -5567,7 +5575,7 @@ static inline void finish_cmd(struct CommandList *c)
  else if (c->cmd_type == CMD_IOCTL_PEND)
   complete(c->waiting);
  if (unlikely(io_may_be_stalled))
-  start_io(h);
+  lock_and_start_io(h);
 }
 
 static inline u32 hpsa_tag_contains_index(u32 tag)
-- 
1.7.1