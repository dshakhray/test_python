From 167d50172fb86f451473d9ac2cf11242f195477a Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:22:31 -0400
Subject: [fs] ceph: replace hold_mutex flag with goto
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-45-git-send-email-sweil@redhat.com>
Patchwork-id: 89700
O-Subject: [PATCH 044/303] ceph: replace hold_mutex flag with goto
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Sage Weil <sage@inktank.com>

All of the early exit paths need to drop the mutex; it is only the normal
path through the function that does not.  Skip the unlock in that case
with a goto out_unlocked.

Signed-off-by: Sage Weil <sage@inktank.com>
Reviewed-by: Jianpeng Ma <majianpeng@gmail.com>
(cherry picked from commit 2f75e9e17911524f294aa7b3bf0d7233f99a3218)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/file.c b/fs/ceph/file.c
index 7478d5d..a17ffe4 100644
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@ -710,13 +710,11 @@ static ssize_t ceph_aio_write(struct kiocb *iocb, const struct iovec *iov,
   &ceph_sb_to_client(inode->i_sb)->client->osdc;
  ssize_t count, written = 0;
  int err, want, got;
- bool hold_mutex;
 
  if (ceph_snap(inode) != CEPH_NOSNAP)
   return -EROFS;
 
  mutex_lock(&inode->i_mutex);
- hold_mutex = true;
 
  err = generic_segment_checks(iov, &nr_segs, &count, VERIFY_READ);
  if (err)
@@ -772,7 +770,6 @@ retry_snap:
     inode, ceph_vinop(inode),
     pos, (unsigned)iov->iov_len);
    mutex_lock(&inode->i_mutex);
-   hold_mutex = true;
    goto retry_snap;
   }
  } else {
@@ -781,7 +778,6 @@ retry_snap:
             count, 0);
   mutex_unlock(&inode->i_mutex);
  }
- hold_mutex = false;
 
  if (written >= 0) {
   int dirty;
@@ -805,11 +801,12 @@ retry_snap:
    written = err;
  }
 
+ goto out_unlocked;
+
 out:
- if (hold_mutex)
-  mutex_unlock(&inode->i_mutex);
+ mutex_unlock(&inode->i_mutex);
+out_unlocked:
  current->backing_dev_info = NULL;
-
  return written ? written : err;
 }
 
-- 
1.7.1