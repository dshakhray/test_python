From 6281b59b8e8133d67fb2ab6cbb29965d5985486e Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:18:33 -0400
Subject: [fs] nfsd: declare v4.1+ openowners confirmed on creation

Message-id: <1410898849-22126-30-git-send-email-bfields@redhat.com>
Patchwork-id: 95804
O-Subject: [Patch RHEL7 029/165] nfsd: declare v4.1+ openowners confirmed on creation
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Jeff Layton <jlayton@primarydata.com>

There's no need to confirm an openowner in v4.1 and above, so we can
go ahead and set NFS4_OO_CONFIRMED when we create openowners in
those versions. This will also be necessary when we remove the
client_mutex, as it'll be possible for two concurrent opens to race
in versions >4.0.

Signed-off-by: Jeff Layton <jlayton@primarydata.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: db24b3b4b2a510ad0face05aec1c5bfbe89050bb
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index 993da47..106db71 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -2719,7 +2719,10 @@ static void hash_openowner(struct nfs4_openowner *oo, struct nfs4_client *clp, u
 }
 
 static struct nfs4_openowner *
-alloc_init_open_stateowner(unsigned int strhashval, struct nfs4_client *clp, struct nfsd4_open *open) {
+alloc_init_open_stateowner(unsigned int strhashval, struct nfs4_client *clp,
+      struct nfsd4_open *open,
+      struct nfsd4_compound_state *cstate)
+{
  struct nfs4_openowner *oo;
 
  oo = alloc_stateowner(openowner_slab, &open->op_owner, clp);
@@ -2728,6 +2731,8 @@ alloc_init_open_stateowner(unsigned int strhashval, struct nfs4_client *clp, str
  oo->oo_owner.so_is_open_owner = 1;
  oo->oo_owner.so_seqid = open->op_seqid;
  oo->oo_flags = NFS4_OO_NEW;
+ if (nfsd4_has_session(cstate))
+  oo->oo_flags |= NFS4_OO_CONFIRMED;
  oo->oo_time = 0;
  oo->oo_last_closed_stid = NULL;
  INIT_LIST_HEAD(&oo->oo_close_lru);
@@ -2987,7 +2992,7 @@ nfsd4_process_open1(struct nfsd4_compound_state *cstate,
  clp = oo->oo_owner.so_client;
  goto alloc_stateid;
 new_owner:
- oo = alloc_init_open_stateowner(strhashval, clp, open);
+ oo = alloc_init_open_stateowner(strhashval, clp, open, cstate);
  if (oo == NULL)
   return nfserr_jukebox;
  open->op_openowner = oo;
@@ -3397,8 +3402,6 @@ nfsd4_process_open2(struct svc_rqst *rqstp, struct svc_fh *current_fh, struct nf
  memcpy(&open->op_stateid, &stp->st_stid.sc_stateid, sizeof(stateid_t));
 
  if (nfsd4_has_session(&resp->cstate)) {
-  open->op_openowner->oo_flags |= NFS4_OO_CONFIRMED;
-
   if (open->op_deleg_want & NFS4_SHARE_WANT_NO_DELEG) {
    open->op_delegate_type = NFS4_OPEN_DELEGATE_NONE_EXT;
    open->op_why_no_deleg = WND4_NOT_WANTED;
@@ -3792,8 +3795,9 @@ nfs4_preprocess_stateid_op(struct net *net, struct nfsd4_compound_state *cstate,
 
  nfs4_lock_state();
 
- status = nfsd4_lookup_stateid(stateid, NFS4_DELEG_STID|NFS4_OPEN_STID|NFS4_LOCK_STID,
-          &s, cstate->minorversion, nn);
+ status = nfsd4_lookup_stateid(stateid,
+    NFS4_DELEG_STID|NFS4_OPEN_STID|NFS4_LOCK_STID,
+    &s, cstate->minorversion, nn);
  if (status)
   goto out;
  status = check_stateid_generation(stateid, &s->sc_stateid, nfsd4_has_session(cstate));
-- 
1.7.1