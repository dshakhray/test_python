From 26113d0e016f6e0fe4947e4317a7682521d25b20 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:53:21 -0400
Subject: [fs] nfs: Don't declare inode uptodate unless all attributes were checked

Message-id: <1403798077-28799-3-git-send-email-steved@redhat.com>
Patchwork-id: 84873
O-Subject: [RHEL7.1 PATCH 02/78] NFS: Don't declare inode uptodate unless all attributes were checked
Bugzilla: 1113248
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

Fix a bug, whereby nfs_update_inode() was declaring the inode to be
up to date despite not having checked all the attributes.
The bug occurs because the temporary variable in which we cache
the validity information is 'sanitised' before reapplying to
nfsi->cache_validity.

Reported-by: Kinglong Mee <kinglongmee@gmail.com>
Cc: stable@vger.kernel.org # 3.5+
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upsteam Id: 43b6535e717d2f656f71d9bd16022136b781c934
Bugzilla: 1113248
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/inode.c b/fs/nfs/inode.c
index a0eddba..3d01405 100644
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@ -1585,18 +1585,20 @@ static int nfs_update_inode(struct inode *inode, struct nfs_fattr *fattr)
    inode->i_version = fattr->change_attr;
   }
  } else if (server->caps & NFS_CAP_CHANGE_ATTR)
-  invalid |= save_cache_validity;
+  nfsi->cache_validity |= save_cache_validity;
 
  if (fattr->valid & NFS_ATTR_FATTR_MTIME) {
   memcpy(&inode->i_mtime, &fattr->mtime, sizeof(inode->i_mtime));
  } else if (server->caps & NFS_CAP_MTIME)
-  invalid |= save_cache_validity & (NFS_INO_INVALID_ATTR
+  nfsi->cache_validity |= save_cache_validity &
+    (NFS_INO_INVALID_ATTR
     | NFS_INO_REVAL_FORCED);
 
  if (fattr->valid & NFS_ATTR_FATTR_CTIME) {
   memcpy(&inode->i_ctime, &fattr->ctime, sizeof(inode->i_ctime));
  } else if (server->caps & NFS_CAP_CTIME)
-  invalid |= save_cache_validity & (NFS_INO_INVALID_ATTR
+  nfsi->cache_validity |= save_cache_validity &
+    (NFS_INO_INVALID_ATTR
     | NFS_INO_REVAL_FORCED);
 
  /* Check if our cached file size is stale */
@@ -1619,7 +1621,8 @@ static int nfs_update_inode(struct inode *inode, struct nfs_fattr *fattr)
      (long long)new_isize);
   }
  } else
-  invalid |= save_cache_validity & (NFS_INO_INVALID_ATTR
+  nfsi->cache_validity |= save_cache_validity &
+    (NFS_INO_INVALID_ATTR
     | NFS_INO_REVAL_PAGECACHE
     | NFS_INO_REVAL_FORCED);
 
@@ -1627,7 +1630,8 @@ static int nfs_update_inode(struct inode *inode, struct nfs_fattr *fattr)
  if (fattr->valid & NFS_ATTR_FATTR_ATIME)
   memcpy(&inode->i_atime, &fattr->atime, sizeof(inode->i_atime));
  else if (server->caps & NFS_CAP_ATIME)
-  invalid |= save_cache_validity & (NFS_INO_INVALID_ATIME
+  nfsi->cache_validity |= save_cache_validity &
+    (NFS_INO_INVALID_ATIME
     | NFS_INO_REVAL_FORCED);
 
  if (fattr->valid & NFS_ATTR_FATTR_MODE) {
@@ -1638,7 +1642,8 @@ static int nfs_update_inode(struct inode *inode, struct nfs_fattr *fattr)
    invalid |= NFS_INO_INVALID_ATTR|NFS_INO_INVALID_ACCESS|NFS_INO_INVALID_ACL;
   }
  } else if (server->caps & NFS_CAP_MODE)
-  invalid |= save_cache_validity & (NFS_INO_INVALID_ATTR
+  nfsi->cache_validity |= save_cache_validity &
+    (NFS_INO_INVALID_ATTR
     | NFS_INO_INVALID_ACCESS
     | NFS_INO_INVALID_ACL
     | NFS_INO_REVAL_FORCED);
@@ -1649,7 +1654,8 @@ static int nfs_update_inode(struct inode *inode, struct nfs_fattr *fattr)
    inode->i_uid = fattr->uid;
   }
  } else if (server->caps & NFS_CAP_OWNER)
-  invalid |= save_cache_validity & (NFS_INO_INVALID_ATTR
+  nfsi->cache_validity |= save_cache_validity &
+    (NFS_INO_INVALID_ATTR
     | NFS_INO_INVALID_ACCESS
     | NFS_INO_INVALID_ACL
     | NFS_INO_REVAL_FORCED);
@@ -1660,7 +1666,8 @@ static int nfs_update_inode(struct inode *inode, struct nfs_fattr *fattr)
    inode->i_gid = fattr->gid;
   }
  } else if (server->caps & NFS_CAP_OWNER_GROUP)
-  invalid |= save_cache_validity & (NFS_INO_INVALID_ATTR
+  nfsi->cache_validity |= save_cache_validity &
+    (NFS_INO_INVALID_ATTR
     | NFS_INO_INVALID_ACCESS
     | NFS_INO_INVALID_ACL
     | NFS_INO_REVAL_FORCED);
@@ -1673,7 +1680,8 @@ static int nfs_update_inode(struct inode *inode, struct nfs_fattr *fattr)
    set_nlink(inode, fattr->nlink);
   }
  } else if (server->caps & NFS_CAP_NLINK)
-  invalid |= save_cache_validity & (NFS_INO_INVALID_ATTR
+  nfsi->cache_validity |= save_cache_validity &
+    (NFS_INO_INVALID_ATTR
     | NFS_INO_REVAL_FORCED);
 
  if (fattr->valid & NFS_ATTR_FATTR_SPACE_USED) {
-- 
1.7.1