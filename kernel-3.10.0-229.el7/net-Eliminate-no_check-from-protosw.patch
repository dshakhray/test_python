From 69fd8274bf6a9bee46cea1b2d9e81a08adb5b85f Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:14:42 -0400
Subject: [net] Eliminate no_check from protosw

Message-id: <1409652920-431-20-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90145
O-Subject: [PATCH 19/57] [RHEL7.1 net] net: Eliminate no_check from protosw
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

removed ipv6 ping.c change; not present in rhel7

commit b26ba202e0500eb852e89499ece1b2deaa64c3a7
Author: Tom Herbert <therbert@google.com>
Date:   Fri May 23 08:47:09 2014 -0700

    net: Eliminate no_check from protosw

    It doesn't seem like an protocols are setting anything other
    than the default, and allowing to arbitrarily disable checksums
    for a whole protocol seems dangerous. This can be done on a per
    socket basis.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/protocol.h b/include/net/protocol.h
index c6248f1..f900494 100644
--- a/include/net/protocol.h
+++ b/include/net/protocol.h
@@ -81,7 +81,6 @@ struct inet_protosw {
  struct proto  *prot;
  const struct proto_ops *ops;
   
- char             no_check;   /* checksum on rcv/xmit/none? */
  unsigned char  flags;      /* See INET_PROTOSW_* below.  */
 };
 #define INET_PROTOSW_REUSE 0x01      /* Are ports automatically reusable? */
diff --git a/net/dccp/ipv4.c b/net/dccp/ipv4.c
index 720c362..49ed8a7 100644
--- a/net/dccp/ipv4.c
+++ b/net/dccp/ipv4.c
@@ -1022,7 +1022,6 @@ static struct inet_protosw dccp_v4_protosw = {
  .protocol = IPPROTO_DCCP,
  .prot  = &dccp_v4_prot,
  .ops  = &inet_dccp_ops,
- .no_check = 0,
  .flags  = INET_PROTOSW_ICSK,
 };
 
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index 79914f6..677c6c0 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -280,7 +280,6 @@ static int inet_create(struct net *net, struct socket *sock, int protocol,
  struct inet_sock *inet;
  struct proto *answer_prot;
  unsigned char answer_flags;
- char answer_no_check;
  int try_loading_module = 0;
  int err;
 
@@ -342,7 +341,6 @@ lookup_protocol:
 
  sock->ops = answer->ops;
  answer_prot = answer->prot;
- answer_no_check = answer->no_check;
  answer_flags = answer->flags;
  rcu_read_unlock();
 
@@ -354,7 +352,6 @@ lookup_protocol:
   goto out;
 
  err = 0;
- sk->sk_no_check = answer_no_check;
  if (INET_PROTOSW_REUSE & answer_flags)
   sk->sk_reuse = SK_CAN_REUSE;
 
@@ -1032,7 +1029,6 @@ static struct inet_protosw inetsw_array[] =
   .protocol =   IPPROTO_TCP,
   .prot =       &tcp_prot,
   .ops =        &inet_stream_ops,
-  .no_check =   0,
   .flags =      INET_PROTOSW_PERMANENT |
          INET_PROTOSW_ICSK,
  },
@@ -1042,7 +1038,6 @@ static struct inet_protosw inetsw_array[] =
   .protocol =   IPPROTO_UDP,
   .prot =       &udp_prot,
   .ops =        &inet_dgram_ops,
-  .no_check =   UDP_CSUM_DEFAULT,
   .flags =      INET_PROTOSW_PERMANENT,
        },
 
@@ -1051,7 +1046,6 @@ static struct inet_protosw inetsw_array[] =
   .protocol =   IPPROTO_ICMP,
   .prot =       &ping_prot,
   .ops =        &inet_dgram_ops,
-  .no_check =   UDP_CSUM_DEFAULT,
   .flags =      INET_PROTOSW_REUSE,
        },
 
@@ -1060,7 +1054,6 @@ static struct inet_protosw inetsw_array[] =
         .protocol =   IPPROTO_IP, /* wild card */
         .prot =       &raw_prot,
         .ops =        &inet_sockraw_ops,
-        .no_check =   UDP_CSUM_DEFAULT,
         .flags =      INET_PROTOSW_REUSE,
        }
 };
diff --git a/net/ipv4/udplite.c b/net/ipv4/udplite.c
index 2c46acd..3b3efbd 100644
--- a/net/ipv4/udplite.c
+++ b/net/ipv4/udplite.c
@@ -70,7 +70,6 @@ static struct inet_protosw udplite4_protosw = {
  .protocol =  IPPROTO_UDPLITE,
  .prot  =  &udplite_prot,
  .ops  =  &inet_dgram_ops,
- .no_check =  0,  /* must checksum (RFC 3828) */
  .flags  =  INET_PROTOSW_PERMANENT,
 };
 
diff --git a/net/ipv6/af_inet6.c b/net/ipv6/af_inet6.c
index d5c67ec..92b5ad4 100644
--- a/net/ipv6/af_inet6.c
+++ b/net/ipv6/af_inet6.c
@@ -105,7 +105,6 @@ static int inet6_create(struct net *net, struct socket *sock, int protocol,
  struct inet_protosw *answer;
  struct proto *answer_prot;
  unsigned char answer_flags;
- char answer_no_check;
  int try_loading_module = 0;
  int err;
 
@@ -166,7 +165,6 @@ lookup_protocol:
 
  sock->ops = answer->ops;
  answer_prot = answer->prot;
- answer_no_check = answer->no_check;
  answer_flags = answer->flags;
  rcu_read_unlock();
 
@@ -180,7 +178,6 @@ lookup_protocol:
  sock_init_data(sock, sk);
 
  err = 0;
- sk->sk_no_check = answer_no_check;
  if (INET_PROTOSW_REUSE & answer_flags)
   sk->sk_reuse = SK_CAN_REUSE;
 
diff --git a/net/ipv6/raw.c b/net/ipv6/raw.c
index 79ee088..12edbea 100644
--- a/net/ipv6/raw.c
+++ b/net/ipv6/raw.c
@@ -1317,7 +1317,6 @@ static struct inet_protosw rawv6_protosw = {
  .protocol = IPPROTO_IP, /* wild card */
  .prot  = &rawv6_prot,
  .ops  = &inet6_sockraw_ops,
- .no_check = UDP_CSUM_DEFAULT,
  .flags  = INET_PROTOSW_REUSE,
 };
 
diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
index 8ac9b14..dfd58b9 100644
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@ -1942,7 +1942,6 @@ static struct inet_protosw tcpv6_protosw = {
  .protocol = IPPROTO_TCP,
  .prot  = &tcpv6_prot,
  .ops  = &inet6_stream_ops,
- .no_check = 0,
  .flags  = INET_PROTOSW_PERMANENT |
     INET_PROTOSW_ICSK,
 };
diff --git a/net/ipv6/udp.c b/net/ipv6/udp.c
index eab6ebd..4136c26 100644
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@ -1484,7 +1484,6 @@ static struct inet_protosw udpv6_protosw = {
  .protocol =  IPPROTO_UDP,
  .prot =      &udpv6_prot,
  .ops =       &inet6_dgram_ops,
- .no_check =  UDP_CSUM_DEFAULT,
  .flags =     INET_PROTOSW_PERMANENT,
 };
 
diff --git a/net/ipv6/udplite.c b/net/ipv6/udplite.c
index dfcc4be..9cf097e 100644
--- a/net/ipv6/udplite.c
+++ b/net/ipv6/udplite.c
@@ -64,7 +64,6 @@ static struct inet_protosw udplite6_protosw = {
  .protocol = IPPROTO_UDPLITE,
  .prot  = &udplitev6_prot,
  .ops  = &inet6_dgram_ops,
- .no_check = 0,
  .flags  = INET_PROTOSW_PERMANENT,
 };
 
diff --git a/net/l2tp/l2tp_ip.c b/net/l2tp/l2tp_ip.c
index da1a1ce..0fc8e64 100644
--- a/net/l2tp/l2tp_ip.c
+++ b/net/l2tp/l2tp_ip.c
@@ -606,7 +606,6 @@ static struct inet_protosw l2tp_ip_protosw = {
  .protocol = IPPROTO_L2TP,
  .prot  = &l2tp_ip_prot,
  .ops  = &l2tp_ip_ops,
- .no_check = 0,
 };
 
 static struct net_protocol l2tp_ip_protocol __read_mostly = {
diff --git a/net/l2tp/l2tp_ip6.c b/net/l2tp/l2tp_ip6.c
index d9b437e..add06fa 100644
--- a/net/l2tp/l2tp_ip6.c
+++ b/net/l2tp/l2tp_ip6.c
@@ -760,7 +760,6 @@ static struct inet_protosw l2tp_ip6_protosw = {
  .protocol = IPPROTO_L2TP,
  .prot  = &l2tp_ip6_prot,
  .ops  = &l2tp_ip6_ops,
- .no_check = 0,
 };
 
 static struct inet6_protocol l2tp_ip6_protocol __read_mostly = {
diff --git a/net/sctp/ipv6.c b/net/sctp/ipv6.c
index 9fb3e3c..c8dd427 100644
--- a/net/sctp/ipv6.c
+++ b/net/sctp/ipv6.c
@@ -944,7 +944,6 @@ static struct inet_protosw sctpv6_seqpacket_protosw = {
  .protocol      = IPPROTO_SCTP,
  .prot         = &sctpv6_prot,
  .ops           = &inet6_seqpacket_ops,
- .no_check      = 0,
  .flags         = SCTP_PROTOSW_FLAG
 };
 static struct inet_protosw sctpv6_stream_protosw = {
@@ -952,7 +951,6 @@ static struct inet_protosw sctpv6_stream_protosw = {
  .protocol      = IPPROTO_SCTP,
  .prot         = &sctpv6_prot,
  .ops           = &inet6_seqpacket_ops,
- .no_check      = 0,
  .flags         = SCTP_PROTOSW_FLAG,
 };
 
diff --git a/net/sctp/protocol.c b/net/sctp/protocol.c
index eaee00c..3fc68e0 100644
--- a/net/sctp/protocol.c
+++ b/net/sctp/protocol.c
@@ -1016,7 +1016,6 @@ static struct inet_protosw sctp_seqpacket_protosw = {
  .protocol   = IPPROTO_SCTP,
  .prot       = &sctp_prot,
  .ops        = &inet_seqpacket_ops,
- .no_check   = 0,
  .flags      = SCTP_PROTOSW_FLAG
 };
 static struct inet_protosw sctp_stream_protosw = {
@@ -1024,7 +1023,6 @@ static struct inet_protosw sctp_stream_protosw = {
  .protocol   = IPPROTO_SCTP,
  .prot       = &sctp_prot,
  .ops        = &inet_seqpacket_ops,
- .no_check   = 0,
  .flags      = SCTP_PROTOSW_FLAG
 };
 
-- 
1.7.1