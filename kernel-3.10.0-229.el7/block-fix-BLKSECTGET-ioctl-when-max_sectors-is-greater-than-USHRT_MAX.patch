From eacea62dfc40c40c6820765c1d3a50dca4df2c11 Mon Sep 17 00:00:00 2001
From: Jeff Moyer <jmoyer@redhat.com>
Date: Fri, 10 Oct 2014 21:03:06 -0400
Subject: [block] fix BLKSECTGET ioctl when max_sectors is greater than USHRT_MAX

Message-id: <1412975015-5370-6-git-send-email-jmoyer@redhat.com>
Patchwork-id: 97451
O-Subject: [RHEL7 PATCH 05/34] block: fix BLKSECTGET ioctl when max_sectors is greater than USHRT_MAX
Bugzilla: 1146660
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Mike Snitzer <snitzer@redhat.com>

This is a backport of the following commit.  This resolves bug
1146660.

  commit 63f264965947ac6299452711f614f086955b2515
  Author: Akinobu Mita <akinobu.mita@gmail.com>
  Date:   Sun May 25 21:43:33 2014 +0900

    block: fix BLKSECTGET ioctl when max_sectors is greater than USHRT_MAX

    BLKSECTGET ioctl loads the request queue's max_sectors as unsigned
    short value to the argument pointer.  So if the max_sector is greater
    than USHRT_MAX, the upper 16 bits of that is just discarded.

    In such case, USHRT_MAX is more preferable than the lower 16 bits of
    max_sectors.

    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: "James E.J. Bottomley" <JBottomley@parallels.com>
    Cc: Douglas Gilbert <dgilbert@interlog.com>
    Cc: linux-scsi@vger.kernel.org
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/compat_ioctl.c b/block/compat_ioctl.c
index 7c668c8..91f3706 100644
--- a/block/compat_ioctl.c
+++ b/block/compat_ioctl.c
@@ -662,6 +662,7 @@ long compat_blkdev_ioctl(struct file *file, unsigned cmd, unsigned long arg)
  fmode_t mode = file->f_mode;
  struct backing_dev_info *bdi;
  loff_t size;
+ unsigned int max_sectors;
 
  /*
   * O_NDELAY can be altered using fcntl(.., F_SETFL, ..), so we have
@@ -717,8 +718,9 @@ long compat_blkdev_ioctl(struct file *file, unsigned cmd, unsigned long arg)
  case BLKSSZGET: /* get block device hardware sector size */
   return compat_put_int(arg, bdev_logical_block_size(bdev));
  case BLKSECTGET:
-  return compat_put_ushort(arg,
-      queue_max_sectors(bdev_get_queue(bdev)));
+  max_sectors = min_t(unsigned int, USHRT_MAX,
+        queue_max_sectors(bdev_get_queue(bdev)));
+  return compat_put_ushort(arg, max_sectors);
  case BLKROTATIONAL:
   return compat_put_ushort(arg,
       !blk_queue_nonrot(bdev_get_queue(bdev)));
diff --git a/block/ioctl.c b/block/ioctl.c
index a31d91d..919c0a1 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -278,6 +278,7 @@ int blkdev_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
  struct backing_dev_info *bdi;
  loff_t size;
  int ret, n;
+ unsigned int max_sectors;
 
  switch(cmd) {
  case BLKFLSBUF:
@@ -375,7 +376,9 @@ int blkdev_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
  case BLKDISCARDZEROES:
   return put_uint(arg, bdev_discard_zeroes_data(bdev));
  case BLKSECTGET:
-  return put_ushort(arg, queue_max_sectors(bdev_get_queue(bdev)));
+  max_sectors = min_t(unsigned int, USHRT_MAX,
+        queue_max_sectors(bdev_get_queue(bdev)));
+  return put_ushort(arg, max_sectors);
  case BLKROTATIONAL:
   return put_ushort(arg, !blk_queue_nonrot(bdev_get_queue(bdev)));
  case BLKRASET:
-- 
1.7.1