From 79f01abdda4ee6e1676106c6e8639c978bb33a86 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:00:32 -0400
Subject: [fs] btrfs: setup inode location during btrfs_init_inode_locked

Message-id: <1407179109-13714-146-git-send-email-sandeen@redhat.com>
Patchwork-id: 87025
O-Subject: [RHEL7.1 PATCH 145/422] Btrfs: setup inode location during btrfs_init_inode_locked
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Chris Mason <clm@fb.com>

commit 90d3e592e99b8e374ead2b45148abf506493a959
Author: Chris Mason <clm@fb.com>
Date:   Thu Jan 9 17:28:00 2014 -0800

    Btrfs: setup inode location during btrfs_init_inode_locked

    We have a race during inode init because the BTRFS_I(inode)->location is setup
    after the inode hash table lock is dropped.  btrfs_find_actor uses the location
    field, so our search might not find an existing inode in the hash table if we
    race with the inode init code.

    This commit changes things to setup the location field sooner.  Also the find actor now
    uses only the location objectid to match inodes.  For inode hashing, we just
    need a unique and stable test, it doesn't have to reflect the inode numbers we
    show to userland.

    Signed-off-by: Chris Mason <clm@fb.com>
    CC: stable@vger.kernel.org
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index ed9356d..b2ecca4 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -61,7 +61,7 @@
 #include "props.h"
 
 struct btrfs_iget_args {
- u64 ino;
+ struct btrfs_key *location;
  struct btrfs_root *root;
 };
 
@@ -4977,7 +4977,9 @@ again:
 static int btrfs_init_locked_inode(struct inode *inode, void *p)
 {
  struct btrfs_iget_args *args = p;
- inode->i_ino = args->ino;
+ inode->i_ino = args->location->objectid;
+ memcpy(&BTRFS_I(inode)->location, args->location,
+        sizeof(*args->location));
  BTRFS_I(inode)->root = args->root;
  return 0;
 }
@@ -4985,19 +4987,19 @@ static int btrfs_init_locked_inode(struct inode *inode, void *p)
 static int btrfs_find_actor(struct inode *inode, void *opaque)
 {
  struct btrfs_iget_args *args = opaque;
- return args->ino == btrfs_ino(inode) &&
+ return args->location->objectid == BTRFS_I(inode)->location.objectid &&
   args->root == BTRFS_I(inode)->root;
 }
 
 static struct inode *btrfs_iget_locked(struct super_block *s,
-           u64 objectid,
+           struct btrfs_key *location,
            struct btrfs_root *root)
 {
  struct inode *inode;
  struct btrfs_iget_args args;
- unsigned long hashval = btrfs_inode_hash(objectid, root);
+ unsigned long hashval = btrfs_inode_hash(location->objectid, root);
 
- args.ino = objectid;
+ args.location = location;
  args.root = root;
 
  inode = iget5_locked(s, hashval, btrfs_find_actor,
@@ -5014,13 +5016,11 @@ struct inode *btrfs_iget(struct super_block *s, struct btrfs_key *location,
 {
  struct inode *inode;
 
- inode = btrfs_iget_locked(s, location->objectid, root);
+ inode = btrfs_iget_locked(s, location, root);
  if (!inode)
   return ERR_PTR(-ENOMEM);
 
  if (inode->i_state & I_NEW) {
-  BTRFS_I(inode)->root = root;
-  memcpy(&BTRFS_I(inode)->location, location, sizeof(*location));
   btrfs_read_locked_inode(inode);
   if (!is_bad_inode(inode)) {
    inode_tree_add(inode);
-- 
1.7.1