From d1736325a990588e7e8c40906f295593af655124 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:26:02 -0400
Subject: [tools] perf/trace: Split fd -> pathname array handling

Message-id: <1408462094-14194-194-git-send-email-jolsa@redhat.com>
Patchwork-id: 88154
O-Subject: [PATCH RHEL7.1 BZ1131394 193/325] perf trace: Split fd -> pathname array handling
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 97119f37bbebbab852899bd37ed52b80396728f9
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Fri Sep 27 17:34:10 2013 -0300

description
===========
So that the part that grows the array as needed is untied from the code
that reads the /proc/pid/fd symlink and can be used for the vfs_getname
hook that will set the fd -> path translation too, when available.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 03c5c4e..525cbfd 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -975,30 +975,9 @@ struct trace {
  double   runtime_ms;
 };
 
-static int thread__read_fd_path(struct thread *thread, int fd)
+static int trace__set_fd_pathname(struct thread *thread, int fd, const char *pathname)
 {
  struct thread_trace *ttrace = thread->priv;
- char linkname[PATH_MAX], pathname[PATH_MAX];
- struct stat st;
- int ret;
-
- if (thread->pid_ == thread->tid) {
-  scnprintf(linkname, sizeof(linkname),
-     "/proc/%d/fd/%d", thread->pid_, fd);
- } else {
-  scnprintf(linkname, sizeof(linkname),
-     "/proc/%d/task/%d/fd/%d", thread->pid_, thread->tid, fd);
- }
-
- if (lstat(linkname, &st) < 0 || st.st_size + 1 > (off_t)sizeof(pathname))
-  return -1;
-
- ret = readlink(linkname, pathname, sizeof(pathname));
-
- if (ret < 0 || ret > st.st_size)
-  return -1;
-
- pathname[ret] = '\0';
 
  if (fd > ttrace->paths.max) {
   char **npath = realloc(ttrace->paths.table, (fd + 1) * sizeof(char *));
@@ -1022,6 +1001,32 @@ static int thread__read_fd_path(struct thread *thread, int fd)
  return ttrace->paths.table[fd] != NULL ? 0 : -1;
 }
 
+static int thread__read_fd_path(struct thread *thread, int fd)
+{
+ char linkname[PATH_MAX], pathname[PATH_MAX];
+ struct stat st;
+ int ret;
+
+ if (thread->pid_ == thread->tid) {
+  scnprintf(linkname, sizeof(linkname),
+     "/proc/%d/fd/%d", thread->pid_, fd);
+ } else {
+  scnprintf(linkname, sizeof(linkname),
+     "/proc/%d/task/%d/fd/%d", thread->pid_, thread->tid, fd);
+ }
+
+ if (lstat(linkname, &st) < 0 || st.st_size + 1 > (off_t)sizeof(pathname))
+  return -1;
+
+ ret = readlink(linkname, pathname, sizeof(pathname));
+
+ if (ret < 0 || ret > st.st_size)
+  return -1;
+
+ pathname[ret] = '\0';
+ return trace__set_fd_pathname(thread, fd, pathname);
+}
+
 static const char *thread__fd_path(struct thread *thread, int fd, bool live)
 {
  struct thread_trace *ttrace = thread->priv;
-- 
1.7.1