From 6c1e2eec5b01dfdf7abb7c509f49d61e744749a4 Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Thu, 14 Aug 2014 14:42:27 -0400
Subject: [ethernet] e1000e: Fix EEE in S5 w/ Runtime PM enabled

Message-id: <1408027348-9610-34-git-send-email-jogreene@redhat.com>
Patchwork-id: 87722
O-Subject: [RHEL7.1 PATCH 33/34] e1000e: Fix EEE in S5 w/ Runtime PM enabled
Bugzilla: 1091119
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: 1091119
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7834849
Tested: By me. Acceptable. See BZ for details

The process of shutting down the system causes a call to the close PM
callback.  The reset in close causes a loss of link, and the resultant
LSC interrupt causes the Runtime PM idle callback to be called.  The
check for link (while link is down) in the idle callback is wiping the
information about the EEE ability of the link partner.  The information is
still gone when the PHY is powered back up in the shutdown flow.  This
causes EEE in S5 to fail when Runtime PM is active.

Save the link partner's EEE ability in the idle callback so that a Runtime
PM event will not cause a loss of this information.

Signed-off-by: Dave Ertman <david.m.ertman@intel.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 2116bc25e8aefd76503dfa2fc328eb8da684bb38)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/e1000e/netdev.c b/drivers/net/ethernet/intel/e1000e/netdev.c
index da4372d..0964ab7 100644
--- a/drivers/net/ethernet/intel/e1000e/netdev.c
+++ b/drivers/net/ethernet/intel/e1000e/netdev.c
@@ -6336,9 +6336,14 @@ static int e1000e_pm_runtime_idle(struct device *dev)
  struct pci_dev *pdev = to_pci_dev(dev);
  struct net_device *netdev = pci_get_drvdata(pdev);
  struct e1000_adapter *adapter = netdev_priv(netdev);
+ u16 eee_lp;
 
- if (!e1000e_has_link(adapter))
+ eee_lp = adapter->hw.dev_spec.ich8lan.eee_lp_ability;
+
+ if (!e1000e_has_link(adapter)) {
+  adapter->hw.dev_spec.ich8lan.eee_lp_ability = eee_lp;
   pm_schedule_suspend(dev, 5 * MSEC_PER_SEC);
+ }
 
  return -EBUSY;
 }
-- 
1.7.1