From ef99203a886097540f59de1188424fc29106eaf1 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:14:31 -0400
Subject: [net] udp: Only allow busy read/poll on connected sockets

Message-id: <1409652920-431-9-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90181
O-Subject: [PATCH 08/57] [RHEL7.1 net] udp: Only allow busy read/poll on connected sockets
Bugzilla: 1078978 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

This is part of series to avoid mangling
'net: Implmement RFC 6936 (zero RX csums or UDP/IPv6)' patch.

commit 005ec9743394010cd37d86c3fd2e81978231cdbf
Author: Shawn Bohrer <sbohrer@rgmadvisors.com>
Date:   Mon Oct 7 11:01:38 2013 -0500

    udp: Only allow busy read/poll on connected sockets

    UDP sockets can receive packets from multiple endpoints and thus may be
    received on multiple receive queues.  Since packets packets can arrive
    on multiple receive queues we should not mark the napi_id for all
    packets.  This makes busy read/poll only work for connected UDP sockets.

    This additionally enables busy read/poll for UDP multicast packets as
    long as the socket is connected by moving the check into
    __udp_queue_rcv_skb().

    Signed-off-by: Shawn Bohrer <sbohrer@rgmadvisors.com>
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/udp.c b/net/ipv4/udp.c
index 21404cb..5f54da2 100644
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@ -1402,8 +1402,10 @@ static int __udp_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
 {
  int rc;
 
- if (inet_sk(sk)->inet_daddr)
+ if (inet_sk(sk)->inet_daddr) {
   sock_rps_save_rxhash(sk, skb);
+  sk_mark_napi_id(sk, skb);
+ }
 
  rc = sock_queue_rcv_skb(sk, skb);
  if (rc < 0) {
@@ -1698,7 +1700,6 @@ int __udp4_lib_rcv(struct sk_buff *skb, struct udp_table *udptable,
  if (sk != NULL) {
   int ret;
 
-  sk_mark_napi_id(sk, skb);
   ret = udp_queue_rcv_skb(sk, skb);
   sock_put(sk);
 
diff --git a/net/ipv6/udp.c b/net/ipv6/udp.c
index 83b0a99..e861f7b 100644
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@ -541,8 +541,10 @@ static int __udpv6_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
 {
  int rc;
 
- if (!ipv6_addr_any(&sk->sk_v6_daddr))
+ if (!ipv6_addr_any(&sk->sk_v6_daddr)) {
   sock_rps_save_rxhash(sk, skb);
+  sk_mark_napi_id(sk, skb);
+ }
 
  rc = sock_queue_rcv_skb(sk, skb);
  if (rc < 0) {
@@ -835,7 +837,6 @@ int __udp6_lib_rcv(struct sk_buff *skb, struct udp_table *udptable,
  if (sk != NULL) {
   int ret;
 
-  sk_mark_napi_id(sk, skb);
   ret = udpv6_queue_rcv_skb(sk, skb);
   sock_put(sk);
 
-- 
1.7.1