From 96a50c49d7640e6f6a0ddb7d663ca45b0859eb1a Mon Sep 17 00:00:00 2001
From: Alexander Duyck <alexander.h.duyck@redhat.com>
Date: Tue, 25 Nov 2014 16:59:28 -0500
Subject: [net] ipv6: gso: remove redundant locking

Message-id: <20141125165928.2907.37912.stgit@ahduyck-vm-rhel7>
Patchwork-id: 100950
O-Subject: [RHEL7.1 net PATCH 2/3] ipv6: gso: remove redundant locking
Bugzilla: 1159577
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>

Bugzilla: 1159577
Brew Build: 8292276

Trivial change to make backporting future patches easier.

Backport of upstream commit: b917eb155c56bbb766140b406979820e719e3f55

 commit b917eb155c56bbb766140b406979820e719e3f55
 Author: Eric Dumazet <edumazet@google.com>
 Date:   Fri Oct 18 14:43:55 2013 -0700

    ipv6: gso: remove redundant locking

    ipv6_gso_send_check() and ipv6_gso_segment() are called by
    skb_mac_gso_segment() under rcu lock, no need to use
    rcu_read_lock() / rcu_read_unlock()

    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Alexander Duyck <alexander.h.duyck@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv6/ip6_offload.c b/net/ipv6/ip6_offload.c
index 0ff9301..dd63a1b 100644
--- a/net/ipv6/ip6_offload.c
+++ b/net/ipv6/ip6_offload.c
@@ -66,7 +66,6 @@ static int ipv6_gso_send_check(struct sk_buff *skb)
  __skb_pull(skb, sizeof(*ipv6h));
  err = -EPROTONOSUPPORT;
 
- rcu_read_lock();
  ops = rcu_dereference(inet6_offloads[
   ipv6_gso_pull_exthdrs(skb, ipv6h->nexthdr)]);
 
@@ -74,7 +73,6 @@ static int ipv6_gso_send_check(struct sk_buff *skb)
   skb_reset_transport_header(skb);
   err = ops->callbacks.gso_send_check(skb);
  }
- rcu_read_unlock();
 
 out:
  return err;
@@ -125,13 +123,12 @@ static struct sk_buff *ipv6_gso_segment(struct sk_buff *skb,
  segs = ERR_PTR(-EPROTONOSUPPORT);
 
  proto = ipv6_gso_pull_exthdrs(skb, ipv6h->nexthdr);
- rcu_read_lock();
+
  ops = rcu_dereference(inet6_offloads[proto]);
  if (likely(ops && ops->callbacks.gso_segment)) {
   skb_reset_transport_header(skb);
   segs = ops->callbacks.gso_segment(skb, features);
  }
- rcu_read_unlock();
 
  if (IS_ERR(segs))
   goto out;
-- 
1.7.1