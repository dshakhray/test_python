From 94f2e0a2f76994de580675c5ffc68b626b445a65 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:09 -0400
Subject: [block] blk-mq: fix potential stall during CPU unplug with IO pending

Message-id: <1402670238-13916-22-git-send-email-snitzer@redhat.com>
Patchwork-id: 83774
O-Subject: [RHEL7.1 PATCH 021/150] blk-mq: fix potential stall during CPU unplug with IO pending
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit bccb5f7c8bdfe460d95f986c6edf2e75d8052897
Author: Jens Axboe <axboe@fb.com>
Date:   Fri Apr 4 21:34:48 2014 -0600

    blk-mq: fix potential stall during CPU unplug with IO pending

    When a CPU is unplugged, we move the blk_mq_ctx request entries
    to the current queue. The current code forgets to remap the
    blk_mq_hw_ctx before marking the software context pending,
    which breaks if old-cpu and new-cpu don't map to the same
    hardware queue.

    Additionally, if we mark entries as pending in the new
    hardware queue, then make sure we schedule it for running.
    Otherwise request could be sitting there until someone else
    queues IO for that hardware queue.

    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index b1bcc61..1d2a9bd 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -956,6 +956,7 @@ static void blk_mq_hctx_notify(void *data, unsigned long action,
           unsigned int cpu)
 {
  struct blk_mq_hw_ctx *hctx = data;
+ struct request_queue *q = hctx->queue;
  struct blk_mq_ctx *ctx;
  LIST_HEAD(tmp);
 
@@ -965,7 +966,7 @@ static void blk_mq_hctx_notify(void *data, unsigned long action,
  /*
   * Move ctx entries to new CPU, if this one is going away.
   */
- ctx = __blk_mq_get_ctx(hctx->queue, cpu);
+ ctx = __blk_mq_get_ctx(q, cpu);
 
  spin_lock(&ctx->lock);
  if (!list_empty(&ctx->rq_list)) {
@@ -977,7 +978,7 @@ static void blk_mq_hctx_notify(void *data, unsigned long action,
  if (list_empty(&tmp))
   return;
 
- ctx = blk_mq_get_ctx(hctx->queue);
+ ctx = blk_mq_get_ctx(q);
  spin_lock(&ctx->lock);
 
  while (!list_empty(&tmp)) {
@@ -988,10 +989,13 @@ static void blk_mq_hctx_notify(void *data, unsigned long action,
   list_move_tail(&rq->queuelist, &ctx->rq_list);
  }
 
+ hctx = q->mq_ops->map_queue(q, ctx->cpu);
  blk_mq_hctx_mark_pending(hctx, ctx);
 
  spin_unlock(&ctx->lock);
  blk_mq_put_ctx(ctx);
+
+ blk_mq_run_hw_queue(hctx, true);
 }
 
 static int blk_mq_init_hw_commands(struct blk_mq_hw_ctx *hctx,
-- 
1.7.1