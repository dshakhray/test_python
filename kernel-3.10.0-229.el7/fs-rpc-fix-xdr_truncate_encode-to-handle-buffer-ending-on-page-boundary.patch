From 08a47c470f163b232b1dfb23f65621aa4f2bc7ad Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 12 Jan 2015 20:57:39 -0500
Subject: [fs] rpc: fix xdr_truncate_encode to handle buffer ending on page boundary
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1421096259-4774-1-git-send-email-bfields@redhat.com>
Patchwork-id: 102829
O-Subject: [Patch RHEL7 fs] rpc: fix xdr_truncate_encode to handle buffer ending on page boundary
Bugzilla: 1176641
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

A struct xdr_stream at a page boundary might point to the end of one
page or the beginning of the next, but xdr_truncate_encode isn't
prepared to handle the former.

This can cause corruption of NFSv4 READDIR replies in the case that a
readdir entry that would have exceeded the client's dircount/maxcount
limit would have ended exactly on a 4k page boundary.  You're more
likely to hit this case on large directories.

Other xdr_truncate_encode callers are probably also affected.

Reported-by: Holger HoffstÃÂ¤tte <holger.hoffstaette@googlemail.com>
Tested-by: Holger HoffstÃÂ¤tte <holger.hoffstaette@googlemail.com>
Fixes: 3e19ce762b53 "rpc: xdr_truncate_encode"
Cc: stable@vger.kernel.org
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 49a068f82a1d30eb585d7804b05948376be6cf9a
Bugzilla: 1176641
---
 net/sunrpc/xdr.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/sunrpc/xdr.c b/net/sunrpc/xdr.c
index 5c665a6..506a927 100644
--- a/net/sunrpc/xdr.c
+++ b/net/sunrpc/xdr.c
@@ -605,7 +605,7 @@ void xdr_truncate_encode(struct xdr_stream *xdr, size_t len)
  struct kvec *head = buf->head;
  struct kvec *tail = buf->tail;
  int fraglen;
- int new, old;
+ int new;
 
  if (len > buf->len) {
   WARN_ON_ONCE(1);
@@ -627,8 +627,8 @@ void xdr_truncate_encode(struct xdr_stream *xdr, size_t len)
  buf->len -= fraglen;
 
  new = buf->page_base + buf->page_len;
- old = new + fraglen;
- xdr->page_ptr -= (old >> PAGE_SHIFT) - (new >> PAGE_SHIFT);
+
+ xdr->page_ptr = buf->pages + (new >> PAGE_SHIFT);
 
  if (buf->page_len && buf->len == len) {
   xdr->p = page_address(*xdr->page_ptr);
-- 
1.7.1