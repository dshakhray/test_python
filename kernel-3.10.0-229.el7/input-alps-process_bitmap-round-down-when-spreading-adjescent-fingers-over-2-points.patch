From a02cb3e9612a2a228f2a645166c0ba70a4c4bd81 Mon Sep 17 00:00:00 2001
From: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date: Tue, 26 Aug 2014 17:19:00 -0400
Subject: [input] alps: process_bitmap, round down when spreading adjescent fingers over 2 points

Message-id: <1409073549-31548-10-git-send-email-benjamin.tissoires@redhat.com>
Patchwork-id: 89242
O-Subject: [PATCH RHEL7 09/18] Input: alps - process_bitmap: round down when spreading adjescent fingers over 2 points
Bugzilla: 1107819
RH-Acked-by: Hans de Goede <hdegoede@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1107819
Upstream: since v3.17
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7882179
Tested by me on a Toshiba Portege R30 with a v7 Alps touchpad

commit 28835f4540564e6319028c9c1aeadf16604bed9c
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Jul 25 22:42:53 2014 -0700

    Input: alps - process_bitmap: round down when spreading adjescent fingers over 2 points

    This fixes 2 fingers at the same height or width on the touchpad getting
    reported at different y / x coordinates.

    Note num_bits is always at least 1.

    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/input/mouse/alps.c b/drivers/input/mouse/alps.c
index 5b35f4f..1c99178 100644
--- a/drivers/input/mouse/alps.c
+++ b/drivers/input/mouse/alps.c
@@ -391,13 +391,13 @@ static int alps_process_bitmap(struct alps_data *priv,
   * adjacent fingers. Divide the single contact between the two points.
   */
  if (fingers_x == 1) {
-  i = x_low.num_bits / 2;
+  i = (x_low.num_bits - 1) / 2;
   x_low.num_bits = x_low.num_bits - i;
   x_high.start_bit = x_low.start_bit + i;
   x_high.num_bits = max(i, 1);
  }
  if (fingers_y == 1) {
-  i = y_low.num_bits / 2;
+  i = (y_low.num_bits - 1) / 2;
   y_low.num_bits = y_low.num_bits - i;
   y_high.start_bit = y_low.start_bit + i;
   y_high.num_bits = max(i, 1);
-- 
1.7.1