From 1e8afd9662390fba7a85ada5149e89f13a65418d Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sun, 10 Aug 2014 18:21:04 -0400
Subject: [iommu] Add iommu_error class event to iommu trace

Message-id: <20140810182104.24055.52380.stgit@gir.stowe>
Patchwork-id: 87587
O-Subject: [RHEL7.1 PATCH 16/19] iommu: Add iommu_error class event to iommu trace
Bugzilla: 1127467
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Dutile <ddutile@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1127467
Upstream Status: 04fa2f7f837601903e5fe0f93bc2af8559d8c035

commit 04fa2f7f837601903e5fe0f93bc2af8559d8c035
Author: Shuah Khan <shuah.kh@samsung.com>
Date:   Tue Sep 24 15:21:19 2013 -0600

    iommu: Add iommu_error class event to iommu trace

    iommu_error class event can be enabled to trigger when an iommu
    error occurs. This trace event is intended to be called to report the
    error information. Trace information includes driver name, device name,
    iova, and flags.

    iommu_error:io_page_fault

    Signed-off-by: Shuah Khan <shuah.kh@samsung.com>
    Signed-off-by: Joerg Roedel <joro@8bytes.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/iommu/iommu-traces.c b/drivers/iommu/iommu-traces.c
index a2af60f..bf3b317 100644
--- a/drivers/iommu/iommu-traces.c
+++ b/drivers/iommu/iommu-traces.c
@@ -22,3 +22,6 @@ EXPORT_TRACEPOINT_SYMBOL_GPL(detach_device_from_domain);
 /* iommu_map_unmap */
 EXPORT_TRACEPOINT_SYMBOL_GPL(map);
 EXPORT_TRACEPOINT_SYMBOL_GPL(unmap);
+
+/* iommu_error */
+EXPORT_TRACEPOINT_SYMBOL_GPL(io_page_fault);
diff --git a/include/trace/events/iommu.h b/include/trace/events/iommu.h
index 86bcc5a..a8f5c32 100644
--- a/include/trace/events/iommu.h
+++ b/include/trace/events/iommu.h
@@ -123,6 +123,39 @@ DEFINE_EVENT_PRINT(iommu_map_unmap, unmap,
    __entry->iova, __entry->size
  )
 );
+
+DECLARE_EVENT_CLASS(iommu_error,
+
+ TP_PROTO(struct device *dev, unsigned long iova, int flags),
+
+ TP_ARGS(dev, iova, flags),
+
+ TP_STRUCT__entry(
+  __string(device, dev_name(dev))
+  __string(driver, dev_driver_string(dev))
+  __field(u64, iova)
+  __field(int, flags)
+ ),
+
+ TP_fast_assign(
+  __assign_str(device, dev_name(dev));
+  __assign_str(driver, dev_driver_string(dev));
+  __entry->iova = iova;
+  __entry->flags = flags;
+ ),
+
+ TP_printk("IOMMU:%s %s iova=0x%016llx flags=0x%04x",
+   __get_str(driver), __get_str(device),
+   __entry->iova, __entry->flags
+ )
+);
+
+DEFINE_EVENT(iommu_error, io_page_fault,
+
+ TP_PROTO(struct device *dev, unsigned long iova, int flags),
+
+ TP_ARGS(dev, iova, flags)
+);
 #endif /* _TRACE_IOMMU_H */
 
 /* This part must be outside protection */
-- 
1.7.1