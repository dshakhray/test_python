From aaaeca0d17892a40e52c1a40e9e1718c0c7df45b Mon Sep 17 00:00:00 2001
From: Paul Moore <pmoore@redhat.com>
Date: Mon, 22 Dec 2014 22:38:57 -0500
Subject: [kernel] audit: don't attempt to lookup PIDs when changing PID filtering audit rules

Message-id: <20141222223857.19504.56639.stgit@localhost>
Patchwork-id: 102384
O-Subject: [RHEL7 PATCH] audit: don't attempt to lookup PIDs when changing PID filtering audit rules
Bugzilla: 1172624
RH-Acked-by: Eric Paris <eparis@redhat.com>
RH-Acked-by: Richard Guy Briggs <rgb@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1172624
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8433920
Upstream: currently in the audit stable-3.19 branch
          http://git.infradead.org/users/pcmoore/audit
Testing: yes, see BZ

 commit 3640dcfa4fd00cd91d88bb86250bdb496f7070c0
 Author: Paul Moore <pmoore@redhat.com>
 Date:   Fri Dec 19 18:35:53 2014 -0500

 audit: don't attempt to lookup PIDs when changing PID filtering audit rules

 Commit f1dc4867 ("audit: anchor all pid references in the initial pid
 namespace") introduced a find_vpid() call when adding/removing audit
 rules with PID/PPID filters; unfortunately this is problematic as
 find_vpid() only works if there is a task with the associated PID
 alive on the system.  The following commands demonstrate a simple
 reproducer.

 # auditctl -D
 # auditctl -l
 # autrace /bin/true
 # auditctl -l

 This patch resolves the problem by simply using the PID provided by
 the user without any additional validation, e.g. no calls to check to
 see if the task/PID exists.

 Cc: stable@vger.kernel.org # 3.15
 Cc: Richard Guy Briggs <rgb@redhat.com>
 Signed-off-by: Paul Moore <pmoore@redhat.com>
 Acked-by: Eric Paris <eparis@redhat.com>
 Reviewed-by: Richard Guy Briggs <rgb@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/auditfilter.c b/kernel/auditfilter.c
index 095e61f..42c84cc 100644
--- a/kernel/auditfilter.c
+++ b/kernel/auditfilter.c
@@ -429,19 +429,6 @@ static struct audit_entry *audit_data_to_entry(struct audit_rule_data *data,
    f->val = 0;
   }
 
-  if ((f->type == AUDIT_PID) || (f->type == AUDIT_PPID)) {
-   struct pid *pid;
-   rcu_read_lock();
-   pid = find_vpid(f->val);
-   if (!pid) {
-    rcu_read_unlock();
-    err = -ESRCH;
-    goto exit_free;
-   }
-   f->val = pid_nr(pid);
-   rcu_read_unlock();
-  }
-
   err = audit_field_valid(entry, f);
   if (err)
    goto exit_free;
-- 
1.7.1