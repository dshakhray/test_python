From 6404eda5859ba2351945ce4074021dd9589fd818 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:15 -0400
Subject: [block] blk-mq: merge blk_mq_alloc_reserved_request into blk_mq_alloc_request

Message-id: <1402670238-13916-88-git-send-email-snitzer@redhat.com>
Patchwork-id: 83886
O-Subject: [RHEL7.1 PATCH 087/150] blk-mq: merge blk_mq_alloc_reserved_request into blk_mq_alloc_request
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 4ce01dd1a07d9cf3eaf44fbf4ea9a61b11badccc
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue May 27 20:59:46 2014 +0200

    blk-mq: merge blk_mq_alloc_reserved_request into blk_mq_alloc_request

    Instead of having two almost identical copies of the same code just let
    the callers pass in the reserved flag directly.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-core.c b/block/blk-core.c
index ca094f5..212c813 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -1172,7 +1172,7 @@ static struct request *blk_old_get_request(struct request_queue *q, int rw,
 struct request *blk_get_request(struct request_queue *q, int rw, gfp_t gfp_mask)
 {
  if (q->mq_ops)
-  return blk_mq_alloc_request(q, rw, gfp_mask);
+  return blk_mq_alloc_request(q, rw, gfp_mask, false);
  else
   return blk_old_get_request(q, rw, gfp_mask);
 }
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 67066ec..63d581d 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -294,35 +294,21 @@ static struct request *blk_mq_alloc_request_pinned(struct request_queue *q,
  return rq;
 }
 
-struct request *blk_mq_alloc_request(struct request_queue *q, int rw, gfp_t gfp)
+struct request *blk_mq_alloc_request(struct request_queue *q, int rw, gfp_t gfp,
+  bool reserved)
 {
  struct request *rq;
 
  if (blk_mq_queue_enter(q))
   return NULL;
 
- rq = blk_mq_alloc_request_pinned(q, rw, gfp, false);
+ rq = blk_mq_alloc_request_pinned(q, rw, gfp, reserved);
  if (rq)
   blk_mq_put_ctx(rq->mq_ctx);
  return rq;
 }
 EXPORT_SYMBOL(blk_mq_alloc_request);
 
-struct request *blk_mq_alloc_reserved_request(struct request_queue *q, int rw,
-           gfp_t gfp)
-{
- struct request *rq;
-
- if (blk_mq_queue_enter(q))
-  return NULL;
-
- rq = blk_mq_alloc_request_pinned(q, rw, gfp, true);
- if (rq)
-  blk_mq_put_ctx(rq->mq_ctx);
- return rq;
-}
-EXPORT_SYMBOL(blk_mq_alloc_reserved_request);
-
 static void __blk_mq_free_request(struct blk_mq_hw_ctx *hctx,
       struct blk_mq_ctx *ctx, struct request *rq)
 {
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 5635d74..8e00a2d 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -160,8 +160,8 @@ void blk_mq_insert_request(struct request *, bool, bool, bool);
 void blk_mq_run_queues(struct request_queue *q, bool async);
 void blk_mq_free_request(struct request *rq);
 bool blk_mq_can_queue(struct blk_mq_hw_ctx *);
-struct request *blk_mq_alloc_request(struct request_queue *q, int rw, gfp_t gfp);
-struct request *blk_mq_alloc_reserved_request(struct request_queue *q, int rw, gfp_t gfp);
+struct request *blk_mq_alloc_request(struct request_queue *q, int rw,
+  gfp_t gfp, bool reserved);
 struct request *blk_mq_tag_to_rq(struct blk_mq_tags *tags, unsigned int tag);
 
 struct blk_mq_hw_ctx *blk_mq_map_queue(struct request_queue *, const int ctx_index);
-- 
1.7.1