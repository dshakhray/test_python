From a17a1a94844e37f63773fe4e0845ee11b3603314 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Fri, 5 Sep 2014 01:46:15 -0400
Subject: [iommu] vt-d: Avoid caching stale domain_device_info when hot-removing PCI dev

Message-id: <20140905014615.31297.22634.stgit@gir.stowe>
Patchwork-id: 91297
O-Subject: [RHEL7.1 PATCH 04/65] iommu/vt-d: Avoid caching stale domain_device_info when hot-removing PCI dev
Bugzilla: 1129880 1087643
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1087643
Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1129880
Upstream Status: 7e7dfab71af851a7350ab47b1c01a2f84deacc12

commit 7e7dfab71af851a7350ab47b1c01a2f84deacc12
Author: Jiang Liu <jiang.liu@linux.intel.com>
Date:   Wed Feb 19 14:07:23 2014 +0800

    iommu/vt-d: Avoid caching stale domain_device_info when hot-removing PCI dev

    Function device_notifier() in intel-iommu.c only remove domain_device_info
    data structure associated with a PCI device when handling PCI device
    driver unbinding events. If a PCI device has never been bound to a PCI
    device driver, there won't be BUS_NOTIFY_UNBOUND_DRIVER event when
    hot-removing the PCI device. So associated domain_device_info data
    structure may get lost.

    On the other hand, if iommu_pass_through is enabled, function
    iommu_prepare_static_indentify_mapping() will create domain_device_info
    data structure for each PCIe to PCIe bridge and PCIe endpoint,
    no matter whether there are drivers associated with those PCIe devices
    or not. So those domain_device_info data structures will get lost when
    hot-removing the assocated PCIe devices if they have never bound to
    any PCI device driver.

    To be even worse, it's not only an memory leak issue, but also an
    caching of stale information bug because the memory are kept in
    device_domain_list and domain->devices lists.

    Fix the bug by trying to remove domain_device_info data structure when
    handling BUS_NOTIFY_DEL_DEVICE event.

    Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
    Signed-off-by: Joerg Roedel <joro@8bytes.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c
index f75d3ae..5a411e8 100644
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@ -3603,18 +3603,19 @@ static int device_notifier(struct notifier_block *nb,
  if (iommu_dummy(pdev))
   return 0;
 
+ if (action != BUS_NOTIFY_UNBOUND_DRIVER &&
+     action != BUS_NOTIFY_DEL_DEVICE)
+  return 0;
+
  domain = find_domain(pdev);
  if (!domain)
   return 0;
 
- if (action == BUS_NOTIFY_UNBOUND_DRIVER) {
-  domain_remove_one_dev_info(domain, pdev);
-
-  if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&
-      !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&
-      list_empty(&domain->devices))
-   domain_exit(domain);
- }
+ domain_remove_one_dev_info(domain, pdev);
+ if (!(domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) &&
+     !(domain->flags & DOMAIN_FLAG_STATIC_IDENTITY) &&
+     list_empty(&domain->devices))
+  domain_exit(domain);
 
  return 0;
 }
-- 
1.7.1