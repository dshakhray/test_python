From c469ee8a491b7a7a5a2ff2c0c27e4b29e9ea4149 Mon Sep 17 00:00:00 2001
From: Petr  Matousek <pmatouse@redhat.com>
Date: Thu, 11 Dec 2014 13:14:49 -0500
Subject: [x86] traps: stop using IST for #SS

Message-id: <20141211131449.GP13657@dhcp-25-225.brq.redhat.com>
Patchwork-id: 5247
O-Subject: [kernel team] [EMBARGOED RHEL 7 PATCH] x86_64, traps: stop using IST for #SS
Bugzilla: 1172813
CVE: CVE-2014-9322
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Kyle McMartin <kmcmarti@redhat.com>

CVE:          CVE-2014-9322
CVE / Top BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1172806
BZ:           https://bugzilla.redhat.com/show_bug.cgi?id=1172813
Brew build:   https://brewweb.devel.redhat.com/taskinfo?taskID=8363911
Testing:      using reproducer

It was found that because paranoid entry does not contain the swapgs fixup for
bad_iret (unlike error entry), under certain conditions (#SS on iret) bad_iret
can be reached with usergs instead of kernelgs that it is expecting:

iretq (usergs)
 -> #SS (IST stack transition omitted, because it does not play any role here)
  -> paranoidentry (swapgs -> kernelgs)
   -> do_stack_segment()
    -> do_trap()
     -> do_trap_no_signal()
      -> fixup_exception() (iret -> bad_iret fixup)
     -> do_trap_no_signal()
    -> do_trap()
   -> do_stack_segment()
  -> paranoidexit (swapgs -> usergs) (iretq)
 -> bad_iret (bad_iret expects kernelgs, but we got here with usergs, so it
              swaps to kernelgs)
  -> general_protection
   -> error_entry (swapgs -> usergs)
    -> do_general_protection() with usergs (current macro, per cpu vars ...)

By changing #SS to use error entry instead of paranoid entry, we will use the
error_kernelspace swapgs fixup and reach bad_iret in the correct state.

The upstream patch below fixes condition that is triggerable the same way, but
due to the #SS IST stack transition espfix64 is not able to cope with, the
result is unrecoverable double fault. Unlike upstream, we do not have
espfix64 functionality in rhel-7, but we can use the same patch.

Upstream commit:
 From 6f442be2fb22be02cafa606f1769fa1e6f894441 Mon Sep 17 00:00:00 2001
 From: Andy Lutomirski <luto@amacapital.net>
 Date: Sat, 22 Nov 2014 18:00:32 -0800
 Subject: x86_64, traps: Stop using IST for #SS

 On a 32-bit kernel, this has no effect, since there are no IST stacks.

 On a 64-bit kernel, #SS can only happen in user code, on a failed iret
 to user space, a canonical violation on access via RSP or RBP, or a
 genuine stack segment violation in 32-bit kernel code.  The first two
 cases don't need IST, and the latter two cases are unlikely fatal bugs,
 and promoting them to double faults would be fine.

 This fixes a bug in which the espfix64 code mishandles a stack segment
 violation.

 This saves 4k of memory per CPU and a tiny bit of code.

 Signed-off-by: Andy Lutomirski <luto@amacapital.net>
 Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
 Cc: stable@vger.kernel.org
 Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Petr Matousek <pmatouse@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/include/asm/page_32_types.h b/arch/x86/include/asm/page_32_types.h
index ef17af0..4376b45 100644
--- a/arch/x86/include/asm/page_32_types.h
+++ b/arch/x86/include/asm/page_32_types.h
@@ -18,7 +18,6 @@
 #define THREAD_SIZE_ORDER 1
 #define THREAD_SIZE  (PAGE_SIZE << THREAD_SIZE_ORDER)
 
-#define STACKFAULT_STACK 0
 #define DOUBLEFAULT_STACK 1
 #define NMI_STACK 0
 #define DEBUG_STACK 0
diff --git a/arch/x86/include/asm/page_64_types.h b/arch/x86/include/asm/page_64_types.h
index e5ebcd3..735457b 100644
--- a/arch/x86/include/asm/page_64_types.h
+++ b/arch/x86/include/asm/page_64_types.h
@@ -14,12 +14,11 @@
 #define IRQ_STACK_ORDER 2
 #define IRQ_STACK_SIZE (PAGE_SIZE << IRQ_STACK_ORDER)
 
-#define STACKFAULT_STACK 1
-#define DOUBLEFAULT_STACK 2
-#define NMI_STACK 3
-#define DEBUG_STACK 4
-#define MCE_STACK 5
-#define N_EXCEPTION_STACKS 5  /* hw limit: 7 */
+#define DOUBLEFAULT_STACK 1
+#define NMI_STACK 2
+#define DEBUG_STACK 3
+#define MCE_STACK 4
+#define N_EXCEPTION_STACKS 4  /* hw limit: 7 */
 
 #define PUD_PAGE_SIZE  (_AC(1, UL) << PUD_SHIFT)
 #define PUD_PAGE_MASK  (~(PUD_PAGE_SIZE-1))
diff --git a/arch/x86/include/asm/traps.h b/arch/x86/include/asm/traps.h
index caf2b93..d017966 100644
--- a/arch/x86/include/asm/traps.h
+++ b/arch/x86/include/asm/traps.h
@@ -43,6 +43,7 @@ asmlinkage void simd_coprocessor_error(void);
 
 #ifdef CONFIG_TRACING
 asmlinkage void trace_page_fault(void);
+#define trace_stack_segment stack_segment
 #define trace_divide_error divide_error
 #define trace_bounds bounds
 #define trace_invalid_op invalid_op
diff --git a/arch/x86/kernel/dumpstack_64.c b/arch/x86/kernel/dumpstack_64.c
index addb207..66e274a 100644
--- a/arch/x86/kernel/dumpstack_64.c
+++ b/arch/x86/kernel/dumpstack_64.c
@@ -24,7 +24,6 @@ static char x86_stack_ids[][8] = {
   [ DEBUG_STACK-1   ] = "#DB",
   [ NMI_STACK-1   ] = "NMI",
   [ DOUBLEFAULT_STACK-1  ] = "#DF",
-  [ STACKFAULT_STACK-1  ] = "#SS",
   [ MCE_STACK-1   ] = "#MC",
 #if DEBUG_STKSZ > EXCEPTION_STKSZ
   [ N_EXCEPTION_STACKS ...
diff --git a/arch/x86/kernel/entry_64.S b/arch/x86/kernel/entry_64.S
index c5bd667..76be679 100644
--- a/arch/x86/kernel/entry_64.S
+++ b/arch/x86/kernel/entry_64.S
@@ -1296,7 +1296,7 @@ apicinterrupt3 HYPERVISOR_CALLBACK_VECTOR \
 
 paranoidzeroentry_ist debug do_debug DEBUG_STACK
 paranoidzeroentry_ist int3 do_int3 DEBUG_STACK
-paranoiderrorentry stack_segment do_stack_segment
+errorentry stack_segment do_stack_segment
 #ifdef CONFIG_XEN
 zeroentry xen_debug do_debug
 zeroentry xen_int3 do_int3
diff --git a/arch/x86/kernel/traps.c b/arch/x86/kernel/traps.c
index 523a3cc..9823443 100644
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@ -220,28 +220,12 @@ DO_ERROR(X86_TRAP_OLD_MF, SIGFPE, "coprocessor segment overrun",
   coprocessor_segment_overrun)
 DO_ERROR(X86_TRAP_TS, SIGSEGV, "invalid TSS", invalid_TSS)
 DO_ERROR(X86_TRAP_NP, SIGBUS, "segment not present", segment_not_present)
-#ifdef CONFIG_X86_32
 DO_ERROR(X86_TRAP_SS, SIGBUS, "stack segment", stack_segment)
-#endif
 DO_ERROR_INFO(X86_TRAP_AC, SIGBUS, "alignment check", alignment_check,
   BUS_ADRALN, 0)
 
 #ifdef CONFIG_X86_64
 /* Runs on IST stack */
-dotraplinkage void do_stack_segment(struct pt_regs *regs, long error_code)
-{
- enum ctx_state prev_state;
-
- prev_state = exception_enter();
- if (notify_die(DIE_TRAP, "stack segment", regs, error_code,
-         X86_TRAP_SS, SIGBUS) != NOTIFY_STOP) {
-  preempt_conditional_sti(regs);
-  do_trap(X86_TRAP_SS, SIGBUS, "stack segment", regs, error_code, NULL);
-  preempt_conditional_cli(regs);
- }
- exception_exit(prev_state);
-}
-
 dotraplinkage void do_double_fault(struct pt_regs *regs, long error_code)
 {
  static const char str[] = "double fault";
@@ -745,7 +729,7 @@ void __init trap_init(void)
  set_intr_gate(X86_TRAP_OLD_MF, coprocessor_segment_overrun);
  set_intr_gate(X86_TRAP_TS, invalid_TSS);
  set_intr_gate(X86_TRAP_NP, segment_not_present);
- set_intr_gate_ist(X86_TRAP_SS, &stack_segment, STACKFAULT_STACK);
+ set_intr_gate(X86_TRAP_SS, stack_segment);
  set_intr_gate(X86_TRAP_GP, general_protection);
  set_intr_gate(X86_TRAP_SPURIOUS, spurious_interrupt_bug);
  set_intr_gate(X86_TRAP_MF, coprocessor_error);
-- 
1.7.1