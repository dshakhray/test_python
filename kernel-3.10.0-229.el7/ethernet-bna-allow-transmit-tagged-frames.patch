From 82d16f2bfb4ac5cf37ade79a8fe4a23c8fd72860 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Wed, 19 Nov 2014 16:14:10 -0500
Subject: [ethernet] bna: allow transmit tagged frames

Message-id: <1416413651-12167-3-git-send-email-ivecera@redhat.com>
Patchwork-id: 100347
O-Subject: [RHEL7.1 PATCH 2/3] bna: allow transmit tagged frames
Bugzilla: 1165759
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

BZ: #1165759

Upstream commit(s):
commit 6654cf60ab888170693084a06dfb7c00977ad964
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Mon Oct 6 19:02:37 2014 +0200

    bna: allow transmit tagged frames

    When Tx VLAN offloading is disabled frames with size ~ MTU are not
    transmitted as the driver does not account 4 bytes of VLAN header added
    by stack. It should use VLAN_ETH_HLEN instead of ETH_HLEN.

    The second problem is with newer BNA chips (BNA 1860). These chips filter
    out any VLAN tagged frames in Tx path. This is a problem when Tx VLAN
    offloading is disabled and frames are tagged by stack. Older chips like
    1010/1020 are not affected as they probably don't do such filtering.

    Cc: Rasesh Mody <rasesh.mody@qlogic.com>
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/brocade/bna/bna_tx_rx.c b/drivers/net/ethernet/brocade/bna/bna_tx_rx.c
index 8ee3fdc..5fac411 100644
--- a/drivers/net/ethernet/brocade/bna/bna_tx_rx.c
+++ b/drivers/net/ethernet/brocade/bna/bna_tx_rx.c
@@ -3410,7 +3410,7 @@ bna_bfi_tx_enet_start(struct bna_tx *tx)
 
  cfg_req->tx_cfg.vlan_mode = BFI_ENET_TX_VLAN_WI;
  cfg_req->tx_cfg.vlan_id = htons((u16)tx->txf_vlan_id);
- cfg_req->tx_cfg.admit_tagged_frame = BNA_STATUS_T_DISABLED;
+ cfg_req->tx_cfg.admit_tagged_frame = BNA_STATUS_T_ENABLED;
  cfg_req->tx_cfg.apply_vlan_filter = BNA_STATUS_T_DISABLED;
 
  bfa_msgq_cmd_set(&tx->msgq_cmd, NULL, NULL,
diff --git a/drivers/net/ethernet/brocade/bna/bnad.c b/drivers/net/ethernet/brocade/bna/bnad.c
index 02054a7..d3307ea 100644
--- a/drivers/net/ethernet/brocade/bna/bnad.c
+++ b/drivers/net/ethernet/brocade/bna/bnad.c
@@ -2864,7 +2864,7 @@ bnad_txq_wi_prepare(struct bnad *bnad, struct bna_tcb *tcb,
   txqent->hdr.wi.opcode = htons(BNA_TXQ_WI_SEND);
   txqent->hdr.wi.lso_mss = 0;
 
-  if (unlikely(skb->len > (bnad->netdev->mtu + ETH_HLEN))) {
+  if (unlikely(skb->len > (bnad->netdev->mtu + VLAN_ETH_HLEN))) {
    BNAD_UPDATE_CTR(bnad, tx_skb_non_tso_too_long);
    return -EINVAL;
   }
-- 
1.7.1