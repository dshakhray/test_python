From edb951f01c717c38d2d4f3b75b8f48e912fef35e Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:39 -0400
Subject: [block] blk-mq: bump max tag depth to 10K tags

Message-id: <1402670238-13916-112-git-send-email-snitzer@redhat.com>
Patchwork-id: 83863
O-Subject: [RHEL7.1 PATCH 111/150] blk-mq: bump max tag depth to 10K tags
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit a4391c6465d9c978fd4bded12e34bdde3f5458f0
Author: Jens Axboe <axboe@fb.com>
Date:   Thu Jun 5 15:21:56 2014 -0600

    blk-mq: bump max tag depth to 10K tags

    For some scsi-mq cases, the tag map can be huge. So increase the
    max number of tags we support.

    Additionally, don't fail with EINVAL if a user requests too many
    tags. Warn that the tag depth has been adjusted down, and store
    the new value inside the tag_set passed in.

    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 4e4cd62..a6ee74e 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1967,13 +1967,19 @@ static int blk_mq_queue_reinit_notify(struct notifier_block *nb,
  return NOTIFY_OK;
 }
 
+/*
+ * Alloc a tag set to be associated with one or more request queues.
+ * May fail with EINVAL for various error conditions. May adjust the
+ * requested depth down, if if it too large. In that case, the set
+ * value will be stored in set->queue_depth.
+ */
 int blk_mq_alloc_tag_set(struct blk_mq_tag_set *set)
 {
  int i;
 
  if (!set->nr_hw_queues)
   return -EINVAL;
- if (!set->queue_depth || set->queue_depth > BLK_MQ_MAX_DEPTH)
+ if (!set->queue_depth)
   return -EINVAL;
  if (set->queue_depth < set->reserved_tags + BLK_MQ_TAG_MIN)
   return -EINVAL;
@@ -1981,6 +1987,11 @@ int blk_mq_alloc_tag_set(struct blk_mq_tag_set *set)
  if (!set->nr_hw_queues || !set->ops->queue_rq || !set->ops->map_queue)
   return -EINVAL;
 
+ if (set->queue_depth > BLK_MQ_MAX_DEPTH) {
+  pr_info("blk-mq: reduced tag depth to %u\n",
+   BLK_MQ_MAX_DEPTH);
+  set->queue_depth = BLK_MQ_MAX_DEPTH;
+ }
 
  set->tags = kmalloc_node(set->nr_hw_queues *
      sizeof(struct blk_mq_tags *),
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 6673065..5eea746 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -135,7 +135,7 @@ enum {
  BLK_MQ_S_STOPPED = 0,
  BLK_MQ_S_TAG_ACTIVE = 1,
 
- BLK_MQ_MAX_DEPTH = 2048,
+ BLK_MQ_MAX_DEPTH = 10240,
 
  BLK_MQ_CPU_WORK_BATCH = 8,
 };
-- 
1.7.1