From e89c114be668051769a145422a9baf5cee538ebe Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:02:15 -0400
Subject: [fs] btrfs: just do dirty page flush for the inode with compression before direct IO

Message-id: <1407179109-13714-249-git-send-email-sandeen@redhat.com>
Patchwork-id: 87349
O-Subject: [RHEL7.1 PATCH 248/422] Btrfs: just do dirty page flush for the inode with compression before direct IO
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Miao Xie <miaox@cn.fujitsu.com>

commit 41bd9ca459a007cc5588563bb08de9677c8d23fd
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Thu Mar 6 13:54:57 2014 +0800

    Btrfs: just do dirty page flush for the inode with compression before direct IO

    As the comment in the btrfs_direct_IO says, only the compressed pages need be
    flush again to make sure they are on the disk, but the common pages needn't,
    so we add a if statement to check if the inode has compressed pages or not,
    if no, skip the flush.

    And in order to prevent the write ranges from intersecting, we need wait for
    the running ordered extents. But the current code waits for them twice, one
    is done before the direct IO starts (in btrfs_wait_ordered_range()), the other
    is before we get the blocks, it is unnecessary. because we can do the direct
    IO without holding i_mutex, it means that the intersected ordered extents may
    happen during the direct IO, the first wait can not avoid this problem. So we
    use filemap_fdatawrite_range() instead of btrfs_wait_ordered_range() to remove
    the first wait.

    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index ac154fc..47af0ab 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -7438,15 +7438,15 @@ static ssize_t btrfs_direct_IO(int rw, struct kiocb *iocb,
  smp_mb__after_atomic_inc();
 
  /*
-  * The generic stuff only does filemap_write_and_wait_range, which isn't
-  * enough if we've written compressed pages to this area, so we need to
-  * call btrfs_wait_ordered_range to make absolutely sure that any
-  * outstanding dirty pages are on disk.
+  * The generic stuff only does filemap_write_and_wait_range, which
+  * isn't enough if we've written compressed pages to this area, so
+  * we need to flush the dirty pages again to make absolutely sure
+  * that any outstanding dirty pages are on disk.
   */
  count = iov_length(iov, nr_segs);
- ret = btrfs_wait_ordered_range(inode, offset, count);
- if (ret)
-  return ret;
+ if (test_bit(BTRFS_INODE_HAS_ASYNC_EXTENT,
+       &BTRFS_I(inode)->runtime_flags))
+  filemap_fdatawrite_range(inode->i_mapping, offset, count);
 
  if (rw & WRITE) {
   /*
-- 
1.7.1