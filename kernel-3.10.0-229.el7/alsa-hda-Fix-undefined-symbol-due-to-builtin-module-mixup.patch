From 3d017505e62e95afe532e3e40bc126a0c17ce01f Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:17:58 -0400
Subject: [alsa] hda: Fix undefined symbol due to builtin/module mixup

Message-id: <140972823573-95-patchset-jkysela@redhat.com>
Patchwork-id: 90795
O-Subject: [RHEL 7.1 PATCH 094/442] ALSA: hda - Fix undefined symbol due to builtin/module mixup
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

Even after the fix for leftover kconfig handling (commit f8f1becf),
the current code still doesn't handle properly the builtin/module
mixup case between the core snd-hda-codec and other codec drivers.
For example, when CONFIG_SND_HDA_INTEL=y and
CONFIG_SND_HDA_CODEC_HDMI=m, it'll end up with an unresolved symbol
snd_hda_parse_hdmi_codec.  This patch fixes the issue.

Now codec->parser points to the parser object *only* when a module
(either generic or HDMI parser) is loaded and bound.  When a builtin
symbol is used, codec->parser still points to NULL.  This is the
difference from the previous versions.

Fixes: f8f1becfa4ac ('ALSA: hda - Fix leftover ifdef checks after modularization')
Reported-by: Fengguang Wu <fengguang.wu@intel.com>
Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: ef8e39b51f24c8ac907e1f1995910ee3083375e0)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/pci/hda/hda_codec.c b/sound/pci/hda/hda_codec.c
index 69acbf7..dafcf82 100644
--- a/sound/pci/hda/hda_codec.c
+++ b/sound/pci/hda/hda_codec.c
@@ -1339,23 +1339,15 @@ get_hda_cvt_setup(struct hda_codec *codec, hda_nid_t nid)
 /*
  * Dynamic symbol binding for the codec parsers
  */
-#ifdef MODULE
-#define load_parser_sym(sym)  ((int (*)(struct hda_codec *))symbol_request(sym))
-#define unload_parser_addr(addr) symbol_put_addr(addr)
-#else
-#define load_parser_sym(sym)  (sym)
-#define unload_parser_addr(addr) do {} while (0)
-#endif
 
 #define load_parser(codec, sym) \
- ((codec)->parser = load_parser_sym(sym))
+ ((codec)->parser = (int (*)(struct hda_codec *))symbol_request(sym))
 
 static void unload_parser(struct hda_codec *codec)
 {
- if (codec->parser) {
-  unload_parser_addr(codec->parser);
-  codec->parser = NULL;
- }
+ if (codec->parser)
+  symbol_put_addr(codec->parser);
+ codec->parser = NULL;
 }
 
 /*
@@ -1620,12 +1612,20 @@ int snd_hda_codec_configure(struct hda_codec *codec)
   patch = codec->preset->patch;
  if (!patch) {
   unload_parser(codec); /* to be sure */
-  if (is_likely_hdmi_codec(codec))
+  if (is_likely_hdmi_codec(codec)) {
+#if IS_MODULE(CONFIG_SND_HDA_CODEC_HDMI)
    patch = load_parser(codec, snd_hda_parse_hdmi_codec);
-#if IS_ENABLED(CONFIG_SND_HDA_GENERIC)
-  if (!patch)
+#elif IS_BUILTIN(CONFIG_SND_HDA_CODEC_HDMI)
+   patch = snd_hda_parse_hdmi_codec;
+#endif
+  }
+  if (!patch) {
+#if IS_MODULE(CONFIG_SND_HDA_GENERIC)
    patch = load_parser(codec, snd_hda_parse_generic_codec);
+#elif IS_BUILTIN(CONFIG_SND_HDA_GENERIC)
+   patch = snd_hda_parse_generic_codec;
 #endif
+  }
   if (!patch) {
    printk(KERN_ERR "hda-codec: No codec parser is available\n");
    return -ENODEV;
-- 
1.7.1