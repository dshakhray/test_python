From 63ac5f8811abe694c642b5c939afb0fd62f71247 Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:26:20 -0400
Subject: [alsa] hda: Add pcm_mmap_prepare op

Message-id: <140972823573-210-patchset-jkysela@redhat.com>
Patchwork-id: 90910
O-Subject: [RHEL 7.1 PATCH 209/442] ALSA: hda - Add pcm_mmap_prepare op.
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

Adding this op allows the X86 specific mmap operation to help in
hda_intel without needing a CONFIG_X86 in future non-PCI hda drivers.

Signed-off-by: Dylan Reid <dgreid@chromium.org>
Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: 8769b278610c71a32ae9662219b2f450d48a828c)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/pci/hda/hda_intel.c b/sound/pci/hda/hda_intel.c
index 74f3e1e..4198a0d 100644
--- a/sound/pci/hda/hda_intel.c
+++ b/sound/pci/hda/hda_intel.c
@@ -2190,19 +2190,15 @@ static void azx_clear_irq_pending(struct azx *chip)
  spin_unlock_irq(&chip->reg_lock);
 }
 
-#ifdef CONFIG_X86
 static int azx_pcm_mmap(struct snd_pcm_substream *substream,
    struct vm_area_struct *area)
 {
  struct azx_pcm *apcm = snd_pcm_substream_chip(substream);
  struct azx *chip = apcm->chip;
- if (!azx_snoop(chip))
-  area->vm_page_prot = pgprot_writecombine(area->vm_page_prot);
+ if (chip->ops->pcm_mmap_prepare)
+  chip->ops->pcm_mmap_prepare(substream, area);
  return snd_pcm_lib_default_mmap(substream, area);
 }
-#else
-#define azx_pcm_mmap NULL
-#endif
 
 static struct snd_pcm_ops azx_pcm_ops = {
  .open = azx_pcm_open,
@@ -3508,6 +3504,17 @@ static int substream_free_pages(struct azx *chip,
  return snd_pcm_lib_free_pages(substream);
 }
 
+static void pcm_mmap_prepare(struct snd_pcm_substream *substream,
+        struct vm_area_struct *area)
+{
+#ifdef CONFIG_X86
+ struct azx_pcm *apcm = snd_pcm_substream_chip(substream);
+ struct azx *chip = apcm->chip;
+ if (!azx_snoop(chip))
+  area->vm_page_prot = pgprot_writecombine(area->vm_page_prot);
+#endif
+}
+
 static const struct hda_controller_ops pci_hda_ops = {
  .writel = pci_azx_writel,
  .readl = pci_azx_readl,
@@ -3520,6 +3527,7 @@ static const struct hda_controller_ops pci_hda_ops = {
  .dma_free_pages = dma_free_pages,
  .substream_alloc_pages = substream_alloc_pages,
  .substream_free_pages = substream_free_pages,
+ .pcm_mmap_prepare = pcm_mmap_prepare,
 };
 
 static int azx_probe(struct pci_dev *pci,
diff --git a/sound/pci/hda/hda_priv.h b/sound/pci/hda/hda_priv.h
index 10bcec1..edbe2eb 100644
--- a/sound/pci/hda/hda_priv.h
+++ b/sound/pci/hda/hda_priv.h
@@ -309,6 +309,8 @@ struct hda_controller_ops {
          size_t size);
  int (*substream_free_pages)(struct azx *chip,
         struct snd_pcm_substream *substream);
+ void (*pcm_mmap_prepare)(struct snd_pcm_substream *substream,
+     struct vm_area_struct *area);
 };
 
 struct azx_pcm {
-- 
1.7.1