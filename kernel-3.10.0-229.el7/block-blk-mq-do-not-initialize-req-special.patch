From 3b692d977294a8c6f6974258d419c9ba18c1c780 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:15 -0400
Subject: [block] blk-mq: do not initialize req->special

Message-id: <1402670238-13916-28-git-send-email-snitzer@redhat.com>
Patchwork-id: 83788
O-Subject: [RHEL7.1 PATCH 027/150] blk-mq: do not initialize req->special
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 9d74e25737d73e93ccddeb5a61bcd56b7b8eb57b
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Apr 14 10:30:07 2014 +0200

    blk-mq: do not initialize req->special

    Drivers can reach their private data easily using the blk_mq_rq_to_pdu
    helper and don't need req->special.  By not initializing it code can
    be simplified nicely, and we also shave off a few more instructions from
    the I/O path.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-flush.c b/block/blk-flush.c
index 8e80986..e4b9d54 100644
--- a/block/blk-flush.c
+++ b/block/blk-flush.c
@@ -306,22 +306,16 @@ static bool blk_kick_flush(struct request_queue *q)
   */
  q->flush_pending_idx ^= 1;
 
+ blk_rq_init(q, q->flush_rq);
  if (q->mq_ops) {
-  struct blk_mq_ctx *ctx = first_rq->mq_ctx;
-  struct blk_mq_hw_ctx *hctx = q->mq_ops->map_queue(q, ctx->cpu);
-
-  blk_mq_rq_init(hctx, q->flush_rq);
-  q->flush_rq->mq_ctx = ctx;
-
   /*
    * Reuse the tag value from the fist waiting request,
    * with blk-mq the tag is generated during request
    * allocation and drivers can rely on it being inside
    * the range they asked for.
    */
+  q->flush_rq->mq_ctx = first_rq->mq_ctx;
   q->flush_rq->tag = first_rq->tag;
- } else {
-  blk_rq_init(q, q->flush_rq);
  }
 
  q->flush_rq->cmd_type = REQ_TYPE_FS;
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 658428a..d9d0984 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -251,24 +251,13 @@ struct request *blk_mq_alloc_reserved_request(struct request_queue *q, int rw,
 }
 EXPORT_SYMBOL(blk_mq_alloc_reserved_request);
 
-/*
- * Re-init and set pdu, if we have it
- */
-void blk_mq_rq_init(struct blk_mq_hw_ctx *hctx, struct request *rq)
-{
- blk_rq_init(hctx->queue, rq);
-
- if (hctx->cmd_size)
-  rq->special = blk_mq_rq_to_pdu(rq);
-}
-
 static void __blk_mq_free_request(struct blk_mq_hw_ctx *hctx,
       struct blk_mq_ctx *ctx, struct request *rq)
 {
  const int tag = rq->tag;
  struct request_queue *q = rq->q;
 
- blk_mq_rq_init(hctx, rq);
+ blk_rq_init(hctx->queue, rq);
  blk_mq_put_tag(hctx->tags, tag);
 
  blk_mq_queue_exit(q);
@@ -1165,7 +1154,7 @@ static int blk_mq_init_rq_map(struct blk_mq_hw_ctx *hctx,
   left -= to_do * rq_size;
   for (j = 0; j < to_do; j++) {
    hctx->rqs[i] = p;
-   blk_mq_rq_init(hctx, hctx->rqs[i]);
+   blk_rq_init(hctx->queue, hctx->rqs[i]);
    p += rq_size;
    i++;
   }
diff --git a/block/blk-mq.h b/block/blk-mq.h
index ebbe6ba..238379a 100644
--- a/block/blk-mq.h
+++ b/block/blk-mq.h
@@ -27,7 +27,6 @@ void blk_mq_run_hw_queue(struct blk_mq_hw_ctx *hctx, bool async);
 void blk_mq_init_flush(struct request_queue *q);
 void blk_mq_drain_queue(struct request_queue *q);
 void blk_mq_free_queue(struct request_queue *q);
-void blk_mq_rq_init(struct blk_mq_hw_ctx *hctx, struct request *rq);
 
 /*
  * CPU hotplug helpers
diff --git a/drivers/block/null_blk.c b/drivers/block/null_blk.c
index d64c266..c1b8c5c 100644
--- a/drivers/block/null_blk.c
+++ b/drivers/block/null_blk.c
@@ -226,7 +226,7 @@ static void null_cmd_end_timer(struct nullb_cmd *cmd)
 
 static void null_softirq_done_fn(struct request *rq)
 {
- end_cmd(rq->special);
+ end_cmd(blk_mq_rq_to_pdu(rq));
 }
 
 static inline void null_handle_cmd(struct nullb_cmd *cmd)
@@ -311,7 +311,7 @@ static void null_request_fn(struct request_queue *q)
 
 static int null_queue_rq(struct blk_mq_hw_ctx *hctx, struct request *rq)
 {
- struct nullb_cmd *cmd = rq->special;
+ struct nullb_cmd *cmd = blk_mq_rq_to_pdu(rq);
 
  cmd->rq = rq;
  cmd->nq = hctx->driver_data;
-- 
1.7.1