From 794c4e143397b971258f69f0f84f4146387f9dda Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:59 -0400
Subject: [fs] ext4: Do not reserve clusters when fs doesn't support extents

Message-id: <1414058125-4183-86-git-send-email-lczerner@redhat.com>
Patchwork-id: 98266
O-Subject: [RHEL 7.1 PATCH v2 085/171] ext4: Do not reserve clusters when fs doesn't support extents
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 30fac0f75da24dd5bb43c9e911d2039a984ac815

 When the filesystem doesn't support extents (like in ext2/3
 compatibility modes), there is no need to reserve any clusters. Space
 estimates for writing are exact, hole punching doesn't need new
 metadata, and there are no unwritten extents to convert.

 This fixes a problem when filesystem still having some free space when
 accessed with a native ext2/3 driver suddently reports ENOSPC when
 accessed with ext4 driver.

 Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
 Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
 Reviewed-by: Lukas Czerner <lczerner@redhat.com>
 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Cc: stable@vger.kernel.org
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index b8a5088..8bfe34d 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -3320,11 +3320,19 @@ int ext4_calculate_overhead(struct super_block *sb)
 }
 
 
-static ext4_fsblk_t ext4_calculate_resv_clusters(struct ext4_sb_info *sbi)
+static ext4_fsblk_t ext4_calculate_resv_clusters(struct super_block *sb)
 {
  ext4_fsblk_t resv_clusters;
 
  /*
+  * There's no need to reserve anything when we aren't using extents.
+  * The space estimates are exact, there are no unwritten extents,
+  * hole punching doesn't need new metadata... This is needed especially
+  * to keep ext2/3 backward compatibility.
+  */
+ if (!EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
+  return 0;
+ /*
   * By default we reserve 2% or 4096 clusters, whichever is smaller.
   * This should cover the situations where we can not afford to run
   * out of space like for example punch hole, or converting
@@ -3332,7 +3340,8 @@ static ext4_fsblk_t ext4_calculate_resv_clusters(struct ext4_sb_info *sbi)
   * allocation would require 1, or 2 blocks, higher numbers are
   * very rare.
   */
- resv_clusters = ext4_blocks_count(sbi->s_es) >> sbi->s_cluster_bits;
+ resv_clusters = ext4_blocks_count(EXT4_SB(sb)->s_es) >>
+   EXT4_SB(sb)->s_cluster_bits;
 
  do_div(resv_clusters, 50);
  resv_clusters = min_t(ext4_fsblk_t, resv_clusters, 4096);
@@ -4083,10 +4092,10 @@ no_journal:
     "available");
  }
 
- err = ext4_reserve_clusters(sbi, ext4_calculate_resv_clusters(sbi));
+ err = ext4_reserve_clusters(sbi, ext4_calculate_resv_clusters(sb));
  if (err) {
   ext4_msg(sb, KERN_ERR, "failed to reserve %llu clusters for "
-    "reserved pool", ext4_calculate_resv_clusters(sbi));
+    "reserved pool", ext4_calculate_resv_clusters(sb));
   goto failed_mount4a;
  }
 
-- 
1.7.1