From 3eefa9027d8f672f9b9c790a9df19905f691c22d Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:43 -0400
Subject: [fs] nfs: change nfs_page_group_lock argument

Message-id: <1411050057-12417-81-git-send-email-steved@redhat.com>
Patchwork-id: 96245
O-Subject: [RHEL7.1 PATCH 80/94] nfs: change nfs_page_group_lock argument
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Weston Andros Adamson <dros@primarydata.com>

Flip the meaning of the second argument from 'wait' to 'nonblock' to
match related functions. Update all five calls to reflect this change.

Signed-off-by: Weston Andros Adamson <dros@primarydata.com>
Reviewed-by: Peng Tao <tao.peng@primarydata.com>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: fd2f3a06d30c85a17cf035ebc60c88c2a13a8ece
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/pagelist.c b/fs/nfs/pagelist.c
index 9d7b6fe..efc9c91 100644
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@ -145,13 +145,14 @@ static int nfs_wait_bit_uninterruptible(void *word)
 /*
  * nfs_page_group_lock - lock the head of the page group
  * @req - request in group that is to be locked
+ * @nonblock - if true don't block waiting for lock
  *
  * this lock must be held if modifying the page group list
  *
  * returns result from wait_on_bit_lock: 0 on success, < 0 on error
  */
 int
-nfs_page_group_lock(struct nfs_page *req, bool wait)
+nfs_page_group_lock(struct nfs_page *req, bool nonblock)
 {
  struct nfs_page *head = req->wb_head;
  int ret;
@@ -162,7 +163,7 @@ nfs_page_group_lock(struct nfs_page *req, bool wait)
   ret = wait_on_bit_lock(&head->wb_flags, PG_HEADLOCK,
    nfs_wait_bit_uninterruptible,
    TASK_UNINTERRUPTIBLE);
- } while (wait && ret != 0);
+ } while (!nonblock && ret != 0);
 
  WARN_ON_ONCE(ret > 0);
  return ret;
@@ -226,7 +227,7 @@ bool nfs_page_group_sync_on_bit(struct nfs_page *req, unsigned int bit)
 {
  bool ret;
 
- nfs_page_group_lock(req, true);
+ nfs_page_group_lock(req, false);
  ret = nfs_page_group_sync_on_bit_locked(req, bit);
  nfs_page_group_unlock(req);
 
@@ -858,7 +859,7 @@ static int __nfs_pageio_add_request(struct nfs_pageio_descriptor *desc,
  unsigned int offset, pgbase;
  int ret;
 
- ret = nfs_page_group_lock(req, false);
+ ret = nfs_page_group_lock(req, true);
  if (ret < 0) {
   desc->pg_error = ret;
   return 0;
@@ -885,7 +886,7 @@ static int __nfs_pageio_add_request(struct nfs_pageio_descriptor *desc,
    if (desc->pg_recoalesce)
     return 0;
    /* retry add_request for this subreq */
-   ret = nfs_page_group_lock(req, false);
+   ret = nfs_page_group_lock(req, true);
    if (ret < 0) {
     desc->pg_error = ret;
     return 0;
diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index a3aae19..0112e66 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -241,7 +241,7 @@ static bool nfs_page_group_covers_page(struct nfs_page *req)
  unsigned int pos = 0;
  unsigned int len = nfs_page_length(req->wb_page);
 
- nfs_page_group_lock(req, true);
+ nfs_page_group_lock(req, false);
 
  do {
   tmp = nfs_page_group_search_locked(req->wb_head, pos);
@@ -479,7 +479,7 @@ try_again:
  }
 
  /* lock each request in the page group */
- ret = nfs_page_group_lock(head, false);
+ ret = nfs_page_group_lock(head, true);
  if (ret < 0)
   return ERR_PTR(ret);
  subreq = head;
-- 
1.7.1