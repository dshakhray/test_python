From 1151522a9c539ca71ed8436f6bb1e644c687de3e Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 24 Oct 2014 20:28:09 -0400
Subject: [net] udp: Add function to make source port for UDP tunnels

Message-id: <97699bd0d9623cbd814a07303cc6d7f76a3a06f6.1414182116.git.jbenc@redhat.com>
Patchwork-id: 98453
O-Subject: [RHEL7.1 net PATCH 01/11] udp: Add function to make source port for UDP tunnels
Bugzilla: 1110384
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110384
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8159383

RHEL changes: we don't have netns aware inet_get_local_port_range.
Preserve udp_flow_src_port prototype but mark the "net" attribute unused.

commit b8f1a55639e6a76cfd274cc7de76eafac9a15ca9
Author: Tom Herbert <therbert@google.com>
Date:   Tue Jul 1 21:32:39 2014 -0700

    udp: Add function to make source port for UDP tunnels

    This patch adds udp_flow_src_port function which is intended to be
    a common function that UDP tunnel implementations call to set the source
    port. The source port is chosen so that a hash over the outer headers
    (IP addresses and UDP ports) acts as suitable hash for the flow of the
    encapsulated packet. In this manner, UDP encapsulation works with RSS
    and ECMP based wrt the inner flow.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/udp.h b/include/net/udp.h
index ae56877..bba909b 100644
--- a/include/net/udp.h
+++ b/include/net/udp.h
@@ -194,6 +194,35 @@ extern int udp_lib_get_port(struct sock *sk, unsigned short snum,
        int (*)(const struct sock *,const struct sock *),
        unsigned int hash2_nulladdr);
 
+static inline __be16 udp_flow_src_port(struct net __attribute__((unused)) *net, struct sk_buff *skb,
+           int min, int max, bool use_eth)
+{
+ u32 hash;
+
+ if (min >= max) {
+  /* Use default range */
+  inet_get_local_port_range(&min, &max);
+ }
+
+ hash = skb_get_hash(skb);
+ if (unlikely(!hash) && use_eth) {
+  /* Can't find a normal hash, caller has indicated an Ethernet
+   * packet so use that to compute a hash.
+   */
+  hash = jhash(skb->data, 2 * ETH_ALEN,
+        (__force u32) skb->protocol);
+ }
+
+ /* Since this is being sent on the wire obfuscate hash a bit
+  * to minimize possbility that any useful information to an
+  * attacker is leaked. Only upper 16 bits are relevant in the
+  * computation for 16 bit port value.
+  */
+ hash ^= hash << 16;
+
+ return htons((((u64) hash * (max - min)) >> 32) + min);
+}
+
 /* net/ipv4/udp.c */
 extern int udp_get_port(struct sock *sk, unsigned short snum,
    int (*saddr_cmp)(const struct sock *,
-- 
1.7.1