From 13449a8bdb26dfc1dce971016e227ac1a8293c8e Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:05:37 -0400
Subject: [virt] kvm/ppc: book3s pr - Invalidate SLB entries properly

Message-id: <1410545655-205645-109-git-send-email-dzickus@redhat.com>
Patchwork-id: 94222
O-Subject: [RHEL7 PATCH 108/626] KVM: PPC: Book3S PR: Invalidate SLB entries properly
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 681562cd56f5336cbdf6dab0c4b2f6ef16ea89ed
Author: Paul Mackerras <paulus@samba.org>
Date:   Sat Jun 22 17:15:24 2013 +1000

    KVM: PPC: Book3S PR: Invalidate SLB entries properly

    At present, if the guest creates a valid SLB (segment lookaside buffer)
    entry with the slbmte instruction, then invalidates it with the slbie
    instruction, then reads the entry with the slbmfee/slbmfev instructions,
    the result of the slbmfee will have the valid bit set, even though the
    entry is not actually considered valid by the host.  This is confusing,
    if not worse.  This fixes it by zeroing out the orige and origv fields
    of the SLB entry structure when the entry is invalidated.

    Signed-off-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Alexander Graf <agraf@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_64_mmu.c b/arch/powerpc/kvm/book3s_64_mmu.c
index ee435ba..739bfba 100644
--- a/arch/powerpc/kvm/book3s_64_mmu.c
+++ b/arch/powerpc/kvm/book3s_64_mmu.c
@@ -397,6 +397,8 @@ static void kvmppc_mmu_book3s_64_slbie(struct kvm_vcpu *vcpu, u64 ea)
  dprintk("KVM MMU: slbie(0x%llx, 0x%llx)\n", ea, slbe->esid);
 
  slbe->valid = false;
+ slbe->orige = 0;
+ slbe->origv = 0;
 
  seg_size = 1ull << kvmppc_slb_sid_shift(slbe);
  kvmppc_mmu_flush_segment(vcpu, ea & ~(seg_size - 1), seg_size);
@@ -408,8 +410,11 @@ static void kvmppc_mmu_book3s_64_slbia(struct kvm_vcpu *vcpu)
 
  dprintk("KVM MMU: slbia()\n");
 
- for (i = 1; i < vcpu->arch.slb_nr; i++)
+ for (i = 1; i < vcpu->arch.slb_nr; i++) {
   vcpu->arch.slb[i].valid = false;
+  vcpu->arch.slb[i].orige = 0;
+  vcpu->arch.slb[i].origv = 0;
+ }
 
  if (vcpu->arch.shared->msr & MSR_IR) {
   kvmppc_mmu_flush_segments(vcpu);
-- 
1.7.1