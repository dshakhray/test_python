From bb6f0c29bb7439a011a125cc68f5bf6b14fab256 Mon Sep 17 00:00:00 2001
From: David Gibson <dgibson@redhat.com>
Date: Mon, 15 Sep 2014 07:13:24 -0400
Subject: [virt] kvm/ppc: book3s_64/pr - Access HTAB in big endian

Message-id: <1410765214-16377-69-git-send-email-dgibson@redhat.com>
Patchwork-id: 94769
O-Subject: [PATCH 68/78] KVM: PPC: Book3S_64 PR: Access HTAB in big endian
Bugzilla: 1123145 1123133 1123367
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Signed-off-by: David Gibson <dgibson@redhat.com>

commit 4e509af9f83debe296661d2e09a8a214850efe3c
Author: Alexander Graf <agraf@suse.de>
Date:   Thu Apr 24 12:54:54 2014 +0200

    KVM: PPC: Book3S_64 PR: Access HTAB in big endian

    The HTAB is always big endian. We access the guest's HTAB using
    copy_from/to_user, but don't yet take care of the fact that we might
    be running on an LE host.

    Wrap all accesses to the guest HTAB with big endian accessors.

    Signed-off-by: Alexander Graf <agraf@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_64_mmu.c b/arch/powerpc/kvm/book3s_64_mmu.c
index 385702e..774a253 100644
--- a/arch/powerpc/kvm/book3s_64_mmu.c
+++ b/arch/powerpc/kvm/book3s_64_mmu.c
@@ -275,12 +275,15 @@ do_second:
   key = 4;
 
  for (i=0; i<16; i+=2) {
+  u64 pte0 = be64_to_cpu(pteg[i]);
+  u64 pte1 = be64_to_cpu(pteg[i + 1]);
+
   /* Check all relevant fields of 1st dword */
-  if ((pteg[i] & v_mask) == v_val) {
+  if ((pte0 & v_mask) == v_val) {
    /* If large page bit is set, check pgsize encoding */
    if (slbe->large &&
        (vcpu->arch.hflags & BOOK3S_HFLAG_MULTI_PGSIZE)) {
-    pgsize = decode_pagesize(slbe, pteg[i+1]);
+    pgsize = decode_pagesize(slbe, pte1);
     if (pgsize < 0)
      continue;
    }
@@ -297,8 +300,8 @@ do_second:
   goto do_second;
  }
 
- v = pteg[i];
- r = pteg[i+1];
+ v = be64_to_cpu(pteg[i]);
+ r = be64_to_cpu(pteg[i+1]);
  pp = (r & HPTE_R_PP) | key;
  if (r & HPTE_R_PP0)
   pp |= 8;
-- 
1.7.1