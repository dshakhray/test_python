From 97421b947c74399a33a209419232b06c5e8a3688 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:50:56 -0400
Subject: [tools] perf/sort: Compare addresses if no symbol info

Message-id: <1408953210-26343-169-git-send-email-jolsa@redhat.com>
Patchwork-id: 89008
O-Subject: [PATCH RHEL7.1 BZ1133083 168/322] perf sort: Compare addresses if no symbol info
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 2037be53b2bceac3c2e648b8ff3fd62e21af2d35
Author: Namhyung Kim <namhyung.kim@lge.com>
Date: Wed Dec 18 14:21:09 2013 +0900

description
===========
If a hist entry doesn't have symbol information, compare it with its
address.  Currently it only compares its level or whether it's NULL.

This can lead to an undesired result like an overhead exceeds 100%
especially when callchain accumulation is enabled by later patch.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index 8b0bb1f..68a4fd2 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -161,6 +161,11 @@ struct sort_entry sort_dso = {
 
 /* --sort symbol */
 
+static int64_t _sort__addr_cmp(u64 left_ip, u64 right_ip)
+{
+ return (int64_t)(right_ip - left_ip);
+}
+
 static int64_t _sort__sym_cmp(struct symbol *sym_l, struct symbol *sym_r)
 {
  u64 ip_l, ip_r;
@@ -183,7 +188,7 @@ sort__sym_cmp(struct hist_entry *left, struct hist_entry *right)
  int64_t ret;
 
  if (!left->ms.sym && !right->ms.sym)
-  return right->level - left->level;
+  return _sort__addr_cmp(left->ip, right->ip);
 
  /*
   * comparing symbol address alone is not enough since it's a
@@ -372,7 +377,7 @@ sort__sym_from_cmp(struct hist_entry *left, struct hist_entry *right)
  struct addr_map_symbol *from_r = &right->branch_info->from;
 
  if (!from_l->sym && !from_r->sym)
-  return right->level - left->level;
+  return _sort__addr_cmp(from_l->addr, from_r->addr);
 
  return _sort__sym_cmp(from_l->sym, from_r->sym);
 }
@@ -384,7 +389,7 @@ sort__sym_to_cmp(struct hist_entry *left, struct hist_entry *right)
  struct addr_map_symbol *to_r = &right->branch_info->to;
 
  if (!to_l->sym && !to_r->sym)
-  return right->level - left->level;
+  return _sort__addr_cmp(to_l->addr, to_r->addr);
 
  return _sort__sym_cmp(to_l->sym, to_r->sym);
 }
-- 
1.7.1