From 3268dc69173392b97c7e840d80689f93d883932f Mon Sep 17 00:00:00 2001
From: Oleg Nesterov <oleg@redhat.com>
Date: Mon, 16 Jun 2014 16:02:24 -0400
Subject: [kernel] uprobes: Simplify riprel_{pre,post}_xol() and make them similar

Message-id: <20140616160224.GA15533@redhat.com>
Patchwork-id: 84092
O-Subject: [PATCH RHEL7 BZ 1073627 33/36] uprobes/x86: Simplify riprel_{pre,post}_xol() and make them similar
Bugzilla: 1073627
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

RHBZ: 1073627

Ignoring the "correction" logic riprel_pre_xol() and riprel_post_xol()
are very similar but look quite differently.

1. Add the "UPROBE_FIX_RIP_AX | UPROBE_FIX_RIP_CX" check at the start
   of riprel_pre_xol(), like the same check in riprel_post_xol().

2. Add the trivial scratch_reg() helper which returns the address of
   scratch register pre_xol/post_xol need to change.

3. Change these functions to use the new helper and avoid copy-and-paste
   under if/else branches.

Signed-off-by: Oleg Nesterov <oleg@redhat.com>
Acked-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
(cherry picked from commit c90a6950120a7e45f31a22653fe6543507ae64d0)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/uprobes.c b/arch/x86/kernel/uprobes.c
index 5df1bca..2ebadb2 100644
--- a/arch/x86/kernel/uprobes.c
+++ b/arch/x86/kernel/uprobes.c
@@ -326,22 +326,24 @@ static void riprel_analyze(struct arch_uprobe *auprobe, struct insn *insn)
  }
 }
 
+static inline unsigned long *
+scratch_reg(struct arch_uprobe *auprobe, struct pt_regs *regs)
+{
+ return (auprobe->def.fixups & UPROBE_FIX_RIP_AX) ? &regs->ax : &regs->cx;
+}
+
 /*
  * If we're emulating a rip-relative instruction, save the contents
  * of the scratch register and store the target address in that register.
  */
 static void riprel_pre_xol(struct arch_uprobe *auprobe, struct pt_regs *regs)
 {
- struct uprobe_task *utask = current->utask;
+ if (auprobe->def.fixups & (UPROBE_FIX_RIP_AX | UPROBE_FIX_RIP_CX)) {
+  struct uprobe_task *utask = current->utask;
+  unsigned long *sr = scratch_reg(auprobe, regs);
 
- if (auprobe->def.fixups & UPROBE_FIX_RIP_AX) {
-  utask->autask.saved_scratch_register = regs->ax;
-  regs->ax = utask->vaddr;
-  regs->ax += auprobe->def.riprel_target;
- } else if (auprobe->def.fixups & UPROBE_FIX_RIP_CX) {
-  utask->autask.saved_scratch_register = regs->cx;
-  regs->cx = utask->vaddr;
-  regs->cx += auprobe->def.riprel_target;
+  utask->autask.saved_scratch_register = *sr;
+  *sr = utask->vaddr + auprobe->def.riprel_target;
  }
 }
 
@@ -349,14 +351,10 @@ static void riprel_post_xol(struct arch_uprobe *auprobe, struct pt_regs *regs,
     long *correction)
 {
  if (auprobe->def.fixups & (UPROBE_FIX_RIP_AX | UPROBE_FIX_RIP_CX)) {
-  struct arch_uprobe_task *autask;
-
-  autask = &current->utask->autask;
-  if (auprobe->def.fixups & UPROBE_FIX_RIP_AX)
-   regs->ax = autask->saved_scratch_register;
-  else
-   regs->cx = autask->saved_scratch_register;
+  struct uprobe_task *utask = current->utask;
+  unsigned long *sr = scratch_reg(auprobe, regs);
 
+  *sr = utask->autask.saved_scratch_register;
   /*
    * The original instruction includes a displacement, and so
    * is 4 bytes longer than what we've just single-stepped.
-- 
1.7.1