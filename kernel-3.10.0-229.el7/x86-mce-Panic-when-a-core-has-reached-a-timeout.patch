From a805ed3e1f9bb1ca6a012fcf7dec1fc8e8947c3f Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Mon, 14 Jul 2014 13:41:42 -0400
Subject: [x86] mce: Panic when a core has reached a timeout

Message-id: <1405345303-24468-13-git-send-email-prarit@redhat.com>
Patchwork-id: 85789
O-Subject: [RHEL7.1 PATCH BZ 1119306 12/13] mce: Panic when a core has reached a timeout
Bugzilla: 1119306
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1119306

commit 716079f66eacd31d040db9cd0627ca0d625d6126
Author: Borislav Petkov <bp@suse.de>
Date:   Fri May 23 11:06:35 2014 +0200

    mce: Panic when a core has reached a timeout

    There is very little and maybe practically nothing we can do to recover
    from a system where at least one core has reached a timeout during the
    whole monarch cores gathering. So panic when that happens.

    Link: http://lkml.kernel.org/r/20140523091041.GA21332@pd.tnic
    Signed-off-by: Borislav Petkov <bp@suse.de>

Cc: Tony Camuso <tcamuso@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/cpu/mcheck/mce.c b/arch/x86/kernel/cpu/mcheck/mce.c
index 0078761..6cc8003 100644
--- a/arch/x86/kernel/cpu/mcheck/mce.c
+++ b/arch/x86/kernel/cpu/mcheck/mce.c
@@ -704,8 +704,7 @@ static int mce_timed_out(u64 *t)
  if (!mca_cfg.monarch_timeout)
   goto out;
  if ((s64)*t < SPINUNIT) {
-  /* CHECKME: Make panic default for 1 too? */
-  if (mca_cfg.tolerant < 1)
+  if (mca_cfg.tolerant <= 1)
    mce_panic("Timeout synchronizing machine check over CPUs",
       NULL, NULL);
   cpu_missing = 1;
-- 
1.7.1