From 996f29e6554910a51555f2f651245b808fcb92b6 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:41 -0400
Subject: [kernel] perf: Do not allow optimized switch for non-cloned events

Message-id: <1410181752-25631-37-git-send-email-jolsa@redhat.com>
Patchwork-id: 91712
O-Subject: [PATCH RHEL7.1 BZ1134356 036/307] perf: Do not allow optimized switch for non-cloned events
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 1f9a7268c67f0290837aada443d28fd953ddca90
Author: Jiri Olsa <jolsa@redhat.com>
Date: Tue Jun 24 10:20:25 2014 +0200

description
===========
The context check in perf_event_context_sched_out allows
non-cloned context to be part of the optimized schedule
out switch.

This could move non-cloned context into another workload
child. Once this child exits, the context is closed and
leaves all original (parent) events in closed state.

Any other new cloned event will have closed state and not
measure anything. And probably causing other odd bugs.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index 54fef4d..9416ee0 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -2331,7 +2331,7 @@ static void perf_event_context_sched_out(struct task_struct *task, int ctxn,
  next_parent = rcu_dereference(next_ctx->parent_ctx);
 
  /* If neither context have a parent context; they cannot be clones. */
- if (!parent && !next_parent)
+ if (!parent || !next_parent)
   goto unlock;
 
  if (next_parent == ctx || next_ctx == parent || next_parent == parent) {
-- 
1.7.1