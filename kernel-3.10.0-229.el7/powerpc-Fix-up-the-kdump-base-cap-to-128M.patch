From 8022711ede983dc02c7b7fc0a9ed45252a744db0 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:07:40 -0400
Subject: [powerpc] Fix up the kdump base cap to 128M

Message-id: <1410545655-205645-232-git-send-email-dzickus@redhat.com>
Patchwork-id: 94280
O-Subject: [RHEL7 PATCH 231/626] powerpc: Fix up the kdump base cap to 128M
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>
RH-Acked-by: Baoquan He <bhe@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit e641eb03ab2b0f065fa5e64b4202fb5b0441b427
Author: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
Date:   Mon Dec 9 15:33:39 2013 +0530

    powerpc: Fix up the kdump base cap to 128M

    The current logic sets the kdump base to min of 2G or ppc64_rma_size/2.
    On PowerNV kernel the first memory block 'memory@0' can be very large,
    equal to the DIMM size with ppc64_rma_size value capped to 1G. Hence on
    PowerNV, kdump base is set to 512M resulting kdump to fail while allocating
    paca array. This is because, paca need its memory from RMA region capped
    at 256M (see allocate_pacas()).

    This patch lowers the kdump base cap to 128M so that kdump kernel can
    successfully get memory below 256M for paca allocation.

    Signed-off-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/machine_kexec.c b/arch/powerpc/kernel/machine_kexec.c
index 237ec2c..6c4e4d6 100644
--- a/arch/powerpc/kernel/machine_kexec.c
+++ b/arch/powerpc/kernel/machine_kexec.c
@@ -187,7 +187,7 @@ void __init reserve_crashkernel(void)
    * a small SLB (128MB) since the crash kernel needs to place
    * itself and some stacks to be in the first segment.
    */
-  crashk_res.start = min(0x80000000ULL, (ppc64_rma_size / 2));
+  crashk_res.start = min(0x8000000ULL, (ppc64_rma_size / 2));
 #else
   crashk_res.start = KDUMP_KERNELBASE;
 #endif
-- 
1.7.1