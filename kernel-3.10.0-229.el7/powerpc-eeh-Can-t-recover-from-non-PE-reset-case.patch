From e9051820cf30f00c918516b9e75407cb14582897 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:12:01 -0400
Subject: [powerpc] eeh: Can't recover from non-PE-reset case

Message-id: <1410545655-205645-493-git-send-email-dzickus@redhat.com>
Patchwork-id: 94463
O-Subject: [RHEL7 PATCH 492/626] powerpc/eeh: Can't recover from non-PE-reset case
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 35845a7826a27eb1c16ee5b0c5a0307159c1d1c4
Author: Gavin Shan <gwshan@linux.vnet.ibm.com>
Date:   Thu Apr 24 18:00:26 2014 +1000

    powerpc/eeh: Can't recover from non-PE-reset case

    When PCI_ERS_RESULT_CAN_RECOVER returned from device drivers, the
    EEH core should enable I/O and DMA for the affected PE. However,
    it was missed to have DMA enabled in eeh_handle_normal_event().
    Besides, the frozen state of the affected PE should be cleared
    after successful recovery, but we didn't.

    The patch fixes both of the issues as above.

    Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/eeh_driver.c b/arch/powerpc/kernel/eeh_driver.c
index f99ba9b..7100a5b 100644
--- a/arch/powerpc/kernel/eeh_driver.c
+++ b/arch/powerpc/kernel/eeh_driver.c
@@ -640,7 +640,6 @@ static void eeh_handle_normal_event(struct eeh_pe *pe)
    result = PCI_ERS_RESULT_NEED_RESET;
   } else {
    pr_info("EEH: Notify device drivers to resume I/O\n");
-   result = PCI_ERS_RESULT_NONE;
    eeh_pe_dev_traverse(pe, eeh_report_mmio_enabled, &result);
   }
  }
@@ -652,10 +651,17 @@ static void eeh_handle_normal_event(struct eeh_pe *pe)
 
   if (rc < 0)
    goto hard_fail;
-  if (rc)
+  if (rc) {
    result = PCI_ERS_RESULT_NEED_RESET;
-  else
+  } else {
+   /*
+    * We didn't do PE reset for the case. The PE
+    * is still in frozen state. Clear it before
+    * resuming the PE.
+    */
+   eeh_pe_state_clear(pe, EEH_PE_ISOLATED);
    result = PCI_ERS_RESULT_RECOVERED;
+  }
  }
 
  /* If any device has a hard failure, then shut off everything. */
-- 
1.7.1