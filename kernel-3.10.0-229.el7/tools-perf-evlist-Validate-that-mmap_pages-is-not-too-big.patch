From 19eb6fd7ea6f287ce5c6827045c8a16cca80090f Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:26:38 -0400
Subject: [tools] perf/evlist: Validate that mmap_pages is not too big

Message-id: <1408462094-14194-230-git-send-email-jolsa@redhat.com>
Patchwork-id: 88202
O-Subject: [PATCH RHEL7.1 BZ1131394 229/325] perf evlist: Validate that mmap_pages is not too big
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 2fbe4abe944868aafdde233557ac85379b60ce46
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Tue Oct 22 10:34:18 2013 +0300

description
===========
Amend perf_evlist__parse_mmap_pages() to check that the mmap_pages
entered via the --mmap_pages/-m option is not too big.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index a37e3ee..0582f67 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -705,7 +705,8 @@ static size_t perf_evlist__mmap_size(unsigned long pages)
 int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
       int unset __maybe_unused)
 {
- unsigned int pages, val, *mmap_pages = opt->value;
+ unsigned int *mmap_pages = opt->value;
+ unsigned long pages, val;
  size_t size;
  static struct parse_tag tags[] = {
   { .tag  = 'B', .mult = 1       },
@@ -716,12 +717,12 @@ int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
  };
 
  val = parse_tag_value(str, tags);
- if (val != (unsigned int) -1) {
+ if (val != (unsigned long) -1) {
   /* we got file size value */
   pages = PERF_ALIGN(val, page_size) / page_size;
-  if (!is_power_of_2(pages)) {
+  if (pages < (1UL << 31) && !is_power_of_2(pages)) {
    pages = next_pow2(pages);
-   pr_info("rounding mmap pages size to %u (%u pages)\n",
+   pr_info("rounding mmap pages size to %lu (%lu pages)\n",
     pages * page_size, pages);
   }
  } else {
@@ -734,6 +735,11 @@ int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
   }
  }
 
+ if (pages > UINT_MAX || pages > SIZE_MAX / page_size) {
+  pr_err("--mmap_pages/-m value too big\n");
+  return -1;
+ }
+
  size = perf_evlist__mmap_size(pages);
  if (!size) {
   pr_err("--mmap_pages/-m value must be a power of two.");
-- 
1.7.1