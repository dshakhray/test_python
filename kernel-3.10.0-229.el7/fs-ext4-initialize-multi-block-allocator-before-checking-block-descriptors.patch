From 847a19e8a195505df28ad01de2e8b8a29422c2c2 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:57 -0400
Subject: [fs] ext4: initialize multi-block allocator before checking block descriptors

Message-id: <1414058125-4183-144-git-send-email-lczerner@redhat.com>
Patchwork-id: 98205
O-Subject: [RHEL 7.1 PATCH v2 143/171] ext4: initialize multi-block allocator before checking block descriptors
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Azat Khuzhin <a3at.mail@gmail.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 007649375f6af242d5b1df2c15996949714303ba

 With EXT4FS_DEBUG ext4_count_free_clusters() will call
 ext4_read_block_bitmap() without s_group_info initialized, so we need to
 initialize multi-block allocator before.

 And dependencies that must be solved, to allow this:
 - multi-block allocator needs in group descriptors
 - need to install s_op before initializing multi-block allocator,
   because in ext4_mb_init_backend() new inode is created.
 - initialize number of group desc blocks (s_gdb_count) otherwise
   number of clusters returned by ext4_free_clusters_after_init() is not correct.
   (see ext4_bg_num_gdb_nometa())

 Here is the stack backtrace:

 (gdb) bt
  #0  ext4_get_group_info (group=0, sb=0xffff880079a10000) at ext4.h:2430
  #1  ext4_validate_block_bitmap (sb=sb@entry=0xffff880079a10000,
      desc=desc@entry=0xffff880056510000, block_group=block_group@entry=0,
      bh=bh@entry=0xffff88007bf2b2d8) at balloc.c:358
  #2  0xffffffff81232202 in ext4_wait_block_bitmap (sb=sb@entry=0xffff880079a10000,
      block_group=block_group@entry=0,
      bh=bh@entry=0xffff88007bf2b2d8) at balloc.c:476
  #3  0xffffffff81232eaf in ext4_read_block_bitmap (sb=sb@entry=0xffff880079a10000,
      block_group=block_group@entry=0) at balloc.c:489
  #4  0xffffffff81232fc0 in ext4_count_free_clusters (sb=sb@entry=0xffff880079a10000) at balloc.c:665
  #5  0xffffffff81259ffa in ext4_check_descriptors (first_not_zeroed=<synthetic pointer>,
      sb=0xffff880079a10000) at super.c:2143
  #6  ext4_fill_super (sb=sb@entry=0xffff880079a10000, data=<optimized out>,
      data@entry=0x0 <irq_stack_union>, silent=silent@entry=0) at super.c:3851
      ...

 Signed-off-by: Azat Khuzhin <a3at.mail@gmail.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 6cd0d64..738ef52 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -3868,19 +3868,38 @@ static int ext4_fill_super(struct super_block *sb, void *data, int silent)
    goto failed_mount2;
   }
  }
+
+ /*
+  * set up enough so that it can read an inode,
+  * and create new inode for buddy allocator
+  */
+ sbi->s_gdb_count = db_count;
+ if (!test_opt(sb, NOLOAD) &&
+     EXT4_HAS_COMPAT_FEATURE(sb, EXT4_FEATURE_COMPAT_HAS_JOURNAL))
+  sb->s_op = &ext4_sops;
+ else
+  sb->s_op = &ext4_nojournal_sops;
+
+ ext4_ext_init(sb);
+ err = ext4_mb_init(sb);
+ if (err) {
+  ext4_msg(sb, KERN_ERR, "failed to initialize mballoc (%d)",
+    err);
+  goto failed_mount2;
+ }
+
  if (!ext4_check_descriptors(sb, &first_not_zeroed)) {
   ext4_msg(sb, KERN_ERR, "group descriptors corrupted!");
-  goto failed_mount2;
+  goto failed_mount2a;
  }
  if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_FLEX_BG))
   if (!ext4_fill_flex_info(sb)) {
    ext4_msg(sb, KERN_ERR,
           "unable to initialize "
           "flex_bg meta info!");
-   goto failed_mount2;
+   goto failed_mount2a;
   }
 
- sbi->s_gdb_count = db_count;
  get_random_bytes(&sbi->s_next_generation, sizeof(u32));
  spin_lock_init(&sbi->s_next_gen_lock);
 
@@ -3915,14 +3934,6 @@ static int ext4_fill_super(struct super_block *sb, void *data, int silent)
  sbi->s_stripe = ext4_get_stripe_size(sbi);
  sbi->s_extent_max_zeroout_kb = 32;
 
- /*
-  * set up enough so that it can read an inode
-  */
- if (!test_opt(sb, NOLOAD) &&
-     EXT4_HAS_COMPAT_FEATURE(sb, EXT4_FEATURE_COMPAT_HAS_JOURNAL))
-  sb->s_op = &ext4_sops;
- else
-  sb->s_op = &ext4_nojournal_sops;
  sb->s_export_op = &ext4_export_ops;
  sb->s_xattr = ext4_xattr_handlers;
 #ifdef CONFIG_QUOTA
@@ -4112,21 +4123,13 @@ no_journal:
  if (err) {
   ext4_msg(sb, KERN_ERR, "failed to reserve %llu clusters for "
     "reserved pool", ext4_calculate_resv_clusters(sb));
-  goto failed_mount4a;
+  goto failed_mount5;
  }
 
  err = ext4_setup_system_zone(sb);
  if (err) {
   ext4_msg(sb, KERN_ERR, "failed to initialize system "
     "zone (%d)", err);
-  goto failed_mount4a;
- }
-
- ext4_ext_init(sb);
- err = ext4_mb_init(sb);
- if (err) {
-  ext4_msg(sb, KERN_ERR, "failed to initialize mballoc (%d)",
-    err);
   goto failed_mount5;
  }
 
@@ -4203,11 +4206,8 @@ failed_mount8:
 failed_mount7:
  ext4_unregister_li_request(sb);
 failed_mount6:
- ext4_mb_release(sb);
-failed_mount5:
- ext4_ext_release(sb);
  ext4_release_system_zone(sb);
-failed_mount4a:
+failed_mount5:
  dput(sb->s_root);
  sb->s_root = NULL;
 failed_mount4:
@@ -4233,11 +4233,14 @@ failed_mount3:
  percpu_counter_destroy(&sbi->s_extent_cache_cnt);
  if (sbi->s_mmp_tsk)
   kthread_stop(sbi->s_mmp_tsk);
+failed_mount2a:
+ ext4_mb_release(sb);
 failed_mount2:
  for (i = 0; i < db_count; i++)
   brelse(sbi->s_group_desc[i]);
  ext4_kvfree(sbi->s_group_desc);
 failed_mount:
+ ext4_ext_release(sb);
  if (sbi->s_chksum_driver)
   crypto_free_shash(sbi->s_chksum_driver);
  if (sbi->s_proc) {
-- 
1.7.1