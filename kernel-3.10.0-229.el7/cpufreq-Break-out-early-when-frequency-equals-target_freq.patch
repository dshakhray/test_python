From 0c88c22907fc36079f46fc9a985dd6c7f26d2fe4 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:06 -0400
Subject: [cpufreq] Break out early when frequency equals target_freq

Message-id: <1409235879-1283-153-git-send-email-prarit@redhat.com>
Patchwork-id: 89497
O-Subject: [RHEL7.1 PATCH BZ 1134639 152/185] cpufreq: Break out early when frequency equals target_freq
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 1e4988563d3c92ba756d8c86917fc1b594ebe855
Author: Stratos Karafotis <stratosk@semaphore.gr>
Date:   Wed May 14 21:05:52 2014 +0300

    cpufreq: Break out early when frequency equals target_freq

    Many drivers keep frequencies in frequency table in ascending
    or descending order. When governor tries to change to policy->min
    or policy->max respectively then the cpufreq_frequency_table_target
    could return on first iteration. This will save some iteration cycles.

    So, break out early when a frequency in cpufreq_frequency_table
    equals to target one.

    Testing this during kernel compilation using ondemand governor
    with a frequency table in ascending order, the
    cpufreq_frequency_table_target returned early on the first
    iteration at about 30% of times called.

    Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/freq_table.c b/drivers/cpufreq/freq_table.c
index 8e518c6..1632981 100644
--- a/drivers/cpufreq/freq_table.c
+++ b/drivers/cpufreq/freq_table.c
@@ -137,9 +137,13 @@ int cpufreq_frequency_table_target(struct cpufreq_policy *policy,
   i = pos - table;
   if ((freq < policy->min) || (freq > policy->max))
    continue;
+  if (freq == target_freq) {
+   optimal.driver_data = i;
+   break;
+  }
   switch (relation) {
   case CPUFREQ_RELATION_H:
-   if (freq <= target_freq) {
+   if (freq < target_freq) {
     if (freq >= optimal.frequency) {
      optimal.frequency = freq;
      optimal.driver_data = i;
@@ -152,7 +156,7 @@ int cpufreq_frequency_table_target(struct cpufreq_policy *policy,
    }
    break;
   case CPUFREQ_RELATION_L:
-   if (freq >= target_freq) {
+   if (freq > target_freq) {
     if (freq <= optimal.frequency) {
      optimal.frequency = freq;
      optimal.driver_data = i;
-- 
1.7.1