From 2f7c6f2cada1441b01e8c25b194967704ad7451f Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:12 -0400
Subject: [cpufreq] acpi-cpufreq: Adjust the code to use the common boost attribute

Message-id: <1409235879-1283-99-git-send-email-prarit@redhat.com>
Patchwork-id: 89455
O-Subject: [RHEL7.1 PATCH BZ 1134639 098/185] acpi-cpufreq: Adjust the code to use the common boost attribute
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit cfc9c8ed03e4d908f2388af8815f44c87b503aaf
Author: Lukasz Majewski <l.majewski@samsung.com>
Date:   Fri Dec 20 15:24:50 2013 +0100

    acpi-cpufreq: Adjust the code to use the common boost attribute

    Modify acpi-cpufreq's hardware-based boost solution to work with the
    common cpufreq boost framework.

    Signed-off-by: Lukasz Majewski <l.majewski@samsung.com>
    Signed-off-by: Myungjoo Ham <myungjoo.ham@samsung.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    [rjw: Subject and changelog]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/acpi-cpufreq.c b/drivers/cpufreq/acpi-cpufreq.c
index 957b77a..967b24e 100644
--- a/drivers/cpufreq/acpi-cpufreq.c
+++ b/drivers/cpufreq/acpi-cpufreq.c
@@ -80,7 +80,6 @@ static struct acpi_processor_performance __percpu *acpi_perf_data;
 static struct cpufreq_driver acpi_cpufreq_driver;
 
 static unsigned int acpi_pstate_strict;
-static bool boost_enabled, boost_supported;
 static struct msr __percpu *msrs;
 
 static bool boost_state(unsigned int cpu)
@@ -133,49 +132,16 @@ static void boost_set_msrs(bool enable, const struct cpumask *cpumask)
  wrmsr_on_cpus(cpumask, msr_addr, msrs);
 }
 
-static ssize_t _store_boost(const char *buf, size_t count)
+static int _store_boost(int val)
 {
- int ret;
- unsigned long val = 0;
-
- if (!boost_supported)
-  return -EINVAL;
-
- ret = kstrtoul(buf, 10, &val);
- if (ret || (val > 1))
-  return -EINVAL;
-
- if ((val && boost_enabled) || (!val && !boost_enabled))
-  return count;
-
  get_online_cpus();
-
  boost_set_msrs(val, cpu_online_mask);
-
  put_online_cpus();
-
- boost_enabled = val;
  pr_debug("Core Boosting %sabled.\n", val ? "en" : "dis");
 
- return count;
-}
-
-static ssize_t store_global_boost(struct kobject *kobj, struct attribute *attr,
-      const char *buf, size_t count)
-{
- return _store_boost(buf, count);
-}
-
-static ssize_t show_global_boost(struct kobject *kobj,
-     struct attribute *attr, char *buf)
-{
- return sprintf(buf, "%u\n", boost_enabled);
+ return 0;
 }
 
-static struct global_attr global_boost = __ATTR(boost, 0644,
-      show_global_boost,
-      store_global_boost);
-
 static ssize_t show_freqdomain_cpus(struct cpufreq_policy *policy, char *buf)
 {
  struct acpi_cpufreq_data *data = per_cpu(acfreq_data, policy->cpu);
@@ -186,15 +152,32 @@ static ssize_t show_freqdomain_cpus(struct cpufreq_policy *policy, char *buf)
 cpufreq_freq_attr_ro(freqdomain_cpus);
 
 #ifdef CONFIG_X86_ACPI_CPUFREQ_CPB
+static ssize_t store_boost(const char *buf, size_t count)
+{
+ int ret;
+ unsigned long val = 0;
+
+ if (!acpi_cpufreq_driver.boost_supported)
+  return -EINVAL;
+
+ ret = kstrtoul(buf, 10, &val);
+ if (ret || (val > 1))
+  return -EINVAL;
+
+ _store_boost((int) val);
+
+ return count;
+}
+
 static ssize_t store_cpb(struct cpufreq_policy *policy, const char *buf,
     size_t count)
 {
- return _store_boost(buf, count);
+ return store_boost(buf, count);
 }
 
 static ssize_t show_cpb(struct cpufreq_policy *policy, char *buf)
 {
- return sprintf(buf, "%u\n", boost_enabled);
+ return sprintf(buf, "%u\n", acpi_cpufreq_driver.boost_enabled);
 }
 
 cpufreq_freq_attr_rw(cpb);
@@ -554,7 +537,7 @@ static int boost_notify(struct notifier_block *nb, unsigned long action,
  switch (action) {
  case CPU_UP_PREPARE:
  case CPU_UP_PREPARE_FROZEN:
-  boost_set_msrs(boost_enabled, cpumask);
+  boost_set_msrs(acpi_cpufreq_driver.boost_enabled, cpumask);
   break;
 
  case CPU_DOWN_PREPARE:
@@ -911,6 +894,7 @@ static struct cpufreq_driver acpi_cpufreq_driver = {
  .resume  = acpi_cpufreq_resume,
  .name  = "acpi-cpufreq",
  .attr  = acpi_cpufreq_attr,
+ .set_boost      = _store_boost,
 };
 
 static void __init acpi_cpufreq_boost_init(void)
@@ -921,33 +905,23 @@ static void __init acpi_cpufreq_boost_init(void)
   if (!msrs)
    return;
 
-  boost_supported = true;
-  boost_enabled = boost_state(0);
+  acpi_cpufreq_driver.boost_supported = true;
+  acpi_cpufreq_driver.boost_enabled = boost_state(0);
 
   cpu_notifier_register_begin();
 
   /* Force all MSRs to the same value */
-  boost_set_msrs(boost_enabled, cpu_online_mask);
+  boost_set_msrs(acpi_cpufreq_driver.boost_enabled,
+          cpu_online_mask);
 
   __register_cpu_notifier(&boost_nb);
 
   cpu_notifier_register_done();
- } else
-  global_boost.attr.mode = 0444;
-
- /* We create the boost file in any case, though for systems without
-  * hardware support it will be read-only and hardwired to return 0.
-  */
- if (cpufreq_sysfs_create_file(&(global_boost.attr)))
-  pr_warn(PFX "could not register global boost sysfs file\n");
- else
-  pr_debug("registered global boost sysfs file\n");
+ }
 }
 
 static void __exit acpi_cpufreq_boost_exit(void)
 {
- cpufreq_sysfs_remove_file(&(global_boost.attr));
-
  if (msrs) {
   unregister_cpu_notifier(&boost_nb);
 
@@ -993,12 +967,11 @@ static int __init acpi_cpufreq_init(void)
    *iter = &cpb;
  }
 #endif
+ acpi_cpufreq_boost_init();
 
  ret = cpufreq_register_driver(&acpi_cpufreq_driver);
  if (ret)
   free_acpi_perf_data();
- else
-  acpi_cpufreq_boost_init();
 
  return ret;
 }
-- 
1.7.1