From 5371def306c7495e70d3037f929848df9b979b2c Mon Sep 17 00:00:00 2001
From: Amit Shah <amit.shah@redhat.com>
Date: Tue, 12 Aug 2014 11:30:58 -0400
Subject: [char] hwrng: virtio - delay hwrng_register() till driver is ready

Message-id: <d7f5525e281b29605037441ae5d1ec32875e6093.1407842211.git.amit.shah@redhat.com>
Patchwork-id: 87655
O-Subject: [RHEL7.1 kernel PATCH 8/9] virtio: rng: delay hwrng_register() till driver is ready
Bugzilla: 1119299
RH-Acked-by: Amos Kong <akong@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Herbert Xu <herbert.xu@redhat.com>

Instead of calling hwrng_register() in the probe routing, call it in the
scan routine.  This ensures that when hwrng_register() is successful,
and it requests a few random bytes to seed the kernel's pool at init,
we're ready to service that request.

This will also enable us to remove the workaround added previously to
check whether probe was completed, and only then ask for data from the
host.  The revert follows in the next commit.

There's a slight behaviour change here on unsuccessful hwrng_register().
Previously, when hwrng_register() failed, the probe() routine would
fail, and the vqs would be torn down, and driver would be marked not
initialized.  Now, the vqs will remain initialized, driver would be
marked initialized as well, but won't be available in the list of RNGs
available to hwrng core.  To fix the failures, the procedure remains the
same, i.e. unload and re-load the module, and hope things succeed the
next time around.

Signed-off-by: Amit Shah <amit.shah@redhat.com>
Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
(cherry picked from commit 5c06273401f2eb7b290cadbae18ee00f8f65e893)
Signed-off-by: Amit Shah <amit.shah@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/char/hw_random/virtio-rng.c b/drivers/char/hw_random/virtio-rng.c
index dc5d29d..91d18e1 100644
--- a/drivers/char/hw_random/virtio-rng.c
+++ b/drivers/char/hw_random/virtio-rng.c
@@ -36,6 +36,7 @@ struct virtrng_info {
  unsigned int data_avail;
  int index;
  bool busy;
+ bool hwrng_register_done;
 };
 
 static bool probe_done;
@@ -137,15 +138,6 @@ static int probe_common(struct virtio_device *vdev)
   return err;
  }
 
- err = hwrng_register(&vi->hwrng);
- if (err) {
-  vdev->config->del_vqs(vdev);
-  vi->vq = NULL;
-  kfree(vi);
-  ida_simple_remove(&rng_index_ida, index);
-  return err;
- }
-
  probe_done = true;
  return 0;
 }
@@ -153,9 +145,11 @@ static int probe_common(struct virtio_device *vdev)
 static void remove_common(struct virtio_device *vdev)
 {
  struct virtrng_info *vi = vdev->priv;
+
  vdev->config->reset(vdev);
  vi->busy = false;
- hwrng_unregister(&vi->hwrng);
+ if (vi->hwrng_register_done)
+  hwrng_unregister(&vi->hwrng);
  vdev->config->del_vqs(vdev);
  ida_simple_remove(&rng_index_ida, vi->index);
  kfree(vi);
@@ -171,6 +165,16 @@ static void virtrng_remove(struct virtio_device *vdev)
  remove_common(vdev);
 }
 
+static void virtrng_scan(struct virtio_device *vdev)
+{
+ struct virtrng_info *vi = vdev->priv;
+ int err;
+
+ err = hwrng_register(&vi->hwrng);
+ if (!err)
+  vi->hwrng_register_done = true;
+}
+
 #ifdef CONFIG_PM_SLEEP
 static int virtrng_freeze(struct virtio_device *vdev)
 {
@@ -195,6 +199,7 @@ static struct virtio_driver virtio_rng_driver = {
  .id_table = id_table,
  .probe = virtrng_probe,
  .remove = virtrng_remove,
+ .scan =  virtrng_scan,
 #ifdef CONFIG_PM_SLEEP
  .freeze = virtrng_freeze,
  .restore = virtrng_restore,
-- 
1.7.1