From acdf2dc444f3cc80ac277a6555e0b8cd47fa6c9f Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:50:42 -0400
Subject: [fs] nfsd: decoding errors can still be cached and require space

Message-id: <1403560314-32525-101-git-send-email-bfields@redhat.com>
Patchwork-id: 84501
O-Subject: [Patch RHEL7 100/172] nfsd4: decoding errors can still be cached and require space
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

Currently a non-idempotent op reply may be cached if it fails in the
proc code but not if it fails at xdr decoding.  I doubt there are any
xdr-decoding-time errors that would make this a problem in practice, so
this probably isn't a serious bug.

The space estimates should also take into account space required for
encoding of error returns.  Again, not a practical problem, though it
would become one after future patches which will tighten the space
estimates.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: e372ba60def1af33e1c0b9bbfa5c8f8559c1ad6b
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4proc.c b/fs/nfsd/nfs4proc.c
index b4057fc..f3a1aa9 100644
--- a/fs/nfsd/nfs4proc.c
+++ b/fs/nfsd/nfs4proc.c
@@ -1214,6 +1214,8 @@ static inline struct nfsd4_operation *OPDESC(struct nfsd4_op *op)
 
 bool nfsd4_cache_this_op(struct nfsd4_op *op)
 {
+ if (op->opnum == OP_ILLEGAL)
+  return false;
  return OPDESC(op)->op_flags & OP_CACHEME;
 }
 
diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 18881f3..e866a06 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -1677,11 +1677,6 @@ nfsd4_decode_compound(struct nfsd4_compoundargs *argp)
    op->opnum = OP_ILLEGAL;
    op->status = nfserr_op_illegal;
   }
-
-  if (op->status) {
-   argp->opcnt = i+1;
-   break;
-  }
   /*
    * We'll try to cache the result in the DRC if any one
    * op in the compound wants to be cached:
@@ -1689,6 +1684,11 @@ nfsd4_decode_compound(struct nfsd4_compoundargs *argp)
   cachethis |= nfsd4_cache_this_op(op);
 
   max_reply = max(max_reply, nfsd4_max_reply(op->opnum));
+
+  if (op->status) {
+   argp->opcnt = i+1;
+   break;
+  }
  }
  /* Sessions make the DRC unnecessary: */
  if (argp->minorversion)
-- 
1.7.1