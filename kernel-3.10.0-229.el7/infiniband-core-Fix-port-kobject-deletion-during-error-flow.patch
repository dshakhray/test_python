From e3675e3e85c1b178a0522df469671b541b422348 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 11:59:21 -0400
Subject: [infiniband] core: Fix port kobject deletion during error flow

Message-id: <0974a96aefddb30417cc2d839dae56f9d7368591.1410425016.git.avadai@redhat.com>
Patchwork-id: 93596
O-Subject: [Patch RHEL7.1 V1 025/197] IB/core: Fix port kobject deletion during error flow
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Haggai Eran <haggaie@mellanox.com>

When encountering an error during the add_port function, adding a port
to sysfs, the port kobject is freed without being deleted from sysfs.

Instead of freeing it directly, the patch uses kobject_put to release
the kobject and delete it.

Signed-off-by: Haggai Eran <haggaie@mellanox.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit cad6d02acc13b6360e4525f86adb6a8932501e15)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/core/sysfs.c b/drivers/infiniband/core/sysfs.c
index 1f77072..68fa798 100644
--- a/drivers/infiniband/core/sysfs.c
+++ b/drivers/infiniband/core/sysfs.c
@@ -429,15 +429,19 @@ static void ib_port_release(struct kobject *kobj)
  struct attribute *a;
  int i;
 
- for (i = 0; (a = p->gid_group.attrs[i]); ++i)
-  kfree(a);
+ if (p->gid_group.attrs) {
+  for (i = 0; (a = p->gid_group.attrs[i]); ++i)
+   kfree(a);
 
- kfree(p->gid_group.attrs);
+  kfree(p->gid_group.attrs);
+ }
 
- for (i = 0; (a = p->pkey_group.attrs[i]); ++i)
-  kfree(a);
+ if (p->pkey_group.attrs) {
+  for (i = 0; (a = p->pkey_group.attrs[i]); ++i)
+   kfree(a);
 
- kfree(p->pkey_group.attrs);
+  kfree(p->pkey_group.attrs);
+ }
 
  kfree(p);
 }
@@ -536,8 +540,10 @@ static int add_port(struct ib_device *device, int port_num,
  ret = kobject_init_and_add(&p->kobj, &port_type,
        device->ports_parent,
        "%d", port_num);
- if (ret)
-  goto err_put;
+ if (ret) {
+  kfree(p);
+  return ret;
+ }
 
  ret = sysfs_create_group(&p->kobj, &pma_group);
  if (ret)
@@ -585,6 +591,7 @@ err_free_pkey:
   kfree(p->pkey_group.attrs[i]);
 
  kfree(p->pkey_group.attrs);
+ p->pkey_group.attrs = NULL;
 
 err_remove_gid:
  sysfs_remove_group(&p->kobj, &p->gid_group);
@@ -594,12 +601,13 @@ err_free_gid:
   kfree(p->gid_group.attrs[i]);
 
  kfree(p->gid_group.attrs);
+ p->gid_group.attrs = NULL;
 
 err_remove_pma:
  sysfs_remove_group(&p->kobj, &pma_group);
 
 err_put:
- kfree(p);
+ kobject_put(&p->kobj);
  return ret;
 }
 
-- 
1.7.1