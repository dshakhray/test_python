From 114171bef990076ef2078614127ff384c68298f4 Mon Sep 17 00:00:00 2001
From: Marcelo Leitner <mleitner@redhat.com>
Date: Tue, 21 Oct 2014 16:16:38 -0400
Subject: [net] netfilter: nf_tables: clean up nf_tables_trans_add() argument order

Message-id: <20141021161638.22888.38757.stgit@localhost.localdomain>
Patchwork-id: 97919
O-Subject: [RHEL7 net PATCH 022/124] netfilter: nf_tables: clean up nf_tables_trans_add() argument order
Bugzilla: 1148041 1155088
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Backport of upstream commit: a36e901cf60d4e9a1882d2a98b1a9c60e84aff2c

 commit a36e901cf60d4e9a1882d2a98b1a9c60e84aff2c
 Author: Patrick McHardy <kaber@trash.net>
 Date:   Fri Mar 7 19:08:29 2014 +0100

    netfilter: nf_tables: clean up nf_tables_trans_add() argument order

    The context argument logically comes first, and this is what every other
    function dealing with contexts does.

    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/netfilter/nf_tables_api.c b/net/netfilter/nf_tables_api.c
index f25d011..611afc0 100644
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -1557,7 +1557,7 @@ static void nf_tables_rule_destroy(struct nft_rule *rule)
 static struct nft_expr_info *info;
 
 static struct nft_rule_trans *
-nf_tables_trans_add(struct nft_rule *rule, const struct nft_ctx *ctx)
+nf_tables_trans_add(struct nft_ctx *ctx, struct nft_rule *rule)
 {
  struct nft_rule_trans *rupd;
 
@@ -1683,7 +1683,7 @@ static int nf_tables_newrule(struct sock *nlsk, struct sk_buff *skb,
 
  if (nlh->nlmsg_flags & NLM_F_REPLACE) {
   if (nft_rule_is_active_next(net, old_rule)) {
-   repl = nf_tables_trans_add(old_rule, &ctx);
+   repl = nf_tables_trans_add(&ctx, old_rule);
    if (repl == NULL) {
     err = -ENOMEM;
     goto err2;
@@ -1706,7 +1706,7 @@ static int nf_tables_newrule(struct sock *nlsk, struct sk_buff *skb,
    list_add_rcu(&rule->list, &chain->rules);
  }
 
- if (nf_tables_trans_add(rule, &ctx) == NULL) {
+ if (nf_tables_trans_add(&ctx, rule) == NULL) {
   err = -ENOMEM;
   goto err3;
  }
@@ -1735,7 +1735,7 @@ nf_tables_delrule_one(struct nft_ctx *ctx, struct nft_rule *rule)
 {
  /* You cannot delete the same rule twice */
  if (nft_rule_is_active_next(ctx->net, rule)) {
-  if (nf_tables_trans_add(rule, ctx) == NULL)
+  if (nf_tables_trans_add(ctx, rule) == NULL)
    return -ENOMEM;
   nft_rule_disactivate_next(ctx->net, rule);
   return 0;
-- 
1.7.1