From 8a9f5839ef7681bc0bef61140440c310d13e5eb6 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:50:12 -0400
Subject: [fs] nfsd: don't create unnecessary mask acl

Message-id: <1403560314-32525-71-git-send-email-bfields@redhat.com>
Patchwork-id: 84557
O-Subject: [Patch RHEL7 070/172] nfsd4: don't create unnecessary mask acl
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

Any setattr of the ACL attribute, even if it sets just the basic 3-ACE
ACL exactly as it was returned from a file with only mode bits, creates
a mask entry, and it is only the mask, not group, entry that is changed
by subsequent modifications of the mode bits.

So, for example, it's surprising that GROUP@ is left without read or
write permissions after a chmod 0666:

  touch test
  chmod 0600 test
  nfs4_getfacl test
        A::OWNER@:rwatTcCy
        A::GROUP@:tcy
        A::EVERYONE@:tcy
  nfs4_getfacl test | nfs4_setfacl -S - test #
  chmod 0666 test
  nfs4_getfacl test
        A::OWNER@:rwatTcCy
        A::GROUP@:tcy
        D::GROUP@:rwa
        A::EVERYONE@:rwatcy

So, let's stop creating the unnecessary mask ACL.

A mask will still be created on non-trivial ACLs (ACLs with actual named
user and group ACEs), so the odd posix-acl behavior of chmod modifying
only the mask will still be left in that case; but that's consistent
with local behavior.

Reported-by: Soumya Koduri <skoduri@redhat.com>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 06f9cc12caa862f5bc86ebdb4f77568a4bef0167
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4acl.c b/fs/nfsd/nfs4acl.c
index eea24c9..bb220d9 100644
--- a/fs/nfsd/nfs4acl.c
+++ b/fs/nfsd/nfs4acl.c
@@ -526,7 +526,10 @@ posix_state_to_acl(struct posix_acl_state *state, unsigned int flags)
   * up setting a 3-element effective posix ACL with all
   * permissions zero.
   */
- nace = 4 + state->users->n + state->groups->n;
+ if (!state->users->n && !state->groups->n)
+  nace = 3;
+ else /* Note we also include a MASK ACE in this case: */
+  nace = 4 + state->users->n + state->groups->n;
  pacl = posix_acl_alloc(nace, GFP_KERNEL);
  if (!pacl)
   return ERR_PTR(-ENOMEM);
@@ -570,9 +573,11 @@ posix_state_to_acl(struct posix_acl_state *state, unsigned int flags)
   add_to_mask(state, &state->groups->aces[i].perms);
  }
 
- pace++;
- pace->e_tag = ACL_MASK;
- low_mode_from_nfs4(state->mask.allow, &pace->e_perm, flags);
+ if (!state->users->n && !state->groups->n) {
+  pace++;
+  pace->e_tag = ACL_MASK;
+  low_mode_from_nfs4(state->mask.allow, &pace->e_perm, flags);
+ }
 
  pace++;
  pace->e_tag = ACL_OTHER;
-- 
1.7.1