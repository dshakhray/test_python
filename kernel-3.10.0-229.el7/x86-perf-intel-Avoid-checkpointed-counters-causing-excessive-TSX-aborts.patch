From c1e3cf5d18a9e9ecb110335746ed921fd53a9bdd Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:22:50 -0400
Subject: [x86] perf/intel: Avoid checkpointed counters causing excessive TSX aborts

Message-id: <1408462094-14194-2-git-send-email-jolsa@redhat.com>
Patchwork-id: 87989
O-Subject: [PATCH RHEL7.1 BZ1131394 001/325] perf/x86/intel: Avoid checkpointed counters causing excessive TSX aborts
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 2dbf0116aa8c7bfa900352d3f7b2609748fcc1c5
Author: Andi Kleen <ak@linux.intel.com>
Date: Thu Sep 5 20:37:38 2013 -0700

description
===========
With checkpointed counters there can be a situation where the counter
is overflowing, aborts the transaction, is set back to a non overflowing
checkpoint, causes interupt. The interrupt doesn't see the overflow
because it has been checkpointed.  This is then a spurious PMI, typically with
a ugly NMI message.  It can also lead to excessive aborts.

Avoid this problem by:

- Using the full counter width for counting counters (earlier patch)

- Forbid sampling for checkpointed counters. It's not too useful anyways,
  checkpointing is mainly for counting. The check is approximate
  (to still handle KVM), but should catch the majority of cases.

- On a PMI always set back checkpointed counters to zero.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/cpu/perf_event_intel.c b/arch/x86/kernel/cpu/perf_event_intel.c
index 1ae7246..0a65ac2 100644
--- a/arch/x86/kernel/cpu/perf_event_intel.c
+++ b/arch/x86/kernel/cpu/perf_event_intel.c
@@ -1281,6 +1281,11 @@ static void intel_pmu_enable_event(struct perf_event *event)
  __x86_pmu_enable_event(hwc, ARCH_PERFMON_EVENTSEL_ENABLE);
 }
 
+static inline bool event_is_checkpointed(struct perf_event *event)
+{
+ return (event->hw.config & HSW_IN_TX_CHECKPOINTED) != 0;
+}
+
 /*
  * Save and restart an expired event. Called by NMI contexts,
  * so it has to be careful about preempting normal event ops:
@@ -1288,6 +1293,17 @@ static void intel_pmu_enable_event(struct perf_event *event)
 int intel_pmu_save_and_restart(struct perf_event *event)
 {
  x86_perf_event_update(event);
+ /*
+  * For a checkpointed counter always reset back to 0.  This
+  * avoids a situation where the counter overflows, aborts the
+  * transaction and is then set back to shortly before the
+  * overflow, and overflows and aborts again.
+  */
+ if (unlikely(event_is_checkpointed(event))) {
+  /* No race with NMIs because the counter should not be armed */
+  wrmsrl(event->hw.event_base, 0);
+  local64_set(&event->hw.prev_count, 0);
+ }
  return x86_perf_event_set_period(event);
 }
 
@@ -1367,6 +1383,13 @@ again:
   x86_pmu.drain_pebs(regs);
  }
 
+ /*
+  * To avoid spurious interrupts with perf stat always reset checkpointed
+  * counters.
+  */
+ if (cpuc->events[2] && event_is_checkpointed(cpuc->events[2]))
+  status |= (1ULL << 2);
+
  for_each_set_bit(bit, (unsigned long *)&status, X86_PMC_IDX_MAX) {
   struct perf_event *event = cpuc->events[bit];
 
@@ -1832,6 +1855,20 @@ static int hsw_hw_config(struct perf_event *event)
        event->attr.precise_ip > 0))
   return -EOPNOTSUPP;
 
+ if (event_is_checkpointed(event)) {
+  /*
+   * Sampling of checkpointed events can cause situations where
+   * the CPU constantly aborts because of a overflow, which is
+   * then checkpointed back and ignored. Forbid checkpointing
+   * for sampling.
+   *
+   * But still allow a long sampling period, so that perf stat
+   * from KVM works.
+   */
+  if (event->attr.sample_period > 0 &&
+      event->attr.sample_period < 0x7fffffff)
+   return -EOPNOTSUPP;
+ }
  return 0;
 }
 
-- 
1.7.1