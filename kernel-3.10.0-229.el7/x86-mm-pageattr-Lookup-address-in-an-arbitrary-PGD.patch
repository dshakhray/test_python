From 31f0db81f40651439c61f9db7cddcc36fa6b2d90 Mon Sep 17 00:00:00 2001
From: Dave Young <dyoung@redhat.com>
Date: Thu, 22 May 2014 02:42:58 -0400
Subject: [x86] mm/pageattr: Lookup address in an arbitrary PGD

Message-id: <1400726607-13717-7-git-send-email-dyoung@redhat.com>
Patchwork-id: 80107
O-Subject: [RHEL7.1 PATCH 06/35] x86/mm/pageattr: Lookup address in an arbitrary PGD
Bugzilla: 1080109
RH-Acked-by: Chao WANG <chaowang@redhat.com>
RH-Acked-by: Vivek Goyal <vgoyal@redhat.com>

Resolves: bz1080109

Brew build:
https://brewweb.devel.redhat.com/taskinfo?taskID=7480539

Test: Tested kexec/kdump on HP workstation and qemu.

Upstream commit:
commit 0fd64c23fdf556e9e68580cff03b3505797bbf53
Author: Borislav Petkov <bp@suse.de>
Date:   Thu Oct 31 17:25:00 2013 +0100

    x86/mm/pageattr: Lookup address in an arbitrary PGD

    This is preparatory work in order to be able to map pages into a
    specified PGD and not implicitly and only into init_mm.

    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Matt Fleming <matt.fleming@intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index bb32480..c53de62 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -30,6 +30,7 @@
  */
 struct cpa_data {
  unsigned long *vaddr;
+ pgd_t  *pgd;
  pgprot_t mask_set;
  pgprot_t mask_clr;
  int  numpages;
@@ -322,17 +323,9 @@ static inline pgprot_t static_protections(pgprot_t prot, unsigned long address,
  return prot;
 }
 
-/*
- * Lookup the page table entry for a virtual address. Return a pointer
- * to the entry and the level of the mapping.
- *
- * Note: We return pud and pmd either when the entry is marked large
- * or when the present bit is not set. Otherwise we would return a
- * pointer to a nonexisting mapping.
- */
-pte_t *lookup_address(unsigned long address, unsigned int *level)
+static pte_t *__lookup_address_in_pgd(pgd_t *pgd, unsigned long address,
+          unsigned int *level)
 {
- pgd_t *pgd = pgd_offset_k(address);
  pud_t *pud;
  pmd_t *pmd;
 
@@ -361,8 +354,31 @@ pte_t *lookup_address(unsigned long address, unsigned int *level)
 
  return pte_offset_kernel(pmd, address);
 }
+
+/*
+ * Lookup the page table entry for a virtual address. Return a pointer
+ * to the entry and the level of the mapping.
+ *
+ * Note: We return pud and pmd either when the entry is marked large
+ * or when the present bit is not set. Otherwise we would return a
+ * pointer to a nonexisting mapping.
+ */
+pte_t *lookup_address(unsigned long address, unsigned int *level)
+{
+        return __lookup_address_in_pgd(pgd_offset_k(address), address, level);
+}
 EXPORT_SYMBOL_GPL(lookup_address);
 
+static pte_t *_lookup_address_cpa(struct cpa_data *cpa, unsigned long address,
+      unsigned int *level)
+{
+        if (cpa->pgd)
+  return __lookup_address_in_pgd(cpa->pgd + pgd_index(address),
+            address, level);
+
+        return lookup_address(address, level);
+}
+
 /*
  * This is necessary because __pa() does not work on some
  * kinds of memory, like vmalloc() or the alloc_remap()
-- 
1.7.1