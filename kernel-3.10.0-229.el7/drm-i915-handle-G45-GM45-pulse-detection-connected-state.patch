From 538f165ff320b03c7637fe33f5fe89a3be747f80 Mon Sep 17 00:00:00 2001
From: Dave Airlie <airlied@redhat.com>
Date: Fri, 12 Sep 2014 01:56:54 -0400
Subject: [drm] i915: handle G45/GM45 pulse detection connected state

Message-id: <1410487019-24661-17-git-send-email-airlied@redhat.com>
Patchwork-id: 93924
O-Subject: [RHEL7.1 BZ1140440 PATCH 16/21] drm/i915: handle G45/GM45 pulse detection connected state.
Bugzilla: 1140440
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Rob Clark <rclark@redhat.com>

bugzilla: 1140440
upstream: 2a592bec50994597716c633191ed6bf7af14defc

In the HPD pulse handler we check for long pulses if the port is actually
connected, however we do that for IBX, but we use the pulse handling code on
GM45 systems as well, so we need to use a diffent check.

This patch refactors the digital port connected check out of the g4x detection
path and reuses it in the hpd pulse path.

Fixes: http://lkml.kernel.org/r/1409382202.5141.36.camel@marge.simpson.net
Reported-by: Mike Galbraith <umgwanakikbuti@gmail.com>
Signed-off-by: Dave Airlie <airlied@redhat.com>
Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Acked-by: Imre Deak <imre.deak@intel.com>
Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Signed-off-by: Dave Airlie <airlied@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/i915/intel_dp.c b/drivers/gpu/drm/i915/intel_dp.c
index 5ba5364..5d084f0 100644
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@ -3518,24 +3518,12 @@ ironlake_dp_detect(struct intel_dp *intel_dp)
  return intel_dp_detect_dpcd(intel_dp);
 }
 
-static enum drm_connector_status
-g4x_dp_detect(struct intel_dp *intel_dp)
+static int g4x_digital_port_connected(struct drm_device *dev,
+           struct intel_digital_port *intel_dig_port)
 {
- struct drm_device *dev = intel_dp_to_dev(intel_dp);
  struct drm_i915_private *dev_priv = dev->dev_private;
- struct intel_digital_port *intel_dig_port = dp_to_dig_port(intel_dp);
  uint32_t bit;
 
- /* Can't disconnect eDP, but you can close the lid... */
- if (is_edp(intel_dp)) {
-  enum drm_connector_status status;
-
-  status = intel_panel_detect(dev);
-  if (status == connector_status_unknown)
-   status = connector_status_connected;
-  return status;
- }
-
  if (IS_VALLEYVIEW(dev)) {
   switch (intel_dig_port->port) {
   case PORT_B:
@@ -3548,7 +3536,7 @@ g4x_dp_detect(struct intel_dp *intel_dp)
    bit = PORTD_HOTPLUG_LIVE_STATUS_VLV;
    break;
   default:
-   return connector_status_unknown;
+   return -EINVAL;
   }
  } else {
   switch (intel_dig_port->port) {
@@ -3562,11 +3550,36 @@ g4x_dp_detect(struct intel_dp *intel_dp)
    bit = PORTD_HOTPLUG_LIVE_STATUS_G4X;
    break;
   default:
-   return connector_status_unknown;
+   return -EINVAL;
   }
  }
 
  if ((I915_READ(PORT_HOTPLUG_STAT) & bit) == 0)
+  return 0;
+ return 1;
+}
+
+static enum drm_connector_status
+g4x_dp_detect(struct intel_dp *intel_dp)
+{
+ struct drm_device *dev = intel_dp_to_dev(intel_dp);
+ struct intel_digital_port *intel_dig_port = dp_to_dig_port(intel_dp);
+ int ret;
+
+ /* Can't disconnect eDP, but you can close the lid... */
+ if (is_edp(intel_dp)) {
+  enum drm_connector_status status;
+
+  status = intel_panel_detect(dev);
+  if (status == connector_status_unknown)
+   status = connector_status_connected;
+  return status;
+ }
+
+ ret = g4x_digital_port_connected(dev, intel_dig_port);
+ if (ret == -EINVAL)
+  return connector_status_unknown;
+ else if (ret == 0)
   return connector_status_disconnected;
 
  return intel_dp_detect_dpcd(intel_dp);
@@ -3912,8 +3925,14 @@ intel_dp_hpd_pulse(struct intel_digital_port *intel_dig_port, bool long_hpd)
  intel_display_power_get(dev_priv, power_domain);
 
  if (long_hpd) {
-  if (!ibx_digital_port_connected(dev_priv, intel_dig_port))
-   goto mst_fail;
+
+  if (HAS_PCH_SPLIT(dev)) {
+   if (!ibx_digital_port_connected(dev_priv, intel_dig_port))
+    goto mst_fail;
+  } else {
+   if (g4x_digital_port_connected(dev, intel_dig_port) != 1)
+    goto mst_fail;
+  }
 
   if (!intel_dp_get_dpcd(intel_dp)) {
    goto mst_fail;
-- 
1.7.1