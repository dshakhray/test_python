From 577f7e29eeb2526e0349d0b0ea60fc3caff6e43c Mon Sep 17 00:00:00 2001
From: Luiz Capitulino <lcapitulino@redhat.com>
Date: Thu, 10 Jul 2014 14:15:24 -0400
Subject: [mm] hugetlb: add hstate_is_gigantic()

Message-id: <1405001727-22802-6-git-send-email-lcapitulino@redhat.com>
Patchwork-id: 85660
O-Subject: [RHEL7.1 PATCH 5/8] hugetlb: add hstate_is_gigantic()
Bugzilla: 996763
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Andrea Arcangeli <aarcange@redhat.com>

Signed-off-by: Luiz Capitulino <lcapitulino@redhat.com>
Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Reviewed-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
Reviewed-by: Davidlohr Bueso <davidlohr@hp.com>
Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Reviewed-by: Zhang Yanfei <zhangyanfei@cn.fujitsu.com>
Cc: David Rientjes <rientjes@google.com>
Cc: Marcelo Tosatti <mtosatti@redhat.com>
Cc: Rik van Riel <riel@redhat.com>
Cc: Yinghai Lu <yinghai@kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

(cherry picked from commit bae7f4ae14d47008a11b4358b167cb0ae186c06a)
Signed-off-by: Luiz Capitulino <lcapitulino@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 mm/hugetlb.c

[RHEL7.1 note: conflict is caused because of missing upstream
commit 3dcc0571cd64816309765b7c7e4691a4cadf2ee7]

diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h
index 3386cad..0025449 100644
--- a/include/linux/hugetlb.h
+++ b/include/linux/hugetlb.h
@@ -318,6 +318,11 @@ static inline unsigned huge_page_shift(struct hstate *h)
  return h->order + PAGE_SHIFT;
 }
 
+static inline bool hstate_is_gigantic(struct hstate *h)
+{
+ return huge_page_order(h) >= MAX_ORDER;
+}
+
 static inline unsigned int pages_per_huge_page(struct hstate *h)
 {
  return 1 << h->order;
diff --git a/mm/hugetlb.c b/mm/hugetlb.c
index 6b7b818..e275cb6 100644
--- a/mm/hugetlb.c
+++ b/mm/hugetlb.c
@@ -558,7 +558,7 @@ static void update_and_free_page(struct hstate *h, struct page *page)
 {
  int i;
 
- VM_BUG_ON(h->order >= MAX_ORDER);
+ VM_BUG_ON(hstate_is_gigantic(h));
 
  h->nr_huge_pages--;
  h->nr_huge_pages_node[page_to_nid(page)]--;
@@ -611,7 +611,7 @@ static void free_huge_page(struct page *page)
  if (restore_reserve)
   h->resv_huge_pages++;
 
- if (h->surplus_huge_pages_node[nid] && huge_page_order(h) < MAX_ORDER) {
+ if (h->surplus_huge_pages_node[nid] && !hstate_is_gigantic(h)) {
   /* remove the page from active list */
   list_del(&page->lru);
   update_and_free_page(h, page);
@@ -693,7 +693,7 @@ static struct page *alloc_fresh_huge_page_node(struct hstate *h, int nid)
 {
  struct page *page;
 
- if (h->order >= MAX_ORDER)
+ if (hstate_is_gigantic(h))
   return NULL;
 
  page = alloc_pages_exact_node(nid,
@@ -849,7 +849,7 @@ static struct page *alloc_buddy_huge_page(struct hstate *h, int nid)
  struct page *page;
  unsigned int r_nid;
 
- if (h->order >= MAX_ORDER)
+ if (hstate_is_gigantic(h))
   return NULL;
 
  /*
@@ -1045,7 +1045,7 @@ static void return_unused_surplus_pages(struct hstate *h,
  h->resv_huge_pages -= unused_resv_pages;
 
  /* Cannot return gigantic pages currently */
- if (h->order >= MAX_ORDER)
+ if (hstate_is_gigantic(h))
   return;
 
  nr_pages = min(unused_resv_pages, h->surplus_huge_pages);
@@ -1241,7 +1241,7 @@ static void __init gather_bootmem_prealloc(void)
    * fix confusing memory reports from free(1) and another
    * side-effects, like CommitLimit going negative.
    */
-  if (h->order > (MAX_ORDER - 1))
+  if (hstate_is_gigantic(h))
    totalram_pages += 1 << h->order;
  }
 }
@@ -1251,7 +1251,7 @@ static void __init hugetlb_hstate_alloc_pages(struct hstate *h)
  unsigned long i;
 
  for (i = 0; i < h->max_huge_pages; ++i) {
-  if (h->order >= MAX_ORDER) {
+  if (hstate_is_gigantic(h)) {
    if (!alloc_bootmem_huge_page(h))
     break;
   } else if (!alloc_fresh_huge_page(h,
@@ -1267,7 +1267,7 @@ static void __init hugetlb_init_hstates(void)
 
  for_each_hstate(h) {
   /* oversize hugepages were init'ed in early boot */
-  if (h->order < MAX_ORDER)
+  if (!hstate_is_gigantic(h))
    hugetlb_hstate_alloc_pages(h);
  }
 }
@@ -1301,7 +1301,7 @@ static void try_to_free_low(struct hstate *h, unsigned long count,
 {
  int i;
 
- if (h->order >= MAX_ORDER)
+ if (hstate_is_gigantic(h))
   return;
 
  for_each_node_mask(i, *nodes_allowed) {
@@ -1364,7 +1364,7 @@ static unsigned long set_max_huge_pages(struct hstate *h, unsigned long count,
 {
  unsigned long min_count, ret;
 
- if (h->order >= MAX_ORDER)
+ if (hstate_is_gigantic(h))
   return h->max_huge_pages;
 
  /*
@@ -1490,7 +1490,7 @@ static ssize_t nr_hugepages_store_common(bool obey_mempolicy,
   goto out;
 
  h = kobj_to_hstate(kobj, &nid);
- if (h->order >= MAX_ORDER) {
+ if (hstate_is_gigantic(h)) {
   err = -EINVAL;
   goto out;
  }
@@ -1573,7 +1573,7 @@ static ssize_t nr_overcommit_hugepages_store(struct kobject *kobj,
  unsigned long input;
  struct hstate *h = kobj_to_hstate(kobj, NULL);
 
- if (h->order >= MAX_ORDER)
+ if (hstate_is_gigantic(h))
   return -EINVAL;
 
  err = strict_strtoul(buf, 10, &input);
@@ -1984,7 +1984,7 @@ static int hugetlb_sysctl_handler_common(bool obey_mempolicy,
 
  tmp = h->max_huge_pages;
 
- if (write && h->order >= MAX_ORDER)
+ if (write && hstate_is_gigantic(h))
   return -EINVAL;
 
  table->data = &tmp;
@@ -2049,7 +2049,7 @@ int hugetlb_overcommit_handler(struct ctl_table *table, int write,
 
  tmp = h->nr_overcommit_huge_pages;
 
- if (write && h->order >= MAX_ORDER)
+ if (write && hstate_is_gigantic(h))
   return -EINVAL;
 
  table->data = &tmp;
-- 
1.7.1