From 1ff89d8bb7948c57dab90d67229f2bfe5ef04723 Mon Sep 17 00:00:00 2001
From: Jerome Marchand <jmarchan@redhat.com>
Date: Fri, 1 Aug 2014 13:29:43 -0400
Subject: [mm] memcg, vmscan: Fix forced scan of anonymous pages

Message-id: <1406899783-11404-1-git-send-email-jmarchan@redhat.com>
Patchwork-id: 86933
O-Subject: [RHEL7 PATCH] memcg, vmscan: Fix forced scan of anonymous pages
Bugzilla: 1125240
RH-Acked-by: Rafael Aquini <aquini@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Johannes Weiner <jweiner@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>

Bugzilla:
https://bugzilla.redhat.com/show_bug.cgi?id=1125240

Upstream status: In -mm tree.

Brew build:
https://brewweb.devel.redhat.com/taskinfo?taskID=7774568

Backport of:
    From: "Jerome Marchand" <jmarchan@redhat.com>
    Subject: memcg, vmscan: Fix forced scan of anonymous pages

    When memory cgoups are enabled, the code that decides to force to scan
    anonymous pages in get_scan_count() compares global values (free,
    high_watermark) to a value that is restricted to a memory cgroup (file).
    It make the code over-eager to force anon scan.

    For instance, it will force anon scan when scanning a memcg that is mainly
    populated by anonymous page, even when there is plenty of file pages to
    get rid of in others memcgs, even when swappiness == 0.  It breaks user's
    expectation about swappiness and hurts performance.

    This patch makes sure that forced anon scan only happens when there not
    enough file pages for the all zone, not just in one random memcg.

    Signed-off-by: Jerome Marchand <jmarchan@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.cz>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Reviewed-by: Rik van Riel <riel@redhat.com>
    Cc: Mel Gorman <mgorman@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/mm/vmscan.c b/mm/vmscan.c
index 0f28e85..ef1c9bc 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -1873,8 +1873,11 @@ static void get_scan_count(struct lruvec *lruvec, struct scan_control *sc,
   */
  if (global_reclaim(sc)) {
   unsigned long free = zone_page_state(zone, NR_FREE_PAGES);
+  unsigned long zonefile =
+   zone_page_state(zone, NR_LRU_BASE + LRU_ACTIVE_FILE) +
+   zone_page_state(zone, NR_LRU_BASE + LRU_INACTIVE_FILE);
 
-  if (unlikely(file + free <= high_wmark_pages(zone))) {
+  if (unlikely(zonefile + free <= high_wmark_pages(zone))) {
    scan_balance = SCAN_ANON;
    goto out;
   }
-- 
1.7.1