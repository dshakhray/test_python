From 5d04c5e6f6f7f9ad6058126bab83e9fd79a1aae6 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 26 Jun 2014 14:24:55 -0400
Subject: [pci] Avoid unnecessary CPU switch when calling driver .probe() method

Message-id: <20140626142455.18681.65844.stgit@gir.stowe>
Patchwork-id: 84966
O-Subject: [RHEL7.1 PATCH 3/7] PCI: Avoid unnecessary CPU switch when calling driver .probe() method
Bugzilla: 1110890
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110890
Upstream Status: 12c3156f10c5d8c5f1fb3f0bbdb8c1ddb1d1f65c

commit 12c3156f10c5d8c5f1fb3f0bbdb8c1ddb1d1f65c
Author: Alexander Duyck <alexander.h.duyck@intel.com>
Date:   Mon Nov 18 10:59:59 2013 -0700

    PCI: Avoid unnecessary CPU switch when calling driver .probe() method

    If we are already on a CPU local to the device, call the driver .probe()
    method directly without using work_on_cpu().

    This is a workaround for a lockdep warning in the following scenario:

      pci_call_probe
        work_on_cpu(cpu, local_pci_probe, ...)
          driver .probe
            pci_enable_sriov
              ...
                pci_bus_add_device
                  ...
                    pci_call_probe
                      work_on_cpu(cpu, local_pci_probe, ...)

    It would be better to fix PCI so we don't call VF driver .probe() methods
    from inside a PF driver .probe() method, but that's a bigger project.

    [bhelgaas: open bugzilla, rework comments & changelog]
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=65071
    Link: http://lkml.kernel.org/r/CAE9FiQXYQEAZ=0sG6+2OdffBqfLS9MpoN1xviRR9aDbx
    Link: http://lkml.kernel.org/r/20130624195942.40795.27292.stgit@ahduyck-cp1.
    Tested-by: Yinghai Lu <yinghai@kernel.org>
    Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Acked-by: Yinghai Lu <yinghai@kernel.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/pci-driver.c b/drivers/pci/pci-driver.c
index f994943..a28e040 100644
--- a/drivers/pci/pci-driver.c
+++ b/drivers/pci/pci-driver.c
@@ -324,12 +324,27 @@ static int pci_call_probe(struct pci_driver *drv, struct pci_dev *dev,
  int error, node;
  struct drv_dev_and_id ddi = { drv, dev, id };
 
- /* Execute driver initialization on node where the device's
-    bus is attached to.  This way the driver likely allocates
-    its local memory on the right node without any need to
-    change it. */
+ /*
+  * Execute driver initialization on node where the device is
+  * attached.  This way the driver likely allocates its local memory
+  * on the right node.
+  */
  node = dev_to_node(&dev->dev);
- if (node >= 0) {
+
+ /*
+  * On NUMA systems, we are likely to call a PF probe function using
+  * work_on_cpu().  If that probe calls pci_enable_sriov() (which
+  * adds the VF devices via pci_bus_add_device()), we may re-enter
+  * this function to call the VF probe function.  Calling
+  * work_on_cpu() again will cause a lockdep warning.  Since VFs are
+  * always on the same node as the PF, we can work around this by
+  * avoiding work_on_cpu() when we're already on the correct node.
+  *
+  * Preemption is enabled, so it's theoretically unsafe to use
+  * numa_node_id(), but even if we run the probe function on the
+  * wrong node, it should be functionally correct.
+  */
+ if (node >= 0 && node != numa_node_id()) {
   int cpu;
 
   get_online_cpus();
@@ -341,6 +356,7 @@ static int pci_call_probe(struct pci_driver *drv, struct pci_dev *dev,
   put_online_cpus();
  } else
   error = local_pci_probe(&ddi);
+
  return error;
 }
 
-- 
1.7.1