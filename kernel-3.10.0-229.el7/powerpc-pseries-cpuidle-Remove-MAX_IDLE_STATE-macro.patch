From 23dd50f215495c7af18b3db0f29f02a7cd8a1136 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:08:28 -0400
Subject: [powerpc] pseries/cpuidle: Remove MAX_IDLE_STATE macro

Message-id: <1410545655-205645-280-git-send-email-dzickus@redhat.com>
Patchwork-id: 94322
O-Subject: [RHEL7 PATCH 279/626] powerpc/pseries/cpuidle: Remove MAX_IDLE_STATE macro.
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit bf7f61f2dfc5c5764e862bee317a5a227091d0d2
Author: Deepthi Dharwar <deepthi@linux.vnet.ibm.com>
Date:   Tue Jan 14 16:26:28 2014 +0530

    powerpc/pseries/cpuidle: Remove MAX_IDLE_STATE macro.

    This patch removes the usage of MAX_IDLE_STATE macro
    and dead code around it. The number of states
    are determined at run time based on the cpuidle
    state table selected on a given platform

    Signed-off-by: Deepthi Dharwar <deepthi@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpuidle/cpuidle-pseries.c b/drivers/cpuidle/cpuidle-pseries.c
index 43104fc..485fc76 100644
--- a/drivers/cpuidle/cpuidle-pseries.c
+++ b/drivers/cpuidle/cpuidle-pseries.c
@@ -25,9 +25,7 @@ struct cpuidle_driver pseries_idle_driver = {
  .owner            = THIS_MODULE,
 };
 
-#define MAX_IDLE_STATE_COUNT 2
-
-static int max_idle_state = MAX_IDLE_STATE_COUNT - 1;
+static int max_idle_state;
 static struct cpuidle_state *cpuidle_state_table;
 
 static inline void idle_loop_prolog(unsigned long *in_purr)
@@ -137,7 +135,7 @@ static int shared_cede_loop(struct cpuidle_device *dev,
 /*
  * States for dedicated partition case.
  */
-static struct cpuidle_state dedicated_states[MAX_IDLE_STATE_COUNT] = {
+static struct cpuidle_state dedicated_states[] = {
  { /* Snooze */
   .name = "snooze",
   .desc = "snooze",
@@ -157,7 +155,7 @@ static struct cpuidle_state dedicated_states[MAX_IDLE_STATE_COUNT] = {
 /*
  * States for shared partition case.
  */
-static struct cpuidle_state shared_states[MAX_IDLE_STATE_COUNT] = {
+static struct cpuidle_state shared_states[] = {
  { /* Shared Cede */
   .name = "Shared Cede",
   .desc = "Shared Cede",
@@ -228,12 +226,8 @@ static int pseries_cpuidle_driver_init(void)
 
  drv->state_count = 0;
 
- for (idle_state = 0; idle_state < MAX_IDLE_STATE_COUNT; ++idle_state) {
-
-  if (idle_state > max_idle_state)
-   break;
-
-  /* is the state not enabled? */
+ for (idle_state = 0; idle_state < max_idle_state; ++idle_state) {
+  /* Is the state not enabled? */
   if (cpuidle_state_table[idle_state].enter == NULL)
    continue;
 
@@ -256,16 +250,14 @@ static int pseries_idle_probe(void)
  if (cpuidle_disable != IDLE_NO_OVERRIDE)
   return -ENODEV;
 
- if (max_idle_state == 0) {
-  printk(KERN_DEBUG "pseries processor idle disabled.\n");
-  return -EPERM;
- }
-
  if (firmware_has_feature(FW_FEATURE_SPLPAR)) {
-  if (lppaca_shared_proc(get_lppaca()))
+  if (lppaca_shared_proc(get_lppaca())) {
    cpuidle_state_table = shared_states;
-  else
+   max_idle_state = ARRAY_SIZE(shared_states);
+  } else {
    cpuidle_state_table = dedicated_states;
+   max_idle_state = ARRAY_SIZE(dedicated_states);
+  }
  } else
   return -ENODEV;
 
-- 
1.7.1