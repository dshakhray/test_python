From 75aeee54c2dfdebde26328ea8ef15566d75e33b5 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:37:44 -0400
Subject: [virt] kvm/nvmx: Keep arch.pat in sync on L1-L2 switches

Message-id: <1406040016-3289-70-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86148
O-Subject: [RHEL7 PATCH v2 069/221] nVMX: Keep arch.pat in sync on L1-L2 switches
Bugzilla: 1048496 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jan Kiszka <jan.kiszka@siemens.com>

When asking vmx to load the PAT MSR for us while switching from L1 to L2
or vice versa, we have to update arch.pat as well as it may later be
used again to load or read out the MSR content.

Reviewed-by: Gleb Natapov <gleb@redhat.com>
Tested-by: Arthur Chunqi Li <yzt356@gmail.com>
Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 44811c02ed94abbf0b0978c8bcce4f2603b11651)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index e93f55d..f5fce57 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -7704,9 +7704,10 @@ static void prepare_vmcs02(struct kvm_vcpu *vcpu, struct vmcs12 *vmcs12)
    ~VM_ENTRY_IA32E_MODE) |
   (vmcs_config.vmentry_ctrl & ~VM_ENTRY_IA32E_MODE));
 
- if (vmcs12->vm_entry_controls & VM_ENTRY_LOAD_IA32_PAT)
+ if (vmcs12->vm_entry_controls & VM_ENTRY_LOAD_IA32_PAT) {
   vmcs_write64(GUEST_IA32_PAT, vmcs12->guest_ia32_pat);
- else if (vmcs_config.vmentry_ctrl & VM_ENTRY_LOAD_IA32_PAT)
+  vcpu->arch.pat = vmcs12->guest_ia32_pat;
+ } else if (vmcs_config.vmentry_ctrl & VM_ENTRY_LOAD_IA32_PAT)
   vmcs_write64(GUEST_IA32_PAT, vmx->vcpu.arch.pat);
 
 
@@ -8227,8 +8228,10 @@ static void load_vmcs12_host_state(struct kvm_vcpu *vcpu,
  vmcs_writel(GUEST_IDTR_BASE, vmcs12->host_idtr_base);
  vmcs_writel(GUEST_GDTR_BASE, vmcs12->host_gdtr_base);
 
- if (vmcs12->vm_exit_controls & VM_EXIT_LOAD_IA32_PAT)
+ if (vmcs12->vm_exit_controls & VM_EXIT_LOAD_IA32_PAT) {
   vmcs_write64(GUEST_IA32_PAT, vmcs12->host_ia32_pat);
+  vcpu->arch.pat = vmcs12->host_ia32_pat;
+ }
  if (vmcs12->vm_exit_controls & VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL)
   vmcs_write64(GUEST_IA32_PERF_GLOBAL_CTRL,
    vmcs12->host_ia32_perf_global_ctrl);
-- 
1.7.1