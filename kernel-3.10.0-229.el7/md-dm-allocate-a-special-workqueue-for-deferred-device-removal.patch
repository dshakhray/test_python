From 94b389b2972c9919abb4a07df4a082cfa83bebd8 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:16 -0400
Subject: [md] dm: allocate a special workqueue for deferred device removal

Message-id: <1405543364-20901-13-git-send-email-snitzer@redhat.com>
Patchwork-id: 85900
O-Subject: [RHEL7.1 PATCH 12/40] dm: allocate a special workqueue for deferred device removal
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1117872

Upstream commit acfe0ad74d2e1bfc81d1d7bf5e15b043985d3650
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Sat Jun 14 13:44:31 2014 -0400

    dm: allocate a special workqueue for deferred device removal

    The commit 2c140a246dc ("dm: allow remove to be deferred") introduced a
    deferred removal feature for the device mapper.  When this feature is
    used (by passing a flag DM_DEFERRED_REMOVE to DM_DEV_REMOVE_CMD ioctl)
    and the user tries to remove a device that is currently in use, the
    device will be removed automatically in the future when the last user
    closes it.

    Device mapper used the system workqueue to perform deferred removals.
    However, some targets (dm-raid1, dm-mpath, dm-stripe) flush work items
    scheduled for the system workqueue from their destructor.  If the
    destructor itself is called from the system workqueue during deferred
    removal, it introduces a possible deadlock - the workqueue tries to flush
    itself.

    Fix this possible deadlock by introducing a new workqueue for deferred
    removals.  We allocate just one workqueue for all dm targets.  The
    ability of dm targets to process IOs isn't dependent on deferred removal
    of unused targets, so a deadlock due to shared workqueue isn't possible.

    Also, cleanup local_init() to eliminate potential for returning success
    on failure.

    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org # 3.13+

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index 886b001..b468f78 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -54,6 +54,8 @@ static void do_deferred_remove(struct work_struct *w);
 
 static DECLARE_WORK(deferred_remove_work, do_deferred_remove);
 
+static struct workqueue_struct *deferred_remove_workqueue;
+
 /*
  * For bio-based dm.
  * One of these is allocated per bio.
@@ -276,16 +278,24 @@ static int __init local_init(void)
  if (r)
   goto out_free_rq_tio_cache;
 
+ deferred_remove_workqueue = alloc_workqueue("kdmremove", WQ_UNBOUND, 1);
+ if (!deferred_remove_workqueue) {
+  r = -ENOMEM;
+  goto out_uevent_exit;
+ }
+
  _major = major;
  r = register_blkdev(_major, _name);
  if (r < 0)
-  goto out_uevent_exit;
+  goto out_free_workqueue;
 
  if (!_major)
   _major = r;
 
  return 0;
 
+out_free_workqueue:
+ destroy_workqueue(deferred_remove_workqueue);
 out_uevent_exit:
  dm_uevent_exit();
 out_free_rq_tio_cache:
@@ -299,6 +309,7 @@ out_free_io_cache:
 static void local_exit(void)
 {
  flush_scheduled_work();
+ destroy_workqueue(deferred_remove_workqueue);
 
  kmem_cache_destroy(_rq_tio_cache);
  kmem_cache_destroy(_io_cache);
@@ -407,7 +418,7 @@ static void dm_blk_close(struct gendisk *disk, fmode_t mode)
 
  if (atomic_dec_and_test(&md->open_count) &&
      (test_bit(DMF_DEFERRED_REMOVE, &md->flags)))
-  schedule_work(&deferred_remove_work);
+  queue_work(deferred_remove_workqueue, &deferred_remove_work);
 
  dm_put(md);
 
-- 
1.7.1