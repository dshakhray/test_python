From bf715238a4d8567d0dd9355d34889d4d14ee5c19 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Mon, 9 Jun 2014 11:59:14 -0400
Subject: [kernel] rcu: delete __cpuinit usage from all rcu files

Message-id: <1402315159-3749-2-git-send-email-prarit@redhat.com>
Patchwork-id: 83098
O-Subject: [RHEL7.1 PATCH BZ 1105893 07/12] rcu: delete __cpuinit usage from all rcu files
Bugzilla: 1105893
RH-Acked-by: Rafael Aquini <aquini@redhat.com>
RH-Acked-by: Lenny Szubowicz <lszubowi@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1105893

commit 49fb4c6290c70c418a5c25eee996d6b55ea132d6
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Jun 19 14:52:21 2013 -0400

    rcu: delete __cpuinit usage from all rcu files

    The __cpuinit type of throwaway sections might have made sense
    some time ago when RAM was more constrained, but now the savings
    do not offset the cost and complications.  For example, the fix in
    commit 5e427ec2d0 ("x86: Fix bit corruption at CPU resume time")
    is a good example of the nasty type of bugs that can be created
    with improper use of the various __init prefixes.

    After a discussion on LKML[1] it was decided that cpuinit should go
    the way of devinit and be phased out.  Once all the users are gone,
    we can then finally remove the macros themselves from linux/init.h.

    This removes all the drivers/rcu uses of the __cpuinit macros
    from all C files.

    [1] https://lkml.org/lkml/2013/5/20/589

    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: Josh Triplett <josh@freedesktop.org>
    Cc: Dipankar Sarma <dipankar@in.ibm.com>
    Reviewed-by: Josh Triplett <josh@joshtriplett.org>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

Cc: Dave Jones <davej@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/rcutorture.c b/kernel/rcutorture.c
index e1f3a8c..ceaa5d5 100644
--- a/kernel/rcutorture.c
+++ b/kernel/rcutorture.c
@@ -1514,7 +1514,7 @@ rcu_torture_shutdown(void *arg)
  * Execute random CPU-hotplug operations at the interval specified
  * by the onoff_interval.
  */
-static int __cpuinit
+static int
 rcu_torture_onoff(void *arg)
 {
  int cpu;
@@ -1596,7 +1596,7 @@ rcu_torture_onoff(void *arg)
  return 0;
 }
 
-static int __cpuinit
+static int
 rcu_torture_onoff_init(void)
 {
  int ret;
@@ -1639,7 +1639,7 @@ static void rcu_torture_onoff_cleanup(void)
  * CPU-stall kthread.  It waits as specified by stall_cpu_holdoff, then
  * induces a CPU stall for the time specified by stall_cpu.
  */
-static int __cpuinit rcu_torture_stall(void *args)
+static int rcu_torture_stall(void *args)
 {
  unsigned long stop_at;
 
diff --git a/kernel/rcutree.c b/kernel/rcutree.c
index 3538001..08c426f 100644
--- a/kernel/rcutree.c
+++ b/kernel/rcutree.c
@@ -3004,7 +3004,7 @@ rcu_boot_init_percpu_data(int cpu, struct rcu_state *rsp)
  * can accept some slop in the rsp->completed access due to the fact
  * that this CPU cannot possibly have any RCU callbacks in flight yet.
  */
-static void __cpuinit
+static void
 rcu_init_percpu_data(int cpu, struct rcu_state *rsp, int preemptible)
 {
  unsigned long flags;
@@ -3056,7 +3056,7 @@ rcu_init_percpu_data(int cpu, struct rcu_state *rsp, int preemptible)
  mutex_unlock(&rsp->onoff_mutex);
 }
 
-static void __cpuinit rcu_prepare_cpu(int cpu)
+static void rcu_prepare_cpu(int cpu)
 {
  struct rcu_state *rsp;
 
@@ -3068,7 +3068,7 @@ static void __cpuinit rcu_prepare_cpu(int cpu)
 /*
  * Handle CPU online/offline notification events.
  */
-static int __cpuinit rcu_cpu_notify(struct notifier_block *self,
+static int rcu_cpu_notify(struct notifier_block *self,
         unsigned long action, void *hcpu)
 {
  long cpu = (long)hcpu;
diff --git a/kernel/rcutree.h b/kernel/rcutree.h
index 4df5034..7da8221 100644
--- a/kernel/rcutree.h
+++ b/kernel/rcutree.h
@@ -516,10 +516,10 @@ static void invoke_rcu_callbacks_kthread(void);
 static bool rcu_is_callbacks_kthread(void);
 #ifdef CONFIG_RCU_BOOST
 static void rcu_preempt_do_callbacks(void);
-static int __cpuinit rcu_spawn_one_boost_kthread(struct rcu_state *rsp,
+static int rcu_spawn_one_boost_kthread(struct rcu_state *rsp,
        struct rcu_node *rnp);
 #endif /* #ifdef CONFIG_RCU_BOOST */
-static void __cpuinit rcu_prepare_kthreads(int cpu);
+static void rcu_prepare_kthreads(int cpu);
 static void rcu_cleanup_after_idle(int cpu);
 static void rcu_prepare_for_idle(int cpu);
 static void rcu_idle_count_callbacks_posted(void);
diff --git a/kernel/rcutree_plugin.h b/kernel/rcutree_plugin.h
index 3db5a37..30ac20a 100644
--- a/kernel/rcutree_plugin.h
+++ b/kernel/rcutree_plugin.h
@@ -1327,7 +1327,7 @@ static void rcu_preempt_boost_start_gp(struct rcu_node *rnp)
  * already exist.  We only create this kthread for preemptible RCU.
  * Returns zero if all is well, a negated errno otherwise.
  */
-static int __cpuinit rcu_spawn_one_boost_kthread(struct rcu_state *rsp,
+static int rcu_spawn_one_boost_kthread(struct rcu_state *rsp,
        struct rcu_node *rnp)
 {
  int rnp_index = rnp - &rsp->node[0];
@@ -1482,7 +1482,7 @@ static int __init rcu_spawn_kthreads(void)
 }
 early_initcall(rcu_spawn_kthreads);
 
-static void __cpuinit rcu_prepare_kthreads(int cpu)
+static void rcu_prepare_kthreads(int cpu)
 {
  struct rcu_data *rdp = per_cpu_ptr(rcu_state->rda, cpu);
  struct rcu_node *rnp = rdp->mynode;
@@ -1524,7 +1524,7 @@ static int __init rcu_scheduler_really_started(void)
 }
 early_initcall(rcu_scheduler_really_started);
 
-static void __cpuinit rcu_prepare_kthreads(int cpu)
+static void rcu_prepare_kthreads(int cpu)
 {
 }
 
-- 
1.7.1