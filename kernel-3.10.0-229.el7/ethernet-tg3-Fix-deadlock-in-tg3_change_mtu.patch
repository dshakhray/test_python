From be4218edfa998b66ff44b1d319ce09611c79385e Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 12:25:58 -0400
Subject: [ethernet] tg3: Fix deadlock in tg3_change_mtu()

Message-id: <1410179173-14304-5-git-send-email-ivecera@redhat.com>
Patchwork-id: 91662
O-Subject: [RHEL7.1 PATCH 04/19] tg3: Fix deadlock in tg3_change_mtu()
Bugzilla: 1088637
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: #1088637

Upstream commit(s):
commit c6993dfd7db9b0c6b7ca7503a56fda9236a4710f
Author: Nithin Sujir <nsujir@broadcom.com>
Date:   Thu Feb 6 14:13:05 2014 -0800

    tg3: Fix deadlock in tg3_change_mtu()

    Quoting David Vrabel -
    "5780 cards cannot have jumbo frames and TSO enabled together.  When
    jumbo frames are enabled by setting the MTU, the TSO feature must be
    cleared.  This is done indirectly by calling netdev_update_features()
    which will call tg3_fix_features() to actually clear the flags.

    netdev_update_features() will also trigger a new netlink message for the
    feature change event which will result in a call to tg3_get_stats64()
    which deadlocks on the tg3 lock."

    tg3_set_mtu() does not need to be under the tg3 lock since converting
    the flags to use set_bit(). Move it out to after tg3_netif_stop().

    Reported-by: David Vrabel <david.vrabel@citrix.com>
    Tested-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: Nithin Nayak Sujir <nsujir@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index a422b7e..9951c91 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -14157,12 +14157,12 @@ static int tg3_change_mtu(struct net_device *dev, int new_mtu)
 
  tg3_netif_stop(tp);
 
+ tg3_set_mtu(dev, tp, new_mtu);
+
  tg3_full_lock(tp, 1);
 
  tg3_halt(tp, RESET_KIND_SHUTDOWN, 1);
 
- tg3_set_mtu(dev, tp, new_mtu);
-
  /* Reset PHY, otherwise the read DMA engine will be in a mode that
   * breaks all requests to 256 bytes.
   */
-- 
1.7.1