From 018bbc4d8efc78472963bc2654b322b24d2b99c8 Mon Sep 17 00:00:00 2001
From: Ilya Dryomov <ilya.dryomov@inktank.com>
Date: Tue, 18 Nov 2014 15:49:28 -0500
Subject: [block] rbd: access snapshot context and mapping size safely
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1416325805-26490-14-git-send-email-idryomov@redhat.com>
Patchwork-id: 100205
O-Subject: [RHEL7.1 PATCH 13/50] rbd: access snapshot context and mapping size safely
Bugzilla: 1165232
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Sage Weil <sweil@redhat.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>

From: Josh Durgin <josh.durgin@inktank.com>

These fields may both change while the image is mapped if a snapshot
is created or deleted or the image is resized.  They are guarded by
rbd_dev->header_rwsem, so hold that while reading them, and store a
local copy to refer to outside of the critical section. The local copy
will stay consistent since the snapshot context is reference counted,
and the mapping size is just a u64. This prevents torn loads from
giving us inconsistent values.

Move reading header.snapc into the caller of rbd_img_request_create()
so that we only need to take the semaphore once. The read-only caller,
rbd_parent_request_create() can just pass NULL for snapc, since the
snapshot context is only relevant for writes.

Signed-off-by: Josh Durgin <josh.durgin@inktank.com>
(cherry picked from commit 4e752f0ab0e8114f4edd7574081dc625d679dd15)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/rbd.c b/drivers/block/rbd.c
index 569bed0..3b3d36b 100644
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@ -2101,7 +2101,8 @@ static bool rbd_dev_parent_get(struct rbd_device *rbd_dev)
 static struct rbd_img_request *rbd_img_request_create(
      struct rbd_device *rbd_dev,
      u64 offset, u64 length,
-     bool write_request)
+     bool write_request,
+     struct ceph_snap_context *snapc)
 {
  struct rbd_img_request *img_request;
 
@@ -2109,12 +2110,6 @@ static struct rbd_img_request *rbd_img_request_create(
  if (!img_request)
   return NULL;
 
- if (write_request) {
-  down_read(&rbd_dev->header_rwsem);
-  ceph_get_snap_context(rbd_dev->header.snapc);
-  up_read(&rbd_dev->header_rwsem);
- }
-
  img_request->rq = NULL;
  img_request->rbd_dev = rbd_dev;
  img_request->offset = offset;
@@ -2122,7 +2117,7 @@ static struct rbd_img_request *rbd_img_request_create(
  img_request->flags = 0;
  if (write_request) {
   img_request_write_set(img_request);
-  img_request->snapc = rbd_dev->header.snapc;
+  img_request->snapc = snapc;
  } else {
   img_request->snap_id = rbd_dev->spec->snap_id;
  }
@@ -2178,8 +2173,8 @@ static struct rbd_img_request *rbd_parent_request_create(
  rbd_assert(obj_request->img_request);
  rbd_dev = obj_request->img_request->rbd_dev;
 
- parent_request = rbd_img_request_create(rbd_dev->parent,
-      img_offset, length, false);
+ parent_request = rbd_img_request_create(rbd_dev->parent, img_offset,
+      length, false, NULL);
  if (!parent_request)
   return NULL;
 
@@ -3226,9 +3221,11 @@ out:
 static void rbd_handle_request(struct rbd_device *rbd_dev, struct request *rq)
 {
  struct rbd_img_request *img_request;
+ struct ceph_snap_context *snapc = NULL;
  u64 offset = (u64)blk_rq_pos(rq) << SECTOR_SHIFT;
  u64 length = blk_rq_bytes(rq);
  bool wr = rq_data_dir(rq) == WRITE;
+ u64 mapping_size;
  int result;
 
  /* Ignore/skip any zero-length requests */
@@ -3269,14 +3266,23 @@ static void rbd_handle_request(struct rbd_device *rbd_dev, struct request *rq)
   goto err_rq; /* Shouldn't happen */
  }
 
- if (offset + length > rbd_dev->mapping.size) {
+ down_read(&rbd_dev->header_rwsem);
+ mapping_size = rbd_dev->mapping.size;
+ if (wr) {
+  snapc = rbd_dev->header.snapc;
+  ceph_get_snap_context(snapc);
+ }
+ up_read(&rbd_dev->header_rwsem);
+
+ if (offset + length > mapping_size) {
   rbd_warn(rbd_dev, "beyond EOD (%llu~%llu > %llu)", offset,
-    length, rbd_dev->mapping.size);
+    length, mapping_size);
   result = -EIO;
   goto err_rq;
  }
 
- img_request = rbd_img_request_create(rbd_dev, offset, length, wr);
+ img_request = rbd_img_request_create(rbd_dev, offset, length, wr,
+          snapc);
  if (!img_request) {
   result = -ENOMEM;
   goto err_rq;
@@ -3299,6 +3305,8 @@ err_rq:
  if (result)
   rbd_warn(rbd_dev, "%s %llx at %llx result %d",
     wr ? "write" : "read", length, offset, result);
+ if (snapc)
+  ceph_put_snap_context(snapc);
  blk_end_request_all(rq, result);
 }
 
-- 
1.7.1