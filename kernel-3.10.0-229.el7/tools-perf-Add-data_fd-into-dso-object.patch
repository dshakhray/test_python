From 17d6ee77568bf6b715f333bc08d48fa2b8e9f000 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:09:00 -0400
Subject: [tools] perf: Add data_fd into dso object

Message-id: <1410181752-25631-296-git-send-email-jolsa@redhat.com>
Patchwork-id: 91926
O-Subject: [PATCH RHEL7.1 BZ1134356 295/307] perf tools: Add data_fd into dso object
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 53fa8eaa093ad87eb59379de059e76d735a5de45
Author: Jiri Olsa <jolsa@kernel.org>
Date: Mon Apr 28 16:43:43 2014 +0200

description
===========
Adding data_fd into dso object so we could handle caching
of opened dso file data descriptors coming int next patches.

Adding dso__data_close interface to keep the data_fd updated
when the descriptor is closed.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/dso.c b/tools/perf/util/dso.c
index 1c3cdaf..5acb4b8 100644
--- a/tools/perf/util/dso.c
+++ b/tools/perf/util/dso.c
@@ -159,6 +159,14 @@ static int open_dso(struct dso *dso, struct machine *machine)
  return fd;
 }
 
+void dso__data_close(struct dso *dso)
+{
+ if (dso->data.fd >= 0) {
+  close(dso->data.fd);
+  dso->data.fd = -1;
+ }
+}
+
 int dso__data_fd(struct dso *dso, struct machine *machine)
 {
  enum dso_binary_type binary_type_data[] = {
@@ -168,8 +176,13 @@ int dso__data_fd(struct dso *dso, struct machine *machine)
  };
  int i = 0;
 
- if (dso->binary_type != DSO_BINARY_TYPE__NOT_FOUND)
-  return open_dso(dso, machine);
+ if (dso->data.fd >= 0)
+  return dso->data.fd;
+
+ if (dso->binary_type != DSO_BINARY_TYPE__NOT_FOUND) {
+  dso->data.fd = open_dso(dso, machine);
+  return dso->data.fd;
+ }
 
  do {
   int fd;
@@ -178,7 +191,7 @@ int dso__data_fd(struct dso *dso, struct machine *machine)
 
   fd = open_dso(dso, machine);
   if (fd >= 0)
-   return fd;
+   return dso->data.fd = fd;
 
  } while (dso->binary_type != DSO_BINARY_TYPE__NOT_FOUND);
 
@@ -301,7 +314,7 @@ dso_cache__read(struct dso *dso, struct machine *machine,
  if (ret <= 0)
   free(cache);
 
- close(fd);
+ dso__data_close(dso);
  return ret;
 }
 
@@ -474,6 +487,7 @@ struct dso *dso__new(const char *name)
   for (i = 0; i < MAP__NR_TYPES; ++i)
    dso->symbols[i] = dso->symbol_names[i] = RB_ROOT;
   dso->data.cache = RB_ROOT;
+  dso->data.fd = -1;
   dso->symtab_type = DSO_BINARY_TYPE__NOT_FOUND;
   dso->binary_type = DSO_BINARY_TYPE__NOT_FOUND;
   dso->loaded = 0;
@@ -506,6 +520,7 @@ void dso__delete(struct dso *dso)
   dso->long_name_allocated = false;
  }
 
+ dso__data_close(dso);
  dso_cache__free(&dso->data.cache);
  dso__free_a2l(dso);
  zfree(&dso->symsrc_filename);
diff --git a/tools/perf/util/dso.h b/tools/perf/util/dso.h
index 7637fdd..e48dcf5 100644
--- a/tools/perf/util/dso.h
+++ b/tools/perf/util/dso.h
@@ -102,6 +102,7 @@ struct dso {
  /* dso data file */
  struct {
   struct rb_root  cache;
+  int   fd;
  } data;
 
  char   name[0];
@@ -147,6 +148,8 @@ int dso__read_binary_type_filename(const struct dso *dso, enum dso_binary_type t
        char *root_dir, char *filename, size_t size);
 
 int dso__data_fd(struct dso *dso, struct machine *machine);
+void dso__data_close(struct dso *dso);
+
 ssize_t dso__data_read_offset(struct dso *dso, struct machine *machine,
          u64 offset, u8 *data, ssize_t size);
 ssize_t dso__data_read_addr(struct dso *dso, struct map *map,
diff --git a/tools/perf/util/unwind-libunwind.c b/tools/perf/util/unwind-libunwind.c
index bd5768d..4f8dd9e 100644
--- a/tools/perf/util/unwind-libunwind.c
+++ b/tools/perf/util/unwind-libunwind.c
@@ -250,7 +250,7 @@ static int read_unwind_spec_eh_frame(struct dso *dso, struct machine *machine,
 
  /* Check the .eh_frame section for unwinding info */
  offset = elf_section_offset(fd, ".eh_frame_hdr");
- close(fd);
+ dso__data_close(dso);
 
  if (offset)
   ret = unwind_spec_ehframe(dso, machine, offset,
@@ -271,7 +271,7 @@ static int read_unwind_spec_debug_frame(struct dso *dso,
 
  /* Check the .debug_frame section for unwinding info */
  *offset = elf_section_offset(fd, ".debug_frame");
- close(fd);
+ dso__data_close(dso);
 
  if (*offset)
   return 0;
-- 
1.7.1