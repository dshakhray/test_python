From ba0846638ca8e9f68eff9606125e1336fe7080dc Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:21 -0400
Subject: [cpufreq] Refactor cpufreq_set_policy()

Message-id: <1409235879-1283-108-git-send-email-prarit@redhat.com>
Patchwork-id: 89450
O-Subject: [RHEL7.1 PATCH BZ 1134639 107/185] cpufreq: Refactor cpufreq_set_policy()
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit d9a789c7a07e96eda7515e43932ee608dcece34d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Feb 17 22:56:35 2014 +0100

    cpufreq: Refactor cpufreq_set_policy()

    Reduce the rampant usage of goto and the indentation level in
    cpufreq_set_policy() to improve the readability of that code.

    No functional changes should result from that.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index f06ed2f..10a8300 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -2015,7 +2015,8 @@ EXPORT_SYMBOL(cpufreq_get_policy);
 static int cpufreq_set_policy(struct cpufreq_policy *policy,
     struct cpufreq_policy *new_policy)
 {
- int ret = 0, failed = 1;
+ struct cpufreq_governor *old_gov;
+ int ret;
 
  pr_debug("setting new policy for CPU %u: %u - %u kHz\n", new_policy->cpu,
   new_policy->min, new_policy->max);
@@ -2023,15 +2024,13 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
  memcpy(&new_policy->cpuinfo, &policy->cpuinfo,
     sizeof(struct cpufreq_cpuinfo));
 
- if (new_policy->min > policy->max || new_policy->max < policy->min) {
-  ret = -EINVAL;
-  goto error_out;
- }
+ if (new_policy->min > policy->max || new_policy->max < policy->min)
+  return -EINVAL;
 
  /* verify the cpu speed can be set within this limit */
  ret = cpufreq_driver->verify(new_policy);
  if (ret)
-  goto error_out;
+  return ret;
 
  /* adjust if necessary - all reasons */
  blocking_notifier_call_chain(&cpufreq_policy_notifier_list,
@@ -2047,7 +2046,7 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
   */
  ret = cpufreq_driver->verify(new_policy);
  if (ret)
-  goto error_out;
+  return ret;
 
  /* notification of the new policy */
  blocking_notifier_call_chain(&cpufreq_policy_notifier_list,
@@ -2062,58 +2061,48 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
  if (cpufreq_driver->setpolicy) {
   policy->policy = new_policy->policy;
   pr_debug("setting range\n");
-  ret = cpufreq_driver->setpolicy(new_policy);
- } else {
-  if (new_policy->governor != policy->governor) {
-   /* save old, working values */
-   struct cpufreq_governor *old_gov = policy->governor;
-
-   pr_debug("governor switch\n");
-
-   /* end old governor */
-   if (policy->governor) {
-    __cpufreq_governor(policy, CPUFREQ_GOV_STOP);
-    up_write(&policy->rwsem);
-    __cpufreq_governor(policy,
-      CPUFREQ_GOV_POLICY_EXIT);
-    down_write(&policy->rwsem);
-   }
+  return cpufreq_driver->setpolicy(new_policy);
+ }
 
-   /* start new governor */
-   policy->governor = new_policy->governor;
-   if (!__cpufreq_governor(policy, CPUFREQ_GOV_POLICY_INIT)) {
-    if (!__cpufreq_governor(policy, CPUFREQ_GOV_START)) {
-     failed = 0;
-    } else {
-     up_write(&policy->rwsem);
-     __cpufreq_governor(policy,
-       CPUFREQ_GOV_POLICY_EXIT);
-     down_write(&policy->rwsem);
-    }
-   }
+ if (new_policy->governor == policy->governor)
+  goto out;
 
-   if (failed) {
-    /* new governor failed, so re-start old one */
-    pr_debug("starting governor %s failed\n",
-       policy->governor->name);
-    if (old_gov) {
-     policy->governor = old_gov;
-     __cpufreq_governor(policy,
-       CPUFREQ_GOV_POLICY_INIT);
-     __cpufreq_governor(policy,
-          CPUFREQ_GOV_START);
-    }
-    ret = -EINVAL;
-    goto error_out;
-   }
-   /* might be a policy change, too, so fall through */
-  }
-  pr_debug("governor: change or update limits\n");
-  ret = __cpufreq_governor(policy, CPUFREQ_GOV_LIMITS);
+ pr_debug("governor switch\n");
+
+ /* save old, working values */
+ old_gov = policy->governor;
+ /* end old governor */
+ if (old_gov) {
+  __cpufreq_governor(policy, CPUFREQ_GOV_STOP);
+  up_write(&policy->rwsem);
+  __cpufreq_governor(policy,CPUFREQ_GOV_POLICY_EXIT);
+  down_write(&policy->rwsem);
  }
 
-error_out:
- return ret;
+ /* start new governor */
+ policy->governor = new_policy->governor;
+ if (!__cpufreq_governor(policy, CPUFREQ_GOV_POLICY_INIT)) {
+  if (!__cpufreq_governor(policy, CPUFREQ_GOV_START))
+   goto out;
+
+  up_write(&policy->rwsem);
+  __cpufreq_governor(policy, CPUFREQ_GOV_POLICY_EXIT);
+  down_write(&policy->rwsem);
+ }
+
+ /* new governor failed, so re-start old one */
+ pr_debug("starting governor %s failed\n", policy->governor->name);
+ if (old_gov) {
+  policy->governor = old_gov;
+  __cpufreq_governor(policy, CPUFREQ_GOV_POLICY_INIT);
+  __cpufreq_governor(policy, CPUFREQ_GOV_START);
+ }
+
+ return -EINVAL;
+
+ out:
+ pr_debug("governor: change or update limits\n");
+ return __cpufreq_governor(policy, CPUFREQ_GOV_LIMITS);
 }
 
 /**
-- 
1.7.1