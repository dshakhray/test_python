From 31e1f1c47c6e527a804b5c00854ce1a0df678e2c Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sat, 19 Jul 2014 04:27:46 -0400
Subject: [pci] Remove unused Optimized Buffer Flush/Fill support

Message-id: <20140719042745.19438.87694.stgit@gir.stowe>
Patchwork-id: 86010
O-Subject: [RHEL7.1 PATCH 48/81] PCI: Remove unused Optimized Buffer Flush/Fill support
Bugzilla: 1110895
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110895
Upstream Status: ecc8635608342a05ded722f0e30e6ccd682f84a6

commit ecc8635608342a05ded722f0e30e6ccd682f84a6
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Fri Jan 10 14:01:05 2014 -0700

    PCI: Remove unused Optimized Buffer Flush/Fill support

    My philosophy is unused code is dead code.  And dead code is subject to bit
    rot and is a likely source of bugs.  Use it or lose it.

    This reverts 48a92a8179b3 ("PCI: add OBFF enable/disable support"),
    removing these interfaces:

        pci_enable_obff()
        pci_disable_obff()

    [bhelgaas: split to separate patch, also remove prototypes from pci.h]
    Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: Jesse Barnes <jbarnes@virtuousgeek.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 32fc17c..af3db6e 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -2220,79 +2220,6 @@ void pci_disable_ido(struct pci_dev *dev, unsigned long type)
 }
 EXPORT_SYMBOL(pci_disable_ido);
 
-/**
- * pci_enable_obff - enable optimized buffer flush/fill
- * @dev: PCI device
- * @type: type of signaling to use
- *
- * Try to enable @type OBFF signaling on @dev.  It will try using WAKE#
- * signaling if possible, falling back to message signaling only if
- * WAKE# isn't supported.  @type should indicate whether the PCIe link
- * be brought out of L0s or L1 to send the message.  It should be either
- * %PCI_EXP_OBFF_SIGNAL_ALWAYS or %PCI_OBFF_SIGNAL_L0.
- *
- * If your device can benefit from receiving all messages, even at the
- * power cost of bringing the link back up from a low power state, use
- * %PCI_EXP_OBFF_SIGNAL_ALWAYS.  Otherwise, use %PCI_OBFF_SIGNAL_L0 (the
- * preferred type).
- *
- * RETURNS:
- * Zero on success, appropriate error number on failure.
- */
-int pci_enable_obff(struct pci_dev *dev, enum pci_obff_signal_type type)
-{
- u32 cap;
- u16 ctrl;
- int ret;
-
- pcie_capability_read_dword(dev, PCI_EXP_DEVCAP2, &cap);
- if (!(cap & PCI_EXP_DEVCAP2_OBFF_MASK))
-  return -ENOTSUPP; /* no OBFF support at all */
-
- /* Make sure the topology supports OBFF as well */
- if (dev->bus->self) {
-  ret = pci_enable_obff(dev->bus->self, type);
-  if (ret)
-   return ret;
- }
-
- pcie_capability_read_word(dev, PCI_EXP_DEVCTL2, &ctrl);
- if (cap & PCI_EXP_DEVCAP2_OBFF_WAKE)
-  ctrl |= PCI_EXP_DEVCTL2_OBFF_WAKE_EN;
- else {
-  switch (type) {
-  case PCI_EXP_OBFF_SIGNAL_L0:
-   if (!(ctrl & PCI_EXP_DEVCTL2_OBFF_WAKE_EN))
-    ctrl |= PCI_EXP_DEVCTL2_OBFF_MSGA_EN;
-   break;
-  case PCI_EXP_OBFF_SIGNAL_ALWAYS:
-   ctrl &= ~PCI_EXP_DEVCTL2_OBFF_WAKE_EN;
-   ctrl |= PCI_EXP_DEVCTL2_OBFF_MSGB_EN;
-   break;
-  default:
-   WARN(1, "bad OBFF signal type\n");
-   return -ENOTSUPP;
-  }
- }
- pcie_capability_write_word(dev, PCI_EXP_DEVCTL2, ctrl);
-
- return 0;
-}
-EXPORT_SYMBOL(pci_enable_obff);
-
-/**
- * pci_disable_obff - disable optimized buffer flush/fill
- * @dev: PCI device
- *
- * Disable OBFF on @dev.
- */
-void pci_disable_obff(struct pci_dev *dev)
-{
- pcie_capability_clear_word(dev, PCI_EXP_DEVCTL2,
-       PCI_EXP_DEVCTL2_OBFF_WAKE_EN);
-}
-EXPORT_SYMBOL(pci_disable_obff);
-
 static int pci_acs_enable;
 
 /**
diff --git a/include/linux/pci.h b/include/linux/pci.h
index d07d9f1..d439aab 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1034,13 +1034,6 @@ void pci_allocate_vc_save_buffers(struct pci_dev *dev);
 void pci_enable_ido(struct pci_dev *dev, unsigned long type);
 void pci_disable_ido(struct pci_dev *dev, unsigned long type);
 
-enum pci_obff_signal_type {
- PCI_EXP_OBFF_SIGNAL_L0 = 0,
- PCI_EXP_OBFF_SIGNAL_ALWAYS = 1,
-};
-int pci_enable_obff(struct pci_dev *dev, enum pci_obff_signal_type);
-void pci_disable_obff(struct pci_dev *dev);
-
 /* For use by arch with custom probe code */
 void set_pcie_port_type(struct pci_dev *pdev);
 void set_pcie_hotplug_bridge(struct pci_dev *pdev);
@@ -1484,15 +1477,6 @@ static inline void pci_disable_ido(struct pci_dev *dev, unsigned long type)
 {
 }
 
-static inline int pci_enable_obff(struct pci_dev *dev, unsigned long type)
-{
- return 0;
-}
-
-static inline void pci_disable_obff(struct pci_dev *dev)
-{
-}
-
 static inline int pci_request_regions(struct pci_dev *dev, const char *res_name)
 {
  return -EIO;
-- 
1.7.1