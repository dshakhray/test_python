From 6099e34cdfdf3d5955bc14d0d0a3c17005ba2503 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:15:03 -0400
Subject: [net] skb_gro_checksum_* functions

Message-id: <1409652920-431-41-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90154
O-Subject: [PATCH 40/57] [RHEL7.1 net] net: skb_gro_checksum_* functions
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

commit 573e8fca255a27e3573b51f9b183d62641c47a3d
Author: Tom Herbert <therbert@google.com>
Date:   Fri Aug 22 13:33:47 2014 -0700

    net: skb_gro_checksum_* functions

    Add skb_gro_checksum_validate, skb_gro_checksum_validate_zero_check,
    and skb_gro_checksum_simple_validate, and __skb_gro_checksum_complete.
    These are the cognates of the normal checksum functions but are used
    in the gro_receive path and operate on GRO related fields in sk_buffs.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 3075d3c..161ed86 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1656,7 +1656,13 @@ struct napi_gro_cb {
  u16 proto;
 
  /* Used in udp_gro_receive */
- u16 udp_mark;
+ u8 udp_mark:1;
+
+ /* GRO checksum is valid */
+ u8 csum_valid:1;
+
+ /* Number encapsulation layers crossed */
+ u8 encapsulation;
 
  /* used to support CHECKSUM_COMPLETE for tunneling protocols */
  __wsum csum;
@@ -1886,11 +1892,77 @@ static inline void *skb_gro_network_header(struct sk_buff *skb)
 static inline void skb_gro_postpull_rcsum(struct sk_buff *skb,
      const void *start, unsigned int len)
 {
- if (skb->ip_summed == CHECKSUM_COMPLETE)
+ if (NAPI_GRO_CB(skb)->csum_valid)
   NAPI_GRO_CB(skb)->csum = csum_sub(NAPI_GRO_CB(skb)->csum,
         csum_partial(start, len, 0));
 }
 
+/* GRO checksum functions. These are logical equivalents of the normal
+ * checksum functions (in skbuff.h) except that they operate on the GRO
+ * offsets and fields in sk_buff.
+ */
+
+__sum16 __skb_gro_checksum_complete(struct sk_buff *skb);
+
+static inline bool __skb_gro_checksum_validate_needed(struct sk_buff *skb,
+            bool zero_okay,
+            __sum16 check)
+{
+ return (skb->ip_summed != CHECKSUM_PARTIAL &&
+  (skb->ip_summed != CHECKSUM_UNNECESSARY ||
+   (NAPI_GRO_CB(skb)->encapsulation > skb->encapsulation)) &&
+  (!zero_okay || check));
+}
+
+static inline __sum16 __skb_gro_checksum_validate_complete(struct sk_buff *skb,
+          __wsum psum)
+{
+ if (NAPI_GRO_CB(skb)->csum_valid &&
+     !csum_fold(csum_add(psum, NAPI_GRO_CB(skb)->csum)))
+  return 0;
+
+ NAPI_GRO_CB(skb)->csum = psum;
+
+ return __skb_gro_checksum_complete(skb);
+}
+
+/* Update skb for CHECKSUM_UNNECESSARY when we verified a top level
+ * checksum or an encapsulated one during GRO. This saves work
+ * if we fallback to normal path with the packet.
+ */
+static inline void skb_gro_incr_csum_unnecessary(struct sk_buff *skb)
+{
+ if (skb->ip_summed == CHECKSUM_UNNECESSARY) {
+  if (NAPI_GRO_CB(skb)->encapsulation)
+   skb->encapsulation = 1;
+ } else if (skb->ip_summed != CHECKSUM_PARTIAL) {
+  skb->ip_summed = CHECKSUM_UNNECESSARY;
+  skb->encapsulation = 0;
+ }
+}
+
+#define __skb_gro_checksum_validate(skb, proto, zero_okay, check, \
+        compute_pseudo)   \
+({         \
+ __sum16 __ret = 0;      \
+ if (__skb_gro_checksum_validate_needed(skb, zero_okay, check)) \
+  __ret = __skb_gro_checksum_validate_complete(skb, \
+    compute_pseudo(skb, proto));  \
+ if (!__ret)       \
+  skb_gro_incr_csum_unnecessary(skb);   \
+ __ret;        \
+})
+
+#define skb_gro_checksum_validate(skb, proto, compute_pseudo)  \
+ __skb_gro_checksum_validate(skb, proto, false, 0, compute_pseudo)
+
+#define skb_gro_checksum_validate_zero_check(skb, proto, check,  \
+          compute_pseudo)  \
+ __skb_gro_checksum_validate(skb, proto, true, check, compute_pseudo)
+
+#define skb_gro_checksum_simple_validate(skb)    \
+ __skb_gro_checksum_validate(skb, 0, false, 0, null_compute_pseudo)
+
 static inline int dev_hard_header(struct sk_buff *skb, struct net_device *dev,
       unsigned short type,
       const void *daddr, const void *saddr,
diff --git a/net/core/dev.c b/net/core/dev.c
index 28ae184..2071641 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3787,7 +3787,13 @@ static enum gro_result dev_gro_receive(struct napi_struct *napi, struct sk_buff
   goto normal;
 
  gro_list_prepare(napi, skb);
- NAPI_GRO_CB(skb)->csum = skb->csum; /* Needed for CHECKSUM_COMPLETE */
+
+ if (skb->ip_summed == CHECKSUM_COMPLETE) {
+  NAPI_GRO_CB(skb)->csum = skb->csum;
+  NAPI_GRO_CB(skb)->csum_valid = 1;
+ } else {
+  NAPI_GRO_CB(skb)->csum_valid = 0;
+ }
 
  rcu_read_lock();
  list_for_each_entry_rcu(ptype, head, list) {
@@ -3800,6 +3806,7 @@ static enum gro_result dev_gro_receive(struct napi_struct *napi, struct sk_buff
   NAPI_GRO_CB(skb)->flush = 0;
   NAPI_GRO_CB(skb)->free = 0;
   NAPI_GRO_CB(skb)->udp_mark = 0;
+  NAPI_GRO_CB(skb)->encapsulation = 0;
 
   pp = ptype->callbacks.gro_receive(&napi->gro_list, skb);
   break;
@@ -4022,6 +4029,31 @@ gro_result_t napi_gro_frags(struct napi_struct *napi)
 }
 EXPORT_SYMBOL(napi_gro_frags);
 
+/* Compute the checksum from gro_offset and return the folded value
+ * after adding in any pseudo checksum.
+ */
+__sum16 __skb_gro_checksum_complete(struct sk_buff *skb)
+{
+ __wsum wsum;
+ __sum16 sum;
+
+ wsum = skb_checksum(skb, skb_gro_offset(skb), skb_gro_len(skb), 0);
+
+ /* NAPI_GRO_CB(skb)->csum holds pseudo checksum */
+ sum = csum_fold(csum_add(NAPI_GRO_CB(skb)->csum, wsum));
+ if (likely(!sum)) {
+  if (unlikely(skb->ip_summed == CHECKSUM_COMPLETE) &&
+      !skb->csum_complete_sw)
+   netdev_rx_csum_fault(skb->dev);
+ }
+
+ NAPI_GRO_CB(skb)->csum = wsum;
+ NAPI_GRO_CB(skb)->csum_valid = 1;
+
+ return sum;
+}
+EXPORT_SYMBOL(__skb_gro_checksum_complete);
+
 /*
  * net_rps_action sends any pending IPI's for rps.
  * Note: called with local irq disabled, but exits with local irq enabled.
-- 
1.7.1