From 7a0c2a13a79060cebc4d6e37e8192c6504fb6461 Mon Sep 17 00:00:00 2001
From: Brian Foster <bfoster@redhat.com>
Date: Tue, 2 Dec 2014 15:21:14 -0500
Subject: [fs] xfs: mark all internal workqueues as freezable

Message-id: <1417533675-27934-2-git-send-email-bfoster@redhat.com>
Patchwork-id: 101032
O-Subject: [RHEL7 PATCH 1/2] xfs: mark all internal workqueues as freezable
Bugzilla: 1155929
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

commit 8018ec083c72443cc74fd2d08eb7c5dddc13af53
Author: Brian Foster <bfoster@redhat.com>
Date:   Tue Sep 9 11:44:46 2014 +1000

BZ: 1155929

    xfs: mark all internal workqueues as freezable

    Workqueues must be explicitly set as freezable to ensure they are frozen
    in the assocated part of the hibernation/suspend sequence. Freezing of
    workqueues and kernel threads is important to ensure that modifications
    are not made on-disk after the hibernation image has been created.
    Otherwise, the in-memory state can become inconsistent with what is on
    disk and eventually lead to filesystem corruption. We have reports of
    free space btree corruptions that occur immediately after restore from
    hibernate that suggest the xfs-eofblocks workqueue could be causing
    such problems if it races with hibernation.

    Mark all of the internal XFS workqueues as freezable to ensure nothing
    changes on-disk once the freezer infrastructure freezes kernel threads
    and creates the hibernation image.

    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reported-by: Carlos E. R. <carlos.e.r@opensuse.org>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

Signed-off-by: Brian Foster <bfoster@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_buf.c b/fs/xfs/xfs_buf.c
index 9bd308e..680cd94 100644
--- a/fs/xfs/xfs_buf.c
+++ b/fs/xfs/xfs_buf.c
@@ -1865,7 +1865,7 @@ xfs_buf_init(void)
   goto out;
 
  xfslogd_workqueue = alloc_workqueue("xfslogd",
-     WQ_MEM_RECLAIM | WQ_HIGHPRI, 1);
+    WQ_MEM_RECLAIM | WQ_HIGHPRI | WQ_FREEZABLE, 1);
  if (!xfslogd_workqueue)
   goto out_free_buf_zone;
 
diff --git a/fs/xfs/xfs_mru_cache.c b/fs/xfs/xfs_mru_cache.c
index 4aff563..c7421e9 100644
--- a/fs/xfs/xfs_mru_cache.c
+++ b/fs/xfs/xfs_mru_cache.c
@@ -309,7 +309,8 @@ xfs_mru_cache_init(void)
  if (!xfs_mru_elem_zone)
   goto out;
 
- xfs_mru_reap_wq = alloc_workqueue("xfs_mru_cache", WQ_MEM_RECLAIM, 1);
+ xfs_mru_reap_wq = alloc_workqueue("xfs_mru_cache",
+    WQ_MEM_RECLAIM|WQ_FREEZABLE, 1);
  if (!xfs_mru_reap_wq)
   goto out_destroy_mru_elem_zone;
 
diff --git a/fs/xfs/xfs_super.c b/fs/xfs/xfs_super.c
index 3323632..e984509 100644
--- a/fs/xfs/xfs_super.c
+++ b/fs/xfs/xfs_super.c
@@ -848,32 +848,32 @@ xfs_init_mount_workqueues(
  struct xfs_mount *mp)
 {
  mp->m_data_workqueue = alloc_workqueue("xfs-data/%s",
-   WQ_MEM_RECLAIM, 0, mp->m_fsname);
+   WQ_MEM_RECLAIM|WQ_FREEZABLE, 0, mp->m_fsname);
  if (!mp->m_data_workqueue)
   goto out;
 
  mp->m_unwritten_workqueue = alloc_workqueue("xfs-conv/%s",
-   WQ_MEM_RECLAIM, 0, mp->m_fsname);
+   WQ_MEM_RECLAIM|WQ_FREEZABLE, 0, mp->m_fsname);
  if (!mp->m_unwritten_workqueue)
   goto out_destroy_data_iodone_queue;
 
  mp->m_cil_workqueue = alloc_workqueue("xfs-cil/%s",
-   WQ_MEM_RECLAIM, 0, mp->m_fsname);
+   WQ_MEM_RECLAIM|WQ_FREEZABLE, 0, mp->m_fsname);
  if (!mp->m_cil_workqueue)
   goto out_destroy_unwritten;
 
  mp->m_reclaim_workqueue = alloc_workqueue("xfs-reclaim/%s",
-   WQ_NON_REENTRANT, 0, mp->m_fsname);
+   WQ_NON_REENTRANT|WQ_FREEZABLE, 0, mp->m_fsname);
  if (!mp->m_reclaim_workqueue)
   goto out_destroy_cil;
 
  mp->m_log_workqueue = alloc_workqueue("xfs-log/%s",
-   WQ_NON_REENTRANT, 0, mp->m_fsname);
+   WQ_NON_REENTRANT|WQ_FREEZABLE, 0, mp->m_fsname);
  if (!mp->m_log_workqueue)
   goto out_destroy_reclaim;
 
  mp->m_eofblocks_workqueue = alloc_workqueue("xfs-eofblocks/%s",
-   WQ_NON_REENTRANT, 0, mp->m_fsname);
+   WQ_NON_REENTRANT|WQ_FREEZABLE, 0, mp->m_fsname);
  if (!mp->m_eofblocks_workqueue)
   goto out_destroy_log;
 
@@ -1723,7 +1723,8 @@ xfs_init_workqueues(void)
   * AGs in all the filesystems mounted. Hence use the default large
   * max_active value for this workqueue.
   */
- xfs_alloc_wq = alloc_workqueue("xfsalloc", WQ_MEM_RECLAIM, 0);
+ xfs_alloc_wq = alloc_workqueue("xfsalloc",
+   WQ_MEM_RECLAIM|WQ_FREEZABLE, 0);
  if (!xfs_alloc_wq)
   return -ENOMEM;
 
-- 
1.7.1