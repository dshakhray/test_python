From 66b654b47ed19b9425b94dc5313cd5e2daa1945b Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:37:41 -0400
Subject: [virt] kvm: Advertise the support of EPT to the L1 guest, through the appropriate MSR

Message-id: <1406040016-3289-67-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86145
O-Subject: [RHEL7 PATCH v2 066/221] Advertise the support of EPT to the L1 guest, through the appropriate MSR.
Bugzilla: 1048496 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Nadav Har'El <nyh@il.ibm.com>

This is the last patch of the basic Nested EPT feature, so as to allow
bisection through this patch series: The guest will not see EPT support until
this last patch, and will not attempt to use the half-applied feature.

Reviewed-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com>
Signed-off-by: Nadav Har'El <nyh@il.ibm.com>
Signed-off-by: Jun Nakajima <jun.nakajima@intel.com>
Signed-off-by: Xinhao Xu <xinhao.xu@intel.com>
Signed-off-by: Yang Zhang <yang.z.zhang@Intel.com>
Signed-off-by: Gleb Natapov <gleb@redhat.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit afa61f752ba62549e4143d9f9378a8d1d710d6eb)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 6fe4084..d470bd0 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -2250,6 +2250,22 @@ static __init void nested_vmx_setup_ctls_msrs(void)
   SECONDARY_EXEC_VIRTUALIZE_APIC_ACCESSES |
   SECONDARY_EXEC_WBINVD_EXITING;
 
+ if (enable_ept) {
+  /* nested EPT: emulate EPT also to L1 */
+  nested_vmx_secondary_ctls_high |= SECONDARY_EXEC_ENABLE_EPT;
+  nested_vmx_ept_caps = VMX_EPT_PAGE_WALK_4_BIT;
+  nested_vmx_ept_caps |= VMX_EPT_INVEPT_BIT;
+  nested_vmx_ept_caps &= vmx_capability.ept;
+  /*
+   * Since invept is completely emulated we support both global
+   * and context invalidation independent of what host cpu
+   * supports
+   */
+  nested_vmx_ept_caps |= VMX_EPT_EXTENT_GLOBAL_BIT |
+   VMX_EPT_EXTENT_CONTEXT_BIT;
+ } else
+  nested_vmx_ept_caps = 0;
+
  /* miscellaneous data */
  rdmsr(MSR_IA32_VMX_MISC, nested_vmx_misc_low, nested_vmx_misc_high);
  nested_vmx_misc_low &= VMX_MISC_PREEMPTION_TIMER_RATE_MASK |
@@ -2358,8 +2374,8 @@ static int vmx_get_vmx_msr(struct kvm_vcpu *vcpu, u32 msr_index, u64 *pdata)
      nested_vmx_secondary_ctls_high);
   break;
  case MSR_IA32_VMX_EPT_VPID_CAP:
-  /* Currently, no nested ept or nested vpid */
-  *pdata = 0;
+  /* Currently, no nested vpid support */
+  *pdata = nested_vmx_ept_caps;
   break;
  default:
   return 0;
-- 
1.7.1