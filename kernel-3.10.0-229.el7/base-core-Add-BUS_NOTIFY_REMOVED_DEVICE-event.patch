From 59f89ecba5462ae803563c9534ac4dd0127d3fa4 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Wed, 7 Jan 2015 16:04:45 -0500
Subject: [base] core: Add BUS_NOTIFY_REMOVED_DEVICE event

Message-id: <20150107160445.9952.51870.stgit@amt.stowe>
Patchwork-id: 102518
O-Subject: [RHEL7.1 PATCH 1/3] driver core: Add BUS_NOTIFY_REMOVED_DEVICE event
Bugzilla: 1109829
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1109829
Upstream Status: 599bad38cf7163123af7c9efea0fcf228bc74fe1

Note: KABI
  The patch is changing bus notifier indexes and while this didn't flag a
  KABI issue, it should have.  It's not hard to imagine a driver compiled
  against a previous version of device.h registering a notifier and now
  the index it's testing means something else.

  As such, the new BUS_NOTIFY_REMOVED_DEVICE #define was given a
  previously unused index so as not to conflict with any previously
  existing indexes.

  RHEL7 will be different from upstream, we'll have to be careful about
  such going forward with re-bases/back-ports.

commit 599bad38cf7163123af7c9efea0fcf228bc74fe1
Author: Joerg Roedel <jroedel@suse.de>
Date:   Tue Sep 30 13:02:02 2014 +0200

    driver core: Add BUS_NOTIFY_REMOVED_DEVICE event

    This event closes an important gap in the bus notifiers.
    There is already the BUS_NOTIFY_DEL_DEVICE event, but that
    is sent when the device is still bound to its device driver.

    This is too early for the IOMMU code to destroy any mappings
    for the device, as they might still be in use by the driver.

    The new BUS_NOTIFY_REMOVED_DEVICE event introduced with this
    patch closes this gap as it is sent when the device is
    already unbound from its device driver and almost completly
    removed from the driver core.

    With this event the IOMMU code can safely destroy any
    mappings and other data structures when a device is removed.

    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Tested-by: Jerry Hoemann <jerry.hoemann@hp.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/base/core.c b/drivers/base/core.c
index 63e5863..aa6cc6f 100644
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@ -1298,6 +1298,9 @@ void device_del(struct device *dev)
   */
  if (platform_notify_remove)
   platform_notify_remove(dev);
+ if (dev->bus)
+  blocking_notifier_call_chain(&dev->bus->p->bus_notifier,
+          BUS_NOTIFY_REMOVED_DEVICE, dev);
  kobject_uevent(&dev->kobj, KOBJ_REMOVE);
  cleanup_device_parent(dev);
  kobject_del(&dev->kobj);
diff --git a/include/linux/device.h b/include/linux/device.h
index b36aad3..c144bde 100644
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@ -183,9 +183,12 @@ extern int bus_unregister_notifier(struct bus_type *bus,
 /* All 4 notifers below get called with the target struct device *
  * as an argument. Note that those functions are likely to be called
  * with the device lock held in the core, so be careful.
+ *
+ * RHEL7 - Note that the following notifier values differ from upstream.
+ * This was due to KABI and upstream commit 599bad38cf71.
  */
 #define BUS_NOTIFY_ADD_DEVICE  0x00000001 /* device added */
-#define BUS_NOTIFY_DEL_DEVICE  0x00000002 /* device removed */
+#define BUS_NOTIFY_DEL_DEVICE  0x00000002 /* device to be removed */
 #define BUS_NOTIFY_BIND_DRIVER  0x00000003 /* driver about to be
             bound */
 #define BUS_NOTIFY_BOUND_DRIVER  0x00000004 /* driver bound to device */
@@ -193,6 +196,8 @@ extern int bus_unregister_notifier(struct bus_type *bus,
             unbound */
 #define BUS_NOTIFY_UNBOUND_DRIVER 0x00000006 /* driver is unbound
             from the device */
+#define BUS_NOTIFY_REMOVED_DEVICE 0x00000007 /* device removed */
+
 
 extern struct kset *bus_get_kset(struct bus_type *bus);
 extern struct klist *bus_get_device_klist(struct bus_type *bus);
-- 
1.7.1