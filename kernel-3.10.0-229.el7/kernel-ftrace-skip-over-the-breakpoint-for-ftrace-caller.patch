From 3108bc301214491bf644aaa65839be5ff34913c9 Mon Sep 17 00:00:00 2001
From: Josh Poimboeuf <jpoimboe@redhat.com>
Date: Thu, 4 Sep 2014 18:54:20 -0400
Subject: [kernel] ftrace: skip over the breakpoint for ftrace caller

Message-id: <72e4c18c6fb135995eb55076ab1bdff95069f6eb.1409856554.git.jpoimboe@redhat.com>
Patchwork-id: 91237
O-Subject: [RHEL7.1 PATCH 01/23] ftrace/x86: skip over the breakpoint for ftrace caller
Bugzilla: 1113829
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1113829

commit ab4ead02ec235d706d0611d8741964628291237e
Author: Kevin Hao <haokexin@gmail.com>
Date:   Wed Oct 23 20:58:16 2013 +0800

    ftrace/x86: skip over the breakpoint for ftrace caller

    In commit 8a4d0a687a59 "ftrace: Use breakpoint method to update ftrace
    caller", we choose to use breakpoint method to update the ftrace
    caller. But we also need to skip over the breakpoint in function
    ftrace_int3_handler() for them. Otherwise weird things would happen.

    Cc: stable@vger.kernel.org # 3.5+
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/ftrace.c b/arch/x86/kernel/ftrace.c
index 42a392a..d4bdd25 100644
--- a/arch/x86/kernel/ftrace.c
+++ b/arch/x86/kernel/ftrace.c
@@ -248,6 +248,15 @@ int ftrace_update_ftrace_func(ftrace_func_t func)
  return ret;
 }
 
+static int is_ftrace_caller(unsigned long ip)
+{
+ if (ip == (unsigned long)(&ftrace_call) ||
+  ip == (unsigned long)(&ftrace_regs_call))
+  return 1;
+
+ return 0;
+}
+
 /*
  * A breakpoint was added to the code address we are about to
  * modify, and this is the handle that will just skip over it.
@@ -257,10 +266,13 @@ int ftrace_update_ftrace_func(ftrace_func_t func)
  */
 int ftrace_int3_handler(struct pt_regs *regs)
 {
+ unsigned long ip;
+
  if (WARN_ON_ONCE(!regs))
   return 0;
 
- if (!ftrace_location(regs->ip - 1))
+ ip = regs->ip - 1;
+ if (!ftrace_location(ip) && !is_ftrace_caller(ip))
   return 0;
 
  regs->ip += MCOUNT_INSN_SIZE - 1;
-- 
1.7.1