From abfd0a4fc7524caee4cb93992c357c3cfb743a0f Mon Sep 17 00:00:00 2001
From: Alexander Duyck <alexander.h.duyck@redhat.com>
Date: Tue, 28 Oct 2014 14:41:39 -0400
Subject: [net] gro: make sure skb->cb[] initial content has not to be zero

Message-id: <20141028144139.4990.12133.stgit@ahduyck-vm-rhel7>
Patchwork-id: 98490
O-Subject: [RHEL7.1 net PATCH 1/2] net: gro: make sure skb->cb[] initial content has not to be zero
Bugzilla: 1154239
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Marcelo Leitner <mleitner@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: 1154239
Brew: 8163537

Backport of upstream commit: 29e98242783ed3ba569797846a606ba66f781625

 commit 29e98242783ed3ba569797846a606ba66f781625
 Author: Eric Dumazet <edumazet@google.com>
 Date:   Fri May 16 11:34:37 2014 -0700

    net: gro: make sure skb->cb[] initial content has not to be zero

    Starting from linux-3.13, GRO attempts to build full size skbs.

    Problem is the commit assumed one particular field in skb->cb[]
    was clean, but it is not the case on some stacked devices.

    Timo reported a crash in case traffic is decrypted before
    reaching a GRE device.

    Fix this by initializing NAPI_GRO_CB(skb)->last at the right place,
    this also removes one conditional.

    Thanks a lot to Timo for providing full reports and bisecting this.

    Fixes: 8a29111c7ca6 ("net: gro: allow to build full sized skb")
    Bisected-by: Timo Teras <timo.teras@iki.fi>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Tested-by: Timo Teras <timo.teras@iki.fi>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Alexander Duyck <alexander.h.duyck@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/core/dev.c b/net/core/dev.c
index 9a2a871..99b23a9 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3858,6 +3858,7 @@ static enum gro_result dev_gro_receive(struct napi_struct *napi, struct sk_buff
  }
  NAPI_GRO_CB(skb)->count = 1;
  NAPI_GRO_CB(skb)->age = jiffies;
+ NAPI_GRO_CB(skb)->last = skb;
  skb_shinfo(skb)->gso_size = skb_gro_len(skb);
  skb->next = napi->gro_list;
  napi->gro_list = skb;
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 4c4375c..53afca9 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -3076,7 +3076,7 @@ int skb_gro_receive(struct sk_buff **head, struct sk_buff *skb)
  if (unlikely(p->len + len >= 65536))
   return -E2BIG;
 
- lp = NAPI_GRO_CB(p)->last ?: p;
+ lp = NAPI_GRO_CB(p)->last;
  pinfo = skb_shinfo(lp);
 
  if (headlen <= offset) {
@@ -3192,7 +3192,7 @@ merge:
 
  __skb_pull(skb, offset);
 
- if (!NAPI_GRO_CB(p)->last)
+ if (NAPI_GRO_CB(p)->last == p)
   skb_shinfo(p)->frag_list = skb;
  else
   NAPI_GRO_CB(p)->last->next = skb;
-- 
1.7.1