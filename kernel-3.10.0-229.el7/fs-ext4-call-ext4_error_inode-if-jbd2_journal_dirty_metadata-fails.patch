From 5396b1ea65389c83bb1cbf717cf048925e5a2e6d Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:55 -0400
Subject: [fs] ext4: call ext4_error_inode() if jbd2_journal_dirty_metadata() fails

Message-id: <1414058125-4183-82-git-send-email-lczerner@redhat.com>
Patchwork-id: 98157
O-Subject: [RHEL 7.1 PATCH v2 081/171] ext4: call ext4_error_inode() if jbd2_journal_dirty_metadata() fails
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit ae1495b12df1897d4f42842a7aa7276d920f6290

 While it's true that errors can only happen if there is a bug in
 jbd2_journal_dirty_metadata(), if a bug does happen, we need to halt
 the kernel or remount the file system read-only in order to avoid
 further data loss.  The ext4_journal_abort_handle() function doesn't
 do any of this, and while it's likely that this call (since it doesn't
 adjust refcounts) will likely result in the file system eventually
 deadlocking since the current transaction will never be able to close,
 it's much cleaner to call let ext4's error handling system deal with
 this situation.

 There's a separate bug here which is that if certain jbd2 errors
 errors occur and file system is mounted errors=continue, the file
 system will probably eventually end grind to a halt as described
 above.  But things have been this way in a long time, and usually when
 we have these sorts of errors it's pretty much a disaster --- and
 that's why the jbd2 layer aggressively retries memory allocations,
 which is the most likely cause of these jbd2 errors.

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Reviewed-by: Jan Kara <jack@suse.cz>
 Cc: stable@vger.kernel.org
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4_jbd2.c b/fs/ext4/ext4_jbd2.c
index 17ac112..3fe29de 100644
--- a/fs/ext4/ext4_jbd2.c
+++ b/fs/ext4/ext4_jbd2.c
@@ -259,6 +259,15 @@ int __ext4_handle_dirty_metadata(const char *where, unsigned int line,
   if (WARN_ON_ONCE(err)) {
    ext4_journal_abort_handle(where, line, __func__, bh,
         handle, err);
+   ext4_error_inode(inode, where, line,
+      bh->b_blocknr,
+      "journal_dirty_metadata failed: "
+      "handle type %u started at line %u, "
+      "credits %u/%u, errcode %d",
+      handle->h_type,
+      handle->h_line_no,
+      handle->h_requested_credits,
+      handle->h_buffer_credits, err);
   }
  } else {
   if (inode)
-- 
1.7.1