From ec781ed3537d1ab54627e5532db9f52d83a13b73 Mon Sep 17 00:00:00 2001
From: Mikulas Patocka <mpatocka@redhat.com>
Date: Fri, 30 May 2014 14:56:58 -0400
Subject: [fs] dcache: make prepend_name() work correctly when called with negative *buflen

Message-id: <alpine.LRH.2.02.1405301056340.29254@file01.intranet.prod.int.rdu2.redhat.com>
Patchwork-id: 81249
O-Subject: [PATCH 3/3 RHEL7 bz1092746] make prepend_name() work correctly when called with negative *buflen
Bugzilla: 1092746
RH-Acked-by: Sachin Prabhu <sprabhu@redhat.com>
RH-Acked-by: Steven Whitehouse <swhiteho@redhat.com>
RH-Acked-by: David Howells <dhowells@redhat.com>
RH-Acked-by: Alexander Viro <aviro@redhat.com>

commit e825196d48d2b89a6ec3a8eff280098d2a78207e
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Mar 23 00:28:40 2014 -0400

    make prepend_name() work correctly when called with negative *buflen

    In all callchains leading to prepend_name(), the value left in *buflen
    is eventually discarded unused if prepend_name() has returned a negative.
    So we are free to do what prepend() does, and subtract from *buflen
    *before* checking for underflow (which turns into checking the sign
    of subtraction result, of course).

    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/dcache.c b/fs/dcache.c
index f980b1d..503c9dd 100644
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@ -2683,9 +2683,9 @@ static int prepend_name(char **buffer, int *buflen, struct qstr *name)
  u32 dlen = ACCESS_ONCE(name->len);
  char *p;
 
- if (*buflen < dlen + 1)
-  return -ENAMETOOLONG;
  *buflen -= dlen + 1;
+ if (*buflen < 0)
+  return -ENAMETOOLONG;
  p = *buffer -= dlen + 1;
  *p++ = '/';
  while (dlen--) {
-- 
1.7.1