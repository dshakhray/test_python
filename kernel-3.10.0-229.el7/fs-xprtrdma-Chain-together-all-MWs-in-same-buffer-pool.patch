From 2ddfcd850de26b826c00e2ff4ea1b13ac3b8aaf1 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:04 -0400
Subject: [fs] xprtrdma: Chain together all MWs in same buffer pool

Message-id: <1411050057-12417-42-git-send-email-steved@redhat.com>
Patchwork-id: 96226
O-Subject: [RHEL7.1 PATCH 41/94] xprtrdma: Chain together all MWs in same buffer pool
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Chuck Lever <chuck.lever@oracle.com>

During connection loss recovery, need to visit every MW in a
buffer pool. Any MW that is in use by an RPC will not be on the
rb_mws list.

Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
Tested-by: Steve Wise <swise@opengridcomputing.com>
Tested-by: Shirley Ma <shirley.ma@oracle.com>
Tested-by: Devesh Sharma <devesh.sharma@emulex.com>
Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
Upstream Id: 3111d72c7ced444b1034f6e365e0e02444c68aa8
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/sunrpc/xprtrdma/verbs.c b/net/sunrpc/xprtrdma/verbs.c
index b670f4d..0ad7d10 100644
--- a/net/sunrpc/xprtrdma/verbs.c
+++ b/net/sunrpc/xprtrdma/verbs.c
@@ -1074,6 +1074,7 @@ rpcrdma_buffer_create(struct rpcrdma_buffer *buf, struct rpcrdma_ep *ep,
  p += cdata->padding;
 
  INIT_LIST_HEAD(&buf->rb_mws);
+ INIT_LIST_HEAD(&buf->rb_all);
  r = (struct rpcrdma_mw *)p;
  switch (ia->ri_memreg_strategy) {
  case RPCRDMA_FRMR:
@@ -1098,6 +1099,7 @@ rpcrdma_buffer_create(struct rpcrdma_buffer *buf, struct rpcrdma_ep *ep,
     ib_dereg_mr(r->r.frmr.fr_mr);
     goto out;
    }
+   list_add(&r->mw_all, &buf->rb_all);
    list_add(&r->mw_list, &buf->rb_mws);
    ++r;
   }
@@ -1116,6 +1118,7 @@ rpcrdma_buffer_create(struct rpcrdma_buffer *buf, struct rpcrdma_ep *ep,
      " failed %i\n", __func__, rc);
     goto out;
    }
+   list_add(&r->mw_all, &buf->rb_all);
    list_add(&r->mw_list, &buf->rb_mws);
    ++r;
   }
@@ -1225,6 +1228,7 @@ rpcrdma_buffer_destroy(struct rpcrdma_buffer *buf)
  while (!list_empty(&buf->rb_mws)) {
   r = list_entry(buf->rb_mws.next,
    struct rpcrdma_mw, mw_list);
+  list_del(&r->mw_all);
   list_del(&r->mw_list);
   switch (ia->ri_memreg_strategy) {
   case RPCRDMA_FRMR:
diff --git a/net/sunrpc/xprtrdma/xprt_rdma.h b/net/sunrpc/xprtrdma/xprt_rdma.h
index 84c3455..c1d8652 100644
--- a/net/sunrpc/xprtrdma/xprt_rdma.h
+++ b/net/sunrpc/xprtrdma/xprt_rdma.h
@@ -151,7 +151,7 @@ struct rpcrdma_rep {
  * An external memory region is any buffer or page that is registered
  * on the fly (ie, not pre-registered).
  *
- * Each rpcrdma_buffer has a list of these anchored in rb_mws. During
+ * Each rpcrdma_buffer has a list of free MWs anchored in rb_mws. During
  * call_allocate, rpcrdma_buffer_get() assigns one to each segment in
  * an rpcrdma_req. Then rpcrdma_register_external() grabs these to keep
  * track of registration metadata while each RPC is pending.
@@ -175,6 +175,7 @@ struct rpcrdma_mw {
   struct rpcrdma_frmr frmr;
  } r;
  struct list_head mw_list;
+ struct list_head mw_all;
 };
 
 /*
@@ -246,6 +247,7 @@ struct rpcrdma_buffer {
  atomic_t rb_credits; /* most recent server credits */
  int  rb_max_requests;/* client max requests */
  struct list_head rb_mws; /* optional memory windows/fmrs/frmrs */
+ struct list_head rb_all;
  int  rb_send_index;
  struct rpcrdma_req **rb_send_bufs;
  int  rb_recv_index;
-- 
1.7.1