From 5b8e3ca4c65d1f987e20db089d0026a05b8317f1 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:38 -0400
Subject: [md] dm-mpath: remove extra nesting in map function

Message-id: <1405543364-20901-35-git-send-email-snitzer@redhat.com>
Patchwork-id: 85917
O-Subject: [RHEL7.1 PATCH 34/40] dm mpath: remove extra nesting in map function
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1117872

Upstream commit 9bf59a611a5eb479f321fae34adc9f948de0a42f
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Feb 28 15:33:48 2014 +0100

    dm mpath: remove extra nesting in map function

    Return early for case when no path exists, and when the
    pathgroup isn't ready. This eliminates the need for
    extra nesting for the the common case.

    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Hannes Reinecke <hare@suse.de>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-mpath.c b/drivers/md/dm-mpath.c
index c626feb..3159ee1 100644
--- a/drivers/md/dm-mpath.c
+++ b/drivers/md/dm-mpath.c
@@ -398,29 +398,31 @@ static int multipath_map(struct dm_target *ti, struct request *clone,
 
  pgpath = m->current_pgpath;
 
- if (pgpath) {
-  if (pg_ready(m)) {
-   if (set_mapinfo(m, map_context) < 0)
-    /* ENOMEM, requeue */
-    goto out_unlock;
-
-   bdev = pgpath->path.dev->bdev;
-   clone->q = bdev_get_queue(bdev);
-   clone->rq_disk = bdev->bd_disk;
-   clone->cmd_flags |= REQ_FAILFAST_TRANSPORT;
-   mpio = map_context->ptr;
-   mpio->pgpath = pgpath;
-   mpio->nr_bytes = nr_bytes;
-   if (pgpath->pg->ps.type->start_io)
-    pgpath->pg->ps.type->start_io(&pgpath->pg->ps,
-             &pgpath->path,
-             nr_bytes);
-   r = DM_MAPIO_REMAPPED;
-   goto out_unlock;
-  }
+ if (!pgpath) {
+  if (!__must_push_back(m))
+   r = -EIO; /* Failed */
+  goto out_unlock;
+ }
+ if (!pg_ready(m)) {
   __pg_init_all_paths(m);
- } else if (!__must_push_back(m))
-  r = -EIO; /* Failed */
+  goto out_unlock;
+ }
+ if (set_mapinfo(m, map_context) < 0)
+  /* ENOMEM, requeue */
+  goto out_unlock;
+
+ bdev = pgpath->path.dev->bdev;
+ clone->q = bdev_get_queue(bdev);
+ clone->rq_disk = bdev->bd_disk;
+ clone->cmd_flags |= REQ_FAILFAST_TRANSPORT;
+ mpio = map_context->ptr;
+ mpio->pgpath = pgpath;
+ mpio->nr_bytes = nr_bytes;
+ if (pgpath->pg->ps.type->start_io)
+  pgpath->pg->ps.type->start_io(&pgpath->pg->ps,
+           &pgpath->path,
+           nr_bytes);
+ r = DM_MAPIO_REMAPPED;
 
 out_unlock:
  spin_unlock_irqrestore(&m->lock, flags);
-- 
1.7.1