From aebf65b79169e4a58ad6877d83dbd292c6a2f3a4 Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Thu, 21 Aug 2014 13:06:02 -0400
Subject: [ethernet] qlcnic: Update poll controller code path

Message-id: <1408626422-3941-79-git-send-email-cdupuis@redhat.com>
Patchwork-id: 88603
O-Subject: [PATCH RHEL 7.1 078/138] qlcnic: Update poll controller code path
Bugzilla: 1089352
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Manish chopra <manish.chopra@qlogic.com>

Bug 1089352 (https://bugzilla.redhat.com/show_bug.cgi?id=1089352)

net commit id 2b018ad9fe26de71c56c9cfdec164cdf89cb6a1a

Add support for MSI/MSI-X mode in poll controller routine.

Signed-off-by: Manish Chopra <manish.chopra@qlogic.com>
Signed-off-by: Shahed Shaikh <shahed.shaikh@qlogic.com>
Signed-off-by: Himanshu Madhani <himanshu.madhani@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
index 20b47ce..ba973a3 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
@@ -2921,17 +2921,39 @@ static irqreturn_t qlcnic_msix_tx_intr(int irq, void *data)
 #ifdef CONFIG_NET_POLL_CONTROLLER
 static void qlcnic_poll_controller(struct net_device *netdev)
 {
- int ring;
- struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_adapter *adapter = netdev_priv(netdev);
- struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
+ struct qlcnic_host_sds_ring *sds_ring;
+ struct qlcnic_recv_context *recv_ctx;
+ struct qlcnic_host_tx_ring *tx_ring;
+ int ring;
+
+ if (!test_bit(__QLCNIC_DEV_UP, &adapter->state))
+  return;
+
+ recv_ctx = adapter->recv_ctx;
 
- disable_irq(adapter->irq);
  for (ring = 0; ring < adapter->drv_sds_rings; ring++) {
   sds_ring = &recv_ctx->sds_rings[ring];
-  qlcnic_intr(adapter->irq, sds_ring);
+  qlcnic_disable_sds_intr(adapter, sds_ring);
+  napi_schedule(&sds_ring->napi);
+ }
+
+ if (adapter->flags & QLCNIC_MSIX_ENABLED) {
+  /* Only Multi-Tx queue capable devices need to
+   * schedule NAPI for TX rings
+   */
+  if ((qlcnic_83xx_check(adapter) &&
+       (adapter->flags & QLCNIC_TX_INTR_SHARED)) ||
+      (qlcnic_82xx_check(adapter) &&
+       !qlcnic_check_multi_tx(adapter)))
+   return;
+
+  for (ring = 0; ring < adapter->drv_tx_rings; ring++) {
+   tx_ring = &adapter->tx_ring[ring];
+   qlcnic_disable_tx_intr(adapter, tx_ring);
+   napi_schedule(&tx_ring->napi);
+  }
  }
- enable_irq(adapter->irq);
 }
 #endif
 
-- 
1.7.1