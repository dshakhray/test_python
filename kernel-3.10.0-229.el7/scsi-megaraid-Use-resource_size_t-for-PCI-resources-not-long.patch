From 318af21810e1bb53acebee0a73b3e956659fb8ec Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Thu, 18 Sep 2014 14:14:03 -0400
Subject: [scsi] megaraid: Use resource_size_t for PCI resources, not long

Message-id: <1411049668-28841-4-git-send-email-thenzl@redhat.com>
Patchwork-id: 96171
O-Subject: [RHEL7.1 e-stor PATCH 03/28] megaraid: Use resource_size_t for PCI resources, not long
Bugzilla: 1088523
RH-Acked-by: Ewan Milne <emilne@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

The assumption that sizeof(long) >= sizeof(resource_size_t) can lead to
truncation of the PCI resource address, meaning this driver didn't work
on 32-bit systems with 64-bit PCI adressing ranges.

Signed-off-by: Ben Collins <ben.c@servergy.com>
Acked-by: Sumit Saxena <sumit.saxena@lsi.com>
Signed-off-by: James Bottomley <JBottomley@Parallels.com>
(cherry picked from commit 11f8a7b31f2140b0dc164bb484281235ffbe51d3)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/megaraid/megaraid_sas.h b/drivers/scsi/megaraid/megaraid_sas.h
index 5870aec..a80e13e 100644
--- a/drivers/scsi/megaraid/megaraid_sas.h
+++ b/drivers/scsi/megaraid/megaraid_sas.h
@@ -1533,7 +1533,6 @@ struct megasas_instance {
  u32 *reply_queue;
  dma_addr_t reply_queue_h;
 
- unsigned long base_addr;
  struct megasas_register_set __iomem *reg_set;
  u32 *reply_post_host_index_addr[MR_MAX_MSIX_REG_ARRAY];
  struct megasas_pd_list          pd_list[MEGASAS_MAX_PD];
diff --git a/drivers/scsi/megaraid/megaraid_sas_base.c b/drivers/scsi/megaraid/megaraid_sas_base.c
index e1eeaad..030a844 100644
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@ -3632,6 +3632,7 @@ static int megasas_init_fw(struct megasas_instance *instance)
  u32 max_sectors_1;
  u32 max_sectors_2;
  u32 tmp_sectors, msix_enable, scratch_pad_2;
+ resource_size_t base_addr;
  struct megasas_register_set __iomem *reg_set;
  struct megasas_ctrl_info *ctrl_info;
  unsigned long bar_list;
@@ -3640,14 +3641,14 @@ static int megasas_init_fw(struct megasas_instance *instance)
  /* Find first memory bar */
  bar_list = pci_select_bars(instance->pdev, IORESOURCE_MEM);
  instance->bar = find_first_bit(&bar_list, sizeof(unsigned long));
- instance->base_addr = pci_resource_start(instance->pdev, instance->bar);
  if (pci_request_selected_regions(instance->pdev, instance->bar,
       "megasas: LSI")) {
   printk(KERN_DEBUG "megasas: IO memory region busy!\n");
   return -EBUSY;
  }
 
- instance->reg_set = ioremap_nocache(instance->base_addr, 8192);
+ base_addr = pci_resource_start(instance->pdev, instance->bar);
+ instance->reg_set = ioremap_nocache(base_addr, 8192);
 
  if (!instance->reg_set) {
   printk(KERN_DEBUG "megasas: Failed to map IO mem\n");
-- 
1.7.1