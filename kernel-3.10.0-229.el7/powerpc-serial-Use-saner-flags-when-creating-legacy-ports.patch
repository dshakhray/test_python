From 4defa18a51066937d627f87217894ad84e210e64 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:12:55 -0400
Subject: [powerpc] serial: Use saner flags when creating legacy ports

Message-id: <1410545655-205645-547-git-send-email-dzickus@redhat.com>
Patchwork-id: 94596
O-Subject: [RHEL7 PATCH 546/626] powerpc/serial: Use saner flags when creating legacy ports
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit c4cad90f9e9dcb85afc5e75a02ae3522ed077296
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Tue Jun 3 17:33:41 2014 +1000

    powerpc/serial: Use saner flags when creating legacy ports

    We had a mix & match of flags used when creating legacy ports
    depending on where we found them in the device-tree. Among others
    we were missing UPF_SKIP_TEST for some kind of ISA ports which is
    a problem as quite a few UARTs out there don't support the loopback
    test (such as a lot of BMCs).

    Let's pick the set of flags used by the SoC code and generalize it
    which means autoconf, no loopback test, irq maybe shared and fixed
    port.

    Sending to stable as the lack of UPF_SKIP_TEST is breaking
    serial on some machines so I want this back into distros

    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    CC: stable@vger.kernel.org
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/legacy_serial.c b/arch/powerpc/kernel/legacy_serial.c
index 40bd7bd..8a8b722 100644
--- a/arch/powerpc/kernel/legacy_serial.c
+++ b/arch/powerpc/kernel/legacy_serial.c
@@ -48,6 +48,9 @@ static struct of_device_id legacy_serial_parents[] __initdata = {
 static unsigned int legacy_serial_count;
 static int legacy_serial_console = -1;
 
+static const upf_t legacy_port_flags = UPF_BOOT_AUTOCONF | UPF_SKIP_TEST |
+ UPF_SHARE_IRQ | UPF_FIXED_PORT;
+
 static unsigned int tsi_serial_in(struct uart_port *p, int offset)
 {
  unsigned int tmp;
@@ -153,8 +156,6 @@ static int __init add_legacy_soc_port(struct device_node *np,
 {
  u64 addr;
  const __be32 *addrp;
- upf_t flags = UPF_BOOT_AUTOCONF | UPF_SKIP_TEST | UPF_SHARE_IRQ
-  | UPF_FIXED_PORT;
  struct device_node *tsi = of_get_parent(np);
 
  /* We only support ports that have a clock frequency properly
@@ -185,9 +186,11 @@ static int __init add_legacy_soc_port(struct device_node *np,
   * IO port value. It will be fixed up later along with the irq
   */
  if (tsi && !strcmp(tsi->type, "tsi-bridge"))
-  return add_legacy_port(np, -1, UPIO_TSI, addr, addr, NO_IRQ, flags, 0);
+  return add_legacy_port(np, -1, UPIO_TSI, addr, addr,
+           NO_IRQ, legacy_port_flags, 0);
  else
-  return add_legacy_port(np, -1, UPIO_MEM, addr, addr, NO_IRQ, flags, 0);
+  return add_legacy_port(np, -1, UPIO_MEM, addr, addr,
+           NO_IRQ, legacy_port_flags, 0);
 }
 
 static int __init add_legacy_isa_port(struct device_node *np,
@@ -233,7 +236,7 @@ static int __init add_legacy_isa_port(struct device_node *np,
 
  /* Add port, irq will be dealt with later */
  return add_legacy_port(np, index, UPIO_PORT, be32_to_cpu(reg[1]),
-          taddr, NO_IRQ, UPF_BOOT_AUTOCONF, 0);
+          taddr, NO_IRQ, legacy_port_flags, 0);
 
 }
 
@@ -306,7 +309,7 @@ static int __init add_legacy_pci_port(struct device_node *np,
   * IO port value. It will be fixed up later along with the irq
   */
  return add_legacy_port(np, index, iotype, base, addr, NO_IRQ,
-          UPF_BOOT_AUTOCONF, np != pci_dev);
+          legacy_port_flags, np != pci_dev);
 }
 #endif
 
-- 
1.7.1