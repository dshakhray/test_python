From fe1b27ab1149ac8965aca7d76ebdf89a5223e9f4 Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:25:25 -0400
Subject: [md] fix some places where mddev_lock return value is not checked

Message-id: <1409563584-9000-24-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 89966
O-Subject: [RHEL7.1 PATCH 23/82] md: fix some places where mddev_lock return value is not checked.
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: NeilBrown <neilb@suse.de>

Sometimes we need to lock and mddev and cannot cope with
failure due to interrupt.
In these cases we should use mutex_lock, not mutex_lock_interruptible.

Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit 29f097c4d968021ee4fad1b033be5825ff78330e)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/md.c b/drivers/md/md.c
index 3b62b01..e61b5df 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -562,11 +562,19 @@ static struct mddev * mddev_find(dev_t unit)
  goto retry;
 }
 
-static inline int mddev_lock(struct mddev * mddev)
+static inline int __must_check mddev_lock(struct mddev * mddev)
 {
  return mutex_lock_interruptible(&mddev->reconfig_mutex);
 }
 
+/* Sometimes we need to take the lock in a situation where
+ * failure due to interrupts is not acceptable.
+ */
+static inline void mddev_lock_nointr(struct mddev * mddev)
+{
+ mutex_lock(&mddev->reconfig_mutex);
+}
+
 static inline int mddev_is_locked(struct mddev *mddev)
 {
  return mutex_is_locked(&mddev->reconfig_mutex);
@@ -2990,7 +2998,7 @@ rdev_size_store(struct md_rdev *rdev, const char *buf, size_t len)
   for_each_mddev(mddev, tmp) {
    struct md_rdev *rdev2;
 
-   mddev_lock(mddev);
+   mddev_lock_nointr(mddev);
    rdev_for_each(rdev2, mddev)
     if (rdev->bdev == rdev2->bdev &&
         rdev != rdev2 &&
@@ -3006,7 +3014,7 @@ rdev_size_store(struct md_rdev *rdev, const char *buf, size_t len)
     break;
    }
   }
-  mddev_lock(my_mddev);
+  mddev_lock_nointr(my_mddev);
   if (overlap) {
    /* Someone else could have slipped in a size
     * change here, but doing so is just silly.
@@ -5271,7 +5279,7 @@ static void __md_stop_writes(struct mddev *mddev)
 
 void md_stop_writes(struct mddev *mddev)
 {
- mddev_lock(mddev);
+ mddev_lock_nointr(mddev);
  __md_stop_writes(mddev);
  mddev_unlock(mddev);
 }
@@ -6560,7 +6568,7 @@ static int md_ioctl(struct block_device *bdev, fmode_t mode,
     wait_event(mddev->sb_wait,
         !test_bit(MD_CHANGE_DEVS, &mddev->flags) &&
         !test_bit(MD_CHANGE_PENDING, &mddev->flags));
-    mddev_lock(mddev);
+    mddev_lock_nointr(mddev);
    }
   } else {
    err = -EROFS;
-- 
1.7.1