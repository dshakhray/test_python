From c78fa74950a053e01982559124e670f2b87b83fa Mon Sep 17 00:00:00 2001
From: Sai Vemuri <svemuri@redhat.com>
Date: Thu, 11 Sep 2014 22:42:50 -0400
Subject: [infiniband] cxgb4: Save the correct map length for fast_reg_page_lists

Message-id: <1410475447-94392-32-git-send-email-svemuri@redhat.com>
Patchwork-id: 93836
O-Subject: [RHEL7.1 PATCH BZ 1124947 031/108] RDMA/cxgb4: Save the correct map length for fast_reg_page_lists
Bugzilla: 1124947
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

We cannot save the mapped length using the rdma max_page_list_len field
of the ib_fast_reg_page_list struct because the core code uses it.  This
results in an incorrect unmap of the page list in c4iw_free_fastreg_pbl().

I found this with dma mapping debugging enabled in the kernel.  The
fix is to save the length in the c4iw_fr_page_list struct.

Signed-off-by: Steve Wise <swise@opengridcomputing.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit eda6d1d1b7932f90d55583f8f3835dd7d6b32543)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/hw/cxgb4/iw_cxgb4.h b/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
index bf28ef8..e872203 100644
--- a/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
+++ b/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
@@ -373,6 +373,7 @@ struct c4iw_fr_page_list {
  DEFINE_DMA_UNMAP_ADDR(mapping);
  dma_addr_t dma_addr;
  struct c4iw_dev *dev;
+ int pll_len;
 };
 
 static inline struct c4iw_fr_page_list *to_c4iw_fr_page_list(
diff --git a/drivers/infiniband/hw/cxgb4/mem.c b/drivers/infiniband/hw/cxgb4/mem.c
index 392d422..a5db32c 100644
--- a/drivers/infiniband/hw/cxgb4/mem.c
+++ b/drivers/infiniband/hw/cxgb4/mem.c
@@ -898,7 +898,11 @@ struct ib_fast_reg_page_list *c4iw_alloc_fastreg_pbl(struct ib_device *device,
  dma_unmap_addr_set(c4pl, mapping, dma_addr);
  c4pl->dma_addr = dma_addr;
  c4pl->dev = dev;
- c4pl->ibpl.max_page_list_len = pll_len;
+ c4pl->pll_len = pll_len;
+
+ PDBG("%s c4pl %p pll_len %u page_list %p dma_addr %pad\n",
+      __func__, c4pl, c4pl->pll_len, c4pl->ibpl.page_list,
+      &c4pl->dma_addr);
 
  return &c4pl->ibpl;
 }
@@ -907,8 +911,12 @@ void c4iw_free_fastreg_pbl(struct ib_fast_reg_page_list *ibpl)
 {
  struct c4iw_fr_page_list *c4pl = to_c4iw_fr_page_list(ibpl);
 
+ PDBG("%s c4pl %p pll_len %u page_list %p dma_addr %pad\n",
+      __func__, c4pl, c4pl->pll_len, c4pl->ibpl.page_list,
+      &c4pl->dma_addr);
+
  dma_free_coherent(&c4pl->dev->rdev.lldi.pdev->dev,
-     c4pl->ibpl.max_page_list_len,
+     c4pl->pll_len,
      c4pl->ibpl.page_list, dma_unmap_addr(c4pl, mapping));
  kfree(c4pl);
 }
-- 
1.7.1