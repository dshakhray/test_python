From b0d179c6446de83b7d4de605123ae7b2c30b399b Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:10:43 -0400
Subject: [usb] pl2303: fix data corruption on termios updates

Message-id: <1410887463-20674-572-git-send-email-dzickus@redhat.com>
Patchwork-id: 95454
O-Subject: [RHEL7 PATCH 571/591] USB: pl2303: fix data corruption on termios updates
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 623c8263376c0b8a4b0c220232e7313d762cd0cc
Author: Johan Hovold <jhovold@gmail.com>
Date:   Sun Dec 29 19:22:53 2013 +0100

    USB: pl2303: fix data corruption on termios updates

    Some PL2303 devices are known to lose bytes if you change serial
    settings even to the same values as before. Avoid this by comparing the
    encoded settings with the previsouly used ones before configuring the
    device.

    The common case was fixed by commit bf5e5834bffc6 ("pl2303: Fix mode
    switching regression"), but this problem was still possible to trigger,
    for instance, by using the TCSETS2-interface to repeatedly request
    115201 baud, which gets mapped to 115200 and thus always triggers a
    settings update.

    Cc: Frank Schafer <fschaefer.oss@googlemail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/pl2303.c b/drivers/usb/serial/pl2303.c
index 0e7199f..1ad2a24 100644
--- a/drivers/usb/serial/pl2303.c
+++ b/drivers/usb/serial/pl2303.c
@@ -138,6 +138,8 @@ struct pl2303_private {
  spinlock_t lock;
  u8 line_control;
  u8 line_status;
+
+ u8 line_settings[7];
 };
 
 static int pl2303_vendor_read(struct usb_serial *serial, u16 value,
@@ -355,11 +357,6 @@ static void pl2303_set_termios(struct tty_struct *tty,
  int i;
  u8 control;
 
- /*
-  * The PL2303 is reported to lose bytes if you change serial settings
-  * even to the same values as before. Thus we actually need to filter
-  * in this specific case.
-  */
  if (old_termios && !tty_termios_hw_change(&tty->termios, old_termios))
   return;
 
@@ -445,10 +442,29 @@ static void pl2303_set_termios(struct tty_struct *tty,
   dev_dbg(&port->dev, "parity = none\n");
  }
 
- i = usb_control_msg(serial->dev, usb_sndctrlpipe(serial->dev, 0),
-       SET_LINE_REQUEST, SET_LINE_REQUEST_TYPE,
-       0, 0, buf, 7, 100);
- dev_dbg(&port->dev, "0x21:0x20:0:0  %d\n", i);
+ /*
+  * Some PL2303 are known to lose bytes if you change serial settings
+  * even to the same values as before. Thus we actually need to filter
+  * in this specific case.
+  *
+  * Note that the tty_termios_hw_change check above is not sufficient
+  * as a previously requested baud rate may differ from the one
+  * actually used (and stored in old_termios).
+  *
+  * NOTE: No additional locking needed for line_settings as it is
+  *       only used in set_termios, which is serialised against itself.
+  */
+ if (!old_termios || memcmp(buf, priv->line_settings, 7)) {
+  i = usb_control_msg(serial->dev,
+        usb_sndctrlpipe(serial->dev, 0),
+        SET_LINE_REQUEST, SET_LINE_REQUEST_TYPE,
+        0, 0, buf, 7, 100);
+
+  dev_dbg(&port->dev, "0x21:0x20:0:0  %d\n", i);
+
+  if (i == 7)
+   memcpy(priv->line_settings, buf, 7);
+ }
 
  /* change control lines if we are switching to or from B0 */
  spin_lock_irqsave(&priv->lock, flags);
-- 
1.7.1