From 0350a4865d1d49b9c355000d0b3b1e3edf130211 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:13 -0400
Subject: [fs] ext4: pass inode pointer instead of file pointer to punch hole

Message-id: <1414058125-4183-40-git-send-email-lczerner@redhat.com>
Patchwork-id: 98142
O-Subject: [RHEL 7.1 PATCH v2 039/171] ext4: pass inode pointer instead of file pointer to punch hole
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Ashish Sangwan <a.sangwan@samsung.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit aeb2817a4ea99f62532adf3377be3b282d3bda12

 No need to pass file pointer when we can directly pass inode pointer.

 Signed-off-by: Ashish Sangwan <a.sangwan@samsung.com>
 Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index de42413..c2ebcb8 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2096,7 +2096,7 @@ extern int ext4_get_inode_loc(struct inode *, struct ext4_iloc *);
 extern int ext4_inode_attach_jinode(struct inode *inode);
 extern int ext4_can_truncate(struct inode *inode);
 extern void ext4_truncate(struct inode *);
-extern int ext4_punch_hole(struct file *file, loff_t offset, loff_t length);
+extern int ext4_punch_hole(struct inode *inode, loff_t offset, loff_t length);
 extern int ext4_truncate_restart_trans(handle_t *, struct inode *, int nblocks);
 extern void ext4_set_inode_flags(struct inode *);
 extern void ext4_get_inode_flags(struct ext4_inode_info *);
diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 97c6fd7..4fb53f2 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -4484,7 +4484,7 @@ long ext4_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
   return -EOPNOTSUPP;
 
  if (mode & FALLOC_FL_PUNCH_HOLE)
-  return ext4_punch_hole(file, offset, len);
+  return ext4_punch_hole(inode, offset, len);
 
  ret = ext4_convert_inline_data(inode);
  if (ret)
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index ed25c0a..dbb1105 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -3488,9 +3488,8 @@ int ext4_can_truncate(struct inode *inode)
  * Returns: 0 on success or negative on failure
  */
 
-int ext4_punch_hole(struct file *file, loff_t offset, loff_t length)
+int ext4_punch_hole(struct inode *inode, loff_t offset, loff_t length)
 {
- struct inode *inode = file_inode(file);
  struct super_block *sb = inode->i_sb;
  ext4_lblk_t first_block, stop_block;
  struct address_space *mapping = inode->i_mapping;
-- 
1.7.1