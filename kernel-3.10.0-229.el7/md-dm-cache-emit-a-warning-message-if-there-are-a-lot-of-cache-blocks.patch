From 318cf94671e05aa41586e945fa2c9d5397b21469 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Thu, 13 Nov 2014 14:59:17 -0500
Subject: [md] dm-cache: emit a warning message if there are a lot of cache blocks

Message-id: <20141113145917.GA30065@redhat.com>
Patchwork-id: 99948
O-Subject: [RHEL7.1 PATCH 8/9 v2] dm cache: emit a warning message if there are a lot of cache blocks
Bugzilla: 1159001
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1159001

v2: adds check to see if size changed, prevents redundant messages

Upstream linux-dm.git commit d22b6a891053622de6a319d2bd9005e5fe2c05a8
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Nov 11 11:58:32 2014 +0000

    dm cache: emit a warning message if there are a lot of cache blocks

    Loading and saving millions of block mappings takes time.  We may as
    well explain what's going on, and encourage people to use a larger
    cache block size.

    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-cache-target.c b/drivers/md/dm-cache-target.c
index e336c72..8369b73 100644
--- a/drivers/md/dm-cache-target.c
+++ b/drivers/md/dm-cache-target.c
@@ -2295,6 +2295,19 @@ static sector_t calculate_discard_block_size(sector_t cache_block_size,
  return discard_block_size;
 }
 
+static void set_cache_size(struct cache *cache, dm_cblock_t size)
+{
+ dm_block_t nr_blocks = from_cblock(size);
+
+ if (nr_blocks > (1 << 20) && cache->cache_size != size)
+  DMWARN_LIMIT("You have created a cache device with a lot of individual cache blocks (%llu)\n"
+        "All these mappings can consume a lot of kernel memory, and take some time to read/write.\n"
+        "Please consider increasing the cache block size to reduce the overall cache block count.",
+        (unsigned long long) nr_blocks);
+
+ cache->cache_size = size;
+}
+
 #define DEFAULT_MIGRATION_THRESHOLD 2048
 
 static int cache_create(struct cache_args *ca, struct cache **result)
@@ -2350,10 +2363,10 @@ static int cache_create(struct cache_args *ca, struct cache **result)
 
   cache->sectors_per_block_shift = -1;
   cache_size = block_div(cache_size, ca->block_size);
-  cache->cache_size = to_cblock(cache_size);
+  set_cache_size(cache, to_cblock(cache_size));
  } else {
   cache->sectors_per_block_shift = __ffs(ca->block_size);
-  cache->cache_size = to_cblock(ca->cache_sectors >> cache->sectors_per_block_shift);
+  set_cache_size(cache, to_cblock(ca->cache_sectors >> cache->sectors_per_block_shift));
  }
 
  r = create_cache_policy(cache, ca, error);
@@ -2855,7 +2868,7 @@ static int resize_cache_dev(struct cache *cache, dm_cblock_t new_size)
   return r;
  }
 
- cache->cache_size = new_size;
+ set_cache_size(cache, new_size);
 
  return 0;
 }
-- 
1.7.1