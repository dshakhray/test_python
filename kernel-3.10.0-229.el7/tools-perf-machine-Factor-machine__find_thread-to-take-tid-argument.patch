From ca7ac24d7892ab7f88dd4767950f25d3ee71ddc2 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:05:47 -0400
Subject: [tools] perf/machine: Factor machine__find_thread to take tid argument

Message-id: <1410181752-25631-103-git-send-email-jolsa@redhat.com>
Patchwork-id: 91891
O-Subject: [PATCH RHEL7.1 BZ1134356 102/307] perf machine: Factor machine__find_thread to take tid argument
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit d75e6097ef1f7669deb500fbbdf53cfe524f1b53
Author: Jiri Olsa <jolsa@redhat.com>
Date: Fri Mar 14 15:00:03 2014 +0100

description
===========
Forcing the code to always search thread by pid/tid pair.

The PID value will be needed in future to determine the process thread
leader for map groups sharing.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/tests/dwarf-unwind.c b/tools/perf/tests/dwarf-unwind.c
index f16ea28..c059ee8 100644
--- a/tools/perf/tests/dwarf-unwind.c
+++ b/tools/perf/tests/dwarf-unwind.c
@@ -128,7 +128,7 @@ int test__dwarf_unwind(void)
  if (verbose > 1)
   machine__fprintf(machine, stderr);
 
- thread = machine__find_thread(machine, getpid());
+ thread = machine__find_thread(machine, getpid(), getpid());
  if (!thread) {
   pr_err("Could not get thread\n");
   goto out;
diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index a679953..5cecd98 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -327,9 +327,10 @@ struct thread *machine__findnew_thread(struct machine *machine, pid_t pid,
  return __machine__findnew_thread(machine, pid, tid, true);
 }
 
-struct thread *machine__find_thread(struct machine *machine, pid_t tid)
+struct thread *machine__find_thread(struct machine *machine, pid_t pid,
+        pid_t tid)
 {
- return __machine__findnew_thread(machine, 0, tid, false);
+ return __machine__findnew_thread(machine, pid, tid, false);
 }
 
 int machine__process_comm_event(struct machine *machine, union perf_event *event,
@@ -1114,7 +1115,9 @@ static void machine__remove_thread(struct machine *machine, struct thread *th)
 int machine__process_fork_event(struct machine *machine, union perf_event *event,
     struct perf_sample *sample)
 {
- struct thread *thread = machine__find_thread(machine, event->fork.tid);
+ struct thread *thread = machine__find_thread(machine,
+           event->fork.pid,
+           event->fork.tid);
  struct thread *parent = machine__findnew_thread(machine,
        event->fork.ppid,
        event->fork.ptid);
@@ -1140,7 +1143,9 @@ int machine__process_fork_event(struct machine *machine, union perf_event *event
 int machine__process_exit_event(struct machine *machine, union perf_event *event,
     struct perf_sample *sample __maybe_unused)
 {
- struct thread *thread = machine__find_thread(machine, event->fork.tid);
+ struct thread *thread = machine__find_thread(machine,
+           event->fork.pid,
+           event->fork.tid);
 
  if (dump_trace)
   perf_event__fprintf_task(event, stdout);
diff --git a/tools/perf/util/machine.h b/tools/perf/util/machine.h
index 2e6c248..c8c74a1 100644
--- a/tools/perf/util/machine.h
+++ b/tools/perf/util/machine.h
@@ -41,7 +41,8 @@ struct map *machine__kernel_map(struct machine *machine, enum map_type type)
  return machine->vmlinux_maps[type];
 }
 
-struct thread *machine__find_thread(struct machine *machine, pid_t tid);
+struct thread *machine__find_thread(struct machine *machine, pid_t pid,
+        pid_t tid);
 
 int machine__process_comm_event(struct machine *machine, union perf_event *event,
     struct perf_sample *sample);
-- 
1.7.1