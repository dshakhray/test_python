From 48ec8e7c0466df68baa89f5e61b7da34fdb594ce Mon Sep 17 00:00:00 2001
From: Jason Wang <jasowang@redhat.com>
Date: Mon, 29 Sep 2014 00:58:57 -0400
Subject: [virt] hyperv/net: Enable receive side IP checksum offload

Message-id: <1411952358-34104-14-git-send-email-jasowang@redhat.com>
Patchwork-id: 96763
O-Subject: [RHEL7.1 PATCH 13/34] Drivers: net: hyperv: Enable receive side IP checksum offload
Bugzilla: 1146357
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Vitaly Kuznetsov <vkuznets@redhat.com>

From: KY Srinivasan <kys@microsoft.com>

Bugzilla: 1146357

Enable receive side checksum offload.

Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e3d605ed441cf4d113f9a1cf9e1b3f7cabe0d781)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/hyperv/hyperv_net.h b/drivers/net/hyperv/hyperv_net.h
index 3cba488..90ff974 100644
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@ -31,6 +31,7 @@
 
 /* Fwd declaration */
 struct hv_netvsc_packet;
+struct ndis_tcp_ip_checksum_info;
 
 /* Represent the xfer page packet which contains 1 or more netvsc packet */
 struct xferpage_packet {
@@ -118,7 +119,8 @@ int netvsc_send(struct hv_device *device,
 void netvsc_linkstatus_callback(struct hv_device *device_obj,
     unsigned int status);
 int netvsc_recv_callback(struct hv_device *device_obj,
-   struct hv_netvsc_packet *packet);
+   struct hv_netvsc_packet *packet,
+   struct ndis_tcp_ip_checksum_info *csum_info);
 int rndis_filter_open(struct hv_device *dev);
 int rndis_filter_close(struct hv_device *dev);
 int rndis_filter_device_add(struct hv_device *dev,
@@ -778,9 +780,38 @@ struct ndis_offload_params {
  };
 };
 
+struct ndis_tcp_ip_checksum_info {
+ union {
+  struct {
+   u32 is_ipv4:1;
+   u32 is_ipv6:1;
+   u32 tcp_checksum:1;
+   u32 udp_checksum:1;
+   u32 ip_header_checksum:1;
+   u32 reserved:11;
+   u32 tcp_header_offset:10;
+  } transmit;
+  struct {
+   u32 tcp_checksum_failed:1;
+   u32 udp_checksum_failed:1;
+   u32 ip_checksum_failed:1;
+   u32 tcp_checksum_succeeded:1;
+   u32 udp_checksum_succeeded:1;
+   u32 ip_checksum_succeeded:1;
+   u32 loopback:1;
+   u32 tcp_checksum_value_invalid:1;
+   u32 ip_checksum_value_invalid:1;
+  } receive;
+  u32  value;
+ };
+};
+
 #define NDIS_VLAN_PPI_SIZE (sizeof(struct rndis_per_packet_info) + \
   sizeof(struct ndis_pkt_8021q_info))
 
+#define NDIS_CSUM_PPI_SIZE (sizeof(struct rndis_per_packet_info) + \
+  sizeof(struct ndis_tcp_ip_checksum_info))
+
 /* Format of Information buffer passed in a SetRequest for the OID */
 /* OID_GEN_RNDIS_CONFIG_PARAMETER. */
 struct rndis_config_parameter_info {
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index 2a4df82..dedc5a1 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -392,7 +392,8 @@ void netvsc_linkstatus_callback(struct hv_device *device_obj,
  * "wire" on the specified device.
  */
 int netvsc_recv_callback(struct hv_device *device_obj,
-    struct hv_netvsc_packet *packet)
+    struct hv_netvsc_packet *packet,
+    struct ndis_tcp_ip_checksum_info *csum_info)
 {
  struct net_device *net;
  struct sk_buff *skb;
@@ -419,7 +420,17 @@ int netvsc_recv_callback(struct hv_device *device_obj,
   packet->total_data_buflen);
 
  skb->protocol = eth_type_trans(skb, net);
- skb->ip_summed = CHECKSUM_NONE;
+ if (csum_info) {
+  /* We only look at the IP checksum here.
+   * Should we be dropping the packet if checksum
+   * failed? How do we deal with other checksums - TCP/UDP?
+   */
+  if (csum_info->receive.ip_checksum_succeeded)
+   skb->ip_summed = CHECKSUM_UNNECESSARY;
+  else
+   skb->ip_summed = CHECKSUM_NONE;
+ }
+
  if (packet->vlan_tci & VLAN_TAG_PRESENT)
   __vlan_hwaccel_put_tag(skb, htons(ETH_P_8021Q),
            packet->vlan_tci);
@@ -581,8 +592,8 @@ static int netvsc_probe(struct hv_device *dev,
  net->netdev_ops = &device_ops;
 
  /* TODO: Add GSO and Checksum offload */
- net->hw_features = NETIF_F_SG;
- net->features = NETIF_F_HW_VLAN_CTAG_TX | NETIF_F_SG;
+ net->hw_features = NETIF_F_RXCSUM | NETIF_F_SG;
+ net->features = NETIF_F_HW_VLAN_CTAG_TX | NETIF_F_SG | NETIF_F_RXCSUM;
 
  SET_ETHTOOL_OPS(net, &ethtool_ops);
  SET_NETDEV_DEV(net, &dev->device);
diff --git a/drivers/net/hyperv/rndis_filter.c b/drivers/net/hyperv/rndis_filter.c
index bab04ce..65bbd9a 100644
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@ -371,6 +371,7 @@ static void rndis_filter_receive_data(struct rndis_device *dev,
  struct rndis_packet *rndis_pkt;
  u32 data_offset;
  struct ndis_pkt_8021q_info *vlan;
+ struct ndis_tcp_ip_checksum_info *csum_info;
 
  rndis_pkt = &msg->msg.pkt;
 
@@ -409,7 +410,8 @@ static void rndis_filter_receive_data(struct rndis_device *dev,
   pkt->vlan_tci = 0;
  }
 
- netvsc_recv_callback(dev->net_dev->dev, pkt);
+ csum_info = rndis_get_ppi(rndis_pkt, TCPIP_CHKSUM_PKTINFO);
+ netvsc_recv_callback(dev->net_dev->dev, pkt, csum_info);
 }
 
 int rndis_filter_receive(struct hv_device *dev,
-- 
1.7.1