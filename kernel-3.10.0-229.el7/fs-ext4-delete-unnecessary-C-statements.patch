From 8558fff3f587b111ec5760cf0aec8fe5fa776c6c Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:14 -0400
Subject: [fs] ext4: delete unnecessary C statements

Message-id: <1414058125-4183-41-git-send-email-lczerner@redhat.com>
Patchwork-id: 98163
O-Subject: [RHEL 7.1 PATCH v2 040/171] ext4: delete unnecessary C statements
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: jon ernst <jonernst07@gmx.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 353eefd3386982ab8f7e14de079ec347dfe05509

 Comparing unsigned variable with 0 always returns false.
 err = 0 is duplicated and unnecessary.

 [ tytso: Also cleaned up error handling in ext4_block_zero_page_range() ]

 Signed-off-by: "Jon Ernst" <jonernst07@gmx.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index dbb1105..dd1cc4a 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -1103,8 +1103,6 @@ static int ext4_write_end(struct file *file,
  if (i_size_changed)
   ext4_mark_inode_dirty(handle, inode);
 
- if (copied < 0)
-  ret = copied;
  if (pos + len > inode->i_size && ext4_can_truncate(inode))
   /* if we have allocated more blocks and copied
    * less. We will have blocks allocated outside
@@ -3372,13 +3370,10 @@ int ext4_block_zero_page_range(handle_t *handle,
   iblock++;
   pos += blocksize;
  }
-
- err = 0;
  if (buffer_freed(bh)) {
   BUFFER_TRACE(bh, "freed: skip");
   goto unlock;
  }
-
  if (!buffer_mapped(bh)) {
   BUFFER_TRACE(bh, "unmapped");
   ext4_get_block(inode, iblock, bh, 0);
@@ -3401,22 +3396,19 @@ int ext4_block_zero_page_range(handle_t *handle,
   if (!buffer_uptodate(bh))
    goto unlock;
  }
-
  if (ext4_should_journal_data(inode)) {
   BUFFER_TRACE(bh, "get write access");
   err = ext4_journal_get_write_access(handle, bh);
   if (err)
    goto unlock;
  }
-
  zero_user(page, offset, length);
-
  BUFFER_TRACE(bh, "zeroed end of block");
 
- err = 0;
  if (ext4_should_journal_data(inode)) {
   err = ext4_handle_dirty_metadata(handle, inode, bh);
  } else {
+  err = 0;
   mark_buffer_dirty(bh);
   if (ext4_test_inode_state(inode, EXT4_STATE_ORDERED_MODE))
    err = ext4_jbd2_file_inode(handle, inode);
-- 
1.7.1