From 5f5f0ed91704c5b64671025599ce4396890f95b6 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Thu, 16 Jan 2014 15:19:46 -0500
Subject: [lib] crc32: add test cases for crc32{, c}_combine routines

Message-id: <3ffbcceceb61b7ee719e83e82dca00e269c3f718.1389878943.git.dborkman@redhat.com>
Patchwork-id: 74351
O-Subject: [RHEL7 PATCH net 06/11] lib: crc32: add test cases for crc32{, c}_combine routines
Bugzilla: 1054215
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: Thomas Graf <tgraf@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1054215
Upstream Status: efba721f636ee016859d86d15748650119402b10
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=6885774
Tested: verified by QA in their IPVS lab and on beaker for basic tests

Upstream Commit:
commit efba721f636ee016859d86d15748650119402b10
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Wed Oct 30 11:50:50 2013 +0100

    lib: crc32: add test cases for crc32{, c}_combine routines

    We already have 100 test cases for crcs itself, so split the test
    buffer with a-prio known checksums, and test crc of two blocks
    against crc of the whole block for the same results.

    Output/result with CONFIG_CRC32_SELFTEST=y:

      [    2.687095] crc32: CRC_LE_BITS = 64, CRC_BE BITS = 64
      [    2.687097] crc32: self tests passed, processed 225944 bytes in 278177 nsec
      [    2.687383] crc32c: CRC_LE_BITS = 64
      [    2.687385] crc32c: self tests passed, processed 225944 bytes in 141708 nsec
      [    7.336771] crc32_combine: 113072 self tests passed
      [   12.050479] crc32c_combine: 113072 self tests passed
      [   17.633089] alg: No test for crc32 (crc32-pclmul)

    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/lib/crc32.c b/lib/crc32.c
index 595205c..69dd124 100644
--- a/lib/crc32.c
+++ b/lib/crc32.c
@@ -1031,6 +1031,40 @@ static int __init crc32c_test(void)
  return 0;
 }
 
+static int __init crc32c_combine_test(void)
+{
+ int i, j;
+ int errors = 0, runs = 0;
+
+ for (i = 0; i < 100; i++) {
+  u32 crc_full;
+
+  crc_full = __crc32c_le(test[i].crc, test_buf + test[i].start,
+           test[i].length);
+  for (j = 0; j <= test[i].length; ++j) {
+   u32 crc1, crc2;
+   u32 len1 = j, len2 = test[i].length - j;
+
+   crc1 = __crc32c_le(test[i].crc, test_buf +
+        test[i].start, len1);
+   crc2 = __crc32c_le(0, test_buf + test[i].start +
+        len1, len2);
+
+   if (!(crc_full == __crc32c_le_combine(crc1, crc2, len2) &&
+         crc_full == test[i].crc32c_le))
+    errors++;
+   runs++;
+  }
+ }
+
+ if (errors)
+  pr_warn("crc32c_combine: %d/%d self tests failed\n", errors, runs);
+ else
+  pr_info("crc32c_combine: %d self tests passed\n", runs);
+
+ return 0;
+}
+
 static int __init crc32_test(void)
 {
  int i;
@@ -1090,10 +1124,48 @@ static int __init crc32_test(void)
  return 0;
 }
 
+static int __init crc32_combine_test(void)
+{
+ int i, j;
+ int errors = 0, runs = 0;
+
+ for (i = 0; i < 100; i++) {
+  u32 crc_full;
+
+  crc_full = crc32_le(test[i].crc, test_buf + test[i].start,
+        test[i].length);
+  for (j = 0; j <= test[i].length; ++j) {
+   u32 crc1, crc2;
+   u32 len1 = j, len2 = test[i].length - j;
+
+   crc1 = crc32_le(test[i].crc, test_buf +
+     test[i].start, len1);
+   crc2 = crc32_le(0, test_buf + test[i].start +
+     len1, len2);
+
+   if (!(crc_full == crc32_le_combine(crc1, crc2, len2) &&
+         crc_full == test[i].crc_le))
+    errors++;
+   runs++;
+  }
+ }
+
+ if (errors)
+  pr_warn("crc32_combine: %d/%d self tests failed\n", errors, runs);
+ else
+  pr_info("crc32_combine: %d self tests passed\n", runs);
+
+ return 0;
+}
+
 static int __init crc32test_init(void)
 {
  crc32_test();
  crc32c_test();
+
+ crc32_combine_test();
+ crc32c_combine_test();
+
  return 0;
 }
 
-- 
1.7.1