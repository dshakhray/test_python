From 8e48f379d7c2fa7cb745d88746254e85a2ae5b39 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 16:14:04 -0400
Subject: [ethernet] be2net: remove be_cmd_get_profile_config_mbox/mccq() variants

Message-id: <1410192881-30702-42-git-send-email-ivecera@redhat.com>
Patchwork-id: 92429
O-Subject: [RHEL7.1 PATCH 41/78] be2net: remove be_cmd_get_profile_config_mbox/mccq() variants
Bugzilla: 1088575
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>

BZ: #1088575

Upstream commit(s):
commit ba48c0c92704c68065ffb07661e4f99c800aeca2
Author: Vasundhara Volam <vasundhara.volam@emulex.com>
Date:   Mon Jun 30 13:01:30 2014 +0530

    be2net: remove be_cmd_get_profile_config_mbox/mccq() variants

    Fix be_cmd_get_profile_cmd() to use be_cmd_notify_wait() routine,
    which uses MBOX if MCCQ has not been created. Doing this reduces
    code duplication; we don't need the _mbox/_mccq() variants anymore.

    Signed-off-by: Vasundhara Volam <vasundhara.volam@emulex.com>
    Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/emulex/benet/be_cmds.c b/drivers/net/ethernet/emulex/benet/be_cmds.c
index f4ea349..0e2f6e1 100644
--- a/drivers/net/ethernet/emulex/benet/be_cmds.c
+++ b/drivers/net/ethernet/emulex/benet/be_cmds.c
@@ -3440,76 +3440,16 @@ err:
  return status;
 }
 
-/* Uses mbox */
-static int be_cmd_get_profile_config_mbox(struct be_adapter *adapter,
-       u8 domain, struct be_dma_mem *cmd)
-{
- struct be_mcc_wrb *wrb;
- struct be_cmd_req_get_profile_config *req;
- int status;
-
- if (mutex_lock_interruptible(&adapter->mbox_lock))
-  return -1;
- wrb = wrb_from_mbox(adapter);
-
- req = cmd->va;
- be_wrb_cmd_hdr_prepare(&req->hdr, CMD_SUBSYSTEM_COMMON,
-          OPCODE_COMMON_GET_PROFILE_CONFIG,
-          cmd->size, wrb, cmd);
-
- req->type = ACTIVE_PROFILE_TYPE;
- req->hdr.domain = domain;
- if (!lancer_chip(adapter))
-  req->hdr.version = 1;
-
- status = be_mbox_notify_wait(adapter);
-
- mutex_unlock(&adapter->mbox_lock);
- return status;
-}
-
-/* Uses sync mcc */
-static int be_cmd_get_profile_config_mccq(struct be_adapter *adapter,
-       u8 domain, struct be_dma_mem *cmd)
-{
- struct be_mcc_wrb *wrb;
- struct be_cmd_req_get_profile_config *req;
- int status;
-
- spin_lock_bh(&adapter->mcc_lock);
-
- wrb = wrb_from_mccq(adapter);
- if (!wrb) {
-  status = -EBUSY;
-  goto err;
- }
-
- req = cmd->va;
- be_wrb_cmd_hdr_prepare(&req->hdr, CMD_SUBSYSTEM_COMMON,
-          OPCODE_COMMON_GET_PROFILE_CONFIG,
-          cmd->size, wrb, cmd);
-
- req->type = ACTIVE_PROFILE_TYPE;
- req->hdr.domain = domain;
- if (!lancer_chip(adapter))
-  req->hdr.version = 1;
-
- status = be_mcc_notify_wait(adapter);
-
-err:
- spin_unlock_bh(&adapter->mcc_lock);
- return status;
-}
-
-/* Uses sync mcc, if MCCQ is already created otherwise mbox */
+/* Will use MBOX only if MCCQ has not been created */
 int be_cmd_get_profile_config(struct be_adapter *adapter,
          struct be_resources *res, u8 domain)
 {
  struct be_cmd_resp_get_profile_config *resp;
+ struct be_cmd_req_get_profile_config *req;
  struct be_pcie_res_desc *pcie;
  struct be_port_res_desc *port;
  struct be_nic_res_desc *nic;
- struct be_queue_info *mccq = &adapter->mcc_obj.q;
+ struct be_mcc_wrb wrb = {0};
  struct be_dma_mem cmd;
  u32 desc_count;
  int status;
@@ -3520,10 +3460,17 @@ int be_cmd_get_profile_config(struct be_adapter *adapter,
  if (!cmd.va)
   return -ENOMEM;
 
- if (!mccq->created)
-  status = be_cmd_get_profile_config_mbox(adapter, domain, &cmd);
- else
-  status = be_cmd_get_profile_config_mccq(adapter, domain, &cmd);
+ req = cmd.va;
+ be_wrb_cmd_hdr_prepare(&req->hdr, CMD_SUBSYSTEM_COMMON,
+          OPCODE_COMMON_GET_PROFILE_CONFIG,
+          cmd.size, &wrb, &cmd);
+
+ req->hdr.domain = domain;
+ if (!lancer_chip(adapter))
+  req->hdr.version = 1;
+ req->type = ACTIVE_PROFILE_TYPE;
+
+ status = be_cmd_notify_wait(adapter, &wrb);
  if (status)
   goto err;
 
-- 
1.7.1