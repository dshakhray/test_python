From 2ced4053bc0bd001be09e97aaf7d667f653562db Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Wed, 18 Jun 2014 10:14:34 -0400
Subject: [s390] spinlock: fix system hang with spin_retry <= 0

Message-id: <1403086474-31126-1-git-send-email-brueckner@redhat.com>
Patchwork-id: 84239
O-Subject: [RHEL7.1 PATCH] [s390] s390/spinlock: fix system hang with spin_retry <= 0
Bugzilla: 1096329
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 2e4006b34d06681ed95d55510d4450f29a13c417
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Tue May 6 19:41:36 2014 +0200

    s390/spinlock: fix system hang with spin_retry <= 0

    On LPAR, when spin_retry is set to <= 0, arch_spin_lock_wait() and
    arch_spin_lock_wait_flags() may end up in a while(1) loop w/o doing
    any compare and swap operation. To fix this, use do/while instead of
    for loop.

    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1096329
https://bugzilla.redhat.com/show_bug.cgi?id=1096329

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=2e4006b34d06681ed95d55510d4450f29a13c417

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7588402

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/lib/spinlock.c b/arch/s390/lib/spinlock.c
index f709983..ea4313f 100644
--- a/arch/s390/lib/spinlock.c
+++ b/arch/s390/lib/spinlock.c
@@ -26,20 +26,21 @@ __setup("spin_retry=", spin_retry_setup);
 
 void arch_spin_lock_wait(arch_spinlock_t *lp)
 {
- int count = spin_retry;
  unsigned int cpu = ~smp_processor_id();
  unsigned int owner;
+ int count;
 
  while (1) {
   owner = lp->owner_cpu;
   if (!owner || smp_vcpu_scheduled(~owner)) {
-   for (count = spin_retry; count > 0; count--) {
+   count = spin_retry;
+   do {
     if (arch_spin_is_locked(lp))
      continue;
     if (_raw_compare_and_swap(&lp->owner_cpu, 0,
          cpu) == 0)
      return;
-   }
+   } while (count-- > 0);
    if (MACHINE_IS_LPAR)
     continue;
   }
@@ -54,15 +55,16 @@ EXPORT_SYMBOL(arch_spin_lock_wait);
 
 void arch_spin_lock_wait_flags(arch_spinlock_t *lp, unsigned long flags)
 {
- int count = spin_retry;
  unsigned int cpu = ~smp_processor_id();
  unsigned int owner;
+ int count;
 
  local_irq_restore(flags);
  while (1) {
   owner = lp->owner_cpu;
   if (!owner || smp_vcpu_scheduled(~owner)) {
-   for (count = spin_retry; count > 0; count--) {
+   count = spin_retry;
+   do {
     if (arch_spin_is_locked(lp))
      continue;
     local_irq_disable();
@@ -70,7 +72,7 @@ void arch_spin_lock_wait_flags(arch_spinlock_t *lp, unsigned long flags)
          cpu) == 0)
      return;
     local_irq_restore(flags);
-   }
+   } while (count-- > 0);
    if (MACHINE_IS_LPAR)
     continue;
   }
-- 
1.7.1