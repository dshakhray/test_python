From bf525d3d902c28a75dd82dbbabe29e18e08f831b Mon Sep 17 00:00:00 2001
From: Radomir Vrbovsky <rvrbovsk@redhat.com>
Date: Tue, 29 Jul 2014 12:43:38 -0400
Subject: [sound] alsa/control: Don't access controls outside of protected regions

Message-id: <20140729124334.GA15891@mail.corp.redhat.com>
Patchwork-id: 86818
O-Subject: [RHEL7.1 PATCH] ALSA: control: Don't access controls outside of protected regions
Bugzilla: 1117331
CVE: CVE-2014-4653
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Trivial backport of an upstream patch.

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1117331
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7739818

commit fd9f26e4eca5d08a27d12c0933fceef76ed9663d
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Wed Jun 18 13:32:33 2014 +0200

A control that is visible on the card->controls list can be freed at any time.
This means we must not access any of its memory while not holding the
controls_rw_lock. Otherwise we risk a use after free access.

Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
Acked-by: Jaroslav Kysela <perex@perex.cz>
Cc: <stable@vger.kernel.org>
Signed-off-by: Takashi Iwai <tiwai@suse.de>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/core/control.c b/sound/core/control.c
index d8aa206..6bc1576 100644
--- a/sound/core/control.c
+++ b/sound/core/control.c
@@ -331,6 +331,7 @@ int snd_ctl_add(struct snd_card *card, struct snd_kcontrol *kcontrol)
 {
  struct snd_ctl_elem_id id;
  unsigned int idx;
+ unsigned int count;
  int err = -EINVAL;
 
  if (! kcontrol)
@@ -359,8 +360,9 @@ int snd_ctl_add(struct snd_card *card, struct snd_kcontrol *kcontrol)
  card->controls_count += kcontrol->count;
  kcontrol->id.numid = card->last_numid + 1;
  card->last_numid += kcontrol->count;
+ count = kcontrol->count;
  up_write(&card->controls_rwsem);
- for (idx = 0; idx < kcontrol->count; idx++, id.index++, id.numid++)
+ for (idx = 0; idx < count; idx++, id.index++, id.numid++)
   snd_ctl_notify(card, SNDRV_CTL_EVENT_MASK_ADD, &id);
  return 0;
 
@@ -389,6 +391,7 @@ int snd_ctl_replace(struct snd_card *card, struct snd_kcontrol *kcontrol,
       bool add_on_replace)
 {
  struct snd_ctl_elem_id id;
+ unsigned int count;
  unsigned int idx;
  struct snd_kcontrol *old;
  int ret;
@@ -424,8 +427,9 @@ add:
  card->controls_count += kcontrol->count;
  kcontrol->id.numid = card->last_numid + 1;
  card->last_numid += kcontrol->count;
+ count = kcontrol->count;
  up_write(&card->controls_rwsem);
- for (idx = 0; idx < kcontrol->count; idx++, id.index++, id.numid++)
+ for (idx = 0; idx < count; idx++, id.index++, id.numid++)
   snd_ctl_notify(card, SNDRV_CTL_EVENT_MASK_ADD, &id);
  return 0;
 
@@ -898,9 +902,9 @@ static int snd_ctl_elem_write(struct snd_card *card, struct snd_ctl_file *file,
    result = kctl->put(kctl, control);
   }
   if (result > 0) {
+   struct snd_ctl_elem_id id = control->id;
    up_read(&card->controls_rwsem);
-   snd_ctl_notify(card, SNDRV_CTL_EVENT_MASK_VALUE,
-           &control->id);
+   snd_ctl_notify(card, SNDRV_CTL_EVENT_MASK_VALUE, &id);
    return 0;
   }
  }
@@ -1322,8 +1326,9 @@ static int snd_ctl_tlv_ioctl(struct snd_ctl_file *file,
   }
   err = kctl->tlv.c(kctl, op_flag, tlv.length, _tlv->tlv);
   if (err > 0) {
+   struct snd_ctl_elem_id id = kctl->id;
    up_read(&card->controls_rwsem);
-   snd_ctl_notify(card, SNDRV_CTL_EVENT_MASK_TLV, &kctl->id);
+   snd_ctl_notify(card, SNDRV_CTL_EVENT_MASK_TLV, &id);
    return 0;
   }
  } else {
-- 
1.7.1