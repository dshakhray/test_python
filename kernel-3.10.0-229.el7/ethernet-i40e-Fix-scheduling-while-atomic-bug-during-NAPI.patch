From b9d5220d6f94da6a75bb2af5494d85189dafb780 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:39:10 -0400
Subject: [ethernet] i40e: Fix scheduling while atomic bug during NAPI

Message-id: <1409658042-22689-190-git-send-email-sassmann@redhat.com>
Patchwork-id: 90384
O-Subject: [RHEL7.1 PATCH 189/281] i40e: Fix scheduling while atomic bug during NAPI
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Neerav Parikh <neerav.parikh@intel.com>

The bug is encountered when all the Tx hang recovery mechanisms have
failed and driver tries to bring down the interface in the interrupt context.
The patch defers this and schedules it for next cycle.

Change-ID: Id9cd1da15b0e5c018dce18da4d0eed5ef1e8a809
Signed-off-by: Neerav Parikh <neerav.parikh@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit b5d06f058b0bb52c39e4f1a32584dda712e0398f)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index fce7e4d..60f9a73 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -135,6 +135,7 @@ enum i40e_state_t {
  __I40E_FILTER_OVERFLOW_PROMISC,
  __I40E_SUSPENDED,
  __I40E_BAD_EEPROM,
+ __I40E_DOWN_REQUESTED,
 };
 
 enum i40e_interrupt_policy {
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index e0076c1..ebf40fc 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -304,8 +304,8 @@ static void i40e_tx_timeout(struct net_device *netdev)
   break;
  default:
   netdev_err(netdev, "tx_timeout recovery unsuccessful\n");
-  set_bit(__I40E_DOWN, &vsi->state);
-  i40e_down(vsi);
+  set_bit(__I40E_DOWN_REQUESTED, &pf->state);
+  set_bit(__I40E_DOWN_REQUESTED, &vsi->state);
   break;
  }
  i40e_service_event_schedule(pf);
@@ -4692,6 +4692,23 @@ void i40e_do_reset(struct i40e_pf *pf, u32 reset_flags)
 
   /* no further action needed, so return now */
   return;
+ } else if (reset_flags & (1 << __I40E_DOWN_REQUESTED)) {
+  int v;
+
+  /* Find the VSI(s) that needs to be brought down */
+  dev_info(&pf->pdev->dev, "VSI down requested\n");
+  for (v = 0; v < pf->num_alloc_vsi; v++) {
+   struct i40e_vsi *vsi = pf->vsi[v];
+   if (vsi != NULL &&
+       test_bit(__I40E_DOWN_REQUESTED, &vsi->state)) {
+    set_bit(__I40E_DOWN, &vsi->state);
+    i40e_down(vsi);
+    clear_bit(__I40E_DOWN_REQUESTED, &vsi->state);
+   }
+  }
+
+  /* no further action needed, so return now */
+  return;
  } else {
   dev_info(&pf->pdev->dev,
     "bad reset request 0x%08x\n", reset_flags);
@@ -5162,6 +5179,10 @@ static void i40e_reset_subtask(struct i40e_pf *pf)
   reset_flags |= (1 << __I40E_GLOBAL_RESET_REQUESTED);
   clear_bit(__I40E_GLOBAL_RESET_REQUESTED, &pf->state);
  }
+ if (test_bit(__I40E_DOWN_REQUESTED, &pf->state)) {
+  reset_flags |= (1 << __I40E_DOWN_REQUESTED);
+  clear_bit(__I40E_DOWN_REQUESTED, &pf->state);
+ }
 
  /* If there's a recovery already waiting, it takes
   * precedence before starting a new reset sequence.
-- 
1.7.1