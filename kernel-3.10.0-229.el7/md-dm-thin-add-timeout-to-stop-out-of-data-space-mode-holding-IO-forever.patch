From 44e4414934715f45bf85d94916a2c152a0a9370c Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 16 May 2014 20:13:32 -0400
Subject: [md] dm-thin: add timeout to stop out-of-data-space mode holding IO forever

Message-id: <1400271213-25480-9-git-send-email-snitzer@redhat.com>
Patchwork-id: 79873
O-Subject: [RHEL7.1 PATCH 8/9] dm thin: add timeout to stop out-of-data-space mode holding IO forever
Bugzilla: 1095639
RH-Acked-by: Joe Thornber <thornber@redhat.com>
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>

BZ: 1095639

Upstream commit 85ad643b7e7e52d37620fb272a9fd577a8095647
Author: Joe Thornber <ejt@redhat.com>
Date:   Fri May 9 15:59:38 2014 +0100

    dm thin: add timeout to stop out-of-data-space mode holding IO forever

    If the pool runs out of data space, dm-thin can be configured to
    either error IOs that would trigger provisioning, or hold those IOs
    until the pool is resized.  Unfortunately, holding IOs until the pool is
    resized can result in a cascade of tasks hitting the hung_task_timeout,
    which may render the system unavailable.

    Add a fixed timeout so IOs can only be held for a maximum of 60 seconds.
    If LVM is going to resize a thin-pool that is out of data space it needs
    to be prompt about it.

    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org # 3.14+

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index fdaeb01..52420f7 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -27,6 +27,7 @@
 #define MAPPING_POOL_SIZE 1024
 #define PRISON_CELLS 1024
 #define COMMIT_PERIOD HZ
+#define NO_SPACE_TIMEOUT (HZ * 60)
 
 DECLARE_DM_KCOPYD_THROTTLE_WITH_MODULE_PARM(snapshot_copy_throttle,
   "A percentage of time allocated for copy on write");
@@ -175,6 +176,7 @@ struct pool {
  struct workqueue_struct *wq;
  struct work_struct worker;
  struct delayed_work waker;
+ struct delayed_work no_space_timeout;
 
  unsigned long last_commit_jiffies;
  unsigned ref_count;
@@ -1584,6 +1586,20 @@ static void do_waker(struct work_struct *ws)
  queue_delayed_work(pool->wq, &pool->waker, COMMIT_PERIOD);
 }
 
+/*
+ * We're holding onto IO to allow userland time to react.  After the
+ * timeout either the pool will have been resized (and thus back in
+ * PM_WRITE mode), or we degrade to PM_READ_ONLY and start erroring IO.
+ */
+static void do_no_space_timeout(struct work_struct *ws)
+{
+ struct pool *pool = container_of(to_delayed_work(ws), struct pool,
+      no_space_timeout);
+
+ if (get_pool_mode(pool) == PM_OUT_OF_DATA_SPACE && !pool->pf.error_if_no_space)
+  set_pool_mode(pool, PM_READ_ONLY);
+}
+
 /*----------------------------------------------------------------*/
 
 struct noflush_work {
@@ -1709,6 +1725,9 @@ static void set_pool_mode(struct pool *pool, enum pool_mode new_mode)
   pool->process_discard = process_discard;
   pool->process_prepared_mapping = process_prepared_mapping;
   pool->process_prepared_discard = process_prepared_discard_passdown;
+
+  if (!pool->pf.error_if_no_space)
+   queue_delayed_work(pool->wq, &pool->no_space_timeout, NO_SPACE_TIMEOUT);
   break;
 
  case PM_WRITE:
@@ -2094,6 +2113,7 @@ static struct pool *pool_create(struct mapped_device *pool_md,
 
  INIT_WORK(&pool->worker, do_worker);
  INIT_DELAYED_WORK(&pool->waker, do_waker);
+ INIT_DELAYED_WORK(&pool->no_space_timeout, do_no_space_timeout);
  spin_lock_init(&pool->lock);
  bio_list_init(&pool->deferred_flush_bios);
  INIT_LIST_HEAD(&pool->prepared_mappings);
@@ -2656,6 +2676,7 @@ static void pool_postsuspend(struct dm_target *ti)
  struct pool *pool = pt->pool;
 
  cancel_delayed_work(&pool->waker);
+ cancel_delayed_work(&pool->no_space_timeout);
  flush_workqueue(pool->wq);
  (void) commit(pool);
 }
-- 
1.7.1