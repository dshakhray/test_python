From 52ff47e8a7fc144114f91be0a5929dedddac8a8e Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:25 -0400
Subject: [kernel] perf: Fix hotplug splat

Message-id: <1408953210-26343-18-git-send-email-jolsa@redhat.com>
Patchwork-id: 88831
O-Subject: [PATCH RHEL7.1 BZ1133083 017/322] perf: Fix hotplug splat
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit e3703f8cdfcf39c25c4338c3ad8e68891cca3731
Author: Peter Zijlstra <peterz@infradead.org>
Date: Mon Feb 24 12:06:12 2014 +0100

description
===========
Drew Richardson reported that he could make the kernel go *boom* when hotplugging
while having perf events active.

It turned out that when you have a group event, the code in
__perf_event_exit_context() fails to remove the group siblings from
the context.

We then proceed with destroying and freeing the event, and when you
re-plug the CPU and try and add another event to that CPU, things go
*boom* because you've still got dead entries there.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index e116367..4da6544 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -7845,14 +7845,14 @@ static void perf_pmu_rotate_stop(struct pmu *pmu)
 static void __perf_event_exit_context(void *__info)
 {
  struct perf_event_context *ctx = __info;
- struct perf_event *event, *tmp;
+ struct perf_event *event;
 
  perf_pmu_rotate_stop(ctx->pmu);
 
- list_for_each_entry_safe(event, tmp, &ctx->pinned_groups, group_entry)
-  __perf_remove_from_context(event);
- list_for_each_entry_safe(event, tmp, &ctx->flexible_groups, group_entry)
+ rcu_read_lock();
+ list_for_each_entry_rcu(event, &ctx->event_list, event_entry)
   __perf_remove_from_context(event);
+ rcu_read_unlock();
 }
 
 static void perf_event_exit_cpu_context(int cpu)
@@ -7876,11 +7876,11 @@ static void perf_event_exit_cpu(int cpu)
 {
  struct swevent_htable *swhash = &per_cpu(swevent_htable, cpu);
 
+ perf_event_exit_cpu_context(cpu);
+
  mutex_lock(&swhash->hlist_mutex);
  swevent_hlist_release(swhash);
  mutex_unlock(&swhash->hlist_mutex);
-
- perf_event_exit_cpu_context(cpu);
 }
 #else
 static inline void perf_event_exit_cpu(int cpu) { }
-- 
1.7.1