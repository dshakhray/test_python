From ca7e10cdbf7939d58cd315007eaea191019d1203 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:06:27 -0400
Subject: [powerpc] kgdb: use DEFINE_PER_CPU to allocate kgdb's thread_info

Message-id: <1410545655-205645-159-git-send-email-dzickus@redhat.com>
Patchwork-id: 94659
O-Subject: [RHEL7 PATCH 158/626] powerpc/kgdb: use DEFINE_PER_CPU to allocate kgdb's thread_info
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 8258e268c15a29c09d7c88d91a948bdf729433d8
Author: Tiejun Chen <tiejun.chen@windriver.com>
Date:   Thu Jun 20 18:28:29 2013 +0800

    powerpc/kgdb: use DEFINE_PER_CPU to allocate kgdb's thread_info

    Use DEFINE_PER_CPU to allocate thread_info statically instead of kmalloc().
    This can avoid introducing more memory check codes.

    Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com>
    [scottwood@freescale.com: wrapped long line]
    Signed-off-by: Scott Wood <scottwood@freescale.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/kgdb.c b/arch/powerpc/kernel/kgdb.c
index c1eef24..83e89d3 100644
--- a/arch/powerpc/kernel/kgdb.c
+++ b/arch/powerpc/kernel/kgdb.c
@@ -151,15 +151,16 @@ static int kgdb_handle_breakpoint(struct pt_regs *regs)
  return 1;
 }
 
+static DEFINE_PER_CPU(struct thread_info, kgdb_thread_info);
 static int kgdb_singlestep(struct pt_regs *regs)
 {
  struct thread_info *thread_info, *exception_thread_info;
- struct thread_info *backup_current_thread_info;
+ struct thread_info *backup_current_thread_info =
+  &__get_cpu_var(kgdb_thread_info);
 
  if (user_mode(regs))
   return 0;
 
- backup_current_thread_info = kmalloc(sizeof(struct thread_info), GFP_KERNEL);
  /*
   * On Book E and perhaps other processors, singlestep is handled on
   * the critical exception stack.  This causes current_thread_info()
@@ -185,7 +186,6 @@ static int kgdb_singlestep(struct pt_regs *regs)
   /* Restore current_thread_info lastly. */
   memcpy(exception_thread_info, backup_current_thread_info, sizeof *thread_info);
 
- kfree(backup_current_thread_info);
  return 1;
 }
 
-- 
1.7.1