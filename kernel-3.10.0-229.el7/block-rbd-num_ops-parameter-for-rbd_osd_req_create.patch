From 01d3466c441a66e7f7a4626c0ad26d4c9ea981dc Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:24:32 -0400
Subject: [block] rbd: num_ops parameter for rbd_osd_req_create()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-166-git-send-email-sweil@redhat.com>
Patchwork-id: 89808
O-Subject: [PATCH 165/303] rbd: num_ops parameter for rbd_osd_req_create()
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

In preparation for prefixing rbd writes with an allocation hint
introduce a num_ops parameter for rbd_osd_req_create().  The rationale
is that not every write request is a write op that needs to be prefixed
(e.g. watch op), so the num_ops logic needs to be in the callers.

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Sage Weil <sage@inktank.com>
Reviewed-by: Alex Elder <elder@linaro.org>
(cherry picked from commit deb236b300cea3e7a114115571194b9872dbdfd1)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/rbd.c b/drivers/block/rbd.c
index bb0d33a..1c219d3 100644
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@ -1762,6 +1762,7 @@ static void rbd_osd_req_format_write(struct rbd_obj_request *obj_request)
 static struct ceph_osd_request *rbd_osd_req_create(
      struct rbd_device *rbd_dev,
      bool write_request,
+     unsigned int num_ops,
      struct rbd_obj_request *obj_request)
 {
  struct ceph_snap_context *snapc = NULL;
@@ -1777,10 +1778,13 @@ static struct ceph_osd_request *rbd_osd_req_create(
    snapc = img_request->snapc;
  }
 
- /* Allocate and initialize the request, for the single op */
+ rbd_assert(num_ops == 1);
+
+ /* Allocate and initialize the request, for the num_ops ops */
 
  osdc = &rbd_dev->rbd_client->client->osdc;
- osd_req = ceph_osdc_alloc_request(osdc, snapc, 1, false, GFP_ATOMIC);
+ osd_req = ceph_osdc_alloc_request(osdc, snapc, num_ops, false,
+       GFP_ATOMIC);
  if (!osd_req)
   return NULL; /* ENOMEM */
 
@@ -2263,8 +2267,8 @@ static int rbd_img_request_fill(struct rbd_img_request *img_request,
    pages += page_count;
   }
 
-  osd_req = rbd_osd_req_create(rbd_dev, write_request,
-      obj_request);
+  osd_req = rbd_osd_req_create(rbd_dev, write_request, 1,
+          obj_request);
   if (!osd_req)
    goto out_unwind;
   obj_request->osd_req = osd_req;
@@ -2645,8 +2649,8 @@ static int rbd_img_obj_exists_submit(struct rbd_obj_request *obj_request)
 
  rbd_assert(obj_request->img_request);
  rbd_dev = obj_request->img_request->rbd_dev;
- stat_request->osd_req = rbd_osd_req_create(rbd_dev, false,
-      stat_request);
+ stat_request->osd_req = rbd_osd_req_create(rbd_dev, false, 1,
+         stat_request);
  if (!stat_request->osd_req)
   goto out;
  stat_request->callback = rbd_img_obj_exists_callback;
@@ -2849,7 +2853,8 @@ static int rbd_obj_notify_ack_sync(struct rbd_device *rbd_dev, u64 notify_id)
   return -ENOMEM;
 
  ret = -ENOMEM;
- obj_request->osd_req = rbd_osd_req_create(rbd_dev, false, obj_request);
+ obj_request->osd_req = rbd_osd_req_create(rbd_dev, false, 1,
+        obj_request);
  if (!obj_request->osd_req)
   goto out;
 
@@ -2912,7 +2917,8 @@ static int __rbd_dev_header_watch_sync(struct rbd_device *rbd_dev, bool start)
  if (!obj_request)
   goto out_cancel;
 
- obj_request->osd_req = rbd_osd_req_create(rbd_dev, true, obj_request);
+ obj_request->osd_req = rbd_osd_req_create(rbd_dev, true, 1,
+        obj_request);
  if (!obj_request->osd_req)
   goto out_cancel;
 
@@ -3020,7 +3026,8 @@ static int rbd_obj_method_sync(struct rbd_device *rbd_dev,
  obj_request->pages = pages;
  obj_request->page_count = page_count;
 
- obj_request->osd_req = rbd_osd_req_create(rbd_dev, false, obj_request);
+ obj_request->osd_req = rbd_osd_req_create(rbd_dev, false, 1,
+        obj_request);
  if (!obj_request->osd_req)
   goto out;
 
@@ -3253,7 +3260,8 @@ static int rbd_obj_read_sync(struct rbd_device *rbd_dev,
  obj_request->pages = pages;
  obj_request->page_count = page_count;
 
- obj_request->osd_req = rbd_osd_req_create(rbd_dev, false, obj_request);
+ obj_request->osd_req = rbd_osd_req_create(rbd_dev, false, 1,
+        obj_request);
  if (!obj_request->osd_req)
   goto out;
 
-- 
1.7.1