From 1b4d94846d88e0d529ae2bbeca83d28051cb273f Mon Sep 17 00:00:00 2001
From: Sai Vemuri <svemuri@redhat.com>
Date: Thu, 11 Sep 2014 22:43:33 -0400
Subject: [infiniband] cxgb4: Fixes cxgb4 probe failure in VM when PF is exposed through PCI Passthrough

Message-id: <1410475447-94392-75-git-send-email-svemuri@redhat.com>
Patchwork-id: 93891
O-Subject: [RHEL7.1 PATCH BZ 1124947 074/108] rdma/cxgb4: Fixes cxgb4 probe failure in VM when PF is exposed through PCI Passthrough
Bugzilla: 1124947
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Change logic which determines our Physical Function at PCI Probe time.
Now we read the PL_WHOAMI register and get the Physical Function.

Pass Physical Function to Upper Layer Drivers in lld_info structure in the
new field "pf" added to lld_info.  This is useful for the cases where the
PF, say PF4, is attached to a Virtual Machine via some form of "PCI
Pass Through" technology and the PCI Function shows up as PF0 in the VM.

Based on original work by Casey Leedom <leedom@chelsio.com>

Signed-off-by: Casey Leedom <leedom@chelsio.com>
Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 35b1de5579704be0e03454f713dddd6f86eccb7e)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/hw/cxgb4/cm.c b/drivers/infiniband/hw/cxgb4/cm.c
index fc37e3a..60646ab 100644
--- a/drivers/infiniband/hw/cxgb4/cm.c
+++ b/drivers/infiniband/hw/cxgb4/cm.c
@@ -465,7 +465,8 @@ static void send_flowc(struct c4iw_ep *ep, struct sk_buff *skb)
        16)) | FW_WR_FLOWID(ep->hwtid));
 
  flowc->mnemval[0].mnemonic = FW_FLOWC_MNEM_PFNVFN;
- flowc->mnemval[0].val = cpu_to_be32(PCI_FUNC(ep->com.dev->rdev.lldi.pdev->devfn) << 8);
+ flowc->mnemval[0].val = cpu_to_be32(FW_PFVF_CMD_PFN
+         (ep->com.dev->rdev.lldi.pf));
  flowc->mnemval[1].mnemonic = FW_FLOWC_MNEM_CH;
  flowc->mnemval[1].val = cpu_to_be32(ep->tx_chan);
  flowc->mnemval[2].mnemonic = FW_FLOWC_MNEM_PORT;
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index 2f64d74..5f0eb57 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@ -3888,6 +3888,7 @@ static void uld_attach(struct adapter *adap, unsigned int uld)
  unsigned short i;
 
  lli.pdev = adap->pdev;
+ lli.pf = adap->fn;
  lli.l2t = adap->l2t;
  lli.tids = &adap->tids;
  lli.ports = adap->port;
@@ -6102,13 +6103,6 @@ static int init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
   return err;
  }
 
- /* We control everything through one PF */
- func = PCI_FUNC(pdev->devfn);
- if (func != ent->driver_data) {
-  pci_save_state(pdev);        /* to restore SR-IOV later */
-  goto sriov;
- }
-
  err = pci_enable_device(pdev);
  if (err) {
   dev_err(&pdev->dev, "cannot enable PCI device\n");
@@ -6152,6 +6146,15 @@ static int init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
   goto out_free_adapter;
  }
 
+ /* We control everything through one PF */
+ func = SOURCEPF_GET(readl(adapter->regs + PL_WHOAMI));
+ if ((pdev->device == 0xa000 && func != 0) ||
+     func != ent->driver_data) {
+  pci_save_state(pdev);        /* to restore SR-IOV later */
+  err = 0;
+  goto out_unmap_bar0;
+ }
+
  adapter->pdev = pdev;
  adapter->pdev_dev = &pdev->dev;
  adapter->mbox = func;
@@ -6311,7 +6314,6 @@ static int init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
  if (is_offload(adapter))
   attach_ulds(adapter);
 
-sriov:
 #ifdef CONFIG_PCI_IOV
  if (func < ARRAY_SIZE(num_vf) && num_vf[func] > 0)
   if (pci_enable_sriov(pdev, num_vf[func]) == 0)
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h
index 55e9daf..3c5053b 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h
@@ -253,6 +253,7 @@ struct cxgb4_lld_info {
  int dbfifo_int_thresh;       /* doorbell fifo int threshold */
  unsigned int sge_pktshift;           /* Padding between CPL and */
           /* packet data */
+ unsigned int pf;       /* Physical Function we're using */
  bool enable_fw_ofld_conn;            /* Enable connection through fw */
           /* WR */
  bool ulptx_memwrite_dsgl;            /* use of T5 DSGL allowed */
-- 
1.7.1