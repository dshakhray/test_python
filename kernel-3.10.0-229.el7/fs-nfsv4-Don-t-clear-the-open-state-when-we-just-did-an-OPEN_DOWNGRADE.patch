From 50e2730fadae991f88d4c9b67b6fabc129dc9923 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:52 -0400
Subject: [fs] nfsv4: Don't clear the open state when we just did an OPEN_DOWNGRADE

Message-id: <1411050057-12417-90-git-send-email-steved@redhat.com>
Patchwork-id: 96257
O-Subject: [RHEL7.1 PATCH 89/94] NFSv4: Don't clear the open state when we just did an OPEN_DOWNGRADE
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

If we did an OPEN_DOWNGRADE, then the right thing to do on success, is
to apply the new open mode to the struct nfs4_state. Instead, we were
unconditionally clearing the state, making it appear to our state
machinery as if we had just performed a CLOSE.

Fixes: 226056c5c312b (NFSv4: Use correct locking when updating nfs4_state...)
Cc: stable@vger.kernel.org # 3.15+
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upsteam Id: 412f6c4c26fb1eba8844290663837561ac53fa6e
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 57eb1d4..2e9a0b5 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -2560,6 +2560,7 @@ static void nfs4_close_done(struct rpc_task *task, void *data)
  struct nfs4_closedata *calldata = data;
  struct nfs4_state *state = calldata->state;
  struct nfs_server *server = NFS_SERVER(calldata->inode);
+ nfs4_stateid *res_stateid = NULL;
 
  dprintk("%s: begin!\n", __func__);
  if (!nfs4_sequence_done(task, &calldata->res.seq_res))
@@ -2570,12 +2571,12 @@ static void nfs4_close_done(struct rpc_task *task, void *data)
   */
  switch (task->tk_status) {
   case 0:
-   if (calldata->roc)
+   res_stateid = &calldata->res.stateid;
+   if (calldata->arg.fmode == 0 && calldata->roc)
     pnfs_roc_set_barrier(state->inode,
            calldata->roc_barrier);
-   nfs_clear_open_stateid(state, &calldata->res.stateid, 0);
    renew_lease(server, calldata->timestamp);
-   goto out_release;
+   break;
   case -NFS4ERR_ADMIN_REVOKED:
   case -NFS4ERR_STALE_STATEID:
   case -NFS4ERR_OLD_STATEID:
@@ -2589,7 +2590,7 @@ static void nfs4_close_done(struct rpc_task *task, void *data)
     goto out_release;
    }
  }
- nfs_clear_open_stateid(state, NULL, calldata->arg.fmode);
+ nfs_clear_open_stateid(state, res_stateid, calldata->arg.fmode);
 out_release:
  nfs_release_seqid(calldata->arg.seqid);
  nfs_refresh_inode(calldata->inode, calldata->res.fattr);
-- 
1.7.1