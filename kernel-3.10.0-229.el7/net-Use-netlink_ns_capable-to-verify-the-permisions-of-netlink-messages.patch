From 759637d0dfec7f5682a560d29a63b5f8ed4165c5 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Tue, 3 Jun 2014 13:28:54 -0400
Subject: [net] Use netlink_ns_capable to verify the permisions of netlink messages
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <53089c48c6953a565a312241c8beaffb3e504c7a.1401801988.git.jbenc@redhat.com>
Patchwork-id: 82399
O-Subject: [RHEL7.1 net PATCH v2 6/6] net: Use netlink_ns_capable to verify the permisions of netlink messages
Bugzilla: 1094272
CVE: CVE-2014-0181
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1094272
CVE-2014-0181
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7529840

RHEL backport:
- Minor conflict in kernel/audit.c caused by a missing patch (5a3cb3b6c3a07
  "audit: allow user processes to log from another PID namespace").
- Merged with "netfilter: Fix warning in nfnetlink_receive()" in order not to
  break bisect (we treat warnings as errors).

commit 90f62cf30a78721641e08737bda787552428061e
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Wed Apr 23 14:29:27 2014 -0700

    net: Use netlink_ns_capable to verify the permisions of netlink messages

    It is possible by passing a netlink socket to a more privileged
    executable and then to fool that executable into writing to the socket
    data that happens to be valid netlink message to do something that
    privileged executable did not intend to do.

    To keep this from happening replace bare capable and ns_capable calls
    with netlink_capable, netlink_net_calls and netlink_ns_capable calls.
    Which act the same as the previous calls except they verify that the
    opener of the socket had the desired permissions as well.

    Reported-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a64d90fd962c2956da7505f98a302408450365e2
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Apr 24 13:51:29 2014 -0400

    netfilter: Fix warning in nfnetlink_receive().

    net/netfilter/nfnetlink.c: In function Ã¢ÂÂnfnetlink_rcvÃ¢ÂÂ:
    net/netfilter/nfnetlink.c:371:14: warning: unused variable Ã¢ÂÂnetÃ¢ÂÂ [-Wunused-variable]

    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
---
 crypto/crypto_user.c            |    2 +-
 drivers/connector/cn_proc.c     |    2 +-
 drivers/scsi/scsi_netlink.c     |    2 +-
 kernel/audit.c                  |    4 ++--
 net/can/gw.c                    |    4 ++--
 net/core/rtnetlink.c            |   20 +++++++++++---------
 net/dcb/dcbnl.c                 |    2 +-
 net/decnet/dn_dev.c             |    4 ++--
 net/decnet/dn_fib.c             |    4 ++--
 net/decnet/netfilter/dn_rtmsg.c |    2 +-
 net/netfilter/nfnetlink.c       |    3 +--
 net/netlink/genetlink.c         |    2 +-
 net/packet/diag.c               |    2 +-
 net/phonet/pn_netlink.c         |    8 ++++----
 net/sched/act_api.c             |    2 +-
 net/sched/cls_api.c             |    2 +-
 net/sched/sch_api.c             |    6 +++---
 net/tipc/netlink.c              |    2 +-
 net/xfrm/xfrm_user.c            |    2 +-
 19 files changed, 38 insertions(+), 37 deletions(-)

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/crypto/crypto_user.c b/crypto/crypto_user.c
index 1512e41..43665d0 100644
--- a/crypto/crypto_user.c
+++ b/crypto/crypto_user.c
@@ -466,7 +466,7 @@ static int crypto_user_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh)
  type -= CRYPTO_MSG_BASE;
  link = &crypto_dispatch[type];
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if ((type == (CRYPTO_MSG_GETALG - CRYPTO_MSG_BASE) &&
diff --git a/drivers/connector/cn_proc.c b/drivers/connector/cn_proc.c
index 18c5b9b..3165811 100644
--- a/drivers/connector/cn_proc.c
+++ b/drivers/connector/cn_proc.c
@@ -369,7 +369,7 @@ static void cn_proc_mcast_ctl(struct cn_msg *msg,
   return;
 
  /* Can only change if privileged. */
- if (!capable(CAP_NET_ADMIN)) {
+ if (!__netlink_ns_capable(nsp, &init_user_ns, CAP_NET_ADMIN)) {
   err = EPERM;
   goto out;
  }
diff --git a/drivers/scsi/scsi_netlink.c b/drivers/scsi/scsi_netlink.c
index fe30ea9..109802f 100644
--- a/drivers/scsi/scsi_netlink.c
+++ b/drivers/scsi/scsi_netlink.c
@@ -77,7 +77,7 @@ scsi_nl_rcv_msg(struct sk_buff *skb)
    goto next_msg;
   }
 
-  if (!capable(CAP_SYS_ADMIN)) {
+  if (!netlink_capable(skb, CAP_SYS_ADMIN)) {
    err = -EPERM;
    goto next_msg;
   }
diff --git a/kernel/audit.c b/kernel/audit.c
index 2c6de57..e89c076 100644
--- a/kernel/audit.c
+++ b/kernel/audit.c
@@ -615,13 +615,13 @@ static int audit_netlink_ok(struct sk_buff *skb, u16 msg_type)
  case AUDIT_TTY_SET:
  case AUDIT_TRIM:
  case AUDIT_MAKE_EQUIV:
-  if (!capable(CAP_AUDIT_CONTROL))
+  if (!netlink_capable(skb, CAP_AUDIT_CONTROL))
    err = -EPERM;
   break;
  case AUDIT_USER:
  case AUDIT_FIRST_USER_MSG ... AUDIT_LAST_USER_MSG:
  case AUDIT_FIRST_USER_MSG2 ... AUDIT_LAST_USER_MSG2:
-  if (!capable(CAP_AUDIT_WRITE))
+  if (!netlink_capable(skb, CAP_AUDIT_WRITE))
    err = -EPERM;
   break;
  default:  /* bad msg */
diff --git a/net/can/gw.c b/net/can/gw.c
index 3ee690e..de25455 100644
--- a/net/can/gw.c
+++ b/net/can/gw.c
@@ -784,7 +784,7 @@ static int cgw_create_job(struct sk_buff *skb,  struct nlmsghdr *nlh)
  struct cgw_job *gwj;
  int err = 0;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if (nlmsg_len(nlh) < sizeof(*r))
@@ -876,7 +876,7 @@ static int cgw_remove_job(struct sk_buff *skb,  struct nlmsghdr *nlh)
  struct can_can_gw ccgw;
  int err = 0;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if (nlmsg_len(nlh) < sizeof(*r))
diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index c377b03..af7613d 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -1329,7 +1329,8 @@ static int do_set_master(struct net_device *dev, int ifindex)
  return 0;
 }
 
-static int do_setlink(struct net_device *dev, struct ifinfomsg *ifm,
+static int do_setlink(const struct sk_buff *skb,
+        struct net_device *dev, struct ifinfomsg *ifm,
         struct nlattr **tb, char *ifname, int modified)
 {
  const struct net_device_ops *ops = dev->netdev_ops;
@@ -1341,7 +1342,7 @@ static int do_setlink(struct net_device *dev, struct ifinfomsg *ifm,
    err = PTR_ERR(net);
    goto errout;
   }
-  if (!ns_capable(net->user_ns, CAP_NET_ADMIN)) {
+  if (!netlink_ns_capable(skb, net->user_ns, CAP_NET_ADMIN)) {
    err = -EPERM;
    goto errout;
   }
@@ -1595,7 +1596,7 @@ static int rtnl_setlink(struct sk_buff *skb, struct nlmsghdr *nlh)
  if (err < 0)
   goto errout;
 
- err = do_setlink(dev, ifm, tb, ifname, 0);
+ err = do_setlink(skb, dev, ifm, tb, ifname, 0);
 errout:
  return err;
 }
@@ -1713,7 +1714,8 @@ err:
 }
 EXPORT_SYMBOL(rtnl_create_link);
 
-static int rtnl_group_changelink(struct net *net, int group,
+static int rtnl_group_changelink(const struct sk_buff *skb,
+  struct net *net, int group,
   struct ifinfomsg *ifm,
   struct nlattr **tb)
 {
@@ -1722,7 +1724,7 @@ static int rtnl_group_changelink(struct net *net, int group,
 
  for_each_netdev(net, dev) {
   if (dev->group == group) {
-   err = do_setlink(dev, ifm, tb, NULL, 0);
+   err = do_setlink(skb, dev, ifm, tb, NULL, 0);
    if (err < 0)
     return err;
   }
@@ -1824,12 +1826,12 @@ replay:
     modified = 1;
    }
 
-   return do_setlink(dev, ifm, tb, ifname, modified);
+   return do_setlink(skb, dev, ifm, tb, ifname, modified);
   }
 
   if (!(nlh->nlmsg_flags & NLM_F_CREATE)) {
    if (ifm->ifi_index == 0 && tb[IFLA_GROUP])
-    return rtnl_group_changelink(net,
+    return rtnl_group_changelink(skb, net,
       nla_get_u32(tb[IFLA_GROUP]),
       ifm, tb);
    return -ENODEV;
@@ -2209,7 +2211,7 @@ static int rtnl_fdb_del(struct sk_buff *skb, struct nlmsghdr *nlh)
  int err = -EINVAL;
  __u8 *addr;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  err = nlmsg_parse(nlh, sizeof(*ndm), tb, NDA_MAX, NULL);
@@ -2660,7 +2662,7 @@ static int rtnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh)
  sz_idx = type>>2;
  kind = type&3;
 
- if (kind != 2 && !ns_capable(net->user_ns, CAP_NET_ADMIN))
+ if (kind != 2 && !netlink_net_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if (kind == 2 && nlh->nlmsg_flags&NLM_F_DUMP) {
diff --git a/net/dcb/dcbnl.c b/net/dcb/dcbnl.c
index 40d5829..1074ffb 100644
--- a/net/dcb/dcbnl.c
+++ b/net/dcb/dcbnl.c
@@ -1670,7 +1670,7 @@ static int dcb_doit(struct sk_buff *skb, struct nlmsghdr *nlh)
  struct nlmsghdr *reply_nlh = NULL;
  const struct reply_func *fn;
 
- if ((nlh->nlmsg_type == RTM_SETDCB) && !capable(CAP_NET_ADMIN))
+ if ((nlh->nlmsg_type == RTM_SETDCB) && !netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  ret = nlmsg_parse(nlh, sizeof(*dcb), tb, DCB_ATTR_MAX,
diff --git a/net/decnet/dn_dev.c b/net/decnet/dn_dev.c
index dd0dfb2..70f2549 100644
--- a/net/decnet/dn_dev.c
+++ b/net/decnet/dn_dev.c
@@ -573,7 +573,7 @@ static int dn_nl_deladdr(struct sk_buff *skb, struct nlmsghdr *nlh)
  struct dn_ifaddr __rcu **ifap;
  int err = -EINVAL;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if (!net_eq(net, &init_net))
@@ -617,7 +617,7 @@ static int dn_nl_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh)
  struct dn_ifaddr *ifa;
  int err;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if (!net_eq(net, &init_net))
diff --git a/net/decnet/dn_fib.c b/net/decnet/dn_fib.c
index 57dc159..d332aef 100644
--- a/net/decnet/dn_fib.c
+++ b/net/decnet/dn_fib.c
@@ -505,7 +505,7 @@ static int dn_fib_rtm_delroute(struct sk_buff *skb, struct nlmsghdr *nlh)
  struct nlattr *attrs[RTA_MAX+1];
  int err;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if (!net_eq(net, &init_net))
@@ -530,7 +530,7 @@ static int dn_fib_rtm_newroute(struct sk_buff *skb, struct nlmsghdr *nlh)
  struct nlattr *attrs[RTA_MAX+1];
  int err;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if (!net_eq(net, &init_net))
diff --git a/net/decnet/netfilter/dn_rtmsg.c b/net/decnet/netfilter/dn_rtmsg.c
index e83015c..e4d9560 100644
--- a/net/decnet/netfilter/dn_rtmsg.c
+++ b/net/decnet/netfilter/dn_rtmsg.c
@@ -107,7 +107,7 @@ static inline void dnrmg_receive_user_skb(struct sk_buff *skb)
  if (nlh->nlmsg_len < sizeof(*nlh) || skb->len < nlh->nlmsg_len)
   return;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   RCV_SKB_FAIL(-EPERM);
 
  /* Eventually we might send routing messages too */
diff --git a/net/netfilter/nfnetlink.c b/net/netfilter/nfnetlink.c
index 046aa13..8be4810 100644
--- a/net/netfilter/nfnetlink.c
+++ b/net/netfilter/nfnetlink.c
@@ -360,14 +360,13 @@ done:
 static void nfnetlink_rcv(struct sk_buff *skb)
 {
  struct nlmsghdr *nlh = nlmsg_hdr(skb);
- struct net *net = sock_net(skb->sk);
  int msglen;
 
  if (nlh->nlmsg_len < NLMSG_HDRLEN ||
      skb->len < nlh->nlmsg_len)
   return;
 
- if (!ns_capable(net->user_ns, CAP_NET_ADMIN)) {
+ if (!netlink_net_capable(skb, CAP_NET_ADMIN)) {
   netlink_ack(skb, nlh, -EPERM);
   return;
  }
diff --git a/net/netlink/genetlink.c b/net/netlink/genetlink.c
index 789d3c6..b272e29 100644
--- a/net/netlink/genetlink.c
+++ b/net/netlink/genetlink.c
@@ -612,7 +612,7 @@ static int genl_family_rcv_msg(struct genl_family *family,
   return -EOPNOTSUPP;
 
  if ((ops->flags & GENL_ADMIN_PERM) &&
-     !capable(CAP_NET_ADMIN))
+     !netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if (nlh->nlmsg_flags & NLM_F_DUMP) {
diff --git a/net/packet/diag.c b/net/packet/diag.c
index 01cd1ac..674b0a6 100644
--- a/net/packet/diag.c
+++ b/net/packet/diag.c
@@ -193,7 +193,7 @@ static int packet_diag_dump(struct sk_buff *skb, struct netlink_callback *cb)
 
  net = sock_net(skb->sk);
  req = nlmsg_data(cb->nlh);
- may_report_filterinfo = ns_capable(net->user_ns, CAP_NET_ADMIN);
+ may_report_filterinfo = netlink_net_capable(cb->skb, CAP_NET_ADMIN);
 
  mutex_lock(&net->packet.sklist_lock);
  sk_for_each(sk, &net->packet.sklist) {
diff --git a/net/phonet/pn_netlink.c b/net/phonet/pn_netlink.c
index dc15f43..b64151a 100644
--- a/net/phonet/pn_netlink.c
+++ b/net/phonet/pn_netlink.c
@@ -70,10 +70,10 @@ static int addr_doit(struct sk_buff *skb, struct nlmsghdr *nlh)
  int err;
  u8 pnaddr;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
- if (!capable(CAP_SYS_ADMIN))
+ if (!netlink_capable(skb, CAP_SYS_ADMIN))
   return -EPERM;
 
  ASSERT_RTNL();
@@ -233,10 +233,10 @@ static int route_doit(struct sk_buff *skb, struct nlmsghdr *nlh)
  int err;
  u8 dst;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
- if (!capable(CAP_SYS_ADMIN))
+ if (!netlink_capable(skb, CAP_SYS_ADMIN))
   return -EPERM;
 
  ASSERT_RTNL();
diff --git a/net/sched/act_api.c b/net/sched/act_api.c
index fd70728..15d46b9 100644
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@ -989,7 +989,7 @@ static int tc_ctl_action(struct sk_buff *skb, struct nlmsghdr *n)
  u32 portid = skb ? NETLINK_CB(skb).portid : 0;
  int ret = 0, ovr = 0;
 
- if ((n->nlmsg_type != RTM_GETACTION) && !capable(CAP_NET_ADMIN))
+ if ((n->nlmsg_type != RTM_GETACTION) && !netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  ret = nlmsg_parse(n, sizeof(struct tcamsg), tca, TCA_ACT_MAX, NULL);
diff --git a/net/sched/cls_api.c b/net/sched/cls_api.c
index 8e118af..2ea40d1 100644
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@ -138,7 +138,7 @@ static int tc_ctl_tfilter(struct sk_buff *skb, struct nlmsghdr *n)
  int err;
  int tp_created = 0;
 
- if ((n->nlmsg_type != RTM_GETTFILTER) && !capable(CAP_NET_ADMIN))
+ if ((n->nlmsg_type != RTM_GETTFILTER) && !netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
 replay:
diff --git a/net/sched/sch_api.c b/net/sched/sch_api.c
index 2adda7f..3f5fe03 100644
--- a/net/sched/sch_api.c
+++ b/net/sched/sch_api.c
@@ -1076,7 +1076,7 @@ static int tc_get_qdisc(struct sk_buff *skb, struct nlmsghdr *n)
  struct Qdisc *p = NULL;
  int err;
 
- if ((n->nlmsg_type != RTM_GETQDISC) && !capable(CAP_NET_ADMIN))
+ if ((n->nlmsg_type != RTM_GETQDISC) && !netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  err = nlmsg_parse(n, sizeof(*tcm), tca, TCA_MAX, NULL);
@@ -1143,7 +1143,7 @@ static int tc_modify_qdisc(struct sk_buff *skb, struct nlmsghdr *n)
  struct Qdisc *q, *p;
  int err;
 
- if (!capable(CAP_NET_ADMIN))
+ if (!netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
 replay:
@@ -1483,7 +1483,7 @@ static int tc_ctl_tclass(struct sk_buff *skb, struct nlmsghdr *n)
  u32 qid;
  int err;
 
- if ((n->nlmsg_type != RTM_GETTCLASS) && !capable(CAP_NET_ADMIN))
+ if ((n->nlmsg_type != RTM_GETTCLASS) && !netlink_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  err = nlmsg_parse(n, sizeof(*tcm), tca, TCA_MAX, NULL);
diff --git a/net/tipc/netlink.c b/net/tipc/netlink.c
index 8bcd498..1e6081f 100644
--- a/net/tipc/netlink.c
+++ b/net/tipc/netlink.c
@@ -47,7 +47,7 @@ static int handle_cmd(struct sk_buff *skb, struct genl_info *info)
  int hdr_space = nlmsg_total_size(GENL_HDRLEN + TIPC_GENL_HDRLEN);
  u16 cmd;
 
- if ((req_userhdr->cmd & 0xC000) && (!capable(CAP_NET_ADMIN)))
+ if ((req_userhdr->cmd & 0xC000) && (!netlink_capable(skb, CAP_NET_ADMIN)))
   cmd = TIPC_CMD_NOT_NET_ADMIN;
  else
   cmd = req_userhdr->cmd;
diff --git a/net/xfrm/xfrm_user.c b/net/xfrm/xfrm_user.c
index 3f565e4..7a70a5a 100644
--- a/net/xfrm/xfrm_user.c
+++ b/net/xfrm/xfrm_user.c
@@ -2362,7 +2362,7 @@ static int xfrm_user_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh)
  link = &xfrm_dispatch[type];
 
  /* All operations require privileges, even GET */
- if (!ns_capable(net->user_ns, CAP_NET_ADMIN))
+ if (!netlink_net_capable(skb, CAP_NET_ADMIN))
   return -EPERM;
 
  if ((type == (XFRM_MSG_GETSA - XFRM_MSG_BASE) ||
-- 
1.7.1