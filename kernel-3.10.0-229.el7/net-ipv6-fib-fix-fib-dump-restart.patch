From 632dc8304bb84f5f419196efd131b41f35dedf69 Mon Sep 17 00:00:00 2001
From: Panu Matilainen <pmatilai@redhat.com>
Date: Wed, 26 Nov 2014 09:12:12 -0500
Subject: [net] ipv6: fib: fix fib dump restart

Message-id: <1416993132-18838-1-git-send-email-pmatilai@redhat.com>
Patchwork-id: 100963
O-Subject: [RHEL7 PATCH net 3/2] ipv6: fib: fix fib dump restart
Bugzilla: 1163605
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Marcelo Leitner <mleitner@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1163605
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8298451
Upstream: 1c2658545816088477e91860c3a645053719cb54

Simple cherry-pick of upstream commit:

commit 1c2658545816088477e91860c3a645053719cb54
Author: Kumar Sundararajan <kumar@fb.com>
Date:   Thu Apr 24 09:48:53 2014 -0400

    ipv6: fib: fix fib dump restart

    When the ipv6 fib changes during a table dump, the walk is
    restarted and the number of nodes dumped are skipped. But the existing
    code doesn't advance to the next node after a node is skipped. This can
    cause the dump to loop or produce lots of duplicates when the fib
    is modified during the dump.

    This change advances the walk to the next node if the current node is
    skipped after a restart.

    Signed-off-by: Kumar Sundararajan <kumar@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Panu Matilainen <pmatilai@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv6/ip6_fib.c b/net/ipv6/ip6_fib.c
index 32eccfd..ebabac7 100644
--- a/net/ipv6/ip6_fib.c
+++ b/net/ipv6/ip6_fib.c
@@ -1418,7 +1418,7 @@ static int fib6_walk_continue(struct fib6_walker_t *w)
 
     if (w->skip) {
      w->skip--;
-     continue;
+     goto skip;
     }
 
     err = w->func(w);
@@ -1428,6 +1428,7 @@ static int fib6_walk_continue(struct fib6_walker_t *w)
     w->count++;
     continue;
    }
+skip:
    w->state = FWS_U;
   case FWS_U:
    if (fn == w->root)
-- 
1.7.1