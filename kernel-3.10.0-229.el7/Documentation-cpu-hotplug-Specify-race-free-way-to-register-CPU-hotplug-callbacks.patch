From 96d3b7326ccf7d6758506ecee11a8049ff566c4f Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Mon, 14 Jul 2014 13:07:38 -0400
Subject: [Documentation] cpu-hotplug: Specify race-free way to register CPU hotplug callbacks

Message-id: <1405343292-21004-2-git-send-email-prarit@redhat.com>
Patchwork-id: 85756
O-Subject: [RHEL7.1 PATCH BZ 1119078 01/35] Doc/cpu-hotplug: Specify race-free way to register CPU hotplug callbacks
Bugzilla: 1119078
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Igor Mammedov <imammedo@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1119078

commit 8489d90b5f32effa402be2a4ee7636ba0c652145
Author: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
Date:   Tue Mar 11 02:04:32 2014 +0530

    Doc/cpu-hotplug: Specify race-free way to register CPU hotplug callbacks

    Recommend the usage of the new CPU hotplug callback registration APIs
    (__register_cpu_notifier() etc), when subsystems need to also perform
    initialization for already online CPUs. Provide examples of correct
    and race-free ways of achieving this, and point out the kinds of code
    that are error-prone.

    Cc: Rob Landley <rob@landley.net>
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Dean Nelson <dnelson@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/cpu-hotplug.txt b/Documentation/cpu-hotplug.txt
index 786dc82..2441cc3 100644
--- a/Documentation/cpu-hotplug.txt
+++ b/Documentation/cpu-hotplug.txt
@@ -312,12 +312,57 @@ things will happen if a notifier in path sent a BAD notify code.
 Q: I don't see my action being called for all CPUs already up and running?
 A: Yes, CPU notifiers are called only when new CPUs are on-lined or offlined.
    If you need to perform some action for each cpu already in the system, then
+   do this:
 
  for_each_online_cpu(i) {
   foobar_cpu_callback(&foobar_cpu_notifier, CPU_UP_PREPARE, i);
   foobar_cpu_callback(&foobar_cpu_notifier, CPU_ONLINE, i);
  }
 
+   However, if you want to register a hotplug callback, as well as perform
+   some initialization for CPUs that are already online, then do this:
+
+   Version 1: (Correct)
+   ---------
+
+    cpu_notifier_register_begin();
+
+  for_each_online_cpu(i) {
+   foobar_cpu_callback(&foobar_cpu_notifier,
+         CPU_UP_PREPARE, i);
+   foobar_cpu_callback(&foobar_cpu_notifier,
+         CPU_ONLINE, i);
+  }
+
+ /* Note the use of the double underscored version of the API */
+ __register_cpu_notifier(&foobar_cpu_notifier);
+
+ cpu_notifier_register_done();
+
+   Note that the following code is *NOT* the right way to achieve this,
+   because it is prone to an ABBA deadlock between the cpu_add_remove_lock
+   and the cpu_hotplug.lock.
+
+   Version 2: (Wrong!)
+   ---------
+
+ get_online_cpus();
+
+  for_each_online_cpu(i) {
+   foobar_cpu_callback(&foobar_cpu_notifier,
+         CPU_UP_PREPARE, i);
+   foobar_cpu_callback(&foobar_cpu_notifier,
+         CPU_ONLINE, i);
+  }
+
+ register_cpu_notifier(&foobar_cpu_notifier);
+
+ put_online_cpus();
+
+    So always use the first version shown above when you want to register
+    callbacks as well as initialize the already online CPUs.
+
+
 Q: If i would like to develop cpu hotplug support for a new architecture,
    what do i need at a minimum?
 A: The following are what is required for CPU hotplug infrastructure to work
-- 
1.7.1