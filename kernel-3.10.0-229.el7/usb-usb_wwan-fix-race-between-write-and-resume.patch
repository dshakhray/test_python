From b0890ec988a3618340905bb976492633bc0ccf18 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:08:37 -0400
Subject: [usb] usb_wwan: fix race between write and resume

Message-id: <1410887463-20674-446-git-send-email-dzickus@redhat.com>
Patchwork-id: 95466
O-Subject: [RHEL7 PATCH 445/591] USB: usb_wwan: fix race between write and resume
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit d9e93c08d8d985e5ef89436ebc9f4aad7e31559f
Author: xiao jin <jin.xiao@intel.com>
Date:   Mon May 26 19:23:14 2014 +0200

    USB: usb_wwan: fix race between write and resume

    We find a race between write and resume. usb_wwan_resume run play_delayed()
    and spin_unlock, but intfdata->suspended still is not set to zero.
    At this time usb_wwan_write is called and anchor the urb to delay
    list. Then resume keep running but the delayed urb have no chance
    to be commit until next resume. If the time of next resume is far
    away, tty will be blocked in tty_wait_until_sent during time. The
    race also can lead to writes being reordered.

    This patch put play_Delayed and intfdata->suspended together in the
    spinlock, it's to avoid the write race during resume.

    Fixes: 383cedc3bb43 ("USB: serial: full autosuspend support for the
    option driver")

    Signed-off-by: xiao jin <jin.xiao@intel.com>
    Signed-off-by: Zhang, Qi1 <qi1.zhang@intel.com>
    Reviewed-by: David Cohen <david.a.cohen@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v2.6.32
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/usb_wwan.c b/drivers/usb/serial/usb_wwan.c
index 47ad755..112693a 100644
--- a/drivers/usb/serial/usb_wwan.c
+++ b/drivers/usb/serial/usb_wwan.c
@@ -660,17 +660,15 @@ int usb_wwan_resume(struct usb_serial *serial)
   }
  }
 
+ spin_lock_irq(&intfdata->susp_lock);
  for (i = 0; i < serial->num_ports; i++) {
   /* walk all ports */
   port = serial->port[i];
   portdata = usb_get_serial_port_data(port);
 
   /* skip closed ports */
-  spin_lock_irq(&intfdata->susp_lock);
-  if (!portdata || !portdata->opened) {
-   spin_unlock_irq(&intfdata->susp_lock);
+  if (!portdata || !portdata->opened)
    continue;
-  }
 
   for (j = 0; j < N_IN_URB; j++) {
    urb = portdata->in_urbs[j];
@@ -683,9 +681,7 @@ int usb_wwan_resume(struct usb_serial *serial)
    }
   }
   play_delayed(port);
-  spin_unlock_irq(&intfdata->susp_lock);
  }
- spin_lock_irq(&intfdata->susp_lock);
  intfdata->suspended = 0;
  spin_unlock_irq(&intfdata->susp_lock);
 err_out:
-- 
1.7.1