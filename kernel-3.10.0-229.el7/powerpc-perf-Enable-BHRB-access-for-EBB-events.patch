From 5bf809a4cf4f5c283eed91132c1f2713f6a2f86a Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Fri, 1 Aug 2014 00:50:26 -0400
Subject: [powerpc] perf: Enable BHRB access for EBB events

Message-id: <1406854226-17977-6-git-send-email-gduarte@redhat.com>
Patchwork-id: 86926
O-Subject: [RHEL7.1 PATCH BZ 1121408 5/5] Powerpc/perf: Enable BHRB access for EBB events
Bugzilla: 1121408
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1121408
Upstream Status: Backport of 76cb8a783a4b7403a6731ffdeec0831cd4b19936

commit 76cb8a783a4b7403a6731ffdeec0831cd4b19936
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Fri Mar 14 16:00:34 2014 +1100

    powerpc/perf: Enable BHRB access for EBB events

    The previous commit added constraint and register handling to allow
    processes using EBB (Event Based Branches) to request access to the BHRB
    (Branch History Rolling Buffer).

    With that in place we can allow processes using EBB to access the BHRB.
    This is achieved by setting BHRBA in MMCR0 when we enable EBB access. We
    must also clear BHRBA when we are disabling.

    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/reg.h b/arch/powerpc/include/asm/reg.h
index 5420819..cd87042 100644
--- a/arch/powerpc/include/asm/reg.h
+++ b/arch/powerpc/include/asm/reg.h
@@ -636,6 +636,7 @@
 #define   MMCR0_PMXE 0x04000000UL /* performance monitor exception enable */
 #define   MMCR0_FCECE 0x02000000UL /* freeze ctrs on enabled cond or event */
 #define   MMCR0_TBEE 0x00400000UL /* time base exception enable */
+#define   MMCR0_BHRBA 0x00200000UL /* BHRB Access allowed in userspace */
 #define   MMCR0_EBE 0x00100000UL /* Event based branch enable */
 #define   MMCR0_PMCC 0x000c0000UL /* PMC control */
 #define   MMCR0_PMCC_U6 0x00080000UL /* PMC1-6 are R/W by user (PR) */
diff --git a/arch/powerpc/perf/core-book3s.c b/arch/powerpc/perf/core-book3s.c
index 3c368a6..06433ba 100644
--- a/arch/powerpc/perf/core-book3s.c
+++ b/arch/powerpc/perf/core-book3s.c
@@ -78,6 +78,7 @@ static unsigned int freeze_events_kernel = MMCR0_FCS;
 #define MMCR0_FC56  0
 #define MMCR0_PMAO  0
 #define MMCR0_EBE  0
+#define MMCR0_BHRBA  0
 #define MMCR0_PMCC  0
 #define MMCR0_PMCC_U6  0
 
@@ -543,8 +544,8 @@ static unsigned long ebb_switch_in(bool ebb, unsigned long mmcr0)
  if (!ebb)
   goto out;
 
- /* Enable EBB and read/write to all 6 PMCs for userspace */
- mmcr0 |= MMCR0_EBE | MMCR0_PMCC_U6;
+ /* Enable EBB and read/write to all 6 PMCs and BHRB for userspace */
+ mmcr0 |= MMCR0_EBE | MMCR0_BHRBA | MMCR0_PMCC_U6;
 
  /*
   * Add any bits from the user MMCR0, FC or PMAO. This is compatible
@@ -1067,11 +1068,12 @@ static void power_pmu_disable(struct pmu *pmu)
   }
 
   /*
-   * Set the 'freeze counters' bit, clear EBE/PMCC/PMAO/FC56.
+   * Set the 'freeze counters' bit, clear EBE/BHRBA/PMCC/PMAO/FC56
    */
   val  = mmcr0 = mfspr(SPRN_MMCR0);
   val |= MMCR0_FC;
-  val &= ~(MMCR0_EBE | MMCR0_PMCC | MMCR0_PMAO | MMCR0_FC56);
+  val &= ~(MMCR0_EBE | MMCR0_BHRBA | MMCR0_PMCC | MMCR0_PMAO |
+    MMCR0_FC56);
 
   /*
    * The barrier is to make sure the mtspr has been
-- 
1.7.1