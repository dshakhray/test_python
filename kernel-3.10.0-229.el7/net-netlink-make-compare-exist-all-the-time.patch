From 21ad6b6a844a73335c27a5825a5c6a137e80433d Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:27:53 -0400
Subject: [net] netlink: make compare exist all the time

Message-id: <a0ecd91af8e7227c28651fc74b7211e4e596e4a4.1410528971.git.jbenc@redhat.com>
Patchwork-id: 93975
O-Subject: [RHEL7.1 net PATCH 10/14] netlink: make compare exist all the time
Bugzilla: 1140661
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140661
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit ca15febfe98f7c681ac345fc1d2ee1b8decaa493
Author: Gao feng <gaofeng@cn.fujitsu.com>
Date:   Thu Jun 13 10:05:38 2013 +0800

    netlink: make compare exist all the time

    Commit da12c90e099789a63073fc82a19542ce54d4efb9
    "netlink: Add compare function for netlink_table"
    only set compare at the time we create kernel netlink,
    and reset compare to NULL at the time we finially
    release netlink socket, but netlink_lookup wants
    the compare exist always.

    So we should set compare after we allocate nl_table,
    and never reset it. make comapre exist all the time.

    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: Gao feng <gaofeng@cn.fujitsu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/netlink/af_netlink.c b/net/netlink/af_netlink.c
index 319967a..ee94c0f 100644
--- a/net/netlink/af_netlink.c
+++ b/net/netlink/af_netlink.c
@@ -1293,7 +1293,6 @@ static int netlink_release(struct socket *sock)
    kfree_rcu(old, rcu);
    nl_table[sk->sk_protocol].module = NULL;
    nl_table[sk->sk_protocol].bind = NULL;
-   nl_table[sk->sk_protocol].compare = NULL;
    nl_table[sk->sk_protocol].flags = 0;
    nl_table[sk->sk_protocol].registered = 0;
   }
@@ -2528,7 +2527,6 @@ __netlink_kernel_create(struct net *net, int unit, struct module *module,
   rcu_assign_pointer(nl_table[unit].listeners, listeners);
   nl_table[unit].cb_mutex = cb_mutex;
   nl_table[unit].module = module;
-  nl_table[unit].compare = netlink_compare;
   if (cfg) {
    nl_table[unit].bind = cfg->bind;
    nl_table[unit].flags = cfg->flags;
@@ -3193,6 +3191,8 @@ static int __init netlink_proto_init(void)
   hash->shift = 0;
   hash->mask = 0;
   hash->rehash_time = jiffies;
+
+  nl_table[i].compare = netlink_compare;
  }
 
  INIT_LIST_HEAD(&netlink_tap_all);
-- 
1.7.1