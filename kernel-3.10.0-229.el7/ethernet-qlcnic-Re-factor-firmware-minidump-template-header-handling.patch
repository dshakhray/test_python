From ca112b227b767e7f45d2af4bcda79f96b3fa0758 Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Thu, 21 Aug 2014 13:06:10 -0400
Subject: [ethernet] qlcnic: Re-factor firmware minidump template header handling

Message-id: <1408626422-3941-87-git-send-email-cdupuis@redhat.com>
Patchwork-id: 88644
O-Subject: [PATCH RHEL 7.1 086/138] qlcnic: Re-factor firmware minidump template header handling
Bugzilla: 1089352
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Shahed Shaikh <shahed.shaikh@qlogic.com>

Bug 1089352 (https://bugzilla.redhat.com/show_bug.cgi?id=1089352)

net commit id 225837a076b284ac408a3b0104584ae0ad117a0c

Treat firmware minidump template headers for 82xx and 83xx/84xx adapters separately,
as it may change for 82xx and 83xx/84xx adapter type independently.

Signed-off-by: Shahed Shaikh <shahed.shaikh@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
index 8c770f7..302be78 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
@@ -394,7 +394,7 @@ struct qlcnic_nic_intr_coalesce {
  u32 timer_out;
 };
 
-struct qlcnic_dump_template_hdr {
+struct qlcnic_83xx_dump_template_hdr {
  u32 type;
  u32 offset;
  u32 size;
@@ -411,15 +411,42 @@ struct qlcnic_dump_template_hdr {
  u32 rsvd[0];
 };
 
+struct qlcnic_82xx_dump_template_hdr {
+ u32 type;
+ u32 offset;
+ u32 size;
+ u32 cap_mask;
+ u32 num_entries;
+ u32 version;
+ u32 timestamp;
+ u32 checksum;
+ u32 drv_cap_mask;
+ u32 sys_info[3];
+ u32 saved_state[16];
+ u32 cap_sizes[8];
+ u32 rsvd[7];
+ u32 capabilities;
+ u32 rsvd1[0];
+};
+
 struct qlcnic_fw_dump {
  u8 clr; /* flag to indicate if dump is cleared */
  bool enable; /* enable/disable dump */
  u32 size; /* total size of the dump */
+ u32 cap_mask; /* Current capture mask */
  void *data; /* dump data area */
- struct qlcnic_dump_template_hdr *tmpl_hdr;
+ void *tmpl_hdr;
  dma_addr_t phys_addr;
  void *dma_buffer;
  bool use_pex_dma;
+ /* Read only elements which are common between 82xx and 83xx
+  * template header. Update these values immediately after we read
+  * template header from Firmware
+  */
+ u32 tmpl_hdr_size;
+ u32 version;
+ u32 num_entries;
+ u32 offset;
 };
 
 /*
@@ -1769,6 +1796,12 @@ struct qlcnic_hardware_ops {
     struct qlcnic_host_tx_ring *);
  void (*disable_tx_intr) (struct qlcnic_adapter *,
      struct qlcnic_host_tx_ring *);
+ u32 (*get_saved_state)(void *, u32);
+ void (*set_saved_state)(void *, u32, u32);
+ void (*cache_tmpl_hdr_values)(struct qlcnic_fw_dump *);
+ u32 (*get_cap_size)(void *, int);
+ void (*set_sys_info)(void *, int, u32);
+ void (*store_cap_mask)(void *, u32);
 };
 
 extern struct qlcnic_nic_template qlcnic_vf_ops;
@@ -2002,6 +2035,42 @@ static inline void qlcnic_read_phys_port_id(struct qlcnic_adapter *adapter)
   adapter->ahw->hw_ops->read_phys_port_id(adapter);
 }
 
+static inline u32 qlcnic_get_saved_state(struct qlcnic_adapter *adapter,
+      void *t_hdr, u32 index)
+{
+ return adapter->ahw->hw_ops->get_saved_state(t_hdr, index);
+}
+
+static inline void qlcnic_set_saved_state(struct qlcnic_adapter *adapter,
+       void *t_hdr, u32 index, u32 value)
+{
+ adapter->ahw->hw_ops->set_saved_state(t_hdr, index, value);
+}
+
+static inline void qlcnic_cache_tmpl_hdr_values(struct qlcnic_adapter *adapter,
+      struct qlcnic_fw_dump *fw_dump)
+{
+ adapter->ahw->hw_ops->cache_tmpl_hdr_values(fw_dump);
+}
+
+static inline u32 qlcnic_get_cap_size(struct qlcnic_adapter *adapter,
+          void *tmpl_hdr, int index)
+{
+ return adapter->ahw->hw_ops->get_cap_size(tmpl_hdr, index);
+}
+
+static inline void qlcnic_set_sys_info(struct qlcnic_adapter *adapter,
+           void *tmpl_hdr, int idx, u32 value)
+{
+ adapter->ahw->hw_ops->set_sys_info(tmpl_hdr, idx, value);
+}
+
+static inline void qlcnic_store_cap_mask(struct qlcnic_adapter *adapter,
+      void *tmpl_hdr, u32 mask)
+{
+ adapter->ahw->hw_ops->store_cap_mask(tmpl_hdr, mask);
+}
+
 static inline void qlcnic_get_beacon_state(struct qlcnic_adapter *adapter)
 {
  adapter->ahw->hw_ops->get_beacon_state(adapter);
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c
index 49931bd..1e7d9e3 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c
@@ -203,7 +203,12 @@ static struct qlcnic_hardware_ops qlcnic_83xx_hw_ops = {
  .disable_sds_intr  = qlcnic_83xx_disable_sds_intr,
  .enable_tx_intr   = qlcnic_83xx_enable_tx_intr,
  .disable_tx_intr  = qlcnic_83xx_disable_tx_intr,
-
+ .get_saved_state  = qlcnic_83xx_get_saved_state,
+ .set_saved_state  = qlcnic_83xx_set_saved_state,
+ .cache_tmpl_hdr_values  = qlcnic_83xx_cache_tmpl_hdr_values,
+ .get_cap_size   = qlcnic_83xx_get_cap_size,
+ .set_sys_info   = qlcnic_83xx_set_sys_info,
+ .store_cap_mask   = qlcnic_83xx_store_cap_mask,
 };
 
 static struct qlcnic_nic_template qlcnic_83xx_ops = {
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h
index f92485c..81c1889 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h
@@ -308,6 +308,8 @@ struct qlc_83xx_reset {
 #define QLC_83XX_IDC_FLASH_PARAM_ADDR   0x3e8020
 
 struct qlcnic_adapter;
+struct qlcnic_fw_dump;
+
 struct qlc_83xx_idc {
  int (*state_entry) (struct qlcnic_adapter *);
  u64  sec_counter;
@@ -650,4 +652,10 @@ int qlcnic_83xx_check_vnic_state(struct qlcnic_adapter *);
 void qlcnic_83xx_aer_stop_poll_work(struct qlcnic_adapter *);
 int qlcnic_83xx_aer_reset(struct qlcnic_adapter *);
 void qlcnic_83xx_aer_start_poll_work(struct qlcnic_adapter *);
+u32 qlcnic_83xx_get_saved_state(void *, u32);
+void qlcnic_83xx_set_saved_state(void *, u32, u32);
+void qlcnic_83xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *);
+u32 qlcnic_83xx_get_cap_size(void *, int);
+void qlcnic_83xx_set_sys_info(void *, int, u32);
+void qlcnic_83xx_store_cap_mask(void *, u32);
 #endif
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
index acee1a5..1960609 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
@@ -1639,14 +1639,14 @@ qlcnic_get_dump_flag(struct net_device *netdev, struct ethtool_dump *dump)
  }
 
  if (fw_dump->clr)
-  dump->len = fw_dump->tmpl_hdr->size + fw_dump->size;
+  dump->len = fw_dump->tmpl_hdr_size + fw_dump->size;
  else
   dump->len = 0;
 
  if (!qlcnic_check_fw_dump_state(adapter))
   dump->flag = ETH_FW_DUMP_DISABLE;
  else
-  dump->flag = fw_dump->tmpl_hdr->drv_cap_mask;
+  dump->flag = fw_dump->cap_mask;
 
  dump->version = adapter->fw_version;
  return 0;
@@ -1671,9 +1671,10 @@ qlcnic_get_dump_data(struct net_device *netdev, struct ethtool_dump *dump,
   netdev_info(netdev, "Dump not available\n");
   return -EINVAL;
  }
+
  /* Copy template header first */
- copy_sz = fw_dump->tmpl_hdr->size;
- hdr_ptr = (u32 *) fw_dump->tmpl_hdr;
+ copy_sz = fw_dump->tmpl_hdr_size;
+ hdr_ptr = (u32 *)fw_dump->tmpl_hdr;
  data = buffer;
  for (i = 0; i < copy_sz/sizeof(u32); i++)
   *data++ = cpu_to_le32(*hdr_ptr++);
@@ -1681,7 +1682,7 @@ qlcnic_get_dump_data(struct net_device *netdev, struct ethtool_dump *dump,
  /* Copy captured dump data */
  memcpy(buffer + copy_sz, fw_dump->data, fw_dump->size);
  dump->len = copy_sz + fw_dump->size;
- dump->flag = fw_dump->tmpl_hdr->drv_cap_mask;
+ dump->flag = fw_dump->cap_mask;
 
  /* Free dump area once data has been captured */
  vfree(fw_dump->data);
@@ -1703,7 +1704,11 @@ static int qlcnic_set_dump_mask(struct qlcnic_adapter *adapter, u32 mask)
   return -EOPNOTSUPP;
  }
 
- fw_dump->tmpl_hdr->drv_cap_mask = mask;
+ fw_dump->cap_mask = mask;
+
+ /* Store new capture mask in template header as well*/
+ qlcnic_store_cap_mask(adapter, fw_dump->tmpl_hdr, mask);
+
  netdev_info(netdev, "Driver mask changed to: 0x%x\n", mask);
  return 0;
 }
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h
index 63d7561..576b301 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h
@@ -161,6 +161,7 @@ struct qlcnic_host_sds_ring;
 struct qlcnic_host_tx_ring;
 struct qlcnic_hardware_context;
 struct qlcnic_adapter;
+struct qlcnic_fw_dump;
 
 int qlcnic_82xx_hw_read_wx_2M(struct qlcnic_adapter *adapter, ulong, int *);
 int qlcnic_82xx_hw_write_wx_2M(struct qlcnic_adapter *, ulong, u32);
@@ -213,4 +214,11 @@ int qlcnic_82xx_shutdown(struct pci_dev *);
 int qlcnic_82xx_resume(struct qlcnic_adapter *);
 void qlcnic_clr_all_drv_state(struct qlcnic_adapter *adapter, u8 failed);
 void qlcnic_fw_poll_work(struct work_struct *work);
+
+u32 qlcnic_82xx_get_saved_state(void *, u32);
+void qlcnic_82xx_set_saved_state(void *, u32, u32);
+void qlcnic_82xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *);
+u32 qlcnic_82xx_get_cap_size(void *, int);
+void qlcnic_82xx_set_sys_info(void *, int, u32);
+void qlcnic_82xx_store_cap_mask(void *, u32);
 #endif    /* __QLCNIC_HW_H_ */
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
index a436d0d..5942f5b 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
@@ -91,7 +91,6 @@ static void qlcnic_82xx_io_resume(struct pci_dev *);
 static void qlcnic_82xx_set_mac_filter_count(struct qlcnic_adapter *);
 static pci_ers_result_t qlcnic_82xx_io_error_detected(struct pci_dev *,
             pci_channel_state_t);
-
 static u32 qlcnic_vlan_tx_check(struct qlcnic_adapter *adapter)
 {
  struct qlcnic_hardware_context *ahw = adapter->ahw;
@@ -562,6 +561,12 @@ static struct qlcnic_hardware_ops qlcnic_hw_ops = {
  .disable_sds_intr  = qlcnic_82xx_disable_sds_intr,
  .enable_tx_intr   = qlcnic_82xx_enable_tx_intr,
  .disable_tx_intr  = qlcnic_82xx_disable_tx_intr,
+ .get_saved_state  = qlcnic_82xx_get_saved_state,
+ .set_saved_state  = qlcnic_82xx_set_saved_state,
+ .cache_tmpl_hdr_values  = qlcnic_82xx_cache_tmpl_hdr_values,
+ .get_cap_size   = qlcnic_82xx_get_cap_size,
+ .set_sys_info   = qlcnic_82xx_set_sys_info,
+ .store_cap_mask   = qlcnic_82xx_store_cap_mask,
 };
 
 static int qlcnic_check_multi_tx_capability(struct qlcnic_adapter *adapter)
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c
index 7763962..37b979b 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c
@@ -211,6 +211,107 @@ enum qlcnic_minidump_opcode {
  QLCNIC_DUMP_RDEND = 255
 };
 
+inline u32 qlcnic_82xx_get_saved_state(void *t_hdr, u32 index)
+{
+ struct qlcnic_82xx_dump_template_hdr *hdr = t_hdr;
+
+ return hdr->saved_state[index];
+}
+
+inline void qlcnic_82xx_set_saved_state(void *t_hdr, u32 index,
+     u32 value)
+{
+ struct qlcnic_82xx_dump_template_hdr *hdr = t_hdr;
+
+ hdr->saved_state[index] = value;
+}
+
+void qlcnic_82xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump)
+{
+ struct qlcnic_82xx_dump_template_hdr *hdr;
+
+ hdr = fw_dump->tmpl_hdr;
+ fw_dump->tmpl_hdr_size = hdr->size;
+ fw_dump->version = hdr->version;
+ fw_dump->num_entries = hdr->num_entries;
+ fw_dump->offset = hdr->offset;
+
+ hdr->drv_cap_mask = hdr->cap_mask;
+ fw_dump->cap_mask = hdr->cap_mask;
+}
+
+inline u32 qlcnic_82xx_get_cap_size(void *t_hdr, int index)
+{
+ struct qlcnic_82xx_dump_template_hdr *hdr = t_hdr;
+
+ return hdr->cap_sizes[index];
+}
+
+void qlcnic_82xx_set_sys_info(void *t_hdr, int idx, u32 value)
+{
+ struct qlcnic_82xx_dump_template_hdr *hdr = t_hdr;
+
+ hdr->sys_info[idx] = value;
+}
+
+void qlcnic_82xx_store_cap_mask(void *tmpl_hdr, u32 mask)
+{
+ struct qlcnic_82xx_dump_template_hdr *hdr = tmpl_hdr;
+
+ hdr->drv_cap_mask = mask;
+}
+
+inline u32 qlcnic_83xx_get_saved_state(void *t_hdr, u32 index)
+{
+ struct qlcnic_83xx_dump_template_hdr *hdr = t_hdr;
+
+ return hdr->saved_state[index];
+}
+
+inline void qlcnic_83xx_set_saved_state(void *t_hdr, u32 index,
+     u32 value)
+{
+ struct qlcnic_83xx_dump_template_hdr *hdr = t_hdr;
+
+ hdr->saved_state[index] = value;
+}
+
+void qlcnic_83xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump)
+{
+ struct qlcnic_83xx_dump_template_hdr *hdr;
+
+ hdr = fw_dump->tmpl_hdr;
+ fw_dump->tmpl_hdr_size = hdr->size;
+ fw_dump->version = hdr->version;
+ fw_dump->num_entries = hdr->num_entries;
+ fw_dump->offset = hdr->offset;
+
+ hdr->drv_cap_mask = hdr->cap_mask;
+ fw_dump->cap_mask = hdr->cap_mask;
+}
+
+inline u32 qlcnic_83xx_get_cap_size(void *t_hdr, int index)
+{
+ struct qlcnic_83xx_dump_template_hdr *hdr = t_hdr;
+
+ return hdr->cap_sizes[index];
+}
+
+void qlcnic_83xx_set_sys_info(void *t_hdr, int idx, u32 value)
+{
+ struct qlcnic_83xx_dump_template_hdr *hdr = t_hdr;
+
+ hdr->sys_info[idx] = value;
+}
+
+void qlcnic_83xx_store_cap_mask(void *tmpl_hdr, u32 mask)
+{
+ struct qlcnic_83xx_dump_template_hdr *hdr;
+
+ hdr = tmpl_hdr;
+ hdr->drv_cap_mask = mask;
+}
+
 struct qlcnic_dump_operations {
  enum qlcnic_minidump_opcode opcode;
  u32 (*handler)(struct qlcnic_adapter *, struct qlcnic_dump_entry *,
@@ -238,11 +339,11 @@ static u32 qlcnic_dump_crb(struct qlcnic_adapter *adapter,
 static u32 qlcnic_dump_ctrl(struct qlcnic_adapter *adapter,
        struct qlcnic_dump_entry *entry, __le32 *buffer)
 {
+ void *hdr = adapter->ahw->fw_dump.tmpl_hdr;
+ struct __ctrl *ctr = &entry->region.ctrl;
  int i, k, timeout = 0;
- u32 addr, data;
+ u32 addr, data, temp;
  u8 no_ops;
- struct __ctrl *ctr = &entry->region.ctrl;
- struct qlcnic_dump_template_hdr *t_hdr = adapter->ahw->fw_dump.tmpl_hdr;
 
  addr = ctr->addr;
  no_ops = ctr->no_ops;
@@ -285,29 +386,42 @@ static u32 qlcnic_dump_ctrl(struct qlcnic_adapter *adapter,
     }
     break;
    case QLCNIC_DUMP_RD_SAVE:
-    if (ctr->index_a)
-     addr = t_hdr->saved_state[ctr->index_a];
+    temp = ctr->index_a;
+    if (temp)
+     addr = qlcnic_get_saved_state(adapter,
+              hdr,
+              temp);
     data = qlcnic_ind_rd(adapter, addr);
-    t_hdr->saved_state[ctr->index_v] = data;
+    qlcnic_set_saved_state(adapter, hdr,
+             ctr->index_v, data);
     break;
    case QLCNIC_DUMP_WRT_SAVED:
-    if (ctr->index_v)
-     data = t_hdr->saved_state[ctr->index_v];
+    temp = ctr->index_v;
+    if (temp)
+     data = qlcnic_get_saved_state(adapter,
+              hdr,
+              temp);
     else
      data = ctr->val1;
-    if (ctr->index_a)
-     addr = t_hdr->saved_state[ctr->index_a];
+
+    temp = ctr->index_a;
+    if (temp)
+     addr = qlcnic_get_saved_state(adapter,
+              hdr,
+              temp);
     qlcnic_ind_wr(adapter, addr, data);
     break;
    case QLCNIC_DUMP_MOD_SAVE_ST:
-    data = t_hdr->saved_state[ctr->index_v];
+    data = qlcnic_get_saved_state(adapter, hdr,
+             ctr->index_v);
     data <<= ctr->shl_val;
     data >>= ctr->shr_val;
     if (ctr->val2)
      data &= ctr->val2;
     data |= ctr->val3;
     data += ctr->val1;
-    t_hdr->saved_state[ctr->index_v] = data;
+    qlcnic_set_saved_state(adapter, hdr,
+             ctr->index_v, data);
     break;
    default:
     dev_info(&adapter->pdev->dev,
@@ -544,7 +658,7 @@ out:
 static int qlcnic_start_pex_dma(struct qlcnic_adapter *adapter,
     struct __mem *mem)
 {
- struct qlcnic_dump_template_hdr *tmpl_hdr;
+ struct qlcnic_83xx_dump_template_hdr *tmpl_hdr;
  struct device *dev = &adapter->pdev->dev;
  u32 dma_no, dma_base_addr, temp_addr;
  int i, ret, dma_sts;
@@ -596,7 +710,7 @@ static u32 qlcnic_read_memory_pexdma(struct qlcnic_adapter *adapter,
  struct qlcnic_fw_dump *fw_dump = &adapter->ahw->fw_dump;
  u32 temp, dma_base_addr, size = 0, read_size = 0;
  struct qlcnic_pex_dma_descriptor *dma_descr;
- struct qlcnic_dump_template_hdr *tmpl_hdr;
+ struct qlcnic_83xx_dump_template_hdr *tmpl_hdr;
  struct device *dev = &adapter->pdev->dev;
  dma_addr_t dma_phys_addr;
  void *dma_buffer;
@@ -938,8 +1052,8 @@ static int
 qlcnic_fw_flash_get_minidump_temp_size(struct qlcnic_adapter *adapter,
            struct qlcnic_cmd_args *cmd)
 {
- struct qlcnic_dump_template_hdr tmp_hdr;
- u32 size = sizeof(struct qlcnic_dump_template_hdr) / sizeof(u32);
+ struct qlcnic_83xx_dump_template_hdr tmp_hdr;
+ u32 size = sizeof(tmp_hdr) / sizeof(u32);
  int ret = 0;
 
  if (qlcnic_82xx_check(adapter))
@@ -1027,17 +1141,19 @@ free_mem:
  return err;
 }
 
+#define QLCNIC_TEMPLATE_VERSION (0x20001)
+
 int qlcnic_fw_cmd_get_minidump_temp(struct qlcnic_adapter *adapter)
 {
- int err;
- u32 temp_size = 0;
- u32 version, csum, *tmp_buf;
  struct qlcnic_hardware_context *ahw;
- struct qlcnic_dump_template_hdr *tmpl_hdr;
+ struct qlcnic_fw_dump *fw_dump;
+ u32 version, csum, *tmp_buf;
  u8 use_flash_temp = 0;
+ u32 temp_size = 0;
+ int err;
 
  ahw = adapter->ahw;
-
+ fw_dump = &ahw->fw_dump;
  err = qlcnic_fw_get_minidump_temp_size(adapter, &version, &temp_size,
             &use_flash_temp);
  if (err) {
@@ -1046,11 +1162,11 @@ int qlcnic_fw_cmd_get_minidump_temp(struct qlcnic_adapter *adapter)
   return -EIO;
  }
 
- ahw->fw_dump.tmpl_hdr = vzalloc(temp_size);
- if (!ahw->fw_dump.tmpl_hdr)
+ fw_dump->tmpl_hdr = vzalloc(temp_size);
+ if (!fw_dump->tmpl_hdr)
   return -ENOMEM;
 
- tmp_buf = (u32 *)ahw->fw_dump.tmpl_hdr;
+ tmp_buf = (u32 *)fw_dump->tmpl_hdr;
  if (use_flash_temp)
   goto flash_temp;
 
@@ -1065,8 +1181,8 @@ flash_temp:
    dev_err(&adapter->pdev->dev,
     "Failed to get minidump template header %d\n",
     err);
-   vfree(ahw->fw_dump.tmpl_hdr);
-   ahw->fw_dump.tmpl_hdr = NULL;
+   vfree(fw_dump->tmpl_hdr);
+   fw_dump->tmpl_hdr = NULL;
    return -EIO;
   }
  }
@@ -1076,21 +1192,22 @@ flash_temp:
  if (csum) {
   dev_err(&adapter->pdev->dev,
    "Template header checksum validation failed\n");
-  vfree(ahw->fw_dump.tmpl_hdr);
-  ahw->fw_dump.tmpl_hdr = NULL;
+  vfree(fw_dump->tmpl_hdr);
+  fw_dump->tmpl_hdr = NULL;
   return -EIO;
  }
 
- tmpl_hdr = ahw->fw_dump.tmpl_hdr;
- tmpl_hdr->drv_cap_mask = tmpl_hdr->cap_mask;
+ qlcnic_cache_tmpl_hdr_values(adapter, fw_dump);
+
  dev_info(&adapter->pdev->dev,
    "Default minidump capture mask 0x%x\n",
-   tmpl_hdr->cap_mask);
+   fw_dump->cap_mask);
 
- if ((tmpl_hdr->version & 0xfffff) >= 0x20001)
-  ahw->fw_dump.use_pex_dma = true;
+ if (qlcnic_83xx_check(adapter) &&
+     (fw_dump->version & 0xfffff) >= QLCNIC_TEMPLATE_VERSION)
+  fw_dump->use_pex_dma = true;
  else
-  ahw->fw_dump.use_pex_dma = false;
+  fw_dump->use_pex_dma = false;
 
  qlcnic_enable_fw_dump_state(adapter);
 
@@ -1099,21 +1216,22 @@ flash_temp:
 
 int qlcnic_dump_fw(struct qlcnic_adapter *adapter)
 {
- __le32 *buffer;
- u32 ocm_window;
- char mesg[64];
- char *msg[] = {mesg, NULL};
- int i, k, ops_cnt, ops_index, dump_size = 0;
- u32 entry_offset, dump, no_entries, buf_offset = 0;
- struct qlcnic_dump_entry *entry;
  struct qlcnic_fw_dump *fw_dump = &adapter->ahw->fw_dump;
- struct qlcnic_dump_template_hdr *tmpl_hdr = fw_dump->tmpl_hdr;
  static const struct qlcnic_dump_operations *fw_dump_ops;
+ struct qlcnic_83xx_dump_template_hdr *hdr_83xx;
+ u32 entry_offset, dump, no_entries, buf_offset = 0;
+ int i, k, ops_cnt, ops_index, dump_size = 0;
  struct device *dev = &adapter->pdev->dev;
  struct qlcnic_hardware_context *ahw;
- void *temp_buffer;
+ struct qlcnic_dump_entry *entry;
+ void *temp_buffer, *tmpl_hdr;
+ u32 ocm_window;
+ __le32 *buffer;
+ char mesg[64];
+ char *msg[] = {mesg, NULL};
 
  ahw = adapter->ahw;
+ tmpl_hdr = fw_dump->tmpl_hdr;
 
  /* Return if we don't have firmware dump template header */
  if (!tmpl_hdr)
@@ -1133,8 +1251,9 @@ int qlcnic_dump_fw(struct qlcnic_adapter *adapter)
  netif_info(adapter->ahw, drv, adapter->netdev, "Take FW dump\n");
  /* Calculate the size for dump data area only */
  for (i = 2, k = 1; (i & QLCNIC_DUMP_MASK_MAX); i <<= 1, k++)
-  if (i & tmpl_hdr->drv_cap_mask)
-   dump_size += tmpl_hdr->cap_sizes[k];
+  if (i & fw_dump->cap_mask)
+   dump_size += qlcnic_get_cap_size(adapter, tmpl_hdr, k);
+
  if (!dump_size)
   return -EIO;
 
@@ -1144,10 +1263,10 @@ int qlcnic_dump_fw(struct qlcnic_adapter *adapter)
 
  buffer = fw_dump->data;
  fw_dump->size = dump_size;
- no_entries = tmpl_hdr->num_entries;
- entry_offset = tmpl_hdr->offset;
- tmpl_hdr->sys_info[0] = QLCNIC_DRIVER_VERSION;
- tmpl_hdr->sys_info[1] = adapter->fw_version;
+ no_entries = fw_dump->num_entries;
+ entry_offset = fw_dump->offset;
+ qlcnic_set_sys_info(adapter, tmpl_hdr, 0, QLCNIC_DRIVER_VERSION);
+ qlcnic_set_sys_info(adapter, tmpl_hdr, 1, adapter->fw_version);
 
  if (fw_dump->use_pex_dma) {
   temp_buffer = dma_alloc_coherent(dev, QLC_PEX_DMA_READ_SIZE,
@@ -1163,16 +1282,17 @@ int qlcnic_dump_fw(struct qlcnic_adapter *adapter)
   ops_cnt = ARRAY_SIZE(qlcnic_fw_dump_ops);
   fw_dump_ops = qlcnic_fw_dump_ops;
  } else {
+  hdr_83xx = tmpl_hdr;
   ops_cnt = ARRAY_SIZE(qlcnic_83xx_fw_dump_ops);
   fw_dump_ops = qlcnic_83xx_fw_dump_ops;
-  ocm_window = tmpl_hdr->ocm_wnd_reg[adapter->ahw->pci_func];
-  tmpl_hdr->saved_state[QLC_83XX_OCM_INDEX] = ocm_window;
-  tmpl_hdr->saved_state[QLC_83XX_PCI_INDEX] = ahw->pci_func;
+  ocm_window = hdr_83xx->ocm_wnd_reg[ahw->pci_func];
+  hdr_83xx->saved_state[QLC_83XX_OCM_INDEX] = ocm_window;
+  hdr_83xx->saved_state[QLC_83XX_PCI_INDEX] = ahw->pci_func;
  }
 
  for (i = 0; i < no_entries; i++) {
-  entry = (void *)tmpl_hdr + entry_offset;
-  if (!(entry->hdr.mask & tmpl_hdr->drv_cap_mask)) {
+  entry = tmpl_hdr + entry_offset;
+  if (!(entry->hdr.mask & fw_dump->cap_mask)) {
    entry->hdr.flags |= QLCNIC_DUMP_SKIP;
    entry_offset += entry->hdr.offset;
    continue;
@@ -1209,8 +1329,9 @@ int qlcnic_dump_fw(struct qlcnic_adapter *adapter)
 
  fw_dump->clr = 1;
  snprintf(mesg, sizeof(mesg), "FW_DUMP=%s", adapter->netdev->name);
- dev_info(dev, "%s: Dump data %d bytes captured, template header size %d bytes\n",
-   adapter->netdev->name, fw_dump->size, tmpl_hdr->size);
+ netdev_info(adapter->netdev,
+      "Dump data %d bytes captured, template header size %d bytes\n",
+      fw_dump->size, fw_dump->tmpl_hdr_size);
  /* Send a udev event to notify availability of FW dump */
  kobject_uevent_env(&dev->kobj, KOBJ_CHANGE, msg);
 
-- 
1.7.1