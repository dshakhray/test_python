From 0b47bfce0b9cdbae6cca7ea9919e6f4c150552ff Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Mon, 8 Sep 2014 15:07:28 -0400
Subject: [ethernet] ixgbe: cleanup IXGBE_DESC_UNUSED

Message-id: <1410188883-6595-14-git-send-email-jogreene@redhat.com>
Patchwork-id: 92339
O-Subject: [RHEL7.1 PATCH 13/48] ixgbe: cleanup IXGBE_DESC_UNUSED
Bugzilla: 1091124
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>

BZ: 1091124
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7919168
Tested: In beaker. See BZ for details

This patch just replaces the IXGBE_DESC_UNUSED macro with a like named
inline function ixgbevf_desc_unused. The inline function makes the logic
a bit more readable.

Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
Signed-off-by: Don Skidmore <donald.c.skidmore@intel.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit f880d07bc5bc9f453be7b1fc9c1a34853719d148)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h b/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
index 799de96..d97cfb9 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
@@ -286,9 +286,13 @@ static inline bool ixgbevf_qv_disable(struct ixgbevf_q_vector *q_vector)
  ((_eitr) ? (1000000000 / ((_eitr) * 256)) : 8)
 #define EITR_REG_TO_INTS_PER_SEC EITR_INTS_PER_SEC_TO_REG
 
-#define IXGBE_DESC_UNUSED(R) \
- ((((R)->next_to_clean > (R)->next_to_use) ? 0 : (R)->count) + \
- (R)->next_to_clean - (R)->next_to_use - 1)
+static inline u16 ixgbevf_desc_unused(struct ixgbevf_ring *ring)
+{
+ u16 ntc = ring->next_to_clean;
+ u16 ntu = ring->next_to_use;
+
+ return ((ntc > ntu) ? 0 : ring->count) + ntc - ntu - 1;
+}
 
 #define IXGBEVF_RX_DESC(R, i)     \
  (&(((union ixgbe_adv_rx_desc *)((R)->desc))[i]))
diff --git a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
index ff4634f..fde453f 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
@@ -251,7 +251,7 @@ static bool ixgbevf_clean_tx_irq(struct ixgbevf_q_vector *q_vector,
 
 #define TX_WAKE_THRESHOLD (DESC_NEEDED * 2)
  if (unlikely(count && netif_carrier_ok(tx_ring->netdev) &&
-       (IXGBE_DESC_UNUSED(tx_ring) >= TX_WAKE_THRESHOLD))) {
+       (ixgbevf_desc_unused(tx_ring) >= TX_WAKE_THRESHOLD))) {
   /* Make sure that anybody stopping the queue after this
    * sees the new next_to_clean.
    */
@@ -529,7 +529,7 @@ next_desc:
  }
 
  rx_ring->next_to_clean = i;
- cleaned_count = IXGBE_DESC_UNUSED(rx_ring);
+ cleaned_count = ixgbevf_desc_unused(rx_ring);
 
  if (cleaned_count)
   ixgbevf_alloc_rx_buffers(adapter, rx_ring, cleaned_count);
@@ -1405,7 +1405,7 @@ static void ixgbevf_configure(struct ixgbevf_adapter *adapter)
  for (i = 0; i < adapter->num_rx_queues; i++) {
   struct ixgbevf_ring *ring = &adapter->rx_ring[i];
   ixgbevf_alloc_rx_buffers(adapter, ring,
-      IXGBE_DESC_UNUSED(ring));
+      ixgbevf_desc_unused(ring));
  }
 }
 
@@ -3127,7 +3127,7 @@ static int __ixgbevf_maybe_stop_tx(struct ixgbevf_ring *tx_ring, int size)
 
  /* We need to check again in a case another CPU has just
   * made room available. */
- if (likely(IXGBE_DESC_UNUSED(tx_ring) < size))
+ if (likely(ixgbevf_desc_unused(tx_ring) < size))
   return -EBUSY;
 
  /* A reprieve! - use start_queue because it doesn't call schedule */
@@ -3138,7 +3138,7 @@ static int __ixgbevf_maybe_stop_tx(struct ixgbevf_ring *tx_ring, int size)
 
 static int ixgbevf_maybe_stop_tx(struct ixgbevf_ring *tx_ring, int size)
 {
- if (likely(IXGBE_DESC_UNUSED(tx_ring) >= size))
+ if (likely(ixgbevf_desc_unused(tx_ring) >= size))
   return 0;
  return __ixgbevf_maybe_stop_tx(tx_ring, size);
 }
-- 
1.7.1