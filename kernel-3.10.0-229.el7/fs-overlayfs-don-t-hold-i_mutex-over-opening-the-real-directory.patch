From 3e605236e54eb19aa5f3df016caf7d19f0371881 Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:35:38 -0500
Subject: [fs] overlayfs: don't hold ->i_mutex over opening the real directory

Message-id: <20141125163538.18115.79814.stgit@warthog.procyon.org.uk>
Patchwork-id: 100936
O-Subject: [PATCH 36/47] overlayfs: don't hold ->i_mutex over opening the real directory
Bugzilla: 985875
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Al Viro <viro@zeniv.linux.org.uk>

just use it to serialize the assignment

Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Original-commit: 3d268c9b136f51385f9d041f3f2424501b257388
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/overlayfs/readdir.c b/fs/overlayfs/readdir.c
index 1a40f77..40c7b0e 100644
--- a/fs/overlayfs/readdir.c
+++ b/fs/overlayfs/readdir.c
@@ -475,20 +475,27 @@ static int ovl_dir_fsync(struct file *file, loff_t start, loff_t end,
  if (!od->is_upper && ovl_path_type(dentry) == OVL_PATH_MERGE) {
   struct inode *inode = file_inode(file);
 
-  mutex_lock(&inode->i_mutex);
   realfile = od->upperfile;
   if (!realfile) {
    struct path upperpath;
 
    ovl_path_upper(dentry, &upperpath);
    realfile = ovl_path_open(&upperpath, O_RDONLY);
-   if (IS_ERR(realfile)) {
-    mutex_unlock(&inode->i_mutex);
-    return PTR_ERR(realfile);
+   mutex_lock(&inode->i_mutex);
+   if (!od->upperfile) {
+    if (IS_ERR(realfile)) {
+     mutex_unlock(&inode->i_mutex);
+     return PTR_ERR(realfile);
+    }
+    od->upperfile = realfile;
+   } else {
+    /* somebody has beaten us to it */
+    if (!IS_ERR(realfile))
+     fput(realfile);
+    realfile = od->upperfile;
    }
-   od->upperfile = realfile;
+   mutex_unlock(&inode->i_mutex);
   }
-  mutex_unlock(&inode->i_mutex);
  }
 
  return vfs_fsync_range(realfile, start, end, datasync);
-- 
1.7.1