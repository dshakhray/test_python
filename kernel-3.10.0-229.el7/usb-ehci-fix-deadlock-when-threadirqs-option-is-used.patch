From 072710dd927e517a954c3bd2567451cd8c2b5771 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:05:43 -0400
Subject: [usb] ehci: fix deadlock when threadirqs option is used

Message-id: <1410887463-20674-272-git-send-email-dzickus@redhat.com>
Patchwork-id: 95421
O-Subject: [RHEL7 PATCH 271/591] usb: ehci: fix deadlock when threadirqs option is used
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit a1227f3c1030e96ebc51d677d2f636268845c5fb
Author: Stanislaw Gruszka <sgruszka@redhat.com>
Date:   Wed Feb 19 10:29:01 2014 +0100

    usb: ehci: fix deadlock when threadirqs option is used

    ehci_irq() and ehci_hrtimer_func() can deadlock on ehci->lock when
    threadirqs option is used. To prevent the deadlock use
    spin_lock_irqsave() in ehci_irq().

    This change can be reverted when hrtimer callbacks become threaded.

    Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/ehci-hcd.c b/drivers/usb/host/ehci-hcd.c
index 7c1bf30..18e55f9 100644
--- a/drivers/usb/host/ehci-hcd.c
+++ b/drivers/usb/host/ehci-hcd.c
@@ -685,8 +685,15 @@ static irqreturn_t ehci_irq (struct usb_hcd *hcd)
  struct ehci_hcd  *ehci = hcd_to_ehci (hcd);
  u32   status, masked_status, pcd_status = 0, cmd;
  int   bh;
+ unsigned long  flags;
 
- spin_lock (&ehci->lock);
+ /*
+  * For threadirqs option we use spin_lock_irqsave() variant to prevent
+  * deadlock with ehci hrtimer callback, because hrtimer callbacks run
+  * in interrupt context even when threadirqs is specified. We can go
+  * back to spin_lock() variant when hrtimer callbacks become threaded.
+  */
+ spin_lock_irqsave(&ehci->lock, flags);
 
  status = ehci_readl(ehci, &ehci->regs->status);
 
@@ -704,7 +711,7 @@ static irqreturn_t ehci_irq (struct usb_hcd *hcd)
 
  /* Shared IRQ? */
  if (!masked_status || unlikely(ehci->rh_state == EHCI_RH_HALTED)) {
-  spin_unlock(&ehci->lock);
+  spin_unlock_irqrestore(&ehci->lock, flags);
   return IRQ_NONE;
  }
 
@@ -815,7 +822,7 @@ dead:
 
  if (bh)
   ehci_work (ehci);
- spin_unlock (&ehci->lock);
+ spin_unlock_irqrestore(&ehci->lock, flags);
  if (pcd_status)
   usb_hcd_poll_rh_status(hcd);
  return IRQ_HANDLED;
-- 
1.7.1