From 4338deee0ce07f29dae97d44573fb240be82e84b Mon Sep 17 00:00:00 2001
From: Hannes Frederic Sowa <hannes@redhat.com>
Date: Mon, 8 Dec 2014 17:33:07 -0500
Subject: [net] ipv4: use ip_skb_dst_mtu to determine mtu in ip_fragment

Message-id: <7835185896e89e721d153f5babf7c6e080c7e5e2.1418058212.git.hannes@redhat.com>
Patchwork-id: 101184
O-Subject: [RHEL7.1 net 11/13] ipv4: use ip_skb_dst_mtu to determine mtu in ip_fragment
Bugzilla: 1170116
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1170116
Upstream Status: 69647ce46a236a355a7a3096d793819a9bd7c1d3
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8344420

Upstream Commit:
commit 69647ce46a236a355a7a3096d793819a9bd7c1d3
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Wed Feb 26 01:20:41 2014 +0100

    ipv4: use ip_skb_dst_mtu to determine mtu in ip_fragment

    ip_skb_dst_mtu mostly falls back to ip_dst_mtu_maybe_forward if no socket
    is attached to the skb (in case of forwarding) or determines the mtu like
    we do in ip_finish_output, which actually checks if we should branch to
    ip_fragment. Thus use the same function to determine the mtu here, too.

    This is important for the introduction of IP_PMTUDISC_OMIT, where we
    want the packets getting cut in pieces of the size of the outgoing
    interface mtu. IPv6 already does this correctly.

    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Hannes Frederic Sowa <hannes@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index 7554158..3ddf426 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -491,7 +491,6 @@ int ip_fragment(struct sk_buff *skb, int (*output)(struct sk_buff *))
  __be16 not_last_frag;
  struct rtable *rt = skb_rtable(skb);
  int err = 0;
- bool forwarding = IPCB(skb)->flags & IPSKB_FORWARDED;
 
  dev = rt->dst.dev;
 
@@ -501,7 +500,7 @@ int ip_fragment(struct sk_buff *skb, int (*output)(struct sk_buff *))
 
  iph = ip_hdr(skb);
 
- mtu = ip_dst_mtu_maybe_forward(&rt->dst, forwarding);
+ mtu = ip_skb_dst_mtu(skb);
  if (unlikely(((iph->frag_off & htons(IP_DF)) && !skb->local_df) ||
        (IPCB(skb)->frag_max_size &&
         IPCB(skb)->frag_max_size > mtu))) {
-- 
1.7.1