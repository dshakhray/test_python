From 45f00614d9e1ef8a9c5030eee5bc990d12f94619 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:07:26 -0400
Subject: [tools] perf/record: Propagate exit status of a command line workload

Message-id: <1410181752-25631-202-git-send-email-jolsa@redhat.com>
Patchwork-id: 91994
O-Subject: [PATCH RHEL7.1 BZ1134356 201/307] perf record: Propagate exit status of a command line workload
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 4560471053a9eb1586d0091066016a5cbcef4b6b
Author: Namhyung Kim <namhyung@kernel.org>
Date: Mon May 12 09:47:24 2014 +0900

description
===========
Currently perf record doesn't propagate the exit status of a workload
given by the command line.  But sometimes it'd useful if it's
propagated so that a monitoring script can handle errors
appropriately.

To do that, it moves most of logic out of the exit handlers and run
them directly in the __cmd_record().  The only thing needs to be done
in the handler is propagating terminating signal so that the shell can
terminate its loop properly when Ctrl-C was pressed.  Also it cleaned
up the resource management code in record__exit().

With this change, perf record returns the child exit status in case of
normal termination and send signal to itself when terminated by signal.

Example run of Stephane's case:

  $ perf record true && echo yes || echo no
  [ perf record: Woken up 1 times to write data ]
  [ perf record: Captured and wrote 0.013 MB perf.data (~589 samples) ]
  yes

  $ perf record false && echo yes || echo no
  [ perf record: Woken up 1 times to write data ]
  [ perf record: Captured and wrote 0.013 MB perf.data (~589 samples) ]
  no

Jiri's case (error in parent):

  $ perf record -m 10G true && echo yes || echo no
  rounding mmap pages size to 17179869184 bytes (4194304 pages)
  failed to mmap with 12 (Cannot allocate memory)
  no

  $ ulimit -n 6
  $ perf record sleep 1 && echo yes || echo no
  failed to create 'go' pipe: Too many open files
  Couldn't run the workload!
  no

And Peter's case (interrupted by signal):

  $ while :; do perf record sleep 1; done
  ^C[ perf record: Woken up 1 times to write data ]
  [ perf record: Captured and wrote 0.014 MB perf.data (~593 samples) ]
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 8ce62ef..2e0d484 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -147,29 +147,19 @@ static void sig_handler(int sig)
 {
  if (sig == SIGCHLD)
   child_finished = 1;
+ else
+  signr = sig;
 
  done = 1;
- signr = sig;
 }
 
-static void record__sig_exit(int exit_status __maybe_unused, void *arg)
+static void record__sig_exit(void)
 {
- struct record *rec = arg;
- int status;
-
- if (rec->evlist->workload.pid > 0) {
-  if (!child_finished)
-   kill(rec->evlist->workload.pid, SIGTERM);
-
-  wait(&status);
-  if (WIFSIGNALED(status))
-   psignal(WTERMSIG(status), rec->progname);
- }
-
- if (signr == -1 || signr == SIGUSR1)
+ if (signr == -1)
   return;
 
  signal(signr, SIG_DFL);
+ raise(signr);
 }
 
 static int record__open(struct record *rec)
@@ -243,27 +233,6 @@ static int process_buildids(struct record *rec)
            size, &build_id__mark_dso_hit_ops);
 }
 
-static void record__exit(int status, void *arg)
-{
- struct record *rec = arg;
- struct perf_data_file *file = &rec->file;
-
- if (status != 0)
-  return;
-
- if (!file->is_pipe) {
-  rec->session->header.data_size += rec->bytes_written;
-
-  if (!rec->no_buildid)
-   process_buildids(rec);
-  perf_session__write_header(rec->session, rec->evlist,
-        file->fd, true);
-  perf_session__delete(rec->session);
-  perf_evlist__delete(rec->evlist);
-  symbol__exit();
- }
-}
-
 static void perf_event__synthesize_guest_os(struct machine *machine, void *data)
 {
  int err;
@@ -344,18 +313,19 @@ static volatile int workload_exec_errno;
  * if the fork fails, since we asked by setting its
  * want_signal to true.
  */
-static void workload_exec_failed_signal(int signo, siginfo_t *info,
+static void workload_exec_failed_signal(int signo __maybe_unused,
+     siginfo_t *info,
      void *ucontext __maybe_unused)
 {
  workload_exec_errno = info->si_value.sival_int;
  done = 1;
- signr = signo;
  child_finished = 1;
 }
 
 static int __cmd_record(struct record *rec, int argc, const char **argv)
 {
  int err;
+ int status = 0;
  unsigned long waking = 0;
  const bool forks = argc > 0;
  struct machine *machine;
@@ -367,7 +337,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
 
  rec->progname = argv[0];
 
- on_exit(record__sig_exit, rec);
+ atexit(record__sig_exit);
  signal(SIGCHLD, sig_handler);
  signal(SIGINT, sig_handler);
  signal(SIGTERM, sig_handler);
@@ -388,32 +358,28 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
           workload_exec_failed_signal);
   if (err < 0) {
    pr_err("Couldn't run the workload!\n");
+   status = err;
    goto out_delete_session;
   }
  }
 
  if (record__open(rec) != 0) {
   err = -1;
-  goto out_delete_session;
+  goto out_child;
  }
 
  if (!rec->evlist->nr_groups)
   perf_header__clear_feat(&session->header, HEADER_GROUP_DESC);
 
- /*
-  * perf_session__delete(session) will be called at record__exit()
-  */
- on_exit(record__exit, rec);
-
  if (file->is_pipe) {
   err = perf_header__write_pipe(file->fd);
   if (err < 0)
-   goto out_delete_session;
+   goto out_child;
  } else {
   err = perf_session__write_header(session, rec->evlist,
        file->fd, false);
   if (err < 0)
-   goto out_delete_session;
+   goto out_child;
  }
 
  if (!rec->no_buildid
@@ -421,7 +387,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
   pr_err("Couldn't generate buildids. "
          "Use --no-buildid to profile anyway.\n");
   err = -1;
-  goto out_delete_session;
+  goto out_child;
  }
 
  machine = &session->machines.host;
@@ -431,7 +397,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
          process_synthesized_event);
   if (err < 0) {
    pr_err("Couldn't synthesize attrs.\n");
-   goto out_delete_session;
+   goto out_child;
   }
 
   if (have_tracepoints(&rec->evlist->entries)) {
@@ -447,7 +413,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
           process_synthesized_event);
    if (err <= 0) {
     pr_err("Couldn't record tracing data.\n");
-    goto out_delete_session;
+    goto out_child;
    }
    rec->bytes_written += err;
   }
@@ -475,7 +441,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
  err = __machine__synthesize_threads(machine, tool, &opts->target, rec->evlist->threads,
          process_synthesized_event, opts->sample_address);
  if (err != 0)
-  goto out_delete_session;
+  goto out_child;
 
  if (rec->realtime_prio) {
   struct sched_param param;
@@ -484,7 +450,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
   if (sched_setscheduler(0, SCHED_FIFO, &param)) {
    pr_err("Could not set realtime priority.\n");
    err = -1;
-   goto out_delete_session;
+   goto out_child;
   }
  }
 
@@ -512,13 +478,15 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
 
   if (record__mmap_read_all(rec) < 0) {
    err = -1;
-   goto out_delete_session;
+   goto out_child;
   }
 
   if (hits == rec->samples) {
    if (done)
     break;
    err = poll(rec->evlist->pollfd, rec->evlist->nr_fds, -1);
+   if (err < 0 && errno == EINTR)
+    err = 0;
    waking++;
   }
 
@@ -538,28 +506,52 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
   const char *emsg = strerror_r(workload_exec_errno, msg, sizeof(msg));
   pr_err("Workload failed: %s\n", emsg);
   err = -1;
-  goto out_delete_session;
+  goto out_child;
  }
 
- if (quiet || signr == SIGUSR1)
-  return 0;
+ if (!quiet) {
+  fprintf(stderr, "[ perf record: Woken up %ld times to write data ]\n", waking);
 
- fprintf(stderr, "[ perf record: Woken up %ld times to write data ]\n", waking);
+  /*
+   * Approximate RIP event size: 24 bytes.
+   */
+  fprintf(stderr,
+   "[ perf record: Captured and wrote %.3f MB %s (~%" PRIu64 " samples) ]\n",
+   (double)rec->bytes_written / 1024.0 / 1024.0,
+   file->path,
+   rec->bytes_written / 24);
+ }
 
- /*
-  * Approximate RIP event size: 24 bytes.
-  */
- fprintf(stderr,
-  "[ perf record: Captured and wrote %.3f MB %s (~%" PRIu64 " samples) ]\n",
-  (double)rec->bytes_written / 1024.0 / 1024.0,
-  file->path,
-  rec->bytes_written / 24);
+out_child:
+ if (forks) {
+  int exit_status;
 
- return 0;
+  if (!child_finished)
+   kill(rec->evlist->workload.pid, SIGTERM);
+
+  wait(&exit_status);
+
+  if (err < 0)
+   status = err;
+  else if (WIFEXITED(exit_status))
+   status = WEXITSTATUS(exit_status);
+  else if (WIFSIGNALED(exit_status))
+   signr = WTERMSIG(exit_status);
+ } else
+  status = err;
+
+ if (!err && !file->is_pipe) {
+  rec->session->header.data_size += rec->bytes_written;
+
+  if (!rec->no_buildid)
+   process_buildids(rec);
+  perf_session__write_header(rec->session, rec->evlist,
+        file->fd, true);
+ }
 
 out_delete_session:
  perf_session__delete(session);
- return err;
+ return status;
 }
 
 #define BRANCH_OPT(n, m) \
@@ -988,6 +980,7 @@ int cmd_record(int argc, const char **argv, const char *prefix __maybe_unused)
 
  err = __cmd_record(&record, argc, argv);
 out_symbol_exit:
+ perf_evlist__delete(rec->evlist);
  symbol__exit();
  return err;
 }
-- 
1.7.1