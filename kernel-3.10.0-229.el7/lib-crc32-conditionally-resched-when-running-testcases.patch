From 9eda1eb9ae0ee32cbb90fbce3221231d844647e6 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Thu, 16 Jan 2014 15:19:47 -0500
Subject: [lib] crc32: conditionally resched when running testcases

Message-id: <3b47c92506f82373b48ece42f7313291239e2863.1389878943.git.dborkman@redhat.com>
Patchwork-id: 74352
O-Subject: [RHEL7 PATCH net 07/11] lib: crc32: conditionally resched when running testcases
Bugzilla: 1054215
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: Thomas Graf <tgraf@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1054215
Upstream Status: cc0ac1999589c9f713550adde85a09b0dbb75d86
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=6885774
Tested: verified by QA in their IPVS lab and on beaker for basic tests

Upstream Commit:
commit cc0ac1999589c9f713550adde85a09b0dbb75d86
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Mon Nov 4 17:10:26 2013 +0100

    lib: crc32: conditionally resched when running testcases

    Fengguang reports that when crc32 selftests are running on startup, on
    some e.g. 32bit systems, we can get a CPU stall like "INFO: rcu_sched
    self-detected stall on CPU { 0} (t=2101 jiffies g=4294967081 c=4294967080
    q=41)". As this is not intended, add a cond_resched() at the end of a
    test case to fix it. Introduced by efba721f63 ("lib: crc32: add test cases
    for crc32{, c}_combine routines").

    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/lib/crc32.c b/lib/crc32.c
index 69dd124..3a1dfa8 100644
--- a/lib/crc32.c
+++ b/lib/crc32.c
@@ -29,6 +29,7 @@
 #include <linux/crc32.h>
 #include <linux/module.h>
 #include <linux/types.h>
+#include <linux/sched.h>
 #include "crc32defs.h"
 
 #if CRC_LE_BITS > 8
@@ -1054,6 +1055,7 @@ static int __init crc32c_combine_test(void)
          crc_full == test[i].crc32c_le))
     errors++;
    runs++;
+   cond_resched();
   }
  }
 
@@ -1147,6 +1149,7 @@ static int __init crc32_combine_test(void)
          crc_full == test[i].crc_le))
     errors++;
    runs++;
+   cond_resched();
   }
  }
 
-- 
1.7.1