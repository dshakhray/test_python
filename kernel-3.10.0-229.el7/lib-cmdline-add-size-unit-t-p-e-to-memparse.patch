From 925949bf9a2ee9a1e39bf7ad4e222f73a45b2a94 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Fri, 12 Sep 2014 18:53:04 -0400
Subject: [lib] cmdline: add size unit t/p/e to memparse

Message-id: <54134110.7010202@redhat.com>
Patchwork-id: 94664
O-Subject: [RHEL7.1 PATCH] lib/cmdline.c: add size unit t/p/e to memparse
Bugzilla: 1058608
RH-Acked-by: Zach Brown <zab@redhat.com>
RH-Acked-by: Johannes Weiner <jweiner@redhat.com>

This is for
Bug 1058608 - [RFE] btrfs-progs: btrfs resize doesn't support T/P/E suffix

Build at https://brewweb.devel.redhat.com/taskinfo?taskID=7949419

Upstream commit:

    commit e004f3c7780de32fa822f292ebadd985bcadb1e0
    Author: Gui Hecheng <guihc.fnst@cn.fujitsu.com>
    Date:   Wed Aug 6 16:09:29 2014 -0700

    lib/cmdline.c: add size unit t/p/e to memparse

    For modern filesystems such as btrfs, t/p/e size level operations are
    common.  add size unit t/p/e parsing to memparse

    Signed-off-by: Gui Hecheng <guihc.fnst@cn.fujitsu.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Satoru Takeuchi <takeuchi_satoru@jp.fujitsu.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
---

Why is btrfs doing in-kernel string parsing for resize?  Who knows,
but they are...  I'll just mention in passing that no other "modern
filesystem" requires this, but ah well, it's harmless.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/lib/cmdline.c b/lib/cmdline.c
index eb67911..16768f2 100644
--- a/lib/cmdline.c
+++ b/lib/cmdline.c
@@ -119,11 +119,7 @@ char *get_options(const char *str, int nints, int *ints)
  * @retptr: (output) Optional pointer to next char after parse completes
  *
  * Parses a string into a number.  The number stored at @ptr is
- * potentially suffixed with %K (for kilobytes, or 1024 bytes),
- * %M (for megabytes, or 1048576 bytes), or %G (for gigabytes, or
- * 1073741824).  If the number is suffixed with K, M, or G, then
- * the return value is the number multiplied by one kilobyte, one
- * megabyte, or one gigabyte, respectively.
+ * potentially suffixed with K, M, G, T, P, E.
  */
 
 unsigned long long memparse(const char *ptr, char **retptr)
@@ -133,6 +129,15 @@ unsigned long long memparse(const char *ptr, char **retptr)
  unsigned long long ret = simple_strtoull(ptr, &endptr, 0);
 
  switch (*endptr) {
+ case 'E':
+ case 'e':
+  ret <<= 10;
+ case 'P':
+ case 'p':
+  ret <<= 10;
+ case 'T':
+ case 't':
+  ret <<= 10;
  case 'G':
  case 'g':
   ret <<= 10;
-- 
1.7.1