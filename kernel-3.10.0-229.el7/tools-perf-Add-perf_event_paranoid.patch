From b02adebfdf1c3c1c7766fcac9be578e00a5c08e9 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:50:27 -0400
Subject: [tools] perf: Add perf_event_paranoid()

Message-id: <1408953210-26343-140-git-send-email-jolsa@redhat.com>
Patchwork-id: 88840
O-Subject: [PATCH RHEL7.1 BZ1133083 139/322] perf tools: Add perf_event_paranoid()
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 1a47245d2f3bf6276c95cd37901b562962d6ae47
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Wed Dec 11 14:36:23 2013 +0200

description
===========
Add a function to return the value of
/proc/sys/kernel/perf_event_paranoid.

This will be used to determine default values for mmap size because perf
is not subject to mmap limits when perf_event_paranoid is less than
zero.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index af25055..2eb7378 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -1191,8 +1191,7 @@ int perf_evlist__strerror_open(struct perf_evlist *evlist __maybe_unused,
         "Error:\t%s.\n"
         "Hint:\tCheck /proc/sys/kernel/perf_event_paranoid setting.", emsg);
 
-  if (filename__read_int("/proc/sys/kernel/perf_event_paranoid", &value))
-   break;
+  value = perf_event_paranoid();
 
   printed += scnprintf(buf + printed, size - printed, "\nHint:\t");
 
diff --git a/tools/perf/util/util.c b/tools/perf/util/util.c
index 4a57609..8f63dba 100644
--- a/tools/perf/util/util.c
+++ b/tools/perf/util/util.c
@@ -1,5 +1,6 @@
 #include "../perf.h"
 #include "util.h"
+#include "fs.h"
 #include <sys/mman.h>
 #ifdef HAVE_BACKTRACE_SUPPORT
 #include <execinfo.h>
@@ -8,6 +9,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
+#include <limits.h>
 #include <linux/kernel.h>
 
 /*
@@ -496,3 +498,20 @@ const char *get_filename_for_perf_kvm(void)
 
  return filename;
 }
+
+int perf_event_paranoid(void)
+{
+ char path[PATH_MAX];
+ const char *procfs = procfs__mountpoint();
+ int value;
+
+ if (!procfs)
+  return INT_MAX;
+
+ scnprintf(path, PATH_MAX, "%s/sys/kernel/perf_event_paranoid", procfs);
+
+ if (filename__read_int(path, &value))
+  return INT_MAX;
+
+ return value;
+}
diff --git a/tools/perf/util/util.h b/tools/perf/util/util.h
index 0171213..1e7d413 100644
--- a/tools/perf/util/util.h
+++ b/tools/perf/util/util.h
@@ -321,6 +321,7 @@ void free_srcline(char *srcline);
 
 int filename__read_int(const char *filename, int *value);
 int filename__read_str(const char *filename, char **buf, size_t *sizep);
+int perf_event_paranoid(void);
 
 const char *get_filename_for_perf_kvm(void);
 #endif /* GIT_COMPAT_UTIL_H */
-- 
1.7.1