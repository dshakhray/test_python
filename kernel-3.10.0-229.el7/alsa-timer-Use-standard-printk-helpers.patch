From ade0f724348cb026851ac8e916b71791fa63f509 Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:19:25 -0400
Subject: [alsa] timer: Use standard printk helpers

Message-id: <140972823573-115-patchset-jkysela@redhat.com>
Patchwork-id: 90815
O-Subject: [RHEL 7.1 PATCH 114/442] ALSA: timer: Use standard printk helpers
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

Use the standard pr_xxx() helpers instead of home-baked snd_print*().

Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: cf74dcf3512271bca4bb5fe79274ad23c22f5dd3)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/core/hrtimer.c b/sound/core/hrtimer.c
index b8b31c4..886be7d 100644
--- a/sound/core/hrtimer.c
+++ b/sound/core/hrtimer.c
@@ -126,8 +126,7 @@ static int __init snd_hrtimer_init(void)
 
  hrtimer_get_res(CLOCK_MONOTONIC, &tp);
  if (tp.tv_sec > 0 || !tp.tv_nsec) {
-  snd_printk(KERN_ERR
-      "snd-hrtimer: Invalid resolution %u.%09u",
+  pr_err("snd-hrtimer: Invalid resolution %u.%09u",
       (unsigned)tp.tv_sec, (unsigned)tp.tv_nsec);
   return -EINVAL;
  }
diff --git a/sound/core/rtctimer.c b/sound/core/rtctimer.c
index e85e72b..26ce582 100644
--- a/sound/core/rtctimer.c
+++ b/sound/core/rtctimer.c
@@ -132,8 +132,7 @@ static int __init rtctimer_init(void)
 
  if (rtctimer_freq < 2 || rtctimer_freq > 8192 ||
      !is_power_of_2(rtctimer_freq)) {
-  snd_printk(KERN_ERR "rtctimer: invalid frequency %d\n",
-      rtctimer_freq);
+  pr_err("ALSA: rtctimer: invalid frequency %d\n", rtctimer_freq);
   return -EINVAL;
  }
 
diff --git a/sound/core/timer.c b/sound/core/timer.c
index 6ddcf06..5bc1f3b 100644
--- a/sound/core/timer.c
+++ b/sound/core/timer.c
@@ -240,7 +240,8 @@ int snd_timer_open(struct snd_timer_instance **ti,
   /* open a slave instance */
   if (tid->dev_sclass <= SNDRV_TIMER_SCLASS_NONE ||
       tid->dev_sclass > SNDRV_TIMER_SCLASS_OSS_SEQUENCER) {
-   snd_printd("invalid slave class %i\n", tid->dev_sclass);
+   pr_debug("ALSA: timer: invalid slave class %i\n",
+     tid->dev_sclass);
    return -EINVAL;
   }
   mutex_lock(&register_mutex);
@@ -774,7 +775,7 @@ int snd_timer_new(struct snd_card *card, char *id, struct snd_timer_id *tid,
   *rtimer = NULL;
  timer = kzalloc(sizeof(*timer), GFP_KERNEL);
  if (timer == NULL) {
-  snd_printk(KERN_ERR "timer: cannot allocate\n");
+  pr_err("ALSA: timer: cannot allocate\n");
   return -ENOMEM;
  }
  timer->tmr_class = tid->dev_class;
@@ -813,7 +814,7 @@ static int snd_timer_free(struct snd_timer *timer)
  if (! list_empty(&timer->open_list_head)) {
   struct list_head *p, *n;
   struct snd_timer_instance *ti;
-  snd_printk(KERN_WARNING "timer %p is busy?\n", timer);
+  pr_warn("ALSA: timer %p is busy?\n", timer);
   list_for_each_safe(p, n, &timer->open_list_head) {
    list_del_init(p);
    ti = list_entry(p, struct snd_timer_instance, open_list);
@@ -1955,12 +1956,10 @@ static int __init alsa_timer_init(void)
 #endif
 
  if ((err = snd_timer_register_system()) < 0)
-  snd_printk(KERN_ERR "unable to register system timer (%i)\n",
-      err);
+  pr_err("ALSA: unable to register system timer (%i)\n", err);
  if ((err = snd_register_device(SNDRV_DEVICE_TYPE_TIMER, NULL, 0,
            &snd_timer_f_ops, NULL, "timer")) < 0)
-  snd_printk(KERN_ERR "unable to register timer device (%i)\n",
-      err);
+  pr_err("ALSA: unable to register timer device (%i)\n", err);
  snd_timer_proc_init();
  return 0;
 }
-- 
1.7.1