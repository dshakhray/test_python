From b31aa0c4fa3a1ce5d90214228ca377fca4ade9f3 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Wed, 2 Jul 2014 14:30:59 -0400
Subject: [s390] ptrace: correct insufficient sanitization when setting psw mask

Message-id: <1404311459-29003-1-git-send-email-brueckner@redhat.com>
Patchwork-id: 5188
O-Subject: [kernel team] [RHEL7.1 PATCH] [EMBARGOED CVE-2014-3534] [s390] s390/ptrace: correct insufficient sanitization when setting psw mask
Bugzilla: 1113673
CVE: CVE-2014-3534
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Petr  Matousek <pmatouse@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Description
-----------
The PSW mask check of the PTRACE_POKEUSR_AREA command is incorrect. The
PSW_MASK_USER define contains the PSW_MASK_ASC bits, the ptrace interface
accepts all combinations for the address-space-control bits.  This can
result in a privilege escalation by a non-priviledged user space program.

To protect the kernel space the PSW mask check in ptrace needs to reject
the address-space-control bit combination for the kernel space.

CVE: CVE-2014-3534

Bugzilla
--------
BZ 1113673
https://bugzilla.redhat.com/show_bug.cgi?id=1113673

Upstream status of the patch
----------------------------
The patch has not yet been made public because of it is processed a CVE.
Nevertheless, upstream posting will happen when all CVE parties have been
involved.

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7656860

Test status
-----------
The patch has been tested and fixes the problem.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/kernel/ptrace.c b/arch/s390/kernel/ptrace.c
index a98157c..197c48e 100644
--- a/arch/s390/kernel/ptrace.c
+++ b/arch/s390/kernel/ptrace.c
@@ -318,9 +318,14 @@ static int __poke_user(struct task_struct *child, addr_t addr, addr_t data)
    unsigned long mask = PSW_MASK_USER;
 
    mask |= is_ri_task(child) ? PSW_MASK_RI : 0;
-   if ((data & ~mask) != psw_user_bits)
+   if ((data ^ psw_user_bits) & ~mask)
+    /* Invalid psw mask. */
+    return -EINVAL;
+   if ((data & PSW_MASK_ASC) == PSW_ASC_HOME)
+    /* Invalid address-space-control bits */
     return -EINVAL;
    if ((data & PSW_MASK_EA) && !(data & PSW_MASK_BA))
+    /* Invalid addressing mode bits */
     return -EINVAL;
   }
   *(addr_t *)((addr_t) &task_pt_regs(child)->psw + addr) = data;
@@ -636,9 +641,12 @@ static int __poke_user_compat(struct task_struct *child,
 
    mask |= is_ri_task(child) ? PSW32_MASK_RI : 0;
    /* Build a 64 bit psw mask from 31 bit mask. */
-   if ((tmp & ~mask) != psw32_user_bits)
+   if ((tmp ^ psw32_user_bits) & ~mask)
     /* Invalid psw mask. */
     return -EINVAL;
+   if ((data & PSW32_MASK_ASC) == PSW32_ASC_HOME)
+    /* Invalid address-space-control bits */
+    return -EINVAL;
    regs->psw.mask = (regs->psw.mask & ~PSW_MASK_USER) |
     (regs->psw.mask & PSW_MASK_BA) |
     (__u64)(tmp & mask) << 32;
-- 
1.7.1