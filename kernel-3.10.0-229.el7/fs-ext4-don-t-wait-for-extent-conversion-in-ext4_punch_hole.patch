From e7a7659990fdc81784fc46c4a8da84d3871d0acf Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:01 -0400
Subject: [fs] ext4: don't wait for extent conversion in ext4_punch_hole()

Message-id: <1414058125-4183-28-git-send-email-lczerner@redhat.com>
Patchwork-id: 98132
O-Subject: [RHEL 7.1 PATCH v2 027/171] ext4: don't wait for extent conversion in ext4_punch_hole()
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit c724585b62411f7abdea5b1054b9f1e1e7c964be

 We don't have to wait for extent conversion in ext4_punch_hole() as
 buffered IO for the punched range has been flushed and waited upon
 (thus all extent conversions for that range have completed).  Also we
 wait for all DIO to finish using inode_dio_wait() so there cannot be
 any extent conversions pending due to direct IO.

 Also remove ext4_flush_unwritten_io() since it's unused now.

 Reviewed-by: Zheng Liu <wenqing.lz@taobao.com>
 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 52527a7..49d3653 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2005,7 +2005,6 @@ static inline  unsigned char get_dtype(struct super_block *sb, int filetype)
 
 /* fsync.c */
 extern int ext4_sync_file(struct file *, loff_t, loff_t, int);
-extern int ext4_flush_unwritten_io(struct inode *);
 
 /* hash.c */
 extern int ext4fs_dirhash(const char *name, int len, struct
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 356edad..8336bd7 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -3541,9 +3541,6 @@ int ext4_punch_hole(struct file *file, loff_t offset, loff_t length)
 
  /* Wait all existing dio workers, newcomers will block on i_mutex */
  ext4_inode_block_unlocked_dio(inode);
- ret = ext4_flush_unwritten_io(inode);
- if (ret)
-  goto out_dio;
  inode_dio_wait(inode);
 
  if (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS))
diff --git a/fs/ext4/page-io.c b/fs/ext4/page-io.c
index d4a83b1..31671bc 100644
--- a/fs/ext4/page-io.c
+++ b/fs/ext4/page-io.c
@@ -282,22 +282,6 @@ void ext4_end_io_unrsv_work(struct work_struct *work)
  ext4_do_flush_completed_IO(&ei->vfs_inode, &ei->i_unrsv_conversion_list);
 }
 
-int ext4_flush_unwritten_io(struct inode *inode)
-{
- int ret, err;
-
- WARN_ON_ONCE(!mutex_is_locked(&inode->i_mutex) &&
-       !(inode->i_state & I_FREEING));
- ret = ext4_do_flush_completed_IO(inode,
-      &EXT4_I(inode)->i_rsv_conversion_list);
- err = ext4_do_flush_completed_IO(inode,
-      &EXT4_I(inode)->i_unrsv_conversion_list);
- if (!ret)
-  ret = err;
- ext4_unwritten_wait(inode);
- return ret;
-}
-
 ext4_io_end_t *ext4_init_io_end(struct inode *inode, gfp_t flags)
 {
  ext4_io_end_t *io = kmem_cache_zalloc(io_end_cachep, flags);
-- 
1.7.1