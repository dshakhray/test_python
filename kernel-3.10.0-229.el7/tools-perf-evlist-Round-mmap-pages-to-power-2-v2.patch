From 7bfc6ab86900f8993ede7d2e2be36f46737df953 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:27:49 -0400
Subject: [tools] perf/evlist: Round mmap pages to power 2 - v2

Message-id: <1408462094-14194-301-git-send-email-jolsa@redhat.com>
Patchwork-id: 88278
O-Subject: [PATCH RHEL7.1 BZ1131394 300/325] perf evlist: Round mmap pages to power 2 - v2
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 9639837e95db90d056f4683c911717921519320e
Author: David Ahern <dsahern@gmail.com>
Date: Tue Nov 12 07:46:54 2013 -0700

description
===========
Currently perf requires the -m / --mmap_pages option to be a power of 2.

To be more user friendly perf should automatically round this up to the
next power of 2.

Currently:
  $ perf record -m 3 -a -- sleep 1
  --mmap_pages/-m value must be a power of two.sleep: Terminated

With patch:
  $ perf record -m 3 -a -- sleep 1
  rounding mmap pages size to 16384 (4 pages)
  ...

v2: Add bytes units to rounding message per Ingo's request. Other
    suggestions (e.g., prefixing INFO) should be addressed by wrapping
    pr_info to catch all instances.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index 3960560..fb4727d 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -710,7 +710,6 @@ int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
 {
  unsigned int *mmap_pages = opt->value;
  unsigned long pages, val;
- size_t size;
  static struct parse_tag tags[] = {
   { .tag  = 'B', .mult = 1       },
   { .tag  = 'K', .mult = 1 << 10 },
@@ -726,11 +725,6 @@ int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
  if (val != (unsigned long) -1) {
   /* we got file size value */
   pages = PERF_ALIGN(val, page_size) / page_size;
-  if (pages < (1UL << 31) && !is_power_of_2(pages)) {
-   pages = next_pow2(pages);
-   pr_info("rounding mmap pages size to %lu (%lu pages)\n",
-    pages * page_size, pages);
-  }
  } else {
   /* we got pages count value */
   char *eptr;
@@ -741,14 +735,14 @@ int perf_evlist__parse_mmap_pages(const struct option *opt, const char *str,
   }
  }
 
- if (pages > UINT_MAX || pages > SIZE_MAX / page_size) {
-  pr_err("--mmap_pages/-m value too big\n");
-  return -1;
+ if (pages < (1UL << 31) && !is_power_of_2(pages)) {
+  pages = next_pow2(pages);
+  pr_info("rounding mmap pages size to %lu bytes (%lu pages)\n",
+   pages * page_size, pages);
  }
 
- size = perf_evlist__mmap_size(pages);
- if (!size) {
-  pr_err("--mmap_pages/-m value must be a power of two.");
+ if (pages > UINT_MAX || pages > SIZE_MAX / page_size) {
+  pr_err("--mmap_pages/-m value too big\n");
   return -1;
  }
 
-- 
1.7.1