From 4c8e0537ec6436971acddbb21f55b3e6548ecfd7 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:19:21 -0400
Subject: [fs] nfsd: fully unhash delegations when revoking them

Message-id: <1410898849-22126-78-git-send-email-bfields@redhat.com>
Patchwork-id: 95770
O-Subject: [Patch RHEL7 077/165] nfsd: fully unhash delegations when revoking them
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Jeff Layton <jlayton@primarydata.com>

Ensure that the delegations cannot be found by the laundromat etc once
we add them to the various 'revoke' lists.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Signed-off-by: Jeff Layton <jlayton@primarydata.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 4269067696a1e0c6eef99f631aa3877d860df755
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index fdbfbcb..618daa0 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -661,13 +661,13 @@ hash_delegation_locked(struct nfs4_delegation *dp, struct nfs4_file *fp)
  list_add(&dp->dl_perclnt, &dp->dl_stid.sc_client->cl_delegations);
 }
 
-/* Called under the state lock. */
 static void
-unhash_delegation(struct nfs4_delegation *dp)
+unhash_delegation_locked(struct nfs4_delegation *dp)
 {
  struct nfs4_file *fp = dp->dl_file;
 
- spin_lock(&state_lock);
+ lockdep_assert_held(&state_lock);
+
  dp->dl_stid.sc_type = NFS4_CLOSED_DELEG_STID;
  /* Ensure that deleg break won't try to requeue it */
  ++dp->dl_time;
@@ -678,7 +678,6 @@ unhash_delegation(struct nfs4_delegation *dp)
  spin_unlock(&fp->fi_lock);
  if (fp)
   nfs4_put_deleg_lease(fp);
- spin_unlock(&state_lock);
 }
 
 static void destroy_revoked_delegation(struct nfs4_delegation *dp)
@@ -689,7 +688,9 @@ static void destroy_revoked_delegation(struct nfs4_delegation *dp)
 
 static void destroy_delegation(struct nfs4_delegation *dp)
 {
- unhash_delegation(dp);
+ spin_lock(&state_lock);
+ unhash_delegation_locked(dp);
+ spin_unlock(&state_lock);
  nfs4_put_delegation(dp);
 }
 
@@ -698,11 +699,10 @@ static void revoke_delegation(struct nfs4_delegation *dp)
  struct nfs4_client *clp = dp->dl_stid.sc_client;
 
  if (clp->cl_minorversion == 0)
-  destroy_delegation(dp);
+  destroy_revoked_delegation(dp);
  else {
-  unhash_delegation(dp);
   dp->dl_stid.sc_type = NFS4_REVOKED_DELEG_STID;
-  list_add(&dp->dl_recall_lru, &clp->cl_revoked);
+  list_move(&dp->dl_recall_lru, &clp->cl_revoked);
  }
 }
 
@@ -1458,15 +1458,14 @@ destroy_client(struct nfs4_client *clp)
  spin_lock(&state_lock);
  while (!list_empty(&clp->cl_delegations)) {
   dp = list_entry(clp->cl_delegations.next, struct nfs4_delegation, dl_perclnt);
-  list_del_init(&dp->dl_perclnt);
-  /* Ensure that deleg break won't try to requeue it */
-  ++dp->dl_time;
-  list_move(&dp->dl_recall_lru, &reaplist);
+  unhash_delegation_locked(dp);
+  list_add(&dp->dl_recall_lru, &reaplist);
  }
  spin_unlock(&state_lock);
  while (!list_empty(&reaplist)) {
   dp = list_entry(reaplist.next, struct nfs4_delegation, dl_recall_lru);
-  destroy_delegation(dp);
+  list_del_init(&dp->dl_recall_lru);
+  nfs4_put_delegation(dp);
  }
  list_splice_init(&clp->cl_revoked, &reaplist);
  while (!list_empty(&reaplist)) {
@@ -3662,7 +3661,7 @@ nfs4_open_delegation(struct net *net, struct svc_fh *fh,
  open->op_delegate_type = NFS4_OPEN_DELEGATE_READ;
  return;
 out_free:
- destroy_delegation(dp);
+ nfs4_put_delegation(dp);
 out_no_deleg:
  open->op_delegate_type = NFS4_OPEN_DELEGATE_NONE;
  if (open->op_claim_type == NFS4_OPEN_CLAIM_PREVIOUS &&
@@ -3900,7 +3899,8 @@ nfs4_laundromat(struct nfsd_net *nn)
    new_timeo = min(new_timeo, t);
    break;
   }
-  list_move(&dp->dl_recall_lru, &reaplist);
+  unhash_delegation_locked(dp);
+  list_add(&dp->dl_recall_lru, &reaplist);
  }
  spin_unlock(&state_lock);
  list_for_each_safe(pos, next, &reaplist) {
@@ -5382,12 +5382,8 @@ static u64 nfsd_find_all_delegations(struct nfs4_client *clp, u64 max,
    if (dp->dl_time != 0)
     continue;
 
-   /*
-    * Increment dl_time to ensure that delegation breaks
-    * don't monkey with it now that we are.
-    */
-   ++dp->dl_time;
-   list_move(&dp->dl_recall_lru, victims);
+   unhash_delegation_locked(dp);
+   list_add(&dp->dl_recall_lru, victims);
   }
   if (++count == max)
    break;
@@ -5642,12 +5638,14 @@ nfs4_state_shutdown_net(struct net *net)
  spin_lock(&state_lock);
  list_for_each_safe(pos, next, &nn->del_recall_lru) {
   dp = list_entry (pos, struct nfs4_delegation, dl_recall_lru);
-  list_move(&dp->dl_recall_lru, &reaplist);
+  unhash_delegation_locked(dp);
+  list_add(&dp->dl_recall_lru, &reaplist);
  }
  spin_unlock(&state_lock);
  list_for_each_safe(pos, next, &reaplist) {
   dp = list_entry (pos, struct nfs4_delegation, dl_recall_lru);
-  destroy_delegation(dp);
+  list_del_init(&dp->dl_recall_lru);
+  nfs4_put_delegation(dp);
  }
 
  nfsd4_client_tracking_exit(net);
-- 
1.7.1