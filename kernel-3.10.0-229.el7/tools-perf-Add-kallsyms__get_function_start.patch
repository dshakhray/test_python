From aea0f76b1ea5b21ee9e62140fc1213daf73afc59 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:53:08 -0400
Subject: [tools] perf: Add kallsyms__get_function_start()

Message-id: <1408953210-26343-301-git-send-email-jolsa@redhat.com>
Patchwork-id: 89014
O-Subject: [PATCH RHEL7.1 BZ1133083 300/322] perf tools: Add kallsyms__get_function_start()
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 29b596b57426831fce92cd0ebb01c77627616fdf
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Wed Jan 29 16:14:37 2014 +0200

description
===========
Separate out the logic used to find the start address of the reference
symbol used to track kernel relocation.  kallsyms__get_function_start()
is used in subsequent patches.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index 1fc1c2f..17476df 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -470,6 +470,17 @@ static int find_symbol_cb(void *arg, const char *name, char type,
  return 1;
 }
 
+u64 kallsyms__get_function_start(const char *kallsyms_filename,
+     const char *symbol_name)
+{
+ struct process_symbol_args args = { .name = symbol_name, };
+
+ if (kallsyms__parse(kallsyms_filename, &args, find_symbol_cb) <= 0)
+  return 0;
+
+ return args.start;
+}
+
 int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
            perf_event__handler_t process,
            struct machine *machine,
@@ -480,13 +491,13 @@ int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
  char path[PATH_MAX];
  char name_buff[PATH_MAX];
  struct map *map;
+ u64 start;
  int err;
  /*
   * We should get this from /sys/kernel/sections/.text, but till that is
   * available use this, and after it is use this as a fallback for older
   * kernels.
   */
- struct process_symbol_args args = { .name = symbol_name, };
  union perf_event *event = zalloc((sizeof(event->mmap) +
        machine->id_hdr_size));
  if (event == NULL) {
@@ -513,7 +524,8 @@ int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
   }
  }
 
- if (kallsyms__parse(filename, &args, find_symbol_cb) <= 0) {
+ start = kallsyms__get_function_start(filename, symbol_name);
+ if (!start) {
   free(event);
   return -ENOENT;
  }
@@ -525,7 +537,7 @@ int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
  event->mmap.header.type = PERF_RECORD_MMAP;
  event->mmap.header.size = (sizeof(event->mmap) -
    (sizeof(event->mmap.filename) - size) + machine->id_hdr_size);
- event->mmap.pgoff = args.start;
+ event->mmap.pgoff = start;
  event->mmap.start = map->start;
  event->mmap.len   = map->end - event->mmap.start;
  event->mmap.pid   = machine->pid;
diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
index faf6e21..66a0c03 100644
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@ -279,4 +279,7 @@ size_t perf_event__fprintf_mmap2(union perf_event *event, FILE *fp);
 size_t perf_event__fprintf_task(union perf_event *event, FILE *fp);
 size_t perf_event__fprintf(union perf_event *event, FILE *fp);
 
+u64 kallsyms__get_function_start(const char *kallsyms_filename,
+     const char *symbol_name);
+
 #endif /* __PERF_RECORD_H */
-- 
1.7.1