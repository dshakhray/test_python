From d55ff71408e1142d9addbb90a8ea10e880a39fdb Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 21:00:38 -0400
Subject: [fs] xfs: don't zero partial page cache pages during O_DIRECT writes

Message-id: <1412888441-4181-45-git-send-email-sandeen@redhat.com>
Patchwork-id: 97338
O-Subject: [RHEL7.1 PATCH 44/47] [fs] xfs: don't zero partial page cache pages during O_DIRECT writes
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit 834ffca6f7e345a79f6f2e2d131b0dfba8a4b67a
    Author: Dave Chinner <dchinner@redhat.com>
    Date:   Tue Sep 2 12:12:52 2014 +1000

    xfs: don't zero partial page cache pages during O_DIRECT writes

    Similar to direct IO reads, direct IO writes are using
    truncate_pagecache_range to invalidate the page cache. This is
    incorrect due to the sub-block zeroing in the page cache that
    truncate_pagecache_range() triggers.

    This patch fixes things by using invalidate_inode_pages2_range
    instead.  It preserves the page cache invalidation, but won't zero
    any pages.

    cc: stable@vger.kernel.org
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_file.c b/fs/xfs/xfs_file.c
index 1e4da82..08cff7a 100644
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@ -693,7 +693,15 @@ xfs_file_dio_aio_write(
           pos, -1);
   if (ret)
    goto out;
-  truncate_pagecache_range(VFS_I(ip), pos, -1);
+  /*
+   * Invalidate whole pages. This can return an error if
+   * we fail to invalidate a page, but this should never
+   * happen on XFS. Warn if it does fail.
+   */
+  ret = invalidate_inode_pages2_range(VFS_I(ip)->i_mapping,
+      pos >> PAGE_CACHE_SHIFT, -1);
+  WARN_ON_ONCE(ret);
+  ret = 0;
  }
 
  /*
-- 
1.7.1