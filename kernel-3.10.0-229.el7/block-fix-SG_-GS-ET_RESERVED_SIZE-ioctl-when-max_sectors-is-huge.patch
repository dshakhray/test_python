From b02ac70482a73f3f20108971e966bd3c4d8a1ab4 Mon Sep 17 00:00:00 2001
From: Jeff Moyer <jmoyer@redhat.com>
Date: Fri, 10 Oct 2014 21:03:07 -0400
Subject: [block] fix SG_[GS]ET_RESERVED_SIZE ioctl when max_sectors is huge

Message-id: <1412975015-5370-7-git-send-email-jmoyer@redhat.com>
Patchwork-id: 97446
O-Subject: [RHEL7 PATCH 06/34] block: fix SG_[GS]ET_RESERVED_SIZE ioctl when max_sectors is huge
Bugzilla: 1146660
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Mike Snitzer <snitzer@redhat.com>

This is a backport of the following commit.  This resolves bug
1146660.

  commit 9b4231bf995996d6459c57959ead5a1829ff2c57
  Author: Akinobu Mita <akinobu.mita@gmail.com>
  Date:   Sun May 25 21:43:34 2014 +0900

    block: fix SG_[GS]ET_RESERVED_SIZE ioctl when max_sectors is huge

    SG_GET_RESERVED_SIZE and SG_SET_RESERVED_SIZE ioctls access a reserved
    buffer in bytes as int type.  The value needs to be capped at the request
    queue's max_sectors.  But integer overflow is not correctly handled in
    the calculation when converting max_sectors from sectors to bytes.

    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: "James E.J. Bottomley" <JBottomley@parallels.com>
    Cc: Douglas Gilbert <dgilbert@interlog.com>
    Cc: linux-scsi@vger.kernel.org
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/scsi_ioctl.c b/block/scsi_ioctl.c
index 6fd524e..ae69bdf 100644
--- a/block/scsi_ioctl.c
+++ b/block/scsi_ioctl.c
@@ -82,9 +82,18 @@ static int sg_set_timeout(struct request_queue *q, int __user *p)
  return err;
 }
 
+static int max_sectors_bytes(struct request_queue *q)
+{
+ unsigned int max_sectors = queue_max_sectors(q);
+
+ max_sectors = min_t(unsigned int, max_sectors, INT_MAX >> 9);
+
+ return max_sectors << 9;
+}
+
 static int sg_get_reserved_size(struct request_queue *q, int __user *p)
 {
- unsigned val = min(q->sg_reserved_size, queue_max_sectors(q) << 9);
+ int val = min_t(int, q->sg_reserved_size, max_sectors_bytes(q));
 
  return put_user(val, p);
 }
@@ -98,10 +107,8 @@ static int sg_set_reserved_size(struct request_queue *q, int __user *p)
 
  if (size < 0)
   return -EINVAL;
- if (size > (queue_max_sectors(q) << 9))
-  size = queue_max_sectors(q) << 9;
 
- q->sg_reserved_size = size;
+ q->sg_reserved_size = min(size, max_sectors_bytes(q));
  return 0;
 }
 
-- 
1.7.1