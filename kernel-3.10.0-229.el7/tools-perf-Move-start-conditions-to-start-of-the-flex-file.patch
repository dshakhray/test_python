From 6328c549d321b24401cb4b4f9f1106e3a4406340 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:25:15 -0400
Subject: [tools] perf: Move start conditions to start of the flex file

Message-id: <1408462094-14194-147-git-send-email-jolsa@redhat.com>
Patchwork-id: 88160
O-Subject: [PATCH RHEL7.1 BZ1131394 146/325] perf tools: Move start conditions to start of the flex file
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 820042233bd3c1b24b5ca4c75a88a4e0de39814a
Author: Jiri Olsa <jolsa@redhat.com>
Date: Fri Sep 27 18:29:58 2013 +0200

description
===========
Moving start conditions to start of the flex file so it's clear what the
INITIAL condition rules are.

Plus adding default rule for INITIAL condition. This prevents default
space to be printed for events like:

$ ./perf stat -e "cycles        " kill 2>/dev/null
        $
^^^^^^^^
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/parse-events.l b/tools/perf/util/parse-events.l
index 91346b7..3432995 100644
--- a/tools/perf/util/parse-events.l
+++ b/tools/perf/util/parse-events.l
@@ -126,6 +126,37 @@ modifier_bp [rwx]{1,3}
 
 }
 
+<config>{
+config   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_CONFIG); }
+config1   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_CONFIG1); }
+config2   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_CONFIG2); }
+name   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_NAME); }
+period   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD); }
+branch_type  { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE); }
+,   { return ','; }
+"/"   { BEGIN(INITIAL); return '/'; }
+{name_minus}  { return str(yyscanner, PE_NAME); }
+}
+
+<mem>{
+{modifier_bp}  { return str(yyscanner, PE_MODIFIER_BP); }
+:   { return ':'; }
+{num_dec}  { return value(yyscanner, 10); }
+{num_hex}  { return value(yyscanner, 16); }
+ /*
+  * We need to separate 'mem:' scanner part, in order to get specific
+  * modifier bits parsed out. Otherwise we would need to handle PE_NAME
+  * and we'd need to parse it manually. During the escape from <mem>
+  * state we need to put the escaping char back, so we dont miss it.
+  */
+.   { unput(*yytext); BEGIN(INITIAL); }
+ /*
+  * We destroy the scanner after reaching EOF,
+  * but anyway just to be sure get back to INIT state.
+  */
+<<EOF>>   { BEGIN(INITIAL); }
+}
+
 cpu-cycles|cycles    { return sym(yyscanner, PERF_TYPE_HARDWARE, PERF_COUNT_HW_CPU_CYCLES); }
 stalled-cycles-frontend|idle-cycles-frontend { return sym(yyscanner, PERF_TYPE_HARDWARE, PERF_COUNT_HW_STALLED_CYCLES_FRONTEND); }
 stalled-cycles-backend|idle-cycles-backend { return sym(yyscanner, PERF_TYPE_HARDWARE, PERF_COUNT_HW_STALLED_CYCLES_BACKEND); }
@@ -162,18 +193,6 @@ speculative-read|speculative-load |
 refs|Reference|ops|access  |
 misses|miss    { return str(yyscanner, PE_NAME_CACHE_OP_RESULT); }
 
-<config>{
-config   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_CONFIG); }
-config1   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_CONFIG1); }
-config2   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_CONFIG2); }
-name   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_NAME); }
-period   { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD); }
-branch_type  { return term(yyscanner, PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE); }
-,   { return ','; }
-"/"   { BEGIN(INITIAL); return '/'; }
-{name_minus}  { return str(yyscanner, PE_NAME); }
-}
-
 mem:   { BEGIN(mem); return PE_PREFIX_MEM; }
 r{num_raw_hex}  { return raw(yyscanner); }
 {num_dec}  { return value(yyscanner, 10); }
@@ -189,25 +208,7 @@ r{num_raw_hex}  { return raw(yyscanner); }
 "}"   { return '}'; }
 =   { return '='; }
 \n   { }
-
-<mem>{
-{modifier_bp}  { return str(yyscanner, PE_MODIFIER_BP); }
-:   { return ':'; }
-{num_dec}  { return value(yyscanner, 10); }
-{num_hex}  { return value(yyscanner, 16); }
- /*
-  * We need to separate 'mem:' scanner part, in order to get specific
-  * modifier bits parsed out. Otherwise we would need to handle PE_NAME
-  * and we'd need to parse it manually. During the escape from <mem>
-  * state we need to put the escaping char back, so we dont miss it.
-  */
-.   { unput(*yytext); BEGIN(INITIAL); }
- /*
-  * We destroy the scanner after reaching EOF,
-  * but anyway just to be sure get back to INIT state.
-  */
-<<EOF>>   { BEGIN(INITIAL); }
-}
+.   { }
 
 %%
 
-- 
1.7.1