From b0a25b0510b062515314bd7b1b561083b28d165b Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:17 -0400
Subject: [block] blk-mq: add ->init_request and ->exit_request methods

Message-id: <1402670238-13916-30-git-send-email-snitzer@redhat.com>
Patchwork-id: 83853
O-Subject: [RHEL7.1 PATCH 029/150] blk-mq: add ->init_request and ->exit_request methods
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit e9b267d91f6ddbc694cb40aa962b0b2cec03971d
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Apr 15 13:59:10 2014 -0600

    blk-mq: add ->init_request and ->exit_request methods

    The current blk_mq_init_commands/blk_mq_free_commands interface has a
    two problems:

     1) Because only the constructor is passed to blk_mq_init_commands there
        is no easy way to clean up when a comman initialization failed.  The
        current code simply leaks the allocations done in the constructor.

     2) There is no good place to call blk_mq_free_commands: before
        blk_cleanup_queue there is no guarantee that all outstanding
        commands have completed, so we can't free them yet.  After
        blk_cleanup_queue the queue has usually been freed.  This can be
        worked around by grabbing an unconditional reference before calling
        blk_cleanup_queue and dropping it after blk_mq_free_commands is
        done, although that's not exatly pretty and driver writers are
        guaranteed to get it wrong sooner or later.

    Both issues are easily fixed by making the request constructor and
    destructor normal blk_mq_ops methods.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index e644fee..48d2d84 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1031,74 +1031,20 @@ static void blk_mq_hctx_notify(void *data, unsigned long action,
  blk_mq_put_ctx(ctx);
 }
 
-static int blk_mq_init_hw_commands(struct blk_mq_hw_ctx *hctx,
-       int (*init)(void *, struct blk_mq_hw_ctx *,
-     struct request *, unsigned int),
-       void *data)
+static void blk_mq_free_rq_map(struct blk_mq_hw_ctx *hctx, void *driver_data)
 {
- unsigned int i;
- int ret = 0;
-
- for (i = 0; i < hctx->queue_depth; i++) {
-  struct request *rq = hctx->rqs[i];
-
-  ret = init(data, hctx, rq, i);
-  if (ret)
-   break;
- }
-
- return ret;
-}
-
-int blk_mq_init_commands(struct request_queue *q,
-    int (*init)(void *, struct blk_mq_hw_ctx *,
-     struct request *, unsigned int),
-    void *data)
-{
- struct blk_mq_hw_ctx *hctx;
- unsigned int i;
- int ret = 0;
-
- queue_for_each_hw_ctx(q, hctx, i) {
-  ret = blk_mq_init_hw_commands(hctx, init, data);
-  if (ret)
-   break;
- }
-
- return ret;
-}
-EXPORT_SYMBOL(blk_mq_init_commands);
-
-static void blk_mq_free_hw_commands(struct blk_mq_hw_ctx *hctx,
-        void (*free)(void *, struct blk_mq_hw_ctx *,
-     struct request *, unsigned int),
-        void *data)
-{
- unsigned int i;
+ struct page *page;
 
- for (i = 0; i < hctx->queue_depth; i++) {
-  struct request *rq = hctx->rqs[i];
+ if (hctx->rqs && hctx->queue->mq_ops->exit_request) {
+  int i;
 
-  free(data, hctx, rq, i);
+  for (i = 0; i < hctx->queue_depth; i++) {
+   if (!hctx->rqs[i])
+    continue;
+   hctx->queue->mq_ops->exit_request(driver_data, hctx,
+         hctx->rqs[i], i);
+  }
  }
-}
-
-void blk_mq_free_commands(struct request_queue *q,
-     void (*free)(void *, struct blk_mq_hw_ctx *,
-     struct request *, unsigned int),
-     void *data)
-{
- struct blk_mq_hw_ctx *hctx;
- unsigned int i;
-
- queue_for_each_hw_ctx(q, hctx, i)
-  blk_mq_free_hw_commands(hctx, free, data);
-}
-EXPORT_SYMBOL(blk_mq_free_commands);
-
-static void blk_mq_free_rq_map(struct blk_mq_hw_ctx *hctx)
-{
- struct page *page;
 
  while (!list_empty(&hctx->page_list)) {
   page = list_first_entry(&hctx->page_list, struct page, lru);
@@ -1123,10 +1069,12 @@ static size_t order_to_size(unsigned int order)
 }
 
 static int blk_mq_init_rq_map(struct blk_mq_hw_ctx *hctx,
-         unsigned int reserved_tags, int node)
+  struct blk_mq_reg *reg, void *driver_data, int node)
 {
+ unsigned int reserved_tags = reg->reserved_tags;
  unsigned int i, j, entries_per_page, max_order = 4;
  size_t rq_size, left;
+ int error;
 
  INIT_LIST_HEAD(&hctx->page_list);
 
@@ -1175,14 +1123,23 @@ static int blk_mq_init_rq_map(struct blk_mq_hw_ctx *hctx,
   for (j = 0; j < to_do; j++) {
    hctx->rqs[i] = p;
    blk_rq_init(hctx->queue, hctx->rqs[i]);
+   if (reg->ops->init_request) {
+    error = reg->ops->init_request(driver_data,
+      hctx, hctx->rqs[i], i);
+    if (error)
+     goto err_rq_map;
+   }
+
    p += rq_size;
    i++;
   }
  }
 
- if (i < (reserved_tags + BLK_MQ_TAG_MIN))
+ if (i < (reserved_tags + BLK_MQ_TAG_MIN)) {
+  error = -ENOMEM;
   goto err_rq_map;
- else if (i != hctx->queue_depth) {
+ }
+ if (i != hctx->queue_depth) {
   hctx->queue_depth = i;
   pr_warn("%s: queue depth set to %u because of low memory\n",
      __func__, i);
@@ -1190,12 +1147,14 @@ static int blk_mq_init_rq_map(struct blk_mq_hw_ctx *hctx,
 
  hctx->tags = blk_mq_init_tags(hctx->queue_depth, reserved_tags, node);
  if (!hctx->tags) {
-err_rq_map:
-  blk_mq_free_rq_map(hctx);
-  return -ENOMEM;
+  error = -ENOMEM;
+  goto err_rq_map;
  }
 
  return 0;
+err_rq_map:
+ blk_mq_free_rq_map(hctx, driver_data);
+ return error;
 }
 
 static int blk_mq_init_hw_queues(struct request_queue *q,
@@ -1228,7 +1187,7 @@ static int blk_mq_init_hw_queues(struct request_queue *q,
       blk_mq_hctx_notify, hctx);
   blk_mq_register_cpu_notifier(&hctx->cpu_notifier);
 
-  if (blk_mq_init_rq_map(hctx, reg->reserved_tags, node))
+  if (blk_mq_init_rq_map(hctx, reg, driver_data, node))
    break;
 
   /*
@@ -1268,7 +1227,7 @@ static int blk_mq_init_hw_queues(struct request_queue *q,
    reg->ops->exit_hctx(hctx, j);
 
   blk_mq_unregister_cpu_notifier(&hctx->cpu_notifier);
-  blk_mq_free_rq_map(hctx);
+  blk_mq_free_rq_map(hctx, driver_data);
   kfree(hctx->ctxs);
  }
 
@@ -1455,7 +1414,7 @@ void blk_mq_free_queue(struct request_queue *q)
  queue_for_each_hw_ctx(q, hctx, i) {
   kfree(hctx->ctx_map);
   kfree(hctx->ctxs);
-  blk_mq_free_rq_map(hctx);
+  blk_mq_free_rq_map(hctx, q->queuedata);
   blk_mq_unregister_cpu_notifier(&hctx->cpu_notifier);
   if (q->mq_ops->exit_hctx)
    q->mq_ops->exit_hctx(hctx, i);
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 0bed171..450fc39 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -67,6 +67,10 @@ typedef struct blk_mq_hw_ctx *(alloc_hctx_fn)(struct blk_mq_reg *,unsigned int);
 typedef void (free_hctx_fn)(struct blk_mq_hw_ctx *, unsigned int);
 typedef int (init_hctx_fn)(struct blk_mq_hw_ctx *, void *, unsigned int);
 typedef void (exit_hctx_fn)(struct blk_mq_hw_ctx *, unsigned int);
+typedef int (init_request_fn)(void *, struct blk_mq_hw_ctx *,
+  struct request *, unsigned int);
+typedef void (exit_request_fn)(void *, struct blk_mq_hw_ctx *,
+  struct request *, unsigned int);
 
 struct blk_mq_ops {
  /*
@@ -99,6 +103,14 @@ struct blk_mq_ops {
   */
  init_hctx_fn  *init_hctx;
  exit_hctx_fn  *exit_hctx;
+
+ /*
+  * Called for every command allocated by the block layer to allow
+  * the driver to set up driver specific data.
+  * Ditto for exit/teardown.
+  */
+ init_request_fn  *init_request;
+ exit_request_fn  *exit_request;
 };
 
 enum {
@@ -118,8 +130,6 @@ enum {
 struct request_queue *blk_mq_init_queue(struct blk_mq_reg *, void *);
 int blk_mq_register_disk(struct gendisk *);
 void blk_mq_unregister_disk(struct gendisk *);
-int blk_mq_init_commands(struct request_queue *, int (*init)(void *data, struct blk_mq_hw_ctx *, struct request *, unsigned int), void *data);
-void blk_mq_free_commands(struct request_queue *, void (*free)(void *data, struct blk_mq_hw_ctx *, struct request *, unsigned int), void *data);
 
 void blk_mq_flush_plug_list(struct blk_plug *plug, bool from_schedule);
 
-- 
1.7.1