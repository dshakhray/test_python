From 1c98da6c3e84e1f4fb020936d6d972011570e520 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Wed, 18 Jun 2014 09:58:12 -0400
Subject: [net] sctp: add check rto_min and rto_max in sysctl

Message-id: <edcae89f7291f1da5e240ad4e33b3542d4d0f5a4.1403084956.git.dborkman@redhat.com>
Patchwork-id: 84201
O-Subject: [RHEL7 PATCH net 1/5] sctp: add check rto_min and rto_max in sysctl
Bugzilla: 1110290
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110290
Upstream Status: 4f3fdf3bc59cafd14c3bc2c2369efad34c7aa8b5
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7587477
Tested: verified on beaker

Upstream Commit:
commit 4f3fdf3bc59cafd14c3bc2c2369efad34c7aa8b5
Author: wangweidong <wangweidong1@huawei.com>
Date:   Wed Dec 11 09:50:39 2013 +0800

    sctp: add check rto_min and rto_max in sysctl

    rto_min should be smaller than rto_max while rto_max should be larger
    than rto_min. Add two proc_handler for the checking.

    Suggested-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: Wang Weidong <wangweidong1@huawei.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/sctp/sysctl.c b/net/sctp/sysctl.c
index 9a5c4c9..660f046 100644
--- a/net/sctp/sysctl.c
+++ b/net/sctp/sysctl.c
@@ -67,6 +67,13 @@ static int proc_sctp_do_hmac_alg(struct ctl_table *ctl,
     void __user *buffer, size_t *lenp,
 
     loff_t *ppos);
+static int proc_sctp_do_rto_min(struct ctl_table *ctl, int write,
+    void __user *buffer, size_t *lenp,
+    loff_t *ppos);
+static int proc_sctp_do_rto_max(struct ctl_table *ctl, int write,
+    void __user *buffer, size_t *lenp,
+    loff_t *ppos);
+
 static struct ctl_table sctp_table[] = {
  {
   .procname = "sctp_mem",
@@ -108,17 +115,17 @@ static struct ctl_table sctp_net_table[] = {
   .data  = &init_net.sctp.rto_min,
   .maxlen  = sizeof(unsigned int),
   .mode  = 0644,
-  .proc_handler = proc_dointvec_minmax,
+  .proc_handler = proc_sctp_do_rto_min,
   .extra1         = &one,
-  .extra2         = &timer_max
+  .extra2         = &init_net.sctp.rto_max
  },
  {
   .procname = "rto_max",
   .data  = &init_net.sctp.rto_max,
   .maxlen  = sizeof(unsigned int),
   .mode  = 0644,
-  .proc_handler = proc_dointvec_minmax,
-  .extra1         = &one,
+  .proc_handler = proc_sctp_do_rto_max,
+  .extra1         = &init_net.sctp.rto_min,
   .extra2         = &timer_max
  },
  {
@@ -348,6 +355,60 @@ static int proc_sctp_do_hmac_alg(struct ctl_table *ctl,
  return ret;
 }
 
+static int proc_sctp_do_rto_min(struct ctl_table *ctl, int write,
+    void __user *buffer, size_t *lenp,
+    loff_t *ppos)
+{
+ struct net *net = current->nsproxy->net_ns;
+ int new_value;
+ struct ctl_table tbl;
+ unsigned int min = *(unsigned int *) ctl->extra1;
+ unsigned int max = *(unsigned int *) ctl->extra2;
+ int ret;
+
+ memset(&tbl, 0, sizeof(struct ctl_table));
+ tbl.maxlen = sizeof(unsigned int);
+
+ if (write)
+  tbl.data = &new_value;
+ else
+  tbl.data = &net->sctp.rto_min;
+ ret = proc_dointvec(&tbl, write, buffer, lenp, ppos);
+ if (write) {
+  if (ret || new_value > max || new_value < min)
+   return -EINVAL;
+  net->sctp.rto_min = new_value;
+ }
+ return ret;
+}
+
+static int proc_sctp_do_rto_max(struct ctl_table *ctl, int write,
+    void __user *buffer, size_t *lenp,
+    loff_t *ppos)
+{
+ struct net *net = current->nsproxy->net_ns;
+ int new_value;
+ struct ctl_table tbl;
+ unsigned int min = *(unsigned int *) ctl->extra1;
+ unsigned int max = *(unsigned int *) ctl->extra2;
+ int ret;
+
+ memset(&tbl, 0, sizeof(struct ctl_table));
+ tbl.maxlen = sizeof(unsigned int);
+
+ if (write)
+  tbl.data = &new_value;
+ else
+  tbl.data = &net->sctp.rto_max;
+ ret = proc_dointvec(&tbl, write, buffer, lenp, ppos);
+ if (write) {
+  if (ret || new_value > max || new_value < min)
+   return -EINVAL;
+  net->sctp.rto_max = new_value;
+ }
+ return ret;
+}
+
 int sctp_sysctl_net_register(struct net *net)
 {
  struct ctl_table *table;
-- 
1.7.1