From decdab2c35bced3872b11bb4093826b0f13e1bb6 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:24:22 -0400
Subject: [tools] perf/trace: Beautify socket 'type' arg

Message-id: <1408462094-14194-94-git-send-email-jolsa@redhat.com>
Patchwork-id: 88075
O-Subject: [PATCH RHEL7.1 BZ1131394 093/325] perf trace: Beautify socket 'type' arg
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit a28b24b27869d7a2fc0e6a0cae714641c83791a2
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Wed Sep 4 11:00:44 2013 -0300

description
===========
Taking into account the fact that the SOCK_ types can be overriden for
ABI reasons on MIPS and also masking and interpreting the socket flags
(NONBLOCK and CLOEXEC), printing whatever is left in the flags bits
as an hex number, or'ed.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 671df94..b9b2541 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -265,6 +265,53 @@ static const char *socket_families[] = {
 };
 static DEFINE_STRARRAY(socket_families);
 
+#ifndef SOCK_TYPE_MASK
+#define SOCK_TYPE_MASK 0xf
+#endif
+
+static size_t syscall_arg__scnprintf_socket_type(char *bf, size_t size,
+            struct syscall_arg *arg)
+{
+ size_t printed;
+ int type = arg->val,
+     flags = type & ~SOCK_TYPE_MASK;
+
+ type &= SOCK_TYPE_MASK;
+ /*
+   * Can't use a strarray, MIPS may override for ABI reasons.
+   */
+ switch (type) {
+#define P_SK_TYPE(n) case SOCK_##n: printed = scnprintf(bf, size, #n); break;
+ P_SK_TYPE(STREAM);
+ P_SK_TYPE(DGRAM);
+ P_SK_TYPE(RAW);
+ P_SK_TYPE(RDM);
+ P_SK_TYPE(SEQPACKET);
+ P_SK_TYPE(DCCP);
+ P_SK_TYPE(PACKET);
+#undef P_SK_TYPE
+ default:
+  printed = scnprintf(bf, size, "%#x", type);
+ }
+
+#define P_SK_FLAG(n) \
+ if (flags & SOCK_##n) { \
+  printed += scnprintf(bf + printed, size - printed, "|%s", #n); \
+  flags &= ~SOCK_##n; \
+ }
+
+ P_SK_FLAG(CLOEXEC);
+ P_SK_FLAG(NONBLOCK);
+#undef P_SK_FLAG
+
+ if (flags)
+  printed += scnprintf(bf + printed, size - printed, "|%#x", flags);
+
+ return printed;
+}
+
+#define SCA_SK_TYPE syscall_arg__scnprintf_socket_type
+
 static size_t syscall_arg__scnprintf_open_flags(char *bf, size_t size,
             struct syscall_arg *arg)
 {
@@ -440,7 +487,8 @@ static struct syscall_fmt {
    .arg_scnprintf = { [0] = SCA_STRARRAY, /* which */ },
    .arg_parm  = { [0] = &strarray__itimers, /* which */ }, },
  { .name     = "socket",     .errmsg = true,
-   .arg_scnprintf = { [0] = SCA_STRARRAY, /* family */ },
+   .arg_scnprintf = { [0] = SCA_STRARRAY, /* family */
+        [1] = SCA_SK_TYPE, /* type */ },
    .arg_parm  = { [0] = &strarray__socket_families, /* family */ }, },
  { .name     = "stat",     .errmsg = true, .alias = "newstat", },
  { .name     = "tgkill",     .errmsg = true,
-- 
1.7.1