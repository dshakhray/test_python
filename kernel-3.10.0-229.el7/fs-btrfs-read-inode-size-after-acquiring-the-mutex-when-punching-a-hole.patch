From a6061b91d7c1575ddbcfbb3e49ab694dc6826563 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:03:17 -0400
Subject: [fs] btrfs: read inode size after acquiring the mutex when punching a hole

Message-id: <1407179109-13714-311-git-send-email-sandeen@redhat.com>
Patchwork-id: 87154
O-Subject: [RHEL7.1 PATCH 310/422] Btrfs: read inode size after acquiring the mutex when punching a hole
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit a1a50f60a6bf4f861eb94793420274bc1ccd409a
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Sat Apr 26 01:35:31 2014 +0100

    Btrfs: read inode size after acquiring the mutex when punching a hole

    In a previous change, commit 12870f1c9b2de7d475d22e73fd7db1b418599725,
    I accidentally moved the roundup of inode->i_size to outside of the
    critical section delimited by the inode mutex, which is not atomic and
    not correct since the size can be changed by other task before we acquire
    the mutex. Therefore fix it.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/file.c b/fs/btrfs/file.c
index 567f5e9..de902c7 100644
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -2192,13 +2192,14 @@ static int btrfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)
  bool same_page = ((offset >> PAGE_CACHE_SHIFT) ==
      ((offset + len - 1) >> PAGE_CACHE_SHIFT));
  bool no_holes = btrfs_fs_incompat(root->fs_info, NO_HOLES);
- u64 ino_size = round_up(inode->i_size, PAGE_CACHE_SIZE);
+ u64 ino_size;
 
  ret = btrfs_wait_ordered_range(inode, offset, len);
  if (ret)
   return ret;
 
  mutex_lock(&inode->i_mutex);
+ ino_size = round_up(inode->i_size, PAGE_CACHE_SIZE);
  /*
   * We needn't truncate any page which is beyond the end of the file
   * because we are sure there is no data there.
-- 
1.7.1