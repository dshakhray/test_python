From f3b5849b9ad60ad8babf58669376cc864ca8ada6 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Wed, 6 Aug 2014 03:48:55 -0400
Subject: [pci] pciehp: Remove a non-existent card, regardless of "surprise" capability

Message-id: <20140806034854.1438.66007.stgit@gir.stowe>
Patchwork-id: 87454
O-Subject: [RHEL7.1 PATCH 45/69] PCI: pciehp: Remove a non-existent card, regardless of "surprise" capability
Bugzilla: 1110896
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110896
Upstream Status: 2b3940b60626ac4932fa048cc74f2a872cc4bfb4

commit 2b3940b60626ac4932fa048cc74f2a872cc4bfb4
Author: Rajat Jain <rajatxjain@gmail.com>
Date:   Tue Feb 18 18:53:19 2014 -0800

    PCI: pciehp: Remove a non-existent card, regardless of "surprise" capability

    In case a card is physically yanked out, it should immediately be removed,
    regardless of the "surprise" capability bit. Thus:

      - Always handle the physical removal - regardless of the "surprise" bit.
      - Don't use "surprise" capability when making decisions about enabling
        presence detect notifications.
      - Reword the comments to indicate the intent.

    Signed-off-by: Rajat Jain <rajatxjain@gmail.com>
    Signed-off-by: Rajat Jain <rajatjain@juniper.net>
    Signed-off-by: Guenter Roeck <groeck@juniper.net>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/pciehp_ctrl.c b/drivers/pci/hotplug/pciehp_ctrl.c
index b4a4ac1..0c2e524 100644
--- a/drivers/pci/hotplug/pciehp_ctrl.c
+++ b/drivers/pci/hotplug/pciehp_ctrl.c
@@ -535,9 +535,16 @@ static void interrupt_event_handler(struct work_struct *work)
   pciehp_green_led_off(p_slot);
   break;
  case INT_PRESENCE_ON:
- case INT_PRESENCE_OFF:
   if (!HP_SUPR_RM(ctrl))
    break;
+  ctrl_dbg(ctrl, "Surprise Insertion\n");
+  handle_surprise_event(p_slot);
+  break;
+ case INT_PRESENCE_OFF:
+  /*
+   * Regardless of surprise capability, we need to
+   * definitely remove a card that has been pulled out!
+   */
   ctrl_dbg(ctrl, "Surprise Removal\n");
   handle_surprise_event(p_slot);
   break;
diff --git a/drivers/pci/hotplug/pciehp_hpc.c b/drivers/pci/hotplug/pciehp_hpc.c
index d3ee27a..dde9a3f 100644
--- a/drivers/pci/hotplug/pciehp_hpc.c
+++ b/drivers/pci/hotplug/pciehp_hpc.c
@@ -619,9 +619,10 @@ static void pcie_disable_notification(struct controller *ctrl)
 
 /*
  * pciehp has a 1:1 bus:slot relationship so we ultimately want a secondary
- * bus reset of the bridge, but if the slot supports surprise removal (or
- * link state change based hotplug), we need to disable presence detection
- * (or link state notifications) around the bus reset and clear any spurious
+ * bus reset of the bridge, but at the same time we want to ensure that it is
+ * not seen as a hot-unplug, followed by the hot-plug of the device. Thus,
+ * disable link state notification and presence detection change notification
+ * momentarily, if we see that they could interfere. Also, clear any spurious
  * events after.
  */
 int pciehp_reset_slot(struct slot *slot, int probe)
@@ -633,7 +634,7 @@ int pciehp_reset_slot(struct slot *slot, int probe)
  if (probe)
   return 0;
 
- if (HP_SUPR_RM(ctrl) && !ATTN_BUTTN(ctrl)) {
+ if (!ATTN_BUTTN(ctrl)) {
   ctrl_mask |= PCI_EXP_SLTCTL_PDCE;
   stat_mask |= PCI_EXP_SLTSTA_PDC;
  }
-- 
1.7.1