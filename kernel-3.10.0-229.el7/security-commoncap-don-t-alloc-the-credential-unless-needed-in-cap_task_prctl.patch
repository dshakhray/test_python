From e3993b5d49d798da24d01dcb93ecaa643cf5520c Mon Sep 17 00:00:00 2001
From: Paul Moore <pmoore@redhat.com>
Date: Fri, 12 Sep 2014 19:53:25 -0400
Subject: [security] commoncap: don't alloc the credential unless needed in cap_task_prctl

Message-id: <20140912195325.4015.46401.stgit@localhost>
Patchwork-id: 94689
O-Subject: [RHEL7 PATCH] commoncap: don't alloc the credential unless needed in cap_task_prctl
Bugzilla: 1056347
RH-Acked-by: Eric Paris <eparis@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1056347
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7945718
Upstream: yes, commit ID below
Testing: tested, see BZ for details

 commit 6d6f3328422a3bc56b0d8dd026a5de845d2abfa7
 Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
 Date:   Tue Jul 22 21:20:01 2014 +0900

 commoncap: don't alloc the credential unless needed in cap_task_prctl

 In function cap_task_prctl(), we would allocate a credential
 unconditionally and then check if we support the requested function.
 If not we would release this credential with abort_creds() by using
 RCU method. But on some archs such as powerpc, the sys_prctl is heavily
 used to get/set the floating point exception mode. So the unnecessary
 allocating/releasing of credential not only introduce runtime overhead
 but also do cause OOM due to the RCU implementation.

 This patch removes abort_creds() from cap_task_prctl() by calling
 prepare_creds() only when we need to modify it.

 Reported-by: Kevin Hao <haokexin@gmail.com>
 Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
 Reviewed-by: Paul Moore <paul@paul-moore.com>
 Acked-by: Serge E. Hallyn <serge.hallyn@ubuntu.com>
 Reviewed-by: Kees Cook <keescook@chromium.org>
 Signed-off-by: James Morris <james.l.morris@oracle.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/security/commoncap.c b/security/commoncap.c
index c9219a6..dce9bb8 100644
--- a/security/commoncap.c
+++ b/security/commoncap.c
@@ -825,15 +825,20 @@ int cap_task_setnice(struct task_struct *p, int nice)
  * Implement PR_CAPBSET_DROP.  Attempt to remove the specified capability from
  * the current task's bounding set.  Returns 0 on success, -ve on error.
  */
-static long cap_prctl_drop(struct cred *new, unsigned long cap)
+static int cap_prctl_drop(unsigned long cap)
 {
+ struct cred *new;
+
  if (!capable(CAP_SETPCAP))
   return -EPERM;
  if (!cap_valid(cap))
   return -EINVAL;
 
+ new = prepare_creds();
+ if (!new)
+  return -ENOMEM;
  cap_lower(new->cap_bset, cap);
- return 0;
+ return commit_creds(new);
 }
 
 /**
@@ -851,26 +856,17 @@ static long cap_prctl_drop(struct cred *new, unsigned long cap)
 int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
      unsigned long arg4, unsigned long arg5)
 {
+ const struct cred *old = current_cred();
  struct cred *new;
- long error = 0;
-
- new = prepare_creds();
- if (!new)
-  return -ENOMEM;
 
  switch (option) {
  case PR_CAPBSET_READ:
-  error = -EINVAL;
   if (!cap_valid(arg2))
-   goto error;
-  error = !!cap_raised(new->cap_bset, arg2);
-  goto no_change;
+   return -EINVAL;
+  return !!cap_raised(old->cap_bset, arg2);
 
  case PR_CAPBSET_DROP:
-  error = cap_prctl_drop(new, arg2);
-  if (error < 0)
-   goto error;
-  goto changed;
+  return cap_prctl_drop(arg2);
 
  /*
   * The next four prctl's remain to assist with transitioning a
@@ -892,10 +888,9 @@ int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
   * capability-based-privilege environment.
   */
  case PR_SET_SECUREBITS:
-  error = -EPERM;
-  if ((((new->securebits & SECURE_ALL_LOCKS) >> 1)
-       & (new->securebits ^ arg2))   /*[1]*/
-      || ((new->securebits & SECURE_ALL_LOCKS & ~arg2)) /*[2]*/
+  if ((((old->securebits & SECURE_ALL_LOCKS) >> 1)
+       & (old->securebits ^ arg2))   /*[1]*/
+      || ((old->securebits & SECURE_ALL_LOCKS & ~arg2)) /*[2]*/
       || (arg2 & ~(SECURE_ALL_LOCKS | SECURE_ALL_BITS)) /*[3]*/
       || (cap_capable(current_cred(),
         current_cred()->user_ns, CAP_SETPCAP,
@@ -909,46 +904,39 @@ int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
     */
       )
    /* cannot change a locked bit */
-   goto error;
+   return -EPERM;
+
+  new = prepare_creds();
+  if (!new)
+   return -ENOMEM;
   new->securebits = arg2;
-  goto changed;
+  return commit_creds(new);
 
  case PR_GET_SECUREBITS:
-  error = new->securebits;
-  goto no_change;
+  return old->securebits;
 
  case PR_GET_KEEPCAPS:
-  if (issecure(SECURE_KEEP_CAPS))
-   error = 1;
-  goto no_change;
+  return !!issecure(SECURE_KEEP_CAPS);
 
  case PR_SET_KEEPCAPS:
-  error = -EINVAL;
   if (arg2 > 1) /* Note, we rely on arg2 being unsigned here */
-   goto error;
-  error = -EPERM;
+   return -EINVAL;
   if (issecure(SECURE_KEEP_CAPS_LOCKED))
-   goto error;
+   return -EPERM;
+
+  new = prepare_creds();
+  if (!new)
+   return -ENOMEM;
   if (arg2)
    new->securebits |= issecure_mask(SECURE_KEEP_CAPS);
   else
    new->securebits &= ~issecure_mask(SECURE_KEEP_CAPS);
-  goto changed;
+  return commit_creds(new);
 
  default:
   /* No functionality available - continue with default */
-  error = -ENOSYS;
-  goto error;
+  return -ENOSYS;
  }
-
- /* Functionality provided */
-changed:
- return commit_creds(new);
-
-no_change:
-error:
- abort_creds(new);
- return error;
 }
 
 /**
-- 
1.7.1