From b664d72493df32207c75fbfd2c920ece07e9069c Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:10:29 -0400
Subject: [usb] Revert: pl2303: distinguish between original and cloned HX chips

Message-id: <1410887463-20674-558-git-send-email-dzickus@redhat.com>
Patchwork-id: 95400
O-Subject: [RHEL7 PATCH 557/591] Revert "USB: pl2303: distinguish between original and cloned HX chips"
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 09169197c9f5e3b42f0c83c6d7071b3e9c94153e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 1 09:12:52 2013 -0700

    Revert "USB: pl2303: distinguish between original and cloned HX chips"

    This reverts commit 7d26a78f62ff4fb08bc5ba740a8af4aa7ac67da4.

    Revert all of the pl2303 changes that went into 3.12-rc1 and -rc2 as
    they cause regressions on some versions of the chip.  This will all be
    revisited for later kernel versions when we can figure out how to handle
    this in a way that does not break working devices.

    Reported-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Cc: Frank Schafer <fschaefer.oss@googlemail.com>
    Acked-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/pl2303.c b/drivers/usb/serial/pl2303.c
index da33c55..b58746d 100644
--- a/drivers/usb/serial/pl2303.c
+++ b/drivers/usb/serial/pl2303.c
@@ -135,7 +135,6 @@ enum pl2303_type {
  HX_TA,  /* HX(A) / X(A) / TA version  */ /* TODO: improve */
  HXD_EA_RA_SA, /* HXD / EA / RA / SA version */ /* TODO: improve */
  TB,  /* TB version */
- HX_CLONE, /* Cheap and less functional clone of the HX chip */
 };
 /*
  * NOTE: don't know the difference between type 0 and type 1,
@@ -210,23 +209,8 @@ static int pl2303_startup(struct usb_serial *serial)
    * the device descriptors of the X/HX, HXD, EA, RA, SA, TA, TB
    */
   if (le16_to_cpu(serial->dev->descriptor.bcdDevice) == 0x300) {
-   /* Check if the device is a clone */
-   pl2303_vendor_read(0x9494, 0, serial, buf);
-   /*
-    * NOTE: Not sure if this read is really needed.
-    * The HX returns 0x00, the clone 0x02, but the Windows
-    * driver seems to ignore the value and continues.
-    */
-   pl2303_vendor_write(0x0606, 0xaa, serial);
-   pl2303_vendor_read(0x8686, 0, serial, buf);
-   if (buf[0] != 0xaa) {
-    type = HX_CLONE;
-    type_str = "X/HX clone (limited functionality)";
-   } else {
-    type = HX_TA;
-    type_str = "X/HX/TA";
-   }
-   pl2303_vendor_write(0x0606, 0x00, serial);
+   type = HX_TA;
+   type_str = "X/HX/TA";
   } else if (le16_to_cpu(serial->dev->descriptor.bcdDevice)
              == 0x400) {
    type = HXD_EA_RA_SA;
@@ -325,9 +309,8 @@ static int pl2303_baudrate_encode_direct(int baud, enum pl2303_type type,
 {
  /*
   * NOTE: Only the values defined in baud_sup are supported !
-  * => if unsupported values are set, the PL2303 uses 9600 baud instead
-  * => HX clones just don't work at unsupported baud rates < 115200 baud,
-  *    for baud rates > 115200 they run at 115200 baud
+  *       => if unsupported values are set, the PL2303 seems to
+  *     use 9600 baud (at least my PL2303X always does)
   */
  const int baud_sup[] = { 75, 150, 300, 600, 1200, 1800, 2400, 3600,
      4800, 7200, 9600, 14400, 19200, 28800, 38400,
@@ -337,14 +320,14 @@ static int pl2303_baudrate_encode_direct(int baud, enum pl2303_type type,
   * NOTE: With the exception of type_0/1 devices, the following
   * additional baud rates are supported (tested with HX rev. 3A only):
   * 110*, 56000*, 128000, 134400, 161280, 201600, 256000*, 268800,
-  * 403200, 806400. (*: not HX and HX clones)
+  * 403200, 806400. (*: not HX)
   *
   * Maximum values: HXD, TB: 12000000; HX, TA: 6000000;
-  *                 type_0+1: 1228800; RA: 921600; HX clones, SA: 115200
+  *                 type_0+1: 1228800; RA: 921600; SA: 115200
   *
   * As long as we are not using this encoding method for anything else
-  * than the type_0+1, HX and HX clone chips, there is no point in
-  * complicating the code to support them.
+  * than the type_0+1 and HX chips, there is no point in complicating
+  * the code to support them.
   */
  int i;
 
@@ -368,8 +351,6 @@ static int pl2303_baudrate_encode_direct(int baud, enum pl2303_type type,
   baud = min_t(int, baud, 6000000);
  else if (type == type_0 || type == type_1)
   baud = min_t(int, baud, 1228800);
- else if (type == HX_CLONE)
-  baud = min_t(int, baud, 115200);
  /* Direct (standard) baud rate encoding method */
  put_unaligned_le32(baud, buf);
 
@@ -382,8 +363,7 @@ static int pl2303_baudrate_encode_divisor(int baud, enum pl2303_type type,
  /*
   * Divisor based baud rate encoding method
   *
-  * NOTE: HX clones do NOT support this method.
-  * It's not clear if the type_0/1 chips support it.
+  * NOTE: it's not clear if the type_0/1 chips support this method
   *
   * divisor = 12MHz * 32 / baudrate = 2^A * B
   *
@@ -476,7 +456,7 @@ static void pl2303_encode_baudrate(struct tty_struct *tty,
   * 1) Direct method: encodes the baud rate value directly
   *    => supported by all chip types
   * 2) Divisor based method: encodes a divisor to a base value (12MHz*32)
-  *    => not supported by HX clones (and likely type_0/1 chips)
+  *    => supported by HX chips (and likely not by type_0/1 chips)
   *
   * NOTE: Although the divisor based baud rate encoding method is much
   * more flexible, some of the standard baud rate values can not be
@@ -484,7 +464,7 @@ static void pl2303_encode_baudrate(struct tty_struct *tty,
   * the device likely uses the same baud rate generator for both methods
   * so that there is likley no difference.
   */
- if (type == type_0 || type == type_1 || type == HX_CLONE)
+ if (type == type_0 || type == type_1)
   baud = pl2303_baudrate_encode_direct(baud, type, buf);
  else
   baud = pl2303_baudrate_encode_divisor(baud, type, buf);
@@ -837,7 +817,6 @@ static void pl2303_break_ctl(struct tty_struct *tty, int break_state)
  result = usb_control_msg(serial->dev, usb_sndctrlpipe(serial->dev, 0),
      BREAK_REQUEST, BREAK_REQUEST_TYPE, state,
      0, NULL, 0, 100);
- /* NOTE: HX clones don't support sending breaks, -EPIPE is returned */
  if (result)
   dev_err(&port->dev, "error sending break = %d\n", result);
 }
-- 
1.7.1