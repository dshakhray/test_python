From 53778aa1568f472af3dc428cc71c28b5aa1b897f Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:44 -0400
Subject: [block] bsg: update check for rq based driver for blk-mq

Message-id: <1402670238-13916-117-git-send-email-snitzer@redhat.com>
Patchwork-id: 83874
O-Subject: [RHEL7.1 PATCH 116/150] bsg: update check for rq based driver for blk-mq
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 49fd524f95cb4cc699d435e0ebb08b1c6220da6d
Author: Jens Axboe <axboe@fb.com>
Date:   Wed Apr 16 10:57:18 2014 -0600

    bsg: update check for rq based driver for blk-mq

    bsg currently checks ->request_fn to check whether a queue can
    handle struct request. But with blk-mq, we don't have a request_fn
    yet are request based. Add a queue_is_rq_based() helper and use
    that in bsg, I'm guessing this is not the last place we need to
    update for this. Besides, it better explains what is being
    checked.

    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/bsg.c b/block/bsg.c
index 8ea52fc..992c00b 100644
--- a/block/bsg.c
+++ b/block/bsg.c
@@ -1009,7 +1009,7 @@ int bsg_register_queue(struct request_queue *q, struct device *parent,
  /*
   * we need a proper transport to send commands, not a stacked device
   */
- if (!q->request_fn)
+ if (!queue_is_rq_based(q))
   return 0;
 
  bcd = &q->bsg_dev;
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index df63e09..74d7ac9 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -640,6 +640,15 @@ static inline void queue_flag_clear(unsigned int flag, struct request_queue *q)
 
 #define rq_data_dir(rq)  (((rq)->cmd_flags & 1) != 0)
 
+/*
+ * Driver can handle struct request, if it either has an old style
+ * request_fn defined, or is blk-mq based.
+ */
+static inline bool queue_is_rq_based(struct request_queue *q)
+{
+ return q->request_fn || q->mq_ops;
+}
+
 static inline unsigned int blk_queue_cluster(struct request_queue *q)
 {
  return q->limits.cluster;
-- 
1.7.1