From fd1297b24337eef517734efaf5d01630e7c1ab5d Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:55 -0400
Subject: [block] properly stack underlying max_segment_size to DM device

Message-id: <1402670238-13916-128-git-send-email-snitzer@redhat.com>
Patchwork-id: 83900
O-Subject: [RHEL7.1 PATCH 127/150] block: properly stack underlying max_segment_size to DM device
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit d82ae52e68892338068e7559a0c0657193341ce4
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Oct 18 09:44:49 2013 -0600

    block: properly stack underlying max_segment_size to DM device

    Without this patch all DM devices will default to BLK_MAX_SEGMENT_SIZE
    (65536) even if the underlying device(s) have a larger value -- this is
    due to blk_stack_limits() using min_not_zero() when stacking the
    max_segment_size limit.

    1073741824

    before patch:
    65536

    after patch:
    1073741824

    Reported-by: Lukasz Flis <l.flis@cyfronet.pl>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org # v3.3+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-settings.c b/block/blk-settings.c
index 96c26aa..8f39914 100644
--- a/block/blk-settings.c
+++ b/block/blk-settings.c
@@ -128,6 +128,7 @@ void blk_set_stacking_limits(struct queue_limits *lim)
  lim->discard_zeroes_data = 1;
  lim->max_segments = USHRT_MAX;
  lim->max_hw_sectors = UINT_MAX;
+ lim->max_segment_size = UINT_MAX;
  lim->max_sectors = UINT_MAX;
  lim->max_write_same_sectors = UINT_MAX;
 }
-- 
1.7.1