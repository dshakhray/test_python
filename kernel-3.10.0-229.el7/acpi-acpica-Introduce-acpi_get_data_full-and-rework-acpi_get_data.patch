From c777cba18f2a2734c49d28e8df0a15a2364aa850 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 12:29:09 -0400
Subject: [acpi] acpica: Introduce acpi_get_data_full() and rework acpi_get_data()

Message-id: <1411129776-21656-35-git-send-email-prarit@redhat.com>
Patchwork-id: 96376
O-Subject: [RHEL7.1 PATCH BZ 1141846 34/61] ACPICA: Introduce acpi_get_data_full() and rework acpi_get_data()
Bugzilla: 1141846
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit 7c2e17714e190b2ef857e7e842464fb47ceca146
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Feb 4 00:42:46 2014 +0100

    ACPICA: Introduce acpi_get_data_full() and rework acpi_get_data()

    Introduce a new function, acpi_get_data_full(), working in analogy
    with acpi_get_data() except that it can execute a callback provided
    as its 4th argument right after acpi_ns_get_attached_data() has
    returned a success.

    That will allow Linux to reference count the object pointed to by
    *data before the namespace mutex is released so as to ensure that it
    will not be freed going forward until the reference to it acquired
    by acpi_get_data_full() is dropped.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/acpica/nsxfeval.c b/drivers/acpi/acpica/nsxfeval.c
index f553cfd..3799dcc 100644
--- a/drivers/acpi/acpica/nsxfeval.c
+++ b/drivers/acpi/acpica/nsxfeval.c
@@ -612,7 +612,7 @@ acpi_walk_namespace(acpi_object_type type,
 
  (void)acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);
 
-      unlock_and_exit:
+unlock_and_exit:
  (void)acpi_ut_release_read_lock(&acpi_gbl_namespace_rw_lock);
  return_ACPI_STATUS(status);
 }
@@ -911,19 +911,22 @@ ACPI_EXPORT_SYMBOL(acpi_detach_data)
 
 /*******************************************************************************
  *
- * FUNCTION:    acpi_get_data
+ * FUNCTION:    acpi_get_data_full
  *
  * PARAMETERS:  obj_handle          - Namespace node
  *              handler             - Handler used in call to attach_data
  *              data                - Where the data is returned
+ *              callback            - function to execute before returning
  *
  * RETURN:      Status
  *
- * DESCRIPTION: Retrieve data that was previously attached to a namespace node.
+ * DESCRIPTION: Retrieve data that was previously attached to a namespace node
+ *              and execute a callback before returning.
  *
  ******************************************************************************/
 acpi_status
-acpi_get_data(acpi_handle obj_handle, acpi_object_handler handler, void **data)
+acpi_get_data_full(acpi_handle obj_handle, acpi_object_handler handler,
+     void **data, void (*callback)(void *))
 {
  struct acpi_namespace_node *node;
  acpi_status status;
@@ -948,10 +951,34 @@ acpi_get_data(acpi_handle obj_handle, acpi_object_handler handler, void **data)
  }
 
  status = acpi_ns_get_attached_data(node, handler, data);
+ if (ACPI_SUCCESS(status) && callback) {
+  callback(*data);
+ }
 
       unlock_and_exit:
  (void)acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);
  return (status);
 }
 
+ACPI_EXPORT_SYMBOL(acpi_get_data_full)
+
+/*******************************************************************************
+ *
+ * FUNCTION:    acpi_get_data
+ *
+ * PARAMETERS:  obj_handle          - Namespace node
+ *              handler             - Handler used in call to attach_data
+ *              data                - Where the data is returned
+ *
+ * RETURN:      Status
+ *
+ * DESCRIPTION: Retrieve data that was previously attached to a namespace node.
+ *
+ ******************************************************************************/
+acpi_status
+acpi_get_data(acpi_handle obj_handle, acpi_object_handler handler, void **data)
+{
+ return acpi_get_data_full(obj_handle, handler, data, NULL);
+}
+
 ACPI_EXPORT_SYMBOL(acpi_get_data)
diff --git a/include/acpi/acpixf.h b/include/acpi/acpixf.h
index 1b09300..8548a74 100644
--- a/include/acpi/acpixf.h
+++ b/include/acpi/acpixf.h
@@ -232,6 +232,10 @@ acpi_attach_data(acpi_handle object, acpi_object_handler handler, void *data);
 acpi_status acpi_detach_data(acpi_handle object, acpi_object_handler handler);
 
 acpi_status
+acpi_get_data_full(acpi_handle object, acpi_object_handler handler, void **data,
+     void (*callback)(void *));
+
+acpi_status
 acpi_get_data(acpi_handle object, acpi_object_handler handler, void **data);
 
 acpi_status
-- 
1.7.1