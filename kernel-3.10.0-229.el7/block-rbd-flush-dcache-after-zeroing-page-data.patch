From 2190665c2c5b9116cf6c43b295978617918746e2 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:21:54 -0400
Subject: [block] rbd: flush dcache after zeroing page data
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-8-git-send-email-sweil@redhat.com>
Patchwork-id: 89836
O-Subject: [PATCH 007/303] rbd: flush dcache after zeroing page data
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Alex Elder <elder@inktank.com>

Neither zero_bio_chain() nor zero_pages() contains a call to flush
caches after zeroing a portion of a page.  This can cause problems
on architectures that have caches that allow virtual address
aliasing.

This resolves:
    http://tracker.ceph.com/issues/4777

Signed-off-by: Alex Elder <elder@inktank.com>
Reviewed-by: Josh Durgin <josh.durgin@inktank.com>
(cherry picked from commit e215605417b87732c6debf65da6d953016a1e5bc)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/rbd.c b/drivers/block/rbd.c
index caf03d5..ee3d40c 100644
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@ -1126,6 +1126,7 @@ static void zero_bio_chain(struct bio *chain, int start_ofs)
     buf = bvec_kmap_irq(bv, &flags);
     memset(buf + remainder, 0,
            bv->bv_len - remainder);
+    flush_dcache_page(bv->bv_page);
     bvec_kunmap_irq(buf, &flags);
    }
    pos += bv->bv_len;
@@ -1158,6 +1159,7 @@ static void zero_pages(struct page **pages, u64 offset, u64 end)
   local_irq_save(flags);
   kaddr = kmap_atomic(*page);
   memset(kaddr + page_offset, 0, length);
+  flush_dcache_page(*page);
   kunmap_atomic(kaddr);
   local_irq_restore(flags);
 
-- 
1.7.1