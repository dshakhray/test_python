From 94c4cd36ae97ca3e45afca9eb12a9ef01b1b9a84 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:21:52 -0400
Subject: [cpufreq] Fix broken usage of governor->owner's refcount

Message-id: <1409235879-1283-19-git-send-email-prarit@redhat.com>
Patchwork-id: 89373
O-Subject: [RHEL7.1 PATCH BZ 1134639 018/185] cpufreq: Fix broken usage of governor->owner's refcount
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit fe492f3f0332e23cc6ca4913e5a2ed78e1888902
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Aug 6 22:53:10 2013 +0530

    cpufreq: Fix broken usage of governor->owner's refcount

    The cpufreq governor owner refcount usage is broken.  We should only
    increment that refcount when a CPUFREQ_GOV_POLICY_INIT event has come
    and it should only be decremented if CPUFREQ_GOV_POLICY_EXIT has come.

    Currently, there can be situations where the governor is in use, but
    we have allowed it to be unloaded which may result in undefined
    behavior.  Let's fix it.

    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 57ff8b0..4e11135 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1692,8 +1692,9 @@ static int __cpufreq_governor(struct cpufreq_policy *policy,
   }
  }
 
- if (!try_module_get(policy->governor->owner))
-  return -EINVAL;
+ if (event == CPUFREQ_GOV_POLICY_INIT)
+  if (!try_module_get(policy->governor->owner))
+   return -EINVAL;
 
  pr_debug("__cpufreq_governor for CPU %u, event %u\n",
       policy->cpu, event);
@@ -1702,6 +1703,8 @@ static int __cpufreq_governor(struct cpufreq_policy *policy,
  if ((!policy->governor_enabled && (event == CPUFREQ_GOV_STOP)) ||
      (policy->governor_enabled && (event == CPUFREQ_GOV_START))) {
   mutex_unlock(&cpufreq_governor_lock);
+  if (event == CPUFREQ_GOV_POLICY_INIT)
+   module_put(policy->governor->owner);
   return -EBUSY;
  }
 
@@ -1729,11 +1732,8 @@ static int __cpufreq_governor(struct cpufreq_policy *policy,
   mutex_unlock(&cpufreq_governor_lock);
  }
 
- /* we keep one module reference alive for
-   each CPU governed by this CPU */
- if ((event != CPUFREQ_GOV_START) || ret)
-  module_put(policy->governor->owner);
- if ((event == CPUFREQ_GOV_STOP) && !ret)
+ if (((event == CPUFREQ_GOV_POLICY_INIT) && ret) ||
+   ((event == CPUFREQ_GOV_POLICY_EXIT) && !ret))
   module_put(policy->governor->owner);
 
  return ret;
-- 
1.7.1