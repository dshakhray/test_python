From 66f0a50f0804c39e227a310c03e3ba1b8d2d739c Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:25:16 -0400
Subject: [net] libceph: generalize ceph_pg_mapping
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-210-git-send-email-sweil@redhat.com>
Patchwork-id: 89734
O-Subject: [PATCH 209/303] libceph: generalize ceph_pg_mapping
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

In preparation for adding support for primary_temp mappings, generalize
struct ceph_pg_mapping so it can hold mappings other than pg_temp.

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Alex Elder <elder@linaro.org>
(cherry picked from commit 35a935d75d51abe58d3427a8b4ae3745a5a14e1c)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/ceph/osdmap.h b/include/linux/ceph/osdmap.h
index 46c3e30..4837e58 100644
--- a/include/linux/ceph/osdmap.h
+++ b/include/linux/ceph/osdmap.h
@@ -60,8 +60,13 @@ struct ceph_object_id {
 struct ceph_pg_mapping {
  struct rb_node node;
  struct ceph_pg pgid;
- int len;
- int osds[];
+
+ union {
+  struct {
+   int len;
+   int osds[];
+  } pg_temp;
+ };
 };
 
 struct ceph_osdmap {
diff --git a/net/ceph/debugfs.c b/net/ceph/debugfs.c
index c45d235..5865f2c 100644
--- a/net/ceph/debugfs.c
+++ b/net/ceph/debugfs.c
@@ -88,9 +88,9 @@ static int osdmap_show(struct seq_file *s, void *p)
 
   seq_printf(s, "pg_temp %llu.%x [", pg->pgid.pool,
       pg->pgid.seed);
-  for (i = 0; i < pg->len; i++)
+  for (i = 0; i < pg->pg_temp.len; i++)
    seq_printf(s, "%s%d", (i == 0 ? "" : ","),
-       pg->osds[i]);
+       pg->pg_temp.osds[i]);
   seq_printf(s, "]\n");
  }
 
diff --git a/net/ceph/osdmap.c b/net/ceph/osdmap.c
index be2a65f..c67a309 100644
--- a/net/ceph/osdmap.c
+++ b/net/ceph/osdmap.c
@@ -822,9 +822,9 @@ static int __decode_pg_temp(void **p, void *end, struct ceph_osdmap *map,
     return -ENOMEM;
 
    pg->pgid = pgid;
-   pg->len = len;
+   pg->pg_temp.len = len;
    for (i = 0; i < len; i++)
-    pg->osds[i] = ceph_decode_32(p);
+    pg->pg_temp.osds[i] = ceph_decode_32(p);
 
    ret = __insert_pg_mapping(pg, &map->pg_temp);
    if (ret) {
@@ -1281,8 +1281,8 @@ static int *calc_pg_raw(struct ceph_osdmap *osdmap, struct ceph_pg pgid,
         pool->pg_num_mask);
  pg = __lookup_pg_mapping(&osdmap->pg_temp, pgid);
  if (pg) {
-  *num = pg->len;
-  return pg->osds;
+  *num = pg->pg_temp.len;
+  return pg->pg_temp.osds;
  }
 
  /* crush */
-- 
1.7.1