From f8aa3c6139a2bfdc0dd00c055e64135146431062 Mon Sep 17 00:00:00 2001
From: Robert S Peterson <rpeterso@redhat.com>
Date: Thu, 7 Aug 2014 17:03:13 -0400
Subject: [fs] gfs2: Change maxlen variables to size_t

Message-id: <347434605.3252913.1407430993075.JavaMail.zimbra@redhat.com>
Patchwork-id: 87536
O-Subject: [RHEL7.1 PATCH][bz#1127251] GFS2: Change maxlen variables to size_t
Bugzilla: 1127251
RH-Acked-by: Abhijith Das <adas@redhat.com>
RH-Acked-by: Steven Whitehouse <swhiteho@redhat.com>

Hi,

This is the RHEL7.1 crosswrite patch of one I sent yesterday for RHEL6.6.

This patch is for bug #1127251 - GFS2: filefrag on 1PB file panics

It's a RHEL7.1 crosswrite of the following upstream patch:
http://git.kernel.org/cgit/linux/kernel/git/steve/gfs2-3.0-nmw.git/commit/fs/gfs2?id=9a464443aec5173a66dd804dd5da30f641b37e2c

It was tested on system with a simple scenario that recreates the failure
reliably.

Patch description:
This patch changes some variables (especially maxlen in function
gfs2_block_map) from unsigned int to size_t. We need 64-bit arithmetic
for very large files (e.g. 1PB) where the variables otherwise get
shifted to all 0's.

rhbz#1127251

Regards,

Bob Peterson
Red Hat File Systems

Signed-off-by: Bob Peterson <rpeterso@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/gfs2/bmap.c b/fs/gfs2/bmap.c
index 1b9a45d..f9c4262 100644
--- a/fs/gfs2/bmap.c
+++ b/fs/gfs2/bmap.c
@@ -359,7 +359,7 @@ static inline void release_metapath(struct metapath *mp)
  * Returns: The length of the extent (minimum of one block)
  */
 
-static inline unsigned int gfs2_extent_length(void *start, unsigned int len, __be64 *ptr, unsigned limit, int *eob)
+static inline unsigned int gfs2_extent_length(void *start, unsigned int len, __be64 *ptr, size_t limit, int *eob)
 {
  const __be64 *end = (start + len);
  const __be64 *first = ptr;
@@ -449,7 +449,7 @@ static int gfs2_bmap_alloc(struct inode *inode, const sector_t lblock,
       struct buffer_head *bh_map, struct metapath *mp,
       const unsigned int sheight,
       const unsigned int height,
-      const unsigned int maxlen)
+      const size_t maxlen)
 {
  struct gfs2_inode *ip = GFS2_I(inode);
  struct gfs2_sbd *sdp = GFS2_SB(inode);
@@ -483,7 +483,8 @@ static int gfs2_bmap_alloc(struct inode *inode, const sector_t lblock,
  } else {
   /* Need to allocate indirect blocks */
   ptrs_per_blk = height > 1 ? sdp->sd_inptrs : sdp->sd_diptrs;
-  dblks = min(maxlen, ptrs_per_blk - mp->mp_list[end_of_metadata]);
+  dblks = min(maxlen, (size_t)(ptrs_per_blk -
+          mp->mp_list[end_of_metadata]));
   if (height == ip->i_height) {
    /* Writing into existing tree, extend tree down */
    iblks = height - sheight;
@@ -605,7 +606,7 @@ int gfs2_block_map(struct inode *inode, sector_t lblock,
  struct gfs2_inode *ip = GFS2_I(inode);
  struct gfs2_sbd *sdp = GFS2_SB(inode);
  unsigned int bsize = sdp->sd_sb.sb_bsize;
- const unsigned int maxlen = bh_map->b_size >> inode->i_blkbits;
+ const size_t maxlen = bh_map->b_size >> inode->i_blkbits;
  const u64 *arr = sdp->sd_heightsize;
  __be64 *ptr;
  u64 size;
-- 
1.7.1