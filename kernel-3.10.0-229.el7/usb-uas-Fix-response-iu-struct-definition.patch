From 80ba80535bbef498e55e98df58d100eb3acff264 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:06:18 -0400
Subject: [usb] uas: Fix response iu struct definition

Message-id: <1410887463-20674-307-git-send-email-dzickus@redhat.com>
Patchwork-id: 95581
O-Subject: [RHEL7 PATCH 306/591] uas: Fix response iu struct definition
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 00d202cc12127fe9a9fa477a78cb37e32d7f4360
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Oct 31 09:59:12 2013 +0100

    uas: Fix response iu struct definition

    The response iu struct before this patch has a size of 7 bytes (discounting
    padding), which is weird since all other iu-s are explictly padded to
    a multiple of 4 bytes.

    More over submitting a 7 byte bulk transfer to the status endpoint when
    expecting a response iu results in an USB babble error, as the device
    actually sends 8 bytes.

    Up on closer reading of the UAS spec:
    http://www.t10.org/cgi-bin/ac.pl?t=f&f=uas2r00.pdf

    The reason for this becomes clear, the 2 entries in "Table 17 - RESPONSE IU"
    are numbered 4 and 6, looking at other iu definitions in the spec, esp.
    multi-byte fields, this indicates that the ADDITIONAL RESPONSE INFORMATION
    field is not a 2 byte field as one might assume at a first look, but is
    a multi-byte field containing 3 bytes.

    This also aligns with the SCSI Architecture Model 4 spec, which UAS is based
    on which states in paragraph "7.1 Task management function procedure calls"
    that the "Additional Response Information" output argument for a Task
    management function procedure call is 3 bytes.

    Last but not least I've verified this by sending a logical unit reset task
    management call with an invalid lun to an actual uasp device, and received
    back a response-iu with byte 6 being 0, and byte 7 being 9, which is the
    responce code for an invalid iu, which confirms that the response code is
    being reported in byte 7 of the response iu rather then in byte 6.

    Things were working before despite this error in the response iu struct
    definition because the additional response info field is normally filled
    with zeros, and 0 is the response code value for success.

    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/usb/uas.h b/include/linux/usb/uas.h
index 1404178..772b66b 100644
--- a/include/linux/usb/uas.h
+++ b/include/linux/usb/uas.h
@@ -83,7 +83,7 @@ struct response_iu {
  __u8 iu_id;
  __u8 rsvd1;
  __be16 tag;
- __be16 add_response_info;
+ __u8 add_response_info[3];
  __u8 response_code;
 };
 
-- 
1.7.1