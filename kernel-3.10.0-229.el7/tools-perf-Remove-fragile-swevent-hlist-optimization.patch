From 95272799ca46b08b5ef1399c3f978ac7f80e1ad4 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:23:15 -0400
Subject: [tools] perf: Remove fragile swevent hlist optimization

Message-id: <1408462094-14194-27-git-send-email-jolsa@redhat.com>
Patchwork-id: 88015
O-Subject: [PATCH RHEL7.1 BZ1131394 026/325] perf: Remove fragile swevent hlist optimization
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 06db0b21712f878b808480ef31097637013bbf0f
Author: Peter Zijlstra <peterz@infradead.org>
Date: Fri Sep 13 13:14:47 2013 +0200

description
===========
Currently we only allocate a single cpu hashtable for per-cpu
swevents; do away with this optimization for it is fragile in the face
of things like perf_pmu_migrate_context().

The easiest thing is to make sure all CPUs are consistent wrt state.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index 8e9844d..0da9f61 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -5677,11 +5677,6 @@ static void swevent_hlist_put(struct perf_event *event)
 {
  int cpu;
 
- if (event->cpu != -1) {
-  swevent_hlist_put_cpu(event, event->cpu);
-  return;
- }
-
  for_each_possible_cpu(cpu)
   swevent_hlist_put_cpu(event, cpu);
 }
@@ -5715,9 +5710,6 @@ static int swevent_hlist_get(struct perf_event *event)
  int err;
  int cpu, failed_cpu;
 
- if (event->cpu != -1)
-  return swevent_hlist_get_cpu(event, event->cpu);
-
  get_online_cpus();
  for_each_possible_cpu(cpu) {
   err = swevent_hlist_get_cpu(event, cpu);
-- 
1.7.1