From 76f83dcd91fa5d4bb3d7b32f16ce0175a2a07feb Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:39:36 -0400
Subject: [virt] kvm/vmx: speed up wildcard MMIO EVENTFD

Message-id: <1406040016-3289-182-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86260
O-Subject: [RHEL7 PATCH v2 181/221] KVM: VMX: speed up wildcard MMIO EVENTFD
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Michael S. Tsirkin" <mst@redhat.com>

With KVM, MMIO is much slower than PIO, due to the need to
do page walk and emulation. But with EPT, it does not have to be: we
know the address from the VMCS so if the address is unique, we can look
up the eventfd directly, bypassing emulation.

Unfortunately, this only works if userspace does not need to match on
access length and data.  The implementation adds a separate FAST_MMIO
bus internally. This serves two purposes:
    - minimize overhead for old userspace that does not use eventfd with lengtth = 0
    - minimize disruption in other code (since we don't know the length,
      devices on the MMIO bus only get a valid address in write, this
      way we don't need to touch all devices to teach them to handle
      an invalid length)

At the moment, this optimization only has effect for EPT on x86.

It will be possible to speed up MMIO for NPT and MMU using the same
idea in the future.

With this patch applied, on VMX MMIO EVENTFD is essentially as fast as PIO.
I was unable to detect any measureable slowdown to non-eventfd MMIO.

Making MMIO faster is important for the upcoming virtio 1.0 which
includes an MMIO signalling capability.

The idea was suggested by Peter Anvin.  Lots of thanks to Gleb for
pre-review and suggestions.

Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
(cherry picked from commit 68c3b4d1676d870f0453c31d5a52e7e65c7448ae)
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 1f68c58..eb3f2b1 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -5528,6 +5528,10 @@ static int handle_ept_misconfig(struct kvm_vcpu *vcpu)
  gpa_t gpa;
 
  gpa = vmcs_read64(GUEST_PHYSICAL_ADDRESS);
+ if (!kvm_io_bus_write(vcpu->kvm, KVM_FAST_MMIO_BUS, gpa, 0, NULL)) {
+  skip_emulated_instruction(vcpu);
+  return 1;
+ }
 
  ret = handle_mmio_page_fault_common(vcpu, gpa, true);
  if (likely(ret == RET_MMIO_PF_EMULATE))
diff --git a/include/linux/kvm_host.h b/include/linux/kvm_host.h
index 6ee8e16..718731b 100644
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@ -163,6 +163,7 @@ enum kvm_bus {
  KVM_MMIO_BUS,
  KVM_PIO_BUS,
  KVM_VIRTIO_CCW_NOTIFY_BUS,
+ KVM_FAST_MMIO_BUS,
  KVM_NR_BUSES
 };
 
diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index fe39e61..70ced56 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -450,6 +450,7 @@ enum {
  kvm_ioeventfd_flag_nr_pio,
  kvm_ioeventfd_flag_nr_deassign,
  kvm_ioeventfd_flag_nr_virtio_ccw_notify,
+ kvm_ioeventfd_flag_nr_fast_mmio,
  kvm_ioeventfd_flag_nr_max,
 };
 
diff --git a/virt/kvm/eventfd.c b/virt/kvm/eventfd.c
index 220afe9..49583d2 100644
--- a/virt/kvm/eventfd.c
+++ b/virt/kvm/eventfd.c
@@ -758,6 +758,16 @@ kvm_assign_ioeventfd(struct kvm *kvm, struct kvm_ioeventfd *args)
  if (ret < 0)
   goto unlock_fail;
 
+ /* When length is ignored, MMIO is also put on a separate bus, for
+  * faster lookups.
+  */
+ if (!args->len && !(args->flags & KVM_IOEVENTFD_FLAG_PIO)) {
+  ret = kvm_io_bus_register_dev(kvm, KVM_FAST_MMIO_BUS,
+           p->addr, 0, &p->dev);
+  if (ret < 0)
+   goto register_fail;
+ }
+
  kvm->buses[bus_idx]->ioeventfd_count++;
  list_add_tail(&p->list, &kvm->ioeventfds);
 
@@ -765,6 +775,8 @@ kvm_assign_ioeventfd(struct kvm *kvm, struct kvm_ioeventfd *args)
 
  return 0;
 
+register_fail:
+ kvm_io_bus_unregister_dev(kvm, bus_idx, &p->dev);
 unlock_fail:
  mutex_unlock(&kvm->slots_lock);
 
@@ -804,6 +816,10 @@ kvm_deassign_ioeventfd(struct kvm *kvm, struct kvm_ioeventfd *args)
    continue;
 
   kvm_io_bus_unregister_dev(kvm, bus_idx, &p->dev);
+  if (!p->length) {
+   kvm_io_bus_unregister_dev(kvm, KVM_FAST_MMIO_BUS,
+        &p->dev);
+  }
   kvm->buses[bus_idx]->ioeventfd_count--;
   ioeventfd_release(p);
   ret = 0;
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index 6ff62ad..9dea478 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -2934,6 +2934,7 @@ static int __kvm_io_bus_read(struct kvm_io_bus *bus, struct kvm_io_range *range,
 
  return -EOPNOTSUPP;
 }
+EXPORT_SYMBOL_GPL(kvm_io_bus_write);
 
 /* kvm_io_bus_read - called under kvm->slots_lock */
 int kvm_io_bus_read(struct kvm *kvm, enum kvm_bus bus_idx, gpa_t addr,
-- 
1.7.1