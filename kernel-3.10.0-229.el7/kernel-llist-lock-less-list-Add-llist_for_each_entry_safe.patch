From dc04879a5af50c9e36dcee363b33ab56f6d917fa Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Wed, 11 Jun 2014 11:53:08 -0400
Subject: [kernel] llist: lock-less list, Add llist_for_each_entry_safe()

Message-id: <1402487594-26332-9-git-send-email-prarit@redhat.com>
Patchwork-id: 83638
O-Subject: [RHEL7.1 PATCH BZ 1105192 08/14] lock-less list, Add llist_for_each_entry_safe()
Bugzilla: 1105192
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

linux commit 809850b7a5fcc0a96d023e1171a7944c60fd5a71, tty: Use lockless
flip buffer free list, introduces llist_for_each_entry_safe().  Backport
only the new function.

RHEL_only.

Cc: Jeff Moyer <jmoyer@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/llist.h b/include/linux/llist.h
index ca2e999..fbf10a0 100644
--- a/include/linux/llist.h
+++ b/include/linux/llist.h
@@ -125,6 +125,29 @@ static inline void init_llist_head(struct llist_head *list)
       (pos) = llist_entry((pos)->member.next, typeof(*(pos)), member))
 
 /**
+ * llist_for_each_entry_safe - iterate over some deleted entries of lock-less list of given type
+ *          safe against removal of list entry
+ * @pos: the type * to use as a loop cursor.
+ * @n:  another type * to use as temporary storage
+ * @node: the first entry of deleted list entries.
+ * @member: the name of the llist_node with the struct.
+ *
+ * In general, some entries of the lock-less list can be traversed
+ * safely only after being removed from list, so start with an entry
+ * instead of list head.
+ *
+ * If being used on entries deleted from lock-less list directly, the
+ * traverse order is from the newest to the oldest added entry.  If
+ * you want to traverse from the oldest to the newest, you must
+ * reverse the order by yourself before traversing.
+ */
+#define llist_for_each_entry_safe(pos, n, node, member)          \
+ for (pos = llist_entry((node), typeof(*pos), member);         \
+      &pos->member != NULL &&            \
+         (n = llist_entry(pos->member.next, typeof(*n), member), true); \
+      pos = n)
+
+/**
  * llist_empty - tests whether a lock-less list is empty
  * @head: the list to test
  *
-- 
1.7.1