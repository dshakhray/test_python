From ddf37fc6c92ed77a59d3be1b0bfd054ef8fe578c Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:50:36 -0400
Subject: [tools] lib/traceevent: Get rid of malloc_or_die() allocate_arg()

Message-id: <1408953210-26343-149-git-send-email-jolsa@redhat.com>
Patchwork-id: 88906
O-Subject: [PATCH RHEL7.1 BZ1133083 148/322] tools lib traceevent: Get rid of malloc_or_die() allocate_arg()
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 2e4eb10d7e59df71ab649343b3f1bff9259da15d
Author: Namhyung Kim <namhyung@kernel.org>
Date: Thu Dec 12 16:36:06 2013 +0900

description
===========
Also check return value and handle it.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/lib/traceevent/parse-filter.c b/tools/lib/traceevent/parse-filter.c
index 767de4f..ab9cefe 100644
--- a/tools/lib/traceevent/parse-filter.c
+++ b/tools/lib/traceevent/parse-filter.c
@@ -211,12 +211,7 @@ struct event_filter *pevent_filter_alloc(struct pevent *pevent)
 
 static struct filter_arg *allocate_arg(void)
 {
- struct filter_arg *arg;
-
- arg = malloc_or_die(sizeof(*arg));
- memset(arg, 0, sizeof(*arg));
-
- return arg;
+ return calloc(1, sizeof(struct filter_arg));
 }
 
 static void free_arg(struct filter_arg *arg)
@@ -369,6 +364,10 @@ create_arg_item(struct event_format *event, const char *token,
  struct filter_arg *arg;
 
  arg = allocate_arg();
+ if (arg == NULL) {
+  show_error(error_str, "failed to allocate filter arg");
+  return NULL;
+ }
 
  switch (type) {
 
@@ -422,6 +421,9 @@ create_arg_op(enum filter_op_type btype)
  struct filter_arg *arg;
 
  arg = allocate_arg();
+ if (!arg)
+  return NULL;
+
  arg->type = FILTER_ARG_OP;
  arg->op.type = btype;
 
@@ -434,6 +436,9 @@ create_arg_exp(enum filter_exp_type etype)
  struct filter_arg *arg;
 
  arg = allocate_arg();
+ if (!arg)
+  return NULL;
+
  arg->type = FILTER_ARG_EXP;
  arg->op.type = etype;
 
@@ -446,6 +451,9 @@ create_arg_cmp(enum filter_exp_type etype)
  struct filter_arg *arg;
 
  arg = allocate_arg();
+ if (!arg)
+  return NULL;
+
  /* Use NUM and change if necessary */
  arg->type = FILTER_ARG_NUM;
  arg->op.type = etype;
@@ -909,8 +917,10 @@ static struct filter_arg *collapse_tree(struct filter_arg *arg)
  case FILTER_VAL_FALSE:
   free_arg(arg);
   arg = allocate_arg();
-  arg->type = FILTER_ARG_BOOLEAN;
-  arg->boolean.value = ret == FILTER_VAL_TRUE;
+  if (arg) {
+   arg->type = FILTER_ARG_BOOLEAN;
+   arg->boolean.value = ret == FILTER_VAL_TRUE;
+  }
  }
 
  return arg;
@@ -1057,6 +1067,8 @@ process_filter(struct event_format *event, struct filter_arg **parg,
    switch (op_type) {
    case OP_BOOL:
     arg = create_arg_op(btype);
+    if (arg == NULL)
+     goto fail_alloc;
     if (current_op)
      ret = add_left(arg, current_op);
     else
@@ -1067,6 +1079,8 @@ process_filter(struct event_format *event, struct filter_arg **parg,
 
    case OP_NOT:
     arg = create_arg_op(btype);
+    if (arg == NULL)
+     goto fail_alloc;
     if (current_op)
      ret = add_right(current_op, arg, error_str);
     if (ret < 0)
@@ -1086,6 +1100,8 @@ process_filter(struct event_format *event, struct filter_arg **parg,
      arg = create_arg_exp(etype);
     else
      arg = create_arg_cmp(ctype);
+    if (arg == NULL)
+     goto fail_alloc;
 
     if (current_op)
      ret = add_right(current_op, arg, error_str);
@@ -1119,11 +1135,16 @@ process_filter(struct event_format *event, struct filter_arg **parg,
   current_op = current_exp;
 
  current_op = collapse_tree(current_op);
+ if (current_op == NULL)
+  goto fail_alloc;
 
  *parg = current_op;
 
  return 0;
 
+ fail_alloc:
+ show_error(error_str, "failed to allocate filter arg");
+ goto fail;
  fail_print:
  show_error(error_str, "Syntax error");
  fail:
@@ -1154,6 +1175,10 @@ process_event(struct event_format *event, const char *filter_str,
  /* If parg is NULL, then make it into FALSE */
  if (!*parg) {
   *parg = allocate_arg();
+  if (*parg == NULL) {
+   show_error(error_str, "failed to allocate filter arg");
+   return -1;
+  }
   (*parg)->type = FILTER_ARG_BOOLEAN;
   (*parg)->boolean.value = FILTER_FALSE;
  }
@@ -1177,6 +1202,10 @@ static int filter_event(struct event_filter *filter,
  } else {
   /* just add a TRUE arg */
   arg = allocate_arg();
+  if (arg == NULL) {
+   show_error(error_str, "failed to allocate filter arg");
+   return -1;
+  }
   arg->type = FILTER_ARG_BOOLEAN;
   arg->boolean.value = FILTER_TRUE;
  }
@@ -1418,6 +1447,9 @@ static int copy_filter_type(struct event_filter *filter,
  if (strcmp(str, "TRUE") == 0 || strcmp(str, "FALSE") == 0) {
   /* Add trivial event */
   arg = allocate_arg();
+  if (arg == NULL)
+   return -1;
+
   arg->type = FILTER_ARG_BOOLEAN;
   if (strcmp(str, "TRUE") == 0)
    arg->boolean.value = 1;
-- 
1.7.1