From eed80b5cca8a206d633ba4b21c5daf54d04edd13 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 14:38:17 -0400
Subject: [ethernet] enic: Don't receive packets when the napi budget == 0

Message-id: <1409668716-4814-6-git-send-email-sassmann@redhat.com>
Patchwork-id: 90632
O-Subject: [RHEL7.1 PATCH 05/24] enic: Don't receive packets when the napi budget == 0
Bugzilla: 1107934
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: "Eric W. Biederman" <ebiederm@xmission.com>

Processing any incoming packets with a with a napi budget of 0
is incorrect driver behavior.

This matters as netpoll will shortly call drivers with a budget of 0
to avoid receive packet processing happening in hard irq context.

Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 4c50254902dc57e5f6a52ed601a4b8f976f2ed81)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/cisco/enic/enic_main.c b/drivers/net/ethernet/cisco/enic/enic_main.c
index dcd58f2..4c35fc8 100644
--- a/drivers/net/ethernet/cisco/enic/enic_main.c
+++ b/drivers/net/ethernet/cisco/enic/enic_main.c
@@ -1086,14 +1086,15 @@ static int enic_poll(struct napi_struct *napi, int budget)
  unsigned int intr = enic_legacy_io_intr();
  unsigned int rq_work_to_do = budget;
  unsigned int wq_work_to_do = -1; /* no limit */
- unsigned int  work_done, rq_work_done, wq_work_done;
+ unsigned int  work_done, rq_work_done = 0, wq_work_done;
  int err;
 
  /* Service RQ (first) and WQ
   */
 
- rq_work_done = vnic_cq_service(&enic->cq[cq_rq],
-  rq_work_to_do, enic_rq_service, NULL);
+ if (budget > 0)
+  rq_work_done = vnic_cq_service(&enic->cq[cq_rq],
+   rq_work_to_do, enic_rq_service, NULL);
 
  wq_work_done = vnic_cq_service(&enic->cq[cq_wq],
   wq_work_to_do, enic_wq_service, NULL);
@@ -1141,14 +1142,15 @@ static int enic_poll_msix(struct napi_struct *napi, int budget)
  unsigned int cq = enic_cq_rq(enic, rq);
  unsigned int intr = enic_msix_rq_intr(enic, rq);
  unsigned int work_to_do = budget;
- unsigned int work_done;
+ unsigned int work_done = 0;
  int err;
 
  /* Service RQ
   */
 
- work_done = vnic_cq_service(&enic->cq[cq],
-  work_to_do, enic_rq_service, NULL);
+ if (budget > 0)
+  work_done = vnic_cq_service(&enic->cq[cq],
+   work_to_do, enic_rq_service, NULL);
 
  /* Return intr event credits for this polling
   * cycle.  An intr event is the completion of a
-- 
1.7.1