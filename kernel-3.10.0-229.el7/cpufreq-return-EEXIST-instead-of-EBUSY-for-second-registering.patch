From 90811239c848913cb871ad847632b823955bf2f7 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:22:21 -0400
Subject: [cpufreq] return EEXIST instead of EBUSY for second registering

Message-id: <1409235879-1283-48-git-send-email-prarit@redhat.com>
Patchwork-id: 89374
O-Subject: [RHEL7.1 PATCH BZ 1134639 047/185] cpufreq: return EEXIST instead of EBUSY for second registering
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 4dea5806d332f91d640d99943db99a5539e832c3
Author: Yinghai Lu <yinghai@kernel.org>
Date:   Wed Sep 18 21:05:20 2013 -0700

    cpufreq: return EEXIST instead of EBUSY for second registering

    On systems that support intel_pstate, acpi_cpufreq fails to load, and
    udev keeps trying until trace gets filled up and kernel crashes.

    The root cause is driver return ret from cpufreq_register_driver(),
    because when some other driver takes over before, it will return
    EBUSY and then udev will keep trying ...

    cpufreq_register_driver() should return EEXIST instead so that the
    system can boot without appending intel_pstate=disable and still use
    intel_pstate.

    Signed-off-by: Yinghai Lu <yinghai@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index f9e4c52..5e386f4 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -2112,7 +2112,7 @@ int cpufreq_register_driver(struct cpufreq_driver *driver_data)
  write_lock_irqsave(&cpufreq_driver_lock, flags);
  if (cpufreq_driver) {
   write_unlock_irqrestore(&cpufreq_driver_lock, flags);
-  return -EBUSY;
+  return -EEXIST;
  }
  cpufreq_driver = driver_data;
  write_unlock_irqrestore(&cpufreq_driver_lock, flags);
-- 
1.7.1