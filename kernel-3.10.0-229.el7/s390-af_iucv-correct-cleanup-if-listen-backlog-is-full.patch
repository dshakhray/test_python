From 4780b2cf336fafda37c8fe4c027efa8b5fb94daf Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Mon, 16 Jun 2014 12:59:53 -0400
Subject: [s390] af_iucv: correct cleanup if listen backlog is full

Message-id: <1402923594-3246-1-git-send-email-brueckner@redhat.com>
Patchwork-id: 84040
O-Subject: [RHEL7.1 PATCH] [s390] af_iucv: correct cleanup if listen backlog is full
Bugzilla: 1109033
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 4d520f62e0f4fd310a2307d0244ef184ce9200ba
Author: Ursula Braun <ursula.braun@de.ibm.com>
Date:   Wed May 28 10:22:29 2014 +0200

    af_iucv: correct cleanup if listen backlog is full

    In case of transport HIPER a sock struct is allocated for an incoming
    connect request. If the backlog queue is full this socket is not
    needed, but is left in the list of af_iucv sockets. Final socket
    release posts console message "Attempt to release alive iucv socket".
    This patch makes sure the new created socket is cleaned up correctly
    if the backlog queue is full.

    Signed-off-by: Ursula Braun <ursula.braun@de.ibm.com>
    Signed-off-by: Frank Blaschka <blaschka@linux.vnet.ibm.com>
    Reported-by: Philipp Hachtmann <phacht@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Bugzilla
--------
BZ 1109033
https://bugzilla.redhat.com/show_bug.cgi?id=1109033

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=4d520f62e0f4fd310a2307d0244ef184ce9200ba

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7575067

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/iucv/af_iucv.c b/net/iucv/af_iucv.c
index 215e9b0..bf6408d 100644
--- a/net/iucv/af_iucv.c
+++ b/net/iucv/af_iucv.c
@@ -1935,11 +1935,10 @@ static int afiucv_hs_callback_syn(struct sock *sk, struct sk_buff *skb)
      sk_acceptq_is_full(sk) ||
      !nsk) {
   /* error on server socket - connection refused */
-  if (nsk)
-   sk_free(nsk);
   afiucv_swap_src_dest(skb);
   trans_hdr->flags = AF_IUCV_FLAG_SYN | AF_IUCV_FLAG_FIN;
   err = dev_queue_xmit(skb);
+  iucv_sock_kill(nsk);
   bh_unlock_sock(sk);
   goto out;
  }
-- 
1.7.1