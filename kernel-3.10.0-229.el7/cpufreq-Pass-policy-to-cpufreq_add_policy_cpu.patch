From 0ff0f7e6c6083c8a5bc0a29b953739c2ed54775c Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:21:48 -0400
Subject: [cpufreq] Pass policy to cpufreq_add_policy_cpu()

Message-id: <1409235879-1283-15-git-send-email-prarit@redhat.com>
Patchwork-id: 89361
O-Subject: [RHEL7.1 PATCH BZ 1134639 014/185] cpufreq: Pass policy to cpufreq_add_policy_cpu()
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit d8d3b4711297e101bbad826474013edbe342c333
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Sun Aug 4 01:20:07 2013 +0200

    cpufreq: Pass policy to cpufreq_add_policy_cpu()

    The caller of cpufreq_add_policy_cpu() already has a pointer to the
    policy structure and there is no need to look it up again in
    cpufreq_add_policy_cpu().  Let's pass it directly.

    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 723ad37..2bbb780 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -873,21 +873,17 @@ static void cpufreq_init_policy(struct cpufreq_policy *policy)
 }
 
 #ifdef CONFIG_HOTPLUG_CPU
-static int cpufreq_add_policy_cpu(unsigned int cpu, unsigned int sibling,
-      struct device *dev, bool frozen)
+static int cpufreq_add_policy_cpu(struct cpufreq_policy *policy,
+      unsigned int cpu, struct device *dev,
+      bool frozen)
 {
- struct cpufreq_policy *policy;
  int ret = 0, has_target = !!cpufreq_driver->target;
  unsigned long flags;
 
- policy = cpufreq_cpu_get(sibling);
- if (WARN_ON_ONCE(!policy))
-  return -ENODATA;
-
  if (has_target)
   __cpufreq_governor(policy, CPUFREQ_GOV_STOP);
 
- lock_policy_rwsem_write(sibling);
+ lock_policy_rwsem_write(policy->cpu);
 
  write_lock_irqsave(&cpufreq_driver_lock, flags);
 
@@ -896,7 +892,7 @@ static int cpufreq_add_policy_cpu(unsigned int cpu, unsigned int sibling,
  per_cpu(cpufreq_cpu_data, cpu) = policy;
  write_unlock_irqrestore(&cpufreq_driver_lock, flags);
 
- unlock_policy_rwsem_write(sibling);
+ unlock_policy_rwsem_write(policy->cpu);
 
  if (has_target) {
   __cpufreq_governor(policy, CPUFREQ_GOV_START);
@@ -907,8 +903,6 @@ static int cpufreq_add_policy_cpu(unsigned int cpu, unsigned int sibling,
  if (!frozen)
   ret = sysfs_create_link(&dev->kobj, &policy->kobj, "cpufreq");
 
- cpufreq_cpu_put(policy);
-
  return ret;
 }
 #endif
@@ -994,8 +988,7 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   struct cpufreq_policy *cp = per_cpu(cpufreq_cpu_data, sibling);
   if (cp && cpumask_test_cpu(cpu, cp->related_cpus)) {
    read_unlock_irqrestore(&cpufreq_driver_lock, flags);
-   ret = cpufreq_add_policy_cpu(cpu, sibling, dev,
-           frozen);
+   ret = cpufreq_add_policy_cpu(cp, cpu, dev, frozen);
    up_read(&cpufreq_rwsem);
    return ret;
   }
-- 
1.7.1