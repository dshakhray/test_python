From ef5acd4de6b3048c2ab3c14673f4f00dde1bb17b Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:25:13 -0400
Subject: [md] raid5: sysfs entry to control worker thread number

Message-id: <1409563584-9000-12-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 89945
O-Subject: [RHEL7.1 PATCH 11/82] raid5: sysfs entry to control worker thread number
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: Shaohua Li <shli@kernel.org>

Add a sysfs entry to control running workqueue thread number. If
group_thread_cnt is set to 0, we will disable workqueue offload handling of
stripes.

Signed-off-by: Shaohua Li <shli@fusionio.com>
Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit b721420e8719131896b009b11edbbd27d9b85e98)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index 8e640d7..2a1fea2 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -5153,10 +5153,70 @@ stripe_cache_active_show(struct mddev *mddev, char *page)
 static struct md_sysfs_entry
 raid5_stripecache_active = __ATTR_RO(stripe_cache_active);
 
+static ssize_t
+raid5_show_group_thread_cnt(struct mddev *mddev, char *page)
+{
+ struct r5conf *conf = mddev->private;
+ if (conf)
+  return sprintf(page, "%d\n", conf->worker_cnt_per_group);
+ else
+  return 0;
+}
+
+static int alloc_thread_groups(struct r5conf *conf, int cnt);
+static ssize_t
+raid5_store_group_thread_cnt(struct mddev *mddev, const char *page, size_t len)
+{
+ struct r5conf *conf = mddev->private;
+ unsigned long new;
+ int err;
+ struct r5worker_group *old_groups;
+ int old_group_cnt;
+
+ if (len >= PAGE_SIZE)
+  return -EINVAL;
+ if (!conf)
+  return -ENODEV;
+
+ if (kstrtoul(page, 10, &new))
+  return -EINVAL;
+
+ if (new == conf->worker_cnt_per_group)
+  return len;
+
+ mddev_suspend(mddev);
+
+ old_groups = conf->worker_groups;
+ old_group_cnt = conf->worker_cnt_per_group;
+
+ conf->worker_groups = NULL;
+ err = alloc_thread_groups(conf, new);
+ if (err) {
+  conf->worker_groups = old_groups;
+  conf->worker_cnt_per_group = old_group_cnt;
+ } else {
+  if (old_groups)
+   kfree(old_groups[0].workers);
+  kfree(old_groups);
+ }
+
+ mddev_resume(mddev);
+
+ if (err)
+  return err;
+ return len;
+}
+
+static struct md_sysfs_entry
+raid5_group_thread_cnt = __ATTR(group_thread_cnt, S_IRUGO | S_IWUSR,
+    raid5_show_group_thread_cnt,
+    raid5_store_group_thread_cnt);
+
 static struct attribute *raid5_attrs[] =  {
  &raid5_stripecache_size.attr,
  &raid5_stripecache_active.attr,
  &raid5_preread_bypass_threshold.attr,
+ &raid5_group_thread_cnt.attr,
  NULL,
 };
 static struct attribute_group raid5_attrs_group = {
-- 
1.7.1