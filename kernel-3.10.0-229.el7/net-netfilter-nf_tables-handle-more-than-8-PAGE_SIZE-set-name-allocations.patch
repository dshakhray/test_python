From 45779197ade434da78650fbb4c82c7dff98a3e53 Mon Sep 17 00:00:00 2001
From: Marcelo Leitner <mleitner@redhat.com>
Date: Tue, 21 Oct 2014 16:17:17 -0400
Subject: [net] netfilter: nf_tables: handle more than 8 * PAGE_SIZE set name allocations

Message-id: <20141021161717.22888.50921.stgit@localhost.localdomain>
Patchwork-id: 97933
O-Subject: [RHEL7 net PATCH 036/124] netfilter: nf_tables: handle more than 8 * PAGE_SIZE set name allocations
Bugzilla: 1148041 1155088
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Backport of upstream commit: 60eb18943bd787ac12685e863a37ea440f70abba

 commit 60eb18943bd787ac12685e863a37ea440f70abba
 Author: Patrick McHardy <kaber@trash.net>
 Date:   Fri Mar 7 12:34:05 2014 +0100

    netfilter: nf_tables: handle more than 8 * PAGE_SIZE set name allocations

    We currently have a limit of 8 * PAGE_SIZE anonymous sets. Lift that limit
    by continuing the scan if the entire page is exhausted.

    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/netfilter/nf_tables_api.c b/net/netfilter/nf_tables_api.c
index 85a7b12..0911131 100644
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -2050,7 +2050,7 @@ static int nf_tables_set_alloc_name(struct nft_ctx *ctx, struct nft_set *set,
  const struct nft_set *i;
  const char *p;
  unsigned long *inuse;
- unsigned int n = 0;
+ unsigned int n = 0, min = 0;
 
  p = strnchr(name, IFNAMSIZ, '%');
  if (p != NULL) {
@@ -2060,23 +2060,28 @@ static int nf_tables_set_alloc_name(struct nft_ctx *ctx, struct nft_set *set,
   inuse = (unsigned long *)get_zeroed_page(GFP_KERNEL);
   if (inuse == NULL)
    return -ENOMEM;
-
+cont:
   list_for_each_entry(i, &ctx->table->sets, list) {
    int tmp;
 
    if (!sscanf(i->name, name, &tmp))
     continue;
-   if (tmp < 0 || tmp >= BITS_PER_BYTE * PAGE_SIZE)
+   if (tmp < min || tmp >= min + BITS_PER_BYTE * PAGE_SIZE)
     continue;
 
-   set_bit(tmp, inuse);
+   set_bit(tmp - min, inuse);
   }
 
   n = find_first_zero_bit(inuse, BITS_PER_BYTE * PAGE_SIZE);
+  if (n >= BITS_PER_BYTE * PAGE_SIZE) {
+   min += BITS_PER_BYTE * PAGE_SIZE;
+   memset(inuse, 0, PAGE_SIZE);
+   goto cont;
+  }
   free_page((unsigned long)inuse);
  }
 
- snprintf(set->name, sizeof(set->name), name, n);
+ snprintf(set->name, sizeof(set->name), name, min + n);
  list_for_each_entry(i, &ctx->table->sets, list) {
   if (!strcmp(set->name, i->name))
    return -ENFILE;
-- 
1.7.1