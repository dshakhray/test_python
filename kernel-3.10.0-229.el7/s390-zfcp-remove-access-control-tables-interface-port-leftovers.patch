From 5f649f0e7656317330521a211b96c5981d8bdb35 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Fri, 12 Dec 2014 13:11:32 -0500
Subject: [s390] zfcp: remove access control tables interface (port leftovers)

Message-id: <1418389892-28466-2-git-send-email-brueckner@redhat.com>
Patchwork-id: 101717
O-Subject: [RHEL7.1 PATCH] [s390] zfcp: remove access control tables interface (port leftovers)
Bugzilla: 1173553
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

Description
-----------
commit 1b33ef23946adee4b7d9d6b16b7285ce61063451
Author: Martin Peschke <mpeschke@linux.vnet.ibm.com>
Commit: Christoph Hellwig <hch@lst.de>

    zfcp: remove access control tables interface (port leftovers)

    This patch removes some leftovers for commit
    663e0890e31cb85f0cca5ac1faaee0d2d52880b5
    "[SCSI] zfcp: remove access control tables interface".

    The "access denied" case for ports is gone, as well.
    The corresponding flag was cleared, but never set.
    So clean it up.

    Sysfs flag is kept, though, for backward-compatibility.
    Now it returns always 0.

    Signed-off-by: Martin Peschke <mpeschke@linux.vnet.ibm.com>
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

Bugzilla
--------
BZ 1173553
https://bugzilla.redhat.com/show_bug.cgi?id=1173553

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version 3.19-rc1
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=1b33ef23946adee4b7d9d6b16b7285ce61063451

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=8369399

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/scsi/zfcp_erp.c b/drivers/s390/scsi/zfcp_erp.c
index c82fe65..2c5d456 100644
--- a/drivers/s390/scsi/zfcp_erp.c
+++ b/drivers/s390/scsi/zfcp_erp.c
@@ -821,11 +821,6 @@ static int zfcp_erp_port_forced_strategy_close(struct zfcp_erp_action *act)
  return ZFCP_ERP_CONTINUES;
 }
 
-static void zfcp_erp_port_strategy_clearstati(struct zfcp_port *port)
-{
- atomic_clear_mask(ZFCP_STATUS_COMMON_ACCESS_DENIED, &port->status);
-}
-
 static int zfcp_erp_port_forced_strategy(struct zfcp_erp_action *erp_action)
 {
  struct zfcp_port *port = erp_action->port;
@@ -833,7 +828,6 @@ static int zfcp_erp_port_forced_strategy(struct zfcp_erp_action *erp_action)
 
  switch (erp_action->step) {
  case ZFCP_ERP_STEP_UNINITIALIZED:
-  zfcp_erp_port_strategy_clearstati(port);
   if ((status & ZFCP_STATUS_PORT_PHYS_OPEN) &&
       (status & ZFCP_STATUS_COMMON_OPEN))
    return zfcp_erp_port_forced_strategy_close(erp_action);
@@ -933,7 +927,6 @@ static int zfcp_erp_port_strategy(struct zfcp_erp_action *erp_action)
 
  switch (erp_action->step) {
  case ZFCP_ERP_STEP_UNINITIALIZED:
-  zfcp_erp_port_strategy_clearstati(port);
   if (p_status & ZFCP_STATUS_COMMON_OPEN)
    return zfcp_erp_port_strategy_close(erp_action);
   break;
diff --git a/drivers/s390/scsi/zfcp_fsf.c b/drivers/s390/scsi/zfcp_fsf.c
index 510e9b0..cb04034 100644
--- a/drivers/s390/scsi/zfcp_fsf.c
+++ b/drivers/s390/scsi/zfcp_fsf.c
@@ -1395,8 +1395,7 @@ static void zfcp_fsf_open_port_handler(struct zfcp_fsf_req *req)
   port->handle = header->port_handle;
   atomic_set_mask(ZFCP_STATUS_COMMON_OPEN |
     ZFCP_STATUS_PORT_PHYS_OPEN, &port->status);
-  atomic_clear_mask(ZFCP_STATUS_COMMON_ACCESS_DENIED |
-                    ZFCP_STATUS_COMMON_ACCESS_BOXED,
+  atomic_clear_mask(ZFCP_STATUS_COMMON_ACCESS_BOXED,
                     &port->status);
   /* check whether D_ID has changed during open */
   /*
diff --git a/drivers/s390/scsi/zfcp_sysfs.c b/drivers/s390/scsi/zfcp_sysfs.c
index 6e22099..c69c64e 100644
--- a/drivers/s390/scsi/zfcp_sysfs.c
+++ b/drivers/s390/scsi/zfcp_sysfs.c
@@ -73,9 +73,7 @@ ZFCP_DEFINE_ATTR(zfcp_port, port, status, "0x%08x\n",
 ZFCP_DEFINE_ATTR(zfcp_port, port, in_recovery, "%d\n",
    (atomic_read(&port->status) &
     ZFCP_STATUS_COMMON_ERP_INUSE) != 0);
-ZFCP_DEFINE_ATTR(zfcp_port, port, access_denied, "%d\n",
-   (atomic_read(&port->status) &
-    ZFCP_STATUS_COMMON_ACCESS_DENIED) != 0);
+ZFCP_DEFINE_ATTR_CONST(port, access_denied, "%d\n", 0);
 
 ZFCP_DEFINE_ATTR(zfcp_unit, unit, status, "0x%08x\n",
    zfcp_unit_sdev_status(unit));
-- 
1.7.1