From 84378c76b20e197d451069cbe8e8cb65578321c8 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 12:01:52 -0400
Subject: [infiniband] mlx5: Adjust events to use unsigned long param instead of void ptr

Message-id: <46f02d333c841682da87fe7bc170596366820491.1410425016.git.avadai@redhat.com>
Patchwork-id: 93713
O-Subject: [Patch RHEL7.1 V1 176/197] mlx5: Adjust events to use unsigned long param instead of void *
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Jack Morgenstein <jackm@dev.mellanox.co.il>

In the event flow, we currently pass only a port number in the
void *data argument.  Rather than pass a pointer to the event handlers,
we should use an "unsigned long" parameter, and pass the port number
value directly.

In the future, if necessary for some events, we can use the unsigned long
parameter to pass a pointer.

Based on a patch by Eli Cohen <eli@mellanox.com>

Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
Signed-off-by: Eli Cohen <eli@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4d2f9bbb654b91a262638ac2c84dcb169d014aa6)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/hw/mlx5/main.c b/drivers/infiniband/hw/mlx5/main.c
index 166335a..d8907b2 100644
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@ -905,7 +905,7 @@ static struct device_attribute *mlx5_class_attributes[] = {
 };
 
 static void mlx5_ib_event(struct mlx5_core_dev *dev, void *context,
-     enum mlx5_dev_event event, void *data)
+     enum mlx5_dev_event event, unsigned long param)
 {
  struct mlx5_ib_dev *ibdev = (struct mlx5_ib_dev *)context;
  struct ib_event ibev;
@@ -920,12 +920,12 @@ static void mlx5_ib_event(struct mlx5_core_dev *dev, void *context,
 
  case MLX5_DEV_EVENT_PORT_UP:
   ibev.event = IB_EVENT_PORT_ACTIVE;
-  port = *(u8 *)data;
+  port = (u8)param;
   break;
 
  case MLX5_DEV_EVENT_PORT_DOWN:
   ibev.event = IB_EVENT_PORT_ERR;
-  port = *(u8 *)data;
+  port = (u8)param;
   break;
 
  case MLX5_DEV_EVENT_PORT_INITIALIZED:
@@ -934,22 +934,22 @@ static void mlx5_ib_event(struct mlx5_core_dev *dev, void *context,
 
  case MLX5_DEV_EVENT_LID_CHANGE:
   ibev.event = IB_EVENT_LID_CHANGE;
-  port = *(u8 *)data;
+  port = (u8)param;
   break;
 
  case MLX5_DEV_EVENT_PKEY_CHANGE:
   ibev.event = IB_EVENT_PKEY_CHANGE;
-  port = *(u8 *)data;
+  port = (u8)param;
   break;
 
  case MLX5_DEV_EVENT_GUID_CHANGE:
   ibev.event = IB_EVENT_GID_CHANGE;
-  port = *(u8 *)data;
+  port = (u8)param;
   break;
 
  case MLX5_DEV_EVENT_CLIENT_REREG:
   ibev.event = IB_EVENT_CLIENT_REREGISTER;
-  port = *(u8 *)data;
+  port = (u8)param;
   break;
  }
 
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eq.c b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
index 67cead2..4e8bd0b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
@@ -253,7 +253,8 @@ static int mlx5_eq_int(struct mlx5_core_dev *dev, struct mlx5_eq *eq)
    case MLX5_PORT_CHANGE_SUBTYPE_CLIENT_REREG:
    case MLX5_PORT_CHANGE_SUBTYPE_INITIALIZED:
     if (dev->event)
-     dev->event(dev, port_subtype_event(eqe->sub_type), &port);
+     dev->event(dev, port_subtype_event(eqe->sub_type),
+         (unsigned long)port);
     break;
    default:
     mlx5_core_warn(dev, "Port event with unrecognized subtype: port %d, sub_type %d\n",
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/main.c b/drivers/net/ethernet/mellanox/mlx5/core/main.c
index fd782bf..f2716cc 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@ -704,7 +704,7 @@ void mlx5_unregister_interface(struct mlx5_interface *intf)
 EXPORT_SYMBOL(mlx5_unregister_interface);
 
 static void mlx5_core_event(struct mlx5_core_dev *dev, enum mlx5_dev_event event,
-       void *data)
+       unsigned long param)
 {
  struct mlx5_priv *priv = &dev->priv;
  struct mlx5_device_context *dev_ctx;
@@ -714,7 +714,7 @@ static void mlx5_core_event(struct mlx5_core_dev *dev, enum mlx5_dev_event event
 
  list_for_each_entry(dev_ctx, &priv->ctx_list, list)
   if (dev_ctx->intf->event)
-   dev_ctx->intf->event(dev, dev_ctx->context, event, data);
+   dev_ctx->intf->event(dev, dev_ctx->context, event, param);
 
  spin_unlock_irqrestore(&priv->ctx_lock, flags);
 }
diff --git a/include/linux/mlx5/driver.h b/include/linux/mlx5/driver.h
index 76de0cc..9f3a547 100644
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@ -559,7 +559,7 @@ struct mlx5_core_dev {
  struct mlx5_init_seg __iomem *iseg;
  void   (*event) (struct mlx5_core_dev *dev,
        enum mlx5_dev_event event,
-       void *data);
+       unsigned long param);
  struct mlx5_priv priv;
  struct mlx5_profile *profile;
  atomic_t  num_qps;
@@ -817,7 +817,7 @@ struct mlx5_interface {
  void *   (*add)(struct mlx5_core_dev *dev);
  void   (*remove)(struct mlx5_core_dev *dev, void *context);
  void   (*event)(struct mlx5_core_dev *dev, void *context,
-      enum mlx5_dev_event event, void *data);
+      enum mlx5_dev_event event, unsigned long param);
  struct list_head list;
 };
 
-- 
1.7.1