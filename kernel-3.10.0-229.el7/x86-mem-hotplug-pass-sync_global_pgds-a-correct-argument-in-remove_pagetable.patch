From 70030980fa3afa20411ba94cd270dfea7e212f7d Mon Sep 17 00:00:00 2001
From: Motohiro Kosaki <mkosaki@redhat.com>
Date: Mon, 25 Aug 2014 22:51:31 -0400
Subject: [x86] mem-hotplug: pass sync_global_pgds() a correct argument in remove_pagetable()

Message-id: <1409007096-2821-2-git-send-email-mkosaki@redhat.com>
Patchwork-id: 89065
O-Subject: [RHEL7.1 BZ1116286 PATCH 1/6] x86, mem-hotplug: pass sync_global_pgds() a correct argument in remove_pagetable()
Bugzilla: 1116286
RH-Acked-by: Lenny Szubowicz <lszubowi@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>

From: KOSAKI Motohiro <mkosaki@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1116286
Upstream-tree: git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7878648
Changes-from-upstream: none

commit 803fdc5a05f431e8ea9271fd08bec35fc2746aac
Author: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
Date:   Thu Jul 31 09:27:51 2014 +1000

    x86,mem-hotplug: pass sync_global_pgds() a correct argument in remove_pagetable()

    When hot-adding memory after hot-removing memory, following call traces
    are shown:

    kernel BUG at arch/x86/mm/init_64.c:206!
    ...
     [<ffffffff815e0c80>] kernel_physical_mapping_init+0x1b2/0x1d2
     [<ffffffff815ced94>] init_memory_mapping+0x1d4/0x380
     [<ffffffff8104aebd>] arch_add_memory+0x3d/0xd0
     [<ffffffff815d03d9>] add_memory+0xb9/0x1b0
     [<ffffffff81352415>] acpi_memory_device_add+0x1af/0x28e
     [<ffffffff81325dc4>] acpi_bus_device_attach+0x8c/0xf0
     [<ffffffff813413b9>] acpi_ns_walk_namespace+0xc8/0x17f
     [<ffffffff81325d38>] ? acpi_bus_type_and_status+0xb7/0xb7
     [<ffffffff81325d38>] ? acpi_bus_type_and_status+0xb7/0xb7
     [<ffffffff813418ed>] acpi_walk_namespace+0x95/0xc5
     [<ffffffff81326b4c>] acpi_bus_scan+0x9a/0xc2
     [<ffffffff81326bff>] acpi_scan_bus_device_check+0x8b/0x12e
     [<ffffffff81326cb5>] acpi_scan_device_check+0x13/0x15
     [<ffffffff81320122>] acpi_os_execute_deferred+0x25/0x32
     [<ffffffff8107e02b>] process_one_work+0x17b/0x460
     [<ffffffff8107edfb>] worker_thread+0x11b/0x400
     [<ffffffff8107ece0>] ? rescuer_thread+0x400/0x400
     [<ffffffff81085aef>] kthread+0xcf/0xe0
     [<ffffffff81085a20>] ? kthread_create_on_node+0x140/0x140
     [<ffffffff815fc76c>] ret_from_fork+0x7c/0xb0
     [<ffffffff81085a20>] ? kthread_create_on_node+0x140/0x140

    The patch-sets fix the issue.

    This patch (of 2):

    remove_pagetable() gets start argument and passes the argument to
    sync_global_pgds().  In this case, the argument must not be modified.  If
    the argument is modified and passed to sync_global_pgds(),
    sync_global_pgds() does not correctly synchronize PGD to PGD entries of
    all processes MM since synchronized range of memory [start, end] is wrong.

    Unfortunately the start argument is modified in remove_pagetable().  So
    this patch fixes the issue.

    Signed-off-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Tang Chen <tangchen@cn.fujitsu.com>
    Acked-by: Toshi Kani <toshi.kani@hp.com>
    Cc: Gu Zheng <guz.fnst@cn.fujitsu.com>
    Cc: Zhang Yanfei <zhangyanfei@cn.fujitsu.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

Signed-off-by: KOSAKI Motohiro <mkosaki@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c
index bb00c46..85c276c 100644
--- a/arch/x86/mm/init_64.c
+++ b/arch/x86/mm/init_64.c
@@ -989,19 +989,20 @@ static void __meminit
 remove_pagetable(unsigned long start, unsigned long end, bool direct)
 {
  unsigned long next;
+ unsigned long addr;
  pgd_t *pgd;
  pud_t *pud;
  bool pgd_changed = false;
 
- for (; start < end; start = next) {
-  next = pgd_addr_end(start, end);
+ for (addr = start; addr < end; addr = next) {
+  next = pgd_addr_end(addr, end);
 
-  pgd = pgd_offset_k(start);
+  pgd = pgd_offset_k(addr);
   if (!pgd_present(*pgd))
    continue;
 
   pud = (pud_t *)pgd_page_vaddr(*pgd);
-  remove_pud_table(pud, start, next, direct);
+  remove_pud_table(pud, addr, next, direct);
   if (free_pud_table(pud, pgd))
    pgd_changed = true;
  }
-- 
1.7.1