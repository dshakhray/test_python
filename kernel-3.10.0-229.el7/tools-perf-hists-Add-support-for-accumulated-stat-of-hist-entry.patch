From 3c0eac37112aa741a75bb575141dae81ef1bc149 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:01 -0400
Subject: [tools] perf/hists: Add support for accumulated stat of hist entry

Message-id: <1410181752-25631-237-git-send-email-jolsa@redhat.com>
Patchwork-id: 91920
O-Subject: [PATCH RHEL7.1 BZ1134356 236/307] perf hists: Add support for accumulated stat of hist entry
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit f8be1c8c48c8469d1ce95ccdc77b1e2c6a29700e
Author: Namhyung Kim <namhyung@kernel.org>
Date: Tue Sep 11 13:15:07 2012 +0900

description
===========
Maintain accumulated stat information in hist_entry->stat_acc if
symbol_conf.cumulate_callchain is set.  Fields in ->stat_acc have same
vaules initially, and will be updated as callchain is processed later.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index d866235..dfff2ee 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -232,6 +232,8 @@ static bool hists__decay_entry(struct hists *hists, struct hist_entry *he)
   return true;
 
  he_stat__decay(&he->stat);
+ if (symbol_conf.cumulate_callchain)
+  he_stat__decay(he->stat_acc);
 
  diff = prev_period - he->stat.period;
 
@@ -279,12 +281,26 @@ void hists__decay_entries(struct hists *hists, bool zap_user, bool zap_kernel)
 
 static struct hist_entry *hist_entry__new(struct hist_entry *template)
 {
- size_t callchain_size = symbol_conf.use_callchain ? sizeof(struct callchain_root) : 0;
- struct hist_entry *he = zalloc(sizeof(*he) + callchain_size);
+ size_t callchain_size = 0;
+ struct hist_entry *he;
+
+ if (symbol_conf.use_callchain || symbol_conf.cumulate_callchain)
+  callchain_size = sizeof(struct callchain_root);
+
+ he = zalloc(sizeof(*he) + callchain_size);
 
  if (he != NULL) {
   *he = *template;
 
+  if (symbol_conf.cumulate_callchain) {
+   he->stat_acc = malloc(sizeof(he->stat));
+   if (he->stat_acc == NULL) {
+    free(he);
+    return NULL;
+   }
+   memcpy(he->stat_acc, &he->stat, sizeof(he->stat));
+  }
+
   if (he->ms.map)
    he->ms.map->referenced = true;
 
@@ -296,6 +312,7 @@ static struct hist_entry *hist_entry__new(struct hist_entry *template)
     */
    he->branch_info = malloc(sizeof(*he->branch_info));
    if (he->branch_info == NULL) {
+    free(he->stat_acc);
     free(he);
     return NULL;
    }
@@ -359,6 +376,8 @@ static struct hist_entry *add_hist_entry(struct hists *hists,
 
   if (!cmp) {
    he_stat__add_period(&he->stat, period, weight);
+   if (symbol_conf.cumulate_callchain)
+    he_stat__add_period(he->stat_acc, period, weight);
 
    /*
     * This mem info was allocated from sample__resolve_mem
@@ -394,6 +413,8 @@ static struct hist_entry *add_hist_entry(struct hists *hists,
  rb_insert_color(&he->rb_node_in, hists->entries_in);
 out:
  he_stat__add_cpumode_period(&he->stat, al->cpumode, period);
+ if (symbol_conf.cumulate_callchain)
+  he_stat__add_cpumode_period(he->stat_acc, al->cpumode, period);
  return he;
 }
 
@@ -768,6 +789,7 @@ void hist_entry__free(struct hist_entry *he)
 {
  zfree(&he->branch_info);
  zfree(&he->mem_info);
+ zfree(&he->stat_acc);
  free_srcline(he->srcline);
  free(he);
 }
@@ -793,6 +815,8 @@ static bool hists__collapse_insert_entry(struct hists *hists __maybe_unused,
 
   if (!cmp) {
    he_stat__add_stat(&iter->stat, &he->stat);
+   if (symbol_conf.cumulate_callchain)
+    he_stat__add_stat(iter->stat_acc, he->stat_acc);
 
    if (symbol_conf.use_callchain) {
     callchain_cursor_reset(&callchain_cursor);
diff --git a/tools/perf/util/sort.h b/tools/perf/util/sort.h
index 5f38d92..c9ffa03 100644
--- a/tools/perf/util/sort.h
+++ b/tools/perf/util/sort.h
@@ -82,6 +82,7 @@ struct hist_entry {
   struct list_head head;
  } pairs;
  struct he_stat  stat;
+ struct he_stat  *stat_acc;
  struct map_symbol ms;
  struct thread  *thread;
  struct comm  *comm;
diff --git a/tools/perf/util/symbol.h b/tools/perf/util/symbol.h
index 33ede53..615c752 100644
--- a/tools/perf/util/symbol.h
+++ b/tools/perf/util/symbol.h
@@ -109,6 +109,7 @@ struct symbol_conf {
    show_nr_samples,
    show_total_period,
    use_callchain,
+   cumulate_callchain,
    exclude_other,
    show_cpu_utilization,
    initialized,
-- 
1.7.1