From 2676f56fda9a3cfbddac8d7e117ddbf9b16a3a98 Mon Sep 17 00:00:00 2001
From: Sai Vemuri <svemuri@redhat.com>
Date: Fri, 17 Oct 2014 19:44:37 -0400
Subject: [ethernet] cxgb4: Fix build failure in cxgb4 when ipv6 is disabled/not in-built

Message-id: <1413575081-32047-3-git-send-email-svemuri@redhat.com>
Patchwork-id: 97656
O-Subject: [RHEL7.1 PATCH BZ 1153834 2/6] cxgb4 : Fix build failure in cxgb4 when ipv6 is disabled/not in-built
Bugzilla: 1153834
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Upstream : https://git.kernel.org/cgit/linux/kernel/git/davem/net.git/commit/?id=1bb60376cda108306818365b186450f154ede5f2

cxgb4 ipv6 does not guard against ipv6 being disabled, or the standard
ipv6 module vs inbuilt tri-state issue. This was fixed for cxgb4i & iw_cxgb4
but missed for cxgb4.

Signed-off-by: Anish Bhatt <anish@chelsio.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1bb60376cda108306818365b186450f154ede5f2)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 drivers/net/ethernet/chelsio/Kconfig

diff --git a/drivers/net/ethernet/chelsio/Kconfig b/drivers/net/ethernet/chelsio/Kconfig
index d40c994..97de0cf 100644
--- a/drivers/net/ethernet/chelsio/Kconfig
+++ b/drivers/net/ethernet/chelsio/Kconfig
@@ -67,8 +67,8 @@ config CHELSIO_T3
    will be called cxgb3.
 
 config CHELSIO_T4
- tristate "Chelsio Communications T4 Ethernet support"
- depends on PCI
+ tristate "Chelsio Communications T4/T5 Ethernet support"
+ depends on PCI && (IPV6 || IPV6=n)
  select FW_LOADER
  select MDIO
  ---help---
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index 4e64a5c..f034ee8 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@ -4161,6 +4161,7 @@ EXPORT_SYMBOL(cxgb4_unregister_uld);
  * success (true) if it belongs otherwise failure (false).
  * Called with rcu_read_lock() held.
  */
+#if IS_ENABLED(CONFIG_IPV6)
 static bool cxgb4_netdev(const struct net_device *netdev)
 {
  struct adapter *adap;
@@ -4323,6 +4324,7 @@ static void update_clip(const struct adapter *adap)
  }
  rcu_read_unlock();
 }
+#endif /* IS_ENABLED(CONFIG_IPV6) */
 
 /**
  * cxgb_up - enable the adapter
@@ -4369,7 +4371,9 @@ static int cxgb_up(struct adapter *adap)
  t4_intr_enable(adap);
  adap->flags |= FULL_INIT_DONE;
  notify_ulds(adap, CXGB4_STATE_UP);
+#if IS_ENABLED(CONFIG_IPV6)
  update_clip(adap);
+#endif
  out:
  return err;
  irq_err:
@@ -6628,14 +6632,18 @@ static int __init cxgb4_init_module(void)
  if (ret < 0)
   debugfs_remove(cxgb4_debugfs_root);
 
+#if IS_ENABLED(CONFIG_IPV6)
  register_inet6addr_notifier(&cxgb4_inet6addr_notifier);
+#endif
 
  return ret;
 }
 
 static void __exit cxgb4_cleanup_module(void)
 {
+#if IS_ENABLED(CONFIG_IPV6)
  unregister_inet6addr_notifier(&cxgb4_inet6addr_notifier);
+#endif
  pci_unregister_driver(&cxgb4_driver);
  debugfs_remove(cxgb4_debugfs_root);  /* NULL ok */
 }
-- 
1.7.1