From d46ddaa959e6b11338927a4ef2a542f015c7cf77 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:59 -0400
Subject: [tools] perf: Separate dso data related variables

Message-id: <1410181752-25631-295-git-send-email-jolsa@redhat.com>
Patchwork-id: 91957
O-Subject: [PATCH RHEL7.1 BZ1134356 294/307] perf tools: Separate dso data related variables
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit ca40e2af1f75eddf7eb2b93fde6391ea185d8fc8
Author: Jiri Olsa <jolsa@kernel.org>
Date: Wed May 7 18:30:45 2014 +0200

description
===========
Add separated structure/namespace for data related
variables. We are going to add mode of them, so this
way they will be clearly separated.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/dso.c b/tools/perf/util/dso.c
index 64453d6..1c3cdaf 100644
--- a/tools/perf/util/dso.c
+++ b/tools/perf/util/dso.c
@@ -292,7 +292,7 @@ dso_cache__read(struct dso *dso, struct machine *machine,
 
   cache->offset = cache_offset;
   cache->size   = ret;
-  dso_cache__insert(&dso->cache, cache);
+  dso_cache__insert(&dso->data.cache, cache);
 
   ret = dso_cache__memcpy(cache, offset, data, size);
 
@@ -310,7 +310,7 @@ static ssize_t dso_cache_read(struct dso *dso, struct machine *machine,
 {
  struct dso_cache *cache;
 
- cache = dso_cache__find(&dso->cache, offset);
+ cache = dso_cache__find(&dso->data.cache, offset);
  if (cache)
   return dso_cache__memcpy(cache, offset, data, size);
  else
@@ -473,7 +473,7 @@ struct dso *dso__new(const char *name)
   dso__set_short_name(dso, dso->name, false);
   for (i = 0; i < MAP__NR_TYPES; ++i)
    dso->symbols[i] = dso->symbol_names[i] = RB_ROOT;
-  dso->cache = RB_ROOT;
+  dso->data.cache = RB_ROOT;
   dso->symtab_type = DSO_BINARY_TYPE__NOT_FOUND;
   dso->binary_type = DSO_BINARY_TYPE__NOT_FOUND;
   dso->loaded = 0;
@@ -506,7 +506,7 @@ void dso__delete(struct dso *dso)
   dso->long_name_allocated = false;
  }
 
- dso_cache__free(&dso->cache);
+ dso_cache__free(&dso->data.cache);
  dso__free_a2l(dso);
  zfree(&dso->symsrc_filename);
  free(dso);
diff --git a/tools/perf/util/dso.h b/tools/perf/util/dso.h
index 38efe95..7637fdd 100644
--- a/tools/perf/util/dso.h
+++ b/tools/perf/util/dso.h
@@ -76,7 +76,6 @@ struct dso {
  struct list_head node;
  struct rb_root  symbols[MAP__NR_TYPES];
  struct rb_root  symbol_names[MAP__NR_TYPES];
- struct rb_root  cache;
  void   *a2l;
  char   *symsrc_filename;
  unsigned int  a2l_fails;
@@ -99,6 +98,12 @@ struct dso {
  const char  *long_name;
  u16   long_name_len;
  u16   short_name_len;
+
+ /* dso data file */
+ struct {
+  struct rb_root  cache;
+ } data;
+
  char   name[0];
 };
 
-- 
1.7.1