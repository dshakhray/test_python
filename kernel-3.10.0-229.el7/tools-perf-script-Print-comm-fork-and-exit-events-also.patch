From 279d7caeb91713874a26972d587267e0442321a0 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:54 -0400
Subject: [tools] perf/script: Print comm, fork and exit events also

Message-id: <1408953210-26343-47-git-send-email-jolsa@redhat.com>
Patchwork-id: 88758
O-Subject: [PATCH RHEL7.1 BZ1133083 046/322] perf script: Print comm, fork and exit events also
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit ad7ebb9a48f59bad2714b64725653a73d78b686e
Author: Namhyung Kim <namhyung@kernel.org>
Date: Tue Nov 26 17:51:12 2013 +0900

description
===========
If --show-task-events option is given, also print internal COMM, FORK
and EXIT events.  It would be helpful for debugging.

  $ perf script --show-task-events
  ...
         swapper     0 [009] 3350640.335261: sched:sched_switch: prev_comm=swapper/9
           sleep  9486 [009] 3350640.335509: PERF_RECORD_COMM: sleep:9486
           sleep  9486 [009] 3350640.335806: sched:sched_stat_runtime: comm=sleep pid=9486
         firefox  2635 [003] 3350641.275896: PERF_RECORD_FORK(2635:9487):(2635:2635)
         firefox  2635 [003] 3350641.275896: sched:sched_process_fork: comm=firefox pid=2635
           sleep  9486 [009] 3350641.336009: PERF_RECORD_EXIT(9486:9486):(9486:9486)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/Documentation/perf-script.txt b/tools/perf/Documentation/perf-script.txt
index e9cbfcd..67af9b7 100644
--- a/tools/perf/Documentation/perf-script.txt
+++ b/tools/perf/Documentation/perf-script.txt
@@ -203,6 +203,9 @@ OPTIONS
 --show-kernel-path::
  Try to resolve the path of [kernel.kallsyms]
 
+--show-task-events
+ Display task related events (e.g. FORK, COMM, EXIT).
+
 SEE ALSO
 --------
 linkperf:perf-record[1], linkperf:perf-script-perl[1],
diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c
index 9f3ba44..e2b9aff 100644
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@ -572,6 +572,7 @@ static int process_sample_event(struct perf_tool *tool __maybe_unused,
 struct perf_script {
  struct perf_tool tool;
  struct perf_session *session;
+ bool   show_task_events;
 };
 
 static int process_attr(struct perf_tool *tool, union perf_event *event,
@@ -602,6 +603,101 @@ static int process_attr(struct perf_tool *tool, union perf_event *event,
  return perf_evsel__check_attr(evsel, scr->session);
 }
 
+static int process_comm_event(struct perf_tool *tool,
+         union perf_event *event,
+         struct perf_sample *sample,
+         struct machine *machine)
+{
+ struct thread *thread;
+ struct perf_script *script = container_of(tool, struct perf_script, tool);
+ struct perf_session *session = script->session;
+ struct perf_evsel *evsel = perf_evlist__first(session->evlist);
+ int ret = -1;
+
+ thread = machine__findnew_thread(machine, event->comm.pid, event->comm.tid);
+ if (thread == NULL) {
+  pr_debug("problem processing COMM event, skipping it.\n");
+  return -1;
+ }
+
+ if (perf_event__process_comm(tool, event, sample, machine) < 0)
+  goto out;
+
+ if (!evsel->attr.sample_id_all) {
+  sample->cpu = 0;
+  sample->time = 0;
+  sample->tid = event->comm.tid;
+  sample->pid = event->comm.pid;
+ }
+ print_sample_start(sample, thread, evsel);
+ perf_event__fprintf(event, stdout);
+ ret = 0;
+
+out:
+ return ret;
+}
+
+static int process_fork_event(struct perf_tool *tool,
+         union perf_event *event,
+         struct perf_sample *sample,
+         struct machine *machine)
+{
+ struct thread *thread;
+ struct perf_script *script = container_of(tool, struct perf_script, tool);
+ struct perf_session *session = script->session;
+ struct perf_evsel *evsel = perf_evlist__first(session->evlist);
+
+ if (perf_event__process_fork(tool, event, sample, machine) < 0)
+  return -1;
+
+ thread = machine__findnew_thread(machine, event->fork.pid, event->fork.tid);
+ if (thread == NULL) {
+  pr_debug("problem processing FORK event, skipping it.\n");
+  return -1;
+ }
+
+ if (!evsel->attr.sample_id_all) {
+  sample->cpu = 0;
+  sample->time = event->fork.time;
+  sample->tid = event->fork.tid;
+  sample->pid = event->fork.pid;
+ }
+ print_sample_start(sample, thread, evsel);
+ perf_event__fprintf(event, stdout);
+
+ return 0;
+}
+static int process_exit_event(struct perf_tool *tool,
+         union perf_event *event,
+         struct perf_sample *sample,
+         struct machine *machine)
+{
+ struct thread *thread;
+ struct perf_script *script = container_of(tool, struct perf_script, tool);
+ struct perf_session *session = script->session;
+ struct perf_evsel *evsel = perf_evlist__first(session->evlist);
+
+ thread = machine__findnew_thread(machine, event->fork.pid, event->fork.tid);
+ if (thread == NULL) {
+  pr_debug("problem processing EXIT event, skipping it.\n");
+  return -1;
+ }
+
+ if (!evsel->attr.sample_id_all) {
+  sample->cpu = 0;
+  sample->time = 0;
+  sample->tid = event->comm.tid;
+  sample->pid = event->comm.pid;
+ }
+ print_sample_start(sample, thread, evsel);
+ perf_event__fprintf(event, stdout);
+
+ if (perf_event__process_exit(tool, event, sample, machine) < 0)
+  return -1;
+
+ return 0;
+}
+
 static void sig_handler(int sig __maybe_unused)
 {
  session_done = 1;
@@ -613,6 +709,13 @@ static int __cmd_script(struct perf_script *script)
 
  signal(SIGINT, sig_handler);
 
+ /* override event processing functions */
+ if (script->show_task_events) {
+  script->tool.comm = process_comm_event;
+  script->tool.fork = process_fork_event;
+  script->tool.exit = process_exit_event;
+ }
+
  ret = perf_session__process_events(script->session, &script->tool);
 
  if (debug_mode)
@@ -1375,6 +1478,8 @@ int cmd_script(int argc, const char **argv, const char *prefix __maybe_unused)
       "display extended information from perf.data file"),
  OPT_BOOLEAN('\0', "show-kernel-path", &symbol_conf.show_kernel_path,
       "Show the path of [kernel.kallsyms]"),
+ OPT_BOOLEAN('\0', "show-task-events", &script.show_task_events,
+      "Show the fork/comm/exit events"),
  OPT_END()
  };
  const char * const script_usage[] = {
-- 
1.7.1