From 6cc858f9a9cb3160e64a49d0e57e8ef44faf5426 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:10 -0400
Subject: [cpufreq] intel_pstate: add sample time scaling

Message-id: <1409235879-1283-157-git-send-email-prarit@redhat.com>
Patchwork-id: 89491
O-Subject: [RHEL7.1 PATCH BZ 1134639 156/185] intel_pstate: add sample time scaling
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit c4ee841f602e5eef8eab673295c49c5b49d7732b
Author: Dirk Brandewie <dirk.j.brandewie@intel.com>
Date:   Thu May 29 09:32:24 2014 -0700

    intel_pstate: add sample time scaling

    The PID assumes that samples are of equal time, which for a deferable
    timers this is not true when the system goes idle.  This causes the
    PID to take a long time to converge to the min P state and depending
    on the pattern of the idle load can make the P state appear stuck.

    The hold-off value of three sample times before using the scaling is
    to give a grace period for applications that have high performance
    requirements and spend a lot of time idle,  The poster child for this
    behavior is the ffmpeg benchmark in the Phoronix test suite.

    Cc: 3.14+ <stable@vger.kernel.org> # 3.14+
    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index ffef765..32fe188 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -58,6 +58,7 @@ struct sample {
  u64 aperf;
  u64 mperf;
  int freq;
+ ktime_t time;
 };
 
 struct pstate_data {
@@ -93,6 +94,7 @@ struct cpudata {
  struct vid_data vid;
  struct _pid pid;
 
+ ktime_t last_sample_time;
  u64 prev_aperf;
  u64 prev_mperf;
  struct sample sample;
@@ -574,6 +576,8 @@ static inline void intel_pstate_sample(struct cpudata *cpu)
  aperf = aperf >> FRAC_BITS;
  mperf = mperf >> FRAC_BITS;
 
+ cpu->last_sample_time = cpu->sample.time;
+ cpu->sample.time = ktime_get();
  cpu->sample.aperf = aperf;
  cpu->sample.mperf = mperf;
  cpu->sample.aperf -= cpu->prev_aperf;
@@ -596,12 +600,24 @@ static inline void intel_pstate_set_sample_time(struct cpudata *cpu)
 
 static inline int32_t intel_pstate_get_scaled_busy(struct cpudata *cpu)
 {
- int32_t core_busy, max_pstate, current_pstate;
+ int32_t core_busy, max_pstate, current_pstate, sample_ratio;
+ u32 duration_us;
+ u32 sample_time;
 
  core_busy = cpu->sample.core_pct_busy;
  max_pstate = int_tofp(cpu->pstate.max_pstate);
  current_pstate = int_tofp(cpu->pstate.current_pstate);
  core_busy = mul_fp(core_busy, div_fp(max_pstate, current_pstate));
+
+ sample_time = (pid_params.sample_rate_ms  * USEC_PER_MSEC);
+ duration_us = (u32) ktime_us_delta(cpu->sample.time,
+     cpu->last_sample_time);
+ if (duration_us > sample_time * 3) {
+  sample_ratio = div_fp(int_tofp(sample_time),
+    int_tofp(duration_us));
+  core_busy = mul_fp(core_busy, sample_ratio);
+ }
+
  return FP_ROUNDUP(core_busy);
 }
 
-- 
1.7.1