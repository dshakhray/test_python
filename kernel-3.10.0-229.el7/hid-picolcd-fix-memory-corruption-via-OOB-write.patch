From bb46e2e5e124a6628e028294b46192a0ae6a6e71 Mon Sep 17 00:00:00 2001
From: Jacob Tanenbaum <jtanenba@redhat.com>
Date: Thu, 25 Sep 2014 13:27:36 -0400
Subject: [hid] picolcd: fix memory corruption via OOB write

Message-id: <1411651656-12339-1-git-send-email-jtanenba@redhat.com>
Patchwork-id: 96722
O-Subject: [RHEL7 PATCH BZ1141409 CVE-2014-3186] Kernel: HID: memory corruption via OOB write
Bugzilla: 1141409
CVE: CVE-2014-3186
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Linux kernel built with the Human Interface Device(HID) Bus support(CONFIG_HID)
along with a driver for Minibox PicoLCD devices support(CONFIG_HID_PICOLCD),
is vulnerable to an OOB write flaw. It could occur if a device offers an HID
report with arbitrary(>64) data size value.

A local user with physical access to the system could use this flaw to crash
the system resulting in DoS or potentially, escalate their privileges on the
system.

Backport of the following:
commit 844817e47eef14141cf59b8d5ac08dd11c0a9189
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Aug 27 09:13:15 2014 +0200

HID: picolcd: sanity check report size in raw_event() callback

The report passed to us from transport driver could potentially be
arbitrarily large, therefore we better sanity-check it so that raw_data
that we hold in picolcd_pending structure are always kept within proper
bounds.

BUGZILLA: https://bugzilla.redhat.com/show_bug.cgi?id=1141409
BREW: https://brewweb.devel.redhat.com/taskinfo?taskID=8005071
BEAKER: https://beaker.engineering.redhat.com/jobs/756384

No issues seen in Brew build or Beaker tests. It is a known issue that
test case "/kernel/RHEL7/perf/sanity/test" fails sporadically.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/hid/hid-picolcd_core.c b/drivers/hid/hid-picolcd_core.c
index acbb021..020df3c 100644
--- a/drivers/hid/hid-picolcd_core.c
+++ b/drivers/hid/hid-picolcd_core.c
@@ -350,6 +350,12 @@ static int picolcd_raw_event(struct hid_device *hdev,
  if (!data)
   return 1;
 
+ if (size > 64) {
+  hid_warn(hdev, "invalid size value (%d) for picolcd raw event\n",
+    size);
+  return 0;
+ }
+
  if (report->id == REPORT_KEY_STATE) {
   if (data->input_keys)
    ret = picolcd_raw_keypad(data, report, raw_data+1, size-1);
-- 
1.7.1