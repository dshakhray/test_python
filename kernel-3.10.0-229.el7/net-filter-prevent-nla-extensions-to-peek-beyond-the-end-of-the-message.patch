From 5b8a71c1e9a9e1462de133cc59cd6f2e913a20e7 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Wed, 28 May 2014 15:41:57 -0400
Subject: [net] filter: prevent nla extensions to peek beyond the end of the message

Message-id: <031e8bad35a69c034531ac0a0abfdc1df8e044fb.1401291690.git.jbenc@redhat.com>
Patchwork-id: 81022
O-Subject: [RHEL7.1 net PATCH] filter: prevent nla extensions to peek beyond the end of the message
Bugzilla: 1096781
CVE: CVE-2014-3144 CVE-2014-3145
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1096781
CVE-2014-3144, CVE-2014-3145
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7510406
Tested: using a reproducer with the first and second BPF below

RHEL changes: different location of the checks.

commit 05ab8f2647e4221cbdb3856dd7d32bd5407316b3
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 13 18:23:33 2014 +0200

    filter: prevent nla extensions to peek beyond the end of the message

    The BPF_S_ANC_NLATTR and BPF_S_ANC_NLATTR_NEST extensions fail to check
    for a minimal message length before testing the supplied offset to be
    within the bounds of the message. This allows the subtraction of the nla
    header to underflow and therefore -- as the data type is unsigned --
    allowing far to big offset and length values for the search of the
    netlink attribute.

    The remainder calculation for the BPF_S_ANC_NLATTR_NEST extension is
    also wrong. It has the minuend and subtrahend mixed up, therefore
    calculates a huge length value, allowing to overrun the end of the
    message while looking for the netlink attribute.

    The following three BPF snippets will trigger the bugs when attached to
    a UNIX datagram socket and parsing a message with length 1, 2 or 3.

     ,-[ PoC for missing size check in BPF_S_ANC_NLATTR ]--
     | ld #0x87654321
     | ldx #42
     | ld #nla
     | ret a
     `---

     ,-[ PoC for the same bug in BPF_S_ANC_NLATTR_NEST ]--
     | ld #0x87654321
     | ldx #42
     | ld #nlan
     | ret a
     `---

     ,-[ PoC for wrong remainder calculation in BPF_S_ANC_NLATTR_NEST ]--
     | ; (needs a fake netlink header at offset 0)
     | ld #0
     | ldx #42
     | ld #nlan
     | ret a
     `---

    Fix the first issue by ensuring the message length fulfills the minimal
    size constrains of a nla header. Fix the second bug by getting the math
    for the remainder calculation right.

    Fixes: 4738c1db15 ("[SKFILTER]: Add SKF_ADF_NLATTR instruction")
    Fixes: d214c7537b ("filter: add SKF_AD_NLATTR_NEST to look for nested..")
    Cc: Patrick McHardy <kaber@trash.net>
    Cc: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Acked-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/core/filter.c b/net/core/filter.c
index 6438f29..93c034e 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -356,6 +356,10 @@ load_b:
 
    if (skb_is_nonlinear(skb))
     return 0;
+
+   if (skb->len < sizeof(struct nlattr))
+    return 0;
+
    if (A > skb->len - sizeof(struct nlattr))
     return 0;
 
@@ -372,11 +376,15 @@ load_b:
 
    if (skb_is_nonlinear(skb))
     return 0;
+
+   if (skb->len < sizeof(struct nlattr))
+    return 0;
+
    if (A > skb->len - sizeof(struct nlattr))
     return 0;
 
    nla = (struct nlattr *)&skb->data[A];
-   if (nla->nla_len > A - skb->len)
+   if (nla->nla_len > skb->len - A)
     return 0;
 
    nla = nla_find_nested(nla, X);
-- 
1.7.1