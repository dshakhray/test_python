From 89c3898d0ad15511f5fcd6f91e8e2672f4f7a431 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:22:05 -0400
Subject: [cpufreq] Don't use smp_processor_id() in preemptible context

Message-id: <1409235879-1283-32-git-send-email-prarit@redhat.com>
Patchwork-id: 89402
O-Subject: [RHEL7.1 PATCH BZ 1134639 031/185] cpufreq: Don't use smp_processor_id() in preemptible context
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 6932078376e2c1fd49b6c4aa41cc5e162ee83d8a
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Aug 28 14:24:45 2013 -0700

    cpufreq: Don't use smp_processor_id() in preemptible context

    Workqueues are preemptible even if works are queued on them with
    queue_work_on(). Let's use raw_smp_processor_id() here to silence
    the warning.

    BUG: using smp_processor_id() in preemptible [00000000] code: kworker/3:2/674
    caller is gov_queue_work+0x28/0xb0
    CPU: 0 PID: 674 Comm: kworker/3:2 Tainted: G        W    3.10.0 #30
    Workqueue: events od_dbs_timer
    [<c010c178>] (unwind_backtrace+0x0/0x11c) from [<c0109dec>] (show_stack+0x10/0x14)
    [<c0109dec>] (show_stack+0x10/0x14) from [<c03885a4>] (debug_smp_processor_id+0xbc/0xf0)
    [<c03885a4>] (debug_smp_processor_id+0xbc/0xf0) from [<c0635864>] (gov_queue_work+0x28/0xb0)
    [<c0635864>] (gov_queue_work+0x28/0xb0) from [<c0635618>] (od_dbs_timer+0x108/0x134)
    [<c0635618>] (od_dbs_timer+0x108/0x134) from [<c01aa8f8>] (process_one_work+0x25c/0x444)
    [<c01aa8f8>] (process_one_work+0x25c/0x444) from [<c01aaf88>] (worker_thread+0x200/0x344)
    [<c01aaf88>] (worker_thread+0x200/0x344) from [<c01b03bc>] (kthread+0xa0/0xb0)
    [<c01b03bc>] (kthread+0xa0/0xb0) from [<c01061b8>] (ret_from_fork+0x14/0x3c)

    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq_governor.c b/drivers/cpufreq/cpufreq_governor.c
index 0e5929b..0806c31 100644
--- a/drivers/cpufreq/cpufreq_governor.c
+++ b/drivers/cpufreq/cpufreq_governor.c
@@ -123,7 +123,14 @@ void gov_queue_work(struct dbs_data *dbs_data, struct cpufreq_policy *policy,
   return;
 
  if (!all_cpus) {
-  __gov_queue_work(smp_processor_id(), dbs_data, delay);
+  /*
+   * Use raw_smp_processor_id() to avoid preemptible warnings.
+   * We know that this is only called with all_cpus == false from
+   * works that have been queued with *_work_on() functions and
+   * those works are canceled during CPU_DOWN_PREPARE so they
+   * can't possibly run on any other CPU.
+   */
+  __gov_queue_work(raw_smp_processor_id(), dbs_data, delay);
  } else {
   for_each_cpu(i, policy->cpus)
    __gov_queue_work(i, dbs_data, delay);
-- 
1.7.1