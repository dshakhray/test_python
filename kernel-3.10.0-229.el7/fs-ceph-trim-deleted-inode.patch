From 3596c527c6e0e742b084a8529376dca0eefaf81b Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:22:24 -0400
Subject: [fs] ceph: trim deleted inode
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-38-git-send-email-sweil@redhat.com>
Patchwork-id: 89552
O-Subject: [PATCH 037/303] ceph: trim deleted inode
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Yan, Zheng" <zheng.z.yan@intel.com>

The MDS uses caps message to notify clients about deleted inode.
when receiving a such message, invalidate any alias of the inode.
This makes the kernel release the inode ASAP.

Signed-off-by: Yan, Zheng <zheng.z.yan@intel.com>
Reviewed-by: Sage Weil <sage@inktank.com>
(cherry picked from commit ca20c991917ef6a98d6b40184fefe981727d9328)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ceph/caps.c b/fs/ceph/caps.c
index 25442b4..430121a 100644
--- a/fs/ceph/caps.c
+++ b/fs/ceph/caps.c
@@ -2334,6 +2334,38 @@ void ceph_put_wrbuffer_cap_refs(struct ceph_inode_info *ci, int nr,
 }
 
 /*
+ * Invalidate unlinked inode's aliases, so we can drop the inode ASAP.
+ */
+static void invalidate_aliases(struct inode *inode)
+{
+ struct dentry *dn, *prev = NULL;
+
+ dout("invalidate_aliases inode %p\n", inode);
+ d_prune_aliases(inode);
+ /*
+  * For non-directory inode, d_find_alias() only returns
+  * connected dentry. After calling d_delete(), the dentry
+  * become disconnected.
+  *
+  * For directory inode, d_find_alias() only can return
+  * disconnected dentry. But directory inode should have
+  * one alias at most.
+  */
+ while ((dn = d_find_alias(inode))) {
+  if (dn == prev) {
+   dput(dn);
+   break;
+  }
+  d_delete(dn);
+  if (prev)
+   dput(prev);
+  prev = dn;
+ }
+ if (prev)
+  dput(prev);
+}
+
+/*
  * Handle a cap GRANT message from the MDS.  (Note that a GRANT may
  * actually be a revocation if it specifies a smaller cap set.)
  *
@@ -2363,6 +2395,7 @@ static void handle_cap_grant(struct inode *inode, struct ceph_mds_caps *grant,
  int writeback = 0;
  int revoked_rdcache = 0;
  int queue_invalidate = 0;
+ int deleted_inode = 0;
 
  dout("handle_cap_grant inode %p cap %p mds%d seq %d %s\n",
       inode, cap, mds, seq, ceph_cap_string(newcaps));
@@ -2407,8 +2440,12 @@ static void handle_cap_grant(struct inode *inode, struct ceph_mds_caps *grant,
        from_kgid(&init_user_ns, inode->i_gid));
  }
 
- if ((issued & CEPH_CAP_LINK_EXCL) == 0)
+ if ((issued & CEPH_CAP_LINK_EXCL) == 0) {
   set_nlink(inode, le32_to_cpu(grant->nlink));
+  if (inode->i_nlink == 0 &&
+      (newcaps & (CEPH_CAP_LINK_SHARED | CEPH_CAP_LINK_EXCL)))
+   deleted_inode = 1;
+ }
 
  if ((issued & CEPH_CAP_XATTR_EXCL) == 0 && grant->xattr_len) {
   int len = le32_to_cpu(grant->xattr_len);
@@ -2517,6 +2554,8 @@ static void handle_cap_grant(struct inode *inode, struct ceph_mds_caps *grant,
   ceph_queue_writeback(inode);
  if (queue_invalidate)
   ceph_queue_invalidate(inode);
+ if (deleted_inode)
+  invalidate_aliases(inode);
  if (wake)
   wake_up_all(&ci->i_cap_wq);
 
-- 
1.7.1