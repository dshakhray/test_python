From 0b963a3334e55bac0e9f71a9c64aa1a4fc46af21 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:07:28 -0400
Subject: [powerpc] powernv: Machine check exception handling

Message-id: <1410545655-205645-220-git-send-email-dzickus@redhat.com>
Patchwork-id: 94201
O-Subject: [RHEL7 PATCH 219/626] powerpc/powernv: Machine check exception handling.
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit b63a0ffe35de7e5f9b907bbc2c783e702f7e15af
Author: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
Date:   Wed Oct 30 20:06:13 2013 +0530

    powerpc/powernv: Machine check exception handling.

    Add basic error handling in machine check exception handler.

    - If MSR_RI isn't set, we can not recover.
    - Check if disposition set to OpalMCE_DISPOSITION_RECOVERED.
    - Check if address at fault is inside kernel address space, if not then send
      SIGBUS to process if we hit exception when in userspace.
    - If address at fault is not provided then and if we get a synchronous machine
      check while in userspace then kill the task.

    Signed-off-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/mce.h b/arch/powerpc/include/asm/mce.h
index 3276b40..a2b8c7b 100644
--- a/arch/powerpc/include/asm/mce.h
+++ b/arch/powerpc/include/asm/mce.h
@@ -193,5 +193,6 @@ extern void release_mce_event(void);
 extern void machine_check_queue_event(void);
 extern void machine_check_process_queued_event(void);
 extern void machine_check_print_event_info(struct machine_check_event *evt);
+extern uint64_t get_mce_fault_addr(struct machine_check_event *evt);
 
 #endif /* __ASM_PPC64_MCE_H__ */
diff --git a/arch/powerpc/kernel/mce.c b/arch/powerpc/kernel/mce.c
index 1c6d157..c0c52ec 100644
--- a/arch/powerpc/kernel/mce.c
+++ b/arch/powerpc/kernel/mce.c
@@ -316,3 +316,30 @@ void machine_check_print_event_info(struct machine_check_event *evt)
   break;
  }
 }
+
+uint64_t get_mce_fault_addr(struct machine_check_event *evt)
+{
+ switch (evt->error_type) {
+ case MCE_ERROR_TYPE_UE:
+  if (evt->u.ue_error.effective_address_provided)
+   return evt->u.ue_error.effective_address;
+  break;
+ case MCE_ERROR_TYPE_SLB:
+  if (evt->u.slb_error.effective_address_provided)
+   return evt->u.slb_error.effective_address;
+  break;
+ case MCE_ERROR_TYPE_ERAT:
+  if (evt->u.erat_error.effective_address_provided)
+   return evt->u.erat_error.effective_address;
+  break;
+ case MCE_ERROR_TYPE_TLB:
+  if (evt->u.tlb_error.effective_address_provided)
+   return evt->u.tlb_error.effective_address;
+  break;
+ default:
+ case MCE_ERROR_TYPE_UNKNOWN:
+  break;
+ }
+ return 0;
+}
+EXPORT_SYMBOL(get_mce_fault_addr);
diff --git a/arch/powerpc/platforms/powernv/opal.c b/arch/powerpc/platforms/powernv/opal.c
index f348bd4..01e74cb 100644
--- a/arch/powerpc/platforms/powernv/opal.c
+++ b/arch/powerpc/platforms/powernv/opal.c
@@ -18,6 +18,7 @@
 #include <linux/interrupt.h>
 #include <linux/notifier.h>
 #include <linux/slab.h>
+#include <linux/sched.h>
 #include <linux/kobject.h>
 #include <asm/opal.h>
 #include <asm/firmware.h>
@@ -251,6 +252,44 @@ int opal_put_chars(uint32_t vtermno, const char *data, int total_len)
  return written;
 }
 
+static int opal_recover_mce(struct pt_regs *regs,
+     struct machine_check_event *evt)
+{
+ int recovered = 0;
+ uint64_t ea = get_mce_fault_addr(evt);
+
+ if (!(regs->msr & MSR_RI)) {
+  /* If MSR_RI isn't set, we cannot recover */
+  recovered = 0;
+ } else if (evt->disposition == MCE_DISPOSITION_RECOVERED) {
+  /* Platform corrected itself */
+  recovered = 1;
+ } else if (ea && !is_kernel_addr(ea)) {
+  /*
+   * Faulting address is not in kernel text. We should be fine.
+   * We need to find which process uses this address.
+   * For now, kill the task if we have received exception when
+   * in userspace.
+   *
+   * TODO: Queue up this address for hwpoisioning later.
+   */
+  if (user_mode(regs) && !is_global_init(current)) {
+   _exception(SIGBUS, regs, BUS_MCEERR_AR, regs->nip);
+   recovered = 1;
+  } else
+   recovered = 0;
+ } else if (user_mode(regs) && !is_global_init(current) &&
+  evt->severity == MCE_SEV_ERROR_SYNC) {
+  /*
+   * If we have received a synchronous error when in userspace
+   * kill the task.
+   */
+  _exception(SIGBUS, regs, BUS_MCEERR_AR, regs->nip);
+  recovered = 1;
+ }
+ return recovered;
+}
+
 int opal_machine_check(struct pt_regs *regs)
 {
  struct machine_check_event evt;
@@ -266,7 +305,9 @@ int opal_machine_check(struct pt_regs *regs)
  }
  machine_check_print_event_info(&evt);
 
- return evt.severity == MCE_SEV_FATAL ? 0 : 1;
+ if (opal_recover_mce(regs, &evt))
+  return 1;
+ return 0;
 }
 
 static irqreturn_t opal_interrupt(int irq, void *data)
-- 
1.7.1