From 6b2124c17f63ad3f96875f828fc8b3a5dc3a3a54 Mon Sep 17 00:00:00 2001
From: Vivek Goyal <vgoyal@redhat.com>
Date: Fri, 5 Sep 2014 18:55:44 -0400
Subject: [asm] crash: Remove the original asm/crash.h files

Message-id: <1409943373-12669-10-git-send-email-vgoyal@redhat.com>
Patchwork-id: 91505
O-Subject: [RHEL7.1 PATCH 09/38] crash: Remove the original asm/crash.h files
Bugzilla: 852066
RH-Acked-by: Dave Anderson <anderson@redhat.com>
RH-Acked-by: Baoquan He <bhe@redhat.com>
RH-Acked-by: Dave Young <dyoung@redhat.com>
RH-Acked-by: Chao WANG <chaowang@redhat.com>

BZ:852066

Remove the original asm/crash.h files.

Signed-off-by: Dave Anderson <anderson@redhat.com>
---
 delete mode 100644 arch/powerpc/include/asm/crash.h
 delete mode 100644 arch/s390/include/asm/crash.h
 delete mode 100644 arch/x86/include/asm/crash.h

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/crash.h b/arch/powerpc/include/asm/crash.h
deleted file mode 100644
index ec04140..0000000
--- a/arch/powerpc/include/asm/crash.h
+++ /dev/null
@@ -1,51 +0,0 @@
-#ifndef _PPC64_CRASH_H
-#define _PPC64_CRASH_H
-
-#ifdef __KERNEL__
-
-#include <linux/mm.h>
-#include <linux/highmem.h>
-
-
-static inline void *map_virtual(u64 offset, struct page **pp)
-{
- struct page *page;
- unsigned long pfn;
- void *vaddr;
-
- pfn = (unsigned long)(offset >> PAGE_SHIFT);
-
- if (!page_is_ram(pfn)) {
-  printk(KERN_INFO
-      "crash memory driver: !page_is_ram(pfn: %lx)\n", pfn);
-  return NULL;
- }
-
- if (!pfn_valid(pfn)) {
-  printk(KERN_INFO
-      "crash memory driver: invalid pfn: %lx )\n", pfn);
-  return NULL;
- }
-
- page = pfn_to_page(pfn);
-
- vaddr = kmap(page);
- if (!vaddr) {
-  printk(KERN_INFO
-      "crash memory driver: pfn: %lx kmap(page: %lx) failed\n",
-   pfn, (unsigned long) page);
-  return NULL;
- }
-
- *pp = page;
- return (vaddr + (offset & (PAGE_SIZE - 1)));
-}
-
-static inline void unmap_virtual(struct page *page)
-{
- kunmap(page);
-}
-
-#endif /* __KERNEL__ */
-
-#endif /* _PPC64_CRASH_H */
diff --git a/arch/s390/include/asm/crash.h b/arch/s390/include/asm/crash.h
deleted file mode 100644
index 900f417..0000000
--- a/arch/s390/include/asm/crash.h
+++ /dev/null
@@ -1,61 +0,0 @@
-#ifndef _S390_CRASH_H
-#define _S390_CRASH_H
-
-#ifdef __KERNEL__
-
-#include <linux/mm.h>
-#include <linux/highmem.h>
-
-
-/*
- * For swapped prefix pages get bounce buffer using xlate_dev_mem_ptr()
- */
-static inline void *map_virtual(u64 offset, struct page **pp)
-{
- struct page *page;
- unsigned long pfn;
- void *vaddr;
-
- vaddr = xlate_dev_mem_ptr(offset);
- pfn = ((unsigned long) vaddr) >> PAGE_SHIFT;
- if ((unsigned long) vaddr != offset)
-  page = pfn_to_page(pfn);
- else
-  page = NULL;
-
- if (!page_is_ram(pfn)) {
-  printk(KERN_INFO
-      "crash memory driver: !page_is_ram(pfn: %lx)\n", pfn);
-  return NULL;
- }
-
- if (!pfn_valid(pfn)) {
-  printk(KERN_INFO
-      "crash memory driver: invalid pfn: %lx )\n", pfn);
-  return NULL;
- }
-
- *pp = page;
- return vaddr;
-}
-
-/*
- * Free bounce buffer if necessary
- */
-static inline void unmap_virtual(struct page *page)
-{
- void *vaddr;
-
- if (page) {
-  /*
-   * Because for bounce buffers vaddr will never be 0
-   * unxlate_dev_mem_ptr() will always free the bounce buffer.
-   */
-  vaddr = (void *)(page_to_pfn(page) << PAGE_SHIFT);
-  unxlate_dev_mem_ptr(0, vaddr);
- }
-}
-
-#endif /* __KERNEL__ */
-
-#endif /* _S390_CRASH_H */
diff --git a/arch/x86/include/asm/crash.h b/arch/x86/include/asm/crash.h
deleted file mode 100644
index dfcc006..0000000
--- a/arch/x86/include/asm/crash.h
+++ /dev/null
@@ -1,75 +0,0 @@
-#ifndef _ASM_I386_CRASH_H
-#define _ASM_I386_CRASH_H
-
-/*
- * linux/include/asm-i386/crash.h
- *
- * Copyright (c) 2004 Red Hat, Inc. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
- *
- */
-
-#ifdef __KERNEL__
-
-#include <linux/mm.h>
-#include <linux/highmem.h>
-#include <asm/mmzone.h>
-
-extern int page_is_ram(unsigned long);
-
-static inline void *
-map_virtual(u64 offset, struct page **pp)
-{
- struct page *page;
- unsigned long pfn;
- void *vaddr;
-
- pfn = (unsigned long)(offset >> PAGE_SHIFT);
-
- if (!page_is_ram(pfn)) {
-  printk(KERN_INFO
-      "crash memory driver: !page_is_ram(pfn: %lx)\n", pfn);
-  return NULL;
- }
-
- if (!pfn_valid(pfn)) {
-  printk(KERN_INFO
-      "crash memory driver: invalid pfn: %lx )\n", pfn);
-  return NULL;
- }
-
- page = pfn_to_page(pfn);
-
- vaddr = kmap(page);
- if (!vaddr) {
-  printk(KERN_INFO
-      "crash memory driver: pfn: %lx kmap(page: %lx) failed\n", 
-   pfn, (unsigned long)page);
-  return NULL;
- }
-
- *pp = page;
- return (vaddr + (offset & (PAGE_SIZE-1)));
-}
-
-static inline void unmap_virtual(struct page *page) 
-{ 
- kunmap(page);
-}
-
-#endif /* __KERNEL__ */
-
-#endif /* _ASM_I386_CRASH_H */
-- 
1.7.1