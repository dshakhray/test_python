From 498adaeaa645ad16e190a904bed93cbdcc553b65 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Tue, 23 Sep 2014 19:02:06 -0400
Subject: [fs] nfsv4: Fix another bug in the close/open_downgrade code

Message-id: <1411498926-30119-4-git-send-email-steved@redhat.com>
Patchwork-id: 96500
O-Subject: [RHEL7.1 PATCH 3/3] NFSv4: Fix another bug in the close/open_downgrade code
Bugzilla: 1111708
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

James Drew reports another bug whereby the NFS client is now sending
an OPEN_DOWNGRADE in a situation where it should really have sent a
CLOSE: the client is opening the file for O_RDWR, but then trying to
do a downgrade to O_RDONLY, which is not allowed by the NFSv4 spec.

Reported-by: James Drews <drews@engr.wisc.edu>
Link: http://lkml.kernel.org/r/541AD7E5.8020409@engr.wisc.edu
Fixes: aee7af356e15 (NFSv4: Fix problems with close in the presence...)
Cc: stable@vger.kernel.org # 2.6.33+
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: cd9288ffaea4359d5cfe2b8d264911506aed26a4
Bugzilla: 1111708
---
 fs/nfs/nfs4proc.c | 30 +++++++++++++++---------------
 1 file changed, 15 insertions(+), 15 deletions(-)

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 21b4e5d..c8b5e09 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -2618,23 +2618,23 @@ static void nfs4_close_prepare(struct rpc_task *task, void *data)
  is_rdwr = test_bit(NFS_O_RDWR_STATE, &state->flags);
  is_rdonly = test_bit(NFS_O_RDONLY_STATE, &state->flags);
  is_wronly = test_bit(NFS_O_WRONLY_STATE, &state->flags);
- /* Calculate the current open share mode */
- calldata->arg.fmode = 0;
- if (is_rdonly || is_rdwr)
-  calldata->arg.fmode |= FMODE_READ;
- if (is_wronly || is_rdwr)
-  calldata->arg.fmode |= FMODE_WRITE;
  /* Calculate the change in open mode */
+ calldata->arg.fmode = 0;
  if (state->n_rdwr == 0) {
-  if (state->n_rdonly == 0) {
-   call_close |= is_rdonly || is_rdwr;
-   calldata->arg.fmode &= ~FMODE_READ;
-  }
-  if (state->n_wronly == 0) {
-   call_close |= is_wronly || is_rdwr;
-   calldata->arg.fmode &= ~FMODE_WRITE;
-  }
- }
+  if (state->n_rdonly == 0)
+   call_close |= is_rdonly;
+  else if (is_rdonly)
+   calldata->arg.fmode |= FMODE_READ;
+  if (state->n_wronly == 0)
+   call_close |= is_wronly;
+  else if (is_wronly)
+   calldata->arg.fmode |= FMODE_WRITE;
+ } else if (is_rdwr)
+  calldata->arg.fmode |= FMODE_READ|FMODE_WRITE;
+
+ if (calldata->arg.fmode == 0)
+  call_close |= is_rdwr;
+
  if (!nfs4_valid_open_stateid(state))
   call_close = 0;
  spin_unlock(&state->owner->so_lock);
-- 
1.7.1