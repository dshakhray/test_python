From bb1849fcab6be276700361880d0e178032c701a2 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Wed, 29 Oct 2014 16:33:52 -0400
Subject: [fs] ext4: add a new spinlock i_raw_lock to protect the ext4's raw inode

Message-id: <1414600485-1929-3-git-send-email-lczerner@redhat.com>
Patchwork-id: 98521
O-Subject: [RHEL 7.1 PATCH v2 02/55] ext4: add a new spinlock i_raw_lock to protect the ext4's raw inode
Bugzilla: 1156096
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1156096
https://bugzilla.redhat.com/show_bug.cgi?id=1156096

BREW 8169722
https://brewweb.devel.redhat.com/taskinfo?taskID=8169722

Upstream commit 202ee5df38b33f7ea28286807a0b548b49613194

 To avoid potential data races, use a spinlock which protects the raw
 (on-disk) inode.

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Reviewed-by: Jan Kara <jack@suse.cz>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index a2c809e..bc64313 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -878,6 +878,8 @@ struct ext4_inode_info {
  struct inode vfs_inode;
  struct jbd2_inode *jinode;
 
+ spinlock_t i_raw_lock; /* protects updates to the raw inode */
+
  /*
   * File creation time. Its function is same as that of
   * struct timespec i_{a,c,m}time in the generic inode.
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 56cd1aa..b6a8da0 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -4314,12 +4314,15 @@ static int ext4_do_update_inode(handle_t *handle,
  struct ext4_inode *raw_inode = ext4_raw_inode(iloc);
  struct ext4_inode_info *ei = EXT4_I(inode);
  struct buffer_head *bh = iloc->bh;
+ struct super_block *sb = inode->i_sb;
  int err = 0, rc, block;
- int need_datasync = 0;
+ int need_datasync = 0, set_large_file = 0;
  uid_t i_uid;
  gid_t i_gid;
 
- /* For fields not not tracking in the in-memory inode,
+ spin_lock(&ei->i_raw_lock);
+
+ /* For fields not tracked in the in-memory inode,
   * initialise them to zero for new inodes. */
  if (ext4_test_inode_state(inode, EXT4_STATE_NEW))
   memset(raw_inode, 0, EXT4_SB(inode->i_sb)->s_inode_size);
@@ -4357,8 +4360,10 @@ static int ext4_do_update_inode(handle_t *handle,
  EXT4_INODE_SET_XTIME(i_atime, inode, raw_inode);
  EXT4_EINODE_SET_XTIME(i_crtime, ei, raw_inode);
 
- if (ext4_inode_blocks_set(handle, raw_inode, ei))
+ if (ext4_inode_blocks_set(handle, raw_inode, ei)) {
+  spin_unlock(&ei->i_raw_lock);
   goto out_brelse;
+ }
  raw_inode->i_dtime = cpu_to_le32(ei->i_dtime);
  raw_inode->i_flags = cpu_to_le32(ei->i_flags & 0xFFFFFFFF);
  if (likely(!test_opt2(inode->i_sb, HURD_COMPAT)))
@@ -4370,24 +4375,11 @@ static int ext4_do_update_inode(handle_t *handle,
   need_datasync = 1;
  }
  if (ei->i_disksize > 0x7fffffffULL) {
-  struct super_block *sb = inode->i_sb;
   if (!EXT4_HAS_RO_COMPAT_FEATURE(sb,
     EXT4_FEATURE_RO_COMPAT_LARGE_FILE) ||
     EXT4_SB(sb)->s_es->s_rev_level ==
-    cpu_to_le32(EXT4_GOOD_OLD_REV)) {
-   /* If this is the first large file
-    * created, add a flag to the superblock.
-    */
-   err = ext4_journal_get_write_access(handle,
-     EXT4_SB(sb)->s_sbh);
-   if (err)
-    goto out_brelse;
-   ext4_update_dynamic_rev(sb);
-   EXT4_SET_RO_COMPAT_FEATURE(sb,
-     EXT4_FEATURE_RO_COMPAT_LARGE_FILE);
-   ext4_handle_sync(handle);
-   err = ext4_handle_dirty_super(handle, sb);
-  }
+      cpu_to_le32(EXT4_GOOD_OLD_REV))
+   set_large_file = 1;
  }
  raw_inode->i_generation = cpu_to_le32(inode->i_generation);
  if (S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode)) {
@@ -4419,12 +4411,23 @@ static int ext4_do_update_inode(handle_t *handle,
 
  ext4_inode_csum_set(inode, raw_inode, ei);
 
+ spin_unlock(&ei->i_raw_lock);
+
  BUFFER_TRACE(bh, "call ext4_handle_dirty_metadata");
  rc = ext4_handle_dirty_metadata(handle, NULL, bh);
  if (!err)
   err = rc;
  ext4_clear_inode_state(inode, EXT4_STATE_NEW);
-
+ if (set_large_file) {
+  err = ext4_journal_get_write_access(handle, EXT4_SB(sb)->s_sbh);
+  if (err)
+   goto out_brelse;
+  ext4_update_dynamic_rev(sb);
+  EXT4_SET_RO_COMPAT_FEATURE(sb,
+        EXT4_FEATURE_RO_COMPAT_LARGE_FILE);
+  ext4_handle_sync(handle);
+  err = ext4_handle_dirty_super(handle, sb);
+ }
  ext4_update_inode_fsync_trans(handle, inode, need_datasync);
 out_brelse:
  brelse(bh);
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index e44c048..00c701e 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -876,6 +876,7 @@ static struct inode *ext4_alloc_inode(struct super_block *sb)
   return NULL;
 
  ei->vfs_inode.i_version = 1;
+ spin_lock_init(&ei->i_raw_lock);
  INIT_LIST_HEAD(&ei->i_prealloc_list);
  spin_lock_init(&ei->i_prealloc_lock);
  ext4_es_init_tree(&ei->i_es_tree);
-- 
1.7.1