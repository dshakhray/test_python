From f721b1e250ccaf1164199723cd2f8909a07dcd71 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:05:18 -0400
Subject: [base] introduce help macro to_memory_block

Message-id: <20140710010518.22146.89619.stgit@gir.stowe>
Patchwork-id: 85607
O-Subject: [RHEL7.1 PATCH 068/105] drivers/base/memory.c: introduce help macro to_memory_block
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 7315f0ccfc283ae998ca4d8102de83bba21936fa

commit 7315f0ccfc283ae998ca4d8102de83bba21936fa
Author: Gu Zheng <guz.fnst@cn.fujitsu.com>
Date:   Wed Aug 28 14:38:27 2013 +0800

    drivers/base/memory.c: introduce help macro to_memory_block

    Introduce help macro to_memory_block to hide the conversion(device-->memory_
    just clean up.

    Reviewed-by: Yasuaki Ishimatsu  <isimatu.yasuaki@jp.fujitsu.com>
    Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/base/memory.c b/drivers/base/memory.c
index 6084869..1c61762 100644
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@ -29,6 +29,8 @@ static DEFINE_MUTEX(mem_sysfs_mutex);
 
 #define MEMORY_CLASS_NAME "memory"
 
+#define to_memory_block(dev) container_of(dev, struct memory_block, dev)
+
 static int sections_per_block;
 
 static inline int base_memory_block_id(int section_nr)
@@ -76,7 +78,7 @@ EXPORT_SYMBOL(unregister_memory_isolate_notifier);
 
 static void memory_block_release(struct device *dev)
 {
- struct memory_block *mem = container_of(dev, struct memory_block, dev);
+ struct memory_block *mem = to_memory_block(dev);
 
  kfree(mem);
 }
@@ -109,8 +111,7 @@ static unsigned long get_memory_block_size(void)
 static ssize_t show_mem_start_phys_index(struct device *dev,
    struct device_attribute *attr, char *buf)
 {
- struct memory_block *mem =
-  container_of(dev, struct memory_block, dev);
+ struct memory_block *mem = to_memory_block(dev);
  unsigned long phys_index;
 
  phys_index = mem->start_section_nr / sections_per_block;
@@ -120,8 +121,7 @@ static ssize_t show_mem_start_phys_index(struct device *dev,
 static ssize_t show_mem_end_phys_index(struct device *dev,
    struct device_attribute *attr, char *buf)
 {
- struct memory_block *mem =
-  container_of(dev, struct memory_block, dev);
+ struct memory_block *mem = to_memory_block(dev);
  unsigned long phys_index;
 
  phys_index = mem->end_section_nr / sections_per_block;
@@ -136,8 +136,7 @@ static ssize_t show_mem_removable(struct device *dev,
 {
  unsigned long i, pfn;
  int ret = 1;
- struct memory_block *mem =
-  container_of(dev, struct memory_block, dev);
+ struct memory_block *mem = to_memory_block(dev);
 
  for (i = 0; i < sections_per_block; i++) {
   if (!present_section_nr(mem->start_section_nr + i))
@@ -155,8 +154,7 @@ static ssize_t show_mem_removable(struct device *dev,
 static ssize_t show_mem_state(struct device *dev,
    struct device_attribute *attr, char *buf)
 {
- struct memory_block *mem =
-  container_of(dev, struct memory_block, dev);
+ struct memory_block *mem = to_memory_block(dev);
  ssize_t len = 0;
 
  /*
@@ -284,7 +282,7 @@ static int memory_block_change_state(struct memory_block *mem,
 /* The device lock serializes operations on memory_subsys_[online|offline] */
 static int memory_subsys_online(struct device *dev)
 {
- struct memory_block *mem = container_of(dev, struct memory_block, dev);
+ struct memory_block *mem = to_memory_block(dev);
  int ret;
 
  if (mem->state == MEM_ONLINE)
@@ -308,7 +306,7 @@ static int memory_subsys_online(struct device *dev)
 
 static int memory_subsys_offline(struct device *dev)
 {
- struct memory_block *mem = container_of(dev, struct memory_block, dev);
+ struct memory_block *mem = to_memory_block(dev);
 
  if (mem->state == MEM_OFFLINE)
   return 0;
@@ -320,11 +318,9 @@ static ssize_t
 store_mem_state(struct device *dev,
   struct device_attribute *attr, const char *buf, size_t count)
 {
- struct memory_block *mem;
+ struct memory_block *mem = to_memory_block(dev);
  int ret, online_type;
 
- mem = container_of(dev, struct memory_block, dev);
-
  lock_device_hotplug();
 
  if (!strncmp(buf, "online_kernel", min_t(int, count, 13)))
@@ -378,8 +374,7 @@ store_mem_state(struct device *dev,
 static ssize_t show_phys_device(struct device *dev,
     struct device_attribute *attr, char *buf)
 {
- struct memory_block *mem =
-  container_of(dev, struct memory_block, dev);
+ struct memory_block *mem = to_memory_block(dev);
  return sprintf(buf, "%d\n", mem->phys_device);
 }
 
@@ -511,7 +506,7 @@ struct memory_block *find_memory_block_hinted(struct mem_section *section,
   put_device(&hint->dev);
  if (!dev)
   return NULL;
- return container_of(dev, struct memory_block, dev);
+ return to_memory_block(dev);
 }
 
 /*
-- 
1.7.1