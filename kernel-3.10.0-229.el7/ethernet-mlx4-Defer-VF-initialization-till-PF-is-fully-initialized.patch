From 02c73db7599ae882788ccd9199a411191884e835 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 12:00:40 -0400
Subject: [ethernet] mlx4: Defer VF initialization till PF is fully initialized

Message-id: <86e34e598e3c29db6790dcdae33b939976f65025.1410425016.git.avadai@redhat.com>
Patchwork-id: 93695
O-Subject: [Patch RHEL7.1 V1 104/197] net/mlx4_core: Defer VF initialization till PF is fully initialized
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Amir Vadai <amirv@mellanox.com>

Fix in commit [1] is not sufficient since a deferred VF initialization
could happen after pci_enable_sriov() is finished, but before the PF is
fully initialized.
Need to prevent VFs from initializing till the PF is fully ready and
comm channel is operational.

[1] - 9798935 "net/mlx4_core: mlx4_init_slave() shouldn't access comm
      channel before PF is ready"

CC: Stuart Hayes <Stuart_Hayes@Dell.com>
Signed-off-by: Amir Vadai <amirv@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e1a5ddc5069a0c7589a139e0422200672d965581)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/mellanox/mlx4/main.c b/drivers/net/ethernet/mellanox/mlx4/main.c
index b311f54..bbd9c3c 100644
--- a/drivers/net/ethernet/mellanox/mlx4/main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/main.c
@@ -2369,10 +2369,10 @@ static int __mlx4_init_one(struct pci_dev *pdev, int pci_dev_data)
    } else {
     atomic_inc(&pf_loading);
     err = pci_enable_sriov(pdev, total_vfs);
-    atomic_dec(&pf_loading);
     if (err) {
      mlx4_err(dev, "Failed to enable SR-IOV, continuing without SR-IOV (err = %d).\n",
        err);
+     atomic_dec(&pf_loading);
      err = 0;
     } else {
      mlx4_warn(dev, "Running in master mode\n");
@@ -2532,6 +2532,9 @@ slave_start:
 
  priv->removed = 0;
 
+ if (mlx4_is_master(dev) && dev->num_vfs)
+  atomic_dec(&pf_loading);
+
  return 0;
 
 err_port:
@@ -2582,6 +2585,9 @@ err_rel_own:
  if (!mlx4_is_slave(dev))
   mlx4_free_ownership(dev);
 
+ if (mlx4_is_master(dev) && dev->num_vfs)
+  atomic_dec(&pf_loading);
+
  kfree(priv->dev.dev_vfs);
 
 err_free_dev:
@@ -2675,6 +2681,7 @@ static void __mlx4_remove_one(struct pci_dev *pdev)
  if (dev->flags & MLX4_FLAG_SRIOV) {
   mlx4_warn(dev, "Disabling SR-IOV\n");
   pci_disable_sriov(pdev);
+  dev->num_vfs = 0;
  }
 
  if (!mlx4_is_slave(dev))
-- 
1.7.1