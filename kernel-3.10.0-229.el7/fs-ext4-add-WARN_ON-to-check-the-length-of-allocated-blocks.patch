From 43342adba9893f4c0b76ccb661c4ab7220799c34 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:23 -0400
Subject: [fs] ext4: add WARN_ON to check the length of allocated blocks

Message-id: <1414058125-4183-50-git-send-email-lczerner@redhat.com>
Patchwork-id: 98164
O-Subject: [RHEL 7.1 PATCH v2 049/171] ext4: add WARN_ON to check the length of allocated blocks
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Zheng Liu <wenqing.lz@taobao.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 44fb851dfb2f8e3462617e19a7b3b9025db9d919

 In commit 921f266b: ext4: add self-testing infrastructure to do a
 sanity check, some sanity checks were added in map_blocks to make sure
 'retval == map->m_len'.

 Enable these checks by default and report any assertion failures using
 ext4_warning() and WARN_ON() since they can help us to figure out some
 bugs that are otherwise hard to hit.

 Signed-off-by: Zheng Liu <wenqing.lz@taobao.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 31c9c34..2630c8f 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -555,14 +555,13 @@ int ext4_map_blocks(handle_t *handle, struct inode *inode,
   int ret;
   unsigned long long status;
 
-#ifdef ES_AGGRESSIVE_TEST
-  if (retval != map->m_len) {
-   printk("ES len assertion failed for inode: %lu "
-          "retval %d != map->m_len %d "
-          "in %s (lookup)\n", inode->i_ino, retval,
-          map->m_len, __func__);
+  if (unlikely(retval != map->m_len)) {
+   ext4_warning(inode->i_sb,
+         "ES len assertion failed for inode "
+         "%lu: retval %d != map->m_len %d",
+         inode->i_ino, retval, map->m_len);
+   WARN_ON(1);
   }
-#endif
 
   status = map->m_flags & EXT4_MAP_UNWRITTEN ?
     EXTENT_STATUS_UNWRITTEN : EXTENT_STATUS_WRITTEN;
@@ -656,14 +655,13 @@ found:
   int ret;
   unsigned long long status;
 
-#ifdef ES_AGGRESSIVE_TEST
-  if (retval != map->m_len) {
-   printk("ES len assertion failed for inode: %lu "
-          "retval %d != map->m_len %d "
-          "in %s (allocation)\n", inode->i_ino, retval,
-          map->m_len, __func__);
+  if (unlikely(retval != map->m_len)) {
+   ext4_warning(inode->i_sb,
+         "ES len assertion failed for inode "
+         "%lu: retval %d != map->m_len %d",
+         inode->i_ino, retval, map->m_len);
+   WARN_ON(1);
   }
-#endif
 
   /*
    * If the extent has been zeroed out, we don't need to update
@@ -1638,14 +1636,13 @@ add_delayed:
   int ret;
   unsigned long long status;
 
-#ifdef ES_AGGRESSIVE_TEST
-  if (retval != map->m_len) {
-   printk("ES len assertion failed for inode: %lu "
-          "retval %d != map->m_len %d "
-          "in %s (lookup)\n", inode->i_ino, retval,
-          map->m_len, __func__);
+  if (unlikely(retval != map->m_len)) {
+   ext4_warning(inode->i_sb,
+         "ES len assertion failed for inode "
+         "%lu: retval %d != map->m_len %d",
+         inode->i_ino, retval, map->m_len);
+   WARN_ON(1);
   }
-#endif
 
   status = map->m_flags & EXT4_MAP_UNWRITTEN ?
     EXTENT_STATUS_UNWRITTEN : EXTENT_STATUS_WRITTEN;
-- 
1.7.1