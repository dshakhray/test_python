From fd6a582c5395f5b2f5c2cbfba2cd63983bf018df Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Sat, 22 Nov 2014 23:56:51 -0500
Subject: [md] dm-thin: fix a race in thin_dtr

Message-id: <1416700613-25142-12-git-send-email-snitzer@redhat.com>
Patchwork-id: 100843
O-Subject: [RHEL7.1 PATCH 11/13] dm thin: fix a race in thin_dtr
Bugzilla: 1165246
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1165246

Upstream linux-dm.git commit 17181fb7a0c3a279196c0eeb2caba65a1519614b
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Nov 5 17:00:13 2014 -0500

    dm thin: fix a race in thin_dtr

    As long as struct thin_c is in the list, anyone can grab a reference of
    it.  Consequently, we must wait for the reference count to drop to zero
    *after* we remove the structure from the list, not before.

    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index 268c688..6a6ee42 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -3608,14 +3608,14 @@ static void thin_dtr(struct dm_target *ti)
  struct thin_c *tc = ti->private;
  unsigned long flags;
 
- thin_put(tc);
- wait_for_completion(&tc->can_destroy);
-
  spin_lock_irqsave(&tc->pool->lock, flags);
  list_del_rcu(&tc->list);
  spin_unlock_irqrestore(&tc->pool->lock, flags);
  synchronize_rcu();
 
+ thin_put(tc);
+ wait_for_completion(&tc->can_destroy);
+
  mutex_lock(&dm_thin_pool_table.mutex);
 
  __pool_dec(tc->pool);
-- 
1.7.1