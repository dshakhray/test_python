From c712d09204ca9a6440cf72a5a514b4301dd5b538 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Wed, 18 Jun 2014 10:28:00 -0400
Subject: [s390] uaccess: fix possible register corruption in strnlen_user_srst()

Message-id: <1403087280-902-15-git-send-email-brueckner@redhat.com>
Patchwork-id: 84251
O-Subject: [RHEL7.1 PATCH 14/14] [s390] s390/uaccess: fix possible register corruption in strnlen_user_srst()
Bugzilla: 1099147
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit fa255f51c95fd91b4d7bb50a0fdcca18dd47db21
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Commit: Martin Schwidefsky <schwidefsky@de.ibm.com>

    s390/uaccess: fix possible register corruption in strnlen_user_srst()

    The whole point of the out-of-line strnlen_user_srst() function was to
    avoid corruption of register 0 due to register asm assignment.
    However 'somebody' :) forgot to remove the update_primary_asce() function
    call, which may clobber register 0 contents.
    So let's remove that call and also move the size check to the calling
    function.

    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1099147
https://bugzilla.redhat.com/show_bug.cgi?id=1099147

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version v3.15-rc2
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=fa255f51c95fd91b4d7bb50a0fdcca18dd47db21

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7588402

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/lib/uaccess.c b/arch/s390/lib/uaccess.c
index 23f866b..7416efe 100644
--- a/arch/s390/lib/uaccess.c
+++ b/arch/s390/lib/uaccess.c
@@ -338,9 +338,6 @@ static inline unsigned long strnlen_user_srst(const char __user *src,
  register unsigned long reg0 asm("0") = 0;
  unsigned long tmp1, tmp2;
 
- if (unlikely(!size))
-  return 0;
- update_primary_asce(current);
  asm volatile(
   "   la    %2,0(%1)\n"
   "   la    %3,0(%0,%1)\n"
@@ -359,6 +356,8 @@ static inline unsigned long strnlen_user_srst(const char __user *src,
 
 unsigned long __strnlen_user(const char __user *src, unsigned long size)
 {
+ if (unlikely(!size))
+  return 0;
  update_primary_asce(current);
  return strnlen_user_srst(src, size);
 }
-- 
1.7.1