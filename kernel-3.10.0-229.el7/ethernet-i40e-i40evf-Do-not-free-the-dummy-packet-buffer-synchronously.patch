From 81d778f3b40a85386da7384072478de329b89a7a Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 13:12:48 -0400
Subject: [ethernet] i40e/i40evf: Do not free the dummy packet buffer synchronously

Message-id: <1409663591-32531-126-git-send-email-sassmann@redhat.com>
Patchwork-id: 90603
O-Subject: [RHEL7.1 PATCH 125/148] i40e/i40evf: Do not free the dummy packet buffer synchronously
Bugzilla: 1091127
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Anjali Singhai Jain <anjali.singhai@intel.com>

The HW still needs to consume it and freeing it in the function
that created it would mean we will be racing with the HW. The
i40e_clean_tx_ring() routine will free up the buffer attached once
the HW has consumed it.  The clean_fdir_tx_irq function had to be fixed
to handle the freeing correctly.

Cases where we program more than one filter per flow (Ipv4), the
code had to be changed to allocate dummy buffer multiple times
since it will be freed by the clean routine.  This also fixes an issue
where the filter program routine was not checking if there were
descriptors available for programming a filter.

Change-ID: Idf72028fd873221934e319d021ef65a1e51acaf7
Signed-off-by: Anjali Singhai Jain <anjali.singhai@intel.com>
Tested-by: Jim Young <jamesx.m.young@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 49d7d933316375665cea49473d563cb8447d8a06)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
index f2762f5..b342f21 100644
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
@@ -50,7 +50,11 @@ static void i40e_unmap_and_free_tx_resource(struct i40e_ring *ring,
          struct i40e_tx_buffer *tx_buffer)
 {
  if (tx_buffer->skb) {
-  dev_kfree_skb_any(tx_buffer->skb);
+  if (tx_buffer->tx_flags & I40E_TX_FLAGS_FD_SB)
+   kfree(tx_buffer->raw_buf);
+  else
+   dev_kfree_skb_any(tx_buffer->skb);
+
   if (dma_unmap_len(tx_buffer, len))
    dma_unmap_single(ring->dev,
       dma_unmap_addr(tx_buffer, dma),
diff --git a/drivers/net/ethernet/intel/i40evf/i40e_txrx.h b/drivers/net/ethernet/intel/i40evf/i40e_txrx.h
index acd3c12..8bc6858 100644
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.h
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.h
@@ -130,6 +130,7 @@ enum i40e_dyn_idx_t {
 #define I40E_TX_FLAGS_IPV6  (u32)(1 << 5)
 #define I40E_TX_FLAGS_FCCRC  (u32)(1 << 6)
 #define I40E_TX_FLAGS_FSO  (u32)(1 << 7)
+#define I40E_TX_FLAGS_FD_SB  (u32)(1 << 9)
 #define I40E_TX_FLAGS_VLAN_MASK  0xffff0000
 #define I40E_TX_FLAGS_VLAN_PRIO_MASK 0xe0000000
 #define I40E_TX_FLAGS_VLAN_PRIO_SHIFT 29
@@ -138,7 +139,10 @@ enum i40e_dyn_idx_t {
 struct i40e_tx_buffer {
  struct i40e_tx_desc *next_to_watch;
  unsigned long time_stamp;
- struct sk_buff *skb;
+ union {
+  struct sk_buff *skb;
+  void *raw_buf;
+ };
  unsigned int bytecount;
  unsigned short gso_segs;
  DEFINE_DMA_UNMAP_ADDR(dma);
-- 
1.7.1