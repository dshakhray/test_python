From 72410f31e9c9a657086fc0f2780503719f40c1fc Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:01:16 -0400
Subject: [acpi] hotplug/pci: Pass hotplug context objects to event handlers

Message-id: <20140710010116.22146.94832.stgit@gir.stowe>
Patchwork-id: 85568
O-Subject: [RHEL7.1 PATCH 029/105] ACPI / hotplug / PCI: Pass hotplug context objects to event handlers
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: c8ebcf1ff91a8f64b09c4df0ee21ae80a953c39c

commit c8ebcf1ff91a8f64b09c4df0ee21ae80a953c39c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Jul 13 23:27:24 2013 +0200

    ACPI / hotplug / PCI: Pass hotplug context objects to event handlers

    Modify handle_hotplug_event() to pass the entire context object
    (instead of its fields individually) to work functions started by it.

    This change makes the subsequent consolidation of the event handling
    work functions a bit more straightforward.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index 54c036d..3c77d6c 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -988,6 +988,7 @@ void acpiphp_check_host_bridge(acpi_handle handle)
 
 static void _handle_hotplug_event_bridge(struct work_struct *work)
 {
+ struct acpiphp_context *context;
  struct acpiphp_bridge *bridge;
  char objname[64];
  struct acpi_buffer buffer = { .length = sizeof(objname),
@@ -999,7 +1000,8 @@ static void _handle_hotplug_event_bridge(struct work_struct *work)
  hp_work = container_of(work, struct acpi_hp_work, work);
  handle = hp_work->handle;
  type = hp_work->type;
- bridge = (struct acpiphp_bridge *)hp_work->context;
+ context = hp_work->context;
+ bridge = context->bridge;
 
  acpi_scan_lock_acquire();
 
@@ -1105,18 +1107,18 @@ static void hotplug_event_func(acpi_handle handle, u32 type, void *context)
 
 static void _handle_hotplug_event_func(struct work_struct *work)
 {
+ struct acpiphp_context *context;
  struct acpi_hp_work *hp_work;
- struct acpiphp_func *func;
 
  hp_work = container_of(work, struct acpi_hp_work, work);
- func = hp_work->context;
+ context = hp_work->context;
  acpi_scan_lock_acquire();
 
- hotplug_event_func(hp_work->handle, hp_work->type, func);
+ hotplug_event_func(hp_work->handle, hp_work->type, context->func);
 
  acpi_scan_lock_release();
  kfree(hp_work); /* allocated in handle_hotplug_event_func */
- put_bridge(func->slot->bridge);
+ put_bridge(context->func->slot->bridge);
 }
 
 /**
@@ -1137,11 +1139,9 @@ static void handle_hotplug_event(acpi_handle handle, u32 type, void *data)
  if (context) {
   if (context->bridge) {
    get_bridge(context->bridge);
-   data = context->bridge;
    work_func = _handle_hotplug_event_bridge;
   } else if (context->func) {
    get_bridge(context->func->slot->bridge);
-   data = context->func;
    work_func = _handle_hotplug_event_func;
   }
   acpiphp_put_context(context);
@@ -1157,7 +1157,7 @@ static void handle_hotplug_event(acpi_handle handle, u32 type, void *data)
   * don't deadlock on hotplug actions.
   */
  if (work_func)
-  alloc_acpi_hp_work(handle, type, data, work_func);
+  alloc_acpi_hp_work(handle, type, context, work_func);
 }
 
 /*
-- 
1.7.1