From 51b01607bae08c03565d94c33b8abbaeab27175f Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:07:17 -0400
Subject: [powerpc] book3s: Split the common exception prolog logic into two section

Message-id: <1410545655-205645-209-git-send-email-dzickus@redhat.com>
Patchwork-id: 94197
O-Subject: [RHEL7 PATCH 208/626] powerpc/book3s: Split the common exception prolog logic into two section.
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit b14a7253cf999412e5a0dd39d58b0a42d19fd73a
Author: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
Date:   Wed Oct 30 20:03:51 2013 +0530

    powerpc/book3s: Split the common exception prolog logic into two section.

    This patch splits the common exception prolog logic into three parts to
    facilitate reuse of existing code in the next patch. This patch also
    re-arranges few instructions in such a way that the second part now deals
    with saving register values from paca save area to stack frame, and
    the third part deals with saving current register values to stack frame.

    The second and third part will be reused in the machine check exception
    routine in the subsequent patch.

    Please note that this patch does not introduce or change existing code
    logic. Instead it is just a code movement and instruction re-ordering.

    Patch Acked-by Paul. But made some minor modification (explained above) to
    address Paul's comment in the later patch(3).

    Signed-off-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
    Acked-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/exception-64s.h b/arch/powerpc/include/asm/exception-64s.h
index 894662a..ff4e2e8 100644
--- a/arch/powerpc/include/asm/exception-64s.h
+++ b/arch/powerpc/include/asm/exception-64s.h
@@ -301,9 +301,12 @@ do_kvm_##n:        \
  beq 4f;   /* if from kernel mode  */ \
  ACCOUNT_CPU_USER_ENTRY(r9, r10);       \
  SAVE_PPR(area, r9, r10);        \
-4: std r2,GPR2(r1);  /* save r2 in stackframe */ \
- SAVE_4GPRS(3, r1);  /* save r3 - r6 in stackframe */ \
- SAVE_2GPRS(7, r1);  /* save r7, r8 in stackframe */ \
+4: EXCEPTION_PROLOG_COMMON_2(area)        \
+ EXCEPTION_PROLOG_COMMON_3(n)        \
+ ACCOUNT_STOLEN_TIME
+
+/* Save original regs values from save area to stack frame. */
+#define EXCEPTION_PROLOG_COMMON_2(area)        \
  ld r9,area+EX_R9(r13); /* move r9, r10 to stackframe */ \
  ld r10,area+EX_R10(r13);        \
  std r9,GPR9(r1);         \
@@ -318,11 +321,16 @@ do_kvm_##n:        \
  ld r10,area+EX_CFAR(r13);        \
  std r10,ORIG_GPR3(r1);        \
  END_FTR_SECTION_NESTED(CPU_FTR_CFAR, CPU_FTR_CFAR, 66);     \
+ GET_CTR(r10, area);         \
+ std r10,_CTR(r1);
+
+#define EXCEPTION_PROLOG_COMMON_3(n)        \
+ std r2,GPR2(r1);  /* save r2 in stackframe */ \
+ SAVE_4GPRS(3, r1);  /* save r3 - r6 in stackframe   */ \
+ SAVE_2GPRS(7, r1);  /* save r7, r8 in stackframe */ \
  mflr r9;   /* Get LR, later save to stack */ \
  ld r2,PACATOC(r13); /* get kernel TOC into r2 */ \
  std r9,_LINK(r1);         \
- GET_CTR(r10, area);         \
- std r10,_CTR(r1);         \
  lbz r10,PACASOFTIRQEN(r13);       \
  mfspr r11,SPRN_XER;  /* save XER in stackframe */ \
  std r10,SOFTE(r1);         \
@@ -332,8 +340,7 @@ do_kvm_##n:        \
  li r10,0;          \
  ld r11,exception_marker@toc(r2);       \
  std r10,RESULT(r1);  /* clear regs->result  */ \
- std r11,STACK_FRAME_OVERHEAD-16(r1); /* mark the frame */ \
- ACCOUNT_STOLEN_TIME
+ std r11,STACK_FRAME_OVERHEAD-16(r1); /* mark the frame */
 
 /*
  * Exception vectors.
-- 
1.7.1