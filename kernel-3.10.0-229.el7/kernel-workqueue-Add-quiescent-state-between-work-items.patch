From 10b41cc4624c81d266d29cd32ca9358fd5d90064 Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jpirko@redhat.com>
Date: Wed, 8 Oct 2014 12:32:13 -0400
Subject: [kernel] workqueue: Add quiescent state between work items

Message-id: <1412771533-2706-1-git-send-email-jpirko@redhat.com>
Patchwork-id: 97151
O-Subject: [patch rhel7 net] workqueue: Add quiescent state between work items
Bugzilla: 1149250
RH-Acked-by: Neil Horman <nhorman@redhat.com>

BZ1149250
https://brewweb.devel.redhat.com/taskinfo?taskID=8076908

upstream (linux-rcu) commit 789cbbeca4eb7141cbd748ee93772471101b507b
Author: Joe Lawrence <joe.lawrence@stratus.com>
Date:   Sun Oct 5 13:24:21 2014 -0400

    workqueue: Add quiescent state between work items

    Similar to the stop_machine deadlock scenario on !PREEMPT kernels
    addressed in b22ce2785d97 "workqueue: cond_resched() after processing
    each work item", kworker threads requeueing back-to-back with zero jiffy
    delay can stall RCU. The cond_resched call introduced in that fix will
    yield only iff there are other higher priority tasks to run, so force a
    quiescent RCU state between work items.

As we don't have rcu_note_voluntary_context_switch in rhel7, Paul E.
McKenney suggested to use rcu_note_context_switch.

Signed-off-by: Jiri Pirko <jpirko@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index e9719c7..14a7163 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -2196,8 +2196,10 @@ __acquires(&pool->lock)
   * kernels, where a requeueing work item waiting for something to
   * happen could deadlock with stop_machine as such work item could
   * indefinitely requeue itself while all other CPUs are trapped in
-  * stop_machine.
+  * stop_machine. At the same time, report a quiescent RCU state so
+  * the same condition doesn't freeze RCU.
   */
+ rcu_note_context_switch(raw_smp_processor_id());
  cond_resched();
 
  spin_lock_irq(&pool->lock);
-- 
1.7.1