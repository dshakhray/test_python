From f92634a8dddaf61a0c4cfe9d61e264e1600d73ae Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Thu, 21 Aug 2014 13:05:16 -0400
Subject: [ethernet] qlcnic: Skip unknown entry type while collecting firmware dump

Message-id: <1408626422-3941-33-git-send-email-cdupuis@redhat.com>
Patchwork-id: 88582
O-Subject: [PATCH RHEL 7.1 032/138] qlcnic: Skip unknown entry type while collecting firmware dump
Bugzilla: 1089352
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Shahed Shaikh <shahed.shaikh@qlogic.com>

Bug 1089352 (https://bugzilla.redhat.com/show_bug.cgi?id=1089352)

net commit id 60d3c47310df7845c983a9e6e78c4687ea572aa9

o Driver aborts the minidump collection operation when it finds
  an unknown entry opcode. This patch skips unknown entry type
  and resumes the minidump collection operation.
o Removed a comparision of collected dump size with expected dump size.
  Size may differ when driver decides to skip an entry.

Signed-off-by: Shahed Shaikh <shahed.shaikh@qlogic.com>
Signed-off-by: Himanshu Madhani <himanshu.madhani@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c
index 1551360..7763962 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c
@@ -1187,41 +1187,38 @@ int qlcnic_dump_fw(struct qlcnic_adapter *adapter)
   }
 
   if (ops_index == ops_cnt) {
-   dev_info(&adapter->pdev->dev,
-     "Invalid entry type %d, exiting dump\n",
+   dev_info(dev, "Skipping unknown entry opcode %d\n",
      entry->hdr.type);
-   goto error;
+   entry->hdr.flags |= QLCNIC_DUMP_SKIP;
+   entry_offset += entry->hdr.offset;
+   continue;
   }
 
   /* Collect dump for this entry */
   dump = fw_dump_ops[ops_index].handler(adapter, entry, buffer);
-  if (!qlcnic_valid_dump_entry(&adapter->pdev->dev, entry, dump))
+  if (!qlcnic_valid_dump_entry(dev, entry, dump)) {
    entry->hdr.flags |= QLCNIC_DUMP_SKIP;
+   entry_offset += entry->hdr.offset;
+   continue;
+  }
+
   buf_offset += entry->hdr.cap_size;
   entry_offset += entry->hdr.offset;
   buffer = fw_dump->data + buf_offset;
  }
- if (dump_size != buf_offset) {
-  dev_info(&adapter->pdev->dev,
-    "Captured(%d) and expected size(%d) do not match\n",
-    buf_offset, dump_size);
-  goto error;
- } else {
-  fw_dump->clr = 1;
-  snprintf(mesg, sizeof(mesg), "FW_DUMP=%s",
-    adapter->netdev->name);
-  dev_info(&adapter->pdev->dev, "%s: Dump data, %d bytes captured\n",
-    adapter->netdev->name, fw_dump->size);
-  /* Send a udev event to notify availability of FW dump */
-  kobject_uevent_env(&adapter->pdev->dev.kobj, KOBJ_CHANGE, msg);
-  return 0;
- }
-error:
+
+ fw_dump->clr = 1;
+ snprintf(mesg, sizeof(mesg), "FW_DUMP=%s", adapter->netdev->name);
+ dev_info(dev, "%s: Dump data %d bytes captured, template header size %d bytes\n",
+   adapter->netdev->name, fw_dump->size, tmpl_hdr->size);
+ /* Send a udev event to notify availability of FW dump */
+ kobject_uevent_env(&dev->kobj, KOBJ_CHANGE, msg);
+
  if (fw_dump->use_pex_dma)
   dma_free_coherent(dev, QLC_PEX_DMA_READ_SIZE,
       fw_dump->dma_buffer, fw_dump->phys_addr);
- vfree(fw_dump->data);
- return -EINVAL;
+
+ return 0;
 }
 
 void qlcnic_83xx_get_minidump_template(struct qlcnic_adapter *adapter)
-- 
1.7.1