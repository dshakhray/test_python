From 52d61e1559a8ae857329009bb44d1a8252e95aae Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 12 Sep 2014 17:46:30 -0400
Subject: [kernel] modules: Add module_ext struct

Message-id: <20140912174629.GT29420@redacted.bos.redhat.com>
Patchwork-id: 94055
O-Subject: [RHEL7.1 PATCH 3/6 v4] modules: Add module_ext struct
Bugzilla: 1110315
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Johannes Weiner <jweiner@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Kyle McMartin <kmcmarti@redhat.com>

From: Prarit Bhargava <prarit@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110315

This adds the base support to extend the module structure in RHEL7.  The
patch introduces module_ext struct and has code for initializing the
struct, and destroying the struct on module load and remove.

This patch fixes the KABI, broken in the previous patch

Also, this patch introduces check_module_version() which will be used in a
later patchseries.  It is marked with __used to avoid a kernel
warning/error.

Successfully tested by me by compiling the dummy-module.ko on a stock
RHEL7 kernel and loading it into a RHEL7 kernel modified with this
patchset.

[root@intel-mayancity-01 ~]# insmod dummy-module.ko
[root@intel-mayancity-01 ~]# cat /sys/module/dummy_module/rhelversion
7.0

I bumped the minor version to 1 and then took a look at the *.mod.c info
of a module built against a kernel modified with this patchset:

[root@intel-mayancity-01 dummy-module]# cd /home/rhel7/redhat/debug/dummy-module/
[root@intel-mayancity-01 dummy-module]# make
make -C /lib/modules/3.10.0+/build SUBDIRS=/home/rhel7/redhat/debug/dummy-module modules
make[1]: Entering directory `/home/rhel7'
  Building modules, stage 2.
  MODPOST 1 modules
make[1]: Leaving directory `/home/rhel7'
[root@intel-mayancity-01 dummy-module]# cat dummy-module.mod.c | grep rhel
MODULE_INFO(rhelversion, "7.1");

to see that the rhelversion string was correctly added to the module info.

[v2]: dzickus, some cleanups, check for !mod_ext in find_module_ext()
[v4]: resubmitted along with 16K stacks change

---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/module.h b/include/linux/module.h
index 709671f..504035f 100644
--- a/include/linux/module.h
+++ b/include/linux/module.h
@@ -240,7 +240,6 @@ struct module
  struct module_attribute *modinfo_attrs;
  const char *version;
  const char *srcversion;
- const char *rhelversion;
  struct kobject *holders_dir;
 
  /* Exported symbols */
diff --git a/kernel/module.c b/kernel/module.c
index 722f540..c32bea7 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -106,6 +106,40 @@ static LIST_HEAD(modules);
 struct list_head *kdb_modules = &modules; /* kdb needs the list of modules */
 #endif /* CONFIG_KGDB_KDB */
 
+/* extended module structure for RHEL */
+struct module_ext {
+ struct list_head next;
+ struct module *module; /* "parent" struct */
+ char *rhelversion;
+};
+DEFINE_MUTEX(module_ext_mutex);
+LIST_HEAD(modules_ext);
+
+/* needs to take module_ext_mutex */
+struct module_ext *find_module_ext(struct module *mod)
+{
+ struct module_ext *mod_ext;
+
+ list_for_each_entry(mod_ext, &modules_ext, next)
+  if (mod == mod_ext->module)
+   return mod_ext;
+ BUG_ON(1); /* this can't happen */
+}
+
+bool check_module_rhelversion(struct module *mod, char *version)
+{
+ struct module_ext *mod_ext;
+ bool ret;
+
+ ret = false;
+ mutex_lock(&module_ext_mutex);
+ mod_ext = find_module_ext(mod);
+ if (!strncmp(mod_ext->rhelversion, version, strlen(version)))
+  ret = true;
+ mutex_unlock(&module_ext_mutex);
+ return ret;
+}
+
 #ifdef CONFIG_MODULE_SIG
 #ifdef CONFIG_MODULE_SIG_FORCE
 static bool sig_enforce = true;
@@ -614,9 +648,57 @@ static struct module_attribute modinfo_##field = {                    \
  .free = free_modinfo_##field,                                 \
 };
 
+#define MODEXTINFO_ATTR(field) \
+static void setup_modinfo_##field(struct module *mod, const char *s)  \
+{                                                                     \
+ struct module_ext *mod_ext;                                   \
+ mutex_lock(&module_ext_mutex);                                \
+ mod_ext = find_module_ext(mod);                               \
+ mod_ext->field = kstrdup(s, GFP_KERNEL);                      \
+ mutex_unlock(&module_ext_mutex);                              \
+}                                                                     \
+static ssize_t show_modinfo_##field(struct module_attribute *mattr,   \
+   struct module_kobject *mk, char *buffer)      \
+{                                                                     \
+ ssize_t ret;                                                  \
+ struct module_ext *mod_ext;                                   \
+ mutex_lock(&module_ext_mutex);                                \
+ mod_ext = find_module_ext(mk->mod);                           \
+ ret = sprintf(buffer, "%s\n", mod_ext->field);                \
+ mutex_unlock(&module_ext_mutex);                              \
+ return ret;                                                   \
+}                                                                     \
+static int modinfo_##field##_exists(struct module *mod)               \
+{                                                                     \
+ int ret;                                                      \
+ struct module_ext *mod_ext;                                   \
+ mutex_lock(&module_ext_mutex);                                \
+ mod_ext = find_module_ext(mod);                               \
+ ret = (mod_ext->field != NULL);                               \
+ mutex_unlock(&module_ext_mutex);                              \
+ return ret;                                                   \
+}                                                                     \
+static void free_modinfo_##field(struct module *mod)                  \
+{                                                                     \
+ struct module_ext *mod_ext;                                   \
+ mutex_lock(&module_ext_mutex);                                \
+ mod_ext = find_module_ext(mod);                               \
+ kfree(mod_ext->field);                                        \
+ mod_ext->field = NULL;                                        \
+ mutex_unlock(&module_ext_mutex);                              \
+}                                                                     \
+static struct module_attribute modinfo_##field = {                    \
+ .attr = { .name = __stringify(field), .mode = 0444 },         \
+ .show = show_modinfo_##field,                                 \
+ .setup = setup_modinfo_##field,                               \
+ .test = modinfo_##field##_exists,                             \
+ .free = free_modinfo_##field,                                 \
+};
+
+
 MODINFO_ATTR(version);
 MODINFO_ATTR(srcversion);
-MODINFO_ATTR(rhelversion);
+MODEXTINFO_ATTR(rhelversion);
 
 static char last_unloaded_module[MODULE_NAME_LEN+1];
 
@@ -1861,6 +1943,8 @@ void __weak module_arch_cleanup(struct module *mod)
 /* Free a module, remove from lists, etc. */
 static void free_module(struct module *mod)
 {
+ struct module_ext *mod_ext;
+
  trace_module_free(mod);
 
  mod_sysfs_teardown(mod);
@@ -1886,6 +1970,11 @@ static void free_module(struct module *mod)
  stop_machine(__unlink_module, mod, NULL);
  mutex_unlock(&module_mutex);
 
+ mutex_lock(&module_ext_mutex);
+ mod_ext = find_module_ext(mod);
+ list_del(&mod_ext->next);
+ mutex_unlock(&module_ext_mutex);
+
  /* This may be NULL, but that's OK */
  unset_module_init_ro_nx(mod);
  module_free(mod, mod->module_init);
@@ -3213,6 +3302,7 @@ static int load_module(struct load_info *info, const char __user *uargs,
          int flags)
 {
  struct module *mod;
+ struct module_ext *mod_ext;
  long err;
 
  err = module_sig_check(info);
@@ -3262,13 +3352,31 @@ static int load_module(struct load_info *info, const char __user *uargs,
  if (err)
   goto free_unload;
 
+ mutex_lock(&module_ext_mutex);
+ mod_ext = kzalloc(sizeof(*mod_ext), GFP_KERNEL);
+ if (!mod_ext) {
+  mutex_unlock(&module_ext_mutex);
+  goto free_unload;
+ }
+ mod_ext->module = mod;
+ INIT_LIST_HEAD(&mod_ext->next);
+ list_add(&mod_ext->next, &modules_ext);
+ mutex_unlock(&module_ext_mutex);
+
  err = check_module_license_and_versions(mod);
  if (err)
-  goto free_unload;
+  goto free_mod_ext;
 
  /* Set up MODINFO_ATTR fields */
  setup_modinfo(mod, info);
 
+ /*
+  * If the rhelversion field doesn't exist then the module was built
+  * on RHEL7.0
+  */
+ if (!mod_ext->rhelversion)
+  mod_ext->rhelversion = kstrdup("7.0", GFP_KERNEL);
+
  /* Fix up syms, so that st_value is a pointer to location. */
  err = simplify_symbols(mod, info);
  if (err < 0)
@@ -3333,6 +3441,10 @@ static int load_module(struct load_info *info, const char __user *uargs,
  module_arch_cleanup(mod);
  free_modinfo:
  free_modinfo(mod);
+ free_mod_ext:
+ mutex_lock(&module_ext_mutex);
+ list_del(&mod_ext->next);
+ mutex_unlock(&module_ext_mutex);
  free_unload:
  module_unload_free(mod);
  unlink_mod:
-- 
1.7.1