From ba1caeb3c4aa786fcc2aeba082f46bd4a285ce0a Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:23:21 -0400
Subject: [block] rbd: introduce rbd_dev_header_unwatch_sync() and switch to it
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-95-git-send-email-sweil@redhat.com>
Patchwork-id: 89582
O-Subject: [PATCH 094/303] rbd: introduce rbd_dev_header_unwatch_sync() and switch to it
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

Rename rbd_dev_header_watch_sync() to __rbd_dev_header_watch_sync() and
introduce two helpers: rbd_dev_header_{,un}watch_sync() to make it more
clear what is going on.

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Josh Durgin <josh.durgin@inktank.com>
(cherry picked from commit fca270653909404112ea5f6eed274ed5272d5252)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/block/rbd.c b/drivers/block/rbd.c
index 0c1cfa5..b3fa677 100644
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@ -2897,7 +2897,7 @@ static void rbd_watch_cb(u64 ver, u64 notify_id, u8 opcode, void *data)
  * Request sync osd watch/unwatch.  The value of "start" determines
  * whether a watch request is being initiated or torn down.
  */
-static int rbd_dev_header_watch_sync(struct rbd_device *rbd_dev, bool start)
+static int __rbd_dev_header_watch_sync(struct rbd_device *rbd_dev, bool start)
 {
  struct ceph_osd_client *osdc = &rbd_dev->rbd_client->client->osdc;
  struct rbd_obj_request *obj_request;
@@ -2972,6 +2972,22 @@ out_cancel:
  return ret;
 }
 
+static int rbd_dev_header_watch_sync(struct rbd_device *rbd_dev)
+{
+ return __rbd_dev_header_watch_sync(rbd_dev, true);
+}
+
+static void rbd_dev_header_unwatch_sync(struct rbd_device *rbd_dev)
+{
+ int ret;
+
+ ret = __rbd_dev_header_watch_sync(rbd_dev, false);
+ if (ret) {
+  rbd_warn(rbd_dev, "unable to tear down watch request: %d\n",
+    ret);
+ }
+}
+
 /*
  * Synchronous osd object method call.  Returns the number of bytes
  * returned in the outbound buffer, or a negative error code.
@@ -4987,7 +5003,6 @@ static void rbd_dev_image_release(struct rbd_device *rbd_dev)
 static int rbd_dev_image_probe(struct rbd_device *rbd_dev, bool mapping)
 {
  int ret;
- int tmp;
 
  /*
   * Get the id from the image id object.  Unless there's an
@@ -5006,7 +5021,7 @@ static int rbd_dev_image_probe(struct rbd_device *rbd_dev, bool mapping)
   goto err_out_format;
 
  if (mapping) {
-  ret = rbd_dev_header_watch_sync(rbd_dev, true);
+  ret = rbd_dev_header_watch_sync(rbd_dev);
   if (ret)
    goto out_header_name;
  }
@@ -5033,12 +5048,8 @@ static int rbd_dev_image_probe(struct rbd_device *rbd_dev, bool mapping)
 err_out_probe:
  rbd_dev_unprobe(rbd_dev);
 err_out_watch:
- if (mapping) {
-  tmp = rbd_dev_header_watch_sync(rbd_dev, false);
-  if (tmp)
-   rbd_warn(rbd_dev, "unable to tear down "
-     "watch request (%d)\n", tmp);
- }
+ if (mapping)
+  rbd_dev_header_unwatch_sync(rbd_dev);
 out_header_name:
  kfree(rbd_dev->header_name);
  rbd_dev->header_name = NULL;
@@ -5234,16 +5245,14 @@ static ssize_t do_rbd_remove(struct bus_type *bus,
  if (ret < 0 || already)
   return ret;
 
- ret = rbd_dev_header_watch_sync(rbd_dev, false);
- if (ret)
-  rbd_warn(rbd_dev, "failed to cancel watch event (%d)\n", ret);
-
+ rbd_dev_header_unwatch_sync(rbd_dev);
  /*
   * flush remaining watch callbacks - these must be complete
   * before the osd_client is shutdown
   */
  dout("%s: flushing notifies", __func__);
  ceph_osdc_flush_notifies(&rbd_dev->rbd_client->client->osdc);
+
  /*
   * Don't free anything from rbd_dev->disk until after all
   * notifies are completely processed. Otherwise
-- 
1.7.1