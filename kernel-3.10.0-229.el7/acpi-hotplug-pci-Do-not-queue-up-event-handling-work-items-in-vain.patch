From 4662d654c93a1f7dffa47747151a1bd2471178fe Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:02:43 -0400
Subject: [acpi] hotplug/pci: Do not queue up event handling work items in vain

Message-id: <20140710010243.22146.56218.stgit@gir.stowe>
Patchwork-id: 85582
O-Subject: [RHEL7.1 PATCH 043/105] ACPI / hotplug / PCI: Do not queue up event handling work items in vain
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 5c8d0e1dc475f0f35b5a774c92c68c3f7dbd3f5f

commit 5c8d0e1dc475f0f35b5a774c92c68c3f7dbd3f5f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Jul 13 23:27:26 2013 +0200

    ACPI / hotplug / PCI: Do not queue up event handling work items in vain

    Modify handle_hotplug_event() to avoid queing up the execution of
    handle_hotplug_event_work_fn() as a work item on kacpi_hotplug_wq
    for non-hotplug events, such as ACPI_NOTIFY_DEVICE_WAKE.  Move
    the code printing diagnostic messages for those events into
    handle_hotplug_event().

    In addition to that, remove the bogus comment about how the core
    should distinguish between hotplug and non-hotplug events and
    queue them up on different workqueues.  The core clearly cannot
    know in advance what events will be interesting to the given
    caller of acpi_install_notify_handler().

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index 7319dcb..f055389 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -920,36 +920,11 @@ static void hotplug_event(acpi_handle handle, u32 type, void *data)
 
   break;
 
- case ACPI_NOTIFY_DEVICE_WAKE:
-  /* wake event */
-  pr_debug("%s: Device wake notify on %s\n", __func__, objname);
-  break;
-
  case ACPI_NOTIFY_EJECT_REQUEST:
   /* request device eject */
   pr_debug("%s: Device eject notify on %s\n", __func__, objname);
   acpiphp_disable_and_eject_slot(func->slot);
   break;
-
- case ACPI_NOTIFY_FREQUENCY_MISMATCH:
-  printk(KERN_ERR "Device %s cannot be configured due"
-    " to a frequency mismatch\n", objname);
-  break;
-
- case ACPI_NOTIFY_BUS_MODE_MISMATCH:
-  printk(KERN_ERR "Device %s cannot be configured due"
-    " to a bus mode mismatch\n", objname);
-  break;
-
- case ACPI_NOTIFY_POWER_FAULT:
-  printk(KERN_ERR "Device %s has suffered a power fault\n",
-    objname);
-  break;
-
- default:
-  pr_warn("notify_handler: unknown event type 0x%x for %s\n", type,
-       objname);
-  break;
  }
 
  if (bridge)
@@ -984,23 +959,42 @@ static void handle_hotplug_event(acpi_handle handle, u32 type, void *data)
 {
  struct acpiphp_context *context;
 
+ switch (type) {
+ case ACPI_NOTIFY_BUS_CHECK:
+ case ACPI_NOTIFY_DEVICE_CHECK:
+ case ACPI_NOTIFY_EJECT_REQUEST:
+  break;
+
+ case ACPI_NOTIFY_DEVICE_WAKE:
+  return;
+
+ case ACPI_NOTIFY_FREQUENCY_MISMATCH:
+  acpi_handle_err(handle, "Device cannot be configured due "
+    "to a frequency mismatch\n");
+  return;
+
+ case ACPI_NOTIFY_BUS_MODE_MISMATCH:
+  acpi_handle_err(handle, "Device cannot be configured due "
+    "to a bus mode mismatch\n");
+  return;
+
+ case ACPI_NOTIFY_POWER_FAULT:
+  acpi_handle_err(handle, "Device has suffered a power fault\n");
+  return;
+
+ default:
+  acpi_handle_warn(handle, "Unsupported event type 0x%x\n", type);
+  return;
+ }
+
  mutex_lock(&acpiphp_context_lock);
  context = acpiphp_get_context(handle);
  if (context) {
   get_bridge(context->func.parent);
   acpiphp_put_context(context);
+  alloc_acpi_hp_work(handle, type, context, hotplug_event_work);
  }
  mutex_unlock(&acpiphp_context_lock);
- /*
-  * Currently the code adds all hotplug events to the kacpid_wq
-  * queue when it should add hotplug events to the kacpi_hotplug_wq.
-  * The proper way to fix this is to reorganize the code so that
-  * drivers (dock, etc.) do not call acpi_os_execute(), etc.
-  * For now just re-add this work to the kacpi_hotplug_wq so we
-  * don't deadlock on hotplug actions.
-  */
- if (context)
-  alloc_acpi_hp_work(handle, type, context, hotplug_event_work);
 }
 
 /*
-- 
1.7.1