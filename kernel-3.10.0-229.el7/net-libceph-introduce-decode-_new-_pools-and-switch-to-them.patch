From 973d191e5df1833ac6f3c6b5c345809450b354ab Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:25:12 -0400
Subject: [net] libceph: introduce decode{, _new}_pools() and switch to them
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-206-git-send-email-sweil@redhat.com>
Patchwork-id: 89732
O-Subject: [PATCH 205/303] libceph: introduce decode{, _new}_pools() and switch to them
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

Consolidate pools (full map, map<u64, pg_pool_t>) and new_pools (inc
map, same) decoding logic into a common helper and switch to it.

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Alex Elder <elder@linaro.org>
(cherry picked from commit 433fbdd31db267564bab20420bd8f161a7c69e4d)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ceph/osdmap.c b/net/ceph/osdmap.c
index 39938d7..0ba3062 100644
--- a/net/ceph/osdmap.c
+++ b/net/ceph/osdmap.c
@@ -681,6 +681,55 @@ static int osdmap_set_max_osd(struct ceph_osdmap *map, int max)
  return 0;
 }
 
+static int __decode_pools(void **p, void *end, struct ceph_osdmap *map,
+     bool incremental)
+{
+ u32 n;
+
+ ceph_decode_32_safe(p, end, n, e_inval);
+ while (n--) {
+  struct ceph_pg_pool_info *pi;
+  u64 pool;
+  int ret;
+
+  ceph_decode_64_safe(p, end, pool, e_inval);
+
+  pi = __lookup_pg_pool(&map->pg_pools, pool);
+  if (!incremental || !pi) {
+   pi = kzalloc(sizeof(*pi), GFP_NOFS);
+   if (!pi)
+    return -ENOMEM;
+
+   pi->id = pool;
+
+   ret = __insert_pg_pool(&map->pg_pools, pi);
+   if (ret) {
+    kfree(pi);
+    return ret;
+   }
+  }
+
+  ret = decode_pool(p, end, pi);
+  if (ret)
+   return ret;
+ }
+
+ return 0;
+
+e_inval:
+ return -EINVAL;
+}
+
+static int decode_pools(void **p, void *end, struct ceph_osdmap *map)
+{
+ return __decode_pools(p, end, map, false);
+}
+
+static int decode_new_pools(void **p, void *end, struct ceph_osdmap *map)
+{
+ return __decode_pools(p, end, map, true);
+}
+
 /*
  * decode a full map.
  */
@@ -692,7 +741,6 @@ static int osdmap_decode(void **p, void *end, struct ceph_osdmap *map)
  u32 max;
  u32 len, i;
  int err;
- struct ceph_pg_pool_info *pi;
 
  dout("%s %p to %p len %d\n", __func__, *p, end, (int)(end - *p));
 
@@ -714,22 +762,10 @@ static int osdmap_decode(void **p, void *end, struct ceph_osdmap *map)
  ceph_decode_copy(p, &map->created, sizeof(map->created));
  ceph_decode_copy(p, &map->modified, sizeof(map->modified));
 
- ceph_decode_32_safe(p, end, max, e_inval);
- while (max--) {
-  ceph_decode_need(p, end, 8 + 2, e_inval);
-  pi = kzalloc(sizeof(*pi), GFP_NOFS);
-  if (!pi) {
-   err = -ENOMEM;
-   goto bad;
-  }
-  pi->id = ceph_decode_64(p);
-  err = decode_pool(p, end, pi);
-  if (err < 0) {
-   kfree(pi);
-   goto bad;
-  }
-  __insert_pg_pool(&map->pg_pools, pi);
- }
+ /* pools */
+ err = decode_pools(p, end, map);
+ if (err)
+  goto bad;
 
  /* pool_name */
  err = decode_pool_names(p, end, map);
@@ -934,26 +970,10 @@ struct ceph_osdmap *osdmap_apply_incremental(void **p, void *end,
   newcrush = NULL;
  }
 
- /* new_pool */
- ceph_decode_32_safe(p, end, len, e_inval);
- while (len--) {
-  struct ceph_pg_pool_info *pi;
-
-  ceph_decode_64_safe(p, end, pool, e_inval);
-  pi = __lookup_pg_pool(&map->pg_pools, pool);
-  if (!pi) {
-   pi = kzalloc(sizeof(*pi), GFP_NOFS);
-   if (!pi) {
-    err = -ENOMEM;
-    goto bad;
-   }
-   pi->id = pool;
-   __insert_pg_pool(&map->pg_pools, pi);
-  }
-  err = decode_pool(p, end, pi);
-  if (err < 0)
-   goto bad;
- }
+ /* new_pools */
+ err = decode_new_pools(p, end, map);
+ if (err)
+  goto bad;
 
  /* new_pool_names */
  err = decode_pool_names(p, end, map);
-- 
1.7.1