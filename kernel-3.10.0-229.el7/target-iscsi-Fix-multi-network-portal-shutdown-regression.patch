From 9849ccb2826f651104236a1c1ae2556b3abc8f6f Mon Sep 17 00:00:00 2001
From: Andy Grover <agrover@redhat.com>
Date: Fri, 5 Sep 2014 16:36:02 -0400
Subject: [target] iscsi: Fix multi network portal shutdown regression

Message-id: <1409934989-29941-5-git-send-email-agrover@redhat.com>
Patchwork-id: 91464
O-Subject: [RHEL7.1 PATCH e-stor 04/31] iser-target: Fix multi network portal shutdown regression
Bugzilla: 1129387
RH-Acked-by: Chris Leech <cleech@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

From: Nicholas Bellinger <nab@linux-iscsi.org>

commit 2363d196686e44c0158929e7cf96c8589a24a81b upstream.

This patch fixes a iser-target specific regression introduced in
v3.15-rc6 with:

commit 14f4b54fe38f3a8f8392a50b951c8aa43b63687a
Author: Sagi Grimberg <sagig@mellanox.com>
Date:   Tue Apr 29 13:13:47 2014 +0300

    Target/iscsi,iser: Avoid accepting transport connections during stop stage

where the change to set iscsi_np->enabled = false within
iscsit_clear_tpg_np_login_thread() meant that a iscsi_np with
two iscsi_tpg_np exports would have it's parent iscsi_np set
to a disabled state, even if other iscsi_tpg_np exports still
existed.

This patch changes iscsit_clear_tpg_np_login_thread() to only
set iscsi_np->enabled = false when shutdown = true, and also
changes iscsit_del_np() to set iscsi_np->enabled = true when
iscsi_np->np_exports is non zero.

(Fix up context changes for v3.10.y - nab)

Cc: Sagi Grimberg <sagig@dev.mellanox.co.il>
Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/target/iscsi/iscsi_target.c b/drivers/target/iscsi/iscsi_target.c
index 570837b..7df3a16 100644
--- a/drivers/target/iscsi/iscsi_target.c
+++ b/drivers/target/iscsi/iscsi_target.c
@@ -460,6 +460,7 @@ int iscsit_del_np(struct iscsi_np *np)
  spin_lock_bh(&np->np_thread_lock);
  np->np_exports--;
  if (np->np_exports) {
+  np->enabled = true;
   spin_unlock_bh(&np->np_thread_lock);
   return 0;
  }
diff --git a/drivers/target/iscsi/iscsi_target_tpg.c b/drivers/target/iscsi/iscsi_target_tpg.c
index f08ef99..922f4db 100644
--- a/drivers/target/iscsi/iscsi_target_tpg.c
+++ b/drivers/target/iscsi/iscsi_target_tpg.c
@@ -175,14 +175,16 @@ void iscsit_put_tpg(struct iscsi_portal_group *tpg)
 
 static void iscsit_clear_tpg_np_login_thread(
  struct iscsi_tpg_np *tpg_np,
- struct iscsi_portal_group *tpg)
+ struct iscsi_portal_group *tpg,
+ bool shutdown)
 {
  if (!tpg_np->tpg_np) {
   pr_err("struct iscsi_tpg_np->tpg_np is NULL!\n");
   return;
  }
 
- tpg_np->tpg_np->enabled = false;
+ if (shutdown)
+  tpg_np->tpg_np->enabled = false;
  iscsit_reset_np_thread(tpg_np->tpg_np, tpg_np, tpg);
 }
 
@@ -198,7 +200,7 @@ void iscsit_clear_tpg_np_login_threads(
    continue;
   }
   spin_unlock(&tpg->tpg_np_lock);
-  iscsit_clear_tpg_np_login_thread(tpg_np, tpg);
+  iscsit_clear_tpg_np_login_thread(tpg_np, tpg, false);
   spin_lock(&tpg->tpg_np_lock);
  }
  spin_unlock(&tpg->tpg_np_lock);
@@ -521,7 +523,7 @@ static int iscsit_tpg_release_np(
  struct iscsi_portal_group *tpg,
  struct iscsi_np *np)
 {
- iscsit_clear_tpg_np_login_thread(tpg_np, tpg);
+ iscsit_clear_tpg_np_login_thread(tpg_np, tpg, true);
 
  pr_debug("CORE[%s] - Removed Network Portal: %s:%hu,%hu on %s\n",
   tpg->tpg_tiqn->tiqn, np->np_ip, np->np_port, tpg->tpgt,
-- 
1.7.1