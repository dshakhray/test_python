From db3f510279ce9bf5f3660a10f82c98eb8b0aa950 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:39:21 -0400
Subject: [ethernet] i40e: Fix ethtool coalesce settings

Message-id: <1409658042-22689-201-git-send-email-sassmann@redhat.com>
Patchwork-id: 90394
O-Subject: [RHEL7.1 PATCH 200/281] i40e: Fix ethtool coalesce settings
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Carolyn Wyborny <carolyn.wyborny@intel.com>

This patch fixes the i40e_set_coalesce function to allow 0 as a disable
value.  Also, added message to user about invalid value and provides valid
range.

Change-ID: I6c9ff11a9861f2045bd543745a3d132999ffbbd8
Signed-off-by: Carolyn Wyborny <carolyn.wyborny@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 5c2cebda438b888147f6dfd6d1423432d837c0ea)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index 817e179..07811dd 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -617,6 +617,7 @@ static inline void i40e_dbg_init(void) {}
 static inline void i40e_dbg_exit(void) {}
 #endif /* CONFIG_DEBUG_FS*/
 void i40e_irq_dynamic_enable(struct i40e_vsi *vsi, int vector);
+void i40e_irq_dynamic_disable(struct i40e_vsi *vsi, int vector);
 void i40e_irq_dynamic_disable_icr0(struct i40e_pf *pf);
 void i40e_irq_dynamic_enable_icr0(struct i40e_pf *pf);
 int i40e_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd);
diff --git a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index b08290d..2ea71c2 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@ -1105,17 +1105,36 @@ static int i40e_set_coalesce(struct net_device *netdev,
  if (ec->tx_max_coalesced_frames_irq || ec->rx_max_coalesced_frames_irq)
   vsi->work_limit = ec->tx_max_coalesced_frames_irq;
 
+ vector = vsi->base_vector;
  if ((ec->rx_coalesce_usecs >= (I40E_MIN_ITR << 1)) &&
-     (ec->rx_coalesce_usecs <= (I40E_MAX_ITR << 1)))
+     (ec->rx_coalesce_usecs <= (I40E_MAX_ITR << 1))) {
   vsi->rx_itr_setting = ec->rx_coalesce_usecs;
- else
+ } else if (ec->rx_coalesce_usecs == 0) {
+  vsi->rx_itr_setting = ec->rx_coalesce_usecs;
+  i40e_irq_dynamic_disable(vsi, vector);
+  if (ec->use_adaptive_rx_coalesce)
+   netif_info(pf, drv, netdev,
+       "Rx-secs=0, need to disable adaptive-Rx for a complete disable\n");
+ } else {
+  netif_info(pf, drv, netdev,
+      "Invalid value, Rx-usecs range is 0, 8-8160\n");
   return -EINVAL;
+ }
 
  if ((ec->tx_coalesce_usecs >= (I40E_MIN_ITR << 1)) &&
-     (ec->tx_coalesce_usecs <= (I40E_MAX_ITR << 1)))
+     (ec->tx_coalesce_usecs <= (I40E_MAX_ITR << 1))) {
   vsi->tx_itr_setting = ec->tx_coalesce_usecs;
- else
+ } else if (ec->tx_coalesce_usecs == 0) {
+  vsi->tx_itr_setting = ec->tx_coalesce_usecs;
+  i40e_irq_dynamic_disable(vsi, vector);
+  if (ec->use_adaptive_tx_coalesce)
+   netif_info(pf, drv, netdev,
+       "Tx-secs=0, need to disable adaptive-Tx for a complete disable\n");
+ } else {
+  netif_info(pf, drv, netdev,
+      "Invalid value, Tx-usecs range is 0, 8-8160\n");
   return -EINVAL;
+ }
 
  if (ec->use_adaptive_rx_coalesce)
   vsi->rx_itr_setting |= I40E_ITR_DYNAMIC;
@@ -1127,7 +1146,6 @@ static int i40e_set_coalesce(struct net_device *netdev,
  else
   vsi->tx_itr_setting &= ~I40E_ITR_DYNAMIC;
 
- vector = vsi->base_vector;
  for (i = 0; i < vsi->num_q_vectors; i++, vector++) {
   q_vector = vsi->q_vectors[i];
   q_vector->rx.itr = ITR_TO_REG(vsi->rx_itr_setting);
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 4cbdd7a..093ac68 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -2768,6 +2768,22 @@ void i40e_irq_dynamic_enable(struct i40e_vsi *vsi, int vector)
 }
 
 /**
+ * i40e_irq_dynamic_disable - Disable default interrupt generation settings
+ * @vsi: pointer to a vsi
+ * @vector: enable a particular Hw Interrupt vector
+ **/
+void i40e_irq_dynamic_disable(struct i40e_vsi *vsi, int vector)
+{
+ struct i40e_pf *pf = vsi->back;
+ struct i40e_hw *hw = &pf->hw;
+ u32 val;
+
+ val = I40E_ITR_NONE << I40E_PFINT_DYN_CTLN_ITR_INDX_SHIFT;
+ wr32(hw, I40E_PFINT_DYN_CTLN(vector - 1), val);
+ i40e_flush(hw);
+}
+
+/**
  * i40e_msix_clean_rings - MSIX mode Interrupt Handler
  * @irq: interrupt number
  * @data: pointer to a q_vector
-- 
1.7.1