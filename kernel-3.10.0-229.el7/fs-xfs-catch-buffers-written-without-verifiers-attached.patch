From 161fa260d0bd3264b60115678d7f10f68e5f176a Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 21:00:29 -0400
Subject: [fs] xfs: catch buffers written without verifiers attached

Message-id: <1412888441-4181-36-git-send-email-sandeen@redhat.com>
Patchwork-id: 97319
O-Subject: [RHEL7.1 PATCH 35/47] [fs] xfs: catch buffers written without verifiers attached
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit 400b9d88757c0bfbdfa97014e090ec40a31c1282
    Author: Dave Chinner <dchinner@redhat.com>
    Date:   Mon Aug 4 12:42:40 2014 +1000

    xfs: catch buffers written without verifiers attached

    We recently had a bug where buffers were slipping through log
    recovery without any verifier attached to them. This was resulting
    in on-disk CRC mismatches for valid data. Add some warning code to
    catch this occurrence so that we catch such bugs during development
    rather than not being aware they exist.

    Note that we cannot do this verification unconditionally as non-CRC
    filesystems don't always attach verifiers to the buffers being
    written. e.g. during log recovery we cannot identify all the
    different types of buffers correctly on non-CRC filesystems, so we
    can't attach the correct verifiers in all cases and so we don't
    attach any. Hence we don't want on non-CRC filesystems to avoid
    spamming the logs with false indications.

    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_buf.c b/fs/xfs/xfs_buf.c
index dbb69f0..9edc0e5 100644
--- a/fs/xfs/xfs_buf.c
+++ b/fs/xfs/xfs_buf.c
@@ -1352,6 +1352,20 @@ _xfs_buf_ioapply(
          SHUTDOWN_CORRUPT_INCORE);
     return;
    }
+  } else if (bp->b_bn != XFS_BUF_DADDR_NULL) {
+   struct xfs_mount *mp = bp->b_target->bt_mount;
+
+   /*
+    * non-crc filesystems don't attach verifiers during
+    * log recovery, so don't warn for such filesystems.
+    */
+   if (xfs_sb_version_hascrc(&mp->m_sb)) {
+    xfs_warn(mp,
+     "%s: no ops on block 0x%llx/0x%x",
+     __func__, bp->b_bn, bp->b_length);
+    xfs_hex_dump(bp->b_addr, 64);
+    dump_stack();
+   }
   }
  } else if (bp->b_flags & XBF_READ_AHEAD) {
   rw = READA;
diff --git a/fs/xfs/xfs_log.c b/fs/xfs/xfs_log.c
index a5f8bd9..eec89fc 100644
--- a/fs/xfs/xfs_log.c
+++ b/fs/xfs/xfs_log.c
@@ -1369,8 +1369,14 @@ xlog_alloc_log(
 
  xlog_get_iclog_buffer_size(mp, log);
 
+ /*
+  * Use a NULL block for the extra log buffer used during splits so that
+  * it will trigger errors if we ever try to do IO on it without first
+  * having set it up properly.
+  */
  error = ENOMEM;
- bp = xfs_buf_alloc(mp->m_logdev_targp, 0, BTOBB(log->l_iclog_size), 0);
+ bp = xfs_buf_alloc(mp->m_logdev_targp, XFS_BUF_DADDR_NULL,
+      BTOBB(log->l_iclog_size), 0);
  if (!bp)
   goto out_free_log;
 
-- 
1.7.1