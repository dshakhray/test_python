From f868ce27d33b3e0f1e48e3459efc4deb1a58580f Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:03:33 -0400
Subject: [fs] btrfs: add dev maxs limit for __btrfs_alloc_chunk in kernel space

Message-id: <1407179109-13714-327-git-send-email-sandeen@redhat.com>
Patchwork-id: 87174
O-Subject: [RHEL7.1 PATCH 326/422] btrfs: add dev maxs limit for __btrfs_alloc_chunk in kernel space
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Gui Hecheng <guihc.fnst@cn.fujitsu.com>

commit 23f8f9b7caca83d3397b1288a519c6579b7fda88
Author: Gui Hecheng <guihc.fnst@cn.fujitsu.com>
Date:   Mon Apr 21 20:13:12 2014 +0800

    btrfs: add dev maxs limit for __btrfs_alloc_chunk in kernel space

    For RAID0,5,6,10,
    For system chunk, there shouldn't be too many stripes to
    make a btrfs_chunk that exceeds BTRFS_SYSTEM_CHUNK_ARRAY_SIZE
    For data/meta chunk, there shouldn't be too many stripes to
    make a btrfs_chunk that exceeds a leaf.

    Signed-off-by: Gui Hecheng <guihc.fnst@cn.fujitsu.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/volumes.c b/fs/btrfs/volumes.c
index 9ab1512..1e17bf3 100644
--- a/fs/btrfs/volumes.c
+++ b/fs/btrfs/volumes.c
@@ -4027,6 +4027,16 @@ static void check_raid56_incompat_flag(struct btrfs_fs_info *info, u64 type)
  btrfs_set_fs_incompat(info, RAID56);
 }
 
+#define BTRFS_MAX_DEVS(r) ((BTRFS_LEAF_DATA_SIZE(r)  \
+   - sizeof(struct btrfs_item)  \
+   - sizeof(struct btrfs_chunk))  \
+   / sizeof(struct btrfs_stripe) + 1)
+
+#define BTRFS_MAX_DEVS_SYS_CHUNK ((BTRFS_SYSTEM_CHUNK_ARRAY_SIZE \
+    - 2 * sizeof(struct btrfs_disk_key) \
+    - 2 * sizeof(struct btrfs_chunk)) \
+    / sizeof(struct btrfs_stripe) + 1)
+
 static int __btrfs_alloc_chunk(struct btrfs_trans_handle *trans,
           struct btrfs_root *extent_root, u64 start,
           u64 type)
@@ -4076,6 +4086,8 @@ static int __btrfs_alloc_chunk(struct btrfs_trans_handle *trans,
  if (type & BTRFS_BLOCK_GROUP_DATA) {
   max_stripe_size = 1024 * 1024 * 1024;
   max_chunk_size = 10 * max_stripe_size;
+  if (!devs_max)
+   devs_max = BTRFS_MAX_DEVS(info->chunk_root);
  } else if (type & BTRFS_BLOCK_GROUP_METADATA) {
   /* for larger filesystems, use larger metadata chunks */
   if (fs_devices->total_rw_bytes > 50ULL * 1024 * 1024 * 1024)
@@ -4083,9 +4095,13 @@ static int __btrfs_alloc_chunk(struct btrfs_trans_handle *trans,
   else
    max_stripe_size = 256 * 1024 * 1024;
   max_chunk_size = max_stripe_size;
+  if (!devs_max)
+   devs_max = BTRFS_MAX_DEVS(info->chunk_root);
  } else if (type & BTRFS_BLOCK_GROUP_SYSTEM) {
   max_stripe_size = 32 * 1024 * 1024;
   max_chunk_size = 2 * max_stripe_size;
+  if (!devs_max)
+   devs_max = BTRFS_MAX_DEVS_SYS_CHUNK;
  } else {
   btrfs_err(info, "invalid chunk type 0x%llx requested\n",
          type);
-- 
1.7.1