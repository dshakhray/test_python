From 79b357101cc9f2b8c55587d735b404f6905c2fba Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:02:31 -0400
Subject: [usb] xhci: replace 'event' with 'cmd_comp_code' in set_deq and reset_ep handlers

Message-id: <1410887463-20674-80-git-send-email-dzickus@redhat.com>
Patchwork-id: 95186
O-Subject: [RHEL7 PATCH 079/591] xhci: replace 'event' with 'cmd_comp_code' in set_deq and reset_ep handlers
Bugzilla: 1032371
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1032371

commit c69a059783b241c42188d472e2e9460d3cd4a4cc
Author: Xenia Ragiadakou <burzalodowa@gmail.com>
Date:   Mon Sep 9 13:30:01 2013 +0300

    xhci: replace 'event' with 'cmd_comp_code' in set_deq and reset_ep handlers

    This patch replaces the 'event' argument of xhci_handle_cmd_set_deq() and
    xhci_handle_cmd_reset_ep(), which is used to retrieve the command completion
    status code, with the cmd_comp_code directly, since it is available.

    Signed-off-by: Xenia Ragiadakou <burzalodowa@gmail.com>
    Acked-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index 3a2bf36..afcaa4e 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -1073,7 +1073,7 @@ static void update_ring_for_set_deq_completion(struct xhci_hcd *xhci,
  * cancellations pending.
  */
 static void xhci_handle_cmd_set_deq(struct xhci_hcd *xhci, int slot_id,
-  struct xhci_event_cmd *event, union xhci_trb *trb)
+  union xhci_trb *trb, u32 cmd_comp_code)
 {
  unsigned int ep_index;
  unsigned int stream_id;
@@ -1099,11 +1099,11 @@ static void xhci_handle_cmd_set_deq(struct xhci_hcd *xhci, int slot_id,
  ep_ctx = xhci_get_ep_ctx(xhci, dev->out_ctx, ep_index);
  slot_ctx = xhci_get_slot_ctx(xhci, dev->out_ctx);
 
- if (GET_COMP_CODE(le32_to_cpu(event->status)) != COMP_SUCCESS) {
+ if (cmd_comp_code != COMP_SUCCESS) {
   unsigned int ep_state;
   unsigned int slot_state;
 
-  switch (GET_COMP_CODE(le32_to_cpu(event->status))) {
+  switch (cmd_comp_code) {
   case COMP_TRB_ERR:
    xhci_warn(xhci, "WARN Set TR Deq Ptr cmd invalid because "
      "of stream ID configuration\n");
@@ -1126,7 +1126,7 @@ static void xhci_handle_cmd_set_deq(struct xhci_hcd *xhci, int slot_id,
   default:
    xhci_warn(xhci, "WARN Set TR Deq Ptr cmd with unknown "
      "completion code of %u.\n",
-      GET_COMP_CODE(le32_to_cpu(event->status)));
+      cmd_comp_code);
    break;
   }
   /* OK what do we do now?  The endpoint state is hosed, and we
@@ -1164,7 +1164,7 @@ static void xhci_handle_cmd_set_deq(struct xhci_hcd *xhci, int slot_id,
 }
 
 static void xhci_handle_cmd_reset_ep(struct xhci_hcd *xhci, int slot_id,
-  struct xhci_event_cmd *event, union xhci_trb *trb)
+  union xhci_trb *trb, u32 cmd_comp_code)
 {
  unsigned int ep_index;
 
@@ -1173,8 +1173,7 @@ static void xhci_handle_cmd_reset_ep(struct xhci_hcd *xhci, int slot_id,
   * but we don't care.
   */
  xhci_dbg_trace(xhci, trace_xhci_dbg_reset_ep,
-  "Ignoring reset ep completion code of %u",
-   GET_COMP_CODE(le32_to_cpu(event->status)));
+  "Ignoring reset ep completion code of %u", cmd_comp_code);
 
  /* HW with the reset endpoint quirk needs to have a configure endpoint
   * command complete before the endpoint can be used.  Queue that here
@@ -1576,14 +1575,14 @@ static void handle_cmd_completion(struct xhci_hcd *xhci,
  case TRB_SET_DEQ:
   WARN_ON(slot_id != TRB_TO_SLOT_ID(
     le32_to_cpu(cmd_trb->generic.field[3])));
-  xhci_handle_cmd_set_deq(xhci, slot_id, event, cmd_trb);
+  xhci_handle_cmd_set_deq(xhci, slot_id, cmd_trb, cmd_comp_code);
   break;
  case TRB_CMD_NOOP:
   break;
  case TRB_RESET_EP:
   WARN_ON(slot_id != TRB_TO_SLOT_ID(
     le32_to_cpu(cmd_trb->generic.field[3])));
-  xhci_handle_cmd_reset_ep(xhci, slot_id, event, cmd_trb);
+  xhci_handle_cmd_reset_ep(xhci, slot_id, cmd_trb, cmd_comp_code);
   break;
  case TRB_RESET_DEV:
   WARN_ON(slot_id != TRB_TO_SLOT_ID(
-- 
1.7.1