From 4813d26be5937c03a1512844314104b5a18f1cca Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sat, 19 Jul 2014 04:27:21 -0400
Subject: [pci] Allocate 64-bit BARs above 4G when possible

Message-id: <20140719042720.19438.27070.stgit@gir.stowe>
Patchwork-id: 86006
O-Subject: [RHEL7.1 PATCH 44/81] PCI: Allocate 64-bit BARs above 4G when possible
Bugzilla: 1110895
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110895
Upstream Status: d56dbf5bab8ce44c5407bb099f71987f58d18bb4

commit d56dbf5bab8ce44c5407bb099f71987f58d18bb4
Author: Yinghai Lu <yinghai@kernel.org>
Date:   Fri Dec 20 10:55:44 2013 -0700

    PCI: Allocate 64-bit BARs above 4G when possible

    Try to allocate space for 64-bit BARs above 4G first, to preserve the space
    below 4G for 32-bit BARs.  If there's no space above 4G available, fall
    back to allocating anywhere.

    [bhelgaas: reworked starting from http://lkml.kernel.org/r/1387485843-17403-2-git-send-email-yinghai@kernel.org]
    Signed-off-by: Yinghai Lu <yinghai@kernel.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/bus.c b/drivers/pci/bus.c
index b6b4bc1..00660cc 100644
--- a/drivers/pci/bus.c
+++ b/drivers/pci/bus.c
@@ -102,6 +102,8 @@ static struct pci_bus_region pci_32_bit = {0, 0xffffffffULL};
 #ifdef CONFIG_ARCH_DMA_ADDR_T_64BIT
 static struct pci_bus_region pci_64_bit = {0,
     (dma_addr_t) 0xffffffffffffffffULL};
+static struct pci_bus_region pci_high = {(dma_addr_t) 0x100000000ULL,
+    (dma_addr_t) 0xffffffffffffffffULL};
 #endif
 
 /*
@@ -198,8 +200,7 @@ static int pci_bus_alloc_from_region(struct pci_bus *bus, struct resource *res,
  * alignment and type, try to find an acceptable resource allocation
  * for a specific device resource.
  */
-int
-pci_bus_alloc_resource(struct pci_bus *bus, struct resource *res,
+int pci_bus_alloc_resource(struct pci_bus *bus, struct resource *res,
   resource_size_t size, resource_size_t align,
   resource_size_t min, unsigned int type_mask,
   resource_size_t (*alignf)(void *,
@@ -209,10 +210,19 @@ pci_bus_alloc_resource(struct pci_bus *bus, struct resource *res,
   void *alignf_data)
 {
 #ifdef CONFIG_ARCH_DMA_ADDR_T_64BIT
- if (res->flags & IORESOURCE_MEM_64)
+ int rc;
+
+ if (res->flags & IORESOURCE_MEM_64) {
+  rc = pci_bus_alloc_from_region(bus, res, size, align, min,
+            type_mask, alignf, alignf_data,
+            &pci_high);
+  if (rc == 0)
+   return 0;
+
   return pci_bus_alloc_from_region(bus, res, size, align, min,
        type_mask, alignf, alignf_data,
        &pci_64_bit);
+ }
 #endif
 
  return pci_bus_alloc_from_region(bus, res, size, align, min,
-- 
1.7.1