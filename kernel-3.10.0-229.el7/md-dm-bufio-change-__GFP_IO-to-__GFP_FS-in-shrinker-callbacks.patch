From a4d338248a340b5aa6db6471f57b0e5a499025c9 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Thu, 23 Oct 2014 20:01:14 -0400
Subject: [md] dm-bufio: change __GFP_IO to __GFP_FS in shrinker callbacks

Message-id: <1414094494-22068-5-git-send-email-snitzer@redhat.com>
Patchwork-id: 98354
O-Subject: [RHEL7.2 PATCH 04/24] dm bufio: change __GFP_IO to __GFP_FS in shrinker callbacks
Bugzilla: 1156161
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1156161

RHEL7 doesn't have the same shrinker callbacks as upstream so this patch
had to be adjusted accordingly.

Upstream linux-dm.git commit 9d28eb12447ee08bb5d1e8bb3195cf20e1ecd1c0
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Thu Oct 16 14:45:20 2014 -0400

    dm bufio: change __GFP_IO to __GFP_FS in shrinker callbacks

    The shrinker uses gfp flags to indicate what kind of operation can the
    driver wait for. If __GFP_IO flag is present, the driver can wait for
    block I/O operations, if __GFP_FS flag is present, the driver can wait on
    operations involving the filesystem.

    dm-bufio tested for __GFP_IO. However, dm-bufio can run on a loop block
    device that makes calls into the filesystem. If __GFP_IO is present and
    __GFP_FS isn't, dm-bufio could still block on filesystem operations if it
    runs on a loop block device.

    The change from __GFP_IO to __GFP_FS supposedly fixes one observed (though
    unreproducible) deadlock involving dm-bufio and loop device.

    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-bufio.c b/drivers/md/dm-bufio.c
index 148d46f..8584965 100644
--- a/drivers/md/dm-bufio.c
+++ b/drivers/md/dm-bufio.c
@@ -1448,9 +1448,9 @@ static void drop_buffers(struct dm_bufio_client *c)
 
 /*
  * Test if the buffer is unused and too old, and commit it.
- * At if noio is set, we must not do any I/O because we hold
- * dm_bufio_clients_lock and we would risk deadlock if the I/O gets rerouted to
- * different bufio client.
+ * And if GFP_NOFS is used, we must not do any I/O because we hold
+ * dm_bufio_clients_lock and we would risk deadlock if the I/O gets
+ * rerouted to different bufio client.
  */
 static int __cleanup_old_buffer(struct dm_buffer *b, gfp_t gfp,
     unsigned long max_jiffies)
@@ -1458,7 +1458,7 @@ static int __cleanup_old_buffer(struct dm_buffer *b, gfp_t gfp,
  if (jiffies - b->last_accessed < max_jiffies)
   return 0;
 
- if (!(gfp & __GFP_IO)) {
+ if (!(gfp & __GFP_FS)) {
   if (test_bit(B_READING, &b->state) ||
       test_bit(B_WRITING, &b->state) ||
       test_bit(B_DIRTY, &b->state))
@@ -1499,7 +1499,7 @@ static int shrink(struct shrinker *shrinker, struct shrink_control *sc)
  unsigned long r;
  unsigned long nr_to_scan = sc->nr_to_scan;
 
- if (sc->gfp_mask & __GFP_IO)
+ if (sc->gfp_mask & __GFP_FS)
   dm_bufio_lock(c);
  else if (!dm_bufio_trylock(c))
   return !nr_to_scan ? 0 : -1;
-- 
1.7.1