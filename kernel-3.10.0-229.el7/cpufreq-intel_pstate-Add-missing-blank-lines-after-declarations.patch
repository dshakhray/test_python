From e8579c2be208e21e4943074d81bc47809f4042e7 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:28 -0400
Subject: [cpufreq] intel_pstate: Add missing blank lines after declarations

Message-id: <1409235879-1283-175-git-send-email-prarit@redhat.com>
Patchwork-id: 89498
O-Subject: [RHEL7.1 PATCH BZ 1134639 174/185] cpufreq: intel_pstate: Add missing blank lines after declarations
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 845c1cbef08c87d2a4e7ca3c82ac2363637fdcb9
Author: Stratos Karafotis <stratosk@semaphore.gr>
Date:   Fri Jul 18 08:37:19 2014 -0700

    cpufreq: intel_pstate: Add missing blank lines after declarations

    Also, remove unnecessary blank lines.

    Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index a874890..18f3e6f 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -37,7 +37,6 @@
 #define BYT_TURBO_RATIOS 0x66c
 #define BYT_TURBO_VIDS  0x66d
 
-
 #define FRAC_BITS 8
 #define int_tofp(X) ((int64_t)(X) << FRAC_BITS)
 #define fp_toint(X) ((X) >> FRAC_BITS)
@@ -167,7 +166,6 @@ static inline void pid_i_gain_set(struct _pid *pid, int percent)
 
 static inline void pid_d_gain_set(struct _pid *pid, int percent)
 {
-
  pid->d_gain = div_fp(int_tofp(percent), int_tofp(100));
 }
 
@@ -213,6 +211,7 @@ static inline void intel_pstate_busy_pid_reset(struct cpudata *cpu)
 static inline void intel_pstate_reset_all_pid(void)
 {
  unsigned int cpu;
+
  for_each_online_cpu(cpu) {
   if (all_cpu_data[cpu])
    intel_pstate_busy_pid_reset(all_cpu_data[cpu]);
@@ -226,6 +225,7 @@ static int pid_param_set(void *data, u64 val)
  intel_pstate_reset_all_pid();
  return 0;
 }
+
 static int pid_param_get(void *data, u64 *val)
 {
  *val = *(u32 *)data;
@@ -279,6 +279,7 @@ static ssize_t store_no_turbo(struct kobject *a, struct attribute *b,
 {
  unsigned int input;
  int ret;
+
  ret = sscanf(buf, "%u", &input);
  if (ret != 1)
   return -EINVAL;
@@ -295,6 +296,7 @@ static ssize_t store_max_perf_pct(struct kobject *a, struct attribute *b,
 {
  unsigned int input;
  int ret;
+
  ret = sscanf(buf, "%u", &input);
  if (ret != 1)
   return -EINVAL;
@@ -302,6 +304,7 @@ static ssize_t store_max_perf_pct(struct kobject *a, struct attribute *b,
  limits.max_sysfs_pct = clamp_t(int, input, 0 , 100);
  limits.max_perf_pct = min(limits.max_policy_pct, limits.max_sysfs_pct);
  limits.max_perf = div_fp(int_tofp(limits.max_perf_pct), int_tofp(100));
+
  return count;
 }
 
@@ -310,6 +313,7 @@ static ssize_t store_min_perf_pct(struct kobject *a, struct attribute *b,
 {
  unsigned int input;
  int ret;
+
  ret = sscanf(buf, "%u", &input);
  if (ret != 1)
   return -EINVAL;
@@ -354,6 +358,7 @@ static void __init intel_pstate_sysfs_expose_params(void)
 static int byt_get_min_pstate(void)
 {
  u64 value;
+
  rdmsrl(BYT_RATIOS, value);
  return (value >> 8) & 0x7F;
 }
@@ -361,6 +366,7 @@ static int byt_get_min_pstate(void)
 static int byt_get_max_pstate(void)
 {
  u64 value;
+
  rdmsrl(BYT_RATIOS, value);
  return (value >> 16) & 0x7F;
 }
@@ -368,6 +374,7 @@ static int byt_get_max_pstate(void)
 static int byt_get_turbo_pstate(void)
 {
  u64 value;
+
  rdmsrl(BYT_TURBO_RATIOS, value);
  return value & 0x7F;
 }
@@ -401,7 +408,6 @@ static void byt_get_vid(struct cpudata *cpudata)
 {
  u64 value;
 
-
  rdmsrl(BYT_VIDS, value);
  cpudata->vid.min = int_tofp((value >> 8) & 0x7f);
  cpudata->vid.max = int_tofp((value >> 16) & 0x7f);
@@ -414,10 +420,10 @@ static void byt_get_vid(struct cpudata *cpudata)
  cpudata->vid.turbo = value & 0x7f;
 }
 
-
 static int core_get_min_pstate(void)
 {
  u64 value;
+
  rdmsrl(MSR_PLATFORM_INFO, value);
  return (value >> 40) & 0xFF;
 }
@@ -425,6 +431,7 @@ static int core_get_min_pstate(void)
 static int core_get_max_pstate(void)
 {
  u64 value;
+
  rdmsrl(MSR_PLATFORM_INFO, value);
  return (value >> 8) & 0xFF;
 }
@@ -433,6 +440,7 @@ static int core_get_turbo_pstate(void)
 {
  u64 value;
  int nont, ret;
+
  rdmsrl(MSR_NHM_TURBO_RATIO_LIMIT, value);
  nont = core_get_max_pstate();
  ret = (value) & 255;
@@ -487,12 +495,12 @@ static struct cpu_defaults byt_params = {
  },
 };
 
-
 static void intel_pstate_get_min_max(struct cpudata *cpu, int *min, int *max)
 {
  int max_perf = cpu->pstate.turbo_pstate;
  int max_perf_adj;
  int min_perf;
+
  if (limits.no_turbo)
   max_perf = cpu->pstate.max_pstate;
 
-- 
1.7.1