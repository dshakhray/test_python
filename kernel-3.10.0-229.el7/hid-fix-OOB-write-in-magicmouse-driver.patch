From 1baef12917374e751d347aa186d5e8b19933230a Mon Sep 17 00:00:00 2001
From: Jacob Tanenbaum <jtanenba@redhat.com>
Date: Thu, 25 Sep 2014 13:07:16 -0400
Subject: [hid] fix OOB write in magicmouse driver

Message-id: <1411650436-12138-1-git-send-email-jtanenba@redhat.com>
Patchwork-id: 96718
O-Subject: [RHEL7 PATCH BZ1141177 CVE-2014-3181] Kernel: HID: OOB write in magicmouse driver
Bugzilla: 1141177
CVE: CVE-2014-3181
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Linux kernel built with the Human Interface Device(HID) Bus support(CONFIG_HID)
along with a driver for Apple Magic Mouse/Trackpad multi-touch, is vulnerable
to an OOB write flaw. It could occur if a device offers an HID report of
arbitrary length.

A local user with physical access to the system could use this flaw to crash
the system resulting in DoS or potentially, escalate their privileges on the
system.

Backport of the following:
commit c54def7bd64d7c0b6993336abcffb8444795bf38
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Aug 27 09:12:24 2014 +0200

HID: magicmouse: sanity check report size in raw_event() callback

The report passed to us from transport driver could potentially be
arbitrarily large, therefore we better sanity-check it so that
magicmouse_emit_touch() gets only valid values of raw_id.

BUGZILLA: https://bugzilla.redhat.com/show_bug.cgi?id=1141177
BREW: https://brewweb.devel.redhat.com/taskinfo?taskID=8004828
BEAKER: https://beaker.engineering.redhat.com/jobs/756381

No issues seen in Brew build or Beaker tests. It is a known issue that
test case "/kernel/RHEL7/perf/sanity/test" fails sporadically.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/hid/hid-magicmouse.c b/drivers/hid/hid-magicmouse.c
index 5bc3734..c24f3df 100644
--- a/drivers/hid/hid-magicmouse.c
+++ b/drivers/hid/hid-magicmouse.c
@@ -290,6 +290,11 @@ static int magicmouse_raw_event(struct hid_device *hdev,
   if (size < 4 || ((size - 4) % 9) != 0)
    return 0;
   npoints = (size - 4) / 9;
+  if (npoints > 15) {
+   hid_warn(hdev, "invalid size value (%d) for TRACKPAD_REPORT_ID\n",
+     size);
+   return 0;
+  }
   msc->ntouches = 0;
   for (ii = 0; ii < npoints; ii++)
    magicmouse_emit_touch(msc, ii, data + ii * 9 + 4);
@@ -307,6 +312,11 @@ static int magicmouse_raw_event(struct hid_device *hdev,
   if (size < 6 || ((size - 6) % 8) != 0)
    return 0;
   npoints = (size - 6) / 8;
+  if (npoints > 15) {
+   hid_warn(hdev, "invalid size value (%d) for MOUSE_REPORT_ID\n",
+     size);
+   return 0;
+  }
   msc->ntouches = 0;
   for (ii = 0; ii < npoints; ii++)
    magicmouse_emit_touch(msc, ii, data + ii * 8 + 6);
-- 
1.7.1