From a81f1a599686d50f5edef5440a456fa8dd2daf0e Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:33:12 -0400
Subject: [fs] nfs: Fail the truncate() if the lock/open stateid is invalid

Message-id: <1403796815-28580-7-git-send-email-steved@redhat.com>
Patchwork-id: 84860
O-Subject: [RHEL7.1 PATCH 06/29] NFSv4: Fail the truncate() if the lock/open stateid is invalid
Bugzilla: 1111170
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

If the open stateid could not be recovered, or the file locks were lost,
then we should fail the truncate() operation altogether.

Reported-by: Andy Adamson <andros@netapp.com>
Link: http://lkml.kernel.org/r/1393954269-3974-1-git-send-email-andros@netapp.com
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 0418dae1056d6091e9527b7158a3763f7aa92353
Bugzilla: 1111170
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 8541347..11a4c73 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -2399,13 +2399,16 @@ static int _nfs4_do_setattr(struct inode *inode, struct rpc_cred *cred,
 
  if (nfs4_copy_delegation_stateid(&arg.stateid, inode, fmode)) {
   /* Use that stateid */
- } else if (truncate && state != NULL && nfs4_valid_open_stateid(state)) {
+ } else if (truncate && state != NULL) {
   struct nfs_lockowner lockowner = {
    .l_owner = current->files,
    .l_pid = current->tgid,
   };
-  nfs4_select_rw_stateid(&arg.stateid, state, FMODE_WRITE,
-    &lockowner);
+  if (!nfs4_valid_open_stateid(state))
+   return -EBADF;
+  if (nfs4_select_rw_stateid(&arg.stateid, state, FMODE_WRITE,
+    &lockowner) == -EIO)
+   return -EBADF;
  } else
   nfs4_stateid_copy(&arg.stateid, &zero_stateid);
 
-- 
1.7.1