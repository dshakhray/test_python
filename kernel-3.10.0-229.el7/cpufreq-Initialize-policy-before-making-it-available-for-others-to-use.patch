From 11a9aeaf24e5876f5e4c192c8945c18c1a826adc Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:31 -0400
Subject: [cpufreq] Initialize policy before making it available for others to use

Message-id: <1409235879-1283-118-git-send-email-prarit@redhat.com>
Patchwork-id: 89514
O-Subject: [RHEL7.1 PATCH BZ 1134639 117/185] cpufreq: Initialize policy before making it available for others to use
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 5a7e56a5d29071bcccd947dee6e3b9f8e4eb3309
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Mar 4 11:44:00 2014 +0800

    cpufreq: Initialize policy before making it available for others to use

    Policy must be fully initialized before it is being made available
    for use by others. Otherwise cpufreq_cpu_get() would be able to grab
    a half initialized policy structure that might not have affected_cpus
    (for example) populated. Then, anybody accessing those fields will get
    a wrong value and that will lead to unpredictable results.

    In order to fix this, do all the necessary initialization before we
    make the policy structure available via cpufreq_cpu_get(). That will
    guarantee that any code accessing fields of the policy will get
    correct data from them.

    Reported-by: Saravana Kannan <skannan@codeaurora.org>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    [rjw: Changelog]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index e535381..e690efe 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1103,6 +1103,20 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   goto err_set_policy_cpu;
  }
 
+ /* related cpus should atleast have policy->cpus */
+ cpumask_or(policy->related_cpus, policy->related_cpus, policy->cpus);
+
+ /*
+  * affected cpus must always be the one, which are online. We aren't
+  * managing offline cpus here.
+  */
+ cpumask_and(policy->cpus, policy->cpus, cpu_online_mask);
+
+ if (!frozen) {
+  policy->user_policy.min = policy->min;
+  policy->user_policy.max = policy->max;
+ }
+
  write_lock_irqsave(&cpufreq_driver_lock, flags);
  for_each_cpu(j, policy->cpus)
   per_cpu(cpufreq_cpu_data, j) = policy;
@@ -1156,20 +1170,6 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   }
  }
 
- /* related cpus should atleast have policy->cpus */
- cpumask_or(policy->related_cpus, policy->related_cpus, policy->cpus);
-
- /*
-  * affected cpus must always be the one, which are online. We aren't
-  * managing offline cpus here.
-  */
- cpumask_and(policy->cpus, policy->cpus, cpu_online_mask);
-
- if (!frozen) {
-  policy->user_policy.min = policy->min;
-  policy->user_policy.max = policy->max;
- }
-
  blocking_notifier_call_chain(&cpufreq_policy_notifier_list,
          CPUFREQ_START, policy);
 
-- 
1.7.1