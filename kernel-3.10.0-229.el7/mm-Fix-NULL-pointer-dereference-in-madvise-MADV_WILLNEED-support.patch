From 74a9c37b75bf87dd42a676e0f16c5375bcd298e5 Mon Sep 17 00:00:00 2001
From: Jan Stancek <jstancek@redhat.com>
Date: Mon, 18 Aug 2014 16:38:40 -0400
Subject: [mm] Fix NULL pointer dereference in madvise(MADV_WILLNEED) support

Message-id: <c93212a20da87ceb97a61cc001f9eea377ec256f.1408379783.git.jstancek@redhat.com>
Patchwork-id: 87864
O-Subject: [RHEL 7.1 PATCH] mm: Fix NULL pointer dereference in madvise(MADV_WILLNEED) support
Bugzilla: 1072385
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Luiz Capitulino <lcapitulino@redhat.com>

Bugzilla: 1072385
Upstream Status: linux.git commit ee53664bda169f519ce3c6a22d378f0b946c8178
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7823781
Tested: with reproducer for BZ 1072385 (madvise05 in LTP),
        reproducer for BZ 1090249 (DUP) and KernelTier1 job

commit ee53664bda169f519ce3c6a22d378f0b946c8178
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Fri Dec 20 15:10:03 2013 +0200
    mm: Fix NULL pointer dereference in madvise(MADV_WILLNEED) support

    Sasha Levin found a NULL pointer dereference that is due to a missing
    page table lock, which in turn is due to the pmd entry in question being
    a transparent huge-table entry.

    The code - introduced in commit 1998cc048901 ("mm: make
    madvise(MADV_WILLNEED) support swap file prefetch") - correctly checks
    for this situation using pmd_none_or_trans_huge_or_clear_bad(), but it
    turns out that that function doesn't work correctly.

    pmd_none_or_trans_huge_or_clear_bad() expected that pmd_bad() would
    trigger if the transparent hugepage bit was set, but it doesn't do that
    if pmd_numa() is also set. Note that the NUMA bit only gets set on real
    NUMA machines, so people trying to reproduce this on most normal
    development systems would never actually trigger this.

    Fix it by removing the very subtle (and subtly incorrect) expectation,
    and instead just checking pmd_trans_huge() explicitly.

    Reported-by: Sasha Levin <sasha.levin@oracle.com>
    Acked-by: Andrea Arcangeli <aarcange@redhat.com>
    [ Additionally remove the now stale test for pmd_trans_huge() inside the
      pmd_bad() case - Linus ]
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Jan Stancek <jstancek@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/asm-generic/pgtable.h b/include/asm-generic/pgtable.h
index 9a87860..52e84dd 100644
--- a/include/asm-generic/pgtable.h
+++ b/include/asm-generic/pgtable.h
@@ -563,11 +563,10 @@ static inline int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
  barrier();
 #endif
- if (pmd_none(pmdval))
+ if (pmd_none(pmdval) || pmd_trans_huge(pmdval))
   return 1;
  if (unlikely(pmd_bad(pmdval))) {
-  if (!pmd_trans_huge(pmdval))
-   pmd_clear_bad(pmd);
+  pmd_clear_bad(pmd);
   return 1;
  }
  return 0;
-- 
1.7.1