From 336bfcdf1c90c417dd45e9ce6aca9bc3f39081f1 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:28:12 -0400
Subject: [tools] perf/traceevent: Fix use of multiple options in processing field

Message-id: <1408462094-14194-324-git-send-email-jolsa@redhat.com>
Patchwork-id: 88258
O-Subject: [PATCH RHEL7.1 BZ1131394 323/325] tools lib traceevent: Fix use of multiple options in processing field
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit eff2c92f86c2ac2a0eab3749d58be39592293c3a
Author: Steven Rostedt <rostedt@goodmis.org>
Date: Mon Nov 18 14:23:14 2013 -0500

description
===========
Jiri Olsa reported that the scsi_dispatch_cmd_done event failed to parse
with:

  Error: expected type 5 but read 4
  Error: expected type 5 but read 4

The problem is with this part of the print_fmt:

  __print_symbolic(((REC->result) >> 24) & 0xff, ...

The __print_symbolic() helper function's first parameter is the field to
use to determine what symbol to print based on the value of the result.
The parser can handle one operation, but it can not handle multiple
operations ('>>' and '&').

Add code to process all operations for the field argument for
__print_symbolic() as well as __print_flags().
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/lib/traceevent/event-parse.c b/tools/lib/traceevent/event-parse.c
index 0362d57..8a5b65d 100644
--- a/tools/lib/traceevent/event-parse.c
+++ b/tools/lib/traceevent/event-parse.c
@@ -1606,6 +1606,24 @@ process_arg(struct event_format *event, struct print_arg *arg, char **tok)
 static enum event_type
 process_op(struct event_format *event, struct print_arg *arg, char **tok);
 
+/*
+ * For __print_symbolic() and __print_flags, we need to completely
+ * evaluate the first argument, which defines what to print next.
+ */
+static enum event_type
+process_field_arg(struct event_format *event, struct print_arg *arg, char **tok)
+{
+ enum event_type type;
+
+ type = process_arg(event, arg, tok);
+
+ while (type == EVENT_OP) {
+  type = process_op(event, arg, tok);
+ }
+
+ return type;
+}
+
 static enum event_type
 process_cond(struct event_format *event, struct print_arg *top, char **tok)
 {
@@ -2371,7 +2389,7 @@ process_flags(struct event_format *event, struct print_arg *arg, char **tok)
   goto out_free;
  }
 
- type = process_arg(event, field, &token);
+ type = process_field_arg(event, field, &token);
 
  /* Handle operations in the first argument */
  while (type == EVENT_OP)
@@ -2424,7 +2442,8 @@ process_symbols(struct event_format *event, struct print_arg *arg, char **tok)
   goto out_free;
  }
 
- type = process_arg(event, field, &token);
+ type = process_field_arg(event, field, &token);
+
  if (test_type_token(type, token, EVENT_DELIM, ","))
   goto out_free_field;
 
-- 
1.7.1