From 515519cdf73eab3cb796172158eac1394c65f9b3 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:21:44 -0400
Subject: [cpufreq] Do not hold driver module references for additional policy CPUs

Message-id: <1409235879-1283-11-git-send-email-prarit@redhat.com>
Patchwork-id: 89357
O-Subject: [RHEL7.1 PATCH BZ 1134639 010/185] cpufreq: Do not hold driver module references for additional policy CPUs
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 71c3461ef7c67024792d283b88630245a6c169ba
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Aug 4 01:19:34 2013 +0200

    cpufreq: Do not hold driver module references for additional policy CPUs

    The cpufreq core is a little inconsistent in the way it uses the
    driver module refcount.

    Namely, if __cpufreq_add_dev() is called for a CPU that doesn't
    share the policy object with any other CPUs, the driver module
    refcount it grabs to start with will be dropped by it before
    returning and will be equal to whatever it had been before that
    function was invoked.

    However, if the given CPU does share the policy object with other
    CPUs, either cpufreq_add_policy_cpu() is called to link the new CPU
    to the existing policy, or cpufreq_add_dev_symlink() is used to link
    the other CPUs sharing the policy with it to the just created policy
    object.  In that case, because both cpufreq_add_policy_cpu() and
    cpufreq_add_dev_symlink() call cpufreq_cpu_get() for the given
    policy (the latter possibly many times) without the balancing
    cpufreq_cpu_put() (unless there is an error), the driver module
    refcount will be left by __cpufreq_add_dev() with a nonzero value
    (different from the initial one).

    To remove that inconsistency make cpufreq_add_policy_cpu() execute
    cpufreq_cpu_put() for the given policy before returning, which
    decrements the driver module refcount so that it will be equal to its
    initial value after __cpufreq_add_dev() returns.  Also remove the
    cpufreq_cpu_get() call from cpufreq_add_dev_symlink(), since both the
    policy refcount and the driver module refcount are nonzero when it is
    called and they don't need to be bumped up by it.

    Accordingly, drop the cpufreq_cpu_put() from __cpufreq_remove_dev(),
    since it is only necessary to balance the cpufreq_cpu_get() called
    by cpufreq_add_policy_cpu() or cpufreq_add_dev_symlink().

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>

There are some subtle differences between the existing code and the
upstream code wrt how we handled the reference counting of the cpufreq
that I'm now removing in this patch.  This, of course, has caused some
differences in this patch vs. upstream.

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index a455490..9e3d52a 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -793,7 +793,6 @@ static int cpufreq_add_dev_symlink(struct cpufreq_policy *policy)
    continue;
 
   pr_debug("Adding link for CPU: %u\n", j);
-  cpufreq_cpu_get(policy->cpu);
   cpu_dev = get_cpu_device(j);
   ret = sysfs_create_link(&cpu_dev->kobj, &policy->kobj,
      "cpufreq");
@@ -904,15 +903,10 @@ static int cpufreq_add_policy_cpu(unsigned int cpu, unsigned int sibling,
  }
 
  /* Don't touch sysfs links during light-weight init */
- if (frozen) {
-  /* Drop the extra refcount that we took above */
-  cpufreq_cpu_put(policy);
-  return 0;
- }
+ if (!frozen)
+  ret = sysfs_create_link(&dev->kobj, &policy->kobj, "cpufreq");
 
- ret = sysfs_create_link(&dev->kobj, &policy->kobj, "cpufreq");
- if (ret)
-  cpufreq_cpu_put(policy);
+ cpufreq_cpu_put(policy);
 
  return ret;
 }
-- 
1.7.1