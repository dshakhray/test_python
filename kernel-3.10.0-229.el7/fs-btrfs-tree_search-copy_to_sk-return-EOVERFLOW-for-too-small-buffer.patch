From 703ac5c66cea44dab62978fc86b4a07511c77898 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:04:31 -0400
Subject: [fs] btrfs: tree_search, copy_to_sk: return EOVERFLOW for too small buffer

Message-id: <1407179109-13714-385-git-send-email-sandeen@redhat.com>
Patchwork-id: 87261
O-Subject: [RHEL7.1 PATCH 384/422] btrfs: tree_search, copy_to_sk: return EOVERFLOW for too small buffer
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Gerhard Heift <gerhard@heift.name>

commit 8f5f6178f366bdb93d6af6f2bdca8ebca1ad9fe9
Author: Gerhard Heift <gerhard@heift.name>
Date:   Thu Jan 30 16:23:59 2014 +0100

    btrfs: tree_search, copy_to_sk: return EOVERFLOW for too small buffer

    In copy_to_sk, if an item is too large for the given buffer, it now returns
    -EOVERFLOW instead of copying a search_header with len = 0. For backward
    compatibility for the first item it still copies such a header to the buffer,
    but not any other following items, which could have fitted.

    tree_search changes -EOVERFLOW back to 0 to behave similiar to the way it
    behaved before this patch.

    Signed-off-by: Gerhard Heift <Gerhard@Heift.Name>
    Signed-off-by: Chris Mason <clm@fb.com>
    Acked-by: David Sterba <dsterba@suse.cz>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index 7756404..6e09fc1 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -1990,8 +1990,20 @@ static noinline int copy_to_sk(struct btrfs_root *root,
   if (!key_in_sk(key, sk))
    continue;
 
-  if (sizeof(sh) + item_len > buf_size)
+  if (sizeof(sh) + item_len > buf_size) {
+   if (*num_found) {
+    ret = 1;
+    goto out;
+   }
+
+   /*
+    * return one empty item back for v1, which does not
+    * handle -EOVERFLOW
+    */
+
    item_len = 0;
+   ret = -EOVERFLOW;
+  }
 
   if (sizeof(sh) + item_len + *sk_offset > buf_size) {
    ret = 1;
@@ -2017,6 +2029,9 @@ static noinline int copy_to_sk(struct btrfs_root *root,
   }
   (*num_found)++;
 
+  if (ret) /* -EOVERFLOW from above */
+   goto out;
+
   if (*num_found >= sk->nr_items) {
    ret = 1;
    goto out;
@@ -2095,7 +2110,8 @@ static noinline int search_ioctl(struct inode *inode,
    break;
 
  }
- ret = 0;
+ if (ret > 0)
+  ret = 0;
 err:
  sk->nr_items = num_found;
  btrfs_free_path(path);
@@ -2118,6 +2134,14 @@ static noinline int btrfs_ioctl_tree_search(struct file *file,
 
  inode = file_inode(file);
  ret = search_ioctl(inode, &args->key, sizeof(args->buf), args->buf);
+
+ /*
+  * In the origin implementation an overflow is handled by returning a
+  * search header with a len of zero, so reset ret.
+  */
+ if (ret == -EOVERFLOW)
+  ret = 0;
+
  if (ret == 0 && copy_to_user(argp, args, sizeof(*args)))
   ret = -EFAULT;
  kfree(args);
-- 
1.7.1