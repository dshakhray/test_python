From 9450191f97d6b8917e645d5247c2a08e534633df Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:28 -0400
Subject: [fs] ext4: don't calculate total xattr header size unless needed

Message-id: <1414058125-4183-115-git-send-email-lczerner@redhat.com>
Patchwork-id: 98269
O-Subject: [RHEL 7.1 PATCH v2 114/171] ext4: don't calculate total xattr header size unless needed
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 7b1b2c1b9c397dcb86293ae79aa7fb7c5446120f

 The function ext4_expand_extra_isize_ea() doesn't need the size of all
 of the extended attribute headers.  So if we don't calculate it when
 it is unneeded, it we can skip some undeeded memory references, and as
 a bonus, we eliminate some kvetching by static code analysis tools.

 Addresses-Coverity-Id: #741291

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/xattr.c b/fs/ext4/xattr.c
index 1423c48..12222a4 100644
--- a/fs/ext4/xattr.c
+++ b/fs/ext4/xattr.c
@@ -567,12 +567,13 @@ static size_t ext4_xattr_free_space(struct ext4_xattr_entry *last,
         size_t *min_offs, void *base, int *total)
 {
  for (; !IS_LAST_ENTRY(last); last = EXT4_XATTR_NEXT(last)) {
-  *total += EXT4_XATTR_LEN(last->e_name_len);
   if (!last->e_value_block && last->e_value_size) {
    size_t offs = le16_to_cpu(last->e_value_offs);
    if (offs < *min_offs)
     *min_offs = offs;
   }
+  if (total)
+   *total += EXT4_XATTR_LEN(last->e_name_len);
  }
  return (*min_offs - ((void *)last - base) - sizeof(__u32));
 }
@@ -1228,7 +1229,7 @@ int ext4_expand_extra_isize_ea(struct inode *inode, int new_extra_isize,
  struct ext4_xattr_block_find *bs = NULL;
  char *buffer = NULL, *b_entry_name = NULL;
  size_t min_offs, free;
- int total_ino, total_blk;
+ int total_ino;
  void *base, *start, *end;
  int extra_isize = 0, error = 0, tried_min_extra_isize = 0;
  int s_min_extra_isize = le16_to_cpu(EXT4_SB(inode->i_sb)->s_es->s_min_extra_isize);
@@ -1286,8 +1287,7 @@ retry:
   first = BFIRST(bh);
   end = bh->b_data + bh->b_size;
   min_offs = end - base;
-  free = ext4_xattr_free_space(first, &min_offs, base,
-          &total_blk);
+  free = ext4_xattr_free_space(first, &min_offs, base, NULL);
   if (free < new_extra_isize) {
    if (!tried_min_extra_isize && s_min_extra_isize) {
     tried_min_extra_isize++;
-- 
1.7.1