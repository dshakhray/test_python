From 6c5ee3dc835ecad12bbdd8f5956e606ce1f83c3b Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 17 Dec 2014 21:39:04 -0500
Subject: [drm] nouveau: make sure display hardware is reinitialised on runtime resume

Message-id: <1418852380-13061-54-git-send-email-rclark@redhat.com>
Patchwork-id: 102184
O-Subject: [RHEL7 drm 53/89] drm/nouveau: make sure display hardware is reinitialised on runtime resume
Bugzilla: 1173317
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1173317
Upstream: 3.17

commit aa76610bc1a6af1d92e7466a52a56d0b559d6fb3

Author:     Ben Skeggs <bskeggs@redhat.com>
AuthorDate: Thu Oct 2 13:22:27 2014 +1000
Commit:     Rob Clark <rclark@redhat.com>
CommitDate: Wed Dec 10 17:45:27 2014 -0500

    drm/nouveau: make sure display hardware is reinitialised on runtime resume

    commit 6fbb702e27d78ad2458df048b58cca3454bc0965 upstream

    Linus commit 05c63c2ff23a80b654d6c088ac3ba21628db0173 modified the
    runtime suspend/resume paths to skip over display-related tasks to
    avoid locking issues on resume.

    Unfortunately, this resulted in the display hardware being left in
    a partially initialised state, preventing subsequent modesets from
    completing.

    This commit unifies the (many) suspend/resume paths, bringing back
    display (and fbcon) handling in the runtime paths.

    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

Signed-off-by: Rob Clark <rclark@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/nouveau_display.c b/drivers/gpu/drm/nouveau/nouveau_display.c
index dd469db..9d44068 100644
--- a/drivers/gpu/drm/nouveau/nouveau_display.c
+++ b/drivers/gpu/drm/nouveau/nouveau_display.c
@@ -565,14 +565,12 @@ nouveau_display_destroy(struct drm_device *dev)
 }
 
 int
-nouveau_display_suspend(struct drm_device *dev)
+nouveau_display_suspend(struct drm_device *dev, bool runtime)
 {
- struct nouveau_drm *drm = nouveau_drm(dev);
  struct drm_crtc *crtc;
 
  nouveau_display_fini(dev);
 
- NV_INFO(drm, "unpinning framebuffer(s)...\n");
  list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
   struct nouveau_framebuffer *nouveau_fb;
 
@@ -594,12 +592,13 @@ nouveau_display_suspend(struct drm_device *dev)
 }
 
 void
-nouveau_display_repin(struct drm_device *dev)
+nouveau_display_resume(struct drm_device *dev, bool runtime)
 {
  struct nouveau_drm *drm = nouveau_drm(dev);
  struct drm_crtc *crtc;
- int ret;
+ int ret, head;
 
+ /* re-pin fb/cursors */
  list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
   struct nouveau_framebuffer *nouveau_fb;
 
@@ -619,13 +618,6 @@ nouveau_display_repin(struct drm_device *dev)
   if (ret)
    NV_ERROR(drm, "Could not pin/map cursor.\n");
  }
-}
-
-void
-nouveau_display_resume(struct drm_device *dev)
-{
- struct drm_crtc *crtc;
- int head;
 
  nouveau_display_init(dev);
 
@@ -640,6 +632,13 @@ nouveau_display_resume(struct drm_device *dev)
  for (head = 0; head < dev->mode_config.num_crtc; head++)
   drm_vblank_on(dev, head);
 
+ /* This should ensure we don't hit a locking problem when someone
+  * wakes us up via a connector.  We should never go into suspend
+  * while the display is on anyways.
+  */
+ if (runtime)
+  return;
+
  drm_helper_resume_force_mode(dev);
 
  list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
diff --git a/drivers/gpu/drm/nouveau/nouveau_display.h b/drivers/gpu/drm/nouveau/nouveau_display.h
index a71cf77..a5195a6 100644
--- a/drivers/gpu/drm/nouveau/nouveau_display.h
+++ b/drivers/gpu/drm/nouveau/nouveau_display.h
@@ -59,9 +59,8 @@ int  nouveau_display_create(struct drm_device *dev);
 void nouveau_display_destroy(struct drm_device *dev);
 int  nouveau_display_init(struct drm_device *dev);
 void nouveau_display_fini(struct drm_device *dev);
-int  nouveau_display_suspend(struct drm_device *dev);
-void nouveau_display_repin(struct drm_device *dev);
-void nouveau_display_resume(struct drm_device *dev);
+int  nouveau_display_suspend(struct drm_device *dev, bool runtime);
+void nouveau_display_resume(struct drm_device *dev, bool runtime);
 int  nouveau_display_vblank_enable(struct drm_device *, int);
 void nouveau_display_vblank_disable(struct drm_device *, int);
 int  nouveau_display_scanoutpos(struct drm_device *, int, unsigned int,
diff --git a/drivers/gpu/drm/nouveau/nouveau_drm.c b/drivers/gpu/drm/nouveau/nouveau_drm.c
index 5425ffe..bd19d56 100644
--- a/drivers/gpu/drm/nouveau/nouveau_drm.c
+++ b/drivers/gpu/drm/nouveau/nouveau_drm.c
@@ -516,9 +516,11 @@ nouveau_do_suspend(struct drm_device *dev, bool runtime)
  struct nouveau_cli *cli;
  int ret;
 
- if (dev->mode_config.num_crtc && !runtime) {
+ if (dev->mode_config.num_crtc) {
+  NV_INFO(drm, "suspending console...\n");
+  nouveau_fbcon_set_suspend(dev, 1);
   NV_INFO(drm, "suspending display...\n");
-  ret = nouveau_display_suspend(dev);
+  ret = nouveau_display_suspend(dev, runtime);
   if (ret)
    return ret;
  }
@@ -572,7 +574,7 @@ fail_client:
 fail_display:
  if (dev->mode_config.num_crtc) {
   NV_INFO(drm, "resuming display...\n");
-  nouveau_display_resume(dev);
+  nouveau_display_resume(dev, runtime);
  }
  return ret;
 }
@@ -587,9 +589,6 @@ int nouveau_pmops_suspend(struct device *dev)
      drm_dev->switch_power_state == DRM_SWITCH_POWER_DYNAMIC_OFF)
   return 0;
 
- if (drm_dev->mode_config.num_crtc)
-  nouveau_fbcon_set_suspend(drm_dev, 1);
-
  ret = nouveau_do_suspend(drm_dev, false);
  if (ret)
   return ret;
@@ -601,7 +600,7 @@ int nouveau_pmops_suspend(struct device *dev)
 }
 
 static int
-nouveau_do_resume(struct drm_device *dev)
+nouveau_do_resume(struct drm_device *dev, bool runtime)
 {
  struct nouveau_drm *drm = nouveau_drm(dev);
  struct nouveau_cli *cli;
@@ -626,7 +625,9 @@ nouveau_do_resume(struct drm_device *dev)
 
  if (dev->mode_config.num_crtc) {
   NV_INFO(drm, "resuming display...\n");
-  nouveau_display_repin(dev);
+  nouveau_display_resume(dev, runtime);
+  NV_INFO(drm, "resuming console...\n");
+  nouveau_fbcon_set_suspend(dev, 0);
  }
 
  return 0;
@@ -649,47 +650,21 @@ int nouveau_pmops_resume(struct device *dev)
   return ret;
  pci_set_master(pdev);
 
- ret = nouveau_do_resume(drm_dev);
- if (ret)
-  return ret;
-
- if (drm_dev->mode_config.num_crtc) {
-  nouveau_display_resume(drm_dev);
-  nouveau_fbcon_set_suspend(drm_dev, 0);
- }
-
- return 0;
+ return nouveau_do_resume(drm_dev, false);
 }
 
 static int nouveau_pmops_freeze(struct device *dev)
 {
  struct pci_dev *pdev = to_pci_dev(dev);
  struct drm_device *drm_dev = pci_get_drvdata(pdev);
- int ret;
-
- if (drm_dev->mode_config.num_crtc)
-  nouveau_fbcon_set_suspend(drm_dev, 1);
-
- ret = nouveau_do_suspend(drm_dev, false);
- return ret;
+ return nouveau_do_suspend(drm_dev, false);
 }
 
 static int nouveau_pmops_thaw(struct device *dev)
 {
  struct pci_dev *pdev = to_pci_dev(dev);
  struct drm_device *drm_dev = pci_get_drvdata(pdev);
- int ret;
-
- ret = nouveau_do_resume(drm_dev);
- if (ret)
-  return ret;
-
- if (drm_dev->mode_config.num_crtc) {
-  nouveau_display_resume(drm_dev);
-  nouveau_fbcon_set_suspend(drm_dev, 0);
- }
-
- return 0;
+ return nouveau_do_resume(drm_dev, false);
 }
 
 
@@ -933,7 +908,7 @@ static int nouveau_pmops_runtime_resume(struct device *dev)
   return ret;
  pci_set_master(pdev);
 
- ret = nouveau_do_resume(drm_dev);
+ ret = nouveau_do_resume(drm_dev, true);
  drm_kms_helper_poll_enable(drm_dev);
  /* do magic */
  nv_mask(device, 0x88488, (1 << 25), (1 << 25));
-- 
1.7.1