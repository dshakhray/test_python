From 28bce34eb98833fbf8bdefb208ae4053311ab226 Mon Sep 17 00:00:00 2001
From: Jason Wang <jasowang@redhat.com>
Date: Mon, 29 Sep 2014 00:58:50 -0400
Subject: [virt] hyperv/net: Cleanup the receive path

Message-id: <1411952358-34104-7-git-send-email-jasowang@redhat.com>
Patchwork-id: 96771
O-Subject: [RHEL7.1 PATCH 06/34] Drivers: net: hyperv: Cleanup the receive path
Bugzilla: 1146357
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Vitaly Kuznetsov <vkuznets@redhat.com>

From: KY Srinivasan <kys@microsoft.com>

Bugzilla: 1146357

Make the receive path a little more efficient by parameterizing the
required state rather than re-establishing that state.

Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 97c1723a6177790a3a5b8c1173ed0b03571d4e06)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/hyperv/netvsc.c b/drivers/net/hyperv/netvsc.c
index a2c476e..898b6b6 100644
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@ -438,17 +438,14 @@ static inline u32 hv_ringbuf_avail_percent(
  return avail_write * 100 / ring_info->ring_datasize;
 }
 
-static void netvsc_send_completion(struct hv_device *device,
+static void netvsc_send_completion(struct netvsc_device *net_device,
+       struct hv_device *device,
        struct vmpacket_descriptor *packet)
 {
- struct netvsc_device *net_device;
  struct nvsp_message *nvsp_packet;
  struct hv_netvsc_packet *nvsc_packet;
  struct net_device *ndev;
 
- net_device = get_inbound_net_device(device);
- if (!net_device)
-  return;
  ndev = net_device->ndev;
 
  nvsp_packet = (struct nvsp_message *)((unsigned long)packet +
@@ -567,13 +564,13 @@ int netvsc_send(struct hv_device *device,
 }
 
 static void netvsc_send_recv_completion(struct hv_device *device,
+     struct netvsc_device *net_device,
      u64 transaction_id, u32 status)
 {
  struct nvsp_message recvcompMessage;
  int retries = 0;
  int ret;
  struct net_device *ndev;
- struct netvsc_device *net_device = hv_get_drvdata(device);
 
  ndev = net_device->ndev;
 
@@ -659,14 +656,15 @@ static void netvsc_receive_completion(void *context)
 
  /* Send a receive completion for the xfer page packet */
  if (fsend_receive_comp)
-  netvsc_send_recv_completion(device, transaction_id, status);
+  netvsc_send_recv_completion(device, net_device, transaction_id,
+     status);
 
 }
 
-static void netvsc_receive(struct hv_device *device,
-       struct vmpacket_descriptor *packet)
+static void netvsc_receive(struct netvsc_device *net_device,
+   struct hv_device *device,
+   struct vmpacket_descriptor *packet)
 {
- struct netvsc_device *net_device;
  struct vmtransfer_page_packet_header *vmxferpage_packet;
  struct nvsp_message *nvsp_packet;
  struct hv_netvsc_packet *netvsc_packet = NULL;
@@ -679,9 +677,6 @@ static void netvsc_receive(struct hv_device *device,
 
  LIST_HEAD(listHead);
 
- net_device = get_inbound_net_device(device);
- if (!net_device)
-  return;
  ndev = net_device->ndev;
 
  /*
@@ -747,7 +742,7 @@ static void netvsc_receive(struct hv_device *device,
   spin_unlock_irqrestore(&net_device->recv_pkt_list_lock,
            flags);
 
-  netvsc_send_recv_completion(device,
+  netvsc_send_recv_completion(device, net_device,
          vmxferpage_packet->d.trans_id,
          NVSP_STAT_FAIL);
 
@@ -831,11 +826,13 @@ static void netvsc_channel_cb(void *context)
     desc = (struct vmpacket_descriptor *)buffer;
     switch (desc->type) {
     case VM_PKT_COMP:
-     netvsc_send_completion(device, desc);
+     netvsc_send_completion(net_device,
+        device, desc);
      break;
 
     case VM_PKT_DATA_USING_XFER_PAGES:
-     netvsc_receive(device, desc);
+     netvsc_receive(net_device,
+       device, desc);
      break;
 
     default:
-- 
1.7.1