From 3de0a7198558d0a3f0af0564588169762769e2a7 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:50:42 -0400
Subject: [tools] lib/traceevent: Refactor create_arg_item()

Message-id: <1408953210-26343-155-git-send-email-jolsa@redhat.com>
Patchwork-id: 88846
O-Subject: [PATCH RHEL7.1 BZ1133083 154/322] tools lib traceevent: Refactor create_arg_item()
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit c8ea690dd0d1385a766d68c51832497181e013b8
Author: Namhyung Kim <namhyung.kim@lge.com>
Date: Thu Dec 12 16:36:12 2013 +0900

description
===========
So that it can return a proper pevent_errno value.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/lib/traceevent/event-parse.h b/tools/lib/traceevent/event-parse.h
index 5e4392d..57b66ae 100644
--- a/tools/lib/traceevent/event-parse.h
+++ b/tools/lib/traceevent/event-parse.h
@@ -367,7 +367,8 @@ enum pevent_flag {
  _PE(ILLEGAL_INTEGER_CMP,"illegal comparison for integer"),        \
  _PE(REPARENT_NOT_OP, "cannot reparent other than OP"),       \
  _PE(REPARENT_FAILED, "failed to reparent filter OP"),       \
- _PE(BAD_FILTER_ARG, "bad arg in filter tree")
+ _PE(BAD_FILTER_ARG, "bad arg in filter tree"),        \
+ _PE(UNEXPECTED_TYPE, "unexpected type (not a value)")
 
 #undef _PE
 #define _PE(__code, __str) PEVENT_ERRNO__ ## __code
diff --git a/tools/lib/traceevent/parse-filter.c b/tools/lib/traceevent/parse-filter.c
index 9b05892..8d71208 100644
--- a/tools/lib/traceevent/parse-filter.c
+++ b/tools/lib/traceevent/parse-filter.c
@@ -368,9 +368,9 @@ static void free_events(struct event_list *events)
  }
 }
 
-static struct filter_arg *
+static enum pevent_errno
 create_arg_item(struct event_format *event, const char *token,
-  enum event_type type, char **error_str)
+  enum event_type type, struct filter_arg **parg, char **error_str)
 {
  struct format_field *field;
  struct filter_arg *arg;
@@ -378,7 +378,7 @@ create_arg_item(struct event_format *event, const char *token,
  arg = allocate_arg();
  if (arg == NULL) {
   show_error(error_str, "failed to allocate filter arg");
-  return NULL;
+  return PEVENT_ERRNO__MEM_ALLOC_FAILED;
  }
 
  switch (type) {
@@ -392,7 +392,7 @@ create_arg_item(struct event_format *event, const char *token,
   if (!arg->value.str) {
    free_arg(arg);
    show_error(error_str, "failed to allocate string filter arg");
-   return NULL;
+   return PEVENT_ERRNO__MEM_ALLOC_FAILED;
   }
   break;
  case EVENT_ITEM:
@@ -420,11 +420,11 @@ create_arg_item(struct event_format *event, const char *token,
   break;
  default:
   free_arg(arg);
-  show_error(error_str, "expected a value but found %s",
-      token);
-  return NULL;
+  show_error(error_str, "expected a value but found %s", token);
+  return PEVENT_ERRNO__UNEXPECTED_TYPE;
  }
- return arg;
+ *parg = arg;
+ return 0;
 }
 
 static struct filter_arg *
@@ -993,8 +993,8 @@ process_filter(struct event_format *event, struct filter_arg **parg,
   case EVENT_SQUOTE:
   case EVENT_DQUOTE:
   case EVENT_ITEM:
-   arg = create_arg_item(event, token, type, error_str);
-   if (!arg)
+   ret = create_arg_item(event, token, type, &arg, error_str);
+   if (ret < 0)
     goto fail;
    if (!left_item)
     left_item = arg;
-- 
1.7.1