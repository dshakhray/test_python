From 797ba8d1d709ef1a3e2e68b29d2908a3eb0d2e86 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:08:26 -0400
Subject: [powerpc] pseries/cpuidle: Use cpuidle_register() for initialisation

Message-id: <1410545655-205645-278-git-send-email-dzickus@redhat.com>
Patchwork-id: 94546
O-Subject: [RHEL7 PATCH 277/626] powerpc/pseries/cpuidle: Use cpuidle_register() for initialisation.
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit b69dbba059d9048b9909ed9898086dd3fbe22be7
Author: Deepthi Dharwar <deepthi@linux.vnet.ibm.com>
Date:   Tue Jan 14 16:26:09 2014 +0530

    powerpc/pseries/cpuidle: Use cpuidle_register() for initialisation.

    This patch replaces the cpuidle driver and devices initialisation
    calls with a single generic cpuidle_register() call
    and also includes minor refactoring of the code around it.

    Remove the cpu online check in snooze loop, as this code can
    only locally run on a cpu only if it is online. Therefore,
    this check is not required.

    Signed-off-by: Deepthi Dharwar <deepthi@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpuidle/cpuidle-pseries.c b/drivers/cpuidle/cpuidle-pseries.c
index 16dd4c0..42ae9df 100644
--- a/drivers/cpuidle/cpuidle-pseries.c
+++ b/drivers/cpuidle/cpuidle-pseries.c
@@ -28,7 +28,6 @@ struct cpuidle_driver pseries_idle_driver = {
 #define MAX_IDLE_STATE_COUNT 2
 
 static int max_idle_state = MAX_IDLE_STATE_COUNT - 1;
-static struct cpuidle_device __percpu *pseries_cpuidle_devices;
 static struct cpuidle_state *cpuidle_state_table;
 
 static inline void idle_loop_prolog(unsigned long *in_purr)
@@ -56,13 +55,12 @@ static int snooze_loop(struct cpuidle_device *dev,
    int index)
 {
  unsigned long in_purr;
- int cpu = dev->cpu;
 
  idle_loop_prolog(&in_purr);
  local_irq_enable();
  set_thread_flag(TIF_POLLING_NRFLAG);
 
- while ((!need_resched()) && cpu_online(cpu)) {
+ while (!need_resched()) {
   ppc64_runlatch_off();
   HMT_low();
   HMT_very_low();
@@ -191,7 +189,7 @@ static int pseries_cpuidle_add_cpu_notifier(struct notifier_block *n,
 {
  int hotcpu = (unsigned long)hcpu;
  struct cpuidle_device *dev =
-   per_cpu_ptr(pseries_cpuidle_devices, hotcpu);
+    per_cpu(cpuidle_devices, hotcpu);
 
  if (dev && cpuidle_get_driver()) {
   switch (action) {
@@ -248,50 +246,6 @@ static int pseries_cpuidle_driver_init(void)
  return 0;
 }
 
-/* pseries_idle_devices_uninit(void)
- * unregister cpuidle devices and de-allocate memory
- */
-static void pseries_idle_devices_uninit(void)
-{
- int i;
- struct cpuidle_device *dev;
-
- for_each_possible_cpu(i) {
-  dev = per_cpu_ptr(pseries_cpuidle_devices, i);
-  cpuidle_unregister_device(dev);
- }
-
- free_percpu(pseries_cpuidle_devices);
- return;
-}
-
-/* pseries_idle_devices_init()
- * allocate, initialize and register cpuidle device
- */
-static int pseries_idle_devices_init(void)
-{
- int i;
- struct cpuidle_driver *drv = &pseries_idle_driver;
- struct cpuidle_device *dev;
-
- pseries_cpuidle_devices = alloc_percpu(struct cpuidle_device);
- if (pseries_cpuidle_devices == NULL)
-  return -ENOMEM;
-
- for_each_possible_cpu(i) {
-  dev = per_cpu_ptr(pseries_cpuidle_devices, i);
-  dev->state_count = drv->state_count;
-  dev->cpu = i;
-  if (cpuidle_register_device(dev)) {
-   printk(KERN_DEBUG \
-    "cpuidle_register_device %d failed!\n", i);
-   return -EIO;
-  }
- }
-
- return 0;
-}
-
 /*
  * pseries_idle_probe()
  * Choose state table for shared versus dedicated partition
@@ -299,9 +253,6 @@ static int pseries_idle_devices_init(void)
 static int pseries_idle_probe(void)
 {
 
- if (!firmware_has_feature(FW_FEATURE_SPLPAR))
-  return -ENODEV;
-
  if (cpuidle_disable != IDLE_NO_OVERRIDE)
   return -ENODEV;
 
@@ -310,10 +261,13 @@ static int pseries_idle_probe(void)
   return -EPERM;
  }
 
- if (lppaca_shared_proc(get_lppaca()))
-  cpuidle_state_table = shared_states;
- else
-  cpuidle_state_table = dedicated_states;
+ if (firmware_has_feature(FW_FEATURE_SPLPAR)) {
+  if (lppaca_shared_proc(get_lppaca()))
+   cpuidle_state_table = shared_states;
+  else
+   cpuidle_state_table = dedicated_states;
+ } else
+  return -ENODEV;
 
  return 0;
 }
@@ -327,22 +281,14 @@ static int __init pseries_processor_idle_init(void)
   return retval;
 
  pseries_cpuidle_driver_init();
- retval = cpuidle_register_driver(&pseries_idle_driver);
+ retval = cpuidle_register(&pseries_idle_driver, NULL);
  if (retval) {
   printk(KERN_DEBUG "Registration of pseries driver failed.\n");
   return retval;
  }
 
- retval = pseries_idle_devices_init();
- if (retval) {
-  pseries_idle_devices_uninit();
-  cpuidle_unregister_driver(&pseries_idle_driver);
-  return retval;
- }
-
  register_cpu_notifier(&setup_hotplug_notifier);
  printk(KERN_DEBUG "pseries_idle_driver registered\n");
-
  return 0;
 }
 
@@ -350,9 +296,7 @@ static void __exit pseries_processor_idle_exit(void)
 {
 
  unregister_cpu_notifier(&setup_hotplug_notifier);
- pseries_idle_devices_uninit();
- cpuidle_unregister_driver(&pseries_idle_driver);
-
+ cpuidle_unregister(&pseries_idle_driver);
  return;
 }
 
-- 
1.7.1