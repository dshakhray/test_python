From 83992a9bd5b59008f10f4ed29e2816606bedee98 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:59 -0400
Subject: [cpufreq] Fix build error on some platforms that use cpufreq_for_each_*

Message-id: <1409235879-1283-146-git-send-email-prarit@redhat.com>
Patchwork-id: 89440
O-Subject: [RHEL7.1 PATCH BZ 1134639 145/185] cpufreq: Fix build error on some platforms that use cpufreq_for_each_*
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 5eeaf1f1897372590105f155c6a7110b3fa36aef
Author: Stratos Karafotis <stratosk@semaphore.gr>
Date:   Wed May 7 19:33:33 2014 +0300

    cpufreq: Fix build error on some platforms that use cpufreq_for_each_*

    On platforms that use cpufreq_for_each_* macros, build fails if
    CONFIG_CPU_FREQ=n, e.g. ARM/shmobile/koelsch/non-multiplatform:

    drivers/built-in.o: In function `clk_round_parent':
    clkdev.c:(.text+0xcf168): undefined reference to `cpufreq_next_valid'
    drivers/built-in.o: In function `clk_rate_table_find':
    clkdev.c:(.text+0xcf820): undefined reference to `cpufreq_next_valid'
    make[3]: *** [vmlinux] Error 1

    Fix this making cpufreq_next_valid function inline and move it to
    cpufreq.h.

    Fixes: 27e289dce297 (cpufreq: Introduce macros for cpufreq_frequency_table iteration)
    Reported-and-tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 4d476e0..67e32f9 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -237,17 +237,6 @@ void cpufreq_cpu_put(struct cpufreq_policy *policy)
 }
 EXPORT_SYMBOL_GPL(cpufreq_cpu_put);
 
-bool cpufreq_next_valid(struct cpufreq_frequency_table **pos)
-{
- while ((*pos)->frequency != CPUFREQ_TABLE_END)
-  if ((*pos)->frequency != CPUFREQ_ENTRY_INVALID)
-   return true;
-  else
-   (*pos)++;
- return false;
-}
-EXPORT_SYMBOL_GPL(cpufreq_next_valid);
-
 /*********************************************************************
  *            EXTERNALLY AFFECTING FREQUENCY CHANGES                 *
  *********************************************************************/
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index aa1bf73..5843f5f 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -479,7 +479,15 @@ struct cpufreq_frequency_table {
         * order */
 };
 
-bool cpufreq_next_valid(struct cpufreq_frequency_table **pos);
+static inline bool cpufreq_next_valid(struct cpufreq_frequency_table **pos)
+{
+ while ((*pos)->frequency != CPUFREQ_TABLE_END)
+  if ((*pos)->frequency != CPUFREQ_ENTRY_INVALID)
+   return true;
+  else
+   (*pos)++;
+ return false;
+}
 
 /*
  * cpufreq_for_each_entry - iterate over a cpufreq_frequency_table
-- 
1.7.1