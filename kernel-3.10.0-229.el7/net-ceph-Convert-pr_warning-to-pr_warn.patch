From 2c545810582984da6a769dba5b3dab1d34356284 Mon Sep 17 00:00:00 2001
From: Ilya Dryomov <ilya.dryomov@inktank.com>
Date: Tue, 18 Nov 2014 15:49:23 -0500
Subject: [net] ceph: Convert pr_warning to pr_warn
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1416325805-26490-9-git-send-email-idryomov@redhat.com>
Patchwork-id: 100200
O-Subject: [RHEL7.1 PATCH 08/50] libceph: Convert pr_warning to pr_warn
Bugzilla: 1165232
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Sage Weil <sweil@redhat.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>

From: Joe Perches <joe@perches.com>

Use the more common pr_warn.

Other miscellanea:

o Coalesce formats
o Realign arguments

Signed-off-by: Joe Perches <joe@perches.com>
Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
(cherry picked from commit b9a678994b4a64b1106ab2cf7cfe7cbc10bb6f40)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ceph/ceph_common.c b/net/ceph/ceph_common.c
index 1675021..58fbfe1 100644
--- a/net/ceph/ceph_common.c
+++ b/net/ceph/ceph_common.c
@@ -293,17 +293,20 @@ static int get_secret(struct ceph_crypto_key *dst, const char *name) {
   key_err = PTR_ERR(ukey);
   switch (key_err) {
   case -ENOKEY:
-   pr_warning("ceph: Mount failed due to key not found: %s\n", name);
+   pr_warn("ceph: Mount failed due to key not found: %s\n",
+    name);
    break;
   case -EKEYEXPIRED:
-   pr_warning("ceph: Mount failed due to expired key: %s\n", name);
+   pr_warn("ceph: Mount failed due to expired key: %s\n",
+    name);
    break;
   case -EKEYREVOKED:
-   pr_warning("ceph: Mount failed due to revoked key: %s\n", name);
+   pr_warn("ceph: Mount failed due to revoked key: %s\n",
+    name);
    break;
   default:
-   pr_warning("ceph: Mount failed due to unknown key error"
-          " %d: %s\n", key_err, name);
+   pr_warn("ceph: Mount failed due to unknown key error %d: %s\n",
+    key_err, name);
   }
   err = -EPERM;
   goto out;
@@ -433,7 +436,7 @@ ceph_parse_options(char *options, const char *dev_name,
 
    /* misc */
   case Opt_osdtimeout:
-   pr_warning("ignoring deprecated osdtimeout option\n");
+   pr_warn("ignoring deprecated osdtimeout option\n");
    break;
   case Opt_osdkeepalivetimeout:
    opt->osd_keepalive_timeout = intval;
diff --git a/net/ceph/messenger.c b/net/ceph/messenger.c
index 86eb778..767f699 100644
--- a/net/ceph/messenger.c
+++ b/net/ceph/messenger.c
@@ -1942,11 +1942,11 @@ static int process_banner(struct ceph_connection *con)
      sizeof(con->peer_addr)) != 0 &&
      !(addr_is_blank(&con->actual_peer_addr.in_addr) &&
        con->actual_peer_addr.nonce == con->peer_addr.nonce)) {
-  pr_warning("wrong peer, want %s/%d, got %s/%d\n",
-      ceph_pr_addr(&con->peer_addr.in_addr),
-      (int)le32_to_cpu(con->peer_addr.nonce),
-      ceph_pr_addr(&con->actual_peer_addr.in_addr),
-      (int)le32_to_cpu(con->actual_peer_addr.nonce));
+  pr_warn("wrong peer, want %s/%d, got %s/%d\n",
+   ceph_pr_addr(&con->peer_addr.in_addr),
+   (int)le32_to_cpu(con->peer_addr.nonce),
+   ceph_pr_addr(&con->actual_peer_addr.in_addr),
+   (int)le32_to_cpu(con->actual_peer_addr.nonce));
   con->error_msg = "wrong peer at address";
   return -1;
  }
@@ -2307,7 +2307,7 @@ static int read_partial_message(struct ceph_connection *con)
 
   BUG_ON(!con->in_msg ^ skip);
   if (con->in_msg && data_len > con->in_msg->data_length) {
-   pr_warning("%s skipping long message (%u > %zd)\n",
+   pr_warn("%s skipping long message (%u > %zd)\n",
     __func__, data_len, con->in_msg->data_length);
    ceph_msg_put(con->in_msg);
    con->in_msg = NULL;
@@ -2717,7 +2717,7 @@ static bool con_sock_closed(struct ceph_connection *con)
  CASE(OPEN);
  CASE(STANDBY);
  default:
-  pr_warning("%s con %p unrecognized state %lu\n",
+  pr_warn("%s con %p unrecognized state %lu\n",
    __func__, con, con->state);
   con->error_msg = "unrecognized con state";
   BUG();
@@ -2833,8 +2833,8 @@ static void con_work(struct work_struct *work)
  */
 static void con_fault(struct ceph_connection *con)
 {
- pr_warning("%s%lld %s %s\n", ENTITY_NAME(con->peer_name),
-        ceph_pr_addr(&con->peer_addr.in_addr), con->error_msg);
+ pr_warn("%s%lld %s %s\n", ENTITY_NAME(con->peer_name),
+  ceph_pr_addr(&con->peer_addr.in_addr), con->error_msg);
  dout("fault %p state %lu to peer %s\n",
       con, con->state, ceph_pr_addr(&con->peer_addr.in_addr));
 
diff --git a/net/ceph/mon_client.c b/net/ceph/mon_client.c
index 61fcfc3..a83062c 100644
--- a/net/ceph/mon_client.c
+++ b/net/ceph/mon_client.c
@@ -1182,10 +1182,10 @@ static struct ceph_msg *mon_alloc_msg(struct ceph_connection *con,
   pr_info("alloc_msg unknown type %d\n", type);
   *skip = 1;
  } else if (front_len > m->front_alloc_len) {
-  pr_warning("mon_alloc_msg front %d > prealloc %d (%u#%llu)\n",
-      front_len, m->front_alloc_len,
-      (unsigned int)con->peer_name.type,
-      le64_to_cpu(con->peer_name.num));
+  pr_warn("mon_alloc_msg front %d > prealloc %d (%u#%llu)\n",
+   front_len, m->front_alloc_len,
+   (unsigned int)con->peer_name.type,
+   le64_to_cpu(con->peer_name.num));
   ceph_msg_put(m);
   m = ceph_msg_new(type, front_len, GFP_NOFS, false);
  }
diff --git a/net/ceph/osd_client.c b/net/ceph/osd_client.c
index 89fd2aa..aca8557 100644
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@ -1819,8 +1819,8 @@ static void handle_reply(struct ceph_osd_client *osdc, struct ceph_msg *msg,
  }
  bytes = le32_to_cpu(msg->hdr.data_len);
  if (payload_len != bytes) {
-  pr_warning("sum of op payload lens %d != data_len %d",
-      payload_len, bytes);
+  pr_warn("sum of op payload lens %d != data_len %d\n",
+   payload_len, bytes);
   goto bad_put;
  }
 
@@ -2844,10 +2844,10 @@ static struct ceph_msg *get_reply(struct ceph_connection *con,
  ceph_msg_revoke_incoming(req->r_reply);
 
  if (front_len > req->r_reply->front_alloc_len) {
-  pr_warning("get_reply front %d > preallocated %d (%u#%llu)\n",
-      front_len, req->r_reply->front_alloc_len,
-      (unsigned int)con->peer_name.type,
-      le64_to_cpu(con->peer_name.num));
+  pr_warn("get_reply front %d > preallocated %d (%u#%llu)\n",
+   front_len, req->r_reply->front_alloc_len,
+   (unsigned int)con->peer_name.type,
+   le64_to_cpu(con->peer_name.num));
   m = ceph_msg_new(CEPH_MSG_OSD_OPREPLY, front_len, GFP_NOFS,
      false);
   if (!m)
@@ -2870,8 +2870,7 @@ static struct ceph_msg *get_reply(struct ceph_connection *con,
    if (osd_data->pages &&
     unlikely(osd_data->length < data_len)) {
 
-    pr_warning("tid %lld reply has %d bytes "
-     "we had only %llu bytes ready\n",
+    pr_warn("tid %lld reply has %d bytes we had only %llu bytes ready\n",
      tid, data_len, osd_data->length);
     *skip = 1;
     ceph_msg_put(m);
diff --git a/net/ceph/osdmap.c b/net/ceph/osdmap.c
index ec4d9e2..b8c3fde 100644
--- a/net/ceph/osdmap.c
+++ b/net/ceph/osdmap.c
@@ -521,11 +521,11 @@ static int decode_pool(void **p, void *end, struct ceph_pg_pool_info *pi)
  ev = ceph_decode_8(p);  /* encoding version */
  cv = ceph_decode_8(p); /* compat version */
  if (ev < 5) {
-  pr_warning("got v %d < 5 cv %d of ceph_pg_pool\n", ev, cv);
+  pr_warn("got v %d < 5 cv %d of ceph_pg_pool\n", ev, cv);
   return -EINVAL;
  }
  if (cv > 9) {
-  pr_warning("got v %d cv %d > 9 of ceph_pg_pool\n", ev, cv);
+  pr_warn("got v %d cv %d > 9 of ceph_pg_pool\n", ev, cv);
   return -EINVAL;
  }
  len = ceph_decode_32(p);
@@ -729,9 +729,9 @@ static int get_osdmap_client_data_v(void **p, void *end,
 
   ceph_decode_8_safe(p, end, struct_compat, e_inval);
   if (struct_compat > OSDMAP_WRAPPER_COMPAT_VER) {
-   pr_warning("got v %d cv %d > %d of %s ceph_osdmap\n",
-       struct_v, struct_compat,
-       OSDMAP_WRAPPER_COMPAT_VER, prefix);
+   pr_warn("got v %d cv %d > %d of %s ceph_osdmap\n",
+    struct_v, struct_compat,
+    OSDMAP_WRAPPER_COMPAT_VER, prefix);
    return -EINVAL;
   }
   *p += 4; /* ignore wrapper struct_len */
@@ -739,9 +739,9 @@ static int get_osdmap_client_data_v(void **p, void *end,
   ceph_decode_8_safe(p, end, struct_v, e_inval);
   ceph_decode_8_safe(p, end, struct_compat, e_inval);
   if (struct_compat > OSDMAP_CLIENT_DATA_COMPAT_VER) {
-   pr_warning("got v %d cv %d > %d of %s ceph_osdmap client data\n",
-       struct_v, struct_compat,
-       OSDMAP_CLIENT_DATA_COMPAT_VER, prefix);
+   pr_warn("got v %d cv %d > %d of %s ceph_osdmap client data\n",
+    struct_v, struct_compat,
+    OSDMAP_CLIENT_DATA_COMPAT_VER, prefix);
    return -EINVAL;
   }
   *p += 4; /* ignore client data struct_len */
@@ -751,8 +751,8 @@ static int get_osdmap_client_data_v(void **p, void *end,
   *p -= 1;
   ceph_decode_16_safe(p, end, version, e_inval);
   if (version < 6) {
-   pr_warning("got v %d < 6 of %s ceph_osdmap\n", version,
-       prefix);
+   pr_warn("got v %d < 6 of %s ceph_osdmap\n",
+    version, prefix);
    return -EINVAL;
   }
 
-- 
1.7.1