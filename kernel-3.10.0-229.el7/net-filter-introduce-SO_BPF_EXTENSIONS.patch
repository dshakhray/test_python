From 042dcb838f31914651891f630781ff0782fc1d1c Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Wed, 14 May 2014 15:30:01 -0400
Subject: [net] filter: introduce SO_BPF_EXTENSIONS

Message-id: <95d75ff84ffae8334f15f86c3debf79cee06afe6.1400081343.git.jbenc@redhat.com>
Patchwork-id: 79803
O-Subject: [RHEL7.1 net PATCH 1/2] net: introduce SO_BPF_EXTENSIONS
Bugzilla: 1079524
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1079524
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7455041
Tested: Using a simple test program

RHEL backport: Remove architectures we do not support. Harmless fuzz in
socket.h files.

commit ea02f9411d9faa3553ed09ce0ec9f00ceae9885e
Author: Michal Sekletar <msekleta@redhat.com>
Date:   Fri Jan 17 17:09:45 2014 +0100

    net: introduce SO_BPF_EXTENSIONS

    For user space packet capturing libraries such as libpcap, there's
    currently only one way to check which BPF extensions are supported
    by the kernel, that is, commit aa1113d9f85d ("net: filter: return
    -EINVAL if BPF_S_ANC* operation is not supported"). For querying all
    extensions at once this might be rather inconvenient.

    Therefore, this patch introduces a new option which can be used as
    an argument for getsockopt(), and allows one to obtain information
    about which BPF extensions are supported by the current kernel.

    As David Miller suggests, we do not need to define any bits right
    now and status quo can just return 0 in order to state that this
    versions supports SKF_AD_PROTOCOL up to SKF_AD_PAY_OFFSET. Later
    additions to BPF extensions need to add their bits to the
    bpf_tell_extensions() function, as documented in the comment.

    Signed-off-by: Michal Sekletar <msekleta@redhat.com>
    Cc: David Miller <davem@davemloft.net>
    Reviewed-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/uapi/asm/socket.h b/arch/powerpc/include/uapi/asm/socket.h
index a6d7446..4bef0e7 100644
--- a/arch/powerpc/include/uapi/asm/socket.h
+++ b/arch/powerpc/include/uapi/asm/socket.h
@@ -83,4 +83,6 @@
 
 #define SO_BUSY_POLL  46
 
+#define SO_BPF_EXTENSIONS 48
+
 #endif /* _ASM_POWERPC_SOCKET_H */
diff --git a/arch/s390/include/uapi/asm/socket.h b/arch/s390/include/uapi/asm/socket.h
index 9249449..a9aab28 100644
--- a/arch/s390/include/uapi/asm/socket.h
+++ b/arch/s390/include/uapi/asm/socket.h
@@ -82,4 +82,6 @@
 
 #define SO_BUSY_POLL  46
 
+#define SO_BPF_EXTENSIONS 48
+
 #endif /* _ASM_SOCKET_H */
diff --git a/include/linux/filter.h b/include/linux/filter.h
index f65f5a6..10127fe 100644
--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -76,6 +76,17 @@ static inline void bpf_jit_free(struct sk_filter *fp)
 #define SK_RUN_FILTER(FILTER, SKB) sk_run_filter(SKB, FILTER->insns)
 #endif
 
+static inline int bpf_tell_extensions(void)
+{
+ /* When adding new BPF extension it is necessary to enumerate
+  * it here, so userspace software which wants to know what is
+  * supported can do so by inspecting return value of this
+  * function
+  */
+
+ return 0;
+}
+
 enum {
  BPF_S_RET_K = 1,
  BPF_S_RET_A,
diff --git a/include/uapi/asm-generic/socket.h b/include/uapi/asm-generic/socket.h
index f04b69b..df71cc9 100644
--- a/include/uapi/asm-generic/socket.h
+++ b/include/uapi/asm-generic/socket.h
@@ -78,4 +78,6 @@
 
 #define SO_BUSY_POLL  46
 
+#define SO_BPF_EXTENSIONS 48
+
 #endif /* __ASM_GENERIC_SOCKET_H */
diff --git a/net/core/sock.c b/net/core/sock.c
index 2c097c5..c464812 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -1166,6 +1166,10 @@ int sock_getsockopt(struct socket *sock, int level, int optname,
   v.val = sock_flag(sk, SOCK_FILTER_LOCKED);
   break;
 
+ case SO_BPF_EXTENSIONS:
+  v.val = bpf_tell_extensions();
+  break;
+
  case SO_SELECT_ERR_QUEUE:
   v.val = sock_flag(sk, SOCK_SELECT_ERR_QUEUE);
   break;
-- 
1.7.1