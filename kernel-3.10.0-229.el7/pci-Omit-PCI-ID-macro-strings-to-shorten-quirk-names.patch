From 45bee381291d574628ea0537425d4e0c5d7d5c9d Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 26 Jun 2014 14:25:07 -0400
Subject: [pci] Omit PCI ID macro strings to shorten quirk names

Message-id: <20140626142507.18681.45517.stgit@gir.stowe>
Patchwork-id: 84968
O-Subject: [RHEL7.1 PATCH 5/7] PCI: Omit PCI ID macro strings to shorten quirk names
Bugzilla: 1110890
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110890
Upstream Status: ecf61c78bd787b9dfb4a6b1dfb7561c2a95c5c17

commit ecf61c78bd787b9dfb4a6b1dfb7561c2a95c5c17
Author: Michal Marek <mmarek@suse.cz>
Date:   Mon Nov 11 14:40:35 2013 +0100

    PCI: Omit PCI ID macro strings to shorten quirk names

    Pasting the verbatim PCI_(VENDOR|DEVICE)_* macros in the __pci_fixup_*
    symbol names results in insanely long names such as

    __pci_fixup_resumePCI_VENDOR_ID_SERVERWORKSPCI_DEVICE_ID_SERVERWORKS_HT1000S

    When Link-Time Optimization adds its numeric suffix to such symbol, it
    overflows the namebuf[KSYM_NAME_LEN] array in kernel/kallsyms.c.  Use the
    line number instead to create (nearly) unique symbol names.

    Reported-by: Joe Mario <jmario@redhat.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Andi Kleen <ak@linux.intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/pci.h b/include/linux/pci.h
index d73a386..c7a9881 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1604,65 +1604,65 @@ enum pci_fixup_pass {
 /* Anonymous variables would be nice... */
 #define DECLARE_PCI_FIXUP_SECTION(section, name, vendor, device, class, \
       class_shift, hook)   \
- static const struct pci_fixup __pci_fixup_##name __used  \
+ static const struct pci_fixup __PASTE(__pci_fixup_##name,__LINE__) __used \
  __attribute__((__section__(#section), aligned((sizeof(void *)))))    \
   = { vendor, device, class, class_shift, hook };
 
 #define DECLARE_PCI_FIXUP_CLASS_EARLY(vendor, device, class,  \
       class_shift, hook)  \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_early,   \
-  vendor##device##hook, vendor, device, class, class_shift, hook)
+  hook, vendor, device, class, class_shift, hook)
 #define DECLARE_PCI_FIXUP_CLASS_HEADER(vendor, device, class,  \
       class_shift, hook)  \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_header,   \
-  vendor##device##hook, vendor, device, class, class_shift, hook)
+  hook, vendor, device, class, class_shift, hook)
 #define DECLARE_PCI_FIXUP_CLASS_FINAL(vendor, device, class,  \
       class_shift, hook)  \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_final,   \
-  vendor##device##hook, vendor, device, class, class_shift, hook)
+  hook, vendor, device, class, class_shift, hook)
 #define DECLARE_PCI_FIXUP_CLASS_ENABLE(vendor, device, class,  \
       class_shift, hook)  \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_enable,   \
-  vendor##device##hook, vendor, device, class, class_shift, hook)
+  hook, vendor, device, class, class_shift, hook)
 #define DECLARE_PCI_FIXUP_CLASS_RESUME(vendor, device, class,  \
       class_shift, hook)  \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume,   \
-  resume##vendor##device##hook, vendor, device, class, \
+  resume##hook, vendor, device, class, \
   class_shift, hook)
 #define DECLARE_PCI_FIXUP_CLASS_RESUME_EARLY(vendor, device, class, \
       class_shift, hook)  \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume_early,  \
-  resume_early##vendor##device##hook, vendor, device, \
+  resume_early##hook, vendor, device, \
   class, class_shift, hook)
 #define DECLARE_PCI_FIXUP_CLASS_SUSPEND(vendor, device, class,  \
       class_shift, hook)  \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend,   \
-  suspend##vendor##device##hook, vendor, device, class, \
+  suspend##hook, vendor, device, class, \
   class_shift, hook)
 
 #define DECLARE_PCI_FIXUP_EARLY(vendor, device, hook)   \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_early,   \
-  vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
+  hook, vendor, device, PCI_ANY_ID, 0, hook)
 #define DECLARE_PCI_FIXUP_HEADER(vendor, device, hook)   \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_header,   \
-  vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
+  hook, vendor, device, PCI_ANY_ID, 0, hook)
 #define DECLARE_PCI_FIXUP_FINAL(vendor, device, hook)   \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_final,   \
-  vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
+  hook, vendor, device, PCI_ANY_ID, 0, hook)
 #define DECLARE_PCI_FIXUP_ENABLE(vendor, device, hook)   \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_enable,   \
-  vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
+  hook, vendor, device, PCI_ANY_ID, 0, hook)
 #define DECLARE_PCI_FIXUP_RESUME(vendor, device, hook)   \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume,   \
-  resume##vendor##device##hook, vendor, device,  \
+  resume##hook, vendor, device,  \
   PCI_ANY_ID, 0, hook)
 #define DECLARE_PCI_FIXUP_RESUME_EARLY(vendor, device, hook)  \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume_early,  \
-  resume_early##vendor##device##hook, vendor, device, \
+  resume_early##hook, vendor, device, \
   PCI_ANY_ID, 0, hook)
 #define DECLARE_PCI_FIXUP_SUSPEND(vendor, device, hook)   \
  DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend,   \
-  suspend##vendor##device##hook, vendor, device,  \
+  suspend##hook, vendor, device,  \
   PCI_ANY_ID, 0, hook)
 
 #ifdef CONFIG_PCI_QUIRKS
-- 
1.7.1