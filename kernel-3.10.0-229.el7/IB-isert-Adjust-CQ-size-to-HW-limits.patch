From 06649e069d7e35ad3f1d518af37023a6ea716e6a Mon Sep 17 00:00:00 2001
From: Andy Grover <agrover@redhat.com>
Date: Wed, 26 Nov 2014 19:53:18 -0500
Subject: [IB] isert: Adjust CQ size to HW limits

Message-id: <1417031598-5408-3-git-send-email-agrover@redhat.com>
Patchwork-id: 100978
O-Subject: [RHEL7.1 PATCH e-stor 2/2] IB/isert: Adjust CQ size to HW limits
Bugzilla: 1166314
RH-Acked-by: Chris Leech <cleech@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Chris Moore <Chris.Moore@Emulex.Com>

isert has an issue of trying to create a CQ with more CQEs than are
supported by the hardware, that currently results in failures during
isert_device creation during first session login.

This is the isert version of the patch that Minh Tran submitted for
iser, and is simple a workaround required to function with existing
ocrdma hardware.

Signed-off-by: Chris Moore <chris.moore@emulex.com>
Reviewied-by: Sagi Grimberg <sagig@mellanox.com>
Cc: <stable@vger.kernel.org> # 3.10+
Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/isert/ib_isert.c b/drivers/infiniband/ulp/isert/ib_isert.c
index 70f56ab..22682b4 100644
--- a/drivers/infiniband/ulp/isert/ib_isert.c
+++ b/drivers/infiniband/ulp/isert/ib_isert.c
@@ -216,7 +216,17 @@ isert_create_device_ib_res(struct isert_device *device)
 {
  struct ib_device *ib_dev = device->ib_device;
  struct isert_cq_desc *cq_desc;
+ struct ib_device_attr dev_attr;
  int ret = 0, i, j;
+ int max_rx_cqe, max_tx_cqe;
+
+ memset(&dev_attr, 0, sizeof(struct ib_device_attr));
+ ret = isert_query_device(ib_dev, &dev_attr);
+ if (ret)
+  return ret;
+
+ max_rx_cqe = min(ISER_MAX_RX_CQ_LEN, dev_attr.max_cqe);
+ max_tx_cqe = min(ISER_MAX_TX_CQ_LEN, dev_attr.max_cqe);
 
  device->cqs_used = min_t(int, num_online_cpus(),
      device->ib_device->num_comp_vectors);
@@ -248,7 +258,7 @@ isert_create_device_ib_res(struct isert_device *device)
       isert_cq_rx_callback,
       isert_cq_event_callback,
       (void *)&cq_desc[i],
-      ISER_MAX_RX_CQ_LEN, i);
+      max_rx_cqe, i);
   if (IS_ERR(device->dev_rx_cq[i])) {
    ret = PTR_ERR(device->dev_rx_cq[i]);
    device->dev_rx_cq[i] = NULL;
@@ -260,7 +270,7 @@ isert_create_device_ib_res(struct isert_device *device)
       isert_cq_tx_callback,
       isert_cq_event_callback,
       (void *)&cq_desc[i],
-      ISER_MAX_TX_CQ_LEN, i);
+      max_tx_cqe, i);
   if (IS_ERR(device->dev_tx_cq[i])) {
    ret = PTR_ERR(device->dev_tx_cq[i]);
    device->dev_tx_cq[i] = NULL;
-- 
1.7.1