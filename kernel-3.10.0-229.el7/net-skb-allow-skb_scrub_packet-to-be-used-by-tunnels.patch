From e0cb60c5cd519d3919edb5451150e4e1e03448d8 Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jpirko@redhat.com>
Date: Thu, 7 Aug 2014 07:06:27 -0400
Subject: [net] skb: allow skb_scrub_packet() to be used by tunnels

Message-id: <1407395194-3809-12-git-send-email-jpirko@redhat.com>
Patchwork-id: 87525
O-Subject: [patch rhel7 net 11/18] skb: allow skb_scrub_packet() to be used by tunnels
Bugzilla: 1091561
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

BZ1091561
https://brewweb.devel.redhat.com/taskinfo?taskID=7794261
Tested by jtluka's LNST smoke test recipe

upstream commit 8b27f27797cac5ed9b2f3e63dac89a7ae70e70a7
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Mon Sep 2 15:34:56 2013 +0200

    skb: allow skb_scrub_packet() to be used by tunnels

    This function was only used when a packet was sent to another netns. Now, it can
    also be used after tunnel encapsulation or decapsulation.

    Only skb_orphan() should not be done when a packet is not crossing netns.

Signed-off-by: Jiri Pirko <jpirko@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 81af98c..b858ab1 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -2454,7 +2454,7 @@ extern void        skb_split(struct sk_buff *skb,
      struct sk_buff *skb1, const u32 len);
 extern int        skb_shift(struct sk_buff *tgt, struct sk_buff *skb,
      int shiftlen);
-extern void        skb_scrub_packet(struct sk_buff *skb);
+extern void        skb_scrub_packet(struct sk_buff *skb, bool xnet);
 unsigned int skb_gso_transport_seglen(const struct sk_buff *skb);
 extern struct sk_buff *skb_segment(struct sk_buff *skb,
        netdev_features_t features);
diff --git a/net/core/dev.c b/net/core/dev.c
index 135965b..28ae184 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -1667,7 +1667,7 @@ int dev_forward_skb(struct net_device *dev, struct sk_buff *skb)
   kfree_skb(skb);
   return NET_RX_DROP;
  }
- skb_scrub_packet(skb);
+ skb_scrub_packet(skb, true);
  skb->protocol = eth_type_trans(skb, dev);
  return netif_rx(skb);
 }
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 5201892..9b90c92 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -3629,17 +3629,22 @@ bool skb_try_coalesce(struct sk_buff *to, struct sk_buff *from,
 EXPORT_SYMBOL(skb_try_coalesce);
 
 /**
- * skb_scrub_packet - scrub an skb before sending it to another netns
+ * skb_scrub_packet - scrub an skb
  *
  * @skb: buffer to clean
- *
- * skb_scrub_packet can be used to clean an skb before injecting it in
- * another namespace. We have to clear all information in the skb that
- * could impact namespace isolation.
+ * @xnet: packet is crossing netns
+ *
+ * skb_scrub_packet can be used after encapsulating or decapsulting a packet
+ * into/from a tunnel. Some information have to be cleared during these
+ * operations.
+ * skb_scrub_packet can also be used to clean a skb before injecting it in
+ * another namespace (@xnet == true). We have to clear all information in the
+ * skb that could impact namespace isolation.
  */
-void skb_scrub_packet(struct sk_buff *skb)
+void skb_scrub_packet(struct sk_buff *skb, bool xnet)
 {
- skb_orphan(skb);
+ if (xnet)
+  skb_orphan(skb);
  skb->tstamp.tv64 = 0;
  skb->pkt_type = PACKET_HOST;
  skb->skb_iif = 0;
diff --git a/net/ipv4/ip_tunnel.c b/net/ipv4/ip_tunnel.c
index dddab56..275c167 100644
--- a/net/ipv4/ip_tunnel.c
+++ b/net/ipv4/ip_tunnel.c
@@ -461,7 +461,7 @@ int ip_tunnel_rcv(struct ip_tunnel *tunnel, struct sk_buff *skb,
  u64_stats_update_end(&tstats->syncp);
 
  if (tunnel->net != dev_net(tunnel->dev))
-  skb_scrub_packet(skb);
+  skb_scrub_packet(skb, true);
 
  if (tunnel->dev->type == ARPHRD_ETHER) {
   skb->protocol = eth_type_trans(skb, tunnel->dev);
@@ -620,7 +620,7 @@ void ip_tunnel_xmit(struct sk_buff *skb, struct net_device *dev,
  }
 
  if (tunnel->net != dev_net(dev))
-  skb_scrub_packet(skb);
+  skb_scrub_packet(skb, true);
 
  if (tunnel->err_count > 0) {
   if (time_before(jiffies,
diff --git a/net/ipv6/ip6_tunnel.c b/net/ipv6/ip6_tunnel.c
index 2f844ea..4f42a0d 100644
--- a/net/ipv6/ip6_tunnel.c
+++ b/net/ipv6/ip6_tunnel.c
@@ -829,7 +829,7 @@ static int ip6_tnl_rcv(struct sk_buff *skb, __u16 protocol,
   tstats->rx_bytes += skb->len;
 
   if (!net_eq(t->net, dev_net(t->dev)))
-   skb_scrub_packet(skb);
+   skb_scrub_packet(skb, true);
 
   netif_rx(skb);
 
@@ -1001,7 +1001,7 @@ static int ip6_tnl_xmit2(struct sk_buff *skb,
  }
 
  if (!net_eq(t->net, dev_net(dev)))
-  skb_scrub_packet(skb);
+  skb_scrub_packet(skb, true);
 
  /*
   * Okay, now see if we can stuff it in the buffer as-is.
diff --git a/net/ipv6/sit.c b/net/ipv6/sit.c
index aff21b3..05f84fd 100644
--- a/net/ipv6/sit.c
+++ b/net/ipv6/sit.c
@@ -622,7 +622,7 @@ static int ipip6_rcv(struct sk_buff *skb)
   tstats->rx_bytes += skb->len;
 
   if (tunnel->net != dev_net(tunnel->dev))
-   skb_scrub_packet(skb);
+   skb_scrub_packet(skb, true);
   netif_rx(skb);
 
   return 0;
@@ -859,7 +859,7 @@ static netdev_tx_t ipip6_tunnel_xmit(struct sk_buff *skb,
  }
 
  if (tunnel->net != dev_net(dev))
-  skb_scrub_packet(skb);
+  skb_scrub_packet(skb, true);
 
  /*
   * Okay, now see if we can stuff it in the buffer as-is.
-- 
1.7.1