From 4f64c68b7f8dbc05ad2c729f9d568b8e429a3941 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Wed, 8 Oct 2014 19:41:00 -0400
Subject: [iommu] Rework iommu_group_get_for_pci_dev()

Message-id: <20141008194100.32687.30830.stgit@amt.stowe>
Patchwork-id: 97275
O-Subject: [RHEL7.1 PATCH 1/2] iommu: Rework iommu_group_get_for_pci_dev()
Bugzilla: 1141937
RH-Acked-by: Don Dutile <ddutile@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141937
Upstream Status: In Joerg Roedel's IOMMU development tree
  https://git.kernel.org/cgit/linux/kernel/git/joro/iommu.git/commit/drivers/iommu/iommu.c?id=f096c061f5525d1b35a65b793057b52061dcb486
  https://lkml.org/lkml/2014/9/25/340

KABI adjustments:
  ./drivers/iommu/iommu.c Hunk #3 - References to 'dma_alias_devfn' (there
  were two) had to be adjusted as it resides in a Red Hat specific
  "KABI shadow structure" (see: RHEL7 commit 4f994b1e3).

commit f096c061f5525d1b35a65b793057b52061dcb486
Author: Alex Williamson <alex.williamson@redhat.com>
Date: Fri Sep 19 16:03:06 2014 -0600

    It turns out that our assumption that aliases are always to the same
    slot isn't true.  One particular platform reports an IVRS alias of the
    SATA controller (00:11.0) for the legacy IDE controller (00:14.1).
    When we hit this, we attempt to use a single IOMMU group for
    everything on the same bus, which in this case is the root complex.
    We already have multiple groups defined for the root complex by this
    point, resulting in multiple WARN_ON hits.

    This patch makes these sorts of aliases work again with IOMMU groups
    by reworking how we search through the PCI address space to find
    existing groups.  This should also now handle looped dependencies and
    all sorts of crazy inter-dependencies that we'll likely never see.

    The recursion used here should never be very deep.  It's unlikely to
    have individual aliases and only theoretical that we'd ever see a
    chain where one alias causes us to search through to yet another
    alias.  We're also only dealing with PCIe device on a single bus,
    which means we'll typically only see multiple slots in use on the root
    complex.  Loops are also a theoretically possibility, which I've
    tested using fake DMA alias quirks and prevent from causing problems
    using a bitmap of the devfn space that's been visited.

    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Cc: stable@vger.kernel.org # 3.17
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c
index fde1964..423d18e 100644
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -30,6 +30,7 @@
 #include <linux/notifier.h>
 #include <linux/err.h>
 #include <linux/pci.h>
+#include <linux/bitops.h>
 #include <trace/events/iommu.h>
 
 static struct kset *iommu_group_kset;
@@ -515,6 +516,9 @@ int iommu_group_id(struct iommu_group *group)
 }
 EXPORT_SYMBOL_GPL(iommu_group_id);
 
+static struct iommu_group *get_pci_alias_group(struct pci_dev *pdev,
+            unsigned long *devfns);
+
 /*
  * To consider a PCI device isolated, we require ACS to support Source
  * Validation, Request Redirection, Completer Redirection, and Upstream
@@ -525,6 +529,86 @@ EXPORT_SYMBOL_GPL(iommu_group_id);
  */
 #define REQ_ACS_FLAGS   (PCI_ACS_SV | PCI_ACS_RR | PCI_ACS_CR | PCI_ACS_UF)
 
+/*
+ * For multifunction devices which are not isolated from each other, find
+ * all the other non-isolated functions and look for existing groups.  For
+ * each function, we also need to look for aliases to or from other devices
+ * that may already have a group.
+ */
+static struct iommu_group *get_pci_function_alias_group(struct pci_dev *pdev,
+       unsigned long *devfns)
+{
+ struct pci_dev *tmp = NULL;
+ struct iommu_group *group;
+
+ if (!pdev->multifunction || pci_acs_enabled(pdev, REQ_ACS_FLAGS))
+  return NULL;
+
+ for_each_pci_dev(tmp) {
+  if (tmp == pdev || tmp->bus != pdev->bus ||
+      PCI_SLOT(tmp->devfn) != PCI_SLOT(pdev->devfn) ||
+      pci_acs_enabled(tmp, REQ_ACS_FLAGS))
+   continue;
+
+  group = get_pci_alias_group(tmp, devfns);
+  if (group) {
+   pci_dev_put(tmp);
+   return group;
+  }
+ }
+
+ return NULL;
+}
+
+/*
+ * Look for aliases to or from the given device for exisiting groups.  The
+ * dma_alias_devfn only supports aliases on the same bus, therefore the search
+ * space is quite small (especially since we're really only looking at pcie
+ * device, and therefore only expect multiple slots on the root complex or
+ * downstream switch ports).  It's conceivable though that a pair of
+ * multifunction devices could have aliases between them that would cause a
+ * loop.  To prevent this, we use a bitmap to track where we've been.
+ */
+static struct iommu_group *get_pci_alias_group(struct pci_dev *pdev,
+            unsigned long *devfns)
+{
+ struct pci_dev *tmp = NULL;
+ struct iommu_group *group;
+
+ if (test_and_set_bit(pdev->devfn & 0xff, devfns))
+  return NULL;
+
+ group = iommu_group_get(&pdev->dev);
+ if (group)
+  return group;
+
+ for_each_pci_dev(tmp) {
+  if (tmp == pdev || tmp->bus != pdev->bus)
+   continue;
+
+  /* We alias them or they alias us */
+  if (((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&
+       pdev->pci_dev_rh->dma_alias_devfn == tmp->devfn) ||
+      ((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&
+       tmp->pci_dev_rh->dma_alias_devfn == pdev->devfn)) {
+
+   group = get_pci_alias_group(tmp, devfns);
+   if (group) {
+    pci_dev_put(tmp);
+    return group;
+   }
+
+   group = get_pci_function_alias_group(tmp, devfns);
+   if (group) {
+    pci_dev_put(tmp);
+    return group;
+   }
+  }
+ }
+
+ return NULL;
+}
+
 struct group_for_pci_data {
  struct pci_dev *pdev;
  struct iommu_group *group;
@@ -553,7 +637,7 @@ static struct iommu_group *iommu_group_get_for_pci_dev(struct pci_dev *pdev)
  struct group_for_pci_data data;
  struct pci_bus *bus;
  struct iommu_group *group = NULL;
- struct pci_dev *tmp;
+ u64 devfns[4] = { 0 };
 
  /*
   * Find the upstream DMA alias for the device.  A device must not
@@ -587,76 +671,21 @@ static struct iommu_group *iommu_group_get_for_pci_dev(struct pci_dev *pdev)
  }
 
  /*
-  * Next we need to consider DMA alias quirks.  If one device aliases
-  * to another, they should be grouped together.  It's theoretically
-  * possible that aliases could create chains of devices where each
-  * device aliases another device.  If we then factor in multifunction
-  * ACS grouping requirements, each alias could incorporate a new slot
-  * with multiple functions, each with aliases.  This is all extremely
-  * unlikely as DMA alias quirks are typically only used for PCIe
-  * devices where we usually have a single slot per bus.  Furthermore,
-  * the alias quirk is usually to another function within the slot
-  * (and ACS multifunction is not supported) or to a different slot
-  * that doesn't physically exist.  The likely scenario is therefore
-  * that everything on the bus gets grouped together.  To reduce the
-  * problem space, share the IOMMU group for all devices on the bus
-  * if a DMA alias quirk is present on the bus.
-  */
- tmp = NULL;
- for_each_pci_dev(tmp) {
-  if (tmp->bus != pdev->bus ||
-      !(tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN))
-   continue;
-
-  pci_dev_put(tmp);
-  tmp = NULL;
-
-  /* We have an alias quirk, search for an existing group */
-  for_each_pci_dev(tmp) {
-   struct iommu_group *group_tmp;
-
-   if (tmp->bus != pdev->bus)
-    continue;
-
-   group_tmp = iommu_group_get(&tmp->dev);
-   if (!group) {
-    group = group_tmp;
-    continue;
-   }
-
-   if (group_tmp) {
-    WARN_ON(group != group_tmp);
-    iommu_group_put(group_tmp);
-   }
-  }
-
-  return group ? group : iommu_group_alloc();
- }
-
- /*
-  * Non-multifunction devices or multifunction devices supporting
-  * ACS get their own group.
+  * Look for existing groups on device aliases.  If we alias another
+  * device or another device aliases us, use the same group.
   */
- if (!pdev->multifunction || pci_acs_enabled(pdev, REQ_ACS_FLAGS))
-  return iommu_group_alloc();
+ group = get_pci_alias_group(pdev, (unsigned long *)devfns);
+ if (group)
+  return group;
 
  /*
-  * Multifunction devices not supporting ACS share a group with other
-  * similar devices in the same slot.
+  * Look for existing groups on non-isolated functions on the same
+  * slot and aliases of those funcions, if any.  No need to clear
+  * the search bitmap, the tested devfns are still valid.
   */
- tmp = NULL;
- for_each_pci_dev(tmp) {
-  if (tmp == pdev || tmp->bus != pdev->bus ||
-      PCI_SLOT(tmp->devfn) !=  PCI_SLOT(pdev->devfn) ||
-      pci_acs_enabled(tmp, REQ_ACS_FLAGS))
-   continue;
-
-  group = iommu_group_get(&tmp->dev);
-  if (group) {
-   pci_dev_put(tmp);
-   return group;
-  }
- }
+ group = get_pci_function_alias_group(pdev, (unsigned long *)devfns);
+ if (group)
+  return group;
 
  /* No shared group found, allocate new */
  return iommu_group_alloc();
-- 
1.7.1