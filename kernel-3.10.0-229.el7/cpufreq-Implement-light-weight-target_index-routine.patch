From c1cf162019b7913b48bcb45ce37559689dad8347 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:22:49 -0400
Subject: [cpufreq] Implement light weight ->target_index() routine

Message-id: <1409235879-1283-76-git-send-email-prarit@redhat.com>
Patchwork-id: 89404
O-Subject: [RHEL7.1 PATCH BZ 1134639 075/185] cpufreq: Implement light weight ->target_index() routine
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 9c0ebcf78fde0ffa348a95a544c6d3f2dac5af65
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Fri Oct 25 19:45:48 2013 +0530

    cpufreq: Implement light weight ->target_index() routine

    Currently, the prototype of cpufreq_drivers target routines is:

    int target(struct cpufreq_policy *policy, unsigned int target_freq,
      unsigned int relation);

    And most of the drivers call cpufreq_frequency_table_target() to get a valid
    index of their frequency table which is closest to the target_freq. And they
    don't use target_freq and relation after that.

    So, it makes sense to just do this work in cpufreq core before calling
    cpufreq_frequency_table_target() and simply pass index instead. But this can be
    done only with drivers which expose their frequency table with cpufreq core. For
    others we need to stick with the old prototype of target() until those drivers
    are converted to expose frequency tables.

    This patch implements the new light weight prototype for target_index() routine.
    It looks like this:

    int target_index(struct cpufreq_policy *policy, unsigned int index);

    CPUFreq core will call cpufreq_frequency_table_target() before calling this
    routine and pass index to it. Because CPUFreq core now requires to call routines
    present in freq_table.c CONFIG_CPU_FREQ_TABLE must be enabled all the time.

    This also marks target() interface as deprecated. So, that new drivers avoid
    using it. And Documentation is updated accordingly.

    It also converts existing .target() to newly defined light weight
    .target_index() routine for many driver.

    Acked-by: Hans-Christian Egtvedt <egtvedt@samfundet.no>
    Acked-by: Jesper Nilsson <jesper.nilsson@axis.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Russell King <linux@arm.linux.org.uk>
    Acked-by: David S. Miller <davem@davemloft.net>
    Tested-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rjw@rjwysocki.net>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/cpu-freq/cpu-drivers.txt b/Documentation/cpu-freq/cpu-drivers.txt
index 19fa98e..e542198 100644
--- a/Documentation/cpu-freq/cpu-drivers.txt
+++ b/Documentation/cpu-freq/cpu-drivers.txt
@@ -23,8 +23,8 @@ Contents:
 1.1  Initialization
 1.2  Per-CPU Initialization
 1.3  verify
-1.4  target or setpolicy?
-1.5  target
+1.4  target/target_index or setpolicy?
+1.5  target/target_index
 1.6  setpolicy
 2.   Frequency Table Helpers
 
@@ -58,7 +58,8 @@ cpufreq_driver.init -  A pointer to the per-CPU initialization
 cpufreq_driver.verify -  A pointer to a "verification" function.
 
 cpufreq_driver.setpolicy _or_ 
-cpufreq_driver.target -  See below on the differences.
+cpufreq_driver.target/
+target_index  - See below on the differences.
 
 And optionally
 
@@ -68,7 +69,7 @@ cpufreq_driver.resume -  A pointer to a per-CPU resume function
     which is called with interrupts disabled
     and _before_ the pre-suspend frequency
     and/or policy is restored by a call to
-    ->target or ->setpolicy.
+    ->target/target_index or ->setpolicy.
 
 cpufreq_driver.attr -  A pointer to a NULL-terminated list of
     "struct freq_attr" which allow to
@@ -105,8 +106,8 @@ policy->governor  must contain the "default policy" for
     this CPU. A few moments later,
     cpufreq_driver.verify and either
     cpufreq_driver.setpolicy or
-    cpufreq_driver.target is called with
-    these values.
+    cpufreq_driver.target/target_index is called
+    with these values.
 
 For setting some of these values (cpuinfo.min[max]_freq, policy->min[max]), the
 frequency table helpers might be helpful. See the section 2 for more information
@@ -135,20 +136,28 @@ range) is within policy->min and policy->max. If necessary, increase
 policy->max first, and only if this is no solution, decrease policy->min.
 
 
-1.4 target or setpolicy?
+1.4 target/target_index or setpolicy?
 ----------------------------
 
 Most cpufreq drivers or even most cpu frequency scaling algorithms 
 only allow the CPU to be set to one frequency. For these, you use the
-->target call.
+->target/target_index call.
 
 Some cpufreq-capable processors switch the frequency between certain
 limits on their own. These shall use the ->setpolicy call
 
 
-1.4. target
+1.4. target/target_index
 -------------
 
+The target_index call has two arguments: struct cpufreq_policy *policy,
+and unsigned int index (into the exposed frequency table).
+
+The CPUfreq driver must set the new frequency when called here. The
+actual frequency must be determined by freq_table[index].frequency.
+
+Deprecated:
+----------
 The target call has three arguments: struct cpufreq_policy *policy,
 unsigned int target_frequency, unsigned int relation.
 
diff --git a/Documentation/cpu-freq/governors.txt b/Documentation/cpu-freq/governors.txt
index 219970b..77ec215 100644
--- a/Documentation/cpu-freq/governors.txt
+++ b/Documentation/cpu-freq/governors.txt
@@ -40,7 +40,7 @@ Most cpufreq drivers (in fact, all except one, longrun) or even most
 cpu frequency scaling algorithms only offer the CPU to be set to one
 frequency. In order to offer dynamic frequency scaling, the cpufreq
 core must be able to tell these drivers of a "target frequency". So
-these specific drivers will be transformed to offer a "->target"
+these specific drivers will be transformed to offer a "->target/target_index"
 call instead of the existing "->setpolicy" call. For "longrun", all
 stays the same, though.
 
@@ -71,7 +71,7 @@ CPU can be set to switch independently  |    CPU can only be set
       /          the limits of policy->{min,max}
      /               \
     /         \
- Using the ->setpolicy call,   Using the ->target call,
+ Using the ->setpolicy call,   Using the ->target/target_index call,
      the limits and the     the frequency closest
       "policy" is set.     to target_freq is set.
         It is assured that it
diff --git a/drivers/cpufreq/acpi-cpufreq.c b/drivers/cpufreq/acpi-cpufreq.c
index 189eb45..1dad805 100644
--- a/drivers/cpufreq/acpi-cpufreq.c
+++ b/drivers/cpufreq/acpi-cpufreq.c
@@ -424,17 +424,17 @@ static unsigned int check_freqs(const struct cpumask *mask, unsigned int freq,
 }
 
 static int acpi_cpufreq_target(struct cpufreq_policy *policy,
-          unsigned int target_freq, unsigned int relation)
+          unsigned int index)
 {
  struct acpi_cpufreq_data *data = per_cpu(acfreq_data, policy->cpu);
  struct acpi_processor_performance *perf;
  struct cpufreq_freqs freqs;
  struct drv_cmd cmd;
- unsigned int next_state = 0; /* Index into freq_table */
  unsigned int next_perf_state = 0; /* Index into perf table */
  int result = 0;
 
- pr_debug("acpi_cpufreq_target %d (%d)\n", target_freq, policy->cpu);
+ pr_debug("acpi_cpufreq_target %d (%d)\n",
+   data->freq_table[index].frequency, policy->cpu);
 
  if (unlikely(data == NULL ||
       data->acpi_data == NULL || data->freq_table == NULL)) {
@@ -442,16 +442,7 @@ static int acpi_cpufreq_target(struct cpufreq_policy *policy,
  }
 
  perf = data->acpi_data;
- result = cpufreq_frequency_table_target(policy,
-      data->freq_table,
-      target_freq,
-      relation, &next_state);
- if (unlikely(result)) {
-  result = -ENODEV;
-  goto out;
- }
-
- next_perf_state = data->freq_table[next_state].driver_data;
+ next_perf_state = data->freq_table[index].driver_data;
  if (perf->state == next_perf_state) {
   if (unlikely(data->resume)) {
    pr_debug("Called after resume, resetting to P%d\n",
@@ -493,7 +484,7 @@ static int acpi_cpufreq_target(struct cpufreq_policy *policy,
   cmd.mask = cpumask_of(policy->cpu);
 
  freqs.old = perf->states[perf->state].core_frequency * 1000;
- freqs.new = data->freq_table[next_state].frequency;
+ freqs.new = data->freq_table[index].frequency;
  cpufreq_notify_transition(policy, &freqs, CPUFREQ_PRECHANGE);
 
  drv_write(&cmd);
@@ -923,7 +914,7 @@ static struct freq_attr *acpi_cpufreq_attr[] = {
 
 static struct cpufreq_driver acpi_cpufreq_driver = {
  .verify  = cpufreq_generic_frequency_table_verify,
- .target  = acpi_cpufreq_target,
+ .target_index = acpi_cpufreq_target,
  .bios_limit = acpi_processor_get_bios_limit,
  .init  = acpi_cpufreq_cpu_init,
  .exit  = acpi_cpufreq_cpu_exit,
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 8d6d774..b3b882a 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -47,6 +47,11 @@ static LIST_HEAD(cpufreq_policy_list);
 static DEFINE_PER_CPU(char[CPUFREQ_NAME_LEN], cpufreq_cpu_governor);
 #endif
 
+static inline bool has_target(void)
+{
+ return cpufreq_driver->target_index || cpufreq_driver->target;
+}
+
 /*
  * cpu_policy_rwsem is a per CPU reader-writer semaphore designed to cure
  * all cpufreq/hotplug/workqueue/etc related lock issues.
@@ -392,7 +397,7 @@ static int cpufreq_parse_governor(char *str_governor, unsigned int *policy,
    *policy = CPUFREQ_POLICY_POWERSAVE;
    err = 0;
   }
- } else if (cpufreq_driver->target) {
+ } else if (has_target()) {
   struct cpufreq_governor *t;
 
   mutex_lock(&cpufreq_governor_mutex);
@@ -550,7 +555,7 @@ static ssize_t show_scaling_available_governors(struct cpufreq_policy *policy,
  ssize_t i = 0;
  struct cpufreq_governor *t;
 
- if (!cpufreq_driver->target) {
+ if (!has_target()) {
   i += sprintf(buf, "performance powersave");
   goto out;
  }
@@ -835,7 +840,7 @@ static int cpufreq_add_dev_interface(struct cpufreq_policy *policy,
   if (ret)
    goto err_out_kobj_put;
  }
- if (cpufreq_driver->target) {
+ if (has_target()) {
   ret = sysfs_create_file(&policy->kobj, &scaling_cur_freq.attr);
   if (ret)
    goto err_out_kobj_put;
@@ -884,10 +889,10 @@ static int cpufreq_add_policy_cpu(struct cpufreq_policy *policy,
       unsigned int cpu, struct device *dev,
       bool frozen)
 {
- int ret = 0, has_target = !!cpufreq_driver->target;
+ int ret = 0;
  unsigned long flags;
 
- if (has_target) {
+ if (has_target()) {
   ret = __cpufreq_governor(policy, CPUFREQ_GOV_STOP);
   if (ret) {
    pr_err("%s: Failed to stop governor\n", __func__);
@@ -905,7 +910,7 @@ static int cpufreq_add_policy_cpu(struct cpufreq_policy *policy,
 
  unlock_policy_rwsem_write(policy->cpu);
 
- if (has_target) {
+ if (has_target()) {
   if ((ret = __cpufreq_governor(policy, CPUFREQ_GOV_START)) ||
    (ret = __cpufreq_governor(policy, CPUFREQ_GOV_LIMITS))) {
    pr_err("%s: Failed to start governor\n", __func__);
@@ -1213,7 +1218,7 @@ static int __cpufreq_remove_dev_prepare(struct device *dev,
   return -EINVAL;
  }
 
- if (cpufreq_driver->target) {
+ if (has_target()) {
   ret = __cpufreq_governor(policy, CPUFREQ_GOV_STOP);
   if (ret) {
    pr_err("%s: Failed to stop governor\n", __func__);
@@ -1278,7 +1283,7 @@ static int __cpufreq_remove_dev_finish(struct device *dev,
 
  /* If cpu is last user of policy, free policy */
  if (cpus == 1) {
-  if (cpufreq_driver->target) {
+  if (has_target()) {
    ret = __cpufreq_governor(policy,
      CPUFREQ_GOV_POLICY_EXIT);
    if (ret) {
@@ -1327,7 +1332,7 @@ static int __cpufreq_remove_dev_finish(struct device *dev,
    cpufreq_cpu_put(policy);
   }
 
-  if (cpufreq_driver->target) {
+  if (has_target()) {
    if ((ret = __cpufreq_governor(policy, CPUFREQ_GOV_START)) ||
      (ret = __cpufreq_governor(policy, CPUFREQ_GOV_LIMITS))) {
     pr_err("%s: Failed to start governor\n",
@@ -1698,12 +1703,41 @@ int __cpufreq_driver_target(struct cpufreq_policy *policy,
  pr_debug("target for CPU %u: %u kHz, relation %u, requested %u kHz\n",
    policy->cpu, target_freq, relation, old_target_freq);
 
+ /*
+  * This might look like a redundant call as we are checking it again
+  * after finding index. But it is left intentionally for cases where
+  * exactly same freq is called again and so we can save on few function
+  * calls.
+  */
  if (target_freq == policy->cur)
   return 0;
 
  if (cpufreq_driver->target)
   retval = cpufreq_driver->target(policy, target_freq, relation);
+ else if (cpufreq_driver->target_index) {
+  struct cpufreq_frequency_table *freq_table;
+  int index;
 
+  freq_table = cpufreq_frequency_get_table(policy->cpu);
+  if (unlikely(!freq_table)) {
+   pr_err("%s: Unable to find freq_table\n", __func__);
+   goto out;
+  }
+
+  retval = cpufreq_frequency_table_target(policy, freq_table,
+    target_freq, relation, &index);
+  if (unlikely(retval)) {
+   pr_err("%s: Unable to find matching freq\n", __func__);
+   goto out;
+  }
+
+  if (freq_table[index].frequency == policy->cur)
+   retval = 0;
+  else
+   retval = cpufreq_driver->target_index(policy, index);
+ }
+
+out:
  return retval;
 }
 EXPORT_SYMBOL_GPL(__cpufreq_driver_target);
@@ -2030,7 +2064,7 @@ int cpufreq_update_policy(unsigned int cpu)
    pr_debug("Driver did not initialize current freq");
    policy->cur = new_policy.cur;
   } else {
-   if (policy->cur != new_policy.cur && cpufreq_driver->target)
+   if (policy->cur != new_policy.cur && has_target())
     cpufreq_out_of_sync(cpu, policy->cur,
         new_policy.cur);
   }
@@ -2108,7 +2142,8 @@ int cpufreq_register_driver(struct cpufreq_driver *driver_data)
   return -ENODEV;
 
  if (!driver_data || !driver_data->verify || !driver_data->init ||
-     ((!driver_data->setpolicy) && (!driver_data->target)))
+     !(driver_data->setpolicy || driver_data->target_index ||
+      driver_data->target))
   return -EINVAL;
 
  pr_debug("trying to register driver %s\n", driver_data->name);
diff --git a/drivers/cpufreq/p4-clockmod.c b/drivers/cpufreq/p4-clockmod.c
index 6164c1c..3c23053 100644
--- a/drivers/cpufreq/p4-clockmod.c
+++ b/drivers/cpufreq/p4-clockmod.c
@@ -105,23 +105,13 @@ static struct cpufreq_frequency_table p4clockmod_table[] = {
 };
 
 
-static int cpufreq_p4_target(struct cpufreq_policy *policy,
-        unsigned int target_freq,
-        unsigned int relation)
+static int cpufreq_p4_target(struct cpufreq_policy *policy, unsigned int index)
 {
- unsigned int    newstate = DC_RESV;
  struct cpufreq_freqs freqs;
  int i;
 
- if (cpufreq_frequency_table_target(policy, &p4clockmod_table[0],
-    target_freq, relation, &newstate))
-  return -EINVAL;
-
  freqs.old = cpufreq_p4_get(policy->cpu);
- freqs.new = stock_freq * p4clockmod_table[newstate].driver_data / 8;
-
- if (freqs.new == freqs.old)
-  return 0;
+ freqs.new = stock_freq * p4clockmod_table[index].driver_data / 8;
 
  /* notifiers */
  cpufreq_notify_transition(policy, &freqs, CPUFREQ_PRECHANGE);
@@ -131,7 +121,7 @@ static int cpufreq_p4_target(struct cpufreq_policy *policy,
   * Developer's Manual, Volume 3
   */
  for_each_cpu(i, policy->cpus)
-  cpufreq_p4_setdc(i, p4clockmod_table[newstate].driver_data);
+  cpufreq_p4_setdc(i, p4clockmod_table[index].driver_data);
 
  /* notifiers */
  cpufreq_notify_transition(policy, &freqs, CPUFREQ_POSTCHANGE);
@@ -255,7 +245,7 @@ static unsigned int cpufreq_p4_get(unsigned int cpu)
 
 static struct cpufreq_driver p4clockmod_driver = {
  .verify  = cpufreq_generic_frequency_table_verify,
- .target  = cpufreq_p4_target,
+ .target_index = cpufreq_p4_target,
  .init  = cpufreq_p4_cpu_init,
  .exit  = cpufreq_generic_exit,
  .get  = cpufreq_p4_get,
diff --git a/drivers/cpufreq/powernow-k8.c b/drivers/cpufreq/powernow-k8.c
index 85d60e3..8d9f96c 100644
--- a/drivers/cpufreq/powernow-k8.c
+++ b/drivers/cpufreq/powernow-k8.c
@@ -977,20 +977,17 @@ static int transition_frequency_fidvid(struct powernow_k8_data *data,
 
 struct powernowk8_target_arg {
  struct cpufreq_policy  *pol;
- unsigned   targfreq;
- unsigned   relation;
+ unsigned   newstate;
 };
 
 static long powernowk8_target_fn(void *arg)
 {
  struct powernowk8_target_arg *pta = arg;
  struct cpufreq_policy *pol = pta->pol;
- unsigned targfreq = pta->targfreq;
- unsigned relation = pta->relation;
+ unsigned newstate = pta->newstate;
  struct powernow_k8_data *data = per_cpu(powernow_data, pol->cpu);
  u32 checkfid;
  u32 checkvid;
- unsigned int newstate;
  int ret;
 
  if (!data)
@@ -1004,8 +1001,9 @@ static long powernowk8_target_fn(void *arg)
   return -EIO;
  }
 
- pr_debug("targ: cpu %d, %d kHz, min %d, max %d, relation %d\n",
-  pol->cpu, targfreq, pol->min, pol->max, relation);
+ pr_debug("targ: cpu %d, %d kHz, min %d, max %d\n",
+  pol->cpu, data->powernow_table[newstate].frequency, pol->min,
+  pol->max);
 
  if (query_current_values_with_pending_wait(data))
   return -EIO;
@@ -1021,10 +1019,6 @@ static long powernowk8_target_fn(void *arg)
          checkvid, data->currvid);
  }
 
- if (cpufreq_frequency_table_target(pol, data->powernow_table,
-    targfreq, relation, &newstate))
-  return -EIO;
-
  mutex_lock(&fidvid_mutex);
 
  powernow_k8_acpi_pst_values(data, newstate);
@@ -1044,11 +1038,9 @@ static long powernowk8_target_fn(void *arg)
 }
 
 /* Driver entry point to switch to the target frequency */
-static int powernowk8_target(struct cpufreq_policy *pol,
-  unsigned targfreq, unsigned relation)
+static int powernowk8_target(struct cpufreq_policy *pol, unsigned index)
 {
- struct powernowk8_target_arg pta = { .pol = pol, .targfreq = targfreq,
-          .relation = relation };
+ struct powernowk8_target_arg pta = { .pol = pol, .newstate = index };
 
  return work_on_cpu(pol->cpu, powernowk8_target_fn, &pta);
 }
@@ -1213,7 +1205,7 @@ out:
 
 static struct cpufreq_driver cpufreq_amd64_driver = {
  .verify  = cpufreq_generic_frequency_table_verify,
- .target  = powernowk8_target,
+ .target_index = powernowk8_target,
  .bios_limit = acpi_processor_get_bios_limit,
  .init  = powernowk8_cpu_init,
  .exit  = powernowk8_cpu_exit,
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index dad2af4..d18a27b 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -234,9 +234,11 @@ struct cpufreq_driver {
 
  /* define one out of two */
  int (*setpolicy) (struct cpufreq_policy *policy);
- int (*target) (struct cpufreq_policy *policy,
+ int (*target) (struct cpufreq_policy *policy, /* Deprecated */
      unsigned int target_freq,
      unsigned int relation);
+ int (*target_index) (struct cpufreq_policy *policy,
+     unsigned int index);
 
  /* should be defined, if possible */
  unsigned int (*get) (unsigned int cpu);
-- 
1.7.1