From 02a338753fc075db81a481da5ca9f60f8952a410 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:11 -0400
Subject: [kernel] perf: Remove redundant PMU assignment

Message-id: <1410181752-25631-7-git-send-email-jolsa@redhat.com>
Patchwork-id: 91688
O-Subject: [PATCH RHEL7.1 BZ1134356 006/307] perf: Remove redundant PMU assignment
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit fdded676c3ef680bf1abc415d307d7e69a6768d1
Author: Mark Rutland <mark.rutland@arm.com>
Date: Mon Feb 10 17:44:19 2014 +0000

description
===========
Currently perf_branch_stack_sched_in iterates over the set of pmus,
checks that each pmu has a flush_branch_stack callback, then overwrites
the pmu before calling the callback. This is either redundant or broken.

In systems with a single hw pmu, pmu == cpuctx->ctx.pmu, and thus the
assignment is redundant.

In systems with multiple hw pmus (i.e. multiple pmus with task_ctx_nr ==
perf_hw_context) the pmus share the same perf_cpu_context. Thus the
assignment can cause one of the pmus to flush its branch stack
repeatedly rather than causing each of the pmus to flush their branch
stacks. Worse still, if only some pmus have the callback the assignment
can result in a branch to NULL.

This patch removes the redundant assignment.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index 8217707..a087b2b 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -2579,8 +2579,6 @@ static void perf_branch_stack_sched_in(struct task_struct *prev,
   if (cpuctx->ctx.nr_branch_stack > 0
       && pmu->flush_branch_stack) {
 
-   pmu = cpuctx->ctx.pmu;
-
    perf_ctx_lock(cpuctx, cpuctx->task_ctx);
 
    perf_pmu_disable(pmu);
-- 
1.7.1