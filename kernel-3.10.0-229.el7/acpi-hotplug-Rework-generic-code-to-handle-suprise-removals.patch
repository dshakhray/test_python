From 9164fd3da3b9b4f2b4eb568a2f4df401a3151994 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 28 Aug 2014 03:05:43 -0400
Subject: [acpi] hotplug: Rework generic code to handle suprise removals

Message-id: <20140828030543.2117.77969.stgit@gir.stowe>
Patchwork-id: 89309
O-Subject: [RHEL7.1 PATCH 21/30] ACPI / hotplug: Rework generic code to handle suprise removals
Bugzilla: 1128632
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1128632
Upstream Status: 443fc8202272190c4693209b772edba46cd7fe61

commit 443fc8202272190c4693209b772edba46cd7fe61
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 22 21:55:43 2013 +0100

    ACPI / hotplug: Rework generic code to handle suprise removals

    The generic ACPI hotplug code used for several types of device
    doesn't handle surprise removals, mostly because those devices
    currently cannot be removed by surprise in the majority of systems.
    However, surprise removals should be handled by that code as well
    as surprise additions of devices, so make it do that.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 1979696..cd1797c 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -276,18 +276,72 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
  return 0;
 }
 
+static int acpi_scan_device_not_present(struct acpi_device *adev)
+{
+ if (!acpi_device_enumerated(adev)) {
+  dev_warn(&adev->dev, "Still not present\n");
+  return -EALREADY;
+ }
+ acpi_bus_trim(adev);
+ return 0;
+}
+
 static int acpi_scan_device_check(struct acpi_device *adev)
 {
  int error;
 
+ acpi_bus_get_status(adev);
+ if (adev->status.present || adev->status.functional) {
+  /*
+   * This function is only called for device objects for which
+   * matching scan handlers exist.  The only situation in which
+   * the scan handler is not attached to this device object yet
+   * is when the device has just appeared (either it wasn't
+   * present at all before or it was removed and then added
+   * again).
+   */
+  if (adev->handler) {
+   dev_warn(&adev->dev, "Already enumerated\n");
+   return -EALREADY;
+  }
+  error = acpi_bus_scan(adev->handle);
+  if (error) {
+   dev_warn(&adev->dev, "Namespace scan failure\n");
+   return error;
+  }
+  if (!adev->handler) {
+   dev_warn(&adev->dev, "Enumeration failure\n");
+   error = -ENODEV;
+  }
+ } else {
+  error = acpi_scan_device_not_present(adev);
+ }
+ return error;
+}
+
+static int acpi_scan_bus_check(struct acpi_device *adev)
+{
+ struct acpi_scan_handler *handler = adev->handler;
+ struct acpi_device *child;
+ int error;
+
+ acpi_bus_get_status(adev);
+ if (!(adev->status.present || adev->status.functional)) {
+  acpi_scan_device_not_present(adev);
+  return 0;
+ }
+ if (handler && handler->hotplug.scan_dependent)
+  return handler->hotplug.scan_dependent(adev);
+
  error = acpi_bus_scan(adev->handle);
  if (error) {
   dev_warn(&adev->dev, "Namespace scan failure\n");
   return error;
  }
- if (!adev->handler) {
-  dev_warn(&adev->dev, "Enumeration failure\n");
-  return -ENODEV;
+ list_for_each_entry(child, &adev->children, node) {
+  error = acpi_scan_bus_check(child);
+  if (error)
+   return error;
  }
  return 0;
 }
@@ -296,7 +350,6 @@ static void acpi_device_hotplug(void *data, u32 src)
 {
  u32 ost_code = ACPI_OST_SC_NON_SPECIFIC_FAILURE;
  struct acpi_device *adev = data;
- struct acpi_scan_handler *handler;
  int error;
 
  lock_device_hotplug();
@@ -310,32 +363,12 @@ static void acpi_device_hotplug(void *data, u32 src)
  if (adev->handle == INVALID_ACPI_HANDLE)
   goto out;
 
- handler = adev->handler;
-
  switch (src) {
  case ACPI_NOTIFY_BUS_CHECK:
-  if (handler) {
-   error = handler->hotplug.scan_dependent ?
-     handler->hotplug.scan_dependent(adev) :
-     acpi_bus_scan(adev->handle);
-  } else {
-   error = acpi_scan_device_check(adev);
-  }
+  error = acpi_scan_bus_check(adev);
   break;
  case ACPI_NOTIFY_DEVICE_CHECK:
-  /*
-   * This code is only run for device objects for which matching
-   * scan handlers exist.  The only situation in which the scan
-   * handler is not attached to this device object yet is when the
-   * device has just appeared (either it wasn't present at all
-   * before or it was removed and then added again).
-   */
-  if (adev->handler) {
-   dev_warn(&adev->dev, "Already enumerated\n");
-   error = -EBUSY;
-  } else {
-   error = acpi_scan_device_check(adev);
-  }
+  error = acpi_scan_device_check(adev);
   break;
  case ACPI_NOTIFY_EJECT_REQUEST:
  case ACPI_OST_EC_OSPM_EJECT:
-- 
1.7.1