From 7421b62489e0bcc67d8ea902e34326db08b5c2df Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:02:49 -0400
Subject: [fs] btrfs: don't compress for a small write

Message-id: <1407179109-13714-283-git-send-email-sandeen@redhat.com>
Patchwork-id: 87168
O-Subject: [RHEL7.1 PATCH 282/422] Btrfs: don't compress for a small write
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Wang Shilong <wangsl.fnst@cn.fujitsu.com>

commit 68bb462d42a963169bf7acbe106aae08c17129a5
Author: Wang Shilong <wangsl.fnst@cn.fujitsu.com>
Date:   Tue Apr 1 18:01:42 2014 +0800

    Btrfs: don't compress for a small write

    To compress a small file range(<=blocksize) that is not
    an inline extent can not save disk space at all. skip it can
    save us some cpu time.

    This patch can also fix wrong setting nocompression flag for
    inode, say a case when @total_in is 4096, and then we get
    @total_compressed 52,because we do aligment to page cache size
    firstly, and then we get into conclusion @total_in=@total_compressed
    thus we will clear this inode's compression flag.

    An exception comes from inserting inline extent failure but we
    still have @total_compressed < @total_in,so we will still reset
    inode's flag, this is ok, because we don't have good compression
    effect.

    Signed-off-by: Wang Shilong <wangsl.fnst@cn.fujitsu.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index 4397ce9..3ff5075 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -394,6 +394,14 @@ static noinline int compress_file_range(struct inode *inode,
      (start > 0 || end + 1 < BTRFS_I(inode)->disk_i_size))
   btrfs_add_inode_defrag(NULL, inode);
 
+ /*
+  * skip compression for a small file range(<=blocksize) that
+  * isn't an inline extent, since it dosen't save disk space at all.
+  */
+ if ((end - start + 1) <= blocksize &&
+     (start > 0 || end + 1 < BTRFS_I(inode)->disk_i_size))
+  goto cleanup_and_bail_uncompressed;
+
  actual_end = min_t(u64, isize, end + 1);
 again:
  will_compress = 0;
-- 
1.7.1