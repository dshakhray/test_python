From 83b009a8d27146191e55876d941efa8f2a1b0683 Mon Sep 17 00:00:00 2001
From: Panu Matilainen <pmatilai@redhat.com>
Date: Thu, 20 Nov 2014 12:27:22 -0500
Subject: [net] ipv6: avoid high order memory allocations for /proc/net/ipv6_route

Message-id: <588a291df4bd1802f97ac3d31a7fd7adaa0d5e94.1416484883.git.pmatilai@redhat.com>
Patchwork-id: 100384
O-Subject: [RHEL7 PATCH net 1/2] ipv6: avoid high order memory allocations for /proc/net/ipv6_route
Bugzilla: 1163605
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Marcelo Leitner <mleitner@redhat.com>
RH-Acked-by: Daniel Borkmann <dborkman@redhat.com>

Straight backport of switching /proc/net/ipv6_route to use seq_file,
the optional deletion of now unused stuff split to other patch.

First half of:
commit 8d2ca1d7b5c3e63b3a8a81ae99015b615c5f2bf7
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Sat Sep 21 16:55:59 2013 +0200

    ipv6: avoid high order memory allocations for /proc/net/ipv6_route

    Dumping routes on a system with lots rt6_infos in the fibs causes up to
    11-order allocations in seq_file (which fail). While we could switch
    there to vmalloc we could just implement the streaming interface for
    /proc/net/ipv6_route. This patch switches /proc/net/ipv6_route from
    single_open_net to seq_open_net.

    loff_t *pos tracks dst entries.

    [...]

    Cc: Ben Greear <greearb@candelatech.com>
    Cc: Patrick McHardy <kaber@trash.net>
    Cc: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Panu Matilainen <pmatilai@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/ip6_fib.h b/include/net/ip6_fib.h
index de849ef..c789378 100644
--- a/include/net/ip6_fib.h
+++ b/include/net/ip6_fib.h
@@ -311,6 +311,9 @@ extern void   fib6_gc_cleanup(void);
 
 extern int   fib6_init(void);
 
+extern int   ipv6_route_open(struct inode *inode,
+      struct file *file);
+
 #ifdef CONFIG_IPV6_MULTIPLE_TABLES
 extern int   fib6_rules_init(void);
 extern void   fib6_rules_cleanup(void);
diff --git a/net/ipv6/ip6_fib.c b/net/ipv6/ip6_fib.c
index fad3b24..d948b97 100644
--- a/net/ipv6/ip6_fib.c
+++ b/net/ipv6/ip6_fib.c
@@ -1801,3 +1801,175 @@ void fib6_gc_cleanup(void)
  unregister_pernet_subsys(&fib6_net_ops);
  kmem_cache_destroy(fib6_node_kmem);
 }
+
+#ifdef CONFIG_PROC_FS
+
+struct ipv6_route_iter {
+ struct seq_net_private p;
+ struct fib6_walker_t w;
+ loff_t skip;
+ struct fib6_table *tbl;
+};
+
+static int ipv6_route_seq_show(struct seq_file *seq, void *v)
+{
+ struct rt6_info *rt = v;
+ struct ipv6_route_iter *iter = seq->private;
+
+ seq_printf(seq, "%pi6 %02x ", &rt->rt6i_dst.addr, rt->rt6i_dst.plen);
+
+#ifdef CONFIG_IPV6_SUBTREES
+ seq_printf(seq, "%pi6 %02x ", &rt->rt6i_src.addr, rt->rt6i_src.plen);
+#else
+ seq_puts(seq, "00000000000000000000000000000000 00 ");
+#endif
+ if (rt->rt6i_flags & RTF_GATEWAY)
+  seq_printf(seq, "%pi6", &rt->rt6i_gateway);
+ else
+  seq_puts(seq, "00000000000000000000000000000000");
+
+ seq_printf(seq, " %08x %08x %08x %08x %8s\n",
+     rt->rt6i_metric, atomic_read(&rt->dst.__refcnt),
+     rt->dst.__use, rt->rt6i_flags,
+     rt->dst.dev ? rt->dst.dev->name : "");
+ iter->w.leaf = NULL;
+ return 0;
+}
+
+static int ipv6_route_yield(struct fib6_walker_t *w)
+{
+ struct ipv6_route_iter *iter = w->args;
+
+ if (!iter->skip)
+  return 1;
+
+ do {
+  iter->w.leaf = iter->w.leaf->dst.rt6_next;
+  iter->skip--;
+  if (!iter->skip && iter->w.leaf)
+   return 1;
+ } while (iter->w.leaf);
+
+ return 0;
+}
+
+static void ipv6_route_seq_setup_walk(struct ipv6_route_iter *iter)
+{
+ memset(&iter->w, 0, sizeof(iter->w));
+ iter->w.func = ipv6_route_yield;
+ iter->w.root = &iter->tbl->tb6_root;
+ iter->w.state = FWS_INIT;
+ iter->w.node = iter->w.root;
+ iter->w.args = iter;
+ INIT_LIST_HEAD(&iter->w.lh);
+ fib6_walker_link(&iter->w);
+}
+
+static struct fib6_table *ipv6_route_seq_next_table(struct fib6_table *tbl,
+          struct net *net)
+{
+ unsigned int h;
+ struct hlist_node *node;
+
+ if (tbl) {
+  h = (tbl->tb6_id & (FIB6_TABLE_HASHSZ - 1)) + 1;
+  node = rcu_dereference_bh(hlist_next_rcu(&tbl->tb6_hlist));
+ } else {
+  h = 0;
+  node = NULL;
+ }
+
+ while (!node && h < FIB6_TABLE_HASHSZ) {
+  node = rcu_dereference_bh(
+   hlist_first_rcu(&net->ipv6.fib_table_hash[h++]));
+ }
+ return hlist_entry_safe(node, struct fib6_table, tb6_hlist);
+}
+
+static void *ipv6_route_seq_next(struct seq_file *seq, void *v, loff_t *pos)
+{
+ int r;
+ struct rt6_info *n;
+ struct net *net = seq_file_net(seq);
+ struct ipv6_route_iter *iter = seq->private;
+
+ if (!v)
+  goto iter_table;
+
+ n = ((struct rt6_info *)v)->dst.rt6_next;
+ if (n) {
+  ++*pos;
+  return n;
+ }
+
+iter_table:
+ read_lock(&iter->tbl->tb6_lock);
+ r = fib6_walk_continue(&iter->w);
+ read_unlock(&iter->tbl->tb6_lock);
+ if (r > 0) {
+  if (v)
+   ++*pos;
+  return iter->w.leaf;
+ } else if (r < 0) {
+  fib6_walker_unlink(&iter->w);
+  return NULL;
+ }
+ fib6_walker_unlink(&iter->w);
+
+ iter->tbl = ipv6_route_seq_next_table(iter->tbl, net);
+ if (!iter->tbl)
+  return NULL;
+
+ ipv6_route_seq_setup_walk(iter);
+ goto iter_table;
+}
+
+static void *ipv6_route_seq_start(struct seq_file *seq, loff_t *pos)
+ __acquires(RCU_BH)
+{
+ struct net *net = seq_file_net(seq);
+ struct ipv6_route_iter *iter = seq->private;
+
+ rcu_read_lock_bh();
+ iter->tbl = ipv6_route_seq_next_table(NULL, net);
+ iter->skip = *pos;
+
+ if (iter->tbl) {
+  ipv6_route_seq_setup_walk(iter);
+  return ipv6_route_seq_next(seq, NULL, pos);
+ } else {
+  return NULL;
+ }
+}
+
+static bool ipv6_route_iter_active(struct ipv6_route_iter *iter)
+{
+ struct fib6_walker_t *w = &iter->w;
+ return w->node && !(w->state == FWS_U && w->node == w->root);
+}
+
+static void ipv6_route_seq_stop(struct seq_file *seq, void *v)
+ __releases(RCU_BH)
+{
+ struct ipv6_route_iter *iter = seq->private;
+
+ if (ipv6_route_iter_active(iter))
+  fib6_walker_unlink(&iter->w);
+
+ rcu_read_unlock_bh();
+}
+
+static const struct seq_operations ipv6_route_seq_ops = {
+ .start = ipv6_route_seq_start,
+ .next = ipv6_route_seq_next,
+ .stop = ipv6_route_seq_stop,
+ .show = ipv6_route_seq_show
+};
+
+int ipv6_route_open(struct inode *inode, struct file *file)
+{
+ return seq_open_net(inode, file, &ipv6_route_seq_ops,
+       sizeof(struct ipv6_route_iter));
+}
+
+#endif /* CONFIG_PROC_FS */
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index 546b35f..a3f7ad1 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -2838,47 +2838,12 @@ struct rt6_proc_arg
  int len;
 };
 
-static int rt6_info_route(struct rt6_info *rt, void *p_arg)
-{
- struct seq_file *m = p_arg;
-
- seq_printf(m, "%pi6 %02x ", &rt->rt6i_dst.addr, rt->rt6i_dst.plen);
-
-#ifdef CONFIG_IPV6_SUBTREES
- seq_printf(m, "%pi6 %02x ", &rt->rt6i_src.addr, rt->rt6i_src.plen);
-#else
- seq_puts(m, "00000000000000000000000000000000 00 ");
-#endif
- if (rt->rt6i_flags & RTF_GATEWAY) {
-  seq_printf(m, "%pi6", &rt->rt6i_gateway);
- } else {
-  seq_puts(m, "00000000000000000000000000000000");
- }
- seq_printf(m, " %08x %08x %08x %08x %8s\n",
-     rt->rt6i_metric, atomic_read(&rt->dst.__refcnt),
-     rt->dst.__use, rt->rt6i_flags,
-     rt->dst.dev ? rt->dst.dev->name : "");
- return 0;
-}
-
-static int ipv6_route_show(struct seq_file *m, void *v)
-{
- struct net *net = (struct net *)m->private;
- fib6_clean_all_ro(net, rt6_info_route, 0, m);
- return 0;
-}
-
-static int ipv6_route_open(struct inode *inode, struct file *file)
-{
- return single_open_net(inode, file, ipv6_route_show);
-}
-
 static const struct file_operations ipv6_route_proc_fops = {
  .owner  = THIS_MODULE,
  .open  = ipv6_route_open,
  .read  = seq_read,
  .llseek  = seq_lseek,
- .release = single_release_net,
+ .release = seq_release_net,
 };
 
 static int rt6_stats_seq_show(struct seq_file *seq, void *v)
-- 
1.7.1