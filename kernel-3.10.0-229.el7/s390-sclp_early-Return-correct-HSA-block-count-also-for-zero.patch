From d255d2480ed9c87b4981f0132cedebbc848c664f Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Mon, 16 Jun 2014 12:56:02 -0400
Subject: [s390] sclp_early: Return correct HSA block count also for zero

Message-id: <1402923362-2331-12-git-send-email-brueckner@redhat.com>
Patchwork-id: 84037
O-Subject: [RHEL7.1 PATCH 11/11] [s390] s390/sclp_early: Return correct HSA block count also for zero
Bugzilla: 1107730
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 9499934f70deac0cdb96aa2d90f2a0a2de69d80c
Author: Michael Holzheu <holzheu@linux.vnet.ibm.com>
Date:   Mon Feb 24 14:30:00 2014 +0100

    s390/sclp_early: Return correct HSA block count also for zero

    Currently we return a negative block count if SCLP returns HSA block
    count zero. The reason is that we subtract one for the header page.

    So fix this and correctly return zero block count if SCLP returns zero.

    Signed-off-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1107730
https://bugzilla.redhat.com/show_bug.cgi?id=1107730

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=9499934f70deac0cdb96aa2d90f2a0a2de69d80c

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7572070

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/char/sclp_early.c b/drivers/s390/char/sclp_early.c
index 82f2c38..2c6aac6 100644
--- a/drivers/s390/char/sclp_early.c
+++ b/drivers/s390/char/sclp_early.c
@@ -184,9 +184,9 @@ static long __init sclp_hsa_size_init(struct sdias_sccb *sccb)
  sccb_init_eq_size(sccb);
  if (sclp_cmd_early(SCLP_CMDW_WRITE_EVENT_DATA, sccb))
   return -EIO;
- if (sccb->evbuf.blk_cnt != 0)
-  return (sccb->evbuf.blk_cnt - 1) * PAGE_SIZE;
- return 0;
+ if (sccb->evbuf.blk_cnt == 0)
+  return 0;
+ return (sccb->evbuf.blk_cnt - 1) * PAGE_SIZE;
 }
 
 static long __init sclp_hsa_copy_wait(struct sccb_header *sccb)
@@ -195,6 +195,8 @@ static long __init sclp_hsa_copy_wait(struct sccb_header *sccb)
  sccb->length = PAGE_SIZE;
  if (sclp_cmd_early(SCLP_CMDW_READ_EVENT_DATA, sccb))
   return -EIO;
+ if (((struct sdias_sccb *) sccb)->evbuf.blk_cnt == 0)
+  return 0;
  return (((struct sdias_sccb *) sccb)->evbuf.blk_cnt - 1) * PAGE_SIZE;
 }
 
-- 
1.7.1