From 2e5054e84e8fecb92eb6a072c1d877dc3b0e4f38 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@redhat.com>
Date: Wed, 22 Oct 2014 19:19:17 -0400
Subject: [scsi] fcoe: Reduce fcoe_sysfs_fcf_add() stack usage

Message-id: <1414005562-16279-4-git-send-email-nhorman@redhat.com>
Patchwork-id: 98085
O-Subject: [RHEL7.1 v2 PATCH 3/8] fcoe: Reduce fcoe_sysfs_fcf_add() stack usage
Bugzilla: 1087099
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tomas Henzl <thenzl@redhat.com>

This patch fixes the following compiler warning:

drivers/scsi/fcoe/fcoe_ctlr.c: In function fcoe_sysfs_fcf_add:
drivers/scsi/fcoe/fcoe_ctlr.c:211:1: warning: the frame size of 1480 bytes is larger than 1024 bytes [-Wframe-larger-than=]

Signed-off-by: Bart Van Assche <bvanassche@acm.org>
Cc: Neil Horman <nhorman@tuxdriver.com>
Signed-off-by: Robert Love <robert.w.love@intel.com>
(cherry picked from commit 1c2c1b4fbd413fd814807768d2aba9023722ed76)

BZ: 1087099
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8150961
Testing: Tested by Intel
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/fcoe/fcoe_ctlr.c b/drivers/scsi/fcoe/fcoe_ctlr.c
index 456a8b3..eb690a5 100644
--- a/drivers/scsi/fcoe/fcoe_ctlr.c
+++ b/drivers/scsi/fcoe/fcoe_ctlr.c
@@ -170,20 +170,24 @@ static int fcoe_sysfs_fcf_add(struct fcoe_fcf *new)
 {
  struct fcoe_ctlr *fip = new->fip;
  struct fcoe_ctlr_device *ctlr_dev;
- struct fcoe_fcf_device temp, *fcf_dev;
- int rc = 0;
+ struct fcoe_fcf_device *temp, *fcf_dev;
+ int rc = -ENOMEM;
 
  LIBFCOE_FIP_DBG(fip, "New FCF fab %16.16llx mac %pM\n",
    new->fabric_name, new->fcf_mac);
 
- temp.fabric_name = new->fabric_name;
- temp.switch_name = new->switch_name;
- temp.fc_map = new->fc_map;
- temp.vfid = new->vfid;
- memcpy(temp.mac, new->fcf_mac, ETH_ALEN);
- temp.priority = new->pri;
- temp.fka_period = new->fka_period;
- temp.selected = 0; /* default to unselected */
+ temp = kzalloc(sizeof(*temp), GFP_KERNEL);
+ if (!temp)
+  goto out;
+
+ temp->fabric_name = new->fabric_name;
+ temp->switch_name = new->switch_name;
+ temp->fc_map = new->fc_map;
+ temp->vfid = new->vfid;
+ memcpy(temp->mac, new->fcf_mac, ETH_ALEN);
+ temp->priority = new->pri;
+ temp->fka_period = new->fka_period;
+ temp->selected = 0; /* default to unselected */
 
  /*
   * If ctlr_dev doesn't exist then it means we're a libfcoe user
@@ -195,7 +199,7 @@ static int fcoe_sysfs_fcf_add(struct fcoe_fcf *new)
  ctlr_dev = fcoe_ctlr_to_ctlr_dev(fip);
  if (ctlr_dev) {
   mutex_lock(&ctlr_dev->lock);
-  fcf_dev = fcoe_fcf_device_add(ctlr_dev, &temp);
+  fcf_dev = fcoe_fcf_device_add(ctlr_dev, temp);
   if (unlikely(!fcf_dev)) {
    rc = -ENOMEM;
    mutex_unlock(&ctlr_dev->lock);
@@ -221,8 +225,10 @@ static int fcoe_sysfs_fcf_add(struct fcoe_fcf *new)
 
  list_add(&new->list, &fip->fcfs);
  fip->fcf_count++;
+ rc = 0;
 
 out:
+ kfree(temp);
  return rc;
 }
 
-- 
1.7.1