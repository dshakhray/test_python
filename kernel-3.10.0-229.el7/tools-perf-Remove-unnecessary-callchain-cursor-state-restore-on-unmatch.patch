From 90719a352710a43e7fda607dbba7c3825ac117de Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:52:53 -0400
Subject: [tools] perf: Remove unnecessary callchain cursor state restore on unmatch

Message-id: <1408953210-26343-286-git-send-email-jolsa@redhat.com>
Patchwork-id: 89007
O-Subject: [PATCH RHEL7.1 BZ1133083 285/322] perf tools: Remove unnecessary callchain cursor state restore on unmatch
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 2a29190c040c0b11e39197c67abf6f87e0a61f9a
Author: Frederic Weisbecker <fweisbec@gmail.com>
Date: Tue Jan 14 16:37:16 2014 +0100

description
===========
If a new callchain branch doesn't match a single entry of the node that
it is given against comparison in append_chain(), then the cursor is
expected to be at the same position as it was before the comparison
loop.

As such, there is no need to restore the cursor position on exit in case
of non matching branches.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/callchain.c b/tools/perf/util/callchain.c
index 662867d..8d9db45 100644
--- a/tools/perf/util/callchain.c
+++ b/tools/perf/util/callchain.c
@@ -388,7 +388,6 @@ append_chain(struct callchain_node *root,
       struct callchain_cursor *cursor,
       u64 period)
 {
- struct callchain_cursor_node *curr_snap = cursor->curr;
  struct callchain_list *cnode;
  u64 start = cursor->pos;
  bool found = false;
@@ -420,8 +419,6 @@ append_chain(struct callchain_node *root,
  /* matches not, relay no the parent */
  if (!found) {
   WARN_ONCE(!cmp, "Chain comparison error\n");
-  cursor->curr = curr_snap;
-  cursor->pos = start;
   return cmp;
  }
 
-- 
1.7.1