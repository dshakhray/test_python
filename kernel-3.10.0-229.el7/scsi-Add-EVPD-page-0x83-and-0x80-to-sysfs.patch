From 8d61b048c49d1d6c01941c48ec2142ac29371c7d Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Wed, 20 Aug 2014 18:59:05 -0400
Subject: [scsi] Add EVPD page 0x83 and 0x80 to sysfs

Message-id: <1408561176-18133-27-git-send-email-emilne@redhat.com>
Patchwork-id: 88455
O-Subject: [RHEL7.1 PATCH e-stor 26/57] [SCSI] Add EVPD page 0x83 and 0x80 to sysfs
Bugzilla: 1132092
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Ewan D. Milne" <emilne@redhat.com>

upstream commit b3ae8780b42918111387240762f470d5c1e269d6

Tested by Ewan D. Milne and Barry Donahue with a combination
of manual and automated testing.  No issues seen.

(Modified for RHEL7.1 -- put changes to struct scsi_device under
 #ifndef __GENKSYMS__ for KABI.  Note that space was reserved in
 this structure in RHEL7.0 explicitly for this purpose.)

upstream commit b3ae8780b42918111387240762f470d5c1e269d6
Author: Hannes Reinecke <hare@suse.de>
Date:   Sat Mar 15 09:51:49 2014 +0100

    [SCSI] Add EVPD page 0x83 and 0x80 to sysfs

    EVPD page 0x83 is used to uniquely identify the device.
    So instead of having each and every program issue a separate
    SG_IO call to retrieve this information it does make far more
    sense to display it in sysfs.

    Some older devices (most notably tapes) will only report reliable
    information in page 0x80 (Unit Serial Number). So export this
    in the sysfs attribute 'vpd_pg80'.

    [jejb: checkpatch fix]
    [hare: attach after transport configure]
    [fengguang.wu@intel.com: spotted problems with the original now fixed]
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

Signed-off-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/scsi.c b/drivers/scsi/scsi.c
index aef4122..0fd01de 100644
--- a/drivers/scsi/scsi.c
+++ b/drivers/scsi/scsi.c
@@ -1017,6 +1017,93 @@ int scsi_get_vpd_page(struct scsi_device *sdev, u8 page, unsigned char *buf,
 EXPORT_SYMBOL_GPL(scsi_get_vpd_page);
 
 /**
+ * scsi_attach_vpd - Attach Vital Product Data to a SCSI device structure
+ * @sdev: The device to ask
+ *
+ * Attach the 'Device Identification' VPD page (0x83) and the
+ * 'Unit Serial Number' VPD page (0x80) to a SCSI device
+ * structure. This information can be used to identify the device
+ * uniquely.
+ */
+void scsi_attach_vpd(struct scsi_device *sdev)
+{
+ int result, i;
+ int vpd_len = SCSI_VPD_PG_LEN;
+ int pg80_supported = 0;
+ int pg83_supported = 0;
+ unsigned char *vpd_buf;
+
+ if (sdev->skip_vpd_pages)
+  return;
+retry_pg0:
+ vpd_buf = kmalloc(vpd_len, GFP_KERNEL);
+ if (!vpd_buf)
+  return;
+
+ /* Ask for all the pages supported by this device */
+ result = scsi_vpd_inquiry(sdev, vpd_buf, 0, vpd_len);
+ if (result < 0) {
+  kfree(vpd_buf);
+  return;
+ }
+ if (result > vpd_len) {
+  vpd_len = result;
+  kfree(vpd_buf);
+  goto retry_pg0;
+ }
+
+ for (i = 4; i < result; i++) {
+  if (vpd_buf[i] == 0x80)
+   pg80_supported = 1;
+  if (vpd_buf[i] == 0x83)
+   pg83_supported = 1;
+ }
+ kfree(vpd_buf);
+ vpd_len = SCSI_VPD_PG_LEN;
+
+ if (pg80_supported) {
+retry_pg80:
+  vpd_buf = kmalloc(vpd_len, GFP_KERNEL);
+  if (!vpd_buf)
+   return;
+
+  result = scsi_vpd_inquiry(sdev, vpd_buf, 0x80, vpd_len);
+  if (result < 0) {
+   kfree(vpd_buf);
+   return;
+  }
+  if (result > vpd_len) {
+   vpd_len = result;
+   kfree(vpd_buf);
+   goto retry_pg80;
+  }
+  sdev->vpd_pg80_len = result;
+  sdev->vpd_pg80 = vpd_buf;
+  vpd_len = SCSI_VPD_PG_LEN;
+ }
+
+ if (pg83_supported) {
+retry_pg83:
+  vpd_buf = kmalloc(vpd_len, GFP_KERNEL);
+  if (!vpd_buf)
+   return;
+
+  result = scsi_vpd_inquiry(sdev, vpd_buf, 0x83, vpd_len);
+  if (result < 0) {
+   kfree(vpd_buf);
+   return;
+  }
+  if (result > vpd_len) {
+   vpd_len = result;
+   kfree(vpd_buf);
+   goto retry_pg83;
+  }
+  sdev->vpd_pg83_len = result;
+  sdev->vpd_pg83 = vpd_buf;
+ }
+}
+
+/**
  * scsi_report_opcode - Find out if a given command opcode is supported
  * @sdev: scsi device to query
  * @buffer: scratch buffer (must be at least 20 bytes long)
diff --git a/drivers/scsi/scsi_scan.c b/drivers/scsi/scsi_scan.c
index 307a811..cb85d04 100644
--- a/drivers/scsi/scsi_scan.c
+++ b/drivers/scsi/scsi_scan.c
@@ -946,6 +946,9 @@ static int scsi_add_lun(struct scsi_device *sdev, unsigned char *inq_result,
   }
  }
 
+ if (sdev->scsi_level >= SCSI_3)
+  scsi_attach_vpd(sdev);
+
  sdev->max_queue_depth = sdev->queue_depth;
 
  /*
diff --git a/drivers/scsi/scsi_sysfs.c b/drivers/scsi/scsi_sysfs.c
index 511f831..bf9f063 100644
--- a/drivers/scsi/scsi_sysfs.c
+++ b/drivers/scsi/scsi_sysfs.c
@@ -417,6 +417,8 @@ static void scsi_device_dev_release_usercontext(struct work_struct *work)
 
  scsi_target_reap(scsi_target(sdev));
 
+ kfree(sdev->vpd_pg83);
+ kfree(sdev->vpd_pg80);
  kfree(sdev->inquiry);
  kfree(sdev);
 
@@ -756,8 +758,32 @@ store_queue_type_field(struct device *dev, struct device_attribute *attr,
 static DEVICE_ATTR(queue_type, S_IRUGO | S_IWUSR, show_queue_type_field,
      store_queue_type_field);
 
+#define sdev_vpd_pg_attr(_page)      \
+static ssize_t       \
+show_vpd_##_page(struct file *filp, struct kobject *kobj, \
+   struct bin_attribute *bin_attr,   \
+   char *buf, loff_t off, size_t count)   \
+{         \
+ struct device *dev = container_of(kobj, struct device, kobj); \
+ struct scsi_device *sdev = to_scsi_device(dev);   \
+ if (!sdev->vpd_##_page)      \
+  return -EINVAL;      \
+ return memory_read_from_buffer(buf, count, &off,  \
+           sdev->vpd_##_page,  \
+           sdev->vpd_##_page##_len); \
+}         \
+static struct bin_attribute dev_attr_vpd_##_page = {  \
+ .attr = {.name = __stringify(vpd_##_page), .mode = S_IRUGO }, \
+ .size = 0,       \
+ .read = show_vpd_##_page,     \
+};
+
+sdev_vpd_pg_attr(pg83);
+sdev_vpd_pg_attr(pg80);
+
 static ssize_t
-show_iostat_counterbits(struct device *dev, struct device_attribute *attr,     char *buf)
+show_iostat_counterbits(struct device *dev, struct device_attribute *attr,
+   char *buf)
 {
  return snprintf(buf, 20, "%d\n", (int)sizeof(atomic_t) * 8);
 }
@@ -941,8 +967,14 @@ static struct attribute *scsi_sdev_attrs[] = {
  NULL
 };
 
+static struct bin_attribute *scsi_sdev_bin_attrs[] = {
+ &dev_attr_vpd_pg83,
+ &dev_attr_vpd_pg80,
+ NULL
+};
 static struct attribute_group scsi_sdev_attr_group = {
  .attrs = scsi_sdev_attrs,
+ .bin_attrs = scsi_sdev_bin_attrs,
  .is_visible = scsi_sdev_attr_is_visible,
 };
 
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index 529be09..6692d45 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -207,10 +207,25 @@ struct scsi_device {
   * allow extending the structure while preserve ABI.
   */
 
+#define SCSI_VPD_PG_LEN                255
+
+#ifndef __GENKSYMS__
+ unsigned char *vpd_pg83;
+ union {
+  int vpd_pg83_len;
+  void *vpd_reserved2;
+ };
+ unsigned char *vpd_pg80;
+ union {
+  int vpd_pg80_len;
+  void *vpd_reserved4;
+ };
+#else
  void *vpd_reserved1;
  void *vpd_reserved2;
  void *vpd_reserved3;
  void *vpd_reserved4;
+#endif
 
  char vpd_reserved5;
  char vpd_reserved6;
@@ -372,6 +387,7 @@ extern int scsi_add_device(struct Scsi_Host *host, uint channel,
 extern int scsi_register_device_handler(struct scsi_device_handler *scsi_dh);
 extern void scsi_remove_device(struct scsi_device *);
 extern int scsi_unregister_device_handler(struct scsi_device_handler *scsi_dh);
+void scsi_attach_vpd(struct scsi_device *sdev);
 
 extern int scsi_device_get(struct scsi_device *);
 extern void scsi_device_put(struct scsi_device *);
-- 
1.7.1