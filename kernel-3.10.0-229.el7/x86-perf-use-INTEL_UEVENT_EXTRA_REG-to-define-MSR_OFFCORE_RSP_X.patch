From 54cf667f1c424dc227f3457ac5b2bc8ec7714895 Mon Sep 17 00:00:00 2001
From: Steve Best <sbest@redhat.com>
Date: Wed, 13 Aug 2014 19:23:48 -0400
Subject: [x86] perf: use INTEL_UEVENT_EXTRA_REG to define MSR_OFFCORE_RSP_X

Message-id: <20140813192347.25750.2983.sendpatchset@ibm-p7r2-01.lab.bos.redhat.com>
Patchwork-id: 87683
O-Subject: [PATCH RHEL7.1 BZ1086821 1/3] perf/x86: use INTEL_UEVENT_EXTRA_REG to define MSR_OFFCORE_RSP_X
Bugzilla: 1086821
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>

RHBZ#:
------
https://bugzilla.redhat.com/show_bug.cgi?id=1086821

Description:
------------
Silvermont (22nm Atom) has two offcore response configuration MSRs,
unlike other Intel CPU, its event code for MSR_OFFCORE_RSP_1 is 0x02b7.

To avoid complicating intel_fixup_er(), use INTEL_UEVENT_EXTRA_REG to
define MSR_OFFCORE_RSP_X. So intel_fixup_er() can find the event code
for OFFCORE_RSP_N by x86_pmu.extra_regs[N].event.

Signed-off-by: Yan, Zheng <zheng.z.yan@intel.com>
Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1374138144-17278-1-git-send-email-zheng.z.yan@intel.com
Signed-off-by: Ingo Molnar <mingo@kernel.org>

RHEL Version Found:
-------------------
7.0

Upstream Status:
----------------
http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=53ad0447208d3f5897f673ca0b16c776583eedba

----------------
Steve Best

Proposed Patch:
---------------

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/cpu/perf_event_intel.c b/arch/x86/kernel/cpu/perf_event_intel.c
index fbcd76f..28549c4 100644
--- a/arch/x86/kernel/cpu/perf_event_intel.c
+++ b/arch/x86/kernel/cpu/perf_event_intel.c
@@ -81,7 +81,8 @@ static struct event_constraint intel_nehalem_event_constraints[] __read_mostly =
 
 static struct extra_reg intel_nehalem_extra_regs[] __read_mostly =
 {
- INTEL_EVENT_EXTRA_REG(0xb7, MSR_OFFCORE_RSP_0, 0xffff, RSP_0),
+ /* must define OFFCORE_RSP_X first, see intel_fixup_er() */
+ INTEL_UEVENT_EXTRA_REG(0x01b7, MSR_OFFCORE_RSP_0, 0xffff, RSP_0),
  INTEL_UEVENT_PEBS_LDLAT_EXTRA_REG(0x100b),
  EVENT_EXTRA_END
 };
@@ -143,8 +144,9 @@ static struct event_constraint intel_ivb_event_constraints[] __read_mostly =
 
 static struct extra_reg intel_westmere_extra_regs[] __read_mostly =
 {
- INTEL_EVENT_EXTRA_REG(0xb7, MSR_OFFCORE_RSP_0, 0xffff, RSP_0),
- INTEL_EVENT_EXTRA_REG(0xbb, MSR_OFFCORE_RSP_1, 0xffff, RSP_1),
+ /* must define OFFCORE_RSP_X first, see intel_fixup_er() */
+ INTEL_UEVENT_EXTRA_REG(0x01b7, MSR_OFFCORE_RSP_0, 0xffff, RSP_0),
+ INTEL_UEVENT_EXTRA_REG(0x01bb, MSR_OFFCORE_RSP_1, 0xffff, RSP_1),
  INTEL_UEVENT_PEBS_LDLAT_EXTRA_REG(0x100b),
  EVENT_EXTRA_END
 };
@@ -163,15 +165,17 @@ static struct event_constraint intel_gen_event_constraints[] __read_mostly =
 };
 
 static struct extra_reg intel_snb_extra_regs[] __read_mostly = {
- INTEL_EVENT_EXTRA_REG(0xb7, MSR_OFFCORE_RSP_0, 0x3f807f8fffull, RSP_0),
- INTEL_EVENT_EXTRA_REG(0xbb, MSR_OFFCORE_RSP_1, 0x3f807f8fffull, RSP_1),
+ /* must define OFFCORE_RSP_X first, see intel_fixup_er() */
+ INTEL_UEVENT_EXTRA_REG(0x01b7, MSR_OFFCORE_RSP_0, 0x3f807f8fffull, RSP_0),
+ INTEL_UEVENT_EXTRA_REG(0x01bb, MSR_OFFCORE_RSP_1, 0x3f807f8fffull, RSP_1),
  INTEL_UEVENT_PEBS_LDLAT_EXTRA_REG(0x01cd),
  EVENT_EXTRA_END
 };
 
 static struct extra_reg intel_snbep_extra_regs[] __read_mostly = {
- INTEL_EVENT_EXTRA_REG(0xb7, MSR_OFFCORE_RSP_0, 0x3fffff8fffull, RSP_0),
- INTEL_EVENT_EXTRA_REG(0xbb, MSR_OFFCORE_RSP_1, 0x3fffff8fffull, RSP_1),
+ /* must define OFFCORE_RSP_X first, see intel_fixup_er() */
+ INTEL_UEVENT_EXTRA_REG(0x01b7, MSR_OFFCORE_RSP_0, 0x3fffff8fffull, RSP_0),
+ INTEL_UEVENT_EXTRA_REG(0x01bb, MSR_OFFCORE_RSP_1, 0x3fffff8fffull, RSP_1),
  INTEL_UEVENT_PEBS_LDLAT_EXTRA_REG(0x01cd),
  EVENT_EXTRA_END
 };
@@ -1297,11 +1301,11 @@ static void intel_fixup_er(struct perf_event *event, int idx)
 
  if (idx == EXTRA_REG_RSP_0) {
   event->hw.config &= ~INTEL_ARCH_EVENT_MASK;
-  event->hw.config |= 0x01b7;
+  event->hw.config |= x86_pmu.extra_regs[EXTRA_REG_RSP_0].event;
   event->hw.extra_reg.reg = MSR_OFFCORE_RSP_0;
  } else if (idx == EXTRA_REG_RSP_1) {
   event->hw.config &= ~INTEL_ARCH_EVENT_MASK;
-  event->hw.config |= 0x01bb;
+  event->hw.config |= x86_pmu.extra_regs[EXTRA_REG_RSP_1].event;
   event->hw.extra_reg.reg = MSR_OFFCORE_RSP_1;
  }
 }
-- 
1.7.1