From 4f994b1e3fc31b274cd43f4778c32efc23b744d4 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Fri, 5 Sep 2014 02:15:57 -0400
Subject: [pci] Add support for DMA alias quirks

Message-id: <20140905021557.32574.71207.stgit@gir.stowe>
Patchwork-id: 91362
O-Subject: [RHEL7.1 PATCH 03/17] PCI: Add support for DMA alias quirks
Bugzilla: 1136537
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1136537
Upstream Status: 31c2b8153c58f11ddb80dfd392c16f13c2d709c6

Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
  ./include/linux/pci.h
    Hunk #2 changes 'struct pci_dev' which would break KABI.  'struct
    pci_dev' has a "KABI shadow structure" so the member was added to it
    accordingly.

  ./drivers/pci/search.c
    Hunk #1; the 'dma_alias_devfn' reference had to be adjusted due
    to KABI.

commit 31c2b8153c58f11ddb80dfd392c16f13c2d709c6
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Thu May 22 17:07:43 2014 -0600

    PCI: Add support for DMA alias quirks

    Some devices are broken and use a requester ID other than their physical
    devfn.  Add a byte, using an existing gap in the pci_dev structure, to
    store an alternate "alias" devfn.  A bit in the dev_flags tells us when
    this is valid.  We then add the alias as one more step in the
    pci_for_each_dma_alias() iterator.

    Tested-by: George Spelvin <linux@horizon.com>
    Tested-by: Pat Erley <pat-lkml@erley.org>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
---

diff --git a/drivers/pci/search.c b/drivers/pci/search.c
index 7efa0a2..d02e2d1 100644
--- a/drivers/pci/search.c
+++ b/drivers/pci/search.c
@@ -37,6 +37,18 @@ int pci_for_each_dma_alias(struct pci_dev *pdev,
  if (ret)
   return ret;
 
+ /*
+  * If the device is broken and uses an alias requester ID for
+  * DMA, iterate over that too.
+  */
+ if (unlikely(pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)) {
+  ret = fn(pdev, PCI_DEVID(pdev->bus->number,
+      pdev->pci_dev_rh->dma_alias_devfn),
+      data);
+  if (ret)
+   return ret;
+ }
+
  for (bus = pdev->bus; !pci_is_root_bus(bus); bus = bus->parent) {
   struct pci_dev *tmp;
 
diff --git a/include/linux/pci.h b/include/linux/pci.h
index 58e9665..7893330 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -171,6 +171,8 @@ enum pci_dev_flags {
  PCI_DEV_FLAGS_ASSIGNED = (__force pci_dev_flags_t) (1 << 2),
  /* Flag for quirk use to store if quirk-specific ACS is enabled */
  PCI_DEV_FLAGS_ACS_ENABLED_QUIRK = (__force pci_dev_flags_t) (1 << 3),
+ /* Flag to indicate the device uses dma_alias_devfn */
+ PCI_DEV_FLAGS_DMA_ALIAS_DEVFN = (__force pci_dev_flags_t) (1 << 4),
 };
 
 enum pci_irq_reroute_variant {
@@ -379,6 +381,7 @@ struct pci_dev {
  */
 struct pci_dev_rh {
 #ifndef __GENKSYMS__
+ u8  dma_alias_devfn;/* devfn of DMA alias, if any */
 #endif
 };
 
-- 
1.7.1