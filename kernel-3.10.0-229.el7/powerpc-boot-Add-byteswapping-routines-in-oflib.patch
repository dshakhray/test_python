From 5b1b384328a4268798dad5a7508d62ccdc06bf61 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:12:09 -0400
Subject: [powerpc] boot: Add byteswapping routines in oflib

Message-id: <1410545655-205645-501-git-send-email-dzickus@redhat.com>
Patchwork-id: 94619
O-Subject: [RHEL7 PATCH 500/626] powerpc/boot: Add byteswapping routines in oflib
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 926e6940f54313813d177b5cfb9ec31a441cd259
Author: Cedric Le Goater <clg@fr.ibm.com>
Date:   Thu Apr 24 09:23:28 2014 +0200

    powerpc/boot: Add byteswapping routines in oflib

    Values will need to be byte-swapped when calling prom (big endian) from
    a little endian boot wrapper.

    Signed-off-by: Cedric Le Goater <clg@fr.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/boot/of.h b/arch/powerpc/boot/of.h
index 5da03d9..40d95bf 100644
--- a/arch/powerpc/boot/of.h
+++ b/arch/powerpc/boot/of.h
@@ -20,4 +20,7 @@ void of_console_init(void);
 
 typedef u32   __be32;
 
+#define cpu_to_be32(x) (x)
+#define be32_to_cpu(x) (x)
+
 #endif /* _PPC_BOOT_OF_H_ */
diff --git a/arch/powerpc/boot/ofconsole.c b/arch/powerpc/boot/ofconsole.c
index ce0e024..8b75470 100644
--- a/arch/powerpc/boot/ofconsole.c
+++ b/arch/powerpc/boot/ofconsole.c
@@ -18,7 +18,7 @@
 
 #include "of.h"
 
-static void *of_stdout_handle;
+static unsigned int of_stdout_handle;
 
 static int of_console_open(void)
 {
@@ -27,8 +27,10 @@ static int of_console_open(void)
  if (((devp = of_finddevice("/chosen")) != NULL)
      && (of_getprop(devp, "stdout", &of_stdout_handle,
       sizeof(of_stdout_handle))
-  == sizeof(of_stdout_handle)))
+  == sizeof(of_stdout_handle))) {
+  of_stdout_handle = be32_to_cpu(of_stdout_handle);
   return 0;
+ }
 
  return -1;
 }
diff --git a/arch/powerpc/boot/oflib.c b/arch/powerpc/boot/oflib.c
index 3b0c945..0f72b1a 100644
--- a/arch/powerpc/boot/oflib.c
+++ b/arch/powerpc/boot/oflib.c
@@ -42,13 +42,13 @@ int of_call_prom(const char *service, int nargs, int nret, ...)
  struct prom_args args;
  va_list list;
 
- args.service = ADDR(service);
- args.nargs = nargs;
- args.nret = nret;
+ args.service = cpu_to_be32(ADDR(service));
+ args.nargs = cpu_to_be32(nargs);
+ args.nret = cpu_to_be32(nret);
 
  va_start(list, nret);
  for (i = 0; i < nargs; i++)
-  args.args[i] = va_arg(list, prom_arg_t);
+  args.args[i] = cpu_to_be32(va_arg(list, prom_arg_t));
  va_end(list);
 
  for (i = 0; i < nret; i++)
@@ -57,7 +57,7 @@ int of_call_prom(const char *service, int nargs, int nret, ...)
  if (prom(&args) < 0)
   return -1;
 
- return (nret > 0)? args.args[nargs]: 0;
+ return (nret > 0) ? be32_to_cpu(args.args[nargs]) : 0;
 }
 
 static int of_call_prom_ret(const char *service, int nargs, int nret,
@@ -67,13 +67,13 @@ static int of_call_prom_ret(const char *service, int nargs, int nret,
  struct prom_args args;
  va_list list;
 
- args.service = ADDR(service);
- args.nargs = nargs;
- args.nret = nret;
+ args.service = cpu_to_be32(ADDR(service));
+ args.nargs = cpu_to_be32(nargs);
+ args.nret = cpu_to_be32(nret);
 
  va_start(list, rets);
  for (i = 0; i < nargs; i++)
-  args.args[i] = va_arg(list, prom_arg_t);
+  args.args[i] = cpu_to_be32(va_arg(list, prom_arg_t));
  va_end(list);
 
  for (i = 0; i < nret; i++)
@@ -84,9 +84,9 @@ static int of_call_prom_ret(const char *service, int nargs, int nret,
 
  if (rets != (void *) 0)
   for (i = 1; i < nret; ++i)
-   rets[i-1] = args.args[nargs+i];
+   rets[i-1] = be32_to_cpu(args.args[nargs+i]);
 
- return (nret > 0)? args.args[nargs]: 0;
+ return (nret > 0) ? be32_to_cpu(args.args[nargs]) : 0;
 }
 
 /* returns true if s2 is a prefix of s1 */
-- 
1.7.1