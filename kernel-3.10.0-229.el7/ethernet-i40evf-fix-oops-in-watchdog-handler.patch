From 81ef4af9d8e560f77210eff12c763f1839d77864 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 13:11:21 -0400
Subject: [ethernet] i40evf: fix oops in watchdog handler

Message-id: <1409663591-32531-39-git-send-email-sassmann@redhat.com>
Patchwork-id: 90516
O-Subject: [RHEL7.1 PATCH 038/148] i40evf: fix oops in watchdog handler
Bugzilla: 1091127
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Mitch Williams <mitch.a.williams@intel.com>

The Tx watchdog handler runs in interrupt context, so it would cause an
oops when sending an admin queue message to request a reset, because the
admin queue functions use spinlocks.

Instead, set a flag and let the reset task handle sending the request.

Change-ID: I65879470b72963d9c308edfb8f45ac4fbba2c14f
Signed-off-by: Mitch Williams <mitch.a.williams@intel.com>
Signed-off-by: Catherine Sullivan <catherine.sullivan@intel.com>
Tested-by: Sibai Li <sibai.li@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 3526d8005f23da22846bdbdb4ed445ab0038dff0)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40evf/i40evf.h b/drivers/net/ethernet/intel/i40evf/i40evf.h
index ccb43d3..807807d 100644
--- a/drivers/net/ethernet/intel/i40evf/i40evf.h
+++ b/drivers/net/ethernet/intel/i40evf/i40evf.h
@@ -211,6 +211,7 @@ struct i40evf_adapter {
 #define I40EVF_FLAG_NEED_LINK_UPDATE             (u32)(1 << 7)
 #define I40EVF_FLAG_PF_COMMS_FAILED              (u32)(1 << 8)
 #define I40EVF_FLAG_RESET_PENDING                (u32)(1 << 9)
+#define I40EVF_FLAG_RESET_NEEDED                 (u32)(1 << 10)
 /* duplcates for common code */
 #define I40E_FLAG_FDIR_ATR_ENABLED   0
 #define I40E_FLAG_DCB_ENABLED    0
diff --git a/drivers/net/ethernet/intel/i40evf/i40evf_main.c b/drivers/net/ethernet/intel/i40evf/i40evf_main.c
index d3eafa3..51c84c1 100644
--- a/drivers/net/ethernet/intel/i40evf/i40evf_main.c
+++ b/drivers/net/ethernet/intel/i40evf/i40evf_main.c
@@ -169,9 +169,7 @@ static void i40evf_tx_timeout(struct net_device *netdev)
  adapter->tx_timeout_count++;
  dev_info(&adapter->pdev->dev, "TX timeout detected.\n");
  if (!(adapter->flags & I40EVF_FLAG_RESET_PENDING)) {
-  dev_info(&adapter->pdev->dev, "Requesting reset from PF\n");
-  i40evf_request_reset(adapter);
-  adapter->flags |= I40EVF_FLAG_RESET_PENDING;
+  adapter->flags |= I40EVF_FLAG_RESET_NEEDED;
   schedule_work(&adapter->reset_task);
  }
 }
@@ -1484,6 +1482,12 @@ static void i40evf_reset_task(struct work_struct *work)
  while (test_and_set_bit(__I40EVF_IN_CRITICAL_TASK,
     &adapter->crit_section))
   udelay(500);
+
+ if (adapter->flags & I40EVF_FLAG_RESET_NEEDED) {
+  dev_info(&adapter->pdev->dev, "Requesting reset from PF\n");
+  i40evf_request_reset(adapter);
+ }
+
  /* poll until we see the reset actually happen */
  for (i = 0; i < I40EVF_RESET_WAIT_COUNT; i++) {
   rstat_val = rd32(hw, I40E_VFGEN_RSTAT) &
-- 
1.7.1