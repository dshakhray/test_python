From 1bb141cc309be9e3609fe717c63da34f3ad84735 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Wed, 6 Aug 2014 03:50:46 -0400
Subject: [kernel] resources: Set type in __request_region()

Message-id: <20140806035045.1438.62685.stgit@gir.stowe>
Patchwork-id: 87471
O-Subject: [RHEL7.1 PATCH 62/69] resources: Set type in __request_region()
Bugzilla: 1110896
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110896
Upstream Status: 6404e88e8385638123f4b18b104430480870601a

commit 6404e88e8385638123f4b18b104430480870601a
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Fri Mar 7 09:22:19 2014 -0700

    resources: Set type in __request_region()

    We don't set the type (I/O, memory, etc.) of resources added by
    __request_region(), which leads to confusing messages like this:

        address space collision: [io  0x1000-0x107f] conflicts with ACPI CPU thr

    Set the type of a new resource added by __request_region() (used by
    request_region() and request_mem_region()) to the type of its parent.  This
    makes the resource tree internally consistent and fixes messages like the
    above, where the ACPI CPU throttle resource really is an I/O port region,
    but request_region() didn't fill in the type, so %pR didn't know how to
    print it.

    Sample dmesg showing the issue at the link below.

    Link: https://bugzilla.kernel.org/show_bug.cgi?id=71611
    Reported-by: Paul Bolle <pebolle@tiscali.nl>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/resource.c b/kernel/resource.c
index a79cc6f..eaf1bdd 100644
--- a/kernel/resource.c
+++ b/kernel/resource.c
@@ -946,8 +946,8 @@ struct resource * __request_region(struct resource *parent,
  res->name = name;
  res->start = start;
  res->end = start + n - 1;
- res->flags = IORESOURCE_BUSY;
- res->flags |= flags;
+ res->flags = resource_type(parent);
+ res->flags |= IORESOURCE_BUSY | flags;
 
  write_lock(&resource_lock);
 
-- 
1.7.1