From 2d70d2e657f041afb621c4e60f0ac0455ea5b573 Mon Sep 17 00:00:00 2001
From: Amir Vadai <avadai@redhat.com>
Date: Thu, 11 Sep 2014 12:00:38 -0400
Subject: [infiniband] mlx5: Add block multicast loopback support

Message-id: <c972e784695e6f04cad319904dc62e3e1b9d1aca.1410425016.git.avadai@redhat.com>
Patchwork-id: 93762
O-Subject: [Patch RHEL7.1 V1 102/197] IB/mlx5: Add block multicast loopback support
Bugzilla: 1107617 1107618 1107619 1107620
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

From: Eli Cohen <eli@dev.mellanox.co.il>

Add support for the block multicast loopback QP creation flag along
the proper firmware API for that.

Signed-off-by: Eli Cohen <eli@mellanox.com>
Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit f360d88a2efddf2d2a2d01a8ac76fded34d624b4)
Signed-off-by: Amir Vadai <avadai@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/hw/mlx5/main.c b/drivers/infiniband/hw/mlx5/main.c
index fa6dc87..364d4b6 100644
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@ -282,6 +282,8 @@ static int mlx5_ib_query_device(struct ib_device *ibdev,
   props->sig_guard_cap = IB_GUARD_T10DIF_CRC |
            IB_GUARD_T10DIF_CSUM;
  }
+ if (flags & MLX5_DEV_CAP_FLAG_BLOCK_MCAST)
+  props->device_cap_flags |= IB_DEVICE_BLOCK_MULTICAST_LOOPBACK;
 
  props->vendor_id    = be32_to_cpup((__be32 *)(out_mad->data + 36)) &
   0xffffff;
diff --git a/drivers/infiniband/hw/mlx5/qp.c b/drivers/infiniband/hw/mlx5/qp.c
index ae788d2..dc930ed 100644
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@ -807,6 +807,15 @@ static int create_qp_common(struct mlx5_ib_dev *dev, struct ib_pd *pd,
  spin_lock_init(&qp->sq.lock);
  spin_lock_init(&qp->rq.lock);
 
+ if (init_attr->create_flags & IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK) {
+  if (!(dev->mdev.caps.flags & MLX5_DEV_CAP_FLAG_BLOCK_MCAST)) {
+   mlx5_ib_dbg(dev, "block multicast loopback isn't supported\n");
+   return -EINVAL;
+  } else {
+   qp->flags |= MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK;
+  }
+ }
+
  if (init_attr->sq_sig_type == IB_SIGNAL_ALL_WR)
   qp->sq_signal_bits = MLX5_WQE_CTRL_CQ_UPDATE;
 
@@ -878,6 +887,9 @@ static int create_qp_common(struct mlx5_ib_dev *dev, struct ib_pd *pd,
  if (qp->wq_sig)
   in->ctx.flags_pd |= cpu_to_be32(MLX5_QP_ENABLE_SIG);
 
+ if (qp->flags & MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK)
+  in->ctx.flags_pd |= cpu_to_be32(MLX5_QP_BLOCK_MCAST);
+
  if (qp->scat_cqe && is_connected(init_attr->qp_type)) {
   int rcqe_sz;
   int scqe_sz;
diff --git a/include/linux/mlx5/device.h b/include/linux/mlx5/device.h
index 407bdb6..3406cfb 100644
--- a/include/linux/mlx5/device.h
+++ b/include/linux/mlx5/device.h
@@ -179,6 +179,7 @@ enum {
  MLX5_DEV_CAP_FLAG_BAD_QKEY_CNTR = 1LL <<  9,
  MLX5_DEV_CAP_FLAG_APM  = 1LL << 17,
  MLX5_DEV_CAP_FLAG_ATOMIC = 1LL << 18,
+ MLX5_DEV_CAP_FLAG_BLOCK_MCAST = 1LL << 23,
  MLX5_DEV_CAP_FLAG_ON_DMND_PG = 1LL << 24,
  MLX5_DEV_CAP_FLAG_CQ_MODER = 1LL << 29,
  MLX5_DEV_CAP_FLAG_RESIZE_CQ = 1LL << 30,
diff --git a/include/linux/mlx5/qp.h b/include/linux/mlx5/qp.h
index f829ad8..9709b30 100644
--- a/include/linux/mlx5/qp.h
+++ b/include/linux/mlx5/qp.h
@@ -146,6 +146,7 @@ enum {
 
 enum {
  MLX5_QP_LAT_SENSITIVE = 1 << 28,
+ MLX5_QP_BLOCK_MCAST = 1 << 30,
  MLX5_QP_ENABLE_SIG = 1 << 31,
 };
 
-- 
1.7.1