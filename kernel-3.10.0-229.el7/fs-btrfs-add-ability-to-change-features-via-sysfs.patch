From 5b6c459d27f116e621928e672a7b8624025a3de4 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 18:58:21 -0400
Subject: [fs] btrfs: add ability to change features via sysfs

Message-id: <1407179109-13714-15-git-send-email-sandeen@redhat.com>
Patchwork-id: 86974
O-Subject: [RHEL7.1 PATCH 014/422] btrfs: add ability to change features via sysfs
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Jeff Mahoney <jeffm@suse.com>

commit ba631941ef09c10e229661219dbd1707e56131d8
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Fri Nov 1 13:07:01 2013 -0400

    btrfs: add ability to change features via sysfs

    This patch adds the ability to change (set/clear) features while the file
    system is mounted. A bitmask is added for each feature set for the
    support to set and clear the bits. A message indicating which bit
    has been set or cleared is issued when it's been changed and also when
    permission or support for a particular bit has been denied.

    Since the the attributes can now be writable, we need to introduce
    another struct attribute to hold the different permissions.

    If neither set or clear is supported, the file will have 0444 permissions.
    If either set or clear is supported, the file will have 0644 permissions
    and the store handler will filter out the write based on the bitmask.

    Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/sysfs.c b/fs/btrfs/sysfs.c
index 4a2f23e..7d340f3 100644
--- a/fs/btrfs/sysfs.c
+++ b/fs/btrfs/sysfs.c
@@ -43,21 +43,131 @@ static u64 get_features(struct btrfs_fs_info *fs_info,
   return btrfs_super_incompat_flags(disk_super);
 }
 
+static void set_features(struct btrfs_fs_info *fs_info,
+    enum btrfs_feature_set set, u64 features)
+{
+ struct btrfs_super_block *disk_super = fs_info->super_copy;
+ if (set == FEAT_COMPAT)
+  btrfs_set_super_compat_flags(disk_super, features);
+ else if (set == FEAT_COMPAT_RO)
+  btrfs_set_super_compat_ro_flags(disk_super, features);
+ else
+  btrfs_set_super_incompat_flags(disk_super, features);
+}
+
+static int can_modify_feature(struct btrfs_feature_attr *fa)
+{
+ int val = 0;
+ u64 set, clear;
+ switch (fa->feature_set) {
+ case FEAT_COMPAT:
+  set = BTRFS_FEATURE_COMPAT_SAFE_SET;
+  clear = BTRFS_FEATURE_COMPAT_SAFE_CLEAR;
+  break;
+ case FEAT_COMPAT_RO:
+  set = BTRFS_FEATURE_COMPAT_RO_SAFE_SET;
+  clear = BTRFS_FEATURE_COMPAT_RO_SAFE_CLEAR;
+  break;
+ case FEAT_INCOMPAT:
+  set = BTRFS_FEATURE_INCOMPAT_SAFE_SET;
+  clear = BTRFS_FEATURE_INCOMPAT_SAFE_CLEAR;
+  break;
+ default:
+  BUG();
+ }
+
+ if (set & fa->feature_bit)
+  val |= 1;
+ if (clear & fa->feature_bit)
+  val |= 2;
+
+ return val;
+}
+
 static ssize_t btrfs_feature_attr_show(struct kobject *kobj,
            struct kobj_attribute *a, char *buf)
 {
  int val = 0;
  struct btrfs_fs_info *fs_info = to_fs_info(kobj);
+ struct btrfs_feature_attr *fa = to_btrfs_feature_attr(a);
  if (fs_info) {
-  struct btrfs_feature_attr *fa = to_btrfs_feature_attr(a);
   u64 features = get_features(fs_info, fa->feature_set);
   if (features & fa->feature_bit)
    val = 1;
- }
+ } else
+  val = can_modify_feature(fa);
 
  return snprintf(buf, PAGE_SIZE, "%d\n", val);
 }
 
+static ssize_t btrfs_feature_attr_store(struct kobject *kobj,
+     struct kobj_attribute *a,
+     const char *buf, size_t count)
+{
+ struct btrfs_fs_info *fs_info;
+ struct btrfs_feature_attr *fa = to_btrfs_feature_attr(a);
+ struct btrfs_trans_handle *trans;
+ u64 features, set, clear;
+ unsigned long val;
+ int ret;
+
+ fs_info = to_fs_info(kobj);
+ if (!fs_info)
+  return -EPERM;
+
+ ret = kstrtoul(skip_spaces(buf), 0, &val);
+ if (ret)
+  return ret;
+
+ if (fa->feature_set == FEAT_COMPAT) {
+  set = BTRFS_FEATURE_COMPAT_SAFE_SET;
+  clear = BTRFS_FEATURE_COMPAT_SAFE_CLEAR;
+ } else if (fa->feature_set == FEAT_COMPAT_RO) {
+  set = BTRFS_FEATURE_COMPAT_RO_SAFE_SET;
+  clear = BTRFS_FEATURE_COMPAT_RO_SAFE_CLEAR;
+ } else {
+  set = BTRFS_FEATURE_INCOMPAT_SAFE_SET;
+  clear = BTRFS_FEATURE_INCOMPAT_SAFE_CLEAR;
+ }
+
+ features = get_features(fs_info, fa->feature_set);
+
+ /* Nothing to do */
+ if ((val && (features & fa->feature_bit)) ||
+     (!val && !(features & fa->feature_bit)))
+  return count;
+
+ if ((val && !(set & fa->feature_bit)) ||
+     (!val && !(clear & fa->feature_bit))) {
+  btrfs_info(fs_info,
+   "%sabling feature %s on mounted fs is not supported.",
+   val ? "En" : "Dis", fa->kobj_attr.attr.name);
+  return -EPERM;
+ }
+
+ btrfs_info(fs_info, "%s %s feature flag",
+     val ? "Setting" : "Clearing", fa->kobj_attr.attr.name);
+
+ trans = btrfs_start_transaction(fs_info->fs_root, 1);
+ if (IS_ERR(trans))
+  return PTR_ERR(trans);
+
+ spin_lock(&fs_info->super_lock);
+ features = get_features(fs_info, fa->feature_set);
+ if (val)
+  features |= fa->feature_bit;
+ else
+  features &= ~fa->feature_bit;
+ set_features(fs_info, fa->feature_set, features);
+ spin_unlock(&fs_info->super_lock);
+
+ ret = btrfs_commit_transaction(trans, fs_info->fs_root);
+ if (ret)
+  return ret;
+
+ return count;
+}
+
 static umode_t btrfs_feature_visible(struct kobject *kobj,
          struct attribute *attr, int unused)
 {
@@ -71,7 +181,9 @@ static umode_t btrfs_feature_visible(struct kobject *kobj,
   fa = attr_to_btrfs_feature_attr(attr);
   features = get_features(fs_info, fa->feature_set);
 
-  if (!(features & fa->feature_bit))
+  if (can_modify_feature(fa))
+   mode |= S_IWUSR;
+  else if (!(features & fa->feature_bit))
    mode = 0;
  }
 
diff --git a/fs/btrfs/sysfs.h b/fs/btrfs/sysfs.h
index d7c61bd..58c4b1f 100644
--- a/fs/btrfs/sysfs.h
+++ b/fs/btrfs/sysfs.h
@@ -31,7 +31,8 @@ struct btrfs_feature_attr {
 #define BTRFS_FEAT_ATTR(_name, _feature_set, _prefix, _feature_bit)      \
 static struct btrfs_feature_attr btrfs_attr_##_name = {        \
  .kobj_attr = __INIT_KOBJ_ATTR(_name, S_IRUGO,        \
-          btrfs_feature_attr_show, NULL),      \
+          btrfs_feature_attr_show,       \
+          btrfs_feature_attr_store),      \
  .feature_set = _feature_set,          \
  .feature_bit = _prefix ##_## _feature_bit,        \
 }
-- 
1.7.1