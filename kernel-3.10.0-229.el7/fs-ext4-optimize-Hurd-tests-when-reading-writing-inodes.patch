From aa6e972c232e7832f8654e467cdc986cef4ca5c3 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:48 -0400
Subject: [fs] ext4: optimize Hurd tests when reading/writing inodes

Message-id: <1414058125-4183-135-git-send-email-lczerner@redhat.com>
Patchwork-id: 98253
O-Subject: [RHEL 7.1 PATCH v2 134/171] ext4: optimize Hurd tests when reading/writing inodes
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit ed3654eb981fd44694b4d2a636e13f998bc10e7f

 Set a in-memory superblock flag to indicate whether the file system is
 designed to support the Hurd.

 Also, add a sanity check to make sure the 64-bit feature is not set
 for Hurd file systems, since i_file_acl_high conflicts with a
 Hurd-specific field.

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index bd127b7..30bce41 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -1004,6 +1004,8 @@ struct ext4_inode_info {
 #define EXT4_MOUNT2_STD_GROUP_SIZE 0x00000002 /* We have standard group
             size of blocksize * 8
             blocks */
+#define EXT4_MOUNT2_HURD_COMPAT  0x00000004 /* Support HURD-castrated
+            file systems */
 
 #define clear_opt(sb, opt)  EXT4_SB(sb)->s_mount_opt &= \
       ~EXT4_MOUNT_##opt
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 6e6b321..156a9e0 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -4178,8 +4178,7 @@ struct inode *ext4_iget(struct super_block *sb, unsigned long ino)
  EXT4_INODE_GET_XTIME(i_atime, inode, raw_inode);
  EXT4_EINODE_GET_XTIME(i_crtime, ei, raw_inode);
 
- if (EXT4_SB(inode->i_sb)->s_es->s_creator_os !=
-     cpu_to_le32(EXT4_OS_HURD)) {
+ if (likely(!test_opt2(inode->i_sb, HURD_COMPAT))) {
   inode->i_version = le32_to_cpu(raw_inode->i_disk_version);
   if (EXT4_INODE_SIZE(inode->i_sb) > EXT4_GOOD_OLD_INODE_SIZE) {
    if (EXT4_FITS_IN_INODE(raw_inode, ei, i_version_hi))
@@ -4355,8 +4354,7 @@ static int ext4_do_update_inode(handle_t *handle,
   goto out_brelse;
  raw_inode->i_dtime = cpu_to_le32(ei->i_dtime);
  raw_inode->i_flags = cpu_to_le32(ei->i_flags & 0xFFFFFFFF);
- if (EXT4_SB(inode->i_sb)->s_es->s_creator_os !=
-     cpu_to_le32(EXT4_OS_HURD))
+ if (likely(!test_opt2(inode->i_sb, HURD_COMPAT)))
   raw_inode->i_file_acl_high =
    cpu_to_le16(ei->i_file_acl >> 32);
  raw_inode->i_file_acl_lo = cpu_to_le32(ei->i_file_acl);
@@ -4401,8 +4399,7 @@ static int ext4_do_update_inode(handle_t *handle,
    raw_inode->i_block[block] = ei->i_data[block];
  }
 
- if (EXT4_SB(inode->i_sb)->s_es->s_creator_os !=
-     cpu_to_le32(EXT4_OS_HURD)) {
+ if (likely(!test_opt2(inode->i_sb, HURD_COMPAT))) {
   raw_inode->i_disk_version = cpu_to_le32(inode->i_version);
   if (ei->i_extra_isize) {
    if (EXT4_FITS_IN_INODE(raw_inode, ei, i_version_hi))
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index ea3adc2..6cd0d64 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -3579,6 +3579,16 @@ static int ext4_fill_super(struct super_block *sb, void *data, int silent)
          "feature flags set on rev 0 fs, "
          "running e2fsck is recommended");
 
+ if (es->s_creator_os == cpu_to_le32(EXT4_OS_HURD)) {
+  set_opt2(sb, HURD_COMPAT);
+  if (EXT4_HAS_INCOMPAT_FEATURE(sb,
+           EXT4_FEATURE_INCOMPAT_64BIT)) {
+   ext4_msg(sb, KERN_ERR,
+     "The Hurd can't support 64-bit file systems");
+   goto failed_mount;
+  }
+ }
+
  if (IS_EXT2_SB(sb)) {
   if (ext2_feature_set_ok(sb))
    ext4_msg(sb, KERN_INFO, "mounting ext2 file system "
-- 
1.7.1