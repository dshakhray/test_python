From 7e9a1f933459cecf9efe871de67999d904a6e041 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 2 May 2014 14:37:17 -0400
Subject: [misc] mei: export active connections to debugfs

Message-id: <1399041470-21330-45-git-send-email-prarit@redhat.com>
Patchwork-id: 79341
O-Subject: [RHEL7.1 PATCH BZ 1088953 44/77] mei: export active connections to debugfs
Bugzilla: 1088953
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit 5baaf71fb029f1256532b82aab90169615b94a7d
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Tue Jan 14 23:21:41 2014 +0200

    mei: export active connections to debugfs

    Export active connection state to debugfs
    The information displayed is [me,host] id pair,
    client connection state, and client's read and write states

    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Reviewed-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/debugfs.c b/drivers/misc/mei/debugfs.c
index a3ae154..ced5b77 100644
--- a/drivers/misc/mei/debugfs.c
+++ b/drivers/misc/mei/debugfs.c
@@ -75,6 +75,54 @@ static const struct file_operations mei_dbgfs_fops_meclients = {
  .llseek = generic_file_llseek,
 };
 
+static ssize_t mei_dbgfs_read_active(struct file *fp, char __user *ubuf,
+     size_t cnt, loff_t *ppos)
+{
+ struct mei_device *dev = fp->private_data;
+ struct mei_cl *cl;
+ const size_t bufsz = 1024;
+ char *buf;
+ int i = 0;
+ int pos = 0;
+ int ret;
+
+ if (!dev)
+  return -ENODEV;
+
+ buf = kzalloc(bufsz, GFP_KERNEL);
+ if  (!buf)
+  return -ENOMEM;
+
+ pos += scnprintf(buf + pos, bufsz - pos,
+   "  |me|host|state|rd|wr|\n");
+
+ mutex_lock(&dev->device_lock);
+
+ /*  if the driver is not enabled the list won't b consitent */
+ if (dev->dev_state != MEI_DEV_ENABLED)
+  goto out;
+
+ list_for_each_entry(cl, &dev->file_list, link) {
+
+  pos += scnprintf(buf + pos, bufsz - pos,
+   "%2d|%2d|%4d|%5d|%2d|%2d|\n",
+   i, cl->me_client_id, cl->host_client_id, cl->state,
+   cl->reading_state, cl->writing_state);
+  i++;
+ }
+out:
+ mutex_unlock(&dev->device_lock);
+ ret = simple_read_from_buffer(ubuf, cnt, ppos, buf, pos);
+ kfree(buf);
+ return ret;
+}
+
+static const struct file_operations mei_dbgfs_fops_active = {
+ .open = simple_open,
+ .read = mei_dbgfs_read_active,
+ .llseek = generic_file_llseek,
+};
+
 static ssize_t mei_dbgfs_read_devstate(struct file *fp, char __user *ubuf,
      size_t cnt, loff_t *ppos)
 {
@@ -128,6 +176,12 @@ int mei_dbgfs_register(struct mei_device *dev, const char *name)
   dev_err(&dev->pdev->dev, "meclients: registration failed\n");
   goto err;
  }
+ f = debugfs_create_file("active", S_IRUSR, dir,
+    dev, &mei_dbgfs_fops_active);
+ if (!f) {
+  dev_err(&dev->pdev->dev, "meclients: registration failed\n");
+  goto err;
+ }
  f = debugfs_create_file("devstate", S_IRUSR, dir,
     dev, &mei_dbgfs_fops_devstate);
  if (!f) {
-- 
1.7.1