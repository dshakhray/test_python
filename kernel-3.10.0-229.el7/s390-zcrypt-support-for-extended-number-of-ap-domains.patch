From 8c2f585c6485112e2c64ae19f1d43fdc9b451057 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Tue, 14 Oct 2014 09:07:39 -0400
Subject: [s390] zcrypt: support for extended number of ap domains

Message-id: <1413277660-18585-2-git-send-email-brueckner@redhat.com>
Patchwork-id: 97562
O-Subject: [RHEL7.1 PATCH 1/2] [s390] s390/zcrypt: support for extended number of ap domains
Bugzilla: 1136494
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
Author: Ingo Tuchscherer <ingo.tuchscherer@de.ibm.com>

    s390/zcrypt: support for extended number of ap domains

    Extends the number of ap domains within the zcrypt device driver up to 256.
    AP domains in the range 00..255 will be detected.

    Signed-off-by: Ingo Tuchscherer <ingo.tuchscherer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1136494
https://bugzilla.redhat.com/show_bug.cgi?id=1136494

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version 3.18-rc1
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=170387a8877b2c12fee5ae901be1ef4693d06094

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=8095364

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/crypto/ap_bus.c b/drivers/s390/crypto/ap_bus.c
index 7001f52..29f08fc 100644
--- a/drivers/s390/crypto/ap_bus.c
+++ b/drivers/s390/crypto/ap_bus.c
@@ -1183,6 +1183,10 @@ static int ap_select_domain(void)
  ap_qid_t qid;
  int rc, i, j;
 
+ /* IF APXA isn't installed, only 16 domains could be defined */
+ if (!ap_configuration->ap_extended && (ap_domain_index > 15))
+  return -EINVAL;
+
  /*
   * We want to use a single domain. Either the one specified with
   * the "domain=" parameter or the domain with the maximum number
@@ -1895,9 +1899,15 @@ static void ap_reset_all(void)
 {
  int i, j;
 
- for (i = 0; i < AP_DOMAINS; i++)
-  for (j = 0; j < AP_DEVICES; j++)
+ for (i = 0; i < AP_DOMAINS; i++) {
+  if (!ap_test_config_domain(i))
+   continue;
+  for (j = 0; j < AP_DEVICES; j++) {
+   if (!ap_test_config_card_id(j))
+    continue;
    ap_reset_queue(AP_MKQID(j, i));
+  }
+ }
 }
 
 static struct reset_call ap_reset_call = {
diff --git a/drivers/s390/crypto/ap_bus.h b/drivers/s390/crypto/ap_bus.h
index 6405ae2..db92e9f 100644
--- a/drivers/s390/crypto/ap_bus.h
+++ b/drivers/s390/crypto/ap_bus.h
@@ -31,7 +31,7 @@
 #include <linux/types.h>
 
 #define AP_DEVICES 64  /* Number of AP devices. */
-#define AP_DOMAINS 16  /* Number of AP domains. */
+#define AP_DOMAINS 256  /* Number of AP domains. */
 #define AP_MAX_RESET 90  /* Maximum number of resets. */
 #define AP_RESET_TIMEOUT (HZ*0.7) /* Time in ticks for reset timeouts. */
 #define AP_CONFIG_TIME 30 /* Time in seconds between AP bus rescans. */
@@ -45,9 +45,9 @@ extern int ap_domain_index;
  */
 typedef unsigned int ap_qid_t;
 
-#define AP_MKQID(_device,_queue) (((_device) & 63) << 8 | ((_queue) & 15))
+#define AP_MKQID(_device, _queue) (((_device) & 63) << 8 | ((_queue) & 255))
 #define AP_QID_DEVICE(_qid) (((_qid) >> 8) & 63)
-#define AP_QID_QUEUE(_qid) ((_qid) & 15)
+#define AP_QID_QUEUE(_qid) ((_qid) & 255)
 
 /**
  * structy ap_queue_status - Holds the AP queue status.
-- 
1.7.1