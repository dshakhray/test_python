From 90a5b7b250a0ca1986b4497e127e5f6ed1ef5050 Mon Sep 17 00:00:00 2001
From: Ondrej Kozina <okozina@redhat.com>
Date: Thu, 6 Nov 2014 14:51:25 -0500
Subject: [crypto] af_alg: properly label AF_ALG socket

Message-id: <545B8AED.8030409@redhat.com>
Patchwork-id: 99760
O-Subject: [RHEL7.1 PATCH] crypto: af_alg - properly label AF_ALG socket
Bugzilla: 1161148
RH-Acked-by: Herbert Xu <herbert.xu@redhat.com>
RH-Acked-by: Paul Moore <pmoore@redhat.com>

BZ 1161148

Without this patch, confined subjects are denied access to kernel crypto
API socket. This bug makes system unbootable in enforcing mode when root
fs is encrypted. The bug manifests itself with cryptsetup-1.6.5+ which
is already in 7.1

Upstream commit 4c63f83c2c2e16a13ce274ee678e28246bd33645
Author: Milan Broz <gmazyland@gmail.com>
Date:   Tue Jul 29 18:41:09 2014 +0000

     crypto: af_alg - properly label AF_ALG socket

     Th AF_ALG socket was missing a security label (e.g. SELinux)
     which means that socket was in "unlabeled" state.

     This was recently demonstrated in the cryptsetup package
     (cryptsetup v1.6.5 and later.)
     See https://bugzilla.redhat.com/show_bug.cgi?id=1115120

     This patch clones the sock's label from the parent sock
     and resolves the issue (similar to AF_BLUETOOTH protocol family).

     Cc: stable@vger.kernel.org
     Signed-off-by: Milan Broz <gmazyland@gmail.com>
     Acked-by: Paul Moore <paul@paul-moore.com>
     Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/crypto/af_alg.c b/crypto/af_alg.c
index ac33d5f..bf948e1 100644
--- a/crypto/af_alg.c
+++ b/crypto/af_alg.c
@@ -21,6 +21,7 @@
 #include <linux/module.h>
 #include <linux/net.h>
 #include <linux/rwsem.h>
+#include <linux/security.h>
 
 struct alg_type_list {
  const struct af_alg_type *type;
@@ -243,6 +244,7 @@ int af_alg_accept(struct sock *sk, struct socket *newsock)
 
  sock_init_data(newsock, sk2);
  sock_graft(sk2, newsock);
+ security_sk_clone(sk, sk2);
 
  err = type->accept(ask->private, sk2);
  if (err) {
-- 
1.7.1