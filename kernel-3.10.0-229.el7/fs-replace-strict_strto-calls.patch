From 6885df94e33a09e61ccce082c4714ace9ce7a445 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:19:54 -0400
Subject: [fs] replace strict_strto calls

Message-id: <1411050057-12417-32-git-send-email-steved@redhat.com>
Patchwork-id: 96261
O-Subject: [RHEL7.1 PATCH 31/94] replace strict_strto calls
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Daniel Walter <dwalter@google.com>

Replace obsolete strict_strto calls with appropriate kstrto calls

Signed-off-by: Daniel Walter <dwalter@google.com>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 00cfaa943ec30abbc7109b0b918e0b6a0eef07dc
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/sunrpc/addr.c b/net/sunrpc/addr.c
index a622ad6..2e0a6f9 100644
--- a/net/sunrpc/addr.c
+++ b/net/sunrpc/addr.c
@@ -176,7 +176,7 @@ static int rpc_parse_scope_id(struct net *net, const char *buf,
  len = (buf + buflen) - delim - 1;
  p = kstrndup(delim + 1, len, GFP_KERNEL);
  if (p) {
-  unsigned long scope_id = 0;
+  u32 scope_id = 0;
   struct net_device *dev;
 
   dev = dev_get_by_name(net, p);
@@ -184,7 +184,7 @@ static int rpc_parse_scope_id(struct net *net, const char *buf,
    scope_id = dev->ifindex;
    dev_put(dev);
   } else {
-   if (strict_strtoul(p, 10, &scope_id) == 0) {
+   if (kstrtou32(p, 10, &scope_id) == 0) {
     kfree(p);
     return 0;
    }
@@ -304,7 +304,7 @@ char *rpc_sockaddr2uaddr(const struct sockaddr *sap, gfp_t gfp_flags)
  * @sap: buffer into which to plant socket address
  * @salen: size of buffer
  *
- * @uaddr does not have to be '\0'-terminated, but strict_strtoul() and
+ * @uaddr does not have to be '\0'-terminated, but kstrtou8() and
  * rpc_pton() require proper string termination to be successful.
  *
  * Returns the size of the socket address if successful; otherwise
@@ -315,7 +315,7 @@ size_t rpc_uaddr2sockaddr(struct net *net, const char *uaddr,
      const size_t salen)
 {
  char *c, buf[RPCBIND_MAXUADDRLEN + sizeof('\0')];
- unsigned long portlo, porthi;
+ u8 portlo, porthi;
  unsigned short port;
 
  if (uaddr_len > RPCBIND_MAXUADDRLEN)
@@ -327,18 +327,14 @@ size_t rpc_uaddr2sockaddr(struct net *net, const char *uaddr,
  c = strrchr(buf, '.');
  if (unlikely(c == NULL))
   return 0;
- if (unlikely(strict_strtoul(c + 1, 10, &portlo) != 0))
-  return 0;
- if (unlikely(portlo > 255))
+ if (unlikely(kstrtou8(c + 1, 10, &portlo) != 0))
   return 0;
 
  *c = '\0';
  c = strrchr(buf, '.');
  if (unlikely(c == NULL))
   return 0;
- if (unlikely(strict_strtoul(c + 1, 10, &porthi) != 0))
-  return 0;
- if (unlikely(porthi > 255))
+ if (unlikely(kstrtou8(c + 1, 10, &porthi) != 0))
   return 0;
 
  port = (unsigned short)((porthi << 8) | portlo);
diff --git a/net/sunrpc/auth.c b/net/sunrpc/auth.c
index b3a0697..5211dcf 100644
--- a/net/sunrpc/auth.c
+++ b/net/sunrpc/auth.c
@@ -48,7 +48,7 @@ static int param_set_hashtbl_sz(const char *val, const struct kernel_param *kp)
 
  if (!val)
   goto out_inval;
- ret = strict_strtoul(val, 0, &num);
+ ret = kstrtoul(val, 0, &num);
  if (ret == -EINVAL)
   goto out_inval;
  nbits = fls(num);
diff --git a/net/sunrpc/xprtsock.c b/net/sunrpc/xprtsock.c
index 4e75c80..2d2ffc3 100644
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@ -3060,12 +3060,12 @@ static int param_set_uint_minmax(const char *val,
   const struct kernel_param *kp,
   unsigned int min, unsigned int max)
 {
- unsigned long num;
+ unsigned int num;
  int ret;
 
  if (!val)
   return -EINVAL;
- ret = strict_strtoul(val, 0, &num);
+ ret = kstrtouint(val, 0, &num);
  if (ret == -EINVAL || num < min || num > max)
   return -EINVAL;
  *((unsigned int *)kp->arg) = num;
-- 
1.7.1