From 26d4e88c8a4d62df4c70c16fe42cd070bdb5ca64 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Wed, 11 Jun 2014 11:53:14 -0400
Subject: [kernel] smp: Rename __smp_call_function_single() to smp_call_function_single_async()

Message-id: <1402487594-26332-15-git-send-email-prarit@redhat.com>
Patchwork-id: 83643
O-Subject: [RHEL7.1 PATCH BZ 1105192 14/14] smp: Rename __smp_call_function_single() to smp_call_function_single_async()
Bugzilla: 1105192
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

commit c46fff2a3b29794b35d717b5680a27f31a6a6bc0
Author: Frederic Weisbecker <fweisbec@gmail.com>
Date:   Mon Feb 24 16:40:02 2014 +0100

    smp: Rename __smp_call_function_single() to smp_call_function_single_async()

    The name __smp_call_function_single() doesn't tell much about the
    properties of this function, especially when compared to
    smp_call_function_single().

    The comments above the implementation are also misleading. The main
    point of this function is actually not to be able to embed the csd
    in an object. This is actually a requirement that result from the
    purpose of this function which is to raise an IPI asynchronously.

    As such it can be called with interrupts disabled. And this feature
    comes at the cost of the caller who then needs to serialize the
    IPIs on this csd.

    Lets rename the function and enhance the comments so that they reflect
    these properties.

    Suggested-by: Christoph Hellwig <hch@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Jens Axboe <axboe@fb.com>
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Cc: Jeff Moyer <jmoyer@redhat.com>
Cc: Vivek Goyal <vgoyal@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Rik van Riel <riel@redhat.com>
Cc: Larry Woodman <lwoodman@redhat.com>
Cc: Rafael Aquini <aquini@redhat.com>
Cc: Andy Gospodarek <agospoda@redhat.com>
Cc: Neil Horman <nhorman@redhat.com>
Cc: David S. Miller <davem@redhat.com>
Cc: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index d1877ad..bdafc95 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -320,7 +320,7 @@ void __blk_mq_complete_request(struct request *rq)
   rq->csd.func = __blk_mq_complete_request_remote;
   rq->csd.info = rq;
   rq->csd.flags = 0;
-  __smp_call_function_single(ctx->cpu, &rq->csd);
+  smp_call_function_single_async(ctx->cpu, &rq->csd);
  } else {
   rq->q->softirq_done_fn(rq);
  }
diff --git a/block/blk-softirq.c b/block/blk-softirq.c
index dfe0545..c814e7c 100644
--- a/block/blk-softirq.c
+++ b/block/blk-softirq.c
@@ -65,7 +65,7 @@ static int raise_blk_irq(int cpu, struct request *rq)
   data->info = rq;
   data->flags = 0;
 
-  __smp_call_function_single(cpu, data);
+  smp_call_function_single_async(cpu, data);
   return 0;
  }
 
diff --git a/drivers/cpuidle/coupled.c b/drivers/cpuidle/coupled.c
index 1523e57..89834f8 100644
--- a/drivers/cpuidle/coupled.c
+++ b/drivers/cpuidle/coupled.c
@@ -323,7 +323,7 @@ static void cpuidle_coupled_poke(int cpu)
  struct call_single_data *csd = &per_cpu(cpuidle_coupled_poke_cb, cpu);
 
  if (!cpumask_test_and_set_cpu(cpu, &cpuidle_coupled_poke_pending))
-  __smp_call_function_single(cpu, csd);
+  smp_call_function_single_async(cpu, csd);
 }
 
 /**
diff --git a/include/linux/smp.h b/include/linux/smp.h
index 90e2283..8f23682 100644
--- a/include/linux/smp.h
+++ b/include/linux/smp.h
@@ -37,7 +37,7 @@ extern unsigned int total_cpus;
 int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
         int wait);
 
-int __smp_call_function_single(int cpu, struct call_single_data *csd);
+int smp_call_function_single_async(int cpu, struct call_single_data *csd);
 
 #ifdef CONFIG_SMP
 
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index d02e60b..3eebbcb 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -432,7 +432,7 @@ void hrtick_start(struct rq *rq, u64 delay)
  if (rq == this_rq()) {
   hrtimer_restart(timer);
  } else if (!rq->hrtick_csd_pending) {
-  __smp_call_function_single(cpu_of(rq), &rq->hrtick_csd);
+  smp_call_function_single_async(cpu_of(rq), &rq->hrtick_csd);
   rq->hrtick_csd_pending = 1;
  }
 }
diff --git a/kernel/smp.c b/kernel/smp.c
index 03a8044..4187c6d 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -239,15 +239,22 @@ int smp_call_function_single(int cpu, smp_call_func_t func, void *info,
 EXPORT_SYMBOL(smp_call_function_single);
 
 /**
- * __smp_call_function_single(): Run a function on a specific CPU
+ * smp_call_function_single_async(): Run an asynchronous function on a
+ *             specific CPU.
  * @cpu: The CPU to run on.
  * @csd: Pre-allocated and setup data structure
  *
- * Like smp_call_function_single(), but allow caller to pass in a
- * pre-allocated data structure. Useful for embedding @data inside
- * other structures, for instance.
+ * Like smp_call_function_single(), but the call is asynchonous and
+ * can thus be done from contexts with disabled interrupts.
+ *
+ * The caller passes his own pre-allocated data structure
+ * (ie: embedded in an object) and is responsible for synchronizing it
+ * such that the IPIs performed on the @csd are strictly serialized.
+ *
+ * NOTE: Be careful, there is unfortunately no current debugging facility to
+ * validate the correctness of this serialization.
  */
-int __smp_call_function_single(int cpu, struct call_single_data *csd)
+int smp_call_function_single_async(int cpu, struct call_single_data *csd)
 {
  int err = 0;
 
@@ -257,7 +264,7 @@ int __smp_call_function_single(int cpu, struct call_single_data *csd)
 
  return err;
 }
-EXPORT_SYMBOL_GPL(__smp_call_function_single);
+EXPORT_SYMBOL_GPL(smp_call_function_single_async);
 
 /*
  * smp_call_function_any - Run a function on any of the given cpus
diff --git a/kernel/softirq.c b/kernel/softirq.c
index 00a49d7..5d208d9 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -658,7 +658,7 @@ static int __try_remote_softirq(struct call_single_data *cp, int cpu, int softir
   cp->info = &softirq;
   cp->flags = 0;
 
-  __smp_call_function_single(cpu, cp);
+  smp_call_function_single_async(cpu, cp);
   return 0;
  }
  return 1;
diff --git a/kernel/up.c b/kernel/up.c
index 9d7b7fd..ca5201f 100644
--- a/kernel/up.c
+++ b/kernel/up.c
@@ -20,7 +20,7 @@ int smp_call_function_single(int cpu, void (*func) (void *info), void *info,
 }
 EXPORT_SYMBOL(smp_call_function_single);
 
-int __smp_call_function_single(int cpu, struct call_single_data *csd)
+int smp_call_function_single_async(int cpu, struct call_single_data *csd)
 {
  unsigned long flags;
 
@@ -29,4 +29,4 @@ int __smp_call_function_single(int cpu, struct call_single_data *csd)
  local_irq_restore(flags);
  return 0;
 }
-EXPORT_SYMBOL(__smp_call_function_single);
+EXPORT_SYMBOL(smp_call_function_single_async);
diff --git a/net/core/dev.c b/net/core/dev.c
index 20e4284..0cfb6a9 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -4043,7 +4043,7 @@ static void net_rps_action_and_irq_enable(struct softnet_data *sd)
    struct softnet_data *next = remsd->rps_ipi_next;
 
    if (cpu_online(remsd->cpu))
-    __smp_call_function_single(remsd->cpu,
+    smp_call_function_single_async(remsd->cpu,
           &remsd->csd);
    remsd = next;
   }
-- 
1.7.1