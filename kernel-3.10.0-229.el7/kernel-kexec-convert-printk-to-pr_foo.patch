From e02dae5ca7f641123380ac896b905b4d463d974f Mon Sep 17 00:00:00 2001
From: Vivek Goyal <vgoyal@redhat.com>
Date: Fri, 5 Sep 2014 18:55:50 -0400
Subject: [kernel] kexec: convert printk to pr_foo()

Message-id: <1409943373-12669-16-git-send-email-vgoyal@redhat.com>
Patchwork-id: 91526
O-Subject: [RHEL7.1 PATCH 15/38] kernel/kexec.c: convert printk to pr_foo()
Bugzilla: 852066
RH-Acked-by: Dave Anderson <anderson@redhat.com>
RH-Acked-by: Baoquan He <bhe@redhat.com>
RH-Acked-by: Dave Young <dyoung@redhat.com>
RH-Acked-by: Chao WANG <chaowang@redhat.com>

BZ:852066

commit e1bebcf41ed0aa15f11cec186cbd5141730bcafc
Author: Fabian Frederick <fabf@skynet.be>
Date: Fri, 6 Jun 2014 14:37:09 -0700

+ some pr_warning -> pr_warn and checkpatch warning fixes

Signed-off-by: Fabian Frederick <fabf@skynet.be>
Cc: Eric Biederman <ebiederm@xmission.com>
Cc: Vivek Goyal <vgoyal@redhat.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/kexec.c b/kernel/kexec.c
index 86f4b68..1b611bc 100644
--- a/kernel/kexec.c
+++ b/kernel/kexec.c
@@ -127,8 +127,8 @@ static struct page *kimage_alloc_page(struct kimage *image,
            unsigned long dest);
 
 static int do_kimage_alloc(struct kimage **rimage, unsigned long entry,
-                     unsigned long nr_segments,
-                            struct kexec_segment __user *segments)
+      unsigned long nr_segments,
+      struct kexec_segment __user *segments)
 {
  size_t segment_bytes;
  struct kimage *image;
@@ -259,13 +259,13 @@ static int kimage_normal_alloc(struct kimage **rimage, unsigned long entry,
  image->control_code_page = kimage_alloc_control_pages(image,
         get_order(KEXEC_CONTROL_PAGE_SIZE));
  if (!image->control_code_page) {
-  printk(KERN_ERR "Could not allocate control_code_buffer\n");
+  pr_err("Could not allocate control_code_buffer\n");
   goto out_free;
  }
 
  image->swap_page = kimage_alloc_control_pages(image, 0);
  if (!image->swap_page) {
-  printk(KERN_ERR "Could not allocate swap buffer\n");
+  pr_err("Could not allocate swap buffer\n");
   goto out_free;
  }
 
@@ -334,7 +334,7 @@ static int kimage_crash_alloc(struct kimage **rimage, unsigned long entry,
  image->control_code_page = kimage_alloc_control_pages(image,
         get_order(KEXEC_CONTROL_PAGE_SIZE));
  if (!image->control_code_page) {
-  printk(KERN_ERR "Could not allocate control_code_buffer\n");
+  pr_err("Could not allocate control_code_buffer\n");
   goto out_free;
  }
 
@@ -623,8 +623,8 @@ static void kimage_terminate(struct kimage *image)
 
 #define for_each_kimage_entry(image, ptr, entry) \
  for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
-  ptr = (entry & IND_INDIRECTION)? \
-   phys_to_virt((entry & PAGE_MASK)): ptr +1)
+  ptr = (entry & IND_INDIRECTION) ? \
+   phys_to_virt((entry & PAGE_MASK)) : ptr + 1)
 
 static void kimage_free_entry(kimage_entry_t entry)
 {
@@ -652,8 +652,7 @@ static void kimage_free(struct kimage *image)
     * done with it.
     */
    ind = entry;
-  }
-  else if (entry & IND_SOURCE)
+  } else if (entry & IND_SOURCE)
    kimage_free_entry(entry);
  }
  /* Free the final indirection page */
@@ -776,8 +775,7 @@ static struct page *kimage_alloc_page(struct kimage *image,
    addr = old_addr;
    page = old_page;
    break;
-  }
-  else {
+  } else {
    /* Place the page on the destination list I
     * will use it later.
     */
@@ -1064,7 +1062,7 @@ COMPAT_SYSCALL_DEFINE4(kexec_load, compat_ulong_t, entry,
   return -EINVAL;
 
  ksegments = compat_alloc_user_space(nr_segments * sizeof(out));
- for (i=0; i < nr_segments; i++) {
+ for (i = 0; i < nr_segments; i++) {
   result = copy_from_user(&in, &segments[i], sizeof(in));
   if (result)
    return -EFAULT;
@@ -1219,14 +1217,14 @@ void crash_save_cpu(struct pt_regs *regs, int cpu)
   * squirrelled away.  ELF notes happen to provide
   * all of that, so there is no need to invent something new.
   */
- buf = (u32*)per_cpu_ptr(crash_notes, cpu);
+ buf = (u32 *)per_cpu_ptr(crash_notes, cpu);
  if (!buf)
   return;
  memset(&prstatus, 0, sizeof(prstatus));
  prstatus.pr_pid = current->pid;
  elf_core_copy_kernel_regs(&prstatus.pr_reg, regs);
  buf = append_elf_note(buf, KEXEC_CORE_NOTE_NAME, NT_PRSTATUS,
-               &prstatus, sizeof(prstatus));
+         &prstatus, sizeof(prstatus));
  final_note(buf);
 }
 
@@ -1235,8 +1233,7 @@ static int __init crash_notes_memory_init(void)
  /* Allocate memory for saving cpu registers. */
  crash_notes = alloc_percpu(note_buf_t);
  if (!crash_notes) {
-  printk("Kexec: Memory allocation for saving cpu register"
-  " states failed\n");
+  pr_warn("Kexec: Memory allocation for saving cpu register states failed\n");
   return -ENOMEM;
  }
  return 0;
@@ -1258,10 +1255,10 @@ module_init(crash_notes_memory_init)
  *
  * The function returns 0 on success and -EINVAL on failure.
  */
-static int __init parse_crashkernel_mem(char    *cmdline,
-     unsigned long long system_ram,
-     unsigned long long *crash_size,
-     unsigned long long *crash_base)
+static int __init parse_crashkernel_mem(char *cmdline,
+     unsigned long long system_ram,
+     unsigned long long *crash_size,
+     unsigned long long *crash_base)
 {
  char *cur = cmdline, *tmp;
 
@@ -1272,12 +1269,12 @@ static int __init parse_crashkernel_mem(char    *cmdline,
   /* get the start of the range */
   start = memparse(cur, &tmp);
   if (cur == tmp) {
-   pr_warning("crashkernel: Memory value expected\n");
+   pr_warn("crashkernel: Memory value expected\n");
    return -EINVAL;
   }
   cur = tmp;
   if (*cur != '-') {
-   pr_warning("crashkernel: '-' expected\n");
+   pr_warn("crashkernel: '-' expected\n");
    return -EINVAL;
   }
   cur++;
@@ -1286,31 +1283,30 @@ static int __init parse_crashkernel_mem(char    *cmdline,
   if (*cur != ':') {
    end = memparse(cur, &tmp);
    if (cur == tmp) {
-    pr_warning("crashkernel: Memory "
-      "value expected\n");
+    pr_warn("crashkernel: Memory value expected\n");
     return -EINVAL;
    }
    cur = tmp;
    if (end <= start) {
-    pr_warning("crashkernel: end <= start\n");
+    pr_warn("crashkernel: end <= start\n");
     return -EINVAL;
    }
   }
 
   if (*cur != ':') {
-   pr_warning("crashkernel: ':' expected\n");
+   pr_warn("crashkernel: ':' expected\n");
    return -EINVAL;
   }
   cur++;
 
   size = memparse(cur, &tmp);
   if (cur == tmp) {
-   pr_warning("Memory value expected\n");
+   pr_warn("Memory value expected\n");
    return -EINVAL;
   }
   cur = tmp;
   if (size >= system_ram) {
-   pr_warning("crashkernel: invalid size\n");
+   pr_warn("crashkernel: invalid size\n");
    return -EINVAL;
   }
 
@@ -1328,8 +1324,7 @@ static int __init parse_crashkernel_mem(char    *cmdline,
    cur++;
    *crash_base = memparse(cur, &tmp);
    if (cur == tmp) {
-    pr_warning("Memory value expected "
-      "after '@'\n");
+    pr_warn("Memory value expected after '@'\n");
     return -EINVAL;
    }
   }
@@ -1341,26 +1336,26 @@ static int __init parse_crashkernel_mem(char    *cmdline,
 /*
  * That function parses "simple" (old) crashkernel command lines like
  *
- *  crashkernel=size[@offset]
+ * crashkernel=size[@offset]
  *
  * It returns 0 on success and -EINVAL on failure.
  */
-static int __init parse_crashkernel_simple(char   *cmdline,
-        unsigned long long  *crash_size,
-        unsigned long long  *crash_base)
+static int __init parse_crashkernel_simple(char *cmdline,
+        unsigned long long *crash_size,
+        unsigned long long *crash_base)
 {
  char *cur = cmdline;
 
  *crash_size = memparse(cmdline, &cur);
  if (cmdline == cur) {
-  pr_warning("crashkernel: memory value expected\n");
+  pr_warn("crashkernel: memory value expected\n");
   return -EINVAL;
  }
 
  if (*cur == '@')
   *crash_base = memparse(cur+1, &cur);
  else if (*cur != ' ' && *cur != '\0') {
-  pr_warning("crashkernel: unrecognized char\n");
+  pr_warn("crashkernel: unrecognized char\n");
   return -EINVAL;
  }
 
@@ -1743,7 +1738,7 @@ int kernel_kexec(void)
  {
   kexec_in_progress = true;
   kernel_restart_prepare(NULL);
-  printk(KERN_EMERG "Starting new kernel\n");
+  pr_emerg("Starting new kernel\n");
   machine_shutdown();
  }
 
-- 
1.7.1