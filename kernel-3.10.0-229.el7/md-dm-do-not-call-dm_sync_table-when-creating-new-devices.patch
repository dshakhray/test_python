From cca2b5420c4ce3a481f2bad8c4bb4690d7e3a3f5 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Sat, 22 Nov 2014 23:56:45 -0500
Subject: [md] dm: do not call dm_sync_table() when creating new devices

Message-id: <1416700613-25142-6-git-send-email-snitzer@redhat.com>
Patchwork-id: 100840
O-Subject: [RHEL7.1 PATCH 05/13] dm: do not call dm_sync_table() when creating new devices
Bugzilla: 1165246
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1165246

Upstream linux-dm.git commit 41abc4e1af369bb5438eaee398e3beee690cc8ca
Author: Hannes Reinecke <hare@suse.de>
Date:   Wed Nov 5 14:35:50 2014 +0100

    dm: do not call dm_sync_table() when creating new devices

    When creating new devices dm_sync_table() calls
    synchronize_rcu_expedited(), causing _all_ pending RCU pointers to be
    flushed. This causes a latency overhead that is especially noticeable
    when creating lots of devices.

    And all of this is pointless as there are no old maps to be
    disconnected, and hence no stale pointers which would need to be
    cleared up.

    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index 648a686..3b4df65 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -2437,7 +2437,8 @@ static struct dm_table *__bind(struct mapped_device *md, struct dm_table *t,
   set_bit(DMF_MERGE_IS_OPTIONAL, &md->flags);
  else
   clear_bit(DMF_MERGE_IS_OPTIONAL, &md->flags);
- dm_sync_table(md);
+ if (old_map)
+  dm_sync_table(md);
 
  return old_map;
 }
@@ -2878,7 +2879,8 @@ int dm_suspend(struct mapped_device *md, unsigned suspend_flags)
   * flush_workqueue(md->wq).
   */
  set_bit(DMF_BLOCK_IO_FOR_SUSPEND, &md->flags);
- synchronize_srcu(&md->io_barrier);
+ if (map)
+  synchronize_srcu(&md->io_barrier);
 
  /*
   * Stop md->queue before flushing md->wq in case request-based
@@ -2898,7 +2900,8 @@ int dm_suspend(struct mapped_device *md, unsigned suspend_flags)
 
  if (noflush)
   clear_bit(DMF_NOFLUSH_SUSPENDING, &md->flags);
- synchronize_srcu(&md->io_barrier);
+ if (map)
+  synchronize_srcu(&md->io_barrier);
 
  /* were we interrupted ? */
  if (r < 0) {
-- 
1.7.1