From e372711175f0ffc3b2d7292efe71f2ac1f30168e Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:53:36 -0400
Subject: [fs] nfs: Create a common rpc_call_ops struct

Message-id: <1403798077-28799-18-git-send-email-steved@redhat.com>
Patchwork-id: 84888
O-Subject: [RHEL7.1 PATCH 17/78] NFS: Create a common rpc_call_ops struct
Bugzilla: 1113248
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Anna Schumaker <Anna.Schumaker@netapp.com>

The read and write paths set up this struct in exactly the same way, so
create a single shared struct.

Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 6f92fa4581f1c26562f80dc686b3c9ea76556911
Bugzilla: 1113248
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/internal.h b/fs/nfs/internal.h
index 5d67d71..8522c4a 100644
--- a/fs/nfs/internal.h
+++ b/fs/nfs/internal.h
@@ -237,13 +237,11 @@ extern void nfs_pgheader_init(struct nfs_pageio_descriptor *desc,
 void nfs_set_pgio_error(struct nfs_pgio_header *hdr, int error, loff_t pos);
 int nfs_iocounter_wait(struct nfs_io_counter *c);
 
+extern const struct rpc_call_ops nfs_pgio_common_ops;
 struct nfs_rw_header *nfs_rw_header_alloc(const struct nfs_rw_ops *);
 void nfs_rw_header_free(struct nfs_pgio_header *);
 struct nfs_pgio_data *nfs_pgio_data_alloc(struct nfs_pgio_header *, unsigned int);
 void nfs_pgio_data_release(struct nfs_pgio_data *);
-void nfs_pgio_prepare(struct rpc_task *, void *);
-void nfs_pgio_release(void *);
-void nfs_pgio_result(struct rpc_task *, void *);
 
 static inline void nfs_iocounter_init(struct nfs_io_counter *c)
 {
diff --git a/fs/nfs/pagelist.c b/fs/nfs/pagelist.c
index f74df87..aabff78 100644
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@ -393,7 +393,7 @@ EXPORT_SYMBOL_GPL(nfs_pgio_data_release);
  * @task: The current task
  * @calldata: pageio data to prepare
  */
-void nfs_pgio_prepare(struct rpc_task *task, void *calldata)
+static void nfs_pgio_prepare(struct rpc_task *task, void *calldata)
 {
  struct nfs_pgio_data *data = calldata;
  int err;
@@ -406,7 +406,7 @@ void nfs_pgio_prepare(struct rpc_task *task, void *calldata)
  * nfs_pgio_release - Release pageio data
  * @calldata: The pageio data to release
  */
-void nfs_pgio_release(void *calldata)
+static void nfs_pgio_release(void *calldata)
 {
  struct nfs_pgio_data *data = calldata;
  if (data->header->rw_ops->rw_release)
@@ -454,7 +454,7 @@ EXPORT_SYMBOL_GPL(nfs_pageio_init);
  * @task: The task that ran
  * @calldata: Pageio data to check
  */
-void nfs_pgio_result(struct rpc_task *task, void *calldata)
+static void nfs_pgio_result(struct rpc_task *task, void *calldata)
 {
  struct nfs_pgio_data *data = calldata;
  struct inode *inode = data->header->inode;
@@ -677,3 +677,8 @@ void nfs_destroy_nfspagecache(void)
  kmem_cache_destroy(nfs_page_cachep);
 }
 
+const struct rpc_call_ops nfs_pgio_common_ops = {
+ .rpc_call_prepare = nfs_pgio_prepare,
+ .rpc_call_done = nfs_pgio_result,
+ .rpc_release = nfs_pgio_release,
+};
diff --git a/fs/nfs/read.c b/fs/nfs/read.c
index bc78bd2..a33490c 100644
--- a/fs/nfs/read.c
+++ b/fs/nfs/read.c
@@ -29,7 +29,6 @@
 #define NFSDBG_FACILITY  NFSDBG_PAGECACHE
 
 static const struct nfs_pageio_ops nfs_pageio_read_ops;
-static const struct rpc_call_ops nfs_read_common_ops;
 static const struct nfs_pgio_completion_ops nfs_async_read_completion_ops;
 static const struct nfs_rw_ops nfs_rw_read_ops;
 
@@ -314,7 +313,7 @@ static int nfs_pagein_multi(struct nfs_pageio_descriptor *desc,
 
  nfs_list_remove_request(req);
  nfs_list_add_request(req, &hdr->pages);
- desc->pg_rpc_callops = &nfs_read_common_ops;
+ desc->pg_rpc_callops = &nfs_pgio_common_ops;
  return 0;
 }
 
@@ -343,7 +342,7 @@ static int nfs_pagein_one(struct nfs_pageio_descriptor *desc,
 
  nfs_read_rpcsetup(data, desc->pg_count, 0);
  list_add(&data->list, &hdr->rpc_list);
- desc->pg_rpc_callops = &nfs_read_common_ops;
+ desc->pg_rpc_callops = &nfs_pgio_common_ops;
  return 0;
 }
 
@@ -443,12 +442,6 @@ static void nfs_readpage_result(struct rpc_task *task, struct nfs_pgio_data *dat
   nfs_readpage_retry(task, data);
 }
 
-static const struct rpc_call_ops nfs_read_common_ops = {
- .rpc_call_prepare = nfs_pgio_prepare,
- .rpc_call_done = nfs_pgio_result,
- .rpc_release = nfs_pgio_release,
-};
-
 /*
  * Read a page over NFS.
  * We read the page synchronously in the following case:
diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index 5122472..885d663 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -42,7 +42,6 @@
  * Local function declarations
  */
 static void nfs_redirty_request(struct nfs_page *req);
-static const struct rpc_call_ops nfs_write_common_ops;
 static const struct rpc_call_ops nfs_commit_ops;
 static const struct nfs_pgio_completion_ops nfs_async_write_completion_ops;
 static const struct nfs_commit_completion_ops nfs_commit_completion_ops;
@@ -1140,7 +1139,7 @@ static int nfs_flush_multi(struct nfs_pageio_descriptor *desc,
  } while (nbytes != 0);
  nfs_list_remove_request(req);
  nfs_list_add_request(req, &hdr->pages);
- desc->pg_rpc_callops = &nfs_write_common_ops;
+ desc->pg_rpc_callops = &nfs_pgio_common_ops;
  return 0;
 }
 
@@ -1184,7 +1183,7 @@ static int nfs_flush_one(struct nfs_pageio_descriptor *desc,
  /* Set up the argument struct */
  nfs_write_rpcsetup(data, desc->pg_count, 0, desc->pg_ioflags, &cinfo);
  list_add(&data->list, &hdr->rpc_list);
- desc->pg_rpc_callops = &nfs_write_common_ops;
+ desc->pg_rpc_callops = &nfs_pgio_common_ops;
  return 0;
 }
 
@@ -1274,12 +1273,6 @@ static void nfs_writeback_release_common(struct nfs_pgio_data *data)
  }
 }
 
-static const struct rpc_call_ops nfs_write_common_ops = {
- .rpc_call_prepare = nfs_pgio_prepare,
- .rpc_call_done = nfs_pgio_result,
- .rpc_release = nfs_pgio_release,
-};
-
 /*
  * Special version of should_remove_suid() that ignores capabilities.
  */
-- 
1.7.1