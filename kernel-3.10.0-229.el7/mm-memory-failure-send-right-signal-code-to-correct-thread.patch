From 2258c6bdb97c5b145c550b28cc3e5e204ca7b620 Mon Sep 17 00:00:00 2001
From: Rui Wang <ruwang@redhat.com>
Date: Wed, 20 Aug 2014 08:26:51 -0400
Subject: [mm] memory-failure: send right signal code to correct thread

Message-id: <1408523213-22738-2-git-send-email-ruwang@redhat.com>
Patchwork-id: 88398
O-Subject: [PATCH v2 RHEL7.1 BZ1108357 1/3] mm/memory-failure.c-failure: send right signal code to correct thread
Bugzilla: 1108357
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>

From: "Chen, Gong" <gong.chen@linux.intel.com>

Backport of:
Original commit: a70ffcac741d31a406c1d2b832ae43d658e7e1cf
Original Author: Tony Luck <tony.luck@intel.com>
Original Date: Wed, 4 Jun 2014 16:10:59 -0700

 When a thread in a multi-threaded application hits a machine check because
 of an uncorrectable error in memory - we want to send the SIGBUS with
 si.si_code = BUS_MCEERR_AR to that thread.  Currently we fail to do that
 if the active thread is not the primary thread in the process.
 collect_procs() just finds primary threads and this test:

  if ((flags & MF_ACTION_REQUIRED) && t == current) {

 will see that the thread we found isn't the current thread and so send a
 si.si_code = BUS_MCEERR_AO to the primary (and nothing to the active
 thread at this time).

 We can fix this by checking whether "current" shares the same mm with the
 process that collect_procs() said owned the page.  If so, we send the
 SIGBUS to current (with code BUS_MCEERR_AR).

Signed-off-by: Chen, Gong <gong.chen@linux.intel.com>
---
 mm/memory-failure.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/mm/memory-failure.c b/mm/memory-failure.c
index 8b33b85..1f5477c 100644
--- a/mm/memory-failure.c
+++ b/mm/memory-failure.c
@@ -208,9 +208,9 @@ static int kill_proc(struct task_struct *t, unsigned long addr, int trapno,
 #endif
  si.si_addr_lsb = compound_order(compound_head(page)) + PAGE_SHIFT;
 
- if ((flags & MF_ACTION_REQUIRED) && t == current) {
+ if ((flags & MF_ACTION_REQUIRED) && t->mm == current->mm) {
   si.si_code = BUS_MCEERR_AR;
-  ret = force_sig_info(SIGBUS, &si, t);
+  ret = force_sig_info(SIGBUS, &si, current);
  } else {
   /*
    * Don't use force here, it's convenient if the signal
-- 
1.7.1