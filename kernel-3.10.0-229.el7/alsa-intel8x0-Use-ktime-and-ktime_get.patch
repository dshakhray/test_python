From 26f9a76b397d800439708b367d97274484c04b4d Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:35:15 -0400
Subject: [alsa] intel8x0: Use ktime and ktime_get()

Message-id: <140972823573-337-patchset-jkysela@redhat.com>
Patchwork-id: 91033
O-Subject: [RHEL 7.1 PATCH 336/442] ALSA: intel8x0: Use ktime and ktime_get()
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

do_posix_clock_monotonic_gettime() is a leftover from the initial
posix timer implementation which maps to ktime_get_ts() and returns
the monotonic time in a timespec.

Use ktime based ktime_get() and use the ktime_delta_us() function to
calculate the delta instead of open coding the timespec math.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: 2afe8be85c2c79fc574c0d322ab60921d5deed43)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/pci/intel8x0.c b/sound/pci/intel8x0.c
index 68340d7..c91860e 100644
--- a/sound/pci/intel8x0.c
+++ b/sound/pci/intel8x0.c
@@ -2779,7 +2779,7 @@ static void intel8x0_measure_ac97_clock(struct intel8x0 *chip)
  unsigned long port;
  unsigned long pos, pos1, t;
  int civ, timeout = 1000, attempt = 1;
- struct timespec start_time, stop_time;
+ ktime_t start_time, stop_time;
 
  if (chip->ac97_bus->clock != 48000)
   return; /* specified in module option */
@@ -2813,7 +2813,7 @@ static void intel8x0_measure_ac97_clock(struct intel8x0 *chip)
   iputbyte(chip, port + ICH_REG_OFF_CR, ICH_IOCE);
   iputdword(chip, ICHREG(ALI_DMACR), 1 << ichdev->ali_slot);
  }
- do_posix_clock_monotonic_gettime(&start_time);
+ start_time = ktime_get();
  spin_unlock_irq(&chip->reg_lock);
  msleep(50);
  spin_lock_irq(&chip->reg_lock);
@@ -2837,7 +2837,7 @@ static void intel8x0_measure_ac97_clock(struct intel8x0 *chip)
   pos += ichdev->position;
  }
  chip->in_measurement = 0;
- do_posix_clock_monotonic_gettime(&stop_time);
+ stop_time = ktime_get();
  /* stop */
  if (chip->device_type == DEVICE_ALI) {
   iputdword(chip, ICHREG(ALI_DMACR), 1 << (ichdev->ali_slot + 16));
@@ -2865,9 +2865,7 @@ static void intel8x0_measure_ac97_clock(struct intel8x0 *chip)
  }
 
  pos /= 4;
- t = stop_time.tv_sec - start_time.tv_sec;
- t *= 1000000;
- t += (stop_time.tv_nsec - start_time.tv_nsec) / 1000;
+ t = ktime_us_delta(stop_time, start_time);
  dev_info(chip->card->dev,
    "%s: measured %lu usecs (%lu samples)\n", __func__, t, pos);
  if (t == 0) {
-- 
1.7.1