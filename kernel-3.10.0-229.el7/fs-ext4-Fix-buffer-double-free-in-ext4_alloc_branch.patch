From 39b8779112cfebd227b258c9cfb58ac9c4ab386f Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:55:09 -0400
Subject: [fs] ext4: Fix buffer double free in ext4_alloc_branch()

Message-id: <1414058125-4183-156-git-send-email-lczerner@redhat.com>
Patchwork-id: 98171
O-Subject: [RHEL 7.1 PATCH v2 155/171] ext4: Fix buffer double free in ext4_alloc_branch()
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Jan Kara <jack@suse.cz>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit c5c7b8ddfbf8cb3b2291e515a34ab1b8982f5a2d

 Error recovery in ext4_alloc_branch() calls ext4_forget() even for
 buffer corresponding to indirect block it did not allocate. This leads
 to brelse() being called twice for that buffer (once from ext4_forget()
 and once from cleanup in ext4_ind_map_blocks()) leading to buffer use
 count misaccounting. Eventually (but often much later because there
 are other users of the buffer) we will see messages like:
 VFS: brelse: Trying to free free buffer

 Another manifestation of this problem is an error:
 JBD2 unexpected failure: jbd2_journal_revoke: !buffer_revoked(bh);
 inconsistent data on disk

 The fix is easy - don't forget buffer we did not allocate. Also add an
 explanatory comment because the indexing at ext4_alloc_branch() is
 somewhat subtle.

 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Cc: stable@vger.kernel.org
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/indirect.c b/fs/ext4/indirect.c
index 594009f..3b91d24 100644
--- a/fs/ext4/indirect.c
+++ b/fs/ext4/indirect.c
@@ -389,7 +389,13 @@ static int ext4_alloc_branch(handle_t *handle, struct inode *inode,
  return 0;
 failed:
  for (; i >= 0; i--) {
-  if (i != indirect_blks && branch[i].bh)
+  /*
+   * We want to ext4_forget() only freshly allocated indirect
+   * blocks.  Buffer for new_blocks[i-1] is at branch[i].bh and
+   * buffer at branch[0].bh is indirect block / inode already
+   * existing before ext4_alloc_branch() was called.
+   */
+  if (i > 0 && i != indirect_blks && branch[i].bh)
    ext4_forget(handle, 1, inode, branch[i].bh,
         branch[i].bh->b_blocknr);
   ext4_free_blocks(handle, inode, NULL, new_blocks[i],
-- 
1.7.1