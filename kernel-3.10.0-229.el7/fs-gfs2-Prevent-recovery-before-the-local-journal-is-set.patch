From 5b8fcfecfd8a014f1e549f22dd1d5648cd8b5f6a Mon Sep 17 00:00:00 2001
From: Robert S Peterson <rpeterso@redhat.com>
Date: Wed, 4 Jun 2014 12:25:40 -0400
Subject: [fs] gfs2: Prevent recovery before the local journal is set

Message-id: <1521928274.16571189.1401884740283.JavaMail.zimbra@redhat.com>
Patchwork-id: 82432
O-Subject: [RHEL7.1 PATCH][bz #1079433] GFS2: Prevent recovery before the local journal is set
Bugzilla: 1079433
RH-Acked-by: Abhijith Das <adas@redhat.com>
RH-Acked-by: Steven Whitehouse <swhiteho@redhat.com>

Hi,

This patch is for bz #1079433 - GFS2: NULL pointer in gfs2_recover_set.
The symptom: a node is fenced and when it returns, its journal is replayed,
but the timing is such that it tries to recover the journal before the
journal is opened, which results in a kernel panic. This patch fixes the
problem by using a completion to wait for journal initialization before
attempting journal recovery.

The upstream patch is here:
http://git.kernel.org/cgit/linux/kernel/git/steve/gfs2-3.0-nmw.git/commit/fs/gfs2?id=0e48e055a7dfc0cf17bbabe4d9b523ee0b1a9ed6

A test kernel was built here:
https://brewweb.devel.redhat.com/taskinfo?taskID=7488867

It was tested on a four-node cluster using the "revolver" QE test on nodes:
gfs-i8c-0{1..4}.mpc.lab.eng.bos.redhat.com.

Patch description:

This patch uses a completion to prevent dlm's recovery process from
referencing and trying to recover a journal before a journal has been
opened.

rhbz#1079433

Regards,

Bob Peterson
Red Hat File Systems

Signed-off-by: Bob Peterson <rpeterso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/gfs2/incore.h b/fs/gfs2/incore.h
index 90b0773..ba976b3 100644
--- a/fs/gfs2/incore.h
+++ b/fs/gfs2/incore.h
@@ -709,6 +709,8 @@ struct gfs2_sbd {
  struct gfs2_holder sd_sc_gh;
  struct gfs2_holder sd_qc_gh;
 
+ struct completion sd_journal_ready;
+
  /* Daemon stuff */
 
  struct task_struct *sd_logd_process;
diff --git a/fs/gfs2/ops_fstype.c b/fs/gfs2/ops_fstype.c
index 77a27eb..cf6501f 100644
--- a/fs/gfs2/ops_fstype.c
+++ b/fs/gfs2/ops_fstype.c
@@ -91,6 +91,7 @@ static struct gfs2_sbd *init_sbd(struct super_block *sb)
  INIT_LIST_HEAD(&sdp->sd_jindex_list);
  spin_lock_init(&sdp->sd_jindex_spin);
  mutex_init(&sdp->sd_jindex_mutex);
+ init_completion(&sdp->sd_journal_ready);
 
  INIT_LIST_HEAD(&sdp->sd_quota_list);
  mutex_init(&sdp->sd_quota_mutex);
@@ -831,6 +832,7 @@ static int init_inodes(struct gfs2_sbd *sdp, int undo)
   goto fail_qinode;
 
  error = init_journal(sdp, undo);
+ complete_all(&sdp->sd_journal_ready);
  if (error)
   goto fail;
 
@@ -1287,6 +1289,7 @@ fail_sb:
 fail_locking:
  init_locking(sdp, &mount_gh, UNDO);
 fail_lm:
+ complete_all(&sdp->sd_journal_ready);
  gfs2_gl_hash_clear(sdp);
  gfs2_lm_unmount(sdp);
 fail_debug:
diff --git a/fs/gfs2/sys.c b/fs/gfs2/sys.c
index aa5c480..70d3a3d 100644
--- a/fs/gfs2/sys.c
+++ b/fs/gfs2/sys.c
@@ -406,6 +406,9 @@ int gfs2_recover_set(struct gfs2_sbd *sdp, unsigned jid)
  struct gfs2_jdesc *jd;
  int rv;
 
+ /* Wait for our primary journal to be initialized */
+ wait_for_completion(&sdp->sd_journal_ready);
+
  spin_lock(&sdp->sd_jindex_spin);
  rv = -EBUSY;
  if (sdp->sd_jdesc->jd_jid == jid)
-- 
1.7.1