From 64c17eedb9fda972de5c55dbed8f9a6007b05c85 Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:25:26 -0400
Subject: [md] use MD_RECOVERY_INTR instead of kthread_should_stop in resync thread

Message-id: <1409563584-9000-25-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 89956
O-Subject: [RHEL7.1 PATCH 24/82] md: use MD_RECOVERY_INTR instead of kthread_should_stop in resync thread.
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: NeilBrown <neilb@suse.de>

We currently use kthread_should_stop() in various places in the
sync/reshape code to abort early.
However some places set MD_RECOVERY_INTR but don't immediately call
md_reap_sync_thread() (and we will shortly get another one).
When this happens we are relying on md_check_recovery() to reap the
thread and that only happen when it finishes normally.
So MD_RECOVERY_INTR must lead to a normal finish without the
kthread_should_stop() test.

So replace all relevant tests, and be more careful when the thread is
interrupted not to acknowledge that latest step in a reshape as it may
not be fully committed yet.

Also add a test on MD_RECOVERY_INTR in the 'is_mddev_idle' loop
so we don't wait have to wait for the speed to drop before we can abort.

Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit c91abf5a3546a4ff0838d2905f4d7eae2795f724)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/md.c b/drivers/md/md.c
index e61b5df..1cc1a31 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -7378,9 +7378,6 @@ void md_do_sync(struct md_thread *thread)
   mddev->curr_resync = 2;
 
  try_again:
-  if (kthread_should_stop())
-   set_bit(MD_RECOVERY_INTR, &mddev->recovery);
-
   if (test_bit(MD_RECOVERY_INTR, &mddev->recovery))
    goto skip;
   for_each_mddev(mddev2, tmp) {
@@ -7405,7 +7402,7 @@ void md_do_sync(struct md_thread *thread)
      * be caught by 'softlockup'
      */
     prepare_to_wait(&resync_wait, &wq, TASK_INTERRUPTIBLE);
-    if (!kthread_should_stop() &&
+    if (!test_bit(MD_RECOVERY_INTR, &mddev->recovery) &&
         mddev2->curr_resync >= mddev->curr_resync) {
      printk(KERN_INFO "md: delaying %s of %s"
             " until %s has finished (they"
@@ -7481,7 +7478,7 @@ void md_do_sync(struct md_thread *thread)
  last_check = 0;
 
  if (j>2) {
-  printk(KERN_INFO 
+  printk(KERN_INFO
          "md: resuming %s of %s from checkpoint.\n",
          desc, mdname(mddev));
   mddev->curr_resync = j;
@@ -7518,7 +7515,8 @@ void md_do_sync(struct md_thread *thread)
    sysfs_notify(&mddev->kobj, NULL, "sync_completed");
   }
 
-  while (j >= mddev->resync_max && !kthread_should_stop()) {
+  while (j >= mddev->resync_max &&
+         !test_bit(MD_RECOVERY_INTR, &mddev->recovery)) {
    /* As this condition is controlled by user-space,
     * we can block indefinitely, so use '_interruptible'
     * to avoid triggering warnings.
@@ -7526,17 +7524,18 @@ void md_do_sync(struct md_thread *thread)
    flush_signals(current); /* just in case */
    wait_event_interruptible(mddev->recovery_wait,
        mddev->resync_max > j
-       || kthread_should_stop());
+       || test_bit(MD_RECOVERY_INTR,
+            &mddev->recovery));
   }
 
-  if (kthread_should_stop())
-   goto interrupted;
+  if (test_bit(MD_RECOVERY_INTR, &mddev->recovery))
+   break;
 
   sectors = mddev->pers->sync_request(mddev, j, &skipped,
         currspeed < speed_min(mddev));
   if (sectors == 0) {
    set_bit(MD_RECOVERY_INTR, &mddev->recovery);
-   goto out;
+   break;
   }
 
   if (!skipped) { /* actual IO requested */
@@ -7573,10 +7572,8 @@ void md_do_sync(struct md_thread *thread)
    last_mark = next;
   }
 
-
-  if (kthread_should_stop())
-   goto interrupted;
-
+  if (test_bit(MD_RECOVERY_INTR, &mddev->recovery))
+   break;
 
   /*
    * this loop exits only if either when we are slower than
@@ -7599,11 +7596,12 @@ void md_do_sync(struct md_thread *thread)
    }
   }
  }
- printk(KERN_INFO "md: %s: %s done.\n",mdname(mddev), desc);
+ printk(KERN_INFO "md: %s: %s %s.\n",mdname(mddev), desc,
+        test_bit(MD_RECOVERY_INTR, &mddev->recovery)
+        ? "interrupted" : "done");
  /*
   * this also signals 'finished resyncing' to md_stop
   */
- out:
  blk_finish_plug(&plug);
  wait_event(mddev->recovery_wait, !atomic_read(&mddev->recovery_active));
 
@@ -7657,16 +7655,6 @@ void md_do_sync(struct md_thread *thread)
  set_bit(MD_RECOVERY_DONE, &mddev->recovery);
  md_wakeup_thread(mddev->thread);
  return;
-
- interrupted:
- /*
-  * got a signal, exit.
-  */
- printk(KERN_INFO
-        "md: md_do_sync() got signal ... exiting\n");
- set_bit(MD_RECOVERY_INTR, &mddev->recovery);
- goto out;
-
 }
 EXPORT_SYMBOL_GPL(md_do_sync);
 
diff --git a/drivers/md/raid10.c b/drivers/md/raid10.c
index 7c3508a..c504e83 100644
--- a/drivers/md/raid10.c
+++ b/drivers/md/raid10.c
@@ -4384,7 +4384,11 @@ static sector_t reshape_request(struct mddev *mddev, sector_t sector_nr,
   set_bit(MD_CHANGE_DEVS, &mddev->flags);
   md_wakeup_thread(mddev->thread);
   wait_event(mddev->sb_wait, mddev->flags == 0 ||
-      kthread_should_stop());
+      test_bit(MD_RECOVERY_INTR, &mddev->recovery));
+  if (test_bit(MD_RECOVERY_INTR, &mddev->recovery)) {
+   allow_barrier(conf);
+   return sectors_done;
+  }
   conf->reshape_safe = mddev->reshape_position;
   allow_barrier(conf);
  }
diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index 21b97ee..a3100c1 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -4830,14 +4830,19 @@ static sector_t reshape_request(struct mddev *mddev, sector_t sector_nr, int *sk
      time_after(jiffies, conf->reshape_checkpoint + 10*HZ)) {
   /* Cannot proceed until we've updated the superblock... */
   wait_event(conf->wait_for_overlap,
-      atomic_read(&conf->reshape_stripes)==0);
+      atomic_read(&conf->reshape_stripes)==0
+      || test_bit(MD_RECOVERY_INTR, &mddev->recovery));
+  if (atomic_read(&conf->reshape_stripes) != 0)
+   return 0;
   mddev->reshape_position = conf->reshape_progress;
   mddev->curr_resync_completed = sector_nr;
   conf->reshape_checkpoint = jiffies;
   set_bit(MD_CHANGE_DEVS, &mddev->flags);
   md_wakeup_thread(mddev->thread);
   wait_event(mddev->sb_wait, mddev->flags == 0 ||
-      kthread_should_stop());
+      test_bit(MD_RECOVERY_INTR, &mddev->recovery));
+  if (test_bit(MD_RECOVERY_INTR, &mddev->recovery))
+   return 0;
   spin_lock_irq(&conf->device_lock);
   conf->reshape_safe = mddev->reshape_position;
   spin_unlock_irq(&conf->device_lock);
@@ -4920,7 +4925,10 @@ static sector_t reshape_request(struct mddev *mddev, sector_t sector_nr, int *sk
      >= mddev->resync_max - mddev->curr_resync_completed) {
   /* Cannot proceed until we've updated the superblock... */
   wait_event(conf->wait_for_overlap,
-      atomic_read(&conf->reshape_stripes) == 0);
+      atomic_read(&conf->reshape_stripes) == 0
+      || test_bit(MD_RECOVERY_INTR, &mddev->recovery));
+  if (atomic_read(&conf->reshape_stripes) != 0)
+   goto ret;
   mddev->reshape_position = conf->reshape_progress;
   mddev->curr_resync_completed = sector_nr;
   conf->reshape_checkpoint = jiffies;
@@ -4928,13 +4936,16 @@ static sector_t reshape_request(struct mddev *mddev, sector_t sector_nr, int *sk
   md_wakeup_thread(mddev->thread);
   wait_event(mddev->sb_wait,
       !test_bit(MD_CHANGE_DEVS, &mddev->flags)
-      || kthread_should_stop());
+      || test_bit(MD_RECOVERY_INTR, &mddev->recovery));
+  if (test_bit(MD_RECOVERY_INTR, &mddev->recovery))
+   goto ret;
   spin_lock_irq(&conf->device_lock);
   conf->reshape_safe = mddev->reshape_position;
   spin_unlock_irq(&conf->device_lock);
   wake_up(&conf->wait_for_overlap);
   sysfs_notify(&mddev->kobj, NULL, "sync_completed");
  }
+ret:
  return reshape_sectors;
 }
 
-- 
1.7.1