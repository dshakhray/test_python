From 039446073f775cb88840ec64a3ce768d5623c499 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:06:48 -0400
Subject: [powerpc] bpf: Support MOD operation

Message-id: <1410545655-205645-180-git-send-email-dzickus@redhat.com>
Patchwork-id: 94187
O-Subject: [RHEL7 PATCH 179/626] powerpc/bpf: Support MOD operation
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit b0c06d333505c5503d0de5dee1ddf8478dcf5251
Author: Vladimir Murzin <murzin.v@gmail.com>
Date:   Sat Sep 28 10:22:01 2013 +0200

    powerpc/bpf: Support MOD operation

    commit b6069a9570 (filter: add MOD operation) added generic
    support for modulus operation in BPF.

    This patch brings JIT support for PPC64

    Signed-off-by: Vladimir Murzin <murzin.v@gmail.com>
    Acked-by: Matt Evans <matt@ozlabs.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/net/bpf_jit.h b/arch/powerpc/net/bpf_jit.h
index 0baf2b8..9aee27c 100644
--- a/arch/powerpc/net/bpf_jit.h
+++ b/arch/powerpc/net/bpf_jit.h
@@ -39,6 +39,7 @@
 #define r_X  5
 #define r_addr  6
 #define r_scratch1 7
+#define r_scratch2 8
 #define r_D  14
 #define r_HL  15
 #define r_M  16
diff --git a/arch/powerpc/net/bpf_jit_comp.c b/arch/powerpc/net/bpf_jit_comp.c
index 9e212f9..b5573a8 100644
--- a/arch/powerpc/net/bpf_jit_comp.c
+++ b/arch/powerpc/net/bpf_jit_comp.c
@@ -187,6 +187,26 @@ static int bpf_jit_build_body(struct sk_filter *fp, u32 *image,
     PPC_MUL(r_A, r_A, r_scratch1);
    }
    break;
+  case BPF_S_ALU_MOD_X: /* A %= X; */
+   ctx->seen |= SEEN_XREG;
+   PPC_CMPWI(r_X, 0);
+   if (ctx->pc_ret0 != -1) {
+    PPC_BCC(COND_EQ, addrs[ctx->pc_ret0]);
+   } else {
+    PPC_BCC_SHORT(COND_NE, (ctx->idx*4)+12);
+    PPC_LI(r_ret, 0);
+    PPC_JMP(exit_addr);
+   }
+   PPC_DIVWU(r_scratch1, r_A, r_X);
+   PPC_MUL(r_scratch1, r_X, r_scratch1);
+   PPC_SUB(r_A, r_A, r_scratch1);
+   break;
+  case BPF_S_ALU_MOD_K: /* A %= K; */
+   PPC_LI32(r_scratch2, K);
+   PPC_DIVWU(r_scratch1, r_A, r_scratch2);
+   PPC_MUL(r_scratch1, r_scratch2, r_scratch1);
+   PPC_SUB(r_A, r_A, r_scratch1);
+   break;
   case BPF_S_ALU_DIV_X: /* A /= X; */
    ctx->seen |= SEEN_XREG;
    PPC_CMPWI(r_X, 0);
-- 
1.7.1