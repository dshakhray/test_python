From 8d7721cfebdde58ddd78558493401a18a632d616 Mon Sep 17 00:00:00 2001
From: Tomas Henzl <thenzl@redhat.com>
Date: Thu, 18 Sep 2014 14:14:23 -0400
Subject: [scsi] megaraid_sas: Host lock less mode to enabled asynchronous IO submission

Message-id: <1411049668-28841-24-git-send-email-thenzl@redhat.com>
Patchwork-id: 96158
O-Subject: [RHEL7.1 e-stor PATCH 23/28] megaraid_sas : Host lock less mode to enabled asynchronous IO submission
Bugzilla: 1088523
RH-Acked-by: Ewan Milne <emilne@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>

Megaraid_sas driver can now work in host lock less mode.
Remove host lock less as megaraid_sas driver will have safer access to raid map as described in earlier patch.

We now keep Driver Raid map copy, which will make sure
that driver will always have old or new map
Driver raid map will be replaced safely in MR_PopulateDrvRaidMap(), so there is no issue
even if IO is continue from the scsi mid layer.

There is a plan to remove "host_lock" and "hba_lock" usage from megaraid_sas in future.

scsi-queue/drivers-for-3.18 commit fb1a24ff65cec6aecd28caff4e6565591182e381

Signed-off-by: Sumit Saxena <sumit.saxena@avagotech.com>
Signed-off-by: Kashyap Desai <kashyap.desai@avagotech.com>
Reviewed-by: Tomas Henzl <thenzl@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/megaraid/megaraid_sas_base.c b/drivers/scsi/megaraid/megaraid_sas_base.c
index ea2c156..2eec87f 100644
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@ -1536,7 +1536,7 @@ out_return_cmd:
  * @done:   Callback entry point
  */
 static int
-megasas_queue_command_lck(struct scsi_cmnd *scmd, void (*done) (struct scsi_cmnd *))
+megasas_queue_command(struct Scsi_Host *shost, struct scsi_cmnd *scmd)
 {
  struct megasas_instance *instance;
  unsigned long flags;
@@ -1558,7 +1558,7 @@ megasas_queue_command_lck(struct scsi_cmnd *scmd, void (*done) (struct scsi_cmnd
   } else {
    spin_unlock_irqrestore(&instance->hba_lock, flags);
    scmd->result = DID_NO_CONNECT << 16;
-   done(scmd);
+   scmd->scsi_done(scmd);
    return 0;
   }
  }
@@ -1566,7 +1566,7 @@ megasas_queue_command_lck(struct scsi_cmnd *scmd, void (*done) (struct scsi_cmnd
  if (instance->adprecovery == MEGASAS_HW_CRITICAL_ERROR) {
   spin_unlock_irqrestore(&instance->hba_lock, flags);
   scmd->result = DID_NO_CONNECT << 16;
-  done(scmd);
+  scmd->scsi_done(scmd);
   return 0;
  }
 
@@ -1577,7 +1577,6 @@ megasas_queue_command_lck(struct scsi_cmnd *scmd, void (*done) (struct scsi_cmnd
 
  spin_unlock_irqrestore(&instance->hba_lock, flags);
 
- scmd->scsi_done = done;
  scmd->result = 0;
 
  if (MEGASAS_IS_LOGICAL(scmd) &&
@@ -1607,12 +1606,10 @@ megasas_queue_command_lck(struct scsi_cmnd *scmd, void (*done) (struct scsi_cmnd
  return 0;
 
  out_done:
- done(scmd);
+ scmd->scsi_done(scmd);
  return 0;
 }
 
-static DEF_SCSI_QCMD(megasas_queue_command)
-
 static struct megasas_instance *megasas_lookup_instance(u16 host_no)
 {
  int i;
-- 
1.7.1