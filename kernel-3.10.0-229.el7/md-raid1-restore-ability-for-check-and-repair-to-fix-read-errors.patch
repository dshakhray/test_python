From abd6dfb64db0afcb7a402c1bd1866b513a86ab89 Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:25:53 -0400
Subject: [md] raid1: restore ability for check and repair to fix read errors

Message-id: <1409563584-9000-52-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 89980
O-Subject: [RHEL7.1 PATCH 51/82] md/raid1: restore ability for check and repair to fix read errors.
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: NeilBrown <neilb@suse.de>

commit 30bc9b53878a9921b02e3b5bc4283ac1c6de102a
    md/raid1: fix bio handling problems in process_checks()

Move the bio_reset() to a point before where BIO_UPTODATE is checked,
so that check now always report that the bio is uptodate, even if it is not.

This causes process_check() to sometimes treat read-errors as
successful matches so the good data isn't written out.

This patch preserves the flag until it is needed.

Bug was introduced in 3.11, but backported to 3.10-stable (as it fixed
an even worse bug).  So suitable for any -stable since 3.10.

Reported-and-tested-by: Michael Tokarev <mjt@tls.msk.ru>
Cc: stable@vger.kernel.org (3.10+)
Fixed: 30bc9b53878a9921b02e3b5bc4283ac1c6de102a
Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit 1877db75589a895bbdc4c4c3f23558e57b521141)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/raid1.c b/drivers/md/raid1.c
index 49541fc..b799048 100644
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@ -1854,11 +1854,15 @@ static int process_checks(struct r1bio *r1_bio)
  for (i = 0; i < conf->raid_disks * 2; i++) {
   int j;
   int size;
+  int uptodate;
   struct bio *b = r1_bio->bios[i];
   if (b->bi_end_io != end_sync_read)
    continue;
-  /* fixup the bio for reuse */
+  /* fixup the bio for reuse, but preserve BIO_UPTODATE */
+  uptodate = test_bit(BIO_UPTODATE, &b->bi_flags);
   bio_reset(b);
+  if (!uptodate)
+   clear_bit(BIO_UPTODATE, &b->bi_flags);
   b->bi_vcnt = vcnt;
   b->bi_size = r1_bio->sectors << 9;
   b->bi_sector = r1_bio->sector +
@@ -1891,11 +1895,14 @@ static int process_checks(struct r1bio *r1_bio)
   int j;
   struct bio *pbio = r1_bio->bios[primary];
   struct bio *sbio = r1_bio->bios[i];
+  int uptodate = test_bit(BIO_UPTODATE, &sbio->bi_flags);
 
   if (sbio->bi_end_io != end_sync_read)
    continue;
+  /* Now we can 'fixup' the BIO_UPTODATE flag */
+  set_bit(BIO_UPTODATE, &sbio->bi_flags);
 
-  if (test_bit(BIO_UPTODATE, &sbio->bi_flags)) {
+  if (uptodate) {
    for (j = vcnt; j-- ; ) {
     struct page *p, *s;
     p = pbio->bi_io_vec[j].bv_page;
@@ -1910,7 +1917,7 @@ static int process_checks(struct r1bio *r1_bio)
   if (j >= 0)
    atomic64_add(r1_bio->sectors, &mddev->resync_mismatches);
   if (j < 0 || (test_bit(MD_RECOVERY_CHECK, &mddev->recovery)
-         && test_bit(BIO_UPTODATE, &sbio->bi_flags))) {
+         && uptodate)) {
    /* No need to write to this device. */
    sbio->bi_end_io = NULL;
    rdev_dec_pending(conf->mirrors[i].rdev, mddev);
-- 
1.7.1