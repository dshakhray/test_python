From fbb795eee0d13b264e5ef86d6bd384e906785f20 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:53:03 -0400
Subject: [fs] ext4: use ext4_da_writepages() for all modes

Message-id: <1414058125-4183-30-git-send-email-lczerner@redhat.com>
Patchwork-id: 98134
O-Subject: [RHEL 7.1 PATCH v2 029/171] ext4: use ext4_da_writepages() for all modes
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 20970ba65d5a22f2e4efbfa100377722fde56935

 Rename ext4_da_writepages() to ext4_writepages() and use it for all
 modes.  We still need to iterate over all the pages in the case of
 data=journalling, but in the case of nodelalloc/data=ordered (which is
 what file systems mounted using ext3 backwards compatibility will use)
 this will allow us to use a much more efficient I/O submission path.

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 5e2b087..a0bddb7 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -1803,7 +1803,7 @@ out:
  * lock so we have to do some magic.
  *
  * This function can get called via...
- *   - ext4_da_writepages after taking page lock (have journal handle)
+ *   - ext4_writepages after taking page lock (have journal handle)
  *   - journal_submit_inode_data_buffers (no journal handle)
  *   - shrink_page_list via the kswapd/direct reclaim (no journal handle)
  *   - grab_page_cache when doing write_begin (have journal handle)
@@ -2221,7 +2221,7 @@ static int mpage_map_and_submit_extent(handle_t *handle,
 
 /*
  * Calculate the total number of credits to reserve for one writepages
- * iteration. This is called from ext4_da_writepages(). We map an extent of
+ * iteration. This is called from ext4_writepages(). We map an extent of
  * upto MAX_WRITEPAGES_EXTENT_LEN blocks and then we go on and finish mapping
  * the last partial page. So in total we can map MAX_WRITEPAGES_EXTENT_LEN +
  * bpp - 1 blocks in bpp different extents.
@@ -2353,8 +2353,17 @@ out:
  return err;
 }
 
-static int ext4_da_writepages(struct address_space *mapping,
-         struct writeback_control *wbc)
+static int __writepage(struct page *page, struct writeback_control *wbc,
+         void *data)
+{
+ struct address_space *mapping = data;
+ int ret = ext4_writepage(page, wbc);
+ mapping_set_error(mapping, ret);
+ return ret;
+}
+
+static int ext4_writepages(struct address_space *mapping,
+      struct writeback_control *wbc)
 {
  pgoff_t writeback_index = 0;
  long nr_to_write = wbc->nr_to_write;
@@ -2368,7 +2377,7 @@ static int ext4_da_writepages(struct address_space *mapping,
  bool done;
  struct blk_plug plug;
 
- trace_ext4_da_writepages(inode, wbc);
+ trace_ext4_writepages(inode, wbc);
 
  /*
   * No pages to write? This is mainly a kludge to avoid starting
@@ -2378,13 +2387,23 @@ static int ext4_da_writepages(struct address_space *mapping,
  if (!mapping->nrpages || !mapping_tagged(mapping, PAGECACHE_TAG_DIRTY))
   return 0;
 
+ if (ext4_should_journal_data(inode)) {
+  struct blk_plug plug;
+  int ret;
+
+  blk_start_plug(&plug);
+  ret = write_cache_pages(mapping, wbc, __writepage, mapping);
+  blk_finish_plug(&plug);
+  return ret;
+ }
+
  /*
   * If the filesystem has aborted, it is read-only, so return
   * right away instead of dumping stack traces later on that
   * will obscure the real source of the problem.  We test
   * EXT4_MF_FS_ABORTED instead of sb->s_flag's MS_RDONLY because
   * the latter could be true if the filesystem is mounted
-  * read-only, and in that case, ext4_da_writepages should
+  * read-only, and in that case, ext4_writepages should
   * *never* be called, so if that ever happens, we would want
   * the stack trace.
   */
@@ -2524,8 +2543,8 @@ retry:
   mapping->writeback_index = mpd.first_page;
 
 out_writepages:
- trace_ext4_da_writepages_result(inode, wbc, ret,
-     nr_to_write - wbc->nr_to_write);
+ trace_ext4_writepages_result(inode, wbc, ret,
+         nr_to_write - wbc->nr_to_write);
  return ret;
 }
 
@@ -2773,7 +2792,7 @@ int ext4_alloc_da_blocks(struct inode *inode)
   * laptop_mode, not even desirable).  However, to do otherwise
   * would require replicating code paths in:
   *
-  * ext4_da_writepages() ->
+  * ext4_writepages() ->
   *    write_cache_pages() ---> (via passed in callback function)
   *        __mpage_da_writepage() -->
   *           mpage_add_bh_to_extent()
@@ -3217,6 +3236,7 @@ static const struct address_space_operations ext4_aops = {
  .readpage  = ext4_readpage,
  .readpages  = ext4_readpages,
  .writepage  = ext4_writepage,
+ .writepages  = ext4_writepages,
  .write_begin  = ext4_write_begin,
  .write_end  = ext4_write_end,
  .bmap   = ext4_bmap,
@@ -3232,6 +3252,7 @@ static const struct address_space_operations ext4_journalled_aops = {
  .readpage  = ext4_readpage,
  .readpages  = ext4_readpages,
  .writepage  = ext4_writepage,
+ .writepages  = ext4_writepages,
  .write_begin  = ext4_write_begin,
  .write_end  = ext4_journalled_write_end,
  .set_page_dirty  = ext4_journalled_set_page_dirty,
@@ -3247,7 +3268,7 @@ static const struct address_space_operations ext4_da_aops = {
  .readpage  = ext4_readpage,
  .readpages  = ext4_readpages,
  .writepage  = ext4_writepage,
- .writepages  = ext4_da_writepages,
+ .writepages  = ext4_writepages,
  .write_begin  = ext4_da_write_begin,
  .write_end  = ext4_da_write_end,
  .bmap   = ext4_bmap,
diff --git a/include/trace/events/ext4.h b/include/trace/events/ext4.h
index ec21665..d2310af 100644
--- a/include/trace/events/ext4.h
+++ b/include/trace/events/ext4.h
@@ -332,7 +332,7 @@ DEFINE_EVENT(ext4__write_end, ext4_da_write_end,
  TP_ARGS(inode, pos, len, copied)
 );
 
-TRACE_EVENT(ext4_da_writepages,
+TRACE_EVENT(ext4_writepages,
  TP_PROTO(struct inode *inode, struct writeback_control *wbc),
 
  TP_ARGS(inode, wbc),
@@ -430,7 +430,7 @@ TRACE_EVENT(ext4_da_write_pages_extent,
     __entry->flags)
 );
 
-TRACE_EVENT(ext4_da_writepages_result,
+TRACE_EVENT(ext4_writepages_result,
  TP_PROTO(struct inode *inode, struct writeback_control *wbc,
    int ret, int pages_written),
 
-- 
1.7.1