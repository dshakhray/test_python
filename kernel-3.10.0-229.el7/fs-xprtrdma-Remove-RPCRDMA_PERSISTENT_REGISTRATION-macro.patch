From 8a6614856543a2faf3e9e5ad294e3987c39c38e6 Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:15 -0400
Subject: [fs] xprtrdma: Remove RPCRDMA_PERSISTENT_REGISTRATION macro

Message-id: <1411050057-12417-53-git-send-email-steved@redhat.com>
Patchwork-id: 96221
O-Subject: [RHEL7.1 PATCH 52/94] xprtrdma: Remove RPCRDMA_PERSISTENT_REGISTRATION macro
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Chuck Lever <chuck.lever@oracle.com>

Clean up.

RPCRDMA_PERSISTENT_REGISTRATION was a compile-time switch between
RPCRDMA_REGISTER mode and RPCRDMA_ALLPHYSICAL mode.  Since
RPCRDMA_REGISTER has been removed, there's no need for the extra
conditional compilation.

Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
Tested-by: Steve Wise <swise@opengridcomputing.com>
Tested-by: Shirley Ma <shirley.ma@oracle.com>
Tested-by: Devesh Sharma <devesh.sharma@emulex.com>
Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
Upstream Id: a779ca5fa766e270b9e11c162d877295e2904f4e
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/sunrpc/xprtrdma.h b/include/linux/sunrpc/xprtrdma.h
index c2f04e1..64a0a0a 100644
--- a/include/linux/sunrpc/xprtrdma.h
+++ b/include/linux/sunrpc/xprtrdma.h
@@ -62,8 +62,6 @@
 #define RPCRDMA_INLINE_PAD_THRESH  (512)/* payload threshold to pad (bytes) */
 
 /* memory registration strategies */
-#define RPCRDMA_PERSISTENT_REGISTRATION (1)
-
 enum rpcrdma_memreg {
  RPCRDMA_BOUNCEBUFFERS = 0,
  RPCRDMA_REGISTER,
diff --git a/net/sunrpc/xprtrdma/verbs.c b/net/sunrpc/xprtrdma/verbs.c
index 1208ab2..c2253d4 100644
--- a/net/sunrpc/xprtrdma/verbs.c
+++ b/net/sunrpc/xprtrdma/verbs.c
@@ -561,12 +561,7 @@ rpcrdma_ia_open(struct rpcrdma_xprt *xprt, struct sockaddr *addr, int memreg)
   if (!ia->ri_id->device->alloc_fmr) {
    dprintk("RPC:       %s: MTHCAFMR registration "
     "not supported by HCA\n", __func__);
-#if RPCRDMA_PERSISTENT_REGISTRATION
    memreg = RPCRDMA_ALLPHYSICAL;
-#else
-   rc = -ENOMEM;
-   goto out2;
-#endif
   }
  }
 
@@ -581,20 +576,16 @@ rpcrdma_ia_open(struct rpcrdma_xprt *xprt, struct sockaddr *addr, int memreg)
  switch (memreg) {
  case RPCRDMA_FRMR:
   break;
-#if RPCRDMA_PERSISTENT_REGISTRATION
  case RPCRDMA_ALLPHYSICAL:
   mem_priv = IB_ACCESS_LOCAL_WRITE |
     IB_ACCESS_REMOTE_WRITE |
     IB_ACCESS_REMOTE_READ;
   goto register_setup;
-#endif
  case RPCRDMA_MTHCAFMR:
   if (ia->ri_have_dma_lkey)
    break;
   mem_priv = IB_ACCESS_LOCAL_WRITE;
-#if RPCRDMA_PERSISTENT_REGISTRATION
  register_setup:
-#endif
   ia->ri_bind_mem = ib_get_dma_mr(ia->ri_pd, mem_priv);
   if (IS_ERR(ia->ri_bind_mem)) {
    printk(KERN_ALERT "%s: ib_get_dma_mr for "
@@ -1905,7 +1896,6 @@ rpcrdma_register_external(struct rpcrdma_mr_seg *seg,
 
  switch (ia->ri_memreg_strategy) {
 
-#if RPCRDMA_PERSISTENT_REGISTRATION
  case RPCRDMA_ALLPHYSICAL:
   rpcrdma_map_one(ia, seg, writing);
   seg->mr_rkey = ia->ri_bind_mem->rkey;
@@ -1913,7 +1903,6 @@ rpcrdma_register_external(struct rpcrdma_mr_seg *seg,
   seg->mr_nsegs = 1;
   nsegs = 1;
   break;
-#endif
 
  /* Registration using frmr registration */
  case RPCRDMA_FRMR:
@@ -1943,13 +1932,11 @@ rpcrdma_deregister_external(struct rpcrdma_mr_seg *seg,
 
  switch (ia->ri_memreg_strategy) {
 
-#if RPCRDMA_PERSISTENT_REGISTRATION
  case RPCRDMA_ALLPHYSICAL:
   read_lock(&ia->ri_qplock);
   rpcrdma_unmap_one(ia, seg);
   read_unlock(&ia->ri_qplock);
   break;
-#endif
 
  case RPCRDMA_FRMR:
   rc = rpcrdma_deregister_frmr_external(seg, ia, r_xprt);
-- 
1.7.1