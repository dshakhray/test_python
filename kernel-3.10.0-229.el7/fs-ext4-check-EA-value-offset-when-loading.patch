From 50ceedd9e80ce2b0ba176f709a1b8c43846b330b Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Wed, 29 Oct 2014 16:34:27 -0400
Subject: [fs] ext4: check EA value offset when loading

Message-id: <1414600485-1929-38-git-send-email-lczerner@redhat.com>
Patchwork-id: 98558
O-Subject: [RHEL 7.1 PATCH v2 37/55] ext4: check EA value offset when loading
Bugzilla: 1156096
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: "Darrick J. Wong" <darrick.wong@oracle.com>

BZ 1156096
https://bugzilla.redhat.com/show_bug.cgi?id=1156096

BREW 8169722
https://brewweb.devel.redhat.com/taskinfo?taskID=8169722

Upstream commit a0626e75954078cfacddb00a4545dde821170bc5

 When loading extended attributes, check each entry's value offset to
 make sure it doesn't collide with the entries.

 Without this check it is easy to crash the kernel by mounting a
 malicious FS containing a file with an EA wherein e_value_offs = 0 and
 e_value_size > 0 and then deleting the EA, which corrupts the name
 list.

 (See the f_ea_value_crash test's FS image in e2fsprogs for an example.)

 Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Cc: stable@vger.kernel.org
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/xattr.c b/fs/ext4/xattr.c
index 9771dac..3eb2594 100644
--- a/fs/ext4/xattr.c
+++ b/fs/ext4/xattr.c
@@ -189,14 +189,28 @@ ext4_listxattr(struct dentry *dentry, char *buffer, size_t size)
 }
 
 static int
-ext4_xattr_check_names(struct ext4_xattr_entry *entry, void *end)
+ext4_xattr_check_names(struct ext4_xattr_entry *entry, void *end,
+         void *value_start)
 {
- while (!IS_LAST_ENTRY(entry)) {
-  struct ext4_xattr_entry *next = EXT4_XATTR_NEXT(entry);
+ struct ext4_xattr_entry *e = entry;
+
+ while (!IS_LAST_ENTRY(e)) {
+  struct ext4_xattr_entry *next = EXT4_XATTR_NEXT(e);
   if ((void *)next >= end)
    return -EIO;
-  entry = next;
+  e = next;
  }
+
+ while (!IS_LAST_ENTRY(entry)) {
+  if (entry->e_value_size != 0 &&
+      (value_start + le16_to_cpu(entry->e_value_offs) <
+       (void *)e + sizeof(__u32) ||
+       value_start + le16_to_cpu(entry->e_value_offs) +
+      le32_to_cpu(entry->e_value_size) > end))
+   return -EIO;
+  entry = EXT4_XATTR_NEXT(entry);
+ }
+
  return 0;
 }
 
@@ -213,7 +227,8 @@ ext4_xattr_check_block(struct inode *inode, struct buffer_head *bh)
   return -EIO;
  if (!ext4_xattr_block_csum_verify(inode, bh->b_blocknr, BHDR(bh)))
   return -EIO;
- error = ext4_xattr_check_names(BFIRST(bh), bh->b_data + bh->b_size);
+ error = ext4_xattr_check_names(BFIRST(bh), bh->b_data + bh->b_size,
+           bh->b_data);
  if (!error)
   set_buffer_verified(bh);
  return error;
@@ -329,7 +344,7 @@ ext4_xattr_ibody_get(struct inode *inode, int name_index, const char *name,
  header = IHDR(inode, raw_inode);
  entry = IFIRST(header);
  end = (void *)raw_inode + EXT4_SB(inode->i_sb)->s_inode_size;
- error = ext4_xattr_check_names(entry, end);
+ error = ext4_xattr_check_names(entry, end, entry);
  if (error)
   goto cleanup;
  error = ext4_xattr_find_entry(&entry, name_index, name,
@@ -460,7 +475,7 @@ ext4_xattr_ibody_list(struct dentry *dentry, char *buffer, size_t buffer_size)
  raw_inode = ext4_raw_inode(&iloc);
  header = IHDR(inode, raw_inode);
  end = (void *)raw_inode + EXT4_SB(inode->i_sb)->s_inode_size;
- error = ext4_xattr_check_names(IFIRST(header), end);
+ error = ext4_xattr_check_names(IFIRST(header), end, IFIRST(header));
  if (error)
   goto cleanup;
  error = ext4_xattr_list_entries(dentry, IFIRST(header),
@@ -980,7 +995,8 @@ int ext4_xattr_ibody_find(struct inode *inode, struct ext4_xattr_info *i,
  is->s.here = is->s.first;
  is->s.end = (void *)raw_inode + EXT4_SB(inode->i_sb)->s_inode_size;
  if (ext4_test_inode_state(inode, EXT4_STATE_XATTR)) {
-  error = ext4_xattr_check_names(IFIRST(header), is->s.end);
+  error = ext4_xattr_check_names(IFIRST(header), is->s.end,
+            IFIRST(header));
   if (error)
    return error;
   /* Find the named attribute. */
-- 
1.7.1