From be824ff03780c9868d9a417d6438b38f8617de34 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Tue, 28 Jan 2014 09:47:24 -0500
Subject: [net] vxlan: convert to act as a pernet subsystem

Message-id: <b9c0978e58230af7a00ab78fe0bb58192bdb03fc.1390840390.git.dborkman@redhat.com>
Patchwork-id: 75434
O-Subject: [RHEL7 PATCH net v2 4/4] net: vxlan: convert to act as a pernet subsystem
Bugzilla: 1039587
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Thomas Graf <tgraf@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1039587
Upstream Status: 783c14633571462a5537ee628e1df1ecb715a3a1
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=6952127
Tested: verified on beaker

Upstream Commit:
commit 783c14633571462a5537ee628e1df1ecb715a3a1
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Wed Jan 22 21:07:53 2014 +0100

    net: vxlan: convert to act as a pernet subsystem

    As per suggestion from Eric W. Biederman, vxlan should be using
    {un,}register_pernet_subsys() instead of {un,}register_pernet_device()
    to ensure the vxlan_net structure is initialized before and cleaned
    up after all network devices in a given network namespace i.e. when
    dealing with network notifiers. This is similarly handeled already in
    commit 91e2ff3528ac ("net: Teach vlans to cleanup as a pernet subsystem")
    and, thus, improves upon fd27e0d44a89 ("net: vxlan: do not use vxlan_net
    before checking event type"). Just as in 91e2ff3528ac, we do not need
    to explicitly handle deletion of vxlan devices as network namespace
    exit calls dellink on all remaining virtual devices, and
    rtnl_link_unregister() calls dellink on all outstanding devices in that
    network namespace, so we can entirely drop the pernet exit operation
    as well. Moreover, on vxlan module exit, rcu_barrier() is called by
    netns since commit 3a765edadb28 ("netns: Add an explicit rcu_barrier
    to unregister_pernet_{device|subsys}"), so this may be omitted. Tested
    with various scenarios and works well on my side.

    Suggested-by: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 57c5a65..b3bf445 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -2763,12 +2763,10 @@ static int vxlan_lowerdev_event(struct notifier_block *unused,
     unsigned long event, void *ptr)
 {
  struct net_device *dev = ptr;
- struct vxlan_net *vn;
+ struct vxlan_net *vn = net_generic(dev_net(dev), vxlan_net_id);
 
- if (event == NETDEV_UNREGISTER) {
-  vn = net_generic(dev_net(dev), vxlan_net_id);
+ if (event == NETDEV_UNREGISTER)
   vxlan_handle_lowerdev_unregister(vn, dev);
- }
 
  return NOTIFY_DONE;
 }
@@ -2791,22 +2789,8 @@ static __net_init int vxlan_init_net(struct net *net)
  return 0;
 }
 
-static __net_exit void vxlan_exit_net(struct net *net)
-{
- struct vxlan_net *vn = net_generic(net, vxlan_net_id);
- struct vxlan_dev *vxlan, *next;
- LIST_HEAD(list_kill);
-
- rtnl_lock();
- list_for_each_entry_safe(vxlan, next, &vn->vxlan_list, next)
-  vxlan_dellink(vxlan->dev, &list_kill);
- unregister_netdevice_many(&list_kill);
- rtnl_unlock();
-}
-
 static struct pernet_operations vxlan_net_ops = {
  .init = vxlan_init_net,
- .exit = vxlan_exit_net,
  .id   = &vxlan_net_id,
  .size = sizeof(struct vxlan_net),
 };
@@ -2821,7 +2805,7 @@ static int __init vxlan_init_module(void)
 
  get_random_bytes(&vxlan_salt, sizeof(vxlan_salt));
 
- rc = register_pernet_device(&vxlan_net_ops);
+ rc = register_pernet_subsys(&vxlan_net_ops);
  if (rc)
   goto out1;
 
@@ -2837,7 +2821,7 @@ static int __init vxlan_init_module(void)
 out3:
  unregister_netdevice_notifier(&vxlan_notifier_block);
 out2:
- unregister_pernet_device(&vxlan_net_ops);
+ unregister_pernet_subsys(&vxlan_net_ops);
 out1:
  destroy_workqueue(vxlan_wq);
  return rc;
@@ -2849,8 +2833,8 @@ static void __exit vxlan_cleanup_module(void)
  rtnl_link_unregister(&vxlan_link_ops);
  unregister_netdevice_notifier(&vxlan_notifier_block);
  destroy_workqueue(vxlan_wq);
- unregister_pernet_device(&vxlan_net_ops);
- rcu_barrier();
+ unregister_pernet_subsys(&vxlan_net_ops);
+ /* rcu_barrier() is called by netns */
 }
 module_exit(vxlan_cleanup_module);
 
-- 
1.7.1