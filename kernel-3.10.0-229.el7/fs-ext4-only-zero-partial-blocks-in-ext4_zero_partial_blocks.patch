From 56771dd4f99973a94026d7e5ee3bf4202a25f2af Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Tue, 21 Oct 2014 13:26:46 -0400
Subject: [fs] ext4: only zero partial blocks in ext4_zero_partial_blocks()

Message-id: <1413898007-15450-15-git-send-email-lczerner@redhat.com>
Patchwork-id: 97892
O-Subject: [RHEL 7.1 PATCH v2 14/15] ext4: only zero partial blocks in ext4_zero_partial_blocks()
Bugzilla: 1144326
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

BZ 1144326
https://bugzilla.redhat.com/show_bug.cgi?id=1144326

BREW 8095073
https://brewweb.devel.redhat.com/taskinfo?taskID=8095073

Upstream commit e1be3a928ee0b0b2a893695e6dd5c5dbe293af16

 Currently if we pass range into ext4_zero_partial_blocks() which covers
 entire block we would attempt to zero it even though we should only zero
 unaligned part of the block.

 Fix this by checking whether the range covers the whole block skip
 zeroing if so.

 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 3048a4d..a1b452f 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -3495,33 +3495,36 @@ int ext4_zero_partial_blocks(handle_t *handle, struct inode *inode,
 {
  struct super_block *sb = inode->i_sb;
  struct address_space *mapping = inode->i_mapping;
- unsigned partial = lstart & (sb->s_blocksize - 1);
+ unsigned partial_start, partial_end;
  ext4_fsblk_t start, end;
  loff_t byte_end = (lstart + length - 1);
  int err = 0;
 
+ partial_start = lstart & (sb->s_blocksize - 1);
+ partial_end = byte_end & (sb->s_blocksize - 1);
+
  start = lstart >> sb->s_blocksize_bits;
  end = byte_end >> sb->s_blocksize_bits;
 
  /* Handle partial zero within the single block */
- if (start == end) {
+ if (start == end &&
+     (partial_start || (partial_end != sb->s_blocksize - 1))) {
   err = ext4_block_zero_page_range(handle, mapping,
        lstart, length);
   return err;
  }
  /* Handle partial zero out on the start of the range */
- if (partial) {
+ if (partial_start) {
   err = ext4_block_zero_page_range(handle, mapping,
        lstart, sb->s_blocksize);
   if (err)
    return err;
  }
  /* Handle partial zero out on the end of the range */
- partial = byte_end & (sb->s_blocksize - 1);
- if (partial != sb->s_blocksize - 1)
+ if (partial_end != sb->s_blocksize - 1)
   err = ext4_block_zero_page_range(handle, mapping,
-       byte_end - partial,
-       partial + 1);
+       byte_end - partial_end,
+       partial_end + 1);
  return err;
 }
 
-- 
1.7.1