From d05dca07d26b64c2fa805f2fa6fcfad6e1d7ec51 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:02:36 -0400
Subject: [fs] btrfs: check for an extent_op on the locked ref

Message-id: <1407179109-13714-270-git-send-email-sandeen@redhat.com>
Patchwork-id: 87236
O-Subject: [RHEL7.1 PATCH 269/422] Btrfs: check for an extent_op on the locked ref
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Josef Bacik <jbacik@fb.com>

commit 573a075567f0174551e2fad2a3164afd2af788f2
Author: Josef Bacik <jbacik@fb.com>
Date:   Thu Mar 27 19:41:34 2014 -0400

    Btrfs: check for an extent_op on the locked ref

    We could have possibly added an extent_op to the locked_ref while we dropped
    locked_ref->lock, so check for this case as well and loop around.  Otherwise we
    could lose flag updates which would lead to extent tree corruption.  Thanks,

    cc: stable@vger.kernel.org
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/extent-tree.c b/fs/btrfs/extent-tree.c
index c6b6a6e..e09db2c 100644
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -2444,7 +2444,8 @@ static noinline int __btrfs_run_delayed_refs(struct btrfs_trans_handle *trans,
    spin_unlock(&locked_ref->lock);
    spin_lock(&delayed_refs->lock);
    spin_lock(&locked_ref->lock);
-   if (rb_first(&locked_ref->ref_root)) {
+   if (rb_first(&locked_ref->ref_root) ||
+       locked_ref->extent_op) {
     spin_unlock(&locked_ref->lock);
     spin_unlock(&delayed_refs->lock);
     continue;
-- 
1.7.1