From b8cd2d7dc73d51321ef2ccedb47ac98433409137 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Tue, 28 Jan 2014 09:47:21 -0500
Subject: [net] vxlan: when lower dev unregisters remove vxlan dev as well

Message-id: <a56805f93e8502435f21957895da5c49b4a8f185.1390840390.git.dborkman@redhat.com>
Patchwork-id: 75431
O-Subject: [RHEL7 PATCH net v2 1/4] net: vxlan: when lower dev unregisters remove vxlan dev as well
Bugzilla: 1039587
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Thomas Graf <tgraf@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1039587
Upstream Status: acaf4e70997ff5ef3588f5a8abb1c228de637bd2
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=6952127
Tested: verified on beaker

We don't have netdev_notifier_info_to_dev(), so take ptr directly.

Upstream Commit:
commit acaf4e70997ff5ef3588f5a8abb1c228de637bd2
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Mon Jan 13 18:41:19 2014 +0100

    net: vxlan: when lower dev unregisters remove vxlan dev as well

    We can create a vxlan device with an explicit underlying carrier.
    In that case, when the carrier link is being deleted from the
    system (e.g. due to module unload) we should also clean up all
    created vxlan devices on top of it since otherwise we're in an
    inconsistent state in vxlan device. In that case, the user needs
    to remove all such devices, while in case of other virtual devs
    that sit on top of physical ones, it is usually the case that
    these devices do unregister automatically as well and do not
    leave the burden on the user.

    This work is not necessary when vxlan device was not created with
    a real underlying device, as connections can resume in that case
    when driver is plugged again. But at least for the other cases,
    we should go ahead and do the cleanup on removal.

    We don't register the notifier during vxlan_newlink() here since
    I consider this event rather rare, and therefore we should not
    bloat vxlan's core structure unecessary. Also, we can simply make
    use of unregister_netdevice_many() to batch that. fdb is flushed
    upon ndo_stop().

    E.g. `ip -d link show vxlan13` after carrier removal before
    this patch:

    5: vxlan13: <BROADCAST,MULTICAST> mtu 1450 qdisc noop state DOWN mode DEFAULT group default
        link/ether 1e:47:da:6d:4d:99 brd ff:ff:ff:ff:ff:ff promiscuity 0
        vxlan id 13 group 239.0.0.10 dev 2 port 32768 61000 ageing 300
                                     ^^^^^
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 39432d8..5a4fb56 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -2737,6 +2737,44 @@ static struct rtnl_link_ops vxlan_link_ops __read_mostly = {
  .fill_info = vxlan_fill_info,
 };
 
+static void vxlan_handle_lowerdev_unregister(struct vxlan_net *vn,
+          struct net_device *dev)
+{
+ struct vxlan_dev *vxlan, *next;
+ LIST_HEAD(list_kill);
+
+ list_for_each_entry_safe(vxlan, next, &vn->vxlan_list, next) {
+  struct vxlan_rdst *dst = &vxlan->default_dst;
+
+  /* In case we created vxlan device with carrier
+   * and we loose the carrier due to module unload
+   * we also need to remove vxlan device. In other
+   * cases, it's not necessary and remote_ifindex
+   * is 0 here, so no matches.
+   */
+  if (dst->remote_ifindex == dev->ifindex)
+   vxlan_dellink(vxlan->dev, &list_kill);
+ }
+
+ unregister_netdevice_many(&list_kill);
+}
+
+static int vxlan_lowerdev_event(struct notifier_block *unused,
+    unsigned long event, void *ptr)
+{
+ struct net_device *dev = ptr;
+ struct vxlan_net *vn = net_generic(dev_net(dev), vxlan_net_id);
+
+ if (event == NETDEV_UNREGISTER)
+  vxlan_handle_lowerdev_unregister(vn, dev);
+
+ return NOTIFY_DONE;
+}
+
+static struct notifier_block vxlan_notifier_block __read_mostly = {
+ .notifier_call = vxlan_lowerdev_event,
+};
+
 static __net_init int vxlan_init_net(struct net *net)
 {
  struct vxlan_net *vn = net_generic(net, vxlan_net_id);
@@ -2785,12 +2823,17 @@ static int __init vxlan_init_module(void)
  if (rc)
   goto out1;
 
- rc = rtnl_link_register(&vxlan_link_ops);
+ rc = register_netdevice_notifier(&vxlan_notifier_block);
  if (rc)
   goto out2;
 
- return 0;
+ rc = rtnl_link_register(&vxlan_link_ops);
+ if (rc)
+  goto out3;
 
+ return 0;
+out3:
+ unregister_netdevice_notifier(&vxlan_notifier_block);
 out2:
  unregister_pernet_device(&vxlan_net_ops);
 out1:
@@ -2802,6 +2845,7 @@ late_initcall(vxlan_init_module);
 static void __exit vxlan_cleanup_module(void)
 {
  rtnl_link_unregister(&vxlan_link_ops);
+ unregister_netdevice_notifier(&vxlan_notifier_block);
  destroy_workqueue(vxlan_wq);
  unregister_pernet_device(&vxlan_net_ops);
  rcu_barrier();
-- 
1.7.1