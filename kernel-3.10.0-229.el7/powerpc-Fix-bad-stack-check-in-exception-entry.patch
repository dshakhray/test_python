From 78793894c3bb3793a1f9c367cda026f9ceda7d0d Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:07:46 -0400
Subject: [powerpc] Fix bad stack check in exception entry

Message-id: <1410545655-205645-238-git-send-email-dzickus@redhat.com>
Patchwork-id: 94208
O-Subject: [RHEL7 PATCH 237/626] powerpc: Fix bad stack check in exception entry
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 90ff5d688e61f49f23545ffab6228bd7e87e6dc7
Author: Michael Neuling <mikey@neuling.org>
Date:   Mon Dec 16 15:12:43 2013 +1100

    powerpc: Fix bad stack check in exception entry

    In EXCEPTION_PROLOG_COMMON() we check to see if the stack pointer (r1)
    is valid when coming from the kernel.  If it's not valid, we die but
    with a nice oops message.

    Currently we allocate a stack frame (subtract INT_FRAME_SIZE) before we
    check to see if the stack pointer is negative.  Unfortunately, this
    won't detect a bad stack where r1 is less than INT_FRAME_SIZE.

    This patch fixes the check to compare the modified r1 with
    -INT_FRAME_SIZE.  With this, bad kernel stack pointers (including NULL
    pointers) are correctly detected again.

    Kudos to Paulus for finding this.

    Signed-off-by: Michael Neuling <mikey@neuling.org>
    cc: stable@vger.kernel.org
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/exception-64s.h b/arch/powerpc/include/asm/exception-64s.h
index ff4e2e8..6683061 100644
--- a/arch/powerpc/include/asm/exception-64s.h
+++ b/arch/powerpc/include/asm/exception-64s.h
@@ -284,7 +284,7 @@ do_kvm_##n:        \
  subi r1,r1,INT_FRAME_SIZE; /* alloc frame on kernel stack */ \
  beq- 1f;          \
  ld r1,PACAKSAVE(r13); /* kernel stack to use  */ \
-1: cmpdi cr1,r1,0;  /* check if r1 is in userspace */ \
+1: cmpdi cr1,r1,-INT_FRAME_SIZE; /* check if r1 is in userspace */ \
  blt+ cr1,3f;   /* abort if it is  */ \
  li r1,(n);   /* will be reloaded later */ \
  sth r1,PACA_TRAP_SAVE(r13);        \
-- 
1.7.1