From ec6c409114f494c2dde49dd62636f64590334d72 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Tue, 16 Sep 2014 16:30:09 -0400
Subject: [fs] quota: simplify remove_inode_dquot_ref()

Message-id: <1410885010-4200-3-git-send-email-lczerner@redhat.com>
Patchwork-id: 95090
O-Subject: [RHEL 7.1 PATCH 3/4] quota: simplify remove_inode_dquot_ref()
Bugzilla: 1053111
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Niu Yawei <yawei.niu@gmail.com>

BZ 1053111
https://bugzilla.redhat.com/show_bug.cgi?id=1053111

BREW 7965550
https://brewweb.devel.redhat.com/taskinfo?taskID=7965550

Upstream commit 9eb6463f31cf720deaf0e810cacc403d7720b10c

 Simplify the remove_inode_dquot_ref() to make it more obvious
 that now we keep one reference for each dquot from inodes.

 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: Niu Yawei <yawei.niu@intel.com>
 Signed-off-by: Jan Kara <jack@suse.cz>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/quota/dquot.c b/fs/quota/dquot.c
index 5601647..24332f7 100644
--- a/fs/quota/dquot.c
+++ b/fs/quota/dquot.c
@@ -731,7 +731,6 @@ static struct shrinker dqcache_shrinker = {
 
 /*
  * Put reference to dquot
- * NOTE: If you change this function please check whether dqput_blocks() works right...
  */
 void dqput(struct dquot *dquot)
 {
@@ -961,46 +960,34 @@ static void add_dquot_ref(struct super_block *sb, int type)
 }
 
 /*
- * Return 0 if dqput() won't block.
- * (note that 1 doesn't necessarily mean blocking)
- */
-static inline int dqput_blocks(struct dquot *dquot)
-{
- if (atomic_read(&dquot->dq_count) <= 1)
-  return 1;
- return 0;
-}
-
-/*
  * Remove references to dquots from inode and add dquot to list for freeing
  * if we have the last reference to dquot
  * We can't race with anybody because we hold dqptr_sem for writing...
  */
-static int remove_inode_dquot_ref(struct inode *inode, int type,
-      struct list_head *tofree_head)
+static void remove_inode_dquot_ref(struct inode *inode, int type,
+       struct list_head *tofree_head)
 {
  struct dquot *dquot = inode->i_dquot[type];
 
  inode->i_dquot[type] = NULL;
- if (dquot) {
-  if (dqput_blocks(dquot)) {
-#ifdef CONFIG_QUOTA_DEBUG
-   if (atomic_read(&dquot->dq_count) != 1)
-    quota_error(inode->i_sb, "Adding dquot with "
-         "dq_count %d to dispose list",
-         atomic_read(&dquot->dq_count));
-#endif
-   spin_lock(&dq_list_lock);
-   /* As dquot must have currently users it can't be on
-    * the free list... */
-   list_add(&dquot->dq_free, tofree_head);
-   spin_unlock(&dq_list_lock);
-   return 1;
-  }
-  else
-   dqput(dquot);   /* We have guaranteed we won't block */
+ if (!dquot)
+  return;
+
+ if (list_empty(&dquot->dq_free)) {
+  /*
+   * The inode still has reference to dquot so it can't be in the
+   * free list
+   */
+  spin_lock(&dq_list_lock);
+  list_add(&dquot->dq_free, tofree_head);
+  spin_unlock(&dq_list_lock);
+ } else {
+  /*
+   * Dquot is already in a list to put so we won't drop the last
+   * reference here.
+   */
+  dqput(dquot);
  }
- return 0;
 }
 
 /*
-- 
1.7.1