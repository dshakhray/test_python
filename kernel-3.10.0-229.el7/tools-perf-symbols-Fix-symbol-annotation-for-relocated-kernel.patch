From 69230f65a90a2dd3317c63e13e43d9154ab6fa8c Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:53:07 -0400
Subject: [tools] perf/symbols: Fix symbol annotation for relocated kernel

Message-id: <1408953210-26343-300-git-send-email-jolsa@redhat.com>
Patchwork-id: 89006
O-Subject: [PATCH RHEL7.1 BZ1133083 299/322] perf symbols: Fix symbol annotation for relocated kernel
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 9176753d1ed56951a6ee2a0f0a3f367904e35567
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Wed Jan 29 16:14:36 2014 +0200

description
===========
Kernel maps map memory addresses to file offsets.

For symbol annotation, objdump needs the object VMA addresses.  For an
unrelocated kernel, that is the same as the memory address.

The addresses passed to objdump for symbol annotation did not take into
account kernel relocation.

This patch fixes that.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/map.c b/tools/perf/util/map.c
index 3b97513..39cd2d0 100644
--- a/tools/perf/util/map.c
+++ b/tools/perf/util/map.c
@@ -39,6 +39,7 @@ void map__init(struct map *map, enum map_type type,
  map->start    = start;
  map->end      = end;
  map->pgoff    = pgoff;
+ map->reloc    = 0;
  map->dso      = dso;
  map->map_ip   = map__map_ip;
  map->unmap_ip = map__unmap_ip;
@@ -288,7 +289,7 @@ u64 map__rip_2objdump(struct map *map, u64 rip)
  if (map->dso->rel)
   return rip - map->pgoff;
 
- return map->unmap_ip(map, rip);
+ return map->unmap_ip(map, rip) - map->reloc;
 }
 
 /**
@@ -311,7 +312,7 @@ u64 map__objdump_2mem(struct map *map, u64 ip)
  if (map->dso->rel)
   return map->unmap_ip(map, ip + map->pgoff);
 
- return ip;
+ return ip + map->reloc;
 }
 
 void map_groups__init(struct map_groups *mg)
diff --git a/tools/perf/util/map.h b/tools/perf/util/map.h
index 18068c6..257e513 100644
--- a/tools/perf/util/map.h
+++ b/tools/perf/util/map.h
@@ -36,6 +36,7 @@ struct map {
  bool   erange_warned;
  u32   priv;
  u64   pgoff;
+ u64   reloc;
  u32   maj, min; /* only valid for MMAP2 record */
  u64   ino;      /* only valid for MMAP2 record */
  u64   ino_generation;/* only valid for MMAP2 record */
diff --git a/tools/perf/util/symbol-elf.c b/tools/perf/util/symbol-elf.c
index 8f12f0f..3e9f336 100644
--- a/tools/perf/util/symbol-elf.c
+++ b/tools/perf/util/symbol-elf.c
@@ -751,6 +751,8 @@ int dso__load_sym(struct dso *dso, struct map *map,
    if (strcmp(elf_name, kmap->ref_reloc_sym->name))
     continue;
    kmap->ref_reloc_sym->unrelocated_addr = sym.st_value;
+   map->reloc = kmap->ref_reloc_sym->addr -
+         kmap->ref_reloc_sym->unrelocated_addr;
    break;
   }
  }
-- 
1.7.1