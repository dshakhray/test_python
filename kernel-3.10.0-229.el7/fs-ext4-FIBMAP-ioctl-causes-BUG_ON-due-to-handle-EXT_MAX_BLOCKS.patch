From 2f184a34595af7aed5e02bb1d6cf41469088f5ce Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:56 -0400
Subject: [fs] ext4: FIBMAP ioctl causes BUG_ON due to handle EXT_MAX_BLOCKS

Message-id: <1414058125-4183-143-git-send-email-lczerner@redhat.com>
Patchwork-id: 98203
O-Subject: [RHEL 7.1 PATCH v2 142/171] ext4: FIBMAP ioctl causes BUG_ON due to handle EXT_MAX_BLOCKS
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Kazuya Mio <k-mio@sx.jp.nec.com>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 4adb6ab3e0fa71363a5ef229544b2d17de6600d7

 When we try to get 2^32-1 block of the file which has the extent
 (ee_block=2^32-2, ee_len=1) with FIBMAP ioctl, it causes BUG_ON
 in ext4_ext_put_gap_in_cache().

 To avoid the problem, ext4_map_blocks() needs to check the file logical block
 number. ext4_ext_put_gap_in_cache() called via ext4_map_blocks() cannot
 handle 2^32-1 because the maximum file logical block number is 2^32-2.

 Note that ext4_ind_map_blocks() returns -EIO when the block number is invalid.
 So ext4_map_blocks() should also return the same errno.

 Signed-off-by: Kazuya Mio <k-mio@sx.jp.nec.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Cc: stable@vger.kernel.org
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 3af198a..30abd84 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -520,6 +520,10 @@ int ext4_map_blocks(handle_t *handle, struct inode *inode,
  if (unlikely(map->m_len > INT_MAX))
   map->m_len = INT_MAX;
 
+ /* We can handle the block number less than EXT_MAX_BLOCKS */
+ if (unlikely(map->m_lblk >= EXT_MAX_BLOCKS))
+  return -EIO;
+
  /* Lookup extent status tree firstly */
  if (ext4_es_lookup_extent(inode, map->m_lblk, &es)) {
   ext4_es_lru_add(inode);
-- 
1.7.1