From 2b0c696a2ae3e248c7daf0c4751b1b56a7d4e94c Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:01:06 -0400
Subject: [fs] btrfs: add simple debugfs interface

Message-id: <1407179109-13714-180-git-send-email-sandeen@redhat.com>
Patchwork-id: 87099
O-Subject: [RHEL7.1 PATCH 179/422] btrfs: add simple debugfs interface
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: David Sterba <dsterba@suse.cz>

commit 1bae30982bc86ab66d61ccb6e22792593b45d44d
Author: David Sterba <dsterba@suse.cz>
Date:   Wed Feb 5 15:36:18 2014 +0100

    btrfs: add simple debugfs interface

    Help during debugging to export various interesting infromation and
    tunables without the need of extra mount options or ioctls.

    Usage:
    * declare your variable in sysfs.h, and include where you need it
    * define the variable in sysfs.c and make it visible via
      debugfs_create_TYPE

    Depends on CONFIG_DEBUG_FS.

    Signed-off-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/sysfs.c b/fs/btrfs/sysfs.c
index 865f4cf..c5eb214 100644
--- a/fs/btrfs/sysfs.c
+++ b/fs/btrfs/sysfs.c
@@ -24,6 +24,7 @@
 #include <linux/kobject.h>
 #include <linux/bug.h>
 #include <linux/genhd.h>
+#include <linux/debugfs.h>
 
 #include "ctree.h"
 #include "disk-io.h"
@@ -599,6 +600,12 @@ static int add_device_membership(struct btrfs_fs_info *fs_info)
 /* /sys/fs/btrfs/ entry */
 static struct kset *btrfs_kset;
 
+/* /sys/kernel/debug/btrfs */
+static struct dentry *btrfs_debugfs_root_dentry;
+
+/* Debugging tunables and exported data */
+u64 btrfs_debugfs_test;
+
 int btrfs_sysfs_add_one(struct btrfs_fs_info *fs_info)
 {
  int error;
@@ -642,27 +649,41 @@ failure:
  return error;
 }
 
+static int btrfs_init_debugfs(void)
+{
+#ifdef CONFIG_DEBUG_FS
+ btrfs_debugfs_root_dentry = debugfs_create_dir("btrfs", NULL);
+ if (!btrfs_debugfs_root_dentry)
+  return -ENOMEM;
+
+ debugfs_create_u64("test", S_IRUGO | S_IWUGO, btrfs_debugfs_root_dentry,
+   &btrfs_debugfs_test);
+#endif
+ return 0;
+}
+
 int btrfs_init_sysfs(void)
 {
  int ret;
+
  btrfs_kset = kset_create_and_add("btrfs", NULL, fs_kobj);
  if (!btrfs_kset)
   return -ENOMEM;
 
- init_feature_attrs();
+ ret = btrfs_init_debugfs();
+ if (ret)
+  return ret;
 
+ init_feature_attrs();
  ret = sysfs_create_group(&btrfs_kset->kobj, &btrfs_feature_attr_group);
- if (ret) {
-  kset_unregister(btrfs_kset);
-  return ret;
- }
 
- return 0;
+ return ret;
 }
 
 void btrfs_exit_sysfs(void)
 {
  sysfs_remove_group(&btrfs_kset->kobj, &btrfs_feature_attr_group);
  kset_unregister(btrfs_kset);
+ debugfs_remove_recursive(btrfs_debugfs_root_dentry);
 }
 
diff --git a/fs/btrfs/sysfs.h b/fs/btrfs/sysfs.h
index f3cea37..9ab5763 100644
--- a/fs/btrfs/sysfs.h
+++ b/fs/btrfs/sysfs.h
@@ -1,6 +1,11 @@
 #ifndef _BTRFS_SYSFS_H_
 #define _BTRFS_SYSFS_H_
 
+/*
+ * Data exported through sysfs
+ */
+extern u64 btrfs_debugfs_test;
+
 enum btrfs_feature_set {
  FEAT_COMPAT,
  FEAT_COMPAT_RO,
-- 
1.7.1