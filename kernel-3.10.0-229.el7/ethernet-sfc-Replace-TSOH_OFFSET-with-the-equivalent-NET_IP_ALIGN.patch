From 612d7e2620742a149263770645f1758e178dd87c Mon Sep 17 00:00:00 2001
From: Nikolay Aleksandrov <nikolay@redhat.com>
Date: Fri, 5 Sep 2014 11:03:45 -0400
Subject: [ethernet] sfc: Replace TSOH_OFFSET with the equivalent NET_IP_ALIGN

Message-id: <1409915048-26438-10-git-send-email-nikolay@redhat.com>
Patchwork-id: 91404
O-Subject: [RHEL7.1 PATCH BZ 1110888 09/32] sfc: Replace TSOH_OFFSET with the equivalent NET_IP_ALIGN
Bugzilla: 1110888
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ben Hutchings <bhutchings@solarflare.com>

If CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS is defined then NET_IP_ALIGN
will be defined as 0, so this macro is redundant.

Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>
Signed-off-by: Shradha Shah <sshah@solarflare.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0bdadad16608a69defe0b64745a0a6a2edc8e012)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/sfc/tx.c b/drivers/net/ethernet/sfc/tx.c
index d79c842..126e4ea 100644
--- a/drivers/net/ethernet/sfc/tx.c
+++ b/drivers/net/ethernet/sfc/tx.c
@@ -799,15 +799,6 @@ void efx_remove_tx_queue(struct efx_tx_queue *tx_queue)
  * Requires TX checksum offload support.
  */
 
-/* Number of bytes inserted at the start of a TSO header buffer,
- * similar to NET_IP_ALIGN.
- */
-#ifdef CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS
-#define TSOH_OFFSET 0
-#else
-#define TSOH_OFFSET NET_IP_ALIGN
-#endif
-
 #define PTR_DIFF(p1, p2)  ((u8 *)(p1) - (u8 *)(p2))
 
 /**
@@ -894,13 +885,13 @@ static u8 *efx_tsoh_get_buffer(struct efx_tx_queue *tx_queue,
  EFX_BUG_ON_PARANOID(buffer->flags);
  EFX_BUG_ON_PARANOID(buffer->unmap_len);
 
- if (likely(len <= TSOH_STD_SIZE - TSOH_OFFSET)) {
+ if (likely(len <= TSOH_STD_SIZE - NET_IP_ALIGN)) {
   unsigned index =
    (tx_queue->insert_count & tx_queue->ptr_mask) / 2;
   struct efx_buffer *page_buf =
    &tx_queue->tsoh_page[index / TSOH_PER_PAGE];
   unsigned offset =
-   TSOH_STD_SIZE * (index % TSOH_PER_PAGE) + TSOH_OFFSET;
+   TSOH_STD_SIZE * (index % TSOH_PER_PAGE) + NET_IP_ALIGN;
 
   if (unlikely(!page_buf->addr) &&
       efx_nic_alloc_buffer(tx_queue->efx, page_buf, PAGE_SIZE,
@@ -913,10 +904,10 @@ static u8 *efx_tsoh_get_buffer(struct efx_tx_queue *tx_queue,
  } else {
   tx_queue->tso_long_headers++;
 
-  buffer->heap_buf = kmalloc(TSOH_OFFSET + len, GFP_ATOMIC);
+  buffer->heap_buf = kmalloc(NET_IP_ALIGN + len, GFP_ATOMIC);
   if (unlikely(!buffer->heap_buf))
    return NULL;
-  result = (u8 *)buffer->heap_buf + TSOH_OFFSET;
+  result = (u8 *)buffer->heap_buf + NET_IP_ALIGN;
   buffer->flags = EFX_TX_BUF_CONT | EFX_TX_BUF_HEAP;
  }
 
-- 
1.7.1