From 6b503d9eeab3ac4fc4909d135b542ea6f9be976c Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:00:14 -0400
Subject: [fs] btrfs: call permission checks earlier in ioctls and return EPERM

Message-id: <1407179109-13714-128-git-send-email-sandeen@redhat.com>
Patchwork-id: 87071
O-Subject: [RHEL7.1 PATCH 127/422] btrfs: call permission checks earlier in ioctls and return EPERM
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: David Sterba <dsterba@suse.cz>

commit bd60ea0fe947029df4b7b7aa9d6557baf2a5a138
Author: David Sterba <dsterba@suse.cz>
Date:   Thu Jan 16 15:50:22 2014 +0100

    btrfs: call permission checks earlier in ioctls and return EPERM

    The owner and capability checks in IOC_SUBVOL_SETFLAGS and
    SET_RECEIVED_SUBVOL should be called before any other checks are done.

    Also unify the error code to EPERM.

    Signed-off-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index f0f7f24..34bf84a 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -192,6 +192,9 @@ static int btrfs_ioctl_setflags(struct file *file, void __user *arg)
  unsigned int i_oldflags;
  umode_t mode;
 
+ if (!inode_owner_or_capable(inode))
+  return -EPERM;
+
  if (btrfs_root_readonly(root))
   return -EROFS;
 
@@ -202,9 +205,6 @@ static int btrfs_ioctl_setflags(struct file *file, void __user *arg)
  if (ret)
   return ret;
 
- if (!inode_owner_or_capable(inode))
-  return -EACCES;
-
  ret = mnt_want_write_file(file);
  if (ret)
   return ret;
@@ -1697,6 +1697,9 @@ static noinline int btrfs_ioctl_subvol_setflags(struct file *file,
  u64 flags;
  int ret = 0;
 
+ if (!inode_owner_or_capable(inode))
+  return -EPERM;
+
  ret = mnt_want_write_file(file);
  if (ret)
   goto out;
@@ -1721,11 +1724,6 @@ static noinline int btrfs_ioctl_subvol_setflags(struct file *file,
   goto out_drop_write;
  }
 
- if (!inode_owner_or_capable(inode)) {
-  ret = -EACCES;
-  goto out_drop_write;
- }
-
  down_write(&root->fs_info->subvol_sem);
 
  /* nothing to do */
@@ -4381,6 +4379,9 @@ static long btrfs_ioctl_set_received_subvol(struct file *file,
  int ret = 0;
  int received_uuid_changed;
 
+ if (!inode_owner_or_capable(inode))
+  return -EPERM;
+
  ret = mnt_want_write_file(file);
  if (ret < 0)
   return ret;
@@ -4397,11 +4398,6 @@ static long btrfs_ioctl_set_received_subvol(struct file *file,
   goto out;
  }
 
- if (!inode_owner_or_capable(inode)) {
-  ret = -EACCES;
-  goto out;
- }
-
  sa = memdup_user(arg, sizeof(*sa));
  if (IS_ERR(sa)) {
   ret = PTR_ERR(sa);
-- 
1.7.1