From 54b3a5147038cdc3ba1d1ef04acdcd7197a151d6 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:08 -0400
Subject: [cpufreq] introduce cpufreq_generic_get() routine

Message-id: <1409235879-1283-95-git-send-email-prarit@redhat.com>
Patchwork-id: 89506
O-Subject: [RHEL7.1 PATCH BZ 1134639 094/185] cpufreq: introduce cpufreq_generic_get() routine
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 652ed95d5fa6074b3c4ea245deb0691f1acb6656
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Jan 9 20:38:43 2014 +0530

    cpufreq: introduce cpufreq_generic_get() routine

    CPUFreq drivers that use clock frameworks interface,i.e. clk_get_rate(),
    to get CPUs clk rate, have similar sort of code used in most of them.

    This patch adds a generic ->get() which will do the same thing for them.
    All those drivers are required to now is to set .get to cpufreq_generic_get()
    and set their clk pointer in policy->clk during ->init().

    Acked-by: Hans-Christian Egtvedt <egtvedt@samfundet.no>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 14fda85..fdc35bc 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -176,6 +176,20 @@ int cpufreq_generic_init(struct cpufreq_policy *policy,
 }
 EXPORT_SYMBOL_GPL(cpufreq_generic_init);
 
+unsigned int cpufreq_generic_get(unsigned int cpu)
+{
+ struct cpufreq_policy *policy = per_cpu(cpufreq_cpu_data, cpu);
+
+ if (!policy || IS_ERR(policy->clk)) {
+  pr_err("%s: No %s associated to cpu: %d\n", __func__,
+    policy ? "clk" : "policy", cpu);
+  return 0;
+ }
+
+ return clk_get_rate(policy->clk) / 1000;
+}
+EXPORT_SYMBOL_GPL(cpufreq_generic_get);
+
 struct cpufreq_policy *cpufreq_cpu_get(unsigned int cpu)
 {
  struct cpufreq_policy *policy = NULL;
@@ -1062,6 +1076,11 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   goto err_set_policy_cpu;
  }
 
+ write_lock_irqsave(&cpufreq_driver_lock, flags);
+ for_each_cpu(j, policy->cpus)
+  per_cpu(cpufreq_cpu_data, j) = policy;
+ write_unlock_irqrestore(&cpufreq_driver_lock, flags);
+
  if (cpufreq_driver->get) {
   policy->cur = cpufreq_driver->get(policy->cpu);
   if (!policy->cur) {
@@ -1136,11 +1155,6 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
  }
 #endif
 
- write_lock_irqsave(&cpufreq_driver_lock, flags);
- for_each_cpu(j, policy->cpus)
-  per_cpu(cpufreq_cpu_data, j) = policy;
- write_unlock_irqrestore(&cpufreq_driver_lock, flags);
-
  if (!frozen) {
   ret = cpufreq_add_dev_interface(policy, dev);
   if (ret)
@@ -1167,12 +1181,12 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
  return 0;
 
 err_out_unregister:
+err_get_freq:
  write_lock_irqsave(&cpufreq_driver_lock, flags);
  for_each_cpu(j, policy->cpus)
   per_cpu(cpufreq_cpu_data, j) = NULL;
  write_unlock_irqrestore(&cpufreq_driver_lock, flags);
 
-err_get_freq:
  if (cpufreq_driver->exit)
   cpufreq_driver->exit(policy);
 err_set_policy_cpu:
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index 73b6716..a24071a 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -11,6 +11,7 @@
 #ifndef _LINUX_CPUFREQ_H
 #define _LINUX_CPUFREQ_H
 
+#include <linux/clk.h>
 #include <linux/cpumask.h>
 #include <linux/completion.h>
 #include <linux/kobject.h>
@@ -96,6 +97,7 @@ struct cpufreq_policy {
  unsigned int  cpu;    /* cpu nr of CPU managing this policy */
  unsigned int  last_cpu; /* cpu nr of previous CPU that managed
         * this policy */
+ struct clk  *clk;
  struct cpufreq_cpuinfo cpuinfo;/* see above */
 
  unsigned int  min;    /* in kHz */
@@ -480,6 +482,7 @@ void cpufreq_frequency_table_put_attr(unsigned int cpu);
 int cpufreq_table_validate_and_show(struct cpufreq_policy *policy,
           struct cpufreq_frequency_table *table);
 
+unsigned int cpufreq_generic_get(unsigned int cpu);
 int cpufreq_generic_init(struct cpufreq_policy *policy,
   struct cpufreq_frequency_table *table,
   unsigned int transition_latency);
-- 
1.7.1