From 66598eb6833ef652943a8d73620fbd04e6b2dc54 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:23:46 -0400
Subject: [net] libceph: rename ceph_msg::front_max to front_alloc_len
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-120-git-send-email-sweil@redhat.com>
Patchwork-id: 89627
O-Subject: [PATCH 119/303] libceph: rename ceph_msg::front_max to front_alloc_len
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

Rename front_max field of struct ceph_msg to front_alloc_len to make
its purpose more clear.

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Sage Weil <sage@inktank.com>
(cherry picked from commit 3cea4c3071d4e55e9d7356efe9d0ebf92f0c2204)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/ceph/messenger.h b/include/linux/ceph/messenger.h
index c1d3f5a..861138f 100644
--- a/include/linux/ceph/messenger.h
+++ b/include/linux/ceph/messenger.h
@@ -157,7 +157,7 @@ struct ceph_msg {
  bool front_is_vmalloc;
  bool more_to_follow;
  bool needs_out_seq;
- int front_max;
+ int front_alloc_len;
  unsigned long ack_stamp;        /* tx: when we were acked */
 
  struct ceph_msgpool *pool;
diff --git a/net/ceph/messenger.c b/net/ceph/messenger.c
index 7b384cb..e17f2b8 100644
--- a/net/ceph/messenger.c
+++ b/net/ceph/messenger.c
@@ -3130,7 +3130,7 @@ struct ceph_msg *ceph_msg_new(int type, int front_len, gfp_t flags,
  INIT_LIST_HEAD(&m->data);
 
  /* front */
- m->front_max = front_len;
+ m->front_alloc_len = front_len;
  if (front_len) {
   if (front_len > PAGE_CACHE_SIZE) {
    m->front.iov_base = __vmalloc(front_len, flags,
@@ -3305,8 +3305,8 @@ EXPORT_SYMBOL(ceph_msg_last_put);
 
 void ceph_msg_dump(struct ceph_msg *msg)
 {
- pr_debug("msg_dump %p (front_max %d length %zd)\n", msg,
-   msg->front_max, msg->data_length);
+ pr_debug("msg_dump %p (front_alloc_len %d length %zd)\n", msg,
+   msg->front_alloc_len, msg->data_length);
  print_hex_dump(KERN_DEBUG, "header: ",
          DUMP_PREFIX_OFFSET, 16, 1,
          &msg->hdr, sizeof(msg->hdr), true);
diff --git a/net/ceph/mon_client.c b/net/ceph/mon_client.c
index 1fe25cd..2ac9ef3 100644
--- a/net/ceph/mon_client.c
+++ b/net/ceph/mon_client.c
@@ -152,7 +152,7 @@ static int __open_session(struct ceph_mon_client *monc)
   /* initiatiate authentication handshake */
   ret = ceph_auth_build_hello(monc->auth,
          monc->m_auth->front.iov_base,
-         monc->m_auth->front_max);
+         monc->m_auth->front_alloc_len);
   __send_prepared_auth_request(monc, ret);
  } else {
   dout("open_session mon%d already open\n", monc->cur_mon);
@@ -196,7 +196,7 @@ static void __send_subscribe(struct ceph_mon_client *monc)
   int num;
 
   p = msg->front.iov_base;
-  end = p + msg->front_max;
+  end = p + msg->front_alloc_len;
 
   num = 1 + !!monc->want_next_osdmap + !!monc->want_mdsmap;
   ceph_encode_32(&p, num);
@@ -897,7 +897,7 @@ static void handle_auth_reply(struct ceph_mon_client *monc,
  ret = ceph_handle_auth_reply(monc->auth, msg->front.iov_base,
          msg->front.iov_len,
          monc->m_auth->front.iov_base,
-         monc->m_auth->front_max);
+         monc->m_auth->front_alloc_len);
  if (ret < 0) {
   monc->client->auth_err = ret;
   wake_up_all(&monc->client->auth_wq);
@@ -939,7 +939,7 @@ static int __validate_auth(struct ceph_mon_client *monc)
   return 0;
 
  ret = ceph_build_auth(monc->auth, monc->m_auth->front.iov_base,
-         monc->m_auth->front_max);
+         monc->m_auth->front_alloc_len);
  if (ret <= 0)
   return ret; /* either an error, or no need to authenticate */
  __send_prepared_auth_request(monc, ret);
-- 
1.7.1