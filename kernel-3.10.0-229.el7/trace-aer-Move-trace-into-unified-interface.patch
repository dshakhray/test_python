From 1bf65b196d900bff4597ff42b98ae547896f5697 Mon Sep 17 00:00:00 2001
From: Rui Wang <ruwang@redhat.com>
Date: Fri, 22 Aug 2014 03:52:02 -0400
Subject: [trace] aer: Move trace into unified interface

Message-id: <1408679528-32070-5-git-send-email-ruwang@redhat.com>
Patchwork-id: 88694
O-Subject: [PATCH RHEL7.1 BZ1085141 04/10] trace, AER: Move trace into unified interface
Bugzilla: 1085141
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: "Chen, Gong" <gong.chen@linux.intel.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1085141

Backport of:
Original commit: 0a2409aad38e97b1db55e6515b990be7b17060f6
Original Author: "Chen, Gong" <gong.chen@linux.intel.com>
Original Date: Wed, 11 Jun 2014 13:57:27 -0700

 AER uses a separate trace interface by now. To make it
 consistent, move it into unified RAS trace interface.

Signed-off-by: Chen, Gong <gong.chen@linux.intel.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/pcie/aer/Kconfig b/drivers/pci/pcie/aer/Kconfig
index 50e94e0..3894402 100644
--- a/drivers/pci/pcie/aer/Kconfig
+++ b/drivers/pci/pcie/aer/Kconfig
@@ -5,6 +5,7 @@
 config PCIEAER
  boolean "Root Port Advanced Error Reporting support"
  depends on PCIEPORTBUS
+ select RAS
  default y
  help
    This enables PCI Express Root Port Advanced Error Reporting
diff --git a/drivers/pci/pcie/aer/aerdrv_errprint.c b/drivers/pci/pcie/aer/aerdrv_errprint.c
index 34ff702..73e73b7 100644
--- a/drivers/pci/pcie/aer/aerdrv_errprint.c
+++ b/drivers/pci/pcie/aer/aerdrv_errprint.c
@@ -22,9 +22,7 @@
 #include <linux/cper.h>
 
 #include "aerdrv.h"
-
-#define CREATE_TRACE_POINTS
-#include <trace/events/ras.h>
+#include <ras/ras_event.h>
 
 #define AER_AGENT_RECEIVER  0
 #define AER_AGENT_REQUESTER  1
diff --git a/include/ras/ras_event.h b/include/ras/ras_event.h
index 21cdb0b..acbcbb8 100644
--- a/include/ras/ras_event.h
+++ b/include/ras/ras_event.h
@@ -8,6 +8,7 @@
 #include <linux/tracepoint.h>
 #include <linux/edac.h>
 #include <linux/ktime.h>
+#include <linux/aer.h>
 
 /*
  * Hardware Events Report
@@ -94,6 +95,69 @@ TRACE_EVENT(mc_event,
     __get_str(driver_detail))
 );
 
+/*
+ * PCIe AER Trace event
+ *
+ * These events are generated when hardware detects a corrected or
+ * uncorrected event on a PCIe device. The event report has
+ * the following structure:
+ *
+ * char * dev_name - The name of the slot where the device resides
+ *   ([domain:]bus:device.function).
+ * u32 status -  Either the correctable or uncorrectable register
+ *   indicating what error or errors have been seen
+ * u8 severity - error severity 0:NONFATAL 1:FATAL 2:CORRECTED
+ */
+
+#define aer_correctable_errors  \
+ {BIT(0), "Receiver Error"},  \
+ {BIT(6), "Bad TLP"},   \
+ {BIT(7), "Bad DLLP"},   \
+ {BIT(8), "RELAY_NUM Rollover"},  \
+ {BIT(12), "Replay Timer Timeout"}, \
+ {BIT(13), "Advisory Non-Fatal"}
+
+#define aer_uncorrectable_errors  \
+ {BIT(4), "Data Link Protocol"},  \
+ {BIT(12), "Poisoned TLP"},  \
+ {BIT(13), "Flow Control Protocol"}, \
+ {BIT(14), "Completion Timeout"},  \
+ {BIT(15), "Completer Abort"},  \
+ {BIT(16), "Unexpected Completion"}, \
+ {BIT(17), "Receiver Overflow"},  \
+ {BIT(18), "Malformed TLP"},  \
+ {BIT(19), "ECRC"},   \
+ {BIT(20), "Unsupported Request"}
+
+TRACE_EVENT(aer_event,
+ TP_PROTO(const char *dev_name,
+   const u32 status,
+   const u8 severity),
+
+ TP_ARGS(dev_name, status, severity),
+
+ TP_STRUCT__entry(
+  __string( dev_name, dev_name )
+  __field( u32,  status  )
+  __field( u8,  severity )
+ ),
+
+ TP_fast_assign(
+  __assign_str(dev_name, dev_name);
+  __entry->status  = status;
+  __entry->severity = severity;
+ ),
+
+ TP_printk("%s PCIe Bus Error: severity=%s, %s\n",
+  __get_str(dev_name),
+  __entry->severity == AER_CORRECTABLE ? "Corrected" :
+   __entry->severity == AER_FATAL ?
+   "Fatal" : "Uncorrected, non-fatal",
+  __entry->severity == AER_CORRECTABLE ?
+  __print_flags(__entry->status, "|", aer_correctable_errors) :
+  __print_flags(__entry->status, "|", aer_uncorrectable_errors))
+);
+
 #endif /* _TRACE_HW_EVENT_MC_H */
 
 /* This part must be outside protection */
diff --git a/include/trace/events/ras.h b/include/trace/events/ras.h
deleted file mode 100644
index 1c875ad..0000000
--- a/include/trace/events/ras.h
+++ /dev/null
@@ -1,77 +0,0 @@
-#undef TRACE_SYSTEM
-#define TRACE_SYSTEM ras
-
-#if !defined(_TRACE_AER_H) || defined(TRACE_HEADER_MULTI_READ)
-#define _TRACE_AER_H
-
-#include <linux/tracepoint.h>
-#include <linux/aer.h>
-
-
-/*
- * PCIe AER Trace event
- *
- * These events are generated when hardware detects a corrected or
- * uncorrected event on a PCIe device. The event report has
- * the following structure:
- *
- * char * dev_name - The name of the slot where the device resides
- *   ([domain:]bus:device.function).
- * u32 status -  Either the correctable or uncorrectable register
- *   indicating what error or errors have been seen
- * u8 severity - error severity 0:NONFATAL 1:FATAL 2:CORRECTED
- */
-
-#define aer_correctable_errors  \
- {BIT(0), "Receiver Error"},  \
- {BIT(6), "Bad TLP"},   \
- {BIT(7), "Bad DLLP"},   \
- {BIT(8), "RELAY_NUM Rollover"},  \
- {BIT(12), "Replay Timer Timeout"}, \
- {BIT(13), "Advisory Non-Fatal"}
-
-#define aer_uncorrectable_errors  \
- {BIT(4), "Data Link Protocol"},  \
- {BIT(12), "Poisoned TLP"},  \
- {BIT(13), "Flow Control Protocol"}, \
- {BIT(14), "Completion Timeout"},  \
- {BIT(15), "Completer Abort"},  \
- {BIT(16), "Unexpected Completion"}, \
- {BIT(17), "Receiver Overflow"},  \
- {BIT(18), "Malformed TLP"},  \
- {BIT(19), "ECRC"},   \
- {BIT(20), "Unsupported Request"}
-
-TRACE_EVENT(aer_event,
- TP_PROTO(const char *dev_name,
-   const u32 status,
-   const u8 severity),
-
- TP_ARGS(dev_name, status, severity),
-
- TP_STRUCT__entry(
-  __string( dev_name, dev_name )
-  __field( u32,  status  )
-  __field( u8,  severity )
- ),
-
- TP_fast_assign(
-  __assign_str(dev_name, dev_name);
-  __entry->status  = status;
-  __entry->severity = severity;
- ),
-
- TP_printk("%s PCIe Bus Error: severity=%s, %s\n",
-  __get_str(dev_name),
-  __entry->severity == AER_CORRECTABLE ? "Corrected" :
-   __entry->severity == AER_FATAL ?
-   "Fatal" : "Uncorrected, non-fatal",
-  __entry->severity == AER_CORRECTABLE ?
-  __print_flags(__entry->status, "|", aer_correctable_errors) :
-  __print_flags(__entry->status, "|", aer_uncorrectable_errors))
-);
-
-#endif /* _TRACE_AER_H */
-
-/* This part must be outside protection */
-#include <trace/define_trace.h>
-- 
1.7.1