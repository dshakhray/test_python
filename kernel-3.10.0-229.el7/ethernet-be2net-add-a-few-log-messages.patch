From 8ead1a23ce86e46b26be7c3996c02e5dde517746 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 16:14:30 -0400
Subject: [ethernet] be2net: add a few log messages

Message-id: <1410192881-30702-68-git-send-email-ivecera@redhat.com>
Patchwork-id: 92470
O-Subject: [RHEL7.1 PATCH 67/78] be2net: add a few log messages
Bugzilla: 1088575
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>

BZ: #1088575

Upstream commit(s):
commit acbafeb1e9daa18d601e9d91b68925e863cc4f6e
Author: Sathya Perla <sathya.perla@emulex.com>
Date:   Tue Sep 2 09:56:46 2014 +0530

    be2net: add a few log messages

    This patch adds the following log messages to help debugging
    failure cases:
    1) log FW version number: this is useful when driver initialization
    fails and the FW version number cannot be queried via ethtool
    2) per function resource limits for BEx chips: these values are
    currently being printed only for Skyhawk and Lancer
    3) PCI BAR mapping failure
    4) function_mode/caps queried from FW: this helps catch any FW bugs
    that could advertise wrong capabilities to the driver

    Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/emulex/benet/be_cmds.c b/drivers/net/ethernet/emulex/benet/be_cmds.c
index 4370ec1..ca9ec18 100644
--- a/drivers/net/ethernet/emulex/benet/be_cmds.c
+++ b/drivers/net/ethernet/emulex/benet/be_cmds.c
@@ -1771,6 +1771,7 @@ int be_cmd_get_fw_ver(struct be_adapter *adapter)
  status = be_mcc_notify_wait(adapter);
  if (!status) {
   struct be_cmd_resp_get_fw_version *resp = embedded_payload(wrb);
+
   strcpy(adapter->fw_ver, resp->firmware_version_string);
   strcpy(adapter->fw_on_flash, resp->fw_on_flash_version_string);
  }
@@ -2018,6 +2019,9 @@ int be_cmd_query_fw_cfg(struct be_adapter *adapter)
   adapter->function_mode = le32_to_cpu(resp->function_mode);
   adapter->function_caps = le32_to_cpu(resp->function_caps);
   adapter->asic_rev = le32_to_cpu(resp->asic_revision) & 0xFF;
+  dev_info(&adapter->pdev->dev,
+    "FW config: function_mode=0x%x, function_caps=0x%x\n",
+    adapter->function_mode, adapter->function_caps);
  }
 
  mutex_unlock(&adapter->mbox_lock);
diff --git a/drivers/net/ethernet/emulex/benet/be_main.c b/drivers/net/ethernet/emulex/benet/be_main.c
index aafdd96..022bae7 100644
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -3409,16 +3409,16 @@ static int be_get_resources(struct be_adapter *adapter)
   if (be_roce_supported(adapter))
    res.max_evt_qs /= 2;
   adapter->res = res;
-
-  dev_info(dev, "Max: txqs %d, rxqs %d, rss %d, eqs %d, vfs %d\n",
-    be_max_txqs(adapter), be_max_rxqs(adapter),
-    be_max_rss(adapter), be_max_eqs(adapter),
-    be_max_vfs(adapter));
-  dev_info(dev, "Max: uc-macs %d, mc-macs %d, vlans %d\n",
-    be_max_uc(adapter), be_max_mc(adapter),
-    be_max_vlans(adapter));
  }
 
+ dev_info(dev, "Max: txqs %d, rxqs %d, rss %d, eqs %d, vfs %d\n",
+   be_max_txqs(adapter), be_max_rxqs(adapter),
+   be_max_rss(adapter), be_max_eqs(adapter),
+   be_max_vfs(adapter));
+ dev_info(dev, "Max: uc-macs %d, mc-macs %d, vlans %d\n",
+   be_max_uc(adapter), be_max_mc(adapter),
+   be_max_vlans(adapter));
+
  return 0;
 }
 
@@ -3629,6 +3629,7 @@ static int be_setup(struct be_adapter *adapter)
   goto err;
 
  be_cmd_get_fw_ver(adapter);
+ dev_info(dev, "FW version is %s\n", adapter->fw_ver);
 
  if (BE2_chip(adapter) && fw_major_num(adapter->fw_ver) < 4) {
   dev_err(dev, "Firmware on card is old(%s), IRQs may not work.",
@@ -4502,6 +4503,7 @@ static int be_map_pci_bars(struct be_adapter *adapter)
  return 0;
 
 pci_map_err:
+ dev_err(&adapter->pdev->dev, "Error in mapping PCI BARs\n");
  be_unmap_pci_bars(adapter);
  return -ENOMEM;
 }
@@ -4818,6 +4820,8 @@ static int be_probe(struct pci_dev *pdev, const struct pci_device_id *pdev_id)
  struct net_device *netdev;
  char port_name;
 
+ dev_info(&pdev->dev, "%s version is %s\n", DRV_NAME, DRV_VER);
+
  status = pci_enable_device(pdev);
  if (status)
   goto do_none;
-- 
1.7.1