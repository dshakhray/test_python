From eda0d9680a09becb5d2da82f9925428f02e2c944 Mon Sep 17 00:00:00 2001
From: Jason Wang <jasowang@redhat.com>
Date: Fri, 24 Oct 2014 10:57:38 -0400
Subject: [virt] hyperv: Fix a bug in netvsc_send()

Message-id: <1414148260-34692-3-git-send-email-jasowang@redhat.com>
Patchwork-id: 98425
O-Subject: [RHEL7.1 PATCH 2/4] hyperv: Fix a bug in netvsc_send()
Bugzilla: 1156305
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Vitaly Kuznetsov <vkuznets@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>

From: KY Srinivasan <kys@microsoft.com>

Bugzilla: 1156305

After the packet is successfully sent, we should not touch the packet
as it may have been freed. This patch is based on the work done by
Long Li <longli@microsoft.com>.

David, please queue this up for stable.

Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
Reported-by: Sitsofe Wheeler <sitsofe@yahoo.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3a67c9ccad926a168d8b7891537a452018368a5b)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/hyperv/netvsc.c b/drivers/net/hyperv/netvsc.c
index cfdba85..c64fec7 100644
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@ -718,6 +718,7 @@ int netvsc_send(struct hv_device *device,
  unsigned int section_index = NETVSC_INVALID_INDEX;
  u32 msg_size = 0;
  struct sk_buff *skb;
+ u16 q_idx = packet->q_idx;
 
 
  net_device = get_outbound_net_device(device);
@@ -782,24 +783,24 @@ int netvsc_send(struct hv_device *device,
 
  if (ret == 0) {
   atomic_inc(&net_device->num_outstanding_sends);
-  atomic_inc(&net_device->queue_sends[packet->q_idx]);
+  atomic_inc(&net_device->queue_sends[q_idx]);
 
   if (hv_ringbuf_avail_percent(&out_channel->outbound) <
    RING_AVAIL_PERCENT_LOWATER) {
    netif_tx_stop_queue(netdev_get_tx_queue(
-         ndev, packet->q_idx));
+         ndev, q_idx));
 
    if (atomic_read(&net_device->
-    queue_sends[packet->q_idx]) < 1)
+    queue_sends[q_idx]) < 1)
     netif_tx_wake_queue(netdev_get_tx_queue(
-          ndev, packet->q_idx));
+          ndev, q_idx));
   }
  } else if (ret == -EAGAIN) {
   netif_tx_stop_queue(netdev_get_tx_queue(
-        ndev, packet->q_idx));
-  if (atomic_read(&net_device->queue_sends[packet->q_idx]) < 1) {
+        ndev, q_idx));
+  if (atomic_read(&net_device->queue_sends[q_idx]) < 1) {
    netif_tx_wake_queue(netdev_get_tx_queue(
-         ndev, packet->q_idx));
+         ndev, q_idx));
    ret = -ENOSPC;
   }
  } else {
-- 
1.7.1