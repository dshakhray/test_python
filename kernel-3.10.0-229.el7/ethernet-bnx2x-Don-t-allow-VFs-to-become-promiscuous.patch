From 1b31f1656babdaba4e0f772bdc642c8146bab33a Mon Sep 17 00:00:00 2001
From: Michal Schmidt <mschmidt@redhat.com>
Date: Fri, 5 Sep 2014 19:49:31 -0400
Subject: [ethernet] bnx2x: Don't allow VFs to become promiscuous

Message-id: <1409946615-5862-27-git-send-email-mschmidt@redhat.com>
Patchwork-id: 91570
O-Subject: [RHEL7.1 PATCH 26/70] bnx2x: Don't allow VFs to become promiscuous
Bugzilla: 1089402
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1089402

Upstream commit:
commit 16bd41dda9c95c813f7e24b3b7300614a156b2d8
Author: Yuval Mintz <Yuval.Mintz@qlogic.com>
Date:   Sun Mar 23 18:12:27 2014 +0200

    bnx2x: Don't allow VFs to become promiscuous

    Currently, if a VF's Rx Mode will be configured to support promiscuous mode
    the PF will comply, causing the VF to actually become promiscuous.
    This will enable the VF to see all unicast traffic which might be intended for
    other VMs, which we believe should not be possible.

    This patch will cause the hypervisor to ignore the VF's request for changes in
    its Rx mode (other than disabling it), preventing it from becoming promiscuous.

    Reported-by: Yoann Juet <yoann.juet@univ-nantes.fr>
    Signed-off-by: Yuval Mintz <Yuval.Mintz@qlogic.com>
    Signed-off-by: Ariel Elior <Ariel.Elior@qlogic.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
index f67de6c..0c067e8 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
@@ -896,29 +896,16 @@ int bnx2x_vfpf_storm_rx_mode(struct bnx2x *bp)
 
  DP(NETIF_MSG_IFUP, "Rx mode is %d\n", mode);
 
- switch (mode) {
- case BNX2X_RX_MODE_NONE: /* no Rx */
+ /* Ignore everything accept MODE_NONE */
+ if (mode  == BNX2X_RX_MODE_NONE) {
   req->rx_mask = VFPF_RX_MASK_ACCEPT_NONE;
-  break;
- case BNX2X_RX_MODE_NORMAL:
+ } else {
+  /* Current PF driver will not look at the specific flags,
+   * but they are required when working with older drivers on hv.
+   */
   req->rx_mask = VFPF_RX_MASK_ACCEPT_MATCHED_MULTICAST;
   req->rx_mask |= VFPF_RX_MASK_ACCEPT_MATCHED_UNICAST;
   req->rx_mask |= VFPF_RX_MASK_ACCEPT_BROADCAST;
-  break;
- case BNX2X_RX_MODE_ALLMULTI:
-  req->rx_mask = VFPF_RX_MASK_ACCEPT_ALL_MULTICAST;
-  req->rx_mask |= VFPF_RX_MASK_ACCEPT_MATCHED_UNICAST;
-  req->rx_mask |= VFPF_RX_MASK_ACCEPT_BROADCAST;
-  break;
- case BNX2X_RX_MODE_PROMISC:
-  req->rx_mask = VFPF_RX_MASK_ACCEPT_ALL_UNICAST;
-  req->rx_mask |= VFPF_RX_MASK_ACCEPT_ALL_MULTICAST;
-  req->rx_mask |= VFPF_RX_MASK_ACCEPT_BROADCAST;
-  break;
- default:
-  BNX2X_ERR("BAD rx mode (%d)\n", mode);
-  rc = -EINVAL;
-  goto out;
  }
 
  req->flags |= VFPF_SET_Q_FILTERS_RX_MASK_CHANGED;
@@ -939,7 +926,7 @@ int bnx2x_vfpf_storm_rx_mode(struct bnx2x *bp)
   BNX2X_ERR("Set Rx mode failed: %d\n", resp->hdr.status);
   rc = -EINVAL;
  }
-out:
+
  bnx2x_vfpf_finalize(bp, &req->first_tlv);
 
  return rc;
@@ -1571,21 +1558,12 @@ static int bnx2x_vf_mbx_qfilters(struct bnx2x *bp, struct bnx2x_virtf *vf)
   struct pf_vf_bulletin_content *bulletin =
      BP_VF_BULLETIN(bp, vf->index);
 
-  /* covert VF-PF if mask to bnx2x accept flags */
-  if (msg->rx_mask & VFPF_RX_MASK_ACCEPT_MATCHED_UNICAST)
+  /* Ignore VF requested mode; instead set a regular mode */
+  if (msg->rx_mask !=  VFPF_RX_MASK_ACCEPT_NONE) {
    __set_bit(BNX2X_ACCEPT_UNICAST, &accept);
-
-  if (msg->rx_mask & VFPF_RX_MASK_ACCEPT_MATCHED_MULTICAST)
    __set_bit(BNX2X_ACCEPT_MULTICAST, &accept);
-
-  if (msg->rx_mask & VFPF_RX_MASK_ACCEPT_ALL_UNICAST)
-   __set_bit(BNX2X_ACCEPT_ALL_UNICAST, &accept);
-
-  if (msg->rx_mask & VFPF_RX_MASK_ACCEPT_ALL_MULTICAST)
-   __set_bit(BNX2X_ACCEPT_ALL_MULTICAST, &accept);
-
-  if (msg->rx_mask & VFPF_RX_MASK_ACCEPT_BROADCAST)
    __set_bit(BNX2X_ACCEPT_BROADCAST, &accept);
+  }
 
   /* A packet arriving the vf's mac should be accepted
    * with any vlan, unless a vlan has already been
-- 
1.7.1