From e3abbe57c08f6e912d5579873dcbcdc43f58c83c Mon Sep 17 00:00:00 2001
From: Nikolay Aleksandrov <nikolay@redhat.com>
Date: Fri, 5 Sep 2014 11:04:07 -0400
Subject: [ethernet] sfc: Use __iowrite64_copy instead of a slightly different local function

Message-id: <1409915048-26438-32-git-send-email-nikolay@redhat.com>
Patchwork-id: 91424
O-Subject: [RHEL7.1 PATCH BZ 1110888 31/32] sfc: Use __iowrite64_copy instead of a slightly different local function
Bugzilla: 1110888
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ben Hutchings <ben@decadent.org.uk>

__iowrite64_copy() isn't quite the same as efx_memcpy_64(), but
it looks close enough:

- The length is in units of qwords not bytes
- It never byte-swaps, but that doesn't make a difference now as PIO
  is only enabled for x86_64
- It doesn't include any memory barriers, but that's OK as there is a
  barrier just before pushing the doorbell
- mlx4_en uses it for the same purpose

Compile-tested only.

Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
Acked-by: Edward Cree <ecree@solarflare.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4984c23735132790e8f2dfdd35849dba3bd7264f)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/sfc/tx.c b/drivers/net/ethernet/sfc/tx.c
index 283e5f8..65c220f 100644
--- a/drivers/net/ethernet/sfc/tx.c
+++ b/drivers/net/ethernet/sfc/tx.c
@@ -189,18 +189,6 @@ struct efx_short_copy_buffer {
  u8 buf[L1_CACHE_BYTES];
 };
 
-/* Copy in explicit 64-bit writes. */
-static void efx_memcpy_64(void __iomem *dest, void *src, size_t len)
-{
- u64 *src64 = src;
- u64 __iomem *dest64 = dest;
- size_t l64 = len / 8;
- size_t i;
-
- for (i = 0; i < l64; i++)
-  writeq(src64[i], &dest64[i]);
-}
-
 /* Copy to PIO, respecting that writes to PIO buffers must be dword aligned.
  * Advances piobuf pointer. Leaves additional data in the copy buffer.
  */
@@ -210,7 +198,7 @@ static void efx_memcpy_toio_aligned(struct efx_nic *efx, u8 __iomem **piobuf,
 {
  int block_len = len & ~(sizeof(copy_buf->buf) - 1);
 
- efx_memcpy_64(*piobuf, data, block_len);
+ __iowrite64_copy(*piobuf, data, block_len >> 3);
  *piobuf += block_len;
  len -= block_len;
 
@@ -242,7 +230,8 @@ static void efx_memcpy_toio_aligned_cb(struct efx_nic *efx, u8 __iomem **piobuf,
   if (copy_buf->used < sizeof(copy_buf->buf))
    return;
 
-  efx_memcpy_64(*piobuf, copy_buf->buf, sizeof(copy_buf->buf));
+  __iowrite64_copy(*piobuf, copy_buf->buf,
+     sizeof(copy_buf->buf) >> 3);
   *piobuf += sizeof(copy_buf->buf);
   data += copy_to_buf;
   len -= copy_to_buf;
@@ -257,7 +246,8 @@ static void efx_flush_copy_buffer(struct efx_nic *efx, u8 __iomem *piobuf,
 {
  /* if there's anything in it, write the whole buffer, including junk */
  if (copy_buf->used)
-  efx_memcpy_64(piobuf, copy_buf->buf, sizeof(copy_buf->buf));
+  __iowrite64_copy(piobuf, copy_buf->buf,
+     sizeof(copy_buf->buf) >> 3);
 }
 
 /* Traverse skb structure and copy fragments in to PIO buffer.
@@ -316,8 +306,8 @@ efx_enqueue_skb_pio(struct efx_tx_queue *tx_queue, struct sk_buff *skb)
    */
   BUILD_BUG_ON(L1_CACHE_BYTES >
         SKB_DATA_ALIGN(sizeof(struct skb_shared_info)));
-  efx_memcpy_64(tx_queue->piobuf, skb->data,
-         ALIGN(skb->len, L1_CACHE_BYTES));
+  __iowrite64_copy(tx_queue->piobuf, skb->data,
+     ALIGN(skb->len, L1_CACHE_BYTES) >> 3);
  }
 
  EFX_POPULATE_QWORD_5(buffer->option,
-- 
1.7.1