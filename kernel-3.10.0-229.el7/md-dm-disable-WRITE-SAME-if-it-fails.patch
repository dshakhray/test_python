From f97c25418c4b1837ef7a9f8877bfefafa67f9b65 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:10 -0400
Subject: [md] dm: disable WRITE SAME if it fails

Message-id: <1405543364-20901-7-git-send-email-snitzer@redhat.com>
Patchwork-id: 85888
O-Subject: [RHEL7.1 PATCH 06/40] dm: disable WRITE SAME if it fails
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>

BZ: 1117872

Upstream commit 7eee4ae2dbb2be0a15a4406718806e48b18ba831
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Mon Jun 2 15:50:06 2014 -0400

    dm: disable WRITE SAME if it fails

    Add DM core support for disabling WRITE SAME on first failure to both
    request-based and bio-based targets.  The need to disable WRITE SAME
    stems from SCSI enabling it by default but then disabling it when it
    fails.  When SCSI does this it returns "permanent target failure, do
    not retry" using -EREMOTEIO.  Update DM core to only disable WRITE SAME
    on failure if the returned error is -EREMOTEIO.

    Commit f84cb8a4 ("dm mpath: disable WRITE SAME if it fails")
    implemented multipath specific disabling of WRITE SAME if it fails.
    However, as that commit detailed, the multipath-only solution doesn't go
    far enough if bio-based DM targets are stacked ontop of the
    request-based dm-multipath target (as is commonly done using dm-linear
    to support partitions on multipath devices, via kpartx).

    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Acked-by: Martin K. Petersen <martin.petersen@oracle.com>
    Tested-by: Alex Chen <alex.chen@huawei.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-mpath.c b/drivers/md/dm-mpath.c
index 6eb9dc9..3b7ea3e 100644
--- a/drivers/md/dm-mpath.c
+++ b/drivers/md/dm-mpath.c
@@ -1314,17 +1314,8 @@ static int do_end_io(struct multipath *m, struct request *clone,
  if (!error && !clone->errors)
   return 0; /* I/O complete */
 
- if (noretry_error(error)) {
-  if ((clone->cmd_flags & REQ_WRITE_SAME) &&
-      !clone->q->limits.max_write_same_sectors) {
-   struct queue_limits *limits;
-
-   /* device doesn't really support WRITE SAME, disable it */
-   limits = dm_get_queue_limits(dm_table_get_md(m->ti->table));
-   limits->max_write_same_sectors = 0;
-  }
+ if (noretry_error(error))
   return error;
- }
 
  if (mpio->pgpath)
   fail_path(mpio->pgpath);
diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index ab7f3b2..91cf20d 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -750,6 +750,14 @@ static void dec_pending(struct dm_io *io, int error)
  }
 }
 
+static void disable_write_same(struct mapped_device *md)
+{
+ struct queue_limits *limits = dm_get_queue_limits(md);
+
+ /* device doesn't really support WRITE SAME, disable it */
+ limits->max_write_same_sectors = 0;
+}
+
 static void clone_endio(struct bio *bio, int error)
 {
  int r = 0;
@@ -778,6 +786,10 @@ static void clone_endio(struct bio *bio, int error)
   }
  }
 
+ if (unlikely(r == -EREMOTEIO && (bio->bi_rw & REQ_WRITE_SAME) &&
+       !bdev_get_queue(bio->bi_bdev)->limits.max_write_same_sectors))
+  disable_write_same(md);
+
  free_tio(md, tio);
  dec_pending(io, error);
 }
@@ -972,6 +984,10 @@ static void dm_done(struct request *clone, int error, bool mapped)
    r = rq_end_io(tio->ti, clone, error, &tio->info);
  }
 
+ if (unlikely(r == -EREMOTEIO && (clone->cmd_flags & REQ_WRITE_SAME) &&
+       !clone->q->limits.max_write_same_sectors))
+  disable_write_same(tio->md);
+
  if (r <= 0)
   /* The target wants to complete the I/O */
   dm_end_request(clone, r);
-- 
1.7.1