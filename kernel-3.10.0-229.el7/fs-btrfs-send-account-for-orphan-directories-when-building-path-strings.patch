From e21ebff8d77ba4b0c541d4ea2aa6eb69ff6a7e97 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:03:35 -0400
Subject: [fs] btrfs: send, account for orphan directories when building path strings

Message-id: <1407179109-13714-329-git-send-email-sandeen@redhat.com>
Patchwork-id: 87319
O-Subject: [RHEL7.1 PATCH 328/422] Btrfs: send, account for orphan directories when building path strings
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit c992ec94f24c3e7135d6c23860615f269f0b1d87
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Sat Mar 22 17:15:24 2014 +0000

    Btrfs: send, account for orphan directories when building path strings

    If we have directories with a pending move/rename operation, we must take into
    account any orphan directories that got created before executing the pending
    move/rename. Those orphan directories are directories with an inode number higher
    then the current send progress and that don't exist in the parent snapshot, they
    are created before current progress reaches their inode number, with a generated
    name of the form oN-M-I and at the root of the filesystem tree, and later when
    progress matches their inode number, moved/renamed to their final location.

    Reproducer:

              $ mkfs.btrfs -f /dev/sdd
              $ mount /dev/sdd /mnt

              $ mkdir -p /mnt/a/b/c/d
              $ mkdir /mnt/a/b/e
              $ mv /mnt/a/b/c /mnt/a/b/e/CC
              $ mkdir /mnt/a/b/e/CC/d/f
       $ mkdir /mnt/a/g

              $ btrfs subvolume snapshot -r /mnt /mnt/snap1
              $ btrfs send /mnt/snap1 -f /tmp/base.send

              $ mkdir /mnt/a/g/h
       $ mv /mnt/a/b/e /mnt/a/g/h/EE
              $ mv /mnt/a/g/h/EE/CC/d /mnt/a/g/h/EE/DD

              $ btrfs subvolume snapshot -r /mnt /mnt/snap2
              $ btrfs send -p /mnt/snap1 /mnt/snap2 -f /tmp/incremental.send

    The second receive command failed with the following error:

        ERROR: rename a/b/e/CC/d -> o264-7-0/EE/DD failed. No such file or directory

    A test case for xfstests follows soon.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/send.c b/fs/btrfs/send.c
index 98e9e0c..c2bfd60 100644
--- a/fs/btrfs/send.c
+++ b/fs/btrfs/send.c
@@ -3055,33 +3055,18 @@ static int apply_dir_move(struct send_ctx *sctx, struct pending_dir_move *pm)
  if (ret < 0)
   goto out;
 
- if (parent_ino == sctx->cur_ino) {
-  /* child only renamed, not moved */
-  ASSERT(parent_gen == sctx->cur_inode_gen);
-  ret = get_cur_path(sctx, sctx->cur_ino, sctx->cur_inode_gen,
-       from_path);
-  if (ret < 0)
-   goto out;
-  ret = fs_path_add_path(from_path, name);
-  if (ret < 0)
-   goto out;
- } else {
-  /* child moved and maybe renamed too */
-  sctx->send_progress = pm->ino;
-  ret = get_cur_path(sctx, pm->ino, pm->gen, from_path);
-  if (ret < 0)
-   goto out;
- }
+ ret = get_cur_path(sctx, parent_ino, parent_gen,
+      from_path);
+ if (ret < 0)
+  goto out;
+ ret = fs_path_add_path(from_path, name);
+ if (ret < 0)
+  goto out;
 
- fs_path_free(name);
+ fs_path_reset(name);
+ to_path = name;
  name = NULL;
 
- to_path = fs_path_alloc();
- if (!to_path) {
-  ret = -ENOMEM;
-  goto out;
- }
-
  sctx->send_progress = sctx->cur_ino + 1;
  ret = get_cur_path(sctx, pm->ino, pm->gen, to_path);
  if (ret < 0)
-- 
1.7.1