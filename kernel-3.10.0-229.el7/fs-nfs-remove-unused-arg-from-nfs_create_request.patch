From 16ac9e70ce3808acf6bf06dccfd6a0e48b3c287a Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:53:46 -0400
Subject: [fs] nfs: remove unused arg from nfs_create_request

Message-id: <1403798077-28799-28-git-send-email-steved@redhat.com>
Patchwork-id: 84887
O-Subject: [RHEL7.1 PATCH 27/78] nfs: remove unused arg from nfs_create_request
Bugzilla: 1113248
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Weston Andros Adamson <dros@primarydata.com>

@inode is passed but not used.

Signed-off-by: Weston Andros Adamson <dros@primarydata.com>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: 8c8f1ac109726e4ed44a920f5c962c84610d4a17
Bugzilla: 1113248
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/direct.c b/fs/nfs/direct.c
index c11015c..7c668b0 100644
--- a/fs/nfs/direct.c
+++ b/fs/nfs/direct.c
@@ -381,8 +381,7 @@ static ssize_t nfs_direct_read_schedule_segment(struct nfs_pageio_descriptor *de
    struct nfs_page *req;
    unsigned int req_len = min_t(size_t, bytes, PAGE_SIZE - pgbase);
    /* XXX do we need to do the eof zeroing found in async_filler? */
-   req = nfs_create_request(dreq->ctx, dreq->inode,
-       pagevec[i],
+   req = nfs_create_request(dreq->ctx, pagevec[i],
        pgbase, req_len);
    if (IS_ERR(req)) {
     result = PTR_ERR(req);
@@ -751,8 +750,7 @@ static ssize_t nfs_direct_write_schedule_segment(struct nfs_pageio_descriptor *d
    struct nfs_page *req;
    unsigned int req_len = min_t(size_t, bytes, PAGE_SIZE - pgbase);
 
-   req = nfs_create_request(dreq->ctx, dreq->inode,
-       pagevec[i],
+   req = nfs_create_request(dreq->ctx, pagevec[i],
        pgbase, req_len);
    if (IS_ERR(req)) {
     result = PTR_ERR(req);
diff --git a/fs/nfs/pagelist.c b/fs/nfs/pagelist.c
index 2959109..4b4b212 100644
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@ -139,7 +139,6 @@ nfs_iocounter_wait(struct nfs_io_counter *c)
 /**
  * nfs_create_request - Create an NFS read/write request.
  * @ctx: open context to use
- * @inode: inode to which the request is attached
  * @page: page to write
  * @offset: starting offset within the page for the write
  * @count: number of bytes to read/write
@@ -149,8 +148,7 @@ nfs_iocounter_wait(struct nfs_io_counter *c)
  * User should ensure it is safe to sleep in this function.
  */
 struct nfs_page *
-nfs_create_request(struct nfs_open_context *ctx, struct inode *inode,
-     struct page *page,
+nfs_create_request(struct nfs_open_context *ctx, struct page *page,
      unsigned int offset, unsigned int count)
 {
  struct nfs_page  *req;
diff --git a/fs/nfs/read.c b/fs/nfs/read.c
index 3986668..46d9044 100644
--- a/fs/nfs/read.c
+++ b/fs/nfs/read.c
@@ -85,7 +85,7 @@ int nfs_readpage_async(struct nfs_open_context *ctx, struct inode *inode,
  len = nfs_page_length(page);
  if (len == 0)
   return nfs_return_empty_page(page);
- new = nfs_create_request(ctx, inode, page, 0, len);
+ new = nfs_create_request(ctx, page, 0, len);
  if (IS_ERR(new)) {
   unlock_page(page);
   return PTR_ERR(new);
@@ -303,7 +303,6 @@ static int
 readpage_async_filler(void *data, struct page *page)
 {
  struct nfs_readdesc *desc = (struct nfs_readdesc *)data;
- struct inode *inode = page_file_mapping(page)->host;
  struct nfs_page *new;
  unsigned int len;
  int error;
@@ -312,7 +311,7 @@ readpage_async_filler(void *data, struct page *page)
  if (len == 0)
   return nfs_return_empty_page(page);
 
- new = nfs_create_request(desc->ctx, inode, page, 0, len);
+ new = nfs_create_request(desc->ctx, page, 0, len);
  if (IS_ERR(new))
   goto out_error;
 
diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index ef3e463..58af10d 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -761,7 +761,7 @@ static struct nfs_page * nfs_setup_write_request(struct nfs_open_context* ctx,
  req = nfs_try_to_update_request(inode, page, offset, bytes);
  if (req != NULL)
   goto out;
- req = nfs_create_request(ctx, inode, page, offset, bytes);
+ req = nfs_create_request(ctx, page, offset, bytes);
  if (IS_ERR(req))
   goto out;
  nfs_inode_add_request(inode, req);
diff --git a/include/linux/nfs_page.h b/include/linux/nfs_page.h
index eb2eb63..be0b098 100644
--- a/include/linux/nfs_page.h
+++ b/include/linux/nfs_page.h
@@ -85,7 +85,6 @@ struct nfs_pageio_descriptor {
 #define NFS_WBACK_BUSY(req) (test_bit(PG_BUSY,&(req)->wb_flags))
 
 extern struct nfs_page *nfs_create_request(struct nfs_open_context *ctx,
-         struct inode *inode,
          struct page *page,
          unsigned int offset,
          unsigned int count);
-- 
1.7.1