From 5d648dabeadb45bea5b208746953f8e060a20d15 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:06:41 -0400
Subject: [usb] uas: Add suspend/resume support

Message-id: <1410887463-20674-330-git-send-email-dzickus@redhat.com>
Patchwork-id: 95275
O-Subject: [RHEL7 PATCH 329/591] uas: Add suspend/resume support
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 0df1f663f32e5dc28cba68375b09bba5eaad103f
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Nov 7 08:47:05 2013 +0100

    uas: Add suspend/resume support

    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/storage/uas.c b/drivers/usb/storage/uas.c
index 8023944..7a16ed8 100644
--- a/drivers/usb/storage/uas.c
+++ b/drivers/usb/storage/uas.c
@@ -1091,6 +1091,45 @@ static int uas_post_reset(struct usb_interface *intf)
  return 0;
 }
 
+static int uas_suspend(struct usb_interface *intf, pm_message_t message)
+{
+ struct Scsi_Host *shost = usb_get_intfdata(intf);
+ struct uas_dev_info *devinfo = (void *)shost->hostdata[0];
+
+ /* Wait for any pending requests to complete */
+ flush_work(&devinfo->work);
+ if (usb_wait_anchor_empty_timeout(&devinfo->sense_urbs, 5000) == 0) {
+  shost_printk(KERN_ERR, shost, "%s: timed out\n", __func__);
+  return -ETIME;
+ }
+
+ return 0;
+}
+
+static int uas_resume(struct usb_interface *intf)
+{
+ return 0;
+}
+
+static int uas_reset_resume(struct usb_interface *intf)
+{
+ struct Scsi_Host *shost = usb_get_intfdata(intf);
+ struct uas_dev_info *devinfo = (void *)shost->hostdata[0];
+ unsigned long flags;
+
+ if (uas_configure_endpoints(devinfo) != 0) {
+  shost_printk(KERN_ERR, shost,
+        "%s: alloc streams error after reset", __func__);
+  return -EIO;
+ }
+
+ spin_lock_irqsave(shost->host_lock, flags);
+ scsi_report_bus_reset(shost, 0);
+ spin_unlock_irqrestore(shost->host_lock, flags);
+
+ return 0;
+}
+
 static void uas_disconnect(struct usb_interface *intf)
 {
  struct Scsi_Host *shost = usb_get_intfdata(intf);
@@ -1114,6 +1153,9 @@ static struct usb_driver uas_driver = {
  .disconnect = uas_disconnect,
  .pre_reset = uas_pre_reset,
  .post_reset = uas_post_reset,
+ .suspend = uas_suspend,
+ .resume = uas_resume,
+ .reset_resume = uas_reset_resume,
  .id_table = uas_usb_ids,
 };
 
-- 
1.7.1