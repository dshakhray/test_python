From b319274baa36fcc2f2ea1289e6377a4067c9f490 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:02:18 -0400
Subject: [fs] btrfs: reclaim delalloc metadata more aggressively

Message-id: <1407179109-13714-252-git-send-email-sandeen@redhat.com>
Patchwork-id: 87157
O-Subject: [RHEL7.1 PATCH 251/422] Btrfs: reclaim delalloc metadata more aggressively
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Miao Xie <miaox@cn.fujitsu.com>

commit 24af7dd1881f9f5c13c7d82e22d7858137383766
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Thu Mar 6 13:55:00 2014 +0800

    Btrfs: reclaim delalloc metadata more aggressively

    generic/074 in xfstests failed sometimes because of the enospc error,
    the reason of this problem is that we just reclaimed the space we need
    from the reserved space for delalloc, and then tried to reserve the space,
    but if some task did no-flush reservation between the above reclamation
    and reservation,
     Task1   Task2
     shrink_delalloc()
     reclaim 1 block
     (The space that can
      be reserved now is 1
      block)
        do no-flush reservation
        reserve 1 block
        (The space that can
         be reserved now is 0
         block)
     reserving 1 block failed
    the reservation of Task1 failed, but in fact, there was enough space to
    reserve if we could reclaim more space before.

    Fix this problem by the aggressive reclamation of the reserved delalloc
    metadata space.

    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/extent-tree.c b/fs/btrfs/extent-tree.c
index 5608b4f..5c0c545 100644
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -4174,7 +4174,7 @@ static int flush_space(struct btrfs_root *root,
   break;
  case FLUSH_DELALLOC:
  case FLUSH_DELALLOC_WAIT:
-  shrink_delalloc(root, num_bytes, orig_bytes,
+  shrink_delalloc(root, num_bytes * 2, orig_bytes,
     state == FLUSH_DELALLOC_WAIT);
   break;
  case ALLOC_CHUNK:
-- 
1.7.1