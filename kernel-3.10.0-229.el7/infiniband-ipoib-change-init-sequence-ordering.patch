From b2ec940c5b4e5ff8e923cc8cdcee8eb852e627ab Mon Sep 17 00:00:00 2001
From: Doug Ledford <dledford@redhat.com>
Date: Wed, 24 Sep 2014 17:28:15 -0400
Subject: [infiniband] ipoib: change init sequence ordering

Message-id: <7f540417dc4949160724a3a85101dd7471bfb364.1411578494.git.dledford@redhat.com>
Patchwork-id: 96676
O-Subject: [Patch RHEL7 22/26] IPoIB: change init sequence ordering
Bugzilla: 1107621
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

In preparation for using per device work queues, we need to move the
start of the neighbor thread task to after ipoib_ib_dev_init and move
the destruction of the neighbor task to before ipoib_ib_dev_cleanup.
Otherwise we will end up freeing our workqueue with work possibly still
on it.

Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 3a3434cd0f677a2b60b3ebef537254bbeb80b14f)
Signed-off-by: Doug Ledford <dledford@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/infiniband/ulp/ipoib/ipoib_main.c b/drivers/infiniband/ulp/ipoib/ipoib_main.c
index 217cb77..949948a 100644
--- a/drivers/infiniband/ulp/ipoib/ipoib_main.c
+++ b/drivers/infiniband/ulp/ipoib/ipoib_main.c
@@ -1262,15 +1262,13 @@ int ipoib_dev_init(struct net_device *dev, struct ib_device *ca, int port)
 {
  struct ipoib_dev_priv *priv = netdev_priv(dev);
 
- if (ipoib_neigh_hash_init(priv) < 0)
-  goto out;
  /* Allocate RX/TX "rings" to hold queued skbs */
  priv->rx_ring = kzalloc(ipoib_recvq_size * sizeof *priv->rx_ring,
     GFP_KERNEL);
  if (!priv->rx_ring) {
   printk(KERN_WARNING "%s: failed to allocate RX ring (%d entries)\n",
          ca->name, ipoib_recvq_size);
-  goto out_neigh_hash_cleanup;
+  goto out;
  }
 
  priv->tx_ring = vzalloc(ipoib_sendq_size * sizeof *priv->tx_ring);
@@ -1285,16 +1283,24 @@ int ipoib_dev_init(struct net_device *dev, struct ib_device *ca, int port)
  if (ipoib_ib_dev_init(dev, ca, port))
   goto out_tx_ring_cleanup;
 
+ /*
+  * Must be after ipoib_ib_dev_init so we can allocate a per
+  * device wq there and use it here
+  */
+ if (ipoib_neigh_hash_init(priv) < 0)
+  goto out_dev_uninit;
+
  return 0;
 
+out_dev_uninit:
+ ipoib_ib_dev_cleanup();
+
 out_tx_ring_cleanup:
  vfree(priv->tx_ring);
 
 out_rx_ring_cleanup:
  kfree(priv->rx_ring);
 
-out_neigh_hash_cleanup:
- ipoib_neigh_hash_uninit(dev);
 out:
  return -ENOMEM;
 }
@@ -1317,6 +1323,12 @@ void ipoib_dev_cleanup(struct net_device *dev)
  }
  unregister_netdevice_many(&head);
 
+ /*
+  * Must be before ipoib_ib_dev_cleanup or we delete an in use
+  * work queue
+  */
+ ipoib_neigh_hash_uninit(dev);
+
  ipoib_ib_dev_cleanup(dev);
 
  kfree(priv->rx_ring);
@@ -1324,8 +1336,6 @@ void ipoib_dev_cleanup(struct net_device *dev)
 
  priv->rx_ring = NULL;
  priv->tx_ring = NULL;
-
- ipoib_neigh_hash_uninit(dev);
 }
 
 static const struct header_ops ipoib_header_ops = {
-- 
1.7.1