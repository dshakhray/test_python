From 39a8269b3a4ae2b2e7a89b1ab088ecf5f8787be9 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:05:52 -0400
Subject: [usb] xhci: For streams the css flag most be read from the stream-ctx on ep stop

Message-id: <1410887463-20674-281-git-send-email-dzickus@redhat.com>
Patchwork-id: 95313
O-Subject: [RHEL7 PATCH 280/591] xhci: For streams the css flag most be read from the stream-ctx on ep stop
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit c4bedb77ec4cb42f37cae4cbfddda8283161f7c8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 4 00:29:47 2013 +0200

    xhci: For streams the css flag most be read from the stream-ctx on ep stop

    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index 37386e5..7c2bbe3 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -545,9 +545,9 @@ void xhci_find_new_dequeue_state(struct xhci_hcd *xhci,
   struct xhci_dequeue_state *state)
 {
  struct xhci_virt_device *dev = xhci->devs[slot_id];
+ struct xhci_virt_ep *ep = &dev->eps[ep_index];
  struct xhci_ring *ep_ring;
  struct xhci_generic_trb *trb;
- struct xhci_ep_ctx *ep_ctx;
  dma_addr_t addr;
 
  ep_ring = xhci_triad_to_transfer_ring(xhci, slot_id,
@@ -572,8 +572,16 @@ void xhci_find_new_dequeue_state(struct xhci_hcd *xhci,
  /* Dig out the cycle state saved by the xHC during the stop ep cmd */
  xhci_dbg_trace(xhci, trace_xhci_dbg_cancel_urb,
    "Finding endpoint context");
- ep_ctx = xhci_get_ep_ctx(xhci, dev->out_ctx, ep_index);
- state->new_cycle_state = 0x1 & le64_to_cpu(ep_ctx->deq);
+ /* 4.6.9 the css flag is written to the stream context for streams */
+ if (ep->ep_state & EP_HAS_STREAMS) {
+  struct xhci_stream_ctx *ctx =
+   &ep->stream_info->stream_ctx_array[stream_id];
+  state->new_cycle_state = 0x1 & le64_to_cpu(ctx->stream_ring);
+ } else {
+  struct xhci_ep_ctx *ep_ctx
+   = xhci_get_ep_ctx(xhci, dev->out_ctx, ep_index);
+  state->new_cycle_state = 0x1 & le64_to_cpu(ep_ctx->deq);
+ }
 
  state->new_deq_ptr = cur_td->last_trb;
  xhci_dbg_trace(xhci, trace_xhci_dbg_cancel_urb,
-- 
1.7.1