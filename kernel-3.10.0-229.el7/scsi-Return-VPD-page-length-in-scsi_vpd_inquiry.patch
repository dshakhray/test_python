From 5120516e807695d3a40837493e5b04bccfecfad1 Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Wed, 20 Aug 2014 18:59:04 -0400
Subject: [scsi] Return VPD page length in scsi_vpd_inquiry()

Message-id: <1408561176-18133-26-git-send-email-emilne@redhat.com>
Patchwork-id: 88449
O-Subject: [RHEL7.1 PATCH e-stor 25/57] [SCSI] Return VPD page length in scsi_vpd_inquiry()
Bugzilla: 1132092
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Ewan D. Milne" <emilne@redhat.com>

upstream commit bc8945df3c27e8edaa6a6de47cb20df7d12b80c8

Tested by Ewan D. Milne and Barry Donahue with a combination
of manual and automated testing.  No issues seen.

upstream commit bc8945df3c27e8edaa6a6de47cb20df7d12b80c8
Author: Hannes Reinecke <hare@suse.de>
Date:   Sat Mar 15 09:51:48 2014 +0100

    [SCSI] Return VPD page length in scsi_vpd_inquiry()

    We should be returning the number of bytes of the
    requested VPD page in scsi_vpd_inquiry.
    This makes it easier for the caller to verify the
    required space.

    [jejb: fix up mm warning spotted by Sergey]
    Tested-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

Signed-off-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/scsi.c b/drivers/scsi/scsi.c
index 529f076..aef4122 100644
--- a/drivers/scsi/scsi.c
+++ b/drivers/scsi/scsi.c
@@ -929,7 +929,7 @@ EXPORT_SYMBOL(scsi_track_queue_full);
  * This is an internal helper function.  You probably want to use
  * scsi_get_vpd_page instead.
  *
- * Returns 0 on success or a negative error number.
+ * Returns size of the vpd page on success or a negative error number.
  */
 static int scsi_vpd_inquiry(struct scsi_device *sdev, unsigned char *buffer,
        u8 page, unsigned len)
@@ -937,6 +937,9 @@ static int scsi_vpd_inquiry(struct scsi_device *sdev, unsigned char *buffer,
  int result;
  unsigned char cmd[16];
 
+ if (len < 4)
+  return -EINVAL;
+
  cmd[0] = INQUIRY;
  cmd[1] = 1;  /* EVPD */
  cmd[2] = page;
@@ -951,13 +954,13 @@ static int scsi_vpd_inquiry(struct scsi_device *sdev, unsigned char *buffer,
  result = scsi_execute_req(sdev, cmd, DMA_FROM_DEVICE, buffer,
       len, NULL, 30 * HZ, 3, NULL);
  if (result)
-  return result;
+  return -EIO;
 
  /* Sanity check that we got the page back that we asked for */
  if (buffer[1] != page)
   return -EIO;
 
- return 0;
+ return get_unaligned_be16(&buffer[2]) + 4;
 }
 
 /**
@@ -984,18 +987,18 @@ int scsi_get_vpd_page(struct scsi_device *sdev, u8 page, unsigned char *buf,
 
  /* Ask for all the pages supported by this device */
  result = scsi_vpd_inquiry(sdev, buf, 0, buf_len);
- if (result)
+ if (result < 4)
   goto fail;
 
  /* If the user actually wanted this page, we can skip the rest */
  if (page == 0)
   return 0;
 
- for (i = 0; i < min((int)buf[3], buf_len - 4); i++)
-  if (buf[i + 4] == page)
+ for (i = 4; i < min(result, buf_len); i++)
+  if (buf[i] == page)
    goto found;
 
- if (i < buf[3] && i >= buf_len - 4)
+ if (i < result && i >= buf_len)
   /* ran off the end of the buffer, give us benefit of doubt */
   goto found;
  /* The device claims it doesn't support the requested page */
@@ -1003,7 +1006,7 @@ int scsi_get_vpd_page(struct scsi_device *sdev, u8 page, unsigned char *buf,
 
  found:
  result = scsi_vpd_inquiry(sdev, buf, page, buf_len);
- if (result)
+ if (result < 0)
   goto fail;
 
  return 0;
-- 
1.7.1