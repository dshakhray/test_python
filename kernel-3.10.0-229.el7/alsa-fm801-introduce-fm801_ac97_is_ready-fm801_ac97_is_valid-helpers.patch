From 67e1fa10563a368ba9ea991cc17d5f80446423d6 Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:31:55 -0400
Subject: [alsa] fm801: introduce fm801_ac97_is_ready()/fm801_ac97_is_valid() helpers

Message-id: <140972823573-290-patchset-jkysela@redhat.com>
Patchwork-id: 90986
O-Subject: [RHEL 7.1 PATCH 289/442] ALSA: fm801: introduce fm801_ac97_is_ready()/fm801_ac97_is_valid() helpers
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

The introduced functios check AC97 if it's ready for communication and
read data is valid.

Signed-off-by: Andy Shevchenko <andy.shevchenko@gmail.com>
Signed-off-by: Takashi Iwai <tiwai@suse.de>
Signed-off-by: Jaroslav Kysela <perex@perex.cz>

(picked from kernel: 02fd1a76bfeb8d6293608dc3a1b8667b1da5a923)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/pci/fm801.c b/sound/pci/fm801.c
index cccda46..fb7141b 100644
--- a/sound/pci/fm801.c
+++ b/sound/pci/fm801.c
@@ -224,6 +224,30 @@ MODULE_DEVICE_TABLE(pci, snd_fm801_ids);
  *  common I/O routines
  */
 
+static bool fm801_ac97_is_ready(struct fm801 *chip, unsigned int iterations)
+{
+ unsigned int idx;
+
+ for (idx = 0; idx < iterations; idx++) {
+  if (!(fm801_readw(chip, AC97_CMD) & FM801_AC97_BUSY))
+   return true;
+  udelay(10);
+ }
+ return false;
+}
+
+static bool fm801_ac97_is_valid(struct fm801 *chip, unsigned int iterations)
+{
+ unsigned int idx;
+
+ for (idx = 0; idx < iterations; idx++) {
+  if (fm801_readw(chip, AC97_CMD) & FM801_AC97_VALID)
+   return true;
+  udelay(10);
+ }
+ return false;
+}
+
 static int snd_fm801_update_bits(struct fm801 *chip, unsigned short reg,
      unsigned short mask, unsigned short value)
 {
@@ -246,72 +270,53 @@ static void snd_fm801_codec_write(struct snd_ac97 *ac97,
       unsigned short val)
 {
  struct fm801 *chip = ac97->private_data;
- int idx;
 
  /*
   *  Wait until the codec interface is not ready..
   */
- for (idx = 0; idx < 100; idx++) {
-  if (!(fm801_readw(chip, AC97_CMD) & FM801_AC97_BUSY))
-   goto ok1;
-  udelay(10);
+ if (!fm801_ac97_is_ready(chip, 100)) {
+  dev_err(chip->card->dev, "AC'97 interface is busy (1)\n");
+  return;
  }
- dev_err(chip->card->dev, "AC'97 interface is busy (1)\n");
- return;
 
- ok1:
  /* write data and address */
  fm801_writew(chip, AC97_DATA, val);
  fm801_writew(chip, AC97_CMD, reg | (ac97->addr << FM801_AC97_ADDR_SHIFT));
  /*
   *  Wait until the write command is not completed..
-         */
- for (idx = 0; idx < 1000; idx++) {
-  if (!(fm801_readw(chip, AC97_CMD) & FM801_AC97_BUSY))
-   return;
-  udelay(10);
- }
- dev_err(chip->card->dev, "AC'97 interface #%d is busy (2)\n", ac97->num);
+  */
+ if (!fm801_ac97_is_ready(chip, 1000))
+  dev_err(chip->card->dev, "AC'97 interface #%d is busy (2)\n",
+  ac97->num);
 }
 
 static unsigned short snd_fm801_codec_read(struct snd_ac97 *ac97, unsigned short reg)
 {
  struct fm801 *chip = ac97->private_data;
- int idx;
 
  /*
   *  Wait until the codec interface is not ready..
   */
- for (idx = 0; idx < 100; idx++) {
-  if (!(fm801_readw(chip, AC97_CMD) & FM801_AC97_BUSY))
-   goto ok1;
-  udelay(10);
+ if (!fm801_ac97_is_ready(chip, 100)) {
+  dev_err(chip->card->dev, "AC'97 interface is busy (1)\n");
+  return 0;
  }
- dev_err(chip->card->dev, "AC'97 interface is busy (1)\n");
- return 0;
 
- ok1:
  /* read command */
  fm801_writew(chip, AC97_CMD,
        reg | (ac97->addr << FM801_AC97_ADDR_SHIFT) | FM801_AC97_READ);
- for (idx = 0; idx < 100; idx++) {
-  if (!(fm801_readw(chip, AC97_CMD) & FM801_AC97_BUSY))
-   goto ok2;
-  udelay(10);
+ if (!fm801_ac97_is_ready(chip, 100)) {
+  dev_err(chip->card->dev, "AC'97 interface #%d is busy (2)\n",
+   ac97->num);
+  return 0;
  }
- dev_err(chip->card->dev, "AC'97 interface #%d is busy (2)\n", ac97->num);
- return 0;
 
- ok2:
- for (idx = 0; idx < 1000; idx++) {
-  if (fm801_readw(chip, AC97_CMD) & FM801_AC97_VALID)
-   goto ok3;
-  udelay(10);
+ if (!fm801_ac97_is_valid(chip, 1000)) {
+  dev_err(chip->card->dev,
+   "AC'97 interface #%d is not valid (2)\n", ac97->num);
+  return 0;
  }
- dev_err(chip->card->dev, "AC'97 interface #%d is not valid (2)\n", ac97->num);
- return 0;
 
- ok3:
  return fm801_readw(chip, AC97_DATA);
 }
 
-- 
1.7.1