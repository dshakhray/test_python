From 7d318bda1b1a1d406811b879a5d938847976b19f Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:48:34 -0400
Subject: [tools] perf/completion: Factor out call to __ltrim_colon_completions

Message-id: <1408953210-26343-27-git-send-email-jolsa@redhat.com>
Patchwork-id: 88746
O-Subject: [PATCH RHEL7.1 BZ1133083 026/322] perf completion: Factor out call to __ltrim_colon_completions
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 37e72c31061521d6f0e4b7fe47cd5748280ed691
Author: Ramkumar Ramachandra <artagnon@gmail.com>
Date: Sun Nov 17 21:43:25 2013 +0530

description
===========
In our sole callsite, __ltrim_colon_completions is called after
__perfcomp, to modify the COMPREPLY set by the invocation.

This is problematic, because in the zsh equivalent (using compset/
compadd), we'll have to generate completions in one-shot.

So factor out this entire callsite into a special override'able
__perfcomp_colon function; we will override it when introducing zsh
support.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/bash_completion b/tools/perf/bash_completion
index 8243126..573599b 100644
--- a/tools/perf/bash_completion
+++ b/tools/perf/bash_completion
@@ -94,6 +94,12 @@ __perfcomp ()
  COMPREPLY=( $( compgen -W "$1" -- "$2" ) )
 }
 
+__perfcomp_colon ()
+{
+ __perfcomp "$1" "$2"
+ __ltrim_colon_completions $cur
+}
+
 __perf_main ()
 {
  local cmd
@@ -114,8 +120,7 @@ __perf_main ()
  # List possible events for -e option
  elif [[ $prev == "-e" && "${words[1]}" == @(record|stat|top) ]]; then
   evts=$($cmd list --raw-dump)
-  __perfcomp "$evts" "$cur"
-  __ltrim_colon_completions $cur
+  __perfcomp_colon "$evts" "$cur"
  # List long option names
  elif [[ $cur == --* ]];  then
   subcmd=${words[1]}
-- 
1.7.1