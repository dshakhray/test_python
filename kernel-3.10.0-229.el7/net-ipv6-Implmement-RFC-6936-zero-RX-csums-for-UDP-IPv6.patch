From 2ae32990a7b48f5bc69286543650282283993a95 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:14:32 -0400
Subject: [net] ipv6: Implmement RFC 6936 (zero RX csums for UDP/IPv6)

Message-id: <1409652920-431-10-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90189
O-Subject: [PATCH 09/57] [RHEL7.1 net] net: Implmement RFC 6936 (zero RX csums for UDP/IPv6)
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

commit 4068579e1e098fa81d48db9ba4432ab664c58561
Author: Tom Herbert <therbert@google.com>
Date:   Fri May 2 16:29:58 2014 -0700

    net: Implmement RFC 6936 (zero RX csums for UDP/IPv6)

    RFC 6936 relaxes the requirement of RFC 2460 that UDP/IPv6 packets which
    are received with a zero UDP checksum value must be dropped. RFC 6936
    allows zero checksums to support tunnels over UDP.

    When sk_no_check is set we allow on a socket we allow a zero IPv6
    UDP checksum. This is for both sending zero checksum and accepting
    a zero checksum on receive.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv6/ip6_checksum.c b/net/ipv6/ip6_checksum.c
index c69fe37..da26224 100644
--- a/net/ipv6/ip6_checksum.c
+++ b/net/ipv6/ip6_checksum.c
@@ -75,16 +75,12 @@ int udp6_csum_init(struct sk_buff *skb, struct udphdr *uh, int proto)
    return err;
  }
 
- if (uh->check == 0) {
-  /* RFC 2460 section 8.1 says that we SHOULD log
-     this error. Well, it is reasonable.
-   */
-  LIMIT_NETDEBUG(KERN_INFO "IPv6: udp checksum is 0 for [%pI6c]:%u->[%pI6c]:%u\n",
-          &ipv6_hdr(skb)->saddr, ntohs(uh->source),
-          &ipv6_hdr(skb)->daddr, ntohs(uh->dest));
-  return 1;
- }
-
- return skb_checksum_init(skb, IPPROTO_UDP, ip6_compute_pseudo);
+ /* To support RFC 6936 (allow zero checksum in UDP/IPV6 for tunnels)
+  * we accept a checksum of zero here. When we find the socket
+  * for the UDP packet we'll check if that socket allows zero checksum
+  * for IPv6 (set by socket option).
+  */
+ return skb_checksum_init_zero_check(skb, proto, uh->check,
+        ip6_compute_pseudo);
 }
 EXPORT_SYMBOL(udp6_csum_init);
diff --git a/net/ipv6/udp.c b/net/ipv6/udp.c
index e861f7b..9c2f5f4 100644
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@ -730,6 +730,17 @@ static void flush_stack(struct sock **stack, unsigned int count,
  if (unlikely(skb1))
   kfree_skb(skb1);
 }
+
+static void udp6_csum_zero_error(struct sk_buff *skb)
+{
+ /* RFC 2460 section 8.1 says that we SHOULD log
+  * this error. Well, it is reasonable.
+  */
+ LIMIT_NETDEBUG(KERN_INFO "IPv6: udp checksum is 0 for [%pI6c]:%u->[%pI6c]:%u\n",
+         &ipv6_hdr(skb)->saddr, ntohs(udp_hdr(skb)->source),
+         &ipv6_hdr(skb)->daddr, ntohs(udp_hdr(skb)->dest));
+}
+
 /*
  * Note: called only from the BH handler context,
  * so we don't need to lock the hashes.
@@ -749,7 +760,12 @@ static int __udp6_lib_mcast_deliver(struct net *net, struct sk_buff *skb,
  dif = inet6_iif(skb);
  sk = udp_v6_mcast_next(net, sk, uh->dest, daddr, uh->source, saddr, dif);
  while (sk) {
-  stack[count++] = sk;
+  /* If zero checksum and sk_no_check is not on for
+   * the socket then skip it.
+   */
+  if (uh->check || sk->sk_no_check)
+   stack[count++] = sk;
+
   sk = udp_v6_mcast_next(net, sk_nulls_next(sk), uh->dest, daddr,
            uh->source, saddr, dif);
   if (unlikely(count == ARRAY_SIZE(stack))) {
@@ -837,6 +853,11 @@ int __udp6_lib_rcv(struct sk_buff *skb, struct udp_table *udptable,
  if (sk != NULL) {
   int ret;
 
+  if (!uh->check && !sk->sk_no_check) {
+   udp6_csum_zero_error(skb);
+   goto csum_error;
+  }
+
   ret = udpv6_queue_rcv_skb(sk, skb);
   sock_put(sk);
 
@@ -849,6 +870,11 @@ int __udp6_lib_rcv(struct sk_buff *skb, struct udp_table *udptable,
   return 0;
  }
 
+ if (!uh->check) {
+  udp6_csum_zero_error(skb);
+  goto csum_error;
+ }
+
  if (!xfrm6_policy_check(NULL, XFRM_POLICY_IN, skb))
   goto discard;
 
@@ -976,7 +1002,10 @@ static int udp_v6_push_pending_frames(struct sock *sk)
 
  if (is_udplite)
   csum = udplite_csum_outgoing(sk, skb);
- else if (skb->ip_summed == CHECKSUM_PARTIAL) { /* UDP hardware csum */
+ else if (sk->sk_no_check == UDP_CSUM_NOXMIT) {   /* UDP csum disabled */
+  skb->ip_summed = CHECKSUM_NONE;
+  goto send;
+ } else if (skb->ip_summed == CHECKSUM_PARTIAL) { /* UDP hardware csum */
   udp6_hwcsum_outgoing(sk, skb, &fl6->saddr, &fl6->daddr,
          up->len);
   goto send;
-- 
1.7.1