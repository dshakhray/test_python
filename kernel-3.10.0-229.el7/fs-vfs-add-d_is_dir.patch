From 4ebd7fb55f3df2867c27df4f248f9a554a24307f Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:33:00 -0500
Subject: [fs] vfs: add d_is_dir()

Message-id: <20141125163300.18115.61309.stgit@warthog.procyon.org.uk>
Patchwork-id: 100902
O-Subject: [PATCH 02/47] vfs: add d_is_dir()
Bugzilla: 985875
RH-Acked-by: Ian Kent <ikent@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Miklos Szeredi <mszeredi@suse.cz>

Add d_is_dir(dentry) helper which is analogous to S_ISDIR().

To avoid confusion, rename d_is_directory() to d_can_lookup().

Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
Reviewed-by: J. Bruce Fields <bfields@redhat.com>
Original-commit: 44b1d53043c482225196e8a9cd9f35163a1b3336
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/namei.c b/fs/namei.c
index 298988c..bc48c0f 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -1813,7 +1813,7 @@ static int link_path_walk(const char *name, struct nameidata *nd)
    if (err)
     return err;
   }
-  if (!d_is_directory(nd->path.dentry)) {
+  if (!d_can_lookup(nd->path.dentry)) {
    err = -ENOTDIR; 
    break;
   }
@@ -1834,7 +1834,7 @@ static int path_init(int dfd, const char *name, unsigned int flags,
   struct dentry *root = nd->root.dentry;
   struct inode *inode = root->d_inode;
   if (*name) {
-   if (!d_is_directory(root))
+   if (!d_can_lookup(root))
     return -ENOTDIR;
    retval = inode_permission(inode, MAY_EXEC);
    if (retval)
@@ -1888,7 +1888,7 @@ static int path_init(int dfd, const char *name, unsigned int flags,
   dentry = f.file->f_path.dentry;
 
   if (*name) {
-   if (!d_is_directory(dentry)) {
+   if (!d_can_lookup(dentry)) {
     fdput(f);
     return -ENOTDIR;
    }
@@ -1970,7 +1970,7 @@ static int path_lookupat(int dfd, const char *name,
   err = complete_walk(nd);
 
  if (!err && nd->flags & LOOKUP_DIRECTORY) {
-  if (!d_is_directory(nd->path.dentry)) {
+  if (!d_can_lookup(nd->path.dentry)) {
    path_put(&nd->path);
    err = -ENOTDIR;
   }
@@ -2429,11 +2429,11 @@ static int may_delete(struct inode *dir, struct dentry *victim, bool isdir)
      IS_IMMUTABLE(inode) || IS_SWAPFILE(inode))
   return -EPERM;
  if (isdir) {
-  if (!d_is_directory(victim) && !d_is_autodir(victim))
+  if (!d_is_dir(victim))
    return -ENOTDIR;
   if (IS_ROOT(victim))
    return -EBUSY;
- } else if (d_is_directory(victim) || d_is_autodir(victim))
+ } else if (d_is_dir(victim))
   return -EISDIR;
  if (IS_DEADDIR(dir))
   return -ENOENT;
@@ -3047,11 +3047,10 @@ finish_lookup:
   return error;
  }
  error = -EISDIR;
- if ((open_flag & O_CREAT) &&
-     (d_is_directory(nd->path.dentry) || d_is_autodir(nd->path.dentry)))
+ if ((open_flag & O_CREAT) && d_is_dir(nd->path.dentry))
   goto out;
  error = -ENOTDIR;
- if ((nd->flags & LOOKUP_DIRECTORY) && !d_is_directory(nd->path.dentry))
+ if ((nd->flags & LOOKUP_DIRECTORY) && !d_can_lookup(nd->path.dentry))
   goto out;
  audit_inode(name, nd->path.dentry, 0);
 finish_open:
@@ -3711,7 +3710,7 @@ exit1:
 slashes:
  if (d_is_negative(dentry))
   error = -ENOENT;
- else if (d_is_directory(dentry) || d_is_autodir(dentry))
+ else if (d_is_dir(dentry))
   error = -EISDIR;
  else
   error = -ENOTDIR;
@@ -4084,7 +4083,7 @@ int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
         struct inode **delegated_inode)
 {
  int error;
- int is_dir = d_is_directory(old_dentry) || d_is_autodir(old_dentry);
+ int is_dir = d_is_dir(old_dentry);
  const unsigned char *old_name;
 
  if (old_dentry->d_inode == new_dentry->d_inode)
@@ -4177,7 +4176,7 @@ retry_deleg:
  if (d_is_negative(old_dentry))
   goto exit4;
  /* unless the source is a directory trailing slashes give -ENOTDIR */
- if (!d_is_directory(old_dentry) && !d_is_autodir(old_dentry)) {
+ if (!d_is_dir(old_dentry)) {
   error = -ENOTDIR;
   if (oldnd.last.name[oldnd.last.len])
    goto exit4;
diff --git a/include/linux/dcache.h b/include/linux/dcache.h
index 5fab1f4..ccd472a 100644
--- a/include/linux/dcache.h
+++ b/include/linux/dcache.h
@@ -423,7 +423,7 @@ static inline unsigned __d_entry_type(const struct dentry *dentry)
  return dentry->d_flags & DCACHE_ENTRY_TYPE;
 }
 
-static inline bool d_is_directory(const struct dentry *dentry)
+static inline bool d_can_lookup(const struct dentry *dentry)
 {
  return __d_entry_type(dentry) == DCACHE_DIRECTORY_TYPE;
 }
@@ -433,6 +433,11 @@ static inline bool d_is_autodir(const struct dentry *dentry)
  return __d_entry_type(dentry) == DCACHE_AUTODIR_TYPE;
 }
 
+static inline bool d_is_dir(const struct dentry *dentry)
+{
+ return d_can_lookup(dentry) || d_is_autodir(dentry);
+}
+
 static inline bool d_is_symlink(const struct dentry *dentry)
 {
  return __d_entry_type(dentry) == DCACHE_SYMLINK_TYPE;
-- 
1.7.1