From 69146716b9ef5717d5142c6101f3d6a6121dc9f8 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Wed, 11 Jun 2014 11:53:09 -0400
Subject: [kernel] smp: Iterate functions through llist_for_each_entry_safe()

Message-id: <1402487594-26332-10-git-send-email-prarit@redhat.com>
Patchwork-id: 83644
O-Subject: [RHEL7.1 PATCH BZ 1105192 09/14] smp: Iterate functions through llist_for_each_entry_safe()
Bugzilla: 1105192
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

commit 5fd77595ec62141fa71e575bdbf410e0192f87d0
Author: Jan Kara <jack@suse.cz>
Date:   Mon Feb 24 16:39:55 2014 +0100

    smp: Iterate functions through llist_for_each_entry_safe()

    The IPI function llist iteration is open coded. Lets simplify this
    with using an llist iterator.

    Also we want to keep the iteration safe against possible
    csd.llist->next value reuse from the IPI handler. At least the block
    subsystem used to do such things so lets stay careful and use
    llist_for_each_entry_safe().

    Signed-off-by: Jan Kara <jack@suse.cz>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jens Axboe <axboe@fb.com>
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/smp.c b/kernel/smp.c
index fde9307..630703a 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -152,7 +152,8 @@ static void generic_exec_single(int cpu, struct call_single_data *csd, int wait)
  */
 void generic_smp_call_function_single_interrupt(void)
 {
- struct llist_node *entry, *next;
+ struct llist_node *entry;
+ struct call_single_data *csd, *csd_next;
 
  /*
   * Shouldn't receive this interrupt on a cpu that is not yet online.
@@ -162,16 +163,9 @@ void generic_smp_call_function_single_interrupt(void)
  entry = llist_del_all(&__get_cpu_var(call_single_queue));
  entry = llist_reverse_order(entry);
 
- while (entry) {
-  struct call_single_data *csd;
-
-  next = entry->next;
-
-  csd = llist_entry(entry, struct call_single_data, llist);
+ llist_for_each_entry_safe(csd, csd_next, entry, llist) {
   csd->func(csd->info);
   csd_unlock(csd);
-
-  entry = next;
  }
 }
 
-- 
1.7.1