From eb6e34813f3ea6915a7ee7d710cb70877223f421 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:12:28 -0400
Subject: [powerpc] use libfdt accessors for header data

Message-id: <1410545655-205645-520-git-send-email-dzickus@redhat.com>
Patchwork-id: 94448
O-Subject: [RHEL7 PATCH 519/626] powerpc: use libfdt accessors for header data
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 060f78c2543a890626cab81796b0d6f7070bd989
Author: Rob Herring <robh@kernel.org>
Date:   Mon Mar 31 15:15:00 2014 -0500

    powerpc: use libfdt accessors for header data

    With libfdt support, we can take advantage of helper accessors in libfdt
    for accessing the FDT header data. This makes the code more readable and
    makes the FDT blob structure more opaque to the kernel. This also
    prepares for removing struct boot_param_header completely.

    Signed-off-by: Rob Herring <robh@kernel.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Paul Mackerras <paulus@samba.org>
    Tested-by: Grant Likely <grant.likely@linaro.org>
    Tested-by: Stephen Chivers <schivers@csc.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/Makefile b/arch/powerpc/kernel/Makefile
index f921ec6..b256735 100644
--- a/arch/powerpc/kernel/Makefile
+++ b/arch/powerpc/kernel/Makefile
@@ -2,6 +2,7 @@
 # Makefile for the linux kernel.
 #
 
+CFLAGS_prom.o  = -I$(src)/../../../scripts/dtc/libfdt
 CFLAGS_ptrace.o  += -DUTS_MACHINE='"$(UTS_MACHINE)"'
 
 subdir-ccflags-$(CONFIG_PPC_WERROR) := -Werror
diff --git a/arch/powerpc/kernel/prom.c b/arch/powerpc/kernel/prom.c
index f674ea0..3929768 100644
--- a/arch/powerpc/kernel/prom.c
+++ b/arch/powerpc/kernel/prom.c
@@ -33,6 +33,7 @@
 #include <linux/irq.h>
 #include <linux/memblock.h>
 #include <linux/of.h>
+#include <linux/libfdt.h>
 
 #include <asm/prom.h>
 #include <asm/rtas.h>
@@ -117,14 +118,14 @@ static void __init move_device_tree(void)
  DBG("-> move_device_tree\n");
 
  start = __pa(initial_boot_params);
- size = be32_to_cpu(initial_boot_params->totalsize);
+ size = fdt_totalsize(initial_boot_params);
 
  if ((memory_limit && (start + size) > PHYSICAL_START + memory_limit) ||
    overlaps_crashkernel(start, size) ||
    overlaps_initrd(start, size)) {
   p = __va(memblock_alloc(size, PAGE_SIZE));
   memcpy(p, initial_boot_params, size);
-  initial_boot_params = (struct boot_param_header *)p;
+  initial_boot_params = p;
   DBG("Moved device tree to 0x%p\n", p);
  }
 
@@ -324,9 +325,9 @@ static int __init early_init_dt_scan_cpus(unsigned long node,
    * version 2 of the kexec param format adds the phys cpuid of
    * booted proc.
    */
-  if (be32_to_cpu(initial_boot_params->version) >= 2) {
+  if (fdt_version(initial_boot_params) >= 2) {
    if (be32_to_cpu(intserv[i]) ==
-       be32_to_cpu(initial_boot_params->boot_cpuid_phys)) {
+       fdt_boot_cpuid_phys(initial_boot_params)) {
     found = boot_cpu_count;
     found_thread = i;
    }
@@ -598,7 +599,7 @@ static void __init early_reserve_mem(void)
  unsigned long self_size;
 
  reserve_map = (__be64 *)(((unsigned long)initial_boot_params) +
-   be32_to_cpu(initial_boot_params->off_mem_rsvmap));
+   fdt_off_mem_rsvmap(initial_boot_params));
 
  /* before we do anything, lets reserve the dt blob */
  self_base = __pa((unsigned long)initial_boot_params);
-- 
1.7.1