From 2a6dd0643e458c1d58c968e2c12eb8e2ba15cff2 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:12:46 -0400
Subject: [powerpc] kvm/book3s_hv: Use threads_per_subcore in KVM

Message-id: <1410545655-205645-538-git-send-email-dzickus@redhat.com>
Patchwork-id: 94428
O-Subject: [RHEL7 PATCH 537/626] powerpc/kvm/book3s_hv: Use threads_per_subcore in KVM
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 3102f7843c75014fa15d3e6fda3b49f61bc467b4
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Fri May 23 18:15:29 2014 +1000

    powerpc/kvm/book3s_hv: Use threads_per_subcore in KVM

    To support split core on POWER8 we need to modify various parts of the
    KVM code to use threads_per_subcore instead of threads_per_core. On
    systems that do not support split core threads_per_subcore ==
    threads_per_core and these changes are a nop.

    We use threads_per_subcore as the value reported by KVM_CAP_PPC_SMT.
    This communicates to userspace that guests can only be created with
    a value of threads_per_core that is less than or equal to the current
    threads_per_subcore. This ensures that guests can only be created with a
    thread configuration that we are able to run given the current split
    core mode.

    Although threads_per_subcore can change during the life of the system,
    the commit that enables that will ensure that threads_per_subcore does
    not change during the life of a KVM VM.

    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Michael Neuling <mikey@neuling.org>
    Acked-by: Alexander Graf <agraf@suse.de>
    Acked-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_hv.c b/arch/powerpc/kvm/book3s_hv.c
index 5c09f30..4a0d58e 100644
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@ -1262,7 +1262,7 @@ static struct kvm_vcpu *kvmppc_core_vcpu_create_hv(struct kvm *kvm,
  int core;
  struct kvmppc_vcore *vcore;
 
- core = id / threads_per_core;
+ core = id / threads_per_subcore;
  if (core >= KVM_MAX_VCORES)
   goto out;
 
@@ -1301,7 +1301,7 @@ static struct kvm_vcpu *kvmppc_core_vcpu_create_hv(struct kvm *kvm,
    init_waitqueue_head(&vcore->wq);
    vcore->preempt_tb = TB_NIL;
    vcore->lpcr = kvm->arch.lpcr;
-   vcore->first_vcpuid = core * threads_per_core;
+   vcore->first_vcpuid = core * threads_per_subcore;
    vcore->kvm = kvm;
   }
   kvm->arch.vcores[core] = vcore;
@@ -1493,16 +1493,19 @@ static void kvmppc_wait_for_nap(struct kvmppc_vcore *vc)
 static int on_primary_thread(void)
 {
  int cpu = smp_processor_id();
- int thr = cpu_thread_in_core(cpu);
+ int thr;
 
- if (thr)
+ /* Are we on a primary subcore? */
+ if (cpu_thread_in_subcore(cpu))
   return 0;
- while (++thr < threads_per_core)
+
+ thr = 0;
+ while (++thr < threads_per_subcore)
   if (cpu_online(cpu + thr))
    return 0;
 
  /* Grab all hw threads so they can't go into the kernel */
- for (thr = 1; thr < threads_per_core; ++thr) {
+ for (thr = 1; thr < threads_per_subcore; ++thr) {
   if (kvmppc_grab_hwthread(cpu + thr)) {
    /* Couldn't grab one; let the others go */
    do {
@@ -1561,15 +1564,18 @@ static void kvmppc_run_core(struct kvmppc_vcore *vc)
  }
 
  /*
-  * Make sure we are running on thread 0, and that
-  * secondary threads are offline.
+  * Make sure we are running on primary threads, and that secondary
+  * threads are offline.  Also check if the number of threads in this
+  * guest are greater than the current system threads per guest.
   */
- if (threads_per_core > 1 && !on_primary_thread()) {
+ if ((threads_per_core > 1) &&
+     ((vc->num_threads > threads_per_subcore) || !on_primary_thread())) {
   list_for_each_entry(vcpu, &vc->runnable_threads, arch.run_list)
    vcpu->arch.ret = -EBUSY;
   goto out;
  }
 
+
  vc->pcpu = smp_processor_id();
  list_for_each_entry(vcpu, &vc->runnable_threads, arch.run_list) {
   kvmppc_start_thread(vcpu);
@@ -1597,7 +1603,7 @@ static void kvmppc_run_core(struct kvmppc_vcore *vc)
  /* wait for secondary threads to finish writing their state to memory */
  if (vc->nap_count < vc->n_woken)
   kvmppc_wait_for_nap(vc);
- for (i = 0; i < threads_per_core; ++i)
+ for (i = 0; i < threads_per_subcore; ++i)
   kvmppc_release_hwthread(vc->pcpu + i);
  /* prevent other vcpu threads from doing kvmppc_start_thread() now */
  vc->vcore_state = VCORE_EXITING;
diff --git a/arch/powerpc/kvm/powerpc.c b/arch/powerpc/kvm/powerpc.c
index b9b4687..a876a97 100644
--- a/arch/powerpc/kvm/powerpc.c
+++ b/arch/powerpc/kvm/powerpc.c
@@ -392,7 +392,7 @@ int kvm_dev_ioctl_check_extension(long ext)
 #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE
  case KVM_CAP_PPC_SMT:
   if (hv_enabled)
-   r = threads_per_core;
+   r = threads_per_subcore;
   else
    r = 0;
   break;
-- 
1.7.1