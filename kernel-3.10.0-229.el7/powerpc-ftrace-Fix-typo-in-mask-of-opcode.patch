From b91186a39abed22e217dcf939c3ef946d20b8b3a Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:13:33 -0400
Subject: [powerpc] ftrace: Fix typo in mask of opcode

Message-id: <1410545655-205645-585-git-send-email-dzickus@redhat.com>
Patchwork-id: 94598
O-Subject: [RHEL7 PATCH 584/626] powerpc/ftrace: Fix typo in mask of opcode
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit dfc382a19a2478768ef09d1c745b116e4fca9b4e
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Jun 17 16:15:33 2014 +1000

    powerpc/ftrace: Fix typo in mask of opcode

    In commit 24a1bdc35, "Fix ABIv2 issues with __ftrace_make_call", Anton
    changed the logic that checks for the expected code sequence when
    patching a module.

    We missed the typo in the mask, 0xffff00000 should be 0xffff0000, which
    has the effect of making the test always true.

    That makes it impossible to ftrace against modules, eg:

      Unexpected call sequence: 48000008 e8410018
      WARNING: at ../kernel/trace/ftrace.c:1638
      ftrace failed to modify [<d000000007cf001c>] rng_dev_open+0x1c/0x70 [rng_core]

    Reported-by: David Binderman <dcb314@hotmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kernel/ftrace.c b/arch/powerpc/kernel/ftrace.c
index 21aaccc..8261f1d 100644
--- a/arch/powerpc/kernel/ftrace.c
+++ b/arch/powerpc/kernel/ftrace.c
@@ -307,7 +307,7 @@ __ftrace_make_call(struct dyn_ftrace *rec, unsigned long addr)
   * The load offset is different depending on the ABI. For simplicity
   * just mask it out when doing the compare.
   */
- if ((op[0] != 0x48000008) || ((op[1] & 0xffff00000) != 0xe8410000)) {
+ if ((op[0] != 0x48000008) || ((op[1] & 0xffff0000) != 0xe8410000)) {
   printk(KERN_ERR "Unexpected call sequence: %x %x\n",
    op[0], op[1]);
   return -EINVAL;
-- 
1.7.1