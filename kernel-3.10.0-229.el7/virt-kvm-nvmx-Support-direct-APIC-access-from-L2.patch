From b3e285008bcb0f7867b45d32af06f0e3c90dbaa1 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:38:33 -0400
Subject: [virt] kvm/nvmx: Support direct APIC access from L2

Message-id: <1406040016-3289-119-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86197
O-Subject: [RHEL7 PATCH v2 118/221] KVM: nVMX: Support direct APIC access from L2
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jan Kiszka <jan.kiszka@siemens.com>

It's a pathological case, but still a valid one: If L1 disables APIC
virtualization and also allows L2 to directly write to the APIC page, we
have to forcibly enable APIC virtualization while in L2 if the in-kernel
APIC is in use.

This allows to run the direct interrupt test case in the vmx unit test
without x2APIC.

Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit ca3f257ae570c37d3da30a524a2f61ce602c6c99)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 4ca2445..fc37d77 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -7763,6 +7763,11 @@ static void prepare_vmcs02(struct kvm_vcpu *vcpu, struct vmcs12 *vmcs12)
    else
     vmcs_write64(APIC_ACCESS_ADDR,
       page_to_phys(vmx->nested.apic_access_page));
+  } else if (vm_need_virtualize_apic_accesses(vmx->vcpu.kvm)) {
+   exec_control |=
+    SECONDARY_EXEC_VIRTUALIZE_APIC_ACCESSES;
+   vmcs_write64(APIC_ACCESS_ADDR,
+    page_to_phys(vcpu->kvm->arch.apic_access_page));
   }
 
   vmcs_write32(SECONDARY_VM_EXEC_CONTROL, exec_control);
-- 
1.7.1