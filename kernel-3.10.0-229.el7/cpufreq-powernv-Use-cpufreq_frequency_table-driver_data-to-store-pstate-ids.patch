From 88dd27ded52f8d4586d786d2ce23e625e23f2823 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:14:02 -0400
Subject: [cpufreq] powernv: Use cpufreq_frequency_table.driver_data to store pstate ids

Message-id: <1410545655-205645-614-git-send-email-dzickus@redhat.com>
Patchwork-id: 94592
O-Subject: [RHEL7 PATCH 613/626] cpufreq: powernv: Use cpufreq_frequency_table.driver_data to store pstate ids
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 0692c69138355fdbf32ecf70a2cde9c1fc3d7bb2
Author: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
Date:   Tue Apr 1 12:43:27 2014 +0530

    cpufreq: powernv: Use cpufreq_frequency_table.driver_data to store pstate ids

    The .driver_data field in the cpufreq_frequency_table was supposed to
    be private to the drivers. However at some later point, it was being
    used to indicate if the particular frequency in the table is the
    BOOST_FREQUENCY. After patches [1] and [2], the .driver_data is once
    again private to the driver. Thus we can safely use
    cpufreq_frequency_table.driver_data to store pstate_ids instead of
    having to maintain a separate array powernv_pstate_ids[] for this
    purpose.

    [1]:
      Subject: cpufreq: don't print value of .driver_data from core
      From   : Viresh Kumar <viresh.kumar@ linaro.org>
      url    : http://marc.info/?l=linux-pm&m=139601421504709&w=2

    [2]:
      Subject: cpufreq: create another field .flags in cpufreq_frequency_table
      From   : Viresh Kumar <viresh.kumar@linaro.org>
      url    : http://marc.info/?l=linux-pm&m=139601416804702&w=2

    Signed-off-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/powernv-cpufreq.c b/drivers/cpufreq/powernv-cpufreq.c
index e1e5197..9edccc6 100644
--- a/drivers/cpufreq/powernv-cpufreq.c
+++ b/drivers/cpufreq/powernv-cpufreq.c
@@ -33,7 +33,6 @@
 #define POWERNV_MAX_PSTATES 256
 
 static struct cpufreq_frequency_table powernv_freqs[POWERNV_MAX_PSTATES+1];
-static int powernv_pstate_ids[POWERNV_MAX_PSTATES+1];
 
 /*
  * Note: The set of pstates consists of contiguous integers, the
@@ -112,7 +111,7 @@ static int init_powernv_pstates(void)
 
   pr_debug("PState id %d freq %d MHz\n", id, freq);
   powernv_freqs[i].frequency = freq * 1000; /* kHz */
-  powernv_pstate_ids[i] = id;
+  powernv_freqs[i].driver_data = id;
  }
  /* End of list marker entry */
  powernv_freqs[i].frequency = CPUFREQ_TABLE_END;
@@ -283,7 +282,7 @@ static int powernv_cpufreq_target_index(struct cpufreq_policy *policy,
 {
  struct powernv_smp_call_data freq_data;
 
- freq_data.pstate_id = powernv_pstate_ids[new_index];
+ freq_data.pstate_id = powernv_freqs[new_index].driver_data;
 
  /*
   * Use smp_call_function to send IPI and execute the
-- 
1.7.1