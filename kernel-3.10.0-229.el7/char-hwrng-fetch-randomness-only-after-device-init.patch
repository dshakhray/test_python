From 1bb7f8b4bde9f22be0c98e16d617e24af9042859 Mon Sep 17 00:00:00 2001
From: Amit Shah <amit.shah@redhat.com>
Date: Tue, 12 Aug 2014 11:30:54 -0400
Subject: [char] hwrng: fetch randomness only after device init

Message-id: <932485702eeaa43538af516cc74fa62d5b22fc79.1407842211.git.amit.shah@redhat.com>
Patchwork-id: 87651
O-Subject: [RHEL7.1 kernel PATCH 4/9] hwrng: fetch randomness only after device init
Bugzilla: 1119299
RH-Acked-by: Amos Kong <akong@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Herbert Xu <herbert.xu@redhat.com>

Commit d9e7972619334 "hwrng: add randomness to system from rng sources"
added a call to rng_get_data() from the hwrng_register() function.
However, some rng devices need initialization before data can be read
from them.

This commit makes the call to rng_get_data() depend on no init fn
pointer being registered by the device.  If an init function is
registered, this call is made after device init.

CC: Kees Cook <keescook@chromium.org>
CC: Jason Cooper <jason@lakedaemon.net>
CC: Herbert Xu <herbert@gondor.apana.org.au>
CC: <stable@vger.kernel.org> # For v3.15+
Signed-off-by: Amit Shah <amit.shah@redhat.com>
Reviewed-by: Jason Cooper <jason@lakedaemon.net>
Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit d3cc7996473a7bdd33256029988ea690754e4e2a)
Signed-off-by: Amit Shah <amit.shah@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/char/hw_random/core.c b/drivers/char/hw_random/core.c
index 7ac96fb..74ee3bd 100644
--- a/drivers/char/hw_random/core.c
+++ b/drivers/char/hw_random/core.c
@@ -56,16 +56,35 @@ static DEFINE_MUTEX(rng_mutex);
 static int data_avail;
 static u8 *rng_buffer;
 
+static inline int rng_get_data(struct hwrng *rng, u8 *buffer, size_t size,
+          int wait);
+
 static size_t rng_buffer_size(void)
 {
  return SMP_CACHE_BYTES < 32 ? 32 : SMP_CACHE_BYTES;
 }
 
+static void add_early_randomness(struct hwrng *rng)
+{
+ unsigned char bytes[16];
+ int bytes_read;
+
+ bytes_read = rng_get_data(rng, bytes, sizeof(bytes), 1);
+ if (bytes_read > 0)
+  add_device_randomness(bytes, bytes_read);
+}
+
 static inline int hwrng_init(struct hwrng *rng)
 {
- if (!rng->init)
-  return 0;
- return rng->init(rng);
+ if (rng->init) {
+  int ret;
+
+  ret =  rng->init(rng);
+  if (ret)
+   return ret;
+ }
+ add_early_randomness(rng);
+ return 0;
 }
 
 static inline void hwrng_cleanup(struct hwrng *rng)
@@ -305,8 +324,6 @@ int hwrng_register(struct hwrng *rng)
 {
  int err = -EINVAL;
  struct hwrng *old_rng, *tmp;
- unsigned char bytes[16];
- int bytes_read;
 
  if (rng->name == NULL ||
      (rng->data_read == NULL && rng->read == NULL))
@@ -348,9 +365,17 @@ int hwrng_register(struct hwrng *rng)
  INIT_LIST_HEAD(&rng->list);
  list_add_tail(&rng->list, &rng_list);
 
- bytes_read = rng_get_data(rng, bytes, sizeof(bytes), 1);
- if (bytes_read > 0)
-  add_device_randomness(bytes, bytes_read);
+ if (old_rng && !rng->init) {
+  /*
+   * Use a new device's input to add some randomness to
+   * the system.  If this rng device isn't going to be
+   * used right away, its init function hasn't been
+   * called yet; so only use the randomness from devices
+   * that don't need an init callback.
+   */
+  add_early_randomness(rng);
+ }
+
 out_unlock:
  mutex_unlock(&rng_mutex);
 out:
-- 
1.7.1