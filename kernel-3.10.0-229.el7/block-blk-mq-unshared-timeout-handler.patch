From 7ebbdc8385bc7067fa2c106238b2f90d60e5f0d8 Mon Sep 17 00:00:00 2001
From: Jeff Moyer <jmoyer@redhat.com>
Date: Fri, 10 Oct 2014 21:03:30 -0400
Subject: [block] blk-mq: unshared timeout handler

Message-id: <1412975015-5370-30-git-send-email-jmoyer@redhat.com>
Patchwork-id: 97474
O-Subject: [RHEL7 PATCH 29/34] blk-mq: unshared timeout handler
Bugzilla: 1146660
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Mike Snitzer <snitzer@redhat.com>

This is a backport of the following commit.  This resolves bug
1146660.

  commit 46f92d42ee37e10970e33891b7b61a342bd97aeb
  Author: Christoph Hellwig <hch@lst.de>
  Date:   Sat Sep 13 16:40:12 2014 -0700

    blk-mq: unshared timeout handler

    Duplicate the (small) timeout handler in blk-mq so that we can pass
    arguments more easily to the driver timeout handler.  This enables
    the next patch.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 71b498f..242adee 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -524,9 +524,15 @@ struct request *blk_mq_tag_to_rq(struct blk_mq_tags *tags, unsigned int tag)
 }
 EXPORT_SYMBOL(blk_mq_tag_to_rq);
 
-static enum blk_eh_timer_return blk_mq_rq_timed_out(struct request *rq)
+struct blk_mq_timeout_data {
+ unsigned long next;
+ unsigned int next_set;
+};
+
+static void blk_mq_rq_timed_out(struct request *req)
 {
- struct request_queue *q = rq->q;
+ struct blk_mq_ops *ops = req->q->mq_ops;
+ enum blk_eh_timer_return ret = BLK_EH_RESET_TIMER;
 
  /*
   * We know that complete is set at this point. If STARTED isn't set
@@ -537,27 +543,43 @@ static enum blk_eh_timer_return blk_mq_rq_timed_out(struct request *rq)
   * we both flags will get cleared. So check here again, and ignore
   * a timeout event with a request that isn't active.
   */
- if (!test_bit(REQ_ATOM_STARTED, &rq->atomic_flags))
-  return BLK_EH_NOT_HANDLED;
-
- if (!q->mq_ops->timeout)
-  return BLK_EH_RESET_TIMER;
+ if (!test_bit(REQ_ATOM_STARTED, &req->atomic_flags))
+  return;
 
- return q->mq_ops->timeout(rq);
+ if (ops->timeout)
+  ret = ops->timeout(req);
+
+ switch (ret) {
+ case BLK_EH_HANDLED:
+  __blk_mq_complete_request(req);
+  break;
+ case BLK_EH_RESET_TIMER:
+  blk_add_timer(req);
+  blk_clear_rq_complete(req);
+  break;
+ case BLK_EH_NOT_HANDLED:
+  break;
+ default:
+  printk(KERN_ERR "block: bad eh return: %d\n", ret);
+  break;
+ }
 }
   
-struct blk_mq_timeout_data {
- unsigned long next;
- unsigned int next_set;
-};
-
 static void blk_mq_check_expired(struct blk_mq_hw_ctx *hctx,
   struct request *rq, void *priv, bool reserved)
 {
  struct blk_mq_timeout_data *data = priv;
 
- if (test_bit(REQ_ATOM_STARTED, &rq->atomic_flags))
-  blk_rq_check_expired(rq, &data->next, &data->next_set);
+ if (!test_bit(REQ_ATOM_STARTED, &rq->atomic_flags))
+  return;
+
+ if (time_after_eq(jiffies, rq->deadline)) {
+  if (!blk_mark_rq_complete(rq))
+   blk_mq_rq_timed_out(rq);
+ } else if (!data->next_set || time_after(data->next, rq->deadline)) {
+  data->next = rq->deadline;
+  data->next_set = 1;
+ }
 }
 
 static void blk_mq_rq_timer(unsigned long priv)
@@ -1780,7 +1802,6 @@ struct request_queue *blk_mq_init_queue(struct blk_mq_tag_set *set)
  else
   blk_queue_make_request(q, blk_sq_make_request);
 
- blk_queue_rq_timed_out(q, blk_mq_rq_timed_out);
  if (set->timeout)
   blk_queue_rq_timeout(q, set->timeout);
 
diff --git a/block/blk-timeout.c b/block/blk-timeout.c
index 128586a..2fb1487 100644
--- a/block/blk-timeout.c
+++ b/block/blk-timeout.c
@@ -7,7 +7,6 @@
 #include <linux/fault-inject.h>
 
 #include "blk.h"
-#include "blk-mq.h"
 
 #ifdef CONFIG_FAIL_IO_TIMEOUT
 
@@ -89,10 +88,7 @@ static void blk_rq_timed_out(struct request *req)
  switch (ret) {
  case BLK_EH_HANDLED:
   /* Can we use req->errors here? */
-  if (q->mq_ops)
-   __blk_mq_complete_request(req);
-  else
-   __blk_complete_request(req);
+  __blk_complete_request(req);
   break;
  case BLK_EH_RESET_TIMER:
   blk_add_timer(req);
@@ -112,7 +108,7 @@ static void blk_rq_timed_out(struct request *req)
  }
 }
 
-void blk_rq_check_expired(struct request *rq, unsigned long *next_timeout,
+static void blk_rq_check_expired(struct request *rq, unsigned long *next_timeout,
      unsigned int *next_set)
 {
  if (time_after_eq(jiffies, rq->deadline)) {
diff --git a/block/blk.h b/block/blk.h
index 6748c4f..e515a28 100644
--- a/block/blk.h
+++ b/block/blk.h
@@ -38,8 +38,6 @@ bool __blk_end_bidi_request(struct request *rq, int error,
        unsigned int nr_bytes, unsigned int bidi_bytes);
 
 void blk_rq_timed_out_timer(unsigned long data);
-void blk_rq_check_expired(struct request *rq, unsigned long *next_timeout,
-     unsigned int *next_set);
 unsigned long blk_rq_timeout(unsigned long timeout);
 void blk_add_timer(struct request *req);
 void blk_delete_timer(struct request *);
-- 
1.7.1