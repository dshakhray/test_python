From 962122929cb28be1623ea618b43aeada91c7748f Mon Sep 17 00:00:00 2001
From: Aristeu Rozanski <aris@redhat.com>
Date: Mon, 12 May 2014 17:30:15 -0400
Subject: [tty] n_tty: Fix n_tty_write crash when echoing in raw mode

Message-id: <20140512173015.GF29214@redhat.com>
Patchwork-id: 5169
O-Subject: [kernel team] [RHEL7.1 PATCH] n_tty: Fix n_tty_write crash when echoing in raw mode
Bugzilla: 1094242
CVE: CVE-2014-0196
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Kyle McMartin <kmcmarti@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1094242
brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7442963
CVE-2014-0196
Tested using reproducer
upstream: 4291086b1f081b869c6d79e5b7441633dc3ace00

 Author: Peter Hurley <peter@hurleysoftware.com>
 Date:   Sat May 3 14:04:59 2014 +0200

     n_tty: Fix n_tty_write crash when echoing in raw mode

     The tty atomic_write_lock does not provide an exclusion guarantee for
     the tty driver if the termios settings are LECHO & !OPOST.  And since
     it is unexpected and not allowed to call TTY buffer helpers like
     tty_insert_flip_string concurrently, this may lead to crashes when
     concurrect writers call pty_write. In that case the following two
     writers:
     * the ECHOing from a workqueue and
     * pty_write from the process
     race and can overflow the corresponding TTY buffer like follows.

     If we look into tty_insert_flip_string_fixed_flag, there is:
       int space = __tty_buffer_request_room(port, goal, flags);
       struct tty_buffer *tb = port->buf.tail;
       ...
       memcpy(char_buf_ptr(tb, tb->used), chars, space);
       ...
       tb->used += space;

     so the race of the two can result in something like this:
     A                                B
     __tty_buffer_request_room
           __tty_buffer_request_room
     memcpy(buf(tb->used), ...)
     tb->used += space;
           memcpy(buf(tb->used), ...) ->BOOM

     B's memcpy is past the tty_buffer due to the previous A's tb->used
     increment.

     Since the N_TTY line discipline input processing can output
     concurrently with a tty write, obtain the N_TTY ldisc output_lock to
     serialize echo output with normal tty writes.  This ensures the tty
     buffer helper tty_insert_flip_string is not called concurrently and
     everything is fine.

     Note that this is nicely reproducible by an ordinary user using
     forkpty and some setup around that (raw termios + ECHO). And it is
     present in kernels at least after commit
     d945cb9cce20ac7143c2de8d88b187f62db99bdc (pty: Rework the pty layer to
     use the normal buffering logic) in 2.6.31-rc3.

     js: add more info to the commit log
     js: switch to bool
     js: lock unconditionally
     js: lock only the tty->ops->write call

     References: CVE-2014-0196
     Reported-and-tested-by: Jiri Slaby <jslaby@suse.cz>
     Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
     Signed-off-by: Jiri Slaby <jslaby@suse.cz>
     Cc: Linus Torvalds <torvalds@linux-foundation.org>
     Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
     Cc: <stable@vger.kernel.org>
     Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/tty/n_tty.c b/drivers/tty/n_tty.c
index 6c7fe90..6cfe401 100644
--- a/drivers/tty/n_tty.c
+++ b/drivers/tty/n_tty.c
@@ -2066,8 +2066,12 @@ static ssize_t n_tty_write(struct tty_struct *tty, struct file *file,
    if (tty->ops->flush_chars)
     tty->ops->flush_chars(tty);
   } else {
+   struct n_tty_data *ldata = tty->disc_data;
+
    while (nr > 0) {
+    mutex_lock(&ldata->output_lock);
     c = tty->ops->write(tty, b, nr);
+    mutex_unlock(&ldata->output_lock);
     if (c < 0) {
      retval = c;
      goto break_out;
-- 
1.7.1