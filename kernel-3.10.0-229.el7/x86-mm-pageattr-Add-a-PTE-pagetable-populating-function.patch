From df0f6f2df377b0a4ae29aec91f2040465dfac033 Mon Sep 17 00:00:00 2001
From: Dave Young <dyoung@redhat.com>
Date: Thu, 22 May 2014 02:43:02 -0400
Subject: [x86] mm/pageattr: Add a PTE pagetable populating function

Message-id: <1400726607-13717-11-git-send-email-dyoung@redhat.com>
Patchwork-id: 80111
O-Subject: [RHEL7.1 PATCH 10/35] x86/mm/pageattr: Add a PTE pagetable populating function
Bugzilla: 1080109
RH-Acked-by: Chao WANG <chaowang@redhat.com>
RH-Acked-by: Vivek Goyal <vgoyal@redhat.com>

Resolves: bz1080109

Brew build:
https://brewweb.devel.redhat.com/taskinfo?taskID=7480539

Test: Tested kexec/kdump on HP workstation and qemu.

Upstream commit:
commit c6b6f363f7b24aa448994e3a65c4d5b3116acfcc
Author: Borislav Petkov <bp@suse.de>
Date:   Thu Oct 31 17:25:04 2013 +0100

    x86/mm/pageattr: Add a PTE pagetable populating function

    Handle last level by unconditionally writing the PTEs into the PTE page
    while paying attention to the NX bit.

    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Matt Fleming <matt.fleming@intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index 968398b..2a1308a 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -686,7 +686,27 @@ static int alloc_pmd_page(pud_t *pud)
  return 0;
 }
 
-#define populate_pte(cpa, start, end, pages, pmd, pgprot) do {} while (0)
+static void populate_pte(struct cpa_data *cpa,
+    unsigned long start, unsigned long end,
+    unsigned num_pages, pmd_t *pmd, pgprot_t pgprot)
+{
+ pte_t *pte;
+
+ pte = pte_offset_kernel(pmd, start);
+
+ while (num_pages-- && start < end) {
+
+  /* deal with the NX bit */
+  if (!(pgprot_val(pgprot) & _PAGE_NX))
+   cpa->pfn &= ~_PAGE_NX;
+
+  set_pte(pte, pfn_pte(cpa->pfn >> PAGE_SHIFT, pgprot));
+
+  start  += PAGE_SIZE;
+  cpa->pfn += PAGE_SIZE;
+  pte++;
+ }
+}
 
 static int populate_pmd(struct cpa_data *cpa,
    unsigned long start, unsigned long end,
-- 
1.7.1