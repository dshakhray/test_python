From 7bbfdb1dbe7b8532f71d4aab0951eb7081108761 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Wed, 25 Jun 2014 10:31:54 -0400
Subject: [net] sctp: Fix sk_ack_backlog wrap-around problem

Message-id: <03a95116c1ab53b4899e5f144a8b7f29b3b9250e.1403690845.git.dborkman@redhat.com>
Patchwork-id: 84757
O-Subject: [RHEL7 PATCH net] sctp: Fix sk_ack_backlog wrap-around problem
Bugzilla: 1112726
CVE: CVE-2014-4667
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1112726
Upstream Status: d3217b15a19a4779c39b212358a5c71d725822ee
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7617948
Tested: verified on beaker with my own nfqueue reproducer hack
        [ leaving the server intact and flushing iptables rules
          will let next connection attempt succeed, while before
          aborts are still sent due to backlog wrap-around ]

Upstream Commit:
commit d3217b15a19a4779c39b212358a5c71d725822ee
Author: Xufeng Zhang <xufeng.zhang@windriver.com>
Date:   Thu Jun 12 10:53:36 2014 +0800

    sctp: Fix sk_ack_backlog wrap-around problem

    Consider the scenario:
    For a TCP-style socket, while processing the COOKIE_ECHO chunk in
    sctp_sf_do_5_1D_ce(), after it has passed a series of sanity check,
    a new association would be created in sctp_unpack_cookie(), but afterwards,
    some processing maybe failed, and sctp_association_free() will be called to
    free the previously allocated association, in sctp_association_free(),
    sk_ack_backlog value is decremented for this socket, since the initial
    value for sk_ack_backlog is 0, after the decrement, it will be 65535,
    a wrap-around problem happens, and if we want to establish new associations
    afterward in the same socket, ABORT would be triggered since sctp deem the
    accept queue as full.
    Fix this issue by only decrementing sk_ack_backlog for associations in
    the endpoint's list.

    Fix-suggested-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: Xufeng Zhang <xufeng.zhang@windriver.com>
    Acked-by: Daniel Borkmann <dborkman@redhat.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/sctp/associola.c b/net/sctp/associola.c
index 91cfd8f..229b3c3 100644
--- a/net/sctp/associola.c
+++ b/net/sctp/associola.c
@@ -387,7 +387,7 @@ void sctp_association_free(struct sctp_association *asoc)
  /* Only real associations count against the endpoint, so
   * don't bother for if this is a temporary association.
   */
- if (!asoc->temp) {
+ if (!list_empty(&asoc->asocs)) {
   list_del(&asoc->asocs);
 
   /* Decrement the backlog value for a TCP-style listening
-- 
1.7.1