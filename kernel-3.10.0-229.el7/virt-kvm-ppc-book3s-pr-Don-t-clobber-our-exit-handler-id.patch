From 7b7c95247f007cc862eda4c2bbbeac0fc47d6d39 Mon Sep 17 00:00:00 2001
From: David Gibson <dgibson@redhat.com>
Date: Mon, 15 Sep 2014 07:12:31 -0400
Subject: [virt] kvm/ppc: book3s/pr - Don't clobber our exit handler id

Message-id: <1410765214-16377-16-git-send-email-dgibson@redhat.com>
Patchwork-id: 94709
O-Subject: [PATCH 15/78] KVM: PPC: Book3S: PR: Don't clobber our exit handler id
Bugzilla: 1123145 1123133 1123367
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1123145

Signed-off-by: David Gibson <dgibson@redhat.com>

commit d825a04387ff4ce66117306f2862c7cedca5c597
Author: Alexander Graf <agraf@suse.de>
Date:   Fri Nov 29 02:24:18 2013 +0100

    KVM: PPC: Book3S: PR: Don't clobber our exit handler id

    We call a C helper to save all svcpu fields into our vcpu. The C
    ABI states that r12 is considered volatile. However, we keep our
    exit handler id in r12 currently.

    So we need to save it away into a non-volatile register instead
    that definitely does get preserved across the C call.

    This bug usually didn't hit anyone yet since gcc is smart enough
    to generate code that doesn't even need r12 which means it stayed
    identical throughout the call by sheer luck. But we can't rely on
    that.

    Signed-off-by: Alexander Graf <agraf@suse.de>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 arch/powerpc/kvm/book3s_interrupts.S
---

diff --git a/arch/powerpc/kvm/book3s_interrupts.S b/arch/powerpc/kvm/book3s_interrupts.S
index f4dd041..7fb7b59 100644
--- a/arch/powerpc/kvm/book3s_interrupts.S
+++ b/arch/powerpc/kvm/book3s_interrupts.S
@@ -132,9 +132,17 @@ kvm_start_lightweight:
   *
   */
 
+ PPC_LL r3, GPR4(r1)  /* vcpu pointer */
+
+ /*
+  * kvmppc_copy_from_svcpu can clobber volatile registers, save
+  * the exit handler id to the vcpu and restore it from there later.
+  */
+ stw r12, VCPU_TRAP(r3)
+
  /* Transfer reg values from shadow vcpu back to vcpu struct */
  /* On 64-bit, interrupts are still off at this point */
- PPC_LL r3, GPR4(r1)  /* vcpu pointer */
+
  GET_SHADOW_VCPU(r4)
  bl FUNC(kvmppc_copy_from_svcpu)
  nop
@@ -177,7 +185,7 @@ kvm_start_lightweight:
  PPC_STL r31, VCPU_GPR(R31)(r7)
 
  /* Pass the exit number as 3rd argument to kvmppc_handle_exit */
- mr r5, r12
+ lwz r5, VCPU_TRAP(r7)
 
  /* Restore r3 (kvm_run) and r4 (vcpu) */
  REST_2GPRS(3, r1)
-- 
1.7.1