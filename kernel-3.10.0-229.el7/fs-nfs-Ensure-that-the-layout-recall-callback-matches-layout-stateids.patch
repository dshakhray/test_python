From c72c1dd455b8d5bf2158cedb56fdc1ad7dd729dd Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:33:18 -0400
Subject: [fs] nfs: Ensure that the layout recall callback matches layout stateids

Message-id: <1403796815-28580-13-git-send-email-steved@redhat.com>
Patchwork-id: 84863
O-Subject: [RHEL7.1 PATCH 12/29] NFSv4.1: Ensure that the layout recall callback matches layout stateids
Bugzilla: 1111170
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

It is not sufficient to compare filehandles when we receive a layout
recall from the server; we also need to check that the layout stateids
match.

Reported-by: shaobingqing <shaobingqing@bwstor.com.cn>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upsteam Id: 27999f253010bd64fd63dc80c99f8e926e2b110d
Bugzilla: 1111170
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/callback_proc.c b/fs/nfs/callback_proc.c
index ae2e87b..570c8a1 100644
--- a/fs/nfs/callback_proc.c
+++ b/fs/nfs/callback_proc.c
@@ -112,7 +112,8 @@ out:
  * TODO: keep track of all layouts (and delegations) in a hash table
  * hashed by filehandle.
  */
-static struct pnfs_layout_hdr * get_layout_by_fh_locked(struct nfs_client *clp, struct nfs_fh *fh)
+static struct pnfs_layout_hdr * get_layout_by_fh_locked(struct nfs_client *clp,
+  struct nfs_fh *fh, nfs4_stateid *stateid)
 {
  struct nfs_server *server;
  struct inode *ino;
@@ -120,6 +121,8 @@ static struct pnfs_layout_hdr * get_layout_by_fh_locked(struct nfs_client *clp,
 
  list_for_each_entry_rcu(server, &clp->cl_superblocks, client_link) {
   list_for_each_entry(lo, &server->layouts, plh_layouts) {
+   if (!nfs4_stateid_match_other(&lo->plh_stateid, stateid))
+    continue;
    if (nfs_compare_fh(fh, &NFS_I(lo->plh_inode)->fh))
     continue;
    ino = igrab(lo->plh_inode);
@@ -141,13 +144,14 @@ static struct pnfs_layout_hdr * get_layout_by_fh_locked(struct nfs_client *clp,
  return NULL;
 }
 
-static struct pnfs_layout_hdr * get_layout_by_fh(struct nfs_client *clp, struct nfs_fh *fh)
+static struct pnfs_layout_hdr * get_layout_by_fh(struct nfs_client *clp,
+  struct nfs_fh *fh, nfs4_stateid *stateid)
 {
  struct pnfs_layout_hdr *lo;
 
  spin_lock(&clp->cl_lock);
  rcu_read_lock();
- lo = get_layout_by_fh_locked(clp, fh);
+ lo = get_layout_by_fh_locked(clp, fh, stateid);
  rcu_read_unlock();
  spin_unlock(&clp->cl_lock);
 
@@ -162,9 +166,9 @@ static u32 initiate_file_draining(struct nfs_client *clp,
  u32 rv = NFS4ERR_NOMATCHING_LAYOUT;
  LIST_HEAD(free_me_list);
 
- lo = get_layout_by_fh(clp, &args->cbl_fh);
+ lo = get_layout_by_fh(clp, &args->cbl_fh, &args->cbl_stateid);
  if (!lo)
-  return NFS4ERR_NOMATCHING_LAYOUT;
+  goto out;
 
  ino = lo->plh_inode;
  spin_lock(&ino->i_lock);
@@ -179,6 +183,7 @@ static u32 initiate_file_draining(struct nfs_client *clp,
  pnfs_free_lseg_list(&free_me_list);
  pnfs_put_layout_hdr(lo);
  iput(ino);
+out:
  return rv;
 }
 
-- 
1.7.1