From 0460d39ec716c7f23f787c48a38b8213f0880d8f Mon Sep 17 00:00:00 2001
From: Vivek Goyal <vgoyal@redhat.com>
Date: Tue, 19 Aug 2014 22:02:56 -0400
Subject: [crypto] keys: validate certificate trust only with selected key

Message-id: <1408485785-777-25-git-send-email-vgoyal@redhat.com>
Patchwork-id: 88377
O-Subject: [RHEL7.1 PATCH 24/33] KEYS: validate certificate trust only with selected key
Bugzilla: 1129779
RH-Acked-by: David Howells <dhowells@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

BZ:1129779

commit ffb70f61bab1482a3bd0f85fd8f1e9c9909df2ca
Author: Dmitry Kasatkin <d.kasatkin@samsung.com>
Date: Tue, 17 Jun 2014 11:56:58 +0300

Instead of allowing public keys, with certificates signed by any
key on the system trusted keyring, to be added to a trusted keyring,
this patch further restricts the certificates to those signed by a
particular key on the system keyring.

This patch defines a new kernel parameter 'ca_keys' to identify the
specific key which must be used for trust validation of certificates.

Simplified Mimi's "KEYS: define an owner trusted keyring" patch.

Changelog:
- support for builtin x509 public keys only
- export "asymmetric_keyid_match"
- remove ifndefs MODULE
- rename kernel boot parameter from keys_ownerid to ca_keys

Signed-off-by: Dmitry Kasatkin <d.kasatkin@samsung.com>
Signed-off-by: Mimi Zohar <zohar@linux.vnet.ibm.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index a058403..ed9893d 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -458,6 +458,11 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
    possible to determine what the correct size should be.
    This option provides an override for these situations.
 
+ ca_keys= [KEYS] This parameter identifies a specific key(s) on
+   the system trusted keyring to be used for certificate
+   trust validation.
+   format: id:<keyid>
+
  ccw_timeout_log [S390]
    See Documentation/s390/CommonIO for details.
 
diff --git a/crypto/asymmetric_keys/asymmetric_type.c b/crypto/asymmetric_keys/asymmetric_type.c
index 1fd1d30..c948df5 100644
--- a/crypto/asymmetric_keys/asymmetric_type.c
+++ b/crypto/asymmetric_keys/asymmetric_type.c
@@ -49,6 +49,7 @@ int asymmetric_keyid_match(const char *kid, const char *id)
 
  return 1;
 }
+EXPORT_SYMBOL_GPL(asymmetric_keyid_match);
 
 /*
  * Match asymmetric keys on (part of) their name
diff --git a/crypto/asymmetric_keys/x509_public_key.c b/crypto/asymmetric_keys/x509_public_key.c
index fa8a8a0..2b40eba 100644
--- a/crypto/asymmetric_keys/x509_public_key.c
+++ b/crypto/asymmetric_keys/x509_public_key.c
@@ -24,6 +24,22 @@
 #include "public_key.h"
 #include "x509_parser.h"
 
+static char *ca_keyid;
+
+#ifndef MODULE
+static int __init ca_keys_setup(char *str)
+{
+ if (!str)  /* default system keyring */
+  return 1;
+
+ if (strncmp(str, "id:", 3) == 0)
+  ca_keyid = str; /* owner key 'id:xxxxxx' */
+
+ return 1;
+}
+__setup("ca_keys=", ca_keys_setup);
+#endif
+
 /*
  * Find a key in the given keyring by issuer and authority.
  */
@@ -171,6 +187,9 @@ static int x509_validate_trust(struct x509_certificate *cert,
  if (!trust_keyring)
   return -EOPNOTSUPP;
 
+ if (ca_keyid && !asymmetric_keyid_match(cert->authority, ca_keyid))
+  return -EPERM;
+
  key = x509_request_asymmetric_key(trust_keyring,
        cert->issuer, strlen(cert->issuer),
        cert->authority,
-- 
1.7.1