From 92bc55e9a0beb5a2cf9c9e63ff38b1bf52fe9c14 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:14:13 -0400
Subject: [pci] rphahp: Fix endianess issues

Message-id: <1410545655-205645-625-git-send-email-dzickus@redhat.com>
Patchwork-id: 94471
O-Subject: [RHEL7 PATCH 624/626] PCI: rphahp: Fix endianess issues
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 761ce53330a4f02c58768631027d1c1dd0d538f7
Author: Laurent Dufour <ldufour@linux.vnet.ibm.com>
Date:   Thu Apr 10 15:02:13 2014 +0200

    PCI: rphahp: Fix endianess issues

    Numerical values stored in the device tree are encoded in Big Endian and
    should be byte swapped when running in Little Endian.

    The RPA hotplug module should convert those values as well.

    Note that in rpaphp_get_drc_props(), the comparison between indexes[i+1]
    and *index is done using the BE values (whatever is the current endianess).
    This doesn't matter since we are checking for equality here.  This way only
    the returned value is byte swapped.

    RPA also made RTAS calls which implies BE values to be used.  According to
    the patch done in RTAS (http://patchwork.ozlabs.org/patch/336865), no
    additional conversion is required in RPA.

    Signed-off-by: Laurent Dufour <ldufour@linux.vnet.ibm.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/rpaphp_core.c b/drivers/pci/hotplug/rpaphp_core.c
index 4796c15..984d708 100644
--- a/drivers/pci/hotplug/rpaphp_core.c
+++ b/drivers/pci/hotplug/rpaphp_core.c
@@ -223,16 +223,16 @@ int rpaphp_get_drc_props(struct device_node *dn, int *drc_index,
  type_tmp = (char *) &types[1];
 
  /* Iterate through parent properties, looking for my-drc-index */
- for (i = 0; i < indexes[0]; i++) {
+ for (i = 0; i < be32_to_cpu(indexes[0]); i++) {
   if ((unsigned int) indexes[i + 1] == *my_index) {
    if (drc_name)
     *drc_name = name_tmp;
    if (drc_type)
     *drc_type = type_tmp;
    if (drc_index)
-    *drc_index = *my_index;
+    *drc_index = be32_to_cpu(*my_index);
    if (drc_power_domain)
-    *drc_power_domain = domains[i+1];
+    *drc_power_domain = be32_to_cpu(domains[i+1]);
    return 0;
   }
   name_tmp += (strlen(name_tmp) + 1);
@@ -321,16 +321,19 @@ int rpaphp_add_slot(struct device_node *dn)
  /* register PCI devices */
  name = (char *) &names[1];
  type = (char *) &types[1];
- for (i = 0; i < indexes[0]; i++) {
+ for (i = 0; i < be32_to_cpu(indexes[0]); i++) {
+  int index;
 
-  slot = alloc_slot_struct(dn, indexes[i + 1], name, power_domains[i + 1]);
+  index = be32_to_cpu(indexes[i + 1]);
+  slot = alloc_slot_struct(dn, index, name,
+      be32_to_cpu(power_domains[i + 1]));
   if (!slot)
    return -ENOMEM;
 
   slot->type = simple_strtoul(type, NULL, 10);
 
   dbg("Found drc-index:0x%x drc-name:%s drc-type:%s\n",
-    indexes[i + 1], name, type);
+    index, name, type);
 
   retval = rpaphp_enable_slot(slot);
   if (!retval)
-- 
1.7.1