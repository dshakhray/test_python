From 91ff368f013efa5d635bda2b09cb55e0321ab2dd Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:16 -0400
Subject: [tools] perf: Add callback function to hist_entry_iter

Message-id: <1410181752-25631-252-git-send-email-jolsa@redhat.com>
Patchwork-id: 91955
O-Subject: [PATCH RHEL7.1 BZ1134356 251/307] perf tools: Add callback function to hist_entry_iter
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 9d3c02d7188866299eebe3c4a652c08140a71f40
Author: Namhyung Kim <namhyung@kernel.org>
Date: Tue Jan 7 17:02:25 2014 +0900

description
===========
The new ->add_entry_cb() will be called after an entry was added to
the histogram.  It's used for code sharing between perf report and
perf top.  Note that ops->add_*_entry() should set iter->he properly
in order to call the ->add_entry_cb.

Also pass @arg to the callback function.  It'll be used by perf top
later.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index 6cac509..21d830b 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -80,14 +80,59 @@ static int report__config(const char *var, const char *value, void *cb)
  return perf_default_config(var, value, cb);
 }
 
-static void report__inc_stats(struct report *rep,
-         struct hist_entry *he __maybe_unused)
+static void report__inc_stats(struct report *rep, struct hist_entry *he)
 {
  /*
-  * We cannot access @he at this time.  Just assume it's a new entry.
-  * It'll be fixed once we have a callback mechanism in hist_iter.
+  * The @he is either of a newly created one or an existing one
+  * merging current sample.  We only want to count a new one so
+  * checking ->nr_events being 1.
   */
- rep->nr_entries++;
+ if (he->stat.nr_events == 1)
+  rep->nr_entries++;
+}
+
+static int hist_iter__report_callback(struct hist_entry_iter *iter,
+          struct addr_location *al, bool single,
+          void *arg)
+{
+ int err = 0;
+ struct report *rep = arg;
+ struct hist_entry *he = iter->he;
+ struct perf_evsel *evsel = iter->evsel;
+ struct mem_info *mi;
+ struct branch_info *bi;
+
+ report__inc_stats(rep, he);
+
+ if (!ui__has_annotation())
+  return 0;
+
+ if (sort__mode == SORT_MODE__BRANCH) {
+  bi = he->branch_info;
+  err = addr_map_symbol__inc_samples(&bi->from, evsel->idx);
+  if (err)
+   goto out;
+
+  err = addr_map_symbol__inc_samples(&bi->to, evsel->idx);
+
+ } else if (rep->mem_mode) {
+  mi = he->mem_info;
+  err = addr_map_symbol__inc_samples(&mi->daddr, evsel->idx);
+  if (err)
+   goto out;
+
+  err = hist_entry__inc_addr_samples(he, evsel->idx, al->addr);
+
+ } else if (symbol_conf.cumulate_callchain) {
+  if (single)
+   err = hist_entry__inc_addr_samples(he, evsel->idx,
+          al->addr);
+ } else {
+  err = hist_entry__inc_addr_samples(he, evsel->idx, al->addr);
+ }
+
+out:
+ return err;
 }
 
 static int process_sample_event(struct perf_tool *tool,
@@ -100,6 +145,7 @@ static int process_sample_event(struct perf_tool *tool,
  struct addr_location al;
  struct hist_entry_iter iter = {
   .hide_unresolved = rep->hide_unresolved,
+  .add_entry_cb = hist_iter__report_callback,
  };
  int ret;
 
@@ -127,9 +173,8 @@ static int process_sample_event(struct perf_tool *tool,
  if (al.map != NULL)
   al.map->dso->hit = 1;
 
- report__inc_stats(rep, NULL);
-
- ret = hist_entry_iter__add(&iter, &al, evsel, sample, rep->max_stack);
+ ret = hist_entry_iter__add(&iter, &al, evsel, sample, rep->max_stack,
+       rep);
  if (ret < 0)
   pr_debug("problem adding hist entry, skipping event\n");
 
diff --git a/tools/perf/tests/hists_filter.c b/tools/perf/tests/hists_filter.c
index 76b02e1..3539403 100644
--- a/tools/perf/tests/hists_filter.c
+++ b/tools/perf/tests/hists_filter.c
@@ -82,7 +82,7 @@ static int add_hist_entries(struct perf_evlist *evlist,
     goto out;
 
    if (hist_entry_iter__add(&iter, &al, evsel, &sample,
-       PERF_MAX_STACK_DEPTH) < 0)
+       PERF_MAX_STACK_DEPTH, NULL) < 0)
     goto out;
 
    fake_samples[i].thread = al.thread;
diff --git a/tools/perf/tests/hists_output.c b/tools/perf/tests/hists_output.c
index 1308f88..d40461e 100644
--- a/tools/perf/tests/hists_output.c
+++ b/tools/perf/tests/hists_output.c
@@ -71,7 +71,7 @@ static int add_hist_entries(struct hists *hists, struct machine *machine)
    goto out;
 
   if (hist_entry_iter__add(&iter, &al, evsel, &sample,
-      PERF_MAX_STACK_DEPTH) < 0)
+      PERF_MAX_STACK_DEPTH, NULL) < 0)
    goto out;
 
   fake_samples[i].thread = al.thread;
diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index c6f5f52..5a0a4b2 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -517,27 +517,16 @@ iter_add_single_mem_entry(struct hist_entry_iter *iter, struct addr_location *al
 }
 
 static int
-iter_finish_mem_entry(struct hist_entry_iter *iter, struct addr_location *al)
+iter_finish_mem_entry(struct hist_entry_iter *iter,
+        struct addr_location *al __maybe_unused)
 {
  struct perf_evsel *evsel = iter->evsel;
  struct hist_entry *he = iter->he;
- struct mem_info *mx;
  int err = -EINVAL;
 
  if (he == NULL)
   goto out;
 
- if (ui__has_annotation()) {
-  err = hist_entry__inc_addr_samples(he, evsel->idx, al->addr);
-  if (err)
-   goto out;
-
-  mx = he->mem_info;
-  err = addr_map_symbol__inc_samples(&mx->daddr, evsel->idx);
-  if (err)
-   goto out;
- }
-
  hists__inc_nr_samples(&evsel->hists, he->filtered);
 
  err = hist_entry__append_callchain(he, iter->sample);
@@ -575,6 +564,9 @@ static int
 iter_add_single_branch_entry(struct hist_entry_iter *iter __maybe_unused,
         struct addr_location *al __maybe_unused)
 {
+ /* to avoid calling callback function */
+ iter->he = NULL;
+
  return 0;
 }
 
@@ -599,7 +591,7 @@ iter_next_branch_entry(struct hist_entry_iter *iter, struct addr_location *al)
 static int
 iter_add_next_branch_entry(struct hist_entry_iter *iter, struct addr_location *al)
 {
- struct branch_info *bi, *bx;
+ struct branch_info *bi;
  struct perf_evsel *evsel = iter->evsel;
  struct hist_entry *he = NULL;
  int i = iter->curr;
@@ -619,17 +611,6 @@ iter_add_next_branch_entry(struct hist_entry_iter *iter, struct addr_location *a
  if (he == NULL)
   return -ENOMEM;
 
- if (ui__has_annotation()) {
-  bx = he->branch_info;
-  err = addr_map_symbol__inc_samples(&bx->from, evsel->idx);
-  if (err)
-   goto out;
-
-  err = addr_map_symbol__inc_samples(&bx->to, evsel->idx);
-  if (err)
-   goto out;
- }
-
  hists__inc_nr_samples(&evsel->hists, he->filtered);
 
 out:
@@ -673,9 +654,9 @@ iter_add_single_normal_entry(struct hist_entry_iter *iter, struct addr_location
 }
 
 static int
-iter_finish_normal_entry(struct hist_entry_iter *iter, struct addr_location *al)
+iter_finish_normal_entry(struct hist_entry_iter *iter,
+    struct addr_location *al __maybe_unused)
 {
- int err;
  struct hist_entry *he = iter->he;
  struct perf_evsel *evsel = iter->evsel;
  struct perf_sample *sample = iter->sample;
@@ -685,12 +666,6 @@ iter_finish_normal_entry(struct hist_entry_iter *iter, struct addr_location *al)
 
  iter->he = NULL;
 
- if (ui__has_annotation()) {
-  err = hist_entry__inc_addr_samples(he, evsel->idx, al->addr);
-  if (err)
-   return err;
- }
-
  hists__inc_nr_samples(&evsel->hists, he->filtered);
 
  return hist_entry__append_callchain(he, sample);
@@ -746,13 +721,6 @@ iter_add_single_cumulative_entry(struct hist_entry_iter *iter,
   */
  callchain_cursor_commit(&callchain_cursor);
 
- /*
-  * The iter->he will be over-written after ->add_next_entry()
-  * called so inc stats for the original entry now.
-  */
- if (ui__has_annotation())
-  err = hist_entry__inc_addr_samples(he, evsel->idx, al->addr);
-
  hists__inc_nr_samples(&evsel->hists, he->filtered);
 
  return err;
@@ -802,8 +770,11 @@ iter_add_next_cumulative_entry(struct hist_entry_iter *iter,
   * It's possible that it has cycles or recursive calls.
   */
  for (i = 0; i < iter->curr; i++) {
-  if (hist_entry__cmp(he_cache[i], &he_tmp) == 0)
+  if (hist_entry__cmp(he_cache[i], &he_tmp) == 0) {
+   /* to avoid calling callback function */
+   iter->he = NULL;
    return 0;
+  }
  }
 
  he = __hists__add_entry(&evsel->hists, al, iter->parent, NULL, NULL,
@@ -863,7 +834,7 @@ const struct hist_iter_ops hist_iter_cumulative = {
 
 int hist_entry_iter__add(struct hist_entry_iter *iter, struct addr_location *al,
     struct perf_evsel *evsel, struct perf_sample *sample,
-    int max_stack_depth)
+    int max_stack_depth, void *arg)
 {
  int err, err2;
 
@@ -883,10 +854,22 @@ int hist_entry_iter__add(struct hist_entry_iter *iter, struct addr_location *al,
  if (err)
   goto out;
 
+ if (iter->he && iter->add_entry_cb) {
+  err = iter->add_entry_cb(iter, al, true, arg);
+  if (err)
+   goto out;
+ }
+
  while (iter->ops->next_entry(iter, al)) {
   err = iter->ops->add_next_entry(iter, al);
   if (err)
    break;
+
+  if (iter->he && iter->add_entry_cb) {
+   err = iter->add_entry_cb(iter, al, false, arg);
+   if (err)
+    goto out;
+  }
  }
 
 out:
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index 99ad3cb..82b28ff 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -119,6 +119,9 @@ struct hist_entry_iter {
  void *priv;
 
  const struct hist_iter_ops *ops;
+ /* user-defined callback function (optional) */
+ int (*add_entry_cb)(struct hist_entry_iter *iter,
+       struct addr_location *al, bool single, void *arg);
 };
 
 extern const struct hist_iter_ops hist_iter_normal;
@@ -135,7 +138,7 @@ struct hist_entry *__hists__add_entry(struct hists *hists,
           bool sample_self);
 int hist_entry_iter__add(struct hist_entry_iter *iter, struct addr_location *al,
     struct perf_evsel *evsel, struct perf_sample *sample,
-    int max_stack_depth);
+    int max_stack_depth, void *arg);
 
 int64_t hist_entry__cmp(struct hist_entry *left, struct hist_entry *right);
 int64_t hist_entry__collapse(struct hist_entry *left, struct hist_entry *right);
-- 
1.7.1