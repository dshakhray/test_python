From c175bb49f24da875b97c89f88e557153e9531ab4 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Mon, 14 Jul 2014 18:58:34 -0400
Subject: [idle] intel_idle: fine-tune IVT residency targets

Message-id: <1405364315-27440-7-git-send-email-prarit@redhat.com>
Patchwork-id: 85796
O-Subject: [RHEL7.1 PATCH BZ 1119374 6/7] intel_idle: fine-tune IVT residency targets
Bugzilla: 1119374
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1119374

commit 0138d8f0755b5b28d0acdb0a758bcfcaf441fc58
Author: Len Brown <len.brown@intel.com>
Date:   Fri Apr 4 01:21:07 2014 -0400

    intel_idle: fine-tune IVT residency targets

    Ivy Town processors have slightly different properties
    than Ivy Bridge processors, particuarly as socket count grows.
    Here we add dedicated tables covering 1-2 socket,
    3-4 socket, and > 4 socket IVT configurations.

    This reduces the frequency of deep transitions on those systems,
    which can impact throughput.

    Signed-off-by: Len Brown <len.brown@intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c
index a14bbd8..cf78dc1 100644
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@ -236,6 +236,105 @@ static struct cpuidle_state ivb_cstates[] = {
   .enter = NULL }
 };
 
+static struct cpuidle_state ivt_cstates[] = {
+ {
+  .name = "C1-IVT",
+  .desc = "MWAIT 0x00",
+  .flags = MWAIT2flg(0x00) | CPUIDLE_FLAG_TIME_VALID,
+  .exit_latency = 1,
+  .target_residency = 1,
+  .enter = &intel_idle },
+ {
+  .name = "C1E-IVT",
+  .desc = "MWAIT 0x01",
+  .flags = MWAIT2flg(0x01) | CPUIDLE_FLAG_TIME_VALID,
+  .exit_latency = 10,
+  .target_residency = 80,
+  .enter = &intel_idle },
+ {
+  .name = "C3-IVT",
+  .desc = "MWAIT 0x10",
+  .flags = MWAIT2flg(0x10) | CPUIDLE_FLAG_TIME_VALID | CPUIDLE_FLAG_TLB_FLUSHED,
+  .exit_latency = 59,
+  .target_residency = 156,
+  .enter = &intel_idle },
+ {
+  .name = "C6-IVT",
+  .desc = "MWAIT 0x20",
+  .flags = MWAIT2flg(0x20) | CPUIDLE_FLAG_TIME_VALID | CPUIDLE_FLAG_TLB_FLUSHED,
+  .exit_latency = 82,
+  .target_residency = 300,
+  .enter = &intel_idle },
+ {
+  .enter = NULL }
+};
+
+static struct cpuidle_state ivt_cstates_4s[] = {
+ {
+  .name = "C1-IVT-4S",
+  .desc = "MWAIT 0x00",
+  .flags = MWAIT2flg(0x00) | CPUIDLE_FLAG_TIME_VALID,
+  .exit_latency = 1,
+  .target_residency = 1,
+  .enter = &intel_idle },
+ {
+  .name = "C1E-IVT-4S",
+  .desc = "MWAIT 0x01",
+  .flags = MWAIT2flg(0x01) | CPUIDLE_FLAG_TIME_VALID,
+  .exit_latency = 10,
+  .target_residency = 250,
+  .enter = &intel_idle },
+ {
+  .name = "C3-IVT-4S",
+  .desc = "MWAIT 0x10",
+  .flags = MWAIT2flg(0x10) | CPUIDLE_FLAG_TIME_VALID | CPUIDLE_FLAG_TLB_FLUSHED,
+  .exit_latency = 59,
+  .target_residency = 300,
+  .enter = &intel_idle },
+ {
+  .name = "C6-IVT-4S",
+  .desc = "MWAIT 0x20",
+  .flags = MWAIT2flg(0x20) | CPUIDLE_FLAG_TIME_VALID | CPUIDLE_FLAG_TLB_FLUSHED,
+  .exit_latency = 84,
+  .target_residency = 400,
+  .enter = &intel_idle },
+ {
+  .enter = NULL }
+};
+
+static struct cpuidle_state ivt_cstates_8s[] = {
+ {
+  .name = "C1-IVT-8S",
+  .desc = "MWAIT 0x00",
+  .flags = MWAIT2flg(0x00) | CPUIDLE_FLAG_TIME_VALID,
+  .exit_latency = 1,
+  .target_residency = 1,
+  .enter = &intel_idle },
+ {
+  .name = "C1E-IVT-8S",
+  .desc = "MWAIT 0x01",
+  .flags = MWAIT2flg(0x01) | CPUIDLE_FLAG_TIME_VALID,
+  .exit_latency = 10,
+  .target_residency = 500,
+  .enter = &intel_idle },
+ {
+  .name = "C3-IVT-8S",
+  .desc = "MWAIT 0x10",
+  .flags = MWAIT2flg(0x10) | CPUIDLE_FLAG_TIME_VALID | CPUIDLE_FLAG_TLB_FLUSHED,
+  .exit_latency = 59,
+  .target_residency = 600,
+  .enter = &intel_idle },
+ {
+  .name = "C6-IVT-8S",
+  .desc = "MWAIT 0x20",
+  .flags = MWAIT2flg(0x20) | CPUIDLE_FLAG_TIME_VALID | CPUIDLE_FLAG_TLB_FLUSHED,
+  .exit_latency = 88,
+  .target_residency = 700,
+  .enter = &intel_idle },
+ {
+  .enter = NULL }
+};
+
 static struct cpuidle_state hsw_cstates[] = {
  {
   .name = "C1-HSW",
@@ -451,6 +550,11 @@ static const struct idle_cpu idle_cpu_ivb = {
  .disable_promotion_to_c1e = true,
 };
 
+static const struct idle_cpu idle_cpu_ivt = {
+ .state_table = ivt_cstates,
+ .disable_promotion_to_c1e = true,
+};
+
 static const struct idle_cpu idle_cpu_hsw = {
  .state_table = hsw_cstates,
  .disable_promotion_to_c1e = true,
@@ -472,7 +576,7 @@ static const struct x86_cpu_id intel_idle_ids[] = {
  ICPU(0x2a, idle_cpu_snb),
  ICPU(0x2d, idle_cpu_snb),
  ICPU(0x3a, idle_cpu_ivb),
- ICPU(0x3e, idle_cpu_ivb),
+ ICPU(0x3e, idle_cpu_ivt),
  ICPU(0x3c, idle_cpu_hsw),
  ICPU(0x3f, idle_cpu_hsw),
  ICPU(0x45, idle_cpu_hsw),
@@ -548,6 +652,39 @@ static void intel_idle_cpuidle_devices_uninit(void)
  free_percpu(intel_idle_cpuidle_devices);
  return;
 }
+
+/*
+ * intel_idle_state_table_update()
+ *
+ * Update the default state_table for this CPU-id
+ *
+ * Currently used to access tuned IVT multi-socket targets
+ * Assumption: num_sockets == (max_package_num + 1)
+ */
+void intel_idle_state_table_update(void)
+{
+ /* IVT uses a different table for 1-2, 3-4, and > 4 sockets */
+ if (boot_cpu_data.x86_model == 0x3e) { /* IVT */
+  int cpu, package_num, num_sockets = 1;
+
+  for_each_online_cpu(cpu) {
+   package_num = topology_physical_package_id(cpu);
+   if (package_num + 1 > num_sockets) {
+    num_sockets = package_num + 1;
+
+    if (num_sockets > 4)
+     cpuidle_state_table = ivt_cstates_8s;
+     return;
+   }
+  }
+
+  if (num_sockets > 2)
+   cpuidle_state_table = ivt_cstates_4s;
+  /* else, 1 and 2 socket systems use default ivt_cstates */
+ }
+ return;
+}
+
 /*
  * intel_idle_cpuidle_driver_init()
  * allocate, initialize cpuidle_states
@@ -557,6 +694,8 @@ static int intel_idle_cpuidle_driver_init(void)
  int cstate;
  struct cpuidle_driver *drv = &intel_idle_driver;
 
+ intel_idle_state_table_update();
+
  drv->state_count = 1;
 
  for (cstate = 0; cstate < CPUIDLE_STATE_MAX; ++cstate) {
-- 
1.7.1