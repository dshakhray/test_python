From 8b2eb00aa5ed883de8db37f7ecd53bf8da4cf938 Mon Sep 17 00:00:00 2001
From: Marcelo Leitner <mleitner@redhat.com>
Date: Tue, 21 Oct 2014 16:20:25 -0400
Subject: [net] netfilter: nf_tables: add helper to unregister chain hooks

Message-id: <20141021162025.22888.69062.stgit@localhost.localdomain>
Patchwork-id: 97998
O-Subject: [RHEL7 net PATCH 101/124] netfilter: nf_tables: add helper to unregister chain hooks
Bugzilla: 1148041 1155088
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Backport of upstream commit: c559879406c10087ea2eab0e1868f79eced12bf9

 commit c559879406c10087ea2eab0e1868f79eced12bf9
 Author: Arturo Borrero <arturo.borrero.glez@gmail.com>
 Date:   Tue Sep 2 16:42:23 2014 +0200

    netfilter: nf_tables: add helper to unregister chain hooks

    This patch adds a helper function to unregister chain hooks in the chain
    deletion path. Basically, a code factorization.

    The new function is useful in follow-up patches.

    Signed-off-by: Arturo Borrero Gonzalez <arturo.borrero.glez@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/netfilter/nf_tables_api.c b/net/netfilter/nf_tables_api.c
index 64de9c4..d284b1c 100644
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -127,6 +127,15 @@ static void nft_trans_destroy(struct nft_trans *trans)
  kfree(trans);
 }
 
+static void nf_tables_unregister_hooks(const struct nft_table *table,
+           const struct nft_chain *chain,
+           unsigned int hook_nops)
+{
+ if (!(table->flags & NFT_TABLE_F_DORMANT) &&
+     chain->flags & NFT_BASE_CHAIN)
+  nf_unregister_hooks(nft_base_chain(chain)->ops, hook_nops);
+}
+
 /*
  * Tables
  */
@@ -1157,11 +1166,7 @@ static int nf_tables_newchain(struct sock *nlsk, struct sk_buff *skb,
  list_add_tail_rcu(&chain->list, &table->chains);
  return 0;
 err2:
- if (!(table->flags & NFT_TABLE_F_DORMANT) &&
-     chain->flags & NFT_BASE_CHAIN) {
-  nf_unregister_hooks(nft_base_chain(chain)->ops,
-        afi->nops);
- }
+ nf_tables_unregister_hooks(table, chain, afi->nops);
 err1:
  nf_tables_chain_destroy(chain);
  return err;
@@ -3368,11 +3373,9 @@ static int nf_tables_commit(struct sk_buff *skb)
    break;
   case NFT_MSG_DELCHAIN:
    nf_tables_chain_notify(&trans->ctx, NFT_MSG_DELCHAIN);
-   if (!(trans->ctx.table->flags & NFT_TABLE_F_DORMANT) &&
-       trans->ctx.chain->flags & NFT_BASE_CHAIN) {
-    nf_unregister_hooks(nft_base_chain(trans->ctx.chain)->ops,
-          trans->ctx.afi->nops);
-   }
+   nf_tables_unregister_hooks(trans->ctx.table,
+         trans->ctx.chain,
+         trans->ctx.afi->nops);
    break;
   case NFT_MSG_NEWRULE:
    nft_rule_clear(trans->ctx.net, nft_trans_rule(trans));
@@ -3495,11 +3498,9 @@ static int nf_tables_abort(struct sk_buff *skb)
    } else {
     trans->ctx.table->use--;
     list_del_rcu(&trans->ctx.chain->list);
-    if (!(trans->ctx.table->flags & NFT_TABLE_F_DORMANT) &&
-        trans->ctx.chain->flags & NFT_BASE_CHAIN) {
-     nf_unregister_hooks(nft_base_chain(trans->ctx.chain)->ops,
-           trans->ctx.afi->nops);
-    }
+    nf_tables_unregister_hooks(trans->ctx.table,
+          trans->ctx.chain,
+          trans->ctx.afi->nops);
    }
    break;
   case NFT_MSG_DELCHAIN:
-- 
1.7.1