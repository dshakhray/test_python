From cd1bc2387324a77b5f1f6fc37ecdd95831970d89 Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Mon, 1 Sep 2014 20:15:23 -0400
Subject: [powerpc] perf: Add a shared interface to get gpci version and capabilities

Message-id: <1409602534-23951-5-git-send-email-gduarte@redhat.com>
Patchwork-id: 90116
O-Subject: [RHEL7.1 PATCH BZ 947159 04/15] powerpc/perf: Add a shared interface to get gpci version and capabilities
Bugzilla: 947159
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=947159
Upstream Status: 2d1b21ad7d1574c7aaa5b9acdb3a02fd37a11c01

commit 2d1b21ad7d1574c7aaa5b9acdb3a02fd37a11c01
Author: Cody P Schafer <cody@linux.vnet.ibm.com>
Date:   Fri Mar 14 16:00:39 2014 +1100

    powerpc/perf: Add a shared interface to get gpci version and capabilities

    This exposes a simple way to grab the firmware provided
    collect_priveliged, ga, expanded, and lab capability bits. All of these
    bits come in from the same gpci request, so we've exposed all of them.

    Only the collect_priveliged bit is really used by the hv-gpci/hv-24x7
    code, the other bits are simply exposed in sysfs to inform the user.

    Signed-off-by: Cody P Schafer <cody@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/perf/hv-common.c b/arch/powerpc/perf/hv-common.c
new file mode 100644
index 0000000..47e02b3
--- /dev/null
+++ b/arch/powerpc/perf/hv-common.c
@@ -0,0 +1,39 @@
+#include <asm/io.h>
+#include <asm/hvcall.h>
+
+#include "hv-gpci.h"
+#include "hv-common.h"
+
+unsigned long hv_perf_caps_get(struct hv_perf_caps *caps)
+{
+ unsigned long r;
+ struct p {
+  struct hv_get_perf_counter_info_params params;
+  struct cv_system_performance_capabilities caps;
+ } __packed __aligned(sizeof(uint64_t));
+
+ struct p arg = {
+  .params = {
+   .counter_request = cpu_to_be32(
+     CIR_SYSTEM_PERFORMANCE_CAPABILITIES),
+   .starting_index = cpu_to_be32(-1),
+   .counter_info_version_in = 0,
+  }
+ };
+
+ r = plpar_hcall_norets(H_GET_PERF_COUNTER_INFO,
+          virt_to_phys(&arg), sizeof(arg));
+
+ if (r)
+  return r;
+
+ pr_devel("capability_mask: 0x%x\n", arg.caps.capability_mask);
+
+ caps->version = arg.params.counter_info_version_out;
+ caps->collect_privileged = !!arg.caps.perf_collect_privileged;
+ caps->ga = !!(arg.caps.capability_mask & CV_CM_GA);
+ caps->expanded = !!(arg.caps.capability_mask & CV_CM_EXPANDED);
+ caps->lab = !!(arg.caps.capability_mask & CV_CM_LAB);
+
+ return r;
+}
diff --git a/arch/powerpc/perf/hv-common.h b/arch/powerpc/perf/hv-common.h
new file mode 100644
index 0000000..7e615bd
--- /dev/null
+++ b/arch/powerpc/perf/hv-common.h
@@ -0,0 +1,17 @@
+#ifndef LINUX_POWERPC_PERF_HV_COMMON_H_
+#define LINUX_POWERPC_PERF_HV_COMMON_H_
+
+#include <linux/types.h>
+
+struct hv_perf_caps {
+ u16 version;
+ u16 collect_privileged:1,
+     ga:1,
+     expanded:1,
+     lab:1,
+     unused:12;
+};
+
+unsigned long hv_perf_caps_get(struct hv_perf_caps *caps);
+
+#endif
-- 
1.7.1