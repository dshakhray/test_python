From 326813d47d38a05f73082c7d8151ec78ece87a19 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:07:18 -0400
Subject: [powerpc] book3s: Introduce exclusive emergency stack for machine check exception

Message-id: <1410545655-205645-210-git-send-email-dzickus@redhat.com>
Patchwork-id: 94315
O-Subject: [RHEL7 PATCH 209/626] powerpc/book3s: Introduce exclusive emergency stack for machine check exception.
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 729b0f715371ce1e7636b4958fc45d6882442456
Author: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
Date:   Wed Oct 30 20:04:00 2013 +0530

    powerpc/book3s: Introduce exclusive emergency stack for machine check exception.

    This patch introduces exclusive emergency stack for machine check exception.
    We use emergency stack to handle machine check exception so that we can save
    MCE information (srr1, srr0, dar and dsisr) before turning on ME bit and be
    ready for re-entrancy. This helps us to prevent clobbering of MCE information
    in case of nested machine checks.

    The reason for using emergency stack over normal kernel stack is that the
    machine check might occur in the middle of setting up a stack frame which may
    result into improper use of kernel stack.

    Signed-off-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
    Acked-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/paca.h b/arch/powerpc/include/asm/paca.h
index b6ea9e0..c3523d1 100644
--- a/arch/powerpc/include/asm/paca.h
+++ b/arch/powerpc/include/asm/paca.h
@@ -152,6 +152,15 @@ struct paca_struct {
   */
  struct opal_machine_check_event *opal_mc_evt;
 #endif
+#ifdef CONFIG_PPC_BOOK3S_64
+ /* Exclusive emergency stack pointer for machine check exception. */
+ void *mc_emergency_sp;
+ /*
+  * Flag to check whether we are in machine check early handler
+  * and already using emergency stack.
+  */
+ u16 in_mce;
+#endif
 
  /* Stuff for accurate time accounting */
  u64 user_time;   /* accumulated usermode TB ticks */
diff --git a/arch/powerpc/kernel/setup_64.c b/arch/powerpc/kernel/setup_64.c
index 0c5b9b4..bf37519 100644
--- a/arch/powerpc/kernel/setup_64.c
+++ b/arch/powerpc/kernel/setup_64.c
@@ -529,7 +529,8 @@ static void __init exc_lvl_early_init(void)
 
 /*
  * Stack space used when we detect a bad kernel stack pointer, and
- * early in SMP boots before relocation is enabled.
+ * early in SMP boots before relocation is enabled. Exclusive emergency
+ * stack for machine checks.
  */
 static void __init emergency_stack_init(void)
 {
@@ -552,6 +553,13 @@ static void __init emergency_stack_init(void)
   sp  = memblock_alloc_base(THREAD_SIZE, THREAD_SIZE, limit);
   sp += THREAD_SIZE;
   paca[i].emergency_sp = __va(sp);
+
+#ifdef CONFIG_PPC_BOOK3S_64
+  /* emergency stack for machine check exception handling. */
+  sp  = memblock_alloc_base(THREAD_SIZE, THREAD_SIZE, limit);
+  sp += THREAD_SIZE;
+  paca[i].mc_emergency_sp = __va(sp);
+#endif
  }
 }
 
diff --git a/arch/powerpc/xmon/xmon.c b/arch/powerpc/xmon/xmon.c
index b59f44f..b079098 100644
--- a/arch/powerpc/xmon/xmon.c
+++ b/arch/powerpc/xmon/xmon.c
@@ -2059,6 +2059,10 @@ static void dump_one_paca(int cpu)
  DUMP(p, stab_addr, "lx");
 #endif
  DUMP(p, emergency_sp, "p");
+#ifdef CONFIG_PPC_BOOK3S_64
+ DUMP(p, mc_emergency_sp, "p");
+ DUMP(p, in_mce, "x");
+#endif
  DUMP(p, data_offset, "lx");
  DUMP(p, hw_cpu_id, "x");
  DUMP(p, cpu_start, "x");
-- 
1.7.1