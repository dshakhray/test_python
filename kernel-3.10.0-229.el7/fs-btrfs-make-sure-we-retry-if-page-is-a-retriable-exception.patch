From a587d0c300e379552b52be6718a6987da0fe50b3 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:04:23 -0400
Subject: [fs] btrfs: make sure we retry if page is a retriable exception

Message-id: <1407179109-13714-377-git-send-email-sandeen@redhat.com>
Patchwork-id: 87258
O-Subject: [RHEL7.1 PATCH 376/422] Btrfs: make sure we retry if page is a retriable exception
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit 809f9016253dbfec00f71e98e11c4bcbf01b6c26
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Thu Jun 5 13:22:25 2014 +0100

    Btrfs: make sure we retry if page is a retriable exception

    In inode.c:btrfs_page_exists_in_range(), if the page we get from the
    radix tree is an exception which should make us retry, set page to
    NULL in order to really retry, because otherwise we don't get another
    loop iteration executed (page != NULL makes the while loop exit).
    This also was making us call page_cache_release after exiting the loop,
    which isn't correct because page doesn't point to a valid page, and
    possibly return true from the function when we shouldn't.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index a6be9cc..5fc3070 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -6762,8 +6762,10 @@ bool btrfs_page_exists_in_range(struct inode *inode, loff_t start, loff_t end)
    break;
 
   if (radix_tree_exception(page)) {
-   if (radix_tree_deref_retry(page))
+   if (radix_tree_deref_retry(page)) {
+    page = NULL;
     continue;
+   }
    /*
     * Otherwise, shmem/tmpfs must be storing a swap entry
     * here as an exceptional entry: so return it without
-- 
1.7.1