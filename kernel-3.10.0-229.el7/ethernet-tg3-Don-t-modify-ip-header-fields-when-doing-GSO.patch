From 840b34af89bd6e87c21649a7715b0c633bc04e97 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Mon, 8 Sep 2014 12:26:05 -0400
Subject: [ethernet] tg3: Don't modify ip header fields when doing GSO

Message-id: <1410179173-14304-12-git-send-email-ivecera@redhat.com>
Patchwork-id: 91677
O-Subject: [RHEL7.1 PATCH 11/19] tg3: Don't modify ip header fields when doing GSO
Bugzilla: 1088637
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: #1088637

Upstream commit(s):
commit d71c0dc4e961e74143a644f248fc1a39cabf6586
Author: Michael Chan <mchan@broadcom.com>
Date:   Sun May 11 20:22:53 2014 -0700

    tg3: Don't modify ip header fields when doing GSO

    tg3 uses GSO as workaround if the hardware cannot perform TSO on certain
    packets.  We should not modify the ip header fields if we do GSO on the
    packet.  It happens to work by accident because GSO recalculates the IP
    checksum and IP total length.

    Also fix the tg3_start_xmit comment to reflect that this is the only
    xmit function for all devices.

    Signed-off-by: Prashant Sreedharan <prashant@broadcom.com>
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index 03389c3..623ba82 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -7870,9 +7870,7 @@ tg3_tso_bug_end:
  return NETDEV_TX_OK;
 }
 
-/* hard_start_xmit for devices that have the 4G bug and/or 40-bit bug and
- * support TG3_FLAG_HW_TSO_1 or firmware TSO only.
- */
+/* hard_start_xmit for all devices */
 static netdev_tx_t tg3_start_xmit(struct sk_buff *skb, struct net_device *dev)
 {
  struct tg3 *tp = netdev_priv(dev);
@@ -7926,14 +7924,14 @@ static netdev_tx_t tg3_start_xmit(struct sk_buff *skb, struct net_device *dev)
   hdr_len = skb_transport_offset(skb) + tcp_hdrlen(skb) - ETH_HLEN;
 
   if (!skb_is_gso_v6(skb)) {
+   if (unlikely((ETH_HLEN + hdr_len) > 80) &&
+       tg3_flag(tp, TSO_BUG))
+    return tg3_tso_bug(tp, skb);
+
    iph->check = 0;
    iph->tot_len = htons(mss + hdr_len);
   }
 
-  if (unlikely((ETH_HLEN + hdr_len) > 80) &&
-      tg3_flag(tp, TSO_BUG))
-   return tg3_tso_bug(tp, skb);
-
   base_flags |= (TXD_FLAG_CPU_PRE_DMA |
           TXD_FLAG_CPU_POST_DMA);
 
-- 
1.7.1