From 28a74c6ad3e5b1d45308c1db7d4e89ef171e7ff1 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:18:35 -0400
Subject: [fs] nfsd: lock owners are not per open stateid

Message-id: <1410898849-22126-32-git-send-email-bfields@redhat.com>
Patchwork-id: 95813
O-Subject: [Patch RHEL7 031/165] nfsd: lock owners are not per open stateid
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Trond Myklebust <trond.myklebust@primarydata.com>

In the NFSv4 spec, lock stateids are per-file objects. Lockowners are not.
This patch replaces the current list of lock owners in the open stateids
with a list of lock stateids.

Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 3c87b9b7c05d7775a3d942de588296025023c6d2
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index 1e973f6..137fdcc 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -695,10 +695,11 @@ static void free_generic_stateid(struct nfs4_ol_stateid *stp)
  nfs4_free_stid(stateid_slab, &stp->st_stid);
 }
 
-static void release_lock_stateid(struct nfs4_ol_stateid *stp)
+static void __release_lock_stateid(struct nfs4_ol_stateid *stp)
 {
  struct file *file;
 
+ list_del(&stp->st_locks);
  unhash_generic_stateid(stp);
  unhash_stid(&stp->st_stid);
  file = find_any_file(stp->st_file);
@@ -713,12 +714,11 @@ static void unhash_lockowner(struct nfs4_lockowner *lo)
  struct nfs4_ol_stateid *stp;
 
  list_del(&lo->lo_owner.so_strhash);
- list_del(&lo->lo_perstateid);
  list_del(&lo->lo_owner_ino_hash);
  while (!list_empty(&lo->lo_owner.so_stateids)) {
   stp = list_first_entry(&lo->lo_owner.so_stateids,
     struct nfs4_ol_stateid, st_perstateowner);
-  release_lock_stateid(stp);
+  __release_lock_stateid(stp);
  }
 }
 
@@ -734,22 +734,36 @@ static void release_lockowner(struct nfs4_lockowner *lo)
  nfs4_free_lockowner(lo);
 }
 
-static void
-release_stateid_lockowners(struct nfs4_ol_stateid *open_stp)
+static void release_lockowner_if_empty(struct nfs4_lockowner *lo)
+{
+ if (list_empty(&lo->lo_owner.so_stateids))
+  release_lockowner(lo);
+}
+
+static void release_lock_stateid(struct nfs4_ol_stateid *stp)
 {
  struct nfs4_lockowner *lo;
 
- while (!list_empty(&open_stp->st_lockowners)) {
-  lo = list_entry(open_stp->st_lockowners.next,
-    struct nfs4_lockowner, lo_perstateid);
-  release_lockowner(lo);
+ lo = lockowner(stp->st_stateowner);
+ __release_lock_stateid(stp);
+ release_lockowner_if_empty(lo);
+}
+
+static void release_open_stateid_locks(struct nfs4_ol_stateid *open_stp)
+{
+ struct nfs4_ol_stateid *stp;
+
+ while (!list_empty(&open_stp->st_locks)) {
+  stp = list_entry(open_stp->st_locks.next,
+    struct nfs4_ol_stateid, st_locks);
+  release_lock_stateid(stp);
  }
 }
 
 static void unhash_open_stateid(struct nfs4_ol_stateid *stp)
 {
  unhash_generic_stateid(stp);
- release_stateid_lockowners(stp);
+ release_open_stateid_locks(stp);
  close_generic_stateid(stp);
 }
 
@@ -2744,7 +2758,7 @@ static void init_open_stateid(struct nfs4_ol_stateid *stp, struct nfs4_file *fp,
  struct nfs4_openowner *oo = open->op_openowner;
 
  stp->st_stid.sc_type = NFS4_OPEN_STID;
- INIT_LIST_HEAD(&stp->st_lockowners);
+ INIT_LIST_HEAD(&stp->st_locks);
  list_add(&stp->st_perstateowner, &oo->oo_owner.so_stateids);
  list_add(&stp->st_perfile, &fp->fi_stateids);
  stp->st_stateowner = &oo->oo_owner;
@@ -4335,7 +4349,6 @@ static void hash_lockowner(struct nfs4_lockowner *lo, unsigned int strhashval, s
 
  list_add(&lo->lo_owner.so_strhash, &nn->ownerstr_hashtbl[strhashval]);
  list_add(&lo->lo_owner_ino_hash, &nn->lockowner_ino_hashtbl[inohash]);
- list_add(&lo->lo_perstateid, &open_stp->st_lockowners);
 }
 
 /*
@@ -4380,6 +4393,7 @@ alloc_init_lock_stateid(struct nfs4_lockowner *lo, struct nfs4_file *fp, struct
  stp->st_access_bmap = 0;
  stp->st_deny_bmap = open_stp->st_deny_bmap;
  stp->st_openstp = open_stp;
+ list_add(&stp->st_locks, &open_stp->st_locks);
  return stp;
 }
 
@@ -4967,18 +4981,21 @@ static void nfsd_print_count(struct nfs4_client *clp, unsigned int count,
  printk(KERN_INFO "NFS Client: %s has %u %s\n", buf, count, type);
 }
 
-static u64 nfsd_foreach_client_lock(struct nfs4_client *clp, u64 max, void (*func)(struct nfs4_lockowner *))
+static u64 nfsd_foreach_client_lock(struct nfs4_client *clp, u64 max,
+        void (*func)(struct nfs4_ol_stateid *))
 {
  struct nfs4_openowner *oop;
- struct nfs4_lockowner *lop, *lo_next;
  struct nfs4_ol_stateid *stp, *st_next;
+ struct nfs4_ol_stateid *lst, *lst_next;
  u64 count = 0;
 
  list_for_each_entry(oop, &clp->cl_openowners, oo_perclient) {
-  list_for_each_entry_safe(stp, st_next, &oop->oo_owner.so_stateids, st_perstateowner) {
-   list_for_each_entry_safe(lop, lo_next, &stp->st_lockowners, lo_perstateid) {
+  list_for_each_entry_safe(stp, st_next,
+    &oop->oo_owner.so_stateids, st_perstateowner) {
+   list_for_each_entry_safe(lst, lst_next,
+     &stp->st_locks, st_locks) {
     if (func)
-     func(lop);
+     func(lst);
     if (++count == max)
      return count;
    }
@@ -4990,7 +5007,7 @@ static u64 nfsd_foreach_client_lock(struct nfs4_client *clp, u64 max, void (*fun
 
 u64 nfsd_forget_client_locks(struct nfs4_client *clp, u64 max)
 {
- return nfsd_foreach_client_lock(clp, max, release_lockowner);
+ return nfsd_foreach_client_lock(clp, max, release_lock_stateid);
 }
 
 u64 nfsd_print_client_locks(struct nfs4_client *clp, u64 max)
diff --git a/fs/nfsd/state.h b/fs/nfsd/state.h
index 62f33b7..c1e384a 100644
--- a/fs/nfsd/state.h
+++ b/fs/nfsd/state.h
@@ -365,7 +365,6 @@ struct nfs4_openowner {
 struct nfs4_lockowner {
  struct nfs4_stateowner lo_owner; /* must be first element */
  struct list_head lo_owner_ino_hash; /* hash by owner,file */
- struct list_head        lo_perstateid;
  struct list_head lo_list; /* for temporary uses */
 };
 
@@ -433,7 +432,7 @@ struct nfs4_ol_stateid {
  struct nfs4_stid    st_stid; /* must be first field */
  struct list_head              st_perfile;
  struct list_head              st_perstateowner;
- struct list_head              st_lockowners;
+ struct list_head              st_locks;
  struct nfs4_stateowner      * st_stateowner;
  struct nfs4_file            * st_file;
  unsigned long                 st_access_bmap;
-- 
1.7.1