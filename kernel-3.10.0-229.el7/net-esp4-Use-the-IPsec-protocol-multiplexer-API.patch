From cccbf34ad7ba165ca708b416bff6e9bdcda35b16 Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jpirko@redhat.com>
Date: Thu, 7 Aug 2014 07:06:18 -0400
Subject: [net] esp4: Use the IPsec protocol multiplexer API

Message-id: <1407395194-3809-3-git-send-email-jpirko@redhat.com>
Patchwork-id: 87516
O-Subject: [patch rhel7 net 02/18] esp4: Use the IPsec protocol multiplexer API
Bugzilla: 1091561
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

BZ1091561
https://brewweb.devel.redhat.com/taskinfo?taskID=7794261
Tested by jtluka's LNST smoke test recipe

upstream commit 827789cbd7f0ca070cd8c8623580c4152c28fea5
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Fri Feb 21 08:41:08 2014 +0100

    esp4: Use the IPsec protocol multiplexer API

    Switch esp4 to use the new IPsec protocol multiplexer.

Signed-off-by: Jiri Pirko <jpirko@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/esp4.c b/net/ipv4/esp4.c
index 4cfe34d..255abac 100644
--- a/net/ipv4/esp4.c
+++ b/net/ipv4/esp4.c
@@ -480,7 +480,7 @@ static u32 esp4_get_mtu(struct xfrm_state *x, int mtu)
    net_adj) & ~(align - 1)) + (net_adj - 2);
 }
 
-static void esp4_err(struct sk_buff *skb, u32 info)
+static int esp4_err(struct sk_buff *skb, u32 info)
 {
  struct net *net = dev_net(skb->dev);
  const struct iphdr *iph = (const struct iphdr *)skb->data;
@@ -490,17 +490,17 @@ static void esp4_err(struct sk_buff *skb, u32 info)
  switch (icmp_hdr(skb)->type) {
  case ICMP_DEST_UNREACH:
   if (icmp_hdr(skb)->code != ICMP_FRAG_NEEDED)
-   return;
+   return 0;
  case ICMP_REDIRECT:
   break;
  default:
-  return;
+  return 0;
  }
 
  x = xfrm_state_lookup(net, skb->mark, (const xfrm_address_t *)&iph->daddr,
          esph->spi, IPPROTO_ESP, AF_INET);
  if (!x)
-  return;
+  return 0;
 
  if (icmp_hdr(skb)->type == ICMP_DEST_UNREACH) {
   atomic_inc(&flow_cache_genid);
@@ -510,6 +510,8 @@ static void esp4_err(struct sk_buff *skb, u32 info)
  } else
   ipv4_redirect(skb, net, 0, 0, IPPROTO_ESP, 0);
  xfrm_state_put(x);
+
+ return 0;
 }
 
 static void esp_destroy(struct xfrm_state *x)
@@ -694,6 +696,11 @@ error:
  return err;
 }
 
+static int esp4_rcv_cb(struct sk_buff *skb, int err)
+{
+ return 0;
+}
+
 static const struct xfrm_type esp_type =
 {
  .description = "ESP4",
@@ -707,11 +714,12 @@ static const struct xfrm_type esp_type =
  .output  = esp_output
 };
 
-static const struct net_protocol esp4_protocol = {
+static struct xfrm4_protocol esp4_protocol = {
  .handler = xfrm4_rcv,
+ .input_handler = xfrm_input,
+ .cb_handler = esp4_rcv_cb,
  .err_handler = esp4_err,
- .no_policy = 1,
- .netns_ok = 1,
+ .priority = 0,
 };
 
 static int __init esp4_init(void)
@@ -720,7 +728,7 @@ static int __init esp4_init(void)
   pr_info("%s: can't add xfrm type\n", __func__);
   return -EAGAIN;
  }
- if (inet_add_protocol(&esp4_protocol, IPPROTO_ESP) < 0) {
+ if (xfrm4_protocol_register(&esp4_protocol, IPPROTO_ESP) < 0) {
   pr_info("%s: can't add protocol\n", __func__);
   xfrm_unregister_type(&esp_type, AF_INET);
   return -EAGAIN;
@@ -730,7 +738,7 @@ static int __init esp4_init(void)
 
 static void __exit esp4_fini(void)
 {
- if (inet_del_protocol(&esp4_protocol, IPPROTO_ESP) < 0)
+ if (xfrm4_protocol_deregister(&esp4_protocol, IPPROTO_ESP) < 0)
   pr_info("%s: can't remove protocol\n", __func__);
  if (xfrm_unregister_type(&esp_type, AF_INET) < 0)
   pr_info("%s: can't remove xfrm type\n", __func__);
-- 
1.7.1