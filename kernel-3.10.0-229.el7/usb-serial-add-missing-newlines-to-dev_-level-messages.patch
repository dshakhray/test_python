From 7d783eb9a46b903acca3ec367044539f422a8210 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:07:11 -0400
Subject: [usb] serial: add missing newlines to dev_<level> messages

Message-id: <1410887463-20674-360-git-send-email-dzickus@redhat.com>
Patchwork-id: 95327
O-Subject: [RHEL7 PATCH 359/591] USB: serial: add missing newlines to dev_<level> messages.
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit d9a38a8741fdffabc32e6d0943b1cdcf22712bec
Author: Johan Hovold <jhovold@gmail.com>
Date:   Wed Mar 12 19:09:42 2014 +0100

    USB: serial: add missing newlines to dev_<level> messages.

    Add missing newlines to dev_<level> messages.

    Also make some messages less verbose where appropriate.

    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/ch341.c b/drivers/usb/serial/ch341.c
index 82371f6..2d72aa3 100644
--- a/drivers/usb/serial/ch341.c
+++ b/drivers/usb/serial/ch341.c
@@ -323,11 +323,11 @@ static int ch341_open(struct tty_struct *tty, struct usb_serial_port *port)
  if (r)
   goto out;
 
- dev_dbg(&port->dev, "%s - submitting interrupt urb", __func__);
+ dev_dbg(&port->dev, "%s - submitting interrupt urb\n", __func__);
  r = usb_submit_urb(port->interrupt_in_urb, GFP_KERNEL);
  if (r) {
-  dev_err(&port->dev, "%s - failed submitting interrupt urb,"
-   " error %d\n", __func__, r);
+  dev_err(&port->dev, "%s - failed to submit interrupt urb: %d\n",
+   __func__, r);
   ch341_close(port);
   goto out;
  }
diff --git a/drivers/usb/serial/cyberjack.c b/drivers/usb/serial/cyberjack.c
index 0ac3b3b..2916dea 100644
--- a/drivers/usb/serial/cyberjack.c
+++ b/drivers/usb/serial/cyberjack.c
@@ -220,7 +220,7 @@ static int cyberjack_write(struct tty_struct *tty,
   result = usb_submit_urb(port->write_urb, GFP_ATOMIC);
   if (result) {
    dev_err(&port->dev,
-    "%s - failed submitting write urb, error %d",
+    "%s - failed submitting write urb, error %d\n",
     __func__, result);
    /* Throw away data. No better idea what to do with it. */
    priv->wrfilled = 0;
diff --git a/drivers/usb/serial/cypress_m8.c b/drivers/usb/serial/cypress_m8.c
index 634f0d6..01bf533 100644
--- a/drivers/usb/serial/cypress_m8.c
+++ b/drivers/usb/serial/cypress_m8.c
@@ -279,7 +279,7 @@ static int analyze_baud_rate(struct usb_serial_port *port, speed_t new_rate)
     * the generic firmware, but are not used with
     * NMEA and SiRF protocols */
    dev_dbg(&port->dev,
-    "%s - failed setting baud rate, unsupported speed of %d on Earthmate GPS",
+    "%s - failed setting baud rate, unsupported speed of %d on Earthmate GPS\n",
     __func__, new_rate);
    return -1;
   }
diff --git a/drivers/usb/serial/iuu_phoenix.c b/drivers/usb/serial/iuu_phoenix.c
index d00dae1..5ad4a0f 100644
--- a/drivers/usb/serial/iuu_phoenix.c
+++ b/drivers/usb/serial/iuu_phoenix.c
@@ -1151,7 +1151,7 @@ static ssize_t vcc_mode_store(struct device *dev,
   goto fail_store_vcc_mode;
  }
 
- dev_dbg(dev, "%s: setting vcc_mode = %ld", __func__, v);
+ dev_dbg(dev, "%s: setting vcc_mode = %ld\n", __func__, v);
 
  if ((v != 3) && (v != 5)) {
   dev_err(dev, "%s - vcc_mode %ld is invalid\n", __func__, v);
diff --git a/drivers/usb/serial/keyspan_pda.c b/drivers/usb/serial/keyspan_pda.c
index e972412..742d827 100644
--- a/drivers/usb/serial/keyspan_pda.c
+++ b/drivers/usb/serial/keyspan_pda.c
@@ -189,7 +189,7 @@ exit:
  retval = usb_submit_urb(urb, GFP_ATOMIC);
  if (retval)
   dev_err(&port->dev,
-   "%s - usb_submit_urb failed with result %d",
+   "%s - usb_submit_urb failed with result %d\n",
    __func__, retval);
 }
 
diff --git a/drivers/usb/serial/kl5kusb105.c b/drivers/usb/serial/kl5kusb105.c
index c88cc49..d7440b7 100644
--- a/drivers/usb/serial/kl5kusb105.c
+++ b/drivers/usb/serial/kl5kusb105.c
@@ -201,7 +201,7 @@ static int klsi_105_get_line_state(struct usb_serial_port *port,
  else {
   status = get_unaligned_le16(status_buf);
 
-  dev_info(&port->serial->dev->dev, "read status %x %x",
+  dev_info(&port->serial->dev->dev, "read status %x %x\n",
     status_buf[0], status_buf[1]);
 
   *line_state_p = klsi_105_status2linestate(status);
@@ -464,7 +464,7 @@ static void klsi_105_set_termios(struct tty_struct *tty,
   priv->cfg.baudrate = kl5kusb105a_sio_b115200;
   break;
  default:
-  dev_dbg(dev, "KLSI USB->Serial converter: unsupported baudrate request, using default of 9600");
+  dev_dbg(dev, "unsupported baudrate, using 9600\n");
   priv->cfg.baudrate = kl5kusb105a_sio_b9600;
   baud = 9600;
   break;
diff --git a/drivers/usb/serial/kobil_sct.c b/drivers/usb/serial/kobil_sct.c
index d8d164b..0f5f09c 100644
--- a/drivers/usb/serial/kobil_sct.c
+++ b/drivers/usb/serial/kobil_sct.c
@@ -557,7 +557,8 @@ static int kobil_ioctl(struct tty_struct *tty,
    );
 
   dev_dbg(&port->dev,
-   "%s - Send reset_all_queues (FLUSH) URB returns: %i", __func__, result);
+   "%s - Send reset_all_queues (FLUSH) URB returns: %i\n",
+   __func__, result);
   kfree(transfer_buffer);
   return (result < 0) ? -EIO: 0;
  default:
diff --git a/drivers/usb/serial/mos7720.c b/drivers/usb/serial/mos7720.c
index 5717d37..cdce22d 100644
--- a/drivers/usb/serial/mos7720.c
+++ b/drivers/usb/serial/mos7720.c
@@ -209,7 +209,7 @@ static int write_mos_reg(struct usb_serial *serial, unsigned int serial_portnum,
          index, NULL, 0, MOS_WDR_TIMEOUT);
  if (status < 0)
   dev_err(&usbdev->dev,
-   "mos7720: usb_control_msg() failed: %d", status);
+   "mos7720: usb_control_msg() failed: %d\n", status);
  return status;
 }
 
@@ -240,7 +240,7 @@ static int read_mos_reg(struct usb_serial *serial, unsigned int serial_portnum,
   *data = *buf;
  else if (status < 0)
   dev_err(&usbdev->dev,
-   "mos7720: usb_control_msg() failed: %d", status);
+   "mos7720: usb_control_msg() failed: %d\n", status);
  kfree(buf);
 
  return status;
@@ -399,7 +399,7 @@ static int write_parport_reg_nonblock(struct mos7715_parport *mos_parport,
          &mos_parport->deferred_urbs);
   spin_unlock_irqrestore(&mos_parport->listlock, flags);
   tasklet_schedule(&mos_parport->urb_tasklet);
-  dev_dbg(&usbdev->dev, "tasklet scheduled");
+  dev_dbg(&usbdev->dev, "tasklet scheduled\n");
   return 0;
  }
 
@@ -418,7 +418,7 @@ static int write_parport_reg_nonblock(struct mos7715_parport *mos_parport,
  mutex_unlock(&serial->disc_mutex);
  if (ret_val) {
   dev_err(&usbdev->dev,
-   "%s: submit_urb() failed: %d", __func__, ret_val);
+   "%s: submit_urb() failed: %d\n", __func__, ret_val);
   spin_lock_irqsave(&mos_parport->listlock, flags);
   list_del(&urbtrack->urblist_entry);
   spin_unlock_irqrestore(&mos_parport->listlock, flags);
@@ -656,7 +656,7 @@ static size_t parport_mos7715_write_compat(struct parport *pp,
  parport_epilogue(pp);
  if (retval) {
   dev_err(&mos_parport->serial->dev->dev,
-   "mos7720: usb_bulk_msg() failed: %d", retval);
+   "mos7720: usb_bulk_msg() failed: %d\n", retval);
   return 0;
  }
  return actual_len;
@@ -875,7 +875,7 @@ static void mos7715_interrupt_callback(struct urb *urb)
  if (!(iir & 0x01)) { /* serial port interrupt pending */
   switch (iir & 0x0f) {
   case SERIAL_IIR_RLS:
-   dev_dbg(dev, "Serial Port: Receiver status error or address bit detected in 9-bit mode\n\n");
+   dev_dbg(dev, "Serial Port: Receiver status error or address bit detected in 9-bit mode\n");
    break;
   case SERIAL_IIR_CTI:
    dev_dbg(dev, "Serial Port: Receiver time out\n");
diff --git a/drivers/usb/serial/mos7840.c b/drivers/usb/serial/mos7840.c
index e9d967f..393be56 100644
--- a/drivers/usb/serial/mos7840.c
+++ b/drivers/usb/serial/mos7840.c
@@ -522,11 +522,11 @@ static void mos7840_set_led_callback(struct urb *urb)
  case -ENOENT:
  case -ESHUTDOWN:
   /* This urb is terminated, clean up */
-  dev_dbg(&urb->dev->dev, "%s - urb shutting down with status: %d",
+  dev_dbg(&urb->dev->dev, "%s - urb shutting down: %d\n",
    __func__, urb->status);
   break;
  default:
-  dev_dbg(&urb->dev->dev, "%s - nonzero urb status received: %d",
+  dev_dbg(&urb->dev->dev, "%s - nonzero urb status: %d\n",
    __func__, urb->status);
  }
 }
diff --git a/drivers/usb/serial/quatech2.c b/drivers/usb/serial/quatech2.c
index 7725ed2..504f5bf 100644
--- a/drivers/usb/serial/quatech2.c
+++ b/drivers/usb/serial/quatech2.c
@@ -372,7 +372,7 @@ static int qt2_open(struct tty_struct *tty, struct usb_serial_port *port)
      device_port, data, 2, QT2_USB_TIMEOUT);
 
  if (status < 0) {
-  dev_err(&port->dev, "%s - open port failed %i", __func__,
+  dev_err(&port->dev, "%s - open port failed %i\n", __func__,
    status);
   kfree(data);
   return status;
diff --git a/drivers/usb/serial/spcp8x5.c b/drivers/usb/serial/spcp8x5.c
index 4ec04f7..ef0dbf0 100644
--- a/drivers/usb/serial/spcp8x5.c
+++ b/drivers/usb/serial/spcp8x5.c
@@ -220,9 +220,9 @@ static int spcp8x5_get_msr(struct usb_serial_port *port, u8 *status)
          GET_UART_STATUS, GET_UART_STATUS_TYPE,
          0, GET_UART_STATUS_MSR, buf, 1, 100);
  if (ret < 0)
-  dev_err(&port->dev, "failed to get modem status: %d", ret);
+  dev_err(&port->dev, "failed to get modem status: %d\n", ret);
 
- dev_dbg(&port->dev, "0xc0:0x22:0:6  %d - 0x02%x", ret, *buf);
+ dev_dbg(&port->dev, "0xc0:0x22:0:6  %d - 0x02%x\n", ret, *buf);
  *status = *buf;
  kfree(buf);
 
@@ -342,8 +342,7 @@ static void spcp8x5_set_termios(struct tty_struct *tty,
  case 1000000:
    buf[0] = 0x0b; break;
  default:
-  dev_err(&port->dev, "spcp825 driver does not support the "
-   "baudrate requested, using default of 9600.\n");
+  dev_err(&port->dev, "unsupported baudrate, using 9600\n");
  }
 
  /* Set Data Length : 00:5bit, 01:6bit, 10:7bit, 11:8bit */
diff --git a/drivers/usb/serial/symbolserial.c b/drivers/usb/serial/symbolserial.c
index 9fa7dd4..8fceec7 100644
--- a/drivers/usb/serial/symbolserial.c
+++ b/drivers/usb/serial/symbolserial.c
@@ -74,9 +74,7 @@ static void symbol_int_callback(struct urb *urb)
   tty_insert_flip_string(&port->port, &data[1], data_length);
   tty_flip_buffer_push(&port->port);
  } else {
-  dev_dbg(&port->dev,
-   "Improper amount of data received from the device, "
-   "%d bytes", urb->actual_length);
+  dev_dbg(&port->dev, "%s - short packet\n", __func__);
  }
 
 exit:
diff --git a/drivers/usb/serial/ti_usb_3410_5052.c b/drivers/usb/serial/ti_usb_3410_5052.c
index ec7cea5..3dd3ff8 100644
--- a/drivers/usb/serial/ti_usb_3410_5052.c
+++ b/drivers/usb/serial/ti_usb_3410_5052.c
@@ -293,7 +293,7 @@ static int ti_startup(struct usb_serial *serial)
  int status;
 
  dev_dbg(&dev->dev,
-  "%s - product 0x%4X, num configurations %d, configuration value %d",
+  "%s - product 0x%4X, num configurations %d, configuration value %d\n",
   __func__, le16_to_cpu(dev->descriptor.idProduct),
   dev->descriptor.bNumConfigurations,
   dev->actconfig->desc.bConfigurationValue);
@@ -803,7 +803,7 @@ static void ti_set_termios(struct tty_struct *tty,
   tty_encode_baud_rate(tty, baud, baud);
 
  dev_dbg(&port->dev,
-  "%s - BaudRate=%d, wBaudRate=%d, wFlags=0x%04X, bDataBits=%d, bParity=%d, bStopBits=%d, cXon=%d, cXoff=%d, bUartMode=%d",
+  "%s - BaudRate=%d, wBaudRate=%d, wFlags=0x%04X, bDataBits=%d, bParity=%d, bStopBits=%d, cXon=%d, cXoff=%d, bUartMode=%d\n",
   __func__, baud, config->wBaudRate, config->wFlags,
   config->bDataBits, config->bParity, config->bStopBits,
   config->cXon, config->cXoff, config->bUartMode);
diff --git a/drivers/usb/serial/usb-serial.c b/drivers/usb/serial/usb-serial.c
index 4c3aeaf..81fc0df 100644
--- a/drivers/usb/serial/usb-serial.c
+++ b/drivers/usb/serial/usb-serial.c
@@ -868,7 +868,7 @@ static int usb_serial_probe(struct usb_interface *interface,
  max_endpoints = max(max_endpoints, (int)serial->num_ports);
  serial->num_port_pointers = max_endpoints;
 
- dev_dbg(ddev, "setting up %d port structures for this device", max_endpoints);
+ dev_dbg(ddev, "setting up %d port structure(s)\n", max_endpoints);
  for (i = 0; i < max_endpoints; ++i) {
   port = kzalloc(sizeof(struct usb_serial_port), GFP_KERNEL);
   if (!port)
@@ -1033,7 +1033,7 @@ static int usb_serial_probe(struct usb_interface *interface,
  for (i = 0; i < num_ports; ++i) {
   port = serial->port[i];
   dev_set_name(&port->dev, "ttyUSB%d", port->minor);
-  dev_dbg(ddev, "registering %s", dev_name(&port->dev));
+  dev_dbg(ddev, "registering %s\n", dev_name(&port->dev));
   device_enable_async_suspend(&port->dev);
 
   retval = device_add(&port->dev);
-- 
1.7.1