From 1495509a0e7fabe6287143f23b054f9844280c0b Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:06:56 -0400
Subject: [tools] perf/top/tui: Update nr_entries properly after a filter is applied

Message-id: <1410181752-25631-172-git-send-email-jolsa@redhat.com>
Patchwork-id: 91795
O-Subject: [PATCH RHEL7.1 BZ1134356 171/307] perf top/tui: Update nr_entries properly after a filter is applied
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 268397cb2a47ce6e1c0298d9de1762143867f9d3
Author: Namhyung Kim <namhyung@kernel.org>
Date: Tue Apr 22 14:49:31 2014 +0900

description
===========
The hist_browser__reset() is only called right after a filter is
applied so it needs to udpate browser->nr_entries properly.  We cannot
use hists->nr_non_filtered_entreis directly since it's possible that
such entries are also filtered out by minimum percentage limit.

In addition when a filter is used for perf top, hist browser's
nr_entries field was not updated after applying the filter.  But it
needs to be updated as new samples are coming.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/ui/browsers/hists.c b/tools/perf/ui/browsers/hists.c
index 769295b..886eee0 100644
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@ -35,6 +35,11 @@ static int hists__browser_title(struct hists *hists, char *bf, size_t size,
     const char *ev_name);
 static void hist_browser__update_nr_entries(struct hist_browser *hb);
 
+static bool hist_browser__has_filter(struct hist_browser *hb)
+{
+ return hists__has_filter(hb->hists) || hb->min_pcnt;
+}
+
 static void hist_browser__refresh_dimensions(struct hist_browser *browser)
 {
  /* 3 == +/- toggle symbol before actual hist_entry rendering */
@@ -44,7 +49,8 @@ static void hist_browser__refresh_dimensions(struct hist_browser *browser)
 
 static void hist_browser__reset(struct hist_browser *browser)
 {
- browser->b.nr_entries = browser->hists->nr_entries;
+ hist_browser__update_nr_entries(browser);
+ browser->b.nr_entries = browser->nr_non_filtered_entries;
  hist_browser__refresh_dimensions(browser);
  ui_browser__reset_index(&browser->b);
 }
@@ -319,9 +325,10 @@ static int hist_browser__run(struct hist_browser *browser, const char *ev_name,
  int delay_secs = hbt ? hbt->refresh : 0;
 
  browser->b.entries = &browser->hists->entries;
- browser->b.nr_entries = browser->hists->nr_entries;
- if (browser->min_pcnt)
+ if (hist_browser__has_filter(browser))
   browser->b.nr_entries = browser->nr_non_filtered_entries;
+ else
+  browser->b.nr_entries = browser->hists->nr_entries;
 
  hist_browser__refresh_dimensions(browser);
  hists__browser_title(browser->hists, title, sizeof(title), ev_name);
@@ -338,7 +345,7 @@ static int hist_browser__run(struct hist_browser *browser, const char *ev_name,
    u64 nr_entries;
    hbt->timer(hbt->arg);
 
-   if (browser->min_pcnt) {
+   if (hist_browser__has_filter(browser)) {
     hist_browser__update_nr_entries(browser);
     nr_entries = browser->nr_non_filtered_entries;
    } else {
@@ -1347,6 +1354,11 @@ static void hist_browser__update_nr_entries(struct hist_browser *hb)
  u64 nr_entries = 0;
  struct rb_node *nd = rb_first(&hb->hists->entries);
 
+ if (hb->min_pcnt == 0) {
+  hb->nr_non_filtered_entries = hb->hists->nr_non_filtered_entries;
+  return;
+ }
+
  while ((nd = hists__filter_entries(nd, hb->hists,
         hb->min_pcnt)) != NULL) {
   nr_entries++;
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index ef1ad7a..38c3e87 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -129,6 +129,12 @@ void hists__filter_by_dso(struct hists *hists);
 void hists__filter_by_thread(struct hists *hists);
 void hists__filter_by_symbol(struct hists *hists);
 
+static inline bool hists__has_filter(struct hists *hists)
+{
+ return hists->thread_filter || hists->dso_filter ||
+  hists->symbol_filter_str;
+}
+
 u16 hists__col_len(struct hists *hists, enum hist_column col);
 void hists__set_col_len(struct hists *hists, enum hist_column col, u16 len);
 bool hists__new_col_len(struct hists *hists, enum hist_column col, u16 len);
-- 
1.7.1