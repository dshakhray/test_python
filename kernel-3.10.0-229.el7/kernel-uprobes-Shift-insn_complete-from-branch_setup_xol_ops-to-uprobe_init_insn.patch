From 8de61c933fecb355c0e34a475fe64966741edaef Mon Sep 17 00:00:00 2001
From: Oleg Nesterov <oleg@redhat.com>
Date: Mon, 16 Jun 2014 16:01:52 -0400
Subject: [kernel] uprobes: Shift "insn_complete" from branch_setup_xol_ops() to uprobe_init_insn()

Message-id: <20140616160152.GA15469@redhat.com>
Patchwork-id: 84080
O-Subject: [PATCH RHEL7 BZ 1073627 19/36] uprobes/x86: Shift "insn_complete" from branch_setup_xol_ops() to uprobe_init_insn()
Bugzilla: 1073627
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

RHBZ: 1073627

Change uprobe_init_insn() to make insn_complete() == T, this makes
other insn_get_*() calls unnecessary.

Signed-off-by: Oleg Nesterov <oleg@redhat.com>
Reviewed-by: Jim Keniston <jkenisto@us.ibm.com>
Acked-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
(cherry picked from commit ff261964cfcfe49d73690ca29b0ba2853d9497e3)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/uprobes.c b/arch/x86/kernel/uprobes.c
index b3b25dd..98d7db5 100644
--- a/arch/x86/kernel/uprobes.c
+++ b/arch/x86/kernel/uprobes.c
@@ -209,8 +209,11 @@ static int uprobe_init_insn(struct arch_uprobe *auprobe, struct insn *insn, bool
  u32 volatile *good_insns;
 
  insn_init(insn, auprobe->insn, x86_64);
+ /* has the side-effect of processing the entire instruction */
+ insn_get_length(insn);
+ if (WARN_ON_ONCE(!insn_complete(insn)))
+  return -ENOEXEC;
 
- insn_get_opcode(insn);
  if (is_prefix_bad(insn))
   return -ENOTSUPP;
 
@@ -283,8 +286,6 @@ handle_riprel_insn(struct arch_uprobe *auprobe, struct insn *insn)
   * is the immediate operand.
   */
  cursor = auprobe->insn + insn_offset_modrm(insn);
- insn_get_length(insn);
-
  /*
   * Convert from rip-relative addressing to indirect addressing
   * via a scratch register.  Change the r/m field from 0x5 (%rip)
@@ -564,11 +565,6 @@ static int branch_setup_xol_ops(struct arch_uprobe *auprobe, struct insn *insn)
  u8 opc1 = OPCODE1(insn);
  int i;
 
- /* has the side-effect of processing the entire instruction */
- insn_get_length(insn);
- if (WARN_ON_ONCE(!insn_complete(insn)))
-  return -ENOEXEC;
-
  switch (opc1) {
  case 0xeb: /* jmp 8 */
  case 0xe9: /* jmp 32 */
@@ -654,7 +650,6 @@ int arch_uprobe_analyze_insn(struct arch_uprobe *auprobe, struct mm_struct *mm,
   fix_ip = false;
   break;
  case 0xff:
-  insn_get_modrm(&insn);
   switch (MODRM_REG(&insn)) {
   case 2: case 3:   /* call or lcall, indirect */
    fix_call = true;
-- 
1.7.1