From 7ec382da5728ce4dcf6f04bcc8214ffa5e55ec3d Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:19:25 -0400
Subject: [fs] nfs: rename members of nfs_pgio_data

Message-id: <1411050057-12417-3-git-send-email-steved@redhat.com>
Patchwork-id: 96178
O-Subject: [RHEL7.1 PATCH 02/94] nfs: rename members of nfs_pgio_data
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Weston Andros Adamson <dros@primarydata.com>

Rename "verf" to "writeverf" and "pages" to "page_array" to prepare for
merge of nfs_pgio_data and nfs_pgio_header.

Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: Weston Andros Adamson <dros@primarydata.com>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id:823b0c9d9800e712374cda89ac3565bd29f6701b
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfs/blocklayout/blocklayout.c b/fs/nfs/blocklayout/blocklayout.c
index d1ae1ca..5e2adc7 100644
--- a/fs/nfs/blocklayout/blocklayout.c
+++ b/fs/nfs/blocklayout/blocklayout.c
@@ -261,7 +261,8 @@ bl_read_pagelist(struct nfs_pgio_data *rdata)
  const bool is_dio = (header->dreq != NULL);
 
  dprintk("%s enter nr_pages %u offset %lld count %u\n", __func__,
-        rdata->pages.npages, f_offset, (unsigned int)rdata->args.count);
+  rdata->page_array.npages, f_offset,
+  (unsigned int)rdata->args.count);
 
  par = alloc_parallel(rdata);
  if (!par)
@@ -271,7 +272,7 @@ bl_read_pagelist(struct nfs_pgio_data *rdata)
 
  isect = (sector_t) (f_offset >> SECTOR_SHIFT);
  /* Code assumes extents are page-aligned */
- for (i = pg_index; i < rdata->pages.npages; i++) {
+ for (i = pg_index; i < rdata->page_array.npages; i++) {
   if (!extent_length) {
    /* We've used up the previous extent */
    bl_put_extent(be);
@@ -320,7 +321,8 @@ bl_read_pagelist(struct nfs_pgio_data *rdata)
    struct pnfs_block_extent *be_read;
 
    be_read = (hole && cow_read) ? cow_read : be;
-   bio = do_add_page_to_bio(bio, rdata->pages.npages - i,
+   bio = do_add_page_to_bio(bio,
+       rdata->page_array.npages - i,
        READ,
        isect, pages[i], be_read,
        bl_end_io_read, par,
@@ -453,7 +455,7 @@ static void bl_end_par_io_write(void *data, int num_se)
  }
 
  wdata->task.tk_status = wdata->header->pnfs_error;
- wdata->verf.committed = NFS_FILE_SYNC;
+ wdata->writeverf.committed = NFS_FILE_SYNC;
  INIT_WORK(&wdata->task.u.tk_work, bl_write_cleanup);
  schedule_work(&wdata->task.u.tk_work);
 }
@@ -706,7 +708,7 @@ bl_write_pagelist(struct nfs_pgio_data *wdata, int sync)
   dprintk("pnfsblock nonblock aligned DIO writes. Resend MDS\n");
   goto out_mds;
  }
- /* At this point, wdata->pages is a (sequential) list of nfs_pages.
+ /* At this point, wdata->page_aray is a (sequential) list of nfs_pages.
   * We want to write each, and if there is an error set pnfs_error
   * to have it redone using nfs.
   */
@@ -798,7 +800,7 @@ next_page:
 
  /* Middle pages */
  pg_index = wdata->args.pgbase >> PAGE_CACHE_SHIFT;
- for (i = pg_index; i < wdata->pages.npages; i++) {
+ for (i = pg_index; i < wdata->page_array.npages; i++) {
   if (!extent_length) {
    /* We've used up the previous extent */
    bl_put_extent(be);
@@ -869,7 +871,8 @@ next_page:
   }
 
 
-  bio = do_add_page_to_bio(bio, wdata->pages.npages - i, WRITE,
+  bio = do_add_page_to_bio(bio, wdata->page_array.npages - i,
+      WRITE,
       isect, pages[i], be,
       bl_end_io_write, par,
       pg_offset, pg_len);
diff --git a/fs/nfs/objlayout/objlayout.c b/fs/nfs/objlayout/objlayout.c
index 765d3f5..31fed91 100644
--- a/fs/nfs/objlayout/objlayout.c
+++ b/fs/nfs/objlayout/objlayout.c
@@ -329,7 +329,7 @@ objlayout_write_done(struct objlayout_io_res *oir, ssize_t status, bool sync)
  oir->status = wdata->task.tk_status = status;
  if (status >= 0) {
   wdata->res.count = status;
-  wdata->verf.committed = oir->committed;
+  wdata->writeverf.committed = oir->committed;
  } else {
   wdata->header->pnfs_error = status;
  }
@@ -337,7 +337,7 @@ objlayout_write_done(struct objlayout_io_res *oir, ssize_t status, bool sync)
  /* must not use oir after this point */
 
  dprintk("%s: Return status %zd committed %d sync=%d\n", __func__,
-  status, wdata->verf.committed, sync);
+  status, wdata->writeverf.committed, sync);
 
  if (sync)
   pnfs_ld_write_done(wdata);
diff --git a/fs/nfs/pagelist.c b/fs/nfs/pagelist.c
index 509d009..061ce57 100644
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@ -484,7 +484,7 @@ EXPORT_SYMBOL_GPL(nfs_pgio_header_free);
 static bool nfs_pgio_data_init(struct nfs_pgio_header *hdr,
           unsigned int pagecount)
 {
- if (nfs_pgarray_set(&hdr->data.pages, pagecount)) {
+ if (nfs_pgarray_set(&hdr->data.page_array, pagecount)) {
   hdr->data.header = hdr;
   atomic_inc(&hdr->refcnt);
   return true;
@@ -501,8 +501,8 @@ void nfs_pgio_data_destroy(struct nfs_pgio_data *data)
  struct nfs_pgio_header *hdr = data->header;
 
  put_nfs_open_context(data->args.context);
- if (data->pages.pagevec != data->pages.page_array)
-  kfree(data->pages.pagevec);
+ if (data->page_array.pagevec != data->page_array.page_array)
+  kfree(data->page_array.pagevec);
  if (atomic_dec_and_test(&hdr->refcnt))
   hdr->completion_ops->completion(hdr);
 }
@@ -530,7 +530,7 @@ static void nfs_pgio_rpcsetup(struct nfs_pgio_data *data,
  /* pnfs_set_layoutcommit needs this */
  data->mds_offset = data->args.offset;
  data->args.pgbase = req->wb_pgbase + offset;
- data->args.pages  = data->pages.pagevec;
+ data->args.pages  = data->page_array.pagevec;
  data->args.count  = count;
  data->args.context = get_nfs_open_context(req->wb_context);
  data->args.lock_context = req->wb_lock_context;
@@ -548,7 +548,7 @@ static void nfs_pgio_rpcsetup(struct nfs_pgio_data *data,
  data->res.fattr   = &data->fattr;
  data->res.count   = count;
  data->res.eof     = 0;
- data->res.verf    = &data->verf;
+ data->res.verf    = &data->writeverf;
  nfs_fattr_init(&data->fattr);
 }
 
@@ -717,7 +717,7 @@ int nfs_generic_pgio(struct nfs_pageio_descriptor *desc,
 
  data = &hdr->data;
  nfs_init_cinfo(&cinfo, desc->pg_inode, desc->pg_dreq);
- pages = data->pages.pagevec;
+ pages = data->page_array.pagevec;
  while (!list_empty(head)) {
   req = nfs_list_entry(head->next);
   nfs_list_remove_request(req);
diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index ecb893c..16e8c27 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -598,9 +598,9 @@ nfs_clear_request_commit(struct nfs_page *req)
 static inline
 int nfs_write_need_commit(struct nfs_pgio_data *data)
 {
- if (data->verf.committed == NFS_DATA_SYNC)
+ if (data->writeverf.committed == NFS_DATA_SYNC)
   return data->header->lseg == NULL;
- return data->verf.committed != NFS_FILE_SYNC;
+ return data->writeverf.committed != NFS_FILE_SYNC;
 }
 
 #else
@@ -1095,8 +1095,9 @@ static void nfs_writeback_release_common(struct nfs_pgio_data *data)
   if (test_bit(NFS_IOHDR_NEED_RESCHED, &hdr->flags))
    ; /* Do nothing */
   else if (!test_and_set_bit(NFS_IOHDR_NEED_COMMIT, &hdr->flags))
-   memcpy(&hdr->verf, &data->verf, sizeof(hdr->verf));
-  else if (memcmp(&hdr->verf, &data->verf, sizeof(hdr->verf)))
+   memcpy(&hdr->verf, &data->writeverf, sizeof(hdr->verf));
+  else if (memcmp(&hdr->verf, &data->writeverf,
+    sizeof(hdr->verf)))
    set_bit(NFS_IOHDR_NEED_RESCHED, &hdr->flags);
   spin_unlock(&hdr->lock);
  }
diff --git a/include/linux/nfs_xdr.h b/include/linux/nfs_xdr.h
index e1c9437..bb18dba 100644
--- a/include/linux/nfs_xdr.h
+++ b/include/linux/nfs_xdr.h
@@ -1262,13 +1262,13 @@ struct nfs_pgio_data {
  struct list_head list;
  struct rpc_task  task;
  struct nfs_fattr fattr;
- struct nfs_writeverf verf;  /* Used for writes */
+ struct nfs_writeverf writeverf; /* Used for writes */
  struct nfs_pgio_args args;  /* argument struct */
  struct nfs_pgio_res res;  /* result struct */
  unsigned long  timestamp; /* For lease renewal */
  int (*pgio_done_cb)(struct rpc_task *task, struct nfs_pgio_data *data);
  __u64   mds_offset; /* Filelayout dense stripe */
- struct nfs_page_array pages;
+ struct nfs_page_array page_array;
  struct nfs_client *ds_clp; /* pNFS data server */
  int   ds_idx;  /* ds index if ds_clp is set */
 };
-- 
1.7.1