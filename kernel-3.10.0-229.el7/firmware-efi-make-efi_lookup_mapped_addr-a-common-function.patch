From 50f87e5e3f4ed31e5687373b4b142ddf08a5f541 Mon Sep 17 00:00:00 2001
From: Dave Young <dyoung@redhat.com>
Date: Thu, 22 May 2014 02:42:54 -0400
Subject: [firmware] efi: make efi_lookup_mapped_addr() a common function

Message-id: <1400726607-13717-3-git-send-email-dyoung@redhat.com>
Patchwork-id: 80103
O-Subject: [RHEL7.1 PATCH 02/35] efi: x86: make efi_lookup_mapped_addr() a common function
Bugzilla: 1080109
RH-Acked-by: Chao WANG <chaowang@redhat.com>
RH-Acked-by: Vivek Goyal <vgoyal@redhat.com>

Resolves: bz1080109

Brew build:
https://brewweb.devel.redhat.com/taskinfo?taskID=7480539

Test: Tested kexec/kdump on HP workstation and qemu.

This is another generic code change, later patches depends on it.
Upstream commit:
commit 258f6fd738221766b512cd8c7120563b78d62829
Author: Leif Lindholm <leif.lindholm@linaro.org>
Date:   Thu Sep 5 11:34:55 2013 +0100

    efi: x86: make efi_lookup_mapped_addr() a common function

    efi_lookup_mapped_addr() is a handy utility for other platforms than
    x86. Move it from arch/x86 to drivers/firmware. Add memmap pointer
    to global efi structure, and initialise it on x86.

    Signed-off-by: Leif Lindholm <leif.lindholm@linaro.org>
    Signed-off-by: Matt Fleming <matt.fleming@intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/platform/efi/efi.c b/arch/x86/platform/efi/efi.c
index 949e293..bac1ddc 100644
--- a/arch/x86/platform/efi/efi.c
+++ b/arch/x86/platform/efi/efi.c
@@ -393,6 +393,8 @@ int __init efi_memblock_x86_reserve_range(void)
 
  memblock_reserve(pmap, memmap.nr_map * memmap.desc_size);
 
+ efi.memmap = &memmap;
+
  return 0;
 }
 
@@ -736,34 +738,6 @@ static void __init runtime_code_page_mkexec(void)
  }
 }
 
-/*
- * We can't ioremap data in EFI boot services RAM, because we've already mapped
- * it as RAM.  So, look it up in the existing EFI memory map instead.  Only
- * callable after efi_enter_virtual_mode and before efi_free_boot_services.
- */
-void __iomem *efi_lookup_mapped_addr(u64 phys_addr)
-{
- void *p;
- if (WARN_ON(!memmap.map))
-  return NULL;
- for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {
-  efi_memory_desc_t *md = p;
-  u64 size = md->num_pages << EFI_PAGE_SHIFT;
-  u64 end = md->phys_addr + size;
-  if (!(md->attribute & EFI_MEMORY_RUNTIME) &&
-      md->type != EFI_BOOT_SERVICES_CODE &&
-      md->type != EFI_BOOT_SERVICES_DATA)
-   continue;
-  if (!md->virt_addr)
-   continue;
-  if (phys_addr >= md->phys_addr && phys_addr < end) {
-   phys_addr += md->virt_addr - md->phys_addr;
-   return (__force void __iomem *)(unsigned long)phys_addr;
-  }
- }
- return NULL;
-}
-
 void efi_memory_uc(u64 addr, unsigned long size)
 {
  unsigned long page_shift = 1UL << EFI_PAGE_SHIFT;
diff --git a/drivers/firmware/efi/efi.c b/drivers/firmware/efi/efi.c
index e1010d4..2e2fbde 100644
--- a/drivers/firmware/efi/efi.c
+++ b/drivers/firmware/efi/efi.c
@@ -150,6 +150,38 @@ err_put:
 subsys_initcall(efisubsys_init);
 
 
+/*
+ * We can't ioremap data in EFI boot services RAM, because we've already mapped
+ * it as RAM.  So, look it up in the existing EFI memory map instead.  Only
+ * callable after efi_enter_virtual_mode and before efi_free_boot_services.
+ */
+void __iomem *efi_lookup_mapped_addr(u64 phys_addr)
+{
+ struct efi_memory_map *map;
+ void *p;
+ map = efi.memmap;
+ if (!map)
+  return NULL;
+ if (WARN_ON(!map->map))
+  return NULL;
+ for (p = map->map; p < map->map_end; p += map->desc_size) {
+  efi_memory_desc_t *md = p;
+  u64 size = md->num_pages << EFI_PAGE_SHIFT;
+  u64 end = md->phys_addr + size;
+  if (!(md->attribute & EFI_MEMORY_RUNTIME) &&
+      md->type != EFI_BOOT_SERVICES_CODE &&
+      md->type != EFI_BOOT_SERVICES_DATA)
+   continue;
+  if (!md->virt_addr)
+   continue;
+  if (phys_addr >= md->phys_addr && phys_addr < end) {
+   phys_addr += md->virt_addr - md->phys_addr;
+   return (__force void __iomem *)(unsigned long)phys_addr;
+  }
+ }
+ return NULL;
+}
+
 static __initdata efi_config_table_type_t common_tables[] = {
  {ACPI_20_TABLE_GUID, "ACPI 2.0", &efi.acpi20},
  {ACPI_TABLE_GUID, "ACPI", &efi.acpi},
diff --git a/include/linux/efi.h b/include/linux/efi.h
index 3339ec5..d83b79c 100644
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@ -595,6 +595,7 @@ extern struct efi {
  efi_get_next_high_mono_count_t *get_next_high_mono_count;
  efi_reset_system_t *reset_system;
  efi_set_virtual_address_map_t *set_virtual_address_map;
+ struct efi_memory_map *memmap;
 } efi;
 
 static inline int
-- 
1.7.1