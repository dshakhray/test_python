From 1109c7168dc70924035e2d4626acf2c670e40208 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:13 -0400
Subject: [kernel] perf: Optimize group_sched_in()

Message-id: <1410181752-25631-9-git-send-email-jolsa@redhat.com>
Patchwork-id: 91687
O-Subject: [PATCH RHEL7.1 BZ1134356 008/307] perf: Optimize group_sched_in()
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 4a2345937c17722bd2979f662ae909846b4a052a
Author: Peter Zijlstra <peterz@infradead.org>
Date: Mon Feb 24 12:43:31 2014 +0100

description
===========
Use the ctx pmu instead of the event pmu.

When a group leader is a software event but the group contains
hardware events, the entire group is on the hardware PMU.

Using the hardware PMU for the transaction makes most sense since
that's the most expensive one to programm (and software PMUs generally
don't have TXN support anyway).
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index a087b2b..23c718b 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -1730,7 +1730,7 @@ group_sched_in(struct perf_event *group_event,
         struct perf_event_context *ctx)
 {
  struct perf_event *event, *partial_group = NULL;
- struct pmu *pmu = group_event->pmu;
+ struct pmu *pmu = ctx->pmu;
  u64 now = ctx->time;
  bool simulate = false;
 
-- 
1.7.1