From bdfcdb2ae509b1c9c70b47c1eb7cb5927f49301c Mon Sep 17 00:00:00 2001
From: Petr  Matousek <pmatouse@redhat.com>
Date: Tue, 23 Sep 2014 18:22:17 -0400
Subject: [virt] kvm/vmx: handle invvpid vm exit gracefully

Message-id: <20140923182216.GL19960@dhcp-25-225.brq.redhat.com>
Patchwork-id: 5234
O-Subject: [kernel team] [EMBARGOED RHEL7.1 kvm PATCH v2] kvm: vmx: handle invvpid vm exit gracefully
Bugzilla: 1144829
CVE: CVE-2014-3646
RH-Acked-by: Paolo Bonzini <pbonzini@redhat.com>
RH-Acked-by: Michael S. Tsirkin <mst@redhat.com>
RH-Acked-by: Andrew Jones <drjones@redhat.com>

CVE:          CVE-2014-3646
CVE / Top BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1144825
BZ:           https://bugzilla.redhat.com/show_bug.cgi?id=1144829
Upstream:     currently embargoed, same patch will be posted upstream
Brew build:   https://brewweb.devel.redhat.com/taskinfo?taskID=8005026
Testing:      using reproducer

On systems with invvpid instruction support (corresponding bit in
IA32_VMX_EPT_VPID_CAP MSR is set) guest invocation of invvpid
causes vm exit, which is currently not handled and results in
propagation of unknown exit to userspace.

Fix this by installing an invvpid vm exit handler.

This is CVE-2014-3646.

Signed-off-by: Petr Matousek <pmatouse@redhat.com>
---
v1 -> v2
  * minor description change
  * tracing support
  * explicit L1 exit

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/include/uapi/asm/vmx.h b/arch/x86/include/uapi/asm/vmx.h
index 7a34e8f..dccea7f 100644
--- a/arch/x86/include/uapi/asm/vmx.h
+++ b/arch/x86/include/uapi/asm/vmx.h
@@ -67,6 +67,7 @@
 #define EXIT_REASON_EPT_MISCONFIG       49
 #define EXIT_REASON_INVEPT              50
 #define EXIT_REASON_PREEMPTION_TIMER    52
+#define EXIT_REASON_INVVPID             53
 #define EXIT_REASON_WBINVD              54
 #define EXIT_REASON_XSETBV              55
 #define EXIT_REASON_APIC_WRITE          56
@@ -112,6 +113,7 @@
  { EXIT_REASON_EOI_INDUCED,           "EOI_INDUCED" }, \
  { EXIT_REASON_INVALID_STATE,         "INVALID_STATE" }, \
  { EXIT_REASON_INVD,                  "INVD" }, \
+ { EXIT_REASON_INVVPID,               "INVVPID" }, \
  { EXIT_REASON_INVPCID,               "INVPCID" }, \
  { EXIT_REASON_PREEMPTION_TIMER,      "PREEMPTION_TIMER" }
 
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 0fd49f7..8a7dcf9 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -6609,6 +6609,12 @@ static int handle_invept(struct kvm_vcpu *vcpu)
  return 1;
 }
 
+static int handle_invvpid(struct kvm_vcpu *vcpu)
+{
+ kvm_queue_exception(vcpu, UD_VECTOR);
+ return 1;
+}
+
 /*
  * The exit handlers return 1 if the exit was handled fully and guest execution
  * may resume.  Otherwise they set the kvm_run parameter to indicate what needs
@@ -6654,6 +6660,7 @@ static int (*const kvm_vmx_exit_handlers[])(struct kvm_vcpu *vcpu) = {
  [EXIT_REASON_MWAIT_INSTRUCTION]       = handle_mwait,
  [EXIT_REASON_MONITOR_INSTRUCTION]     = handle_monitor,
  [EXIT_REASON_INVEPT]                  = handle_invept,
+ [EXIT_REASON_INVVPID]                 = handle_invvpid,
 };
 
 static const int kvm_vmx_max_exit_handlers =
@@ -6889,7 +6896,7 @@ static bool nested_vmx_exit_handled(struct kvm_vcpu *vcpu)
  case EXIT_REASON_VMPTRST: case EXIT_REASON_VMREAD:
  case EXIT_REASON_VMRESUME: case EXIT_REASON_VMWRITE:
  case EXIT_REASON_VMOFF: case EXIT_REASON_VMON:
- case EXIT_REASON_INVEPT:
+ case EXIT_REASON_INVEPT: case EXIT_REASON_INVVPID:
   /*
    * VMX instructions trap unconditionally. This allows L1 to
    * emulate them for its L2 guest, i.e., allows 3-level nesting!
-- 
1.7.1