From 42a76dd0520f25a86aafed332012373a5cae2570 Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Thu, 14 Aug 2014 14:42:17 -0400
Subject: [ethernet] e1000e: Restrict MDIO Slow Mode workaround to relevant parts

Message-id: <1408027348-9610-24-git-send-email-jogreene@redhat.com>
Patchwork-id: 87725
O-Subject: [RHEL7.1 PATCH 23/34] e1000e: Restrict MDIO Slow Mode workaround to relevant parts
Bugzilla: 1091119
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

It has been determined that the workaround of putting the PHY into MDIO
slow mode to access the PHY id is not necessary with Lynx Point and newer
parts.  The issue that necessitated the workaround has been fixed on the
newer hardware.

We will maintains, as a last ditch attempt, the conversion to MDIO Slow
Mode in the failure branch when attempting to access the PHY id so as to
cover all contingencies.

Signed-off-by: Dave Ertman <davidx.m.ertman@intel.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 2c9826243bebeb90a57a7946d4144a2a9a43dc39)

BZ: 1091119
Testing: Acceptable, see BZ
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7834849
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/e1000e/ich8lan.c b/drivers/net/ethernet/intel/e1000e/ich8lan.c
index 80806bd..0bbf238 100644
--- a/drivers/net/ethernet/intel/e1000e/ich8lan.c
+++ b/drivers/net/ethernet/intel/e1000e/ich8lan.c
@@ -178,7 +178,7 @@ static bool e1000_phy_is_accessible_pchlan(struct e1000_hw *hw)
 {
  u16 phy_reg = 0;
  u32 phy_id = 0;
- s32 ret_val;
+ s32 ret_val = 0;
  u16 retry_count;
  u32 mac_reg = 0;
 
@@ -209,11 +209,13 @@ static bool e1000_phy_is_accessible_pchlan(struct e1000_hw *hw)
  /* In case the PHY needs to be in mdio slow mode,
   * set slow mode and try to get the PHY id again.
   */
- hw->phy.ops.release(hw);
- ret_val = e1000_set_mdio_slow_mode_hv(hw);
- if (!ret_val)
-  ret_val = e1000e_get_phy_id(hw);
- hw->phy.ops.acquire(hw);
+ if (hw->mac.type < e1000_pch_lpt) {
+  hw->phy.ops.release(hw);
+  ret_val = e1000_set_mdio_slow_mode_hv(hw);
+  if (!ret_val)
+   ret_val = e1000e_get_phy_id(hw);
+  hw->phy.ops.acquire(hw);
+ }
 
  if (ret_val)
   return false;
-- 
1.7.1