From ccf062d75ca6548db897ec873685ea0ca4f2fa1b Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:50:58 -0400
Subject: [fs] nfsd: reserve space before inlining 0-copy pages

Message-id: <1403560314-32525-117-git-send-email-bfields@redhat.com>
Patchwork-id: 84508
O-Subject: [Patch RHEL7 116/172] nfsd4: reserve space before inlining 0-copy pages
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

Once we've included page-cache pages in the encoding it's difficult to
remove them and restart encoding.  (xdr_truncate_encode doesn't handle
that case.)  So, make sure we'll have adequate space to finish the
operation first.

For now COMPOUND_SLACK_SPACE checks should prevent this case happening,
but we want to remove those checks.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 4e21ac4b6f1d09c56f7d10916eaa738361214ab7
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 799a904..8728715 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -3071,6 +3071,10 @@ nfsd4_encode_read(struct nfsd4_compoundres *resp, __be32 nfserr,
  if (!p)
   return nfserr_resource;
 
+ /* Make sure there will be room for padding if needed: */
+ if (xdr->end - xdr->p < 1)
+  return nfserr_resource;
+
  maxcount = svc_max_payload(resp->rqstp);
  if (maxcount > read->rd_length)
   maxcount = read->rd_length;
@@ -3122,8 +3126,6 @@ nfsd4_encode_read(struct nfsd4_compoundres *resp, __be32 nfserr,
  resp->xdr.buf->tail[0].iov_len = 0;
  if (maxcount&3) {
   p = xdr_reserve_space(xdr, 4);
-  if (!p)
-   return nfserr_resource;
   WRITE32(0);
   resp->xdr.buf->tail[0].iov_base += maxcount&3;
   resp->xdr.buf->tail[0].iov_len = 4 - (maxcount&3);
@@ -3156,6 +3158,9 @@ nfsd4_encode_readlink(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd
  if (!p)
   return nfserr_resource;
 
+ if (xdr->end - xdr->p < 1)
+  return nfserr_resource;
+
  /*
   * XXX: By default, the ->readlink() VFS op will truncate symlinks
   * if they would overflow the buffer.  Is this kosher in NFSv4?  If
@@ -3182,8 +3187,6 @@ nfsd4_encode_readlink(struct nfsd4_compoundres *resp, __be32 nfserr, struct nfsd
  resp->xdr.buf->tail[0].iov_len = 0;
  if (maxcount&3) {
   p = xdr_reserve_space(xdr, 4);
-  if  (!p)
-   return nfserr_resource;
   WRITE32(0);
   resp->xdr.buf->tail[0].iov_base += maxcount&3;
   resp->xdr.buf->tail[0].iov_len = 4 - (maxcount&3);
-- 
1.7.1