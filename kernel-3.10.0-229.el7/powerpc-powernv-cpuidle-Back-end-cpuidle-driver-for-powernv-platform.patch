From 46b86a0b480d500035feaf52a1ca0edf954d1a14 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:08:30 -0400
Subject: [powerpc] powernv/cpuidle: Back-end cpuidle driver for powernv platform

Message-id: <1410545655-205645-282-git-send-email-dzickus@redhat.com>
Patchwork-id: 94630
O-Subject: [RHEL7 PATCH 281/626] powerpc/powernv/cpuidle: Back-end cpuidle driver for powernv platform.
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 2c2e6ecfd077cbae72d32568af58c4ba57826c84
Author: Deepthi Dharwar <deepthi@linux.vnet.ibm.com>
Date:   Tue Jan 14 16:32:40 2014 +0530

    powerpc/powernv/cpuidle: Back-end cpuidle driver for powernv platform.

    Following patch ports the cpuidle framework for powernv
    platform and also implements a cpuidle back-end powernv
    idle driver calling on to power7_nap and snooze idle states.

    Signed-off-by: Deepthi Dharwar <deepthi@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---
 create mode 100644 drivers/cpuidle/cpuidle-powernv.c

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/platforms/powernv/setup.c b/arch/powerpc/platforms/powernv/setup.c
index a932feb..21166f6 100644
--- a/arch/powerpc/platforms/powernv/setup.c
+++ b/arch/powerpc/platforms/powernv/setup.c
@@ -26,6 +26,7 @@
 #include <linux/of_fdt.h>
 #include <linux/interrupt.h>
 #include <linux/bug.h>
+#include <linux/cpuidle.h>
 
 #include <asm/machdep.h>
 #include <asm/firmware.h>
@@ -216,6 +217,16 @@ static int __init pnv_probe(void)
  return 1;
 }
 
+void powernv_idle(void)
+{
+ /* Hook to cpuidle framework if available, else
+  * call on default platform idle code
+  */
+ if (cpuidle_idle_call()) {
+  power7_idle();
+ }
+}
+
 define_machine(powernv) {
  .name   = "PowerNV",
  .probe   = pnv_probe,
@@ -225,7 +236,7 @@ define_machine(powernv) {
  .show_cpuinfo  = pnv_show_cpuinfo,
  .progress  = pnv_progress,
  .machine_shutdown = pnv_shutdown,
- .power_save             = power7_idle,
+ .power_save             = powernv_idle,
  .calibrate_decr  = generic_calibrate_decr,
 #ifdef CONFIG_KEXEC
  .kexec_cpu_down  = pnv_kexec_cpu_down,
diff --git a/drivers/cpuidle/Kconfig.powerpc b/drivers/cpuidle/Kconfig.powerpc
index 8147de5..66c3a09 100644
--- a/drivers/cpuidle/Kconfig.powerpc
+++ b/drivers/cpuidle/Kconfig.powerpc
@@ -9,3 +9,12 @@ config PSERIES_CPUIDLE
  help
    Select this option to enable processor idle state management
    through cpuidle subsystem.
+
+config POWERNV_CPUIDLE
+ bool "Cpuidle driver for powernv platforms"
+ depends on CPU_IDLE
+ depends on PPC_POWERNV
+ default y
+ help
+   Select this option to enable processor idle state management
+   through cpuidle subsystem.
diff --git a/drivers/cpuidle/Makefile b/drivers/cpuidle/Makefile
index 0547621..73ac9ef 100644
--- a/drivers/cpuidle/Makefile
+++ b/drivers/cpuidle/Makefile
@@ -11,3 +11,4 @@ obj-$(CONFIG_ARCH_KIRKWOOD) += cpuidle-kirkwood.o
 ###############################################################################
 # POWERPC drivers
 obj-$(CONFIG_PSERIES_CPUIDLE)  += cpuidle-pseries.o
+obj-$(CONFIG_POWERNV_CPUIDLE)  += cpuidle-powernv.o
diff --git a/drivers/cpuidle/cpuidle-powernv.c b/drivers/cpuidle/cpuidle-powernv.c
new file mode 100644
index 0000000..78fd174
--- /dev/null
+++ b/drivers/cpuidle/cpuidle-powernv.c
@@ -0,0 +1,169 @@
+/*
+ *  cpuidle-powernv - idle state cpuidle driver.
+ *  Adapted from drivers/cpuidle/cpuidle-pseries
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/moduleparam.h>
+#include <linux/cpuidle.h>
+#include <linux/cpu.h>
+#include <linux/notifier.h>
+
+#include <asm/machdep.h>
+#include <asm/firmware.h>
+
+struct cpuidle_driver powernv_idle_driver = {
+ .name             = "powernv_idle",
+ .owner            = THIS_MODULE,
+};
+
+static int max_idle_state;
+static struct cpuidle_state *cpuidle_state_table;
+
+static int snooze_loop(struct cpuidle_device *dev,
+   struct cpuidle_driver *drv,
+   int index)
+{
+ local_irq_enable();
+ set_thread_flag(TIF_POLLING_NRFLAG);
+
+ while (!need_resched()) {
+  HMT_low();
+  HMT_very_low();
+ }
+
+ HMT_medium();
+ clear_thread_flag(TIF_POLLING_NRFLAG);
+ smp_mb();
+ return index;
+}
+
+static int nap_loop(struct cpuidle_device *dev,
+   struct cpuidle_driver *drv,
+   int index)
+{
+ power7_idle();
+ return index;
+}
+
+/*
+ * States for dedicated partition case.
+ */
+static struct cpuidle_state powernv_states[] = {
+ { /* Snooze */
+  .name = "snooze",
+  .desc = "snooze",
+  .flags = CPUIDLE_FLAG_TIME_VALID,
+  .exit_latency = 0,
+  .target_residency = 0,
+  .enter = &snooze_loop },
+ { /* NAP */
+  .name = "NAP",
+  .desc = "NAP",
+  .flags = CPUIDLE_FLAG_TIME_VALID,
+  .exit_latency = 10,
+  .target_residency = 100,
+  .enter = &nap_loop },
+};
+
+static int powernv_cpuidle_add_cpu_notifier(struct notifier_block *n,
+   unsigned long action, void *hcpu)
+{
+ int hotcpu = (unsigned long)hcpu;
+ struct cpuidle_device *dev =
+    per_cpu(cpuidle_devices, hotcpu);
+
+ if (dev && cpuidle_get_driver()) {
+  switch (action) {
+  case CPU_ONLINE:
+  case CPU_ONLINE_FROZEN:
+   cpuidle_pause_and_lock();
+   cpuidle_enable_device(dev);
+   cpuidle_resume_and_unlock();
+   break;
+
+  case CPU_DEAD:
+  case CPU_DEAD_FROZEN:
+   cpuidle_pause_and_lock();
+   cpuidle_disable_device(dev);
+   cpuidle_resume_and_unlock();
+   break;
+
+  default:
+   return NOTIFY_DONE;
+  }
+ }
+ return NOTIFY_OK;
+}
+
+static struct notifier_block setup_hotplug_notifier = {
+ .notifier_call = powernv_cpuidle_add_cpu_notifier,
+};
+
+/*
+ * powernv_cpuidle_driver_init()
+ */
+static int powernv_cpuidle_driver_init(void)
+{
+ int idle_state;
+ struct cpuidle_driver *drv = &powernv_idle_driver;
+
+ drv->state_count = 0;
+
+ for (idle_state = 0; idle_state < max_idle_state; ++idle_state) {
+  /* Is the state not enabled? */
+  if (cpuidle_state_table[idle_state].enter == NULL)
+   continue;
+
+  drv->states[drv->state_count] = /* structure copy */
+   cpuidle_state_table[idle_state];
+
+  drv->state_count += 1;
+ }
+
+ return 0;
+}
+
+/*
+ * powernv_idle_probe()
+ * Choose state table for shared versus dedicated partition
+ */
+static int powernv_idle_probe(void)
+{
+
+ if (cpuidle_disable != IDLE_NO_OVERRIDE)
+  return -ENODEV;
+
+ if (firmware_has_feature(FW_FEATURE_OPALv3)) {
+  cpuidle_state_table = powernv_states;
+  max_idle_state = ARRAY_SIZE(powernv_states);
+  } else
+   return -ENODEV;
+
+ return 0;
+}
+
+static int __init powernv_processor_idle_init(void)
+{
+ int retval;
+
+ retval = powernv_idle_probe();
+ if (retval)
+  return retval;
+
+ powernv_cpuidle_driver_init();
+ retval = cpuidle_register(&powernv_idle_driver, NULL);
+ if (retval) {
+  printk(KERN_DEBUG "Registration of powernv driver failed.\n");
+  return retval;
+ }
+
+ register_cpu_notifier(&setup_hotplug_notifier);
+ printk(KERN_DEBUG "powernv_idle_driver registered\n");
+ return 0;
+}
+
+device_initcall(powernv_processor_idle_init);
-- 
1.7.1