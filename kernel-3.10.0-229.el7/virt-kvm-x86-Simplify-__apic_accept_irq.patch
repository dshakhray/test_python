From 42366590dc6808c34cb5b14a143bd36adca4a122 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:37:21 -0400
Subject: [virt] kvm/x86: Simplify __apic_accept_irq

Message-id: <1406040016-3289-47-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86125
O-Subject: [RHEL7 PATCH v2 046/221] KVM: x86: Simplify __apic_accept_irq
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jan Kiszka <jan.kiszka@siemens.com>

If posted interrupts are enabled, we can no longer track if an IRQ was
coalesced based on IRR. So drop this logic also from the classic
software path and simplify apic_test_and_set_irr to apic_set_irr.

Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
Signed-off-by: Gleb Natapov <gleb@redhat.com>
(cherry picked from commit 11f5cc051503e54cf786bdbaf0e4ff9cad01df1e)
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/lapic.c b/arch/x86/kvm/lapic.c
index 1b97592..bdee8d0 100644
--- a/arch/x86/kvm/lapic.c
+++ b/arch/x86/kvm/lapic.c
@@ -331,10 +331,10 @@ void kvm_apic_update_irr(struct kvm_vcpu *vcpu, u32 *pir)
 }
 EXPORT_SYMBOL_GPL(kvm_apic_update_irr);
 
-static inline int apic_test_and_set_irr(int vec, struct kvm_lapic *apic)
+static inline void apic_set_irr(int vec, struct kvm_lapic *apic)
 {
  apic->irr_pending = true;
- return apic_test_and_set_vector(vec, apic->regs + APIC_IRR);
+ apic_set_vector(vec, apic->regs + APIC_IRR);
 }
 
 static inline int apic_search_irr(struct kvm_lapic *apic)
@@ -681,28 +681,21 @@ static int __apic_accept_irq(struct kvm_lapic *apic, int delivery_mode,
   if (unlikely(!apic_enabled(apic)))
    break;
 
+  result = 1;
+
   if (dest_map)
    __set_bit(vcpu->vcpu_id, dest_map);
 
-  if (kvm_x86_ops->deliver_posted_interrupt) {
-   result = 1;
+  if (kvm_x86_ops->deliver_posted_interrupt)
    kvm_x86_ops->deliver_posted_interrupt(vcpu, vector);
-  } else {
-   result = !apic_test_and_set_irr(vector, apic);
-
-   if (!result) {
-    if (trig_mode)
-     apic_debug("level trig mode repeatedly "
-      "for vector %d", vector);
-    goto out;
-   }
+  else {
+   apic_set_irr(vector, apic);
 
    kvm_make_request(KVM_REQ_EVENT, vcpu);
    kvm_vcpu_kick(vcpu);
   }
-out:
   trace_kvm_apic_accept_irq(vcpu->vcpu_id, delivery_mode,
-    trig_mode, vector, !result);
+       trig_mode, vector, false);
   break;
 
  case APIC_DM_REMRD:
-- 
1.7.1