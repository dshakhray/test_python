From f9b6f1577cd299c976e008f6416140912bc7ccdb Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:44 -0400
Subject: [kernel] perf: Fix lockdep warning on process exit

Message-id: <1410181752-25631-40-git-send-email-jolsa@redhat.com>
Patchwork-id: 91719
O-Subject: [PATCH RHEL7.1 BZ1134356 039/307] perf: Fix lockdep warning on process exit
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 4a1c0f262f88e2676fda80a6bf80e7dbccae1dcb
Author: Peter Zijlstra <peterz@infradead.org>
Date: Mon Jun 23 16:12:42 2014 +0200

description
===========
Sasha Levin reported:

> While fuzzing with trinity inside a KVM tools guest running the latest -next
> kernel I've stumbled on the following spew:
>
> ======================================================
> [ INFO: possible circular locking dependency detected ]
> 3.15.0-next-20140613-sasha-00026-g6dd125d-dirty #654 Not tainted
> -------------------------------------------------------
> trinity-c578/9725 is trying to acquire lock:
> (&(&pool->lock)->rlock){-.-...}, at: __queue_work (kernel/workqueue.c:1346)
>
> but task is already holding lock:
> (&ctx->lock){-.....}, at: perf_event_exit_task (kernel/events/core.c:7471 kernel/events/core.c:7533)
>
> which lock already depends on the new lock.

> 1 lock held by trinity-c578/9725:
> #0: (&ctx->lock){-.....}, at: perf_event_exit_task (kernel/events/core.c:7471 kernel/events/core.c:7533)
>
>  Call Trace:
>  dump_stack (lib/dump_stack.c:52)
>  print_circular_bug (kernel/locking/lockdep.c:1216)
>  __lock_acquire (kernel/locking/lockdep.c:1840 kernel/locking/lockdep.c:1945 kernel/locking/lockdep.c:2131 kernel/locking/lockdep.c:3182)
>  lock_acquire (./arch/x86/include/asm/current.h:14 kernel/locking/lockdep.c:3602)
>  _raw_spin_lock (include/linux/spinlock_api_smp.h:143 kernel/locking/spinlock.c:151)
>  __queue_work (kernel/workqueue.c:1346)
>  queue_work_on (kernel/workqueue.c:1424)
>  free_object (lib/debugobjects.c:209)
>  __debug_check_no_obj_freed (lib/debugobjects.c:715)
>  debug_check_no_obj_freed (lib/debugobjects.c:727)
>  kmem_cache_free (mm/slub.c:2683 mm/slub.c:2711)
>  free_task (kernel/fork.c:221)
>  __put_task_struct (kernel/fork.c:250)
>  put_ctx (include/linux/sched.h:1855 kernel/events/core.c:898)
>  perf_event_exit_task (kernel/events/core.c:907 kernel/events/core.c:7478 kernel/events/core.c:7533)
>  do_exit (kernel/exit.c:766)
>  do_group_exit (kernel/exit.c:884)
>  get_signal_to_deliver (kernel/signal.c:2347)
>  do_signal (arch/x86/kernel/signal.c:698)
>  do_notify_resume (arch/x86/kernel/signal.c:751)
>  int_signal (arch/x86/kernel/entry_64.S:600)

Urgh.. so the only way I can make that happen is through:

  perf_event_exit_task_context()
    raw_spin_lock(&child_ctx->lock);
    unclone_ctx(child_ctx)
      put_ctx(ctx->parent_ctx);
    raw_spin_unlock_irqrestore(&child_ctx->lock);

And we can avoid this by doing the change below.

I can't immediately see how this changed recently, but given that you
say it's easy to reproduce, lets fix this.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index cde1c72..5097864 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -7504,7 +7504,7 @@ __perf_event_exit_task(struct perf_event *child_event,
 static void perf_event_exit_task_context(struct task_struct *child, int ctxn)
 {
  struct perf_event *child_event, *next;
- struct perf_event_context *child_ctx;
+ struct perf_event_context *child_ctx, *parent_ctx;
  unsigned long flags;
 
  if (likely(!child->perf_event_ctxp[ctxn])) {
@@ -7529,6 +7529,15 @@ static void perf_event_exit_task_context(struct task_struct *child, int ctxn)
  raw_spin_lock(&child_ctx->lock);
  task_ctx_sched_out(child_ctx);
  child->perf_event_ctxp[ctxn] = NULL;
+
+ /*
+  * In order to avoid freeing: child_ctx->parent_ctx->task
+  * under perf_event_context::lock, grab another reference.
+  */
+ parent_ctx = child_ctx->parent_ctx;
+ if (parent_ctx)
+  get_ctx(parent_ctx);
+
  /*
   * If this context is a clone; unclone it so it can't get
   * swapped to another process while we're removing all
@@ -7539,6 +7548,13 @@ static void perf_event_exit_task_context(struct task_struct *child, int ctxn)
  raw_spin_unlock_irqrestore(&child_ctx->lock, flags);
 
  /*
+  * Now that we no longer hold perf_event_context::lock, drop
+  * our extra child_ctx->parent_ctx reference.
+  */
+ if (parent_ctx)
+  put_ctx(parent_ctx);
+
+ /*
   * Report the task dead after unscheduling the events so that we
   * won't get any samples after PERF_RECORD_EXIT. We can however still
   * get a few PERF_RECORD_READ events.
-- 
1.7.1