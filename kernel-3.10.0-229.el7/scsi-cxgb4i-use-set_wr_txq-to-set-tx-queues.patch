From 7b914c94643bfae75320bee600f77bc0bbdc7dfc Mon Sep 17 00:00:00 2001
From: Sai Vemuri <svemuri@redhat.com>
Date: Tue, 16 Dec 2014 22:22:14 -0500
Subject: [scsi] cxgb4i: use set_wr_txq() to set tx queues

Message-id: <1418768535-2637-7-git-send-email-svemuri@redhat.com>
Patchwork-id: 102111
O-Subject: [RHEL7.1 PATCH BZ 1174982 6/7] cxgb4i: use set_wr_txq() to set tx queues
Bugzilla: 1174982
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

Upstream : https://git.kernel.org/cgit/linux/kernel/git/davem/net-next.git/commit/?id=2126bc5e872cefd808a6590c5cec797997a6490d

use cxgb4's set_wr_txq() for setting of the tx queue for a outgoing packet.
remove the similar function in cxgb4i.

Signed-off-by: Karen Xie <kxie@chelsio.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2126bc5e872cefd808a6590c5cec797997a6490d)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/cxgbi/cxgb4i/cxgb4i.c b/drivers/scsi/cxgbi/cxgb4i/cxgb4i.c
index cbb1270..626b1b3 100644
--- a/drivers/scsi/cxgbi/cxgb4i/cxgb4i.c
+++ b/drivers/scsi/cxgbi/cxgb4i/cxgb4i.c
@@ -157,12 +157,6 @@ static struct scsi_transport_template *cxgb4i_stt;
 #define RCV_BUFSIZ_MASK  0x3FFU
 #define MAX_IMM_TX_PKT_LEN 128
 
-static inline void set_queue(struct sk_buff *skb, unsigned int queue,
-    const struct cxgbi_sock *csk)
-{
- skb->queue_mapping = queue;
-}
-
 static int push_tx_frames(struct cxgbi_sock *, int);
 
 /*
@@ -404,7 +398,7 @@ static void send_abort_req(struct cxgbi_sock *csk)
 
  csk->cpl_abort_req = NULL;
  req = (struct cpl_abort_req *)skb->head;
- set_queue(skb, CPL_PRIORITY_DATA, csk);
+ set_wr_txq(skb, CPL_PRIORITY_DATA, csk->port_id);
  req->cmd = CPL_ABORT_SEND_RST;
  t4_set_arp_err_handler(skb, csk, abort_arp_failure);
  INIT_TP_WR(req, csk->tid);
@@ -430,7 +424,7 @@ static void send_abort_rpl(struct cxgbi_sock *csk, int rst_status)
   csk, csk->state, csk->flags, csk->tid, rst_status);
 
  csk->cpl_abort_rpl = NULL;
- set_queue(skb, CPL_PRIORITY_DATA, csk);
+ set_wr_txq(skb, CPL_PRIORITY_DATA, csk->port_id);
  INIT_TP_WR(rpl, csk->tid);
  OPCODE_TID(rpl) = cpu_to_be32(MK_OPCODE_TID(CPL_ABORT_RPL, csk->tid));
  rpl->cmd = rst_status;
@@ -555,7 +549,7 @@ static inline int send_tx_flowc_wr(struct cxgbi_sock *csk)
  flowc->mnemval[8].mnemonic = FW_FLOWC_MNEM_TXDATAPLEN_MAX;
  flowc->mnemval[8].val = 16384;
 
- set_queue(skb, CPL_PRIORITY_DATA, csk);
+ set_wr_txq(skb, CPL_PRIORITY_DATA, csk->port_id);
 
  log_debug(1 << CXGBI_DBG_TOE | 1 << CXGBI_DBG_SOCK,
   "csk 0x%p, tid 0x%x, %u,%u,%u,%u,%u,%u,%u.\n",
@@ -660,7 +654,7 @@ static int push_tx_frames(struct cxgbi_sock *csk, int req_completion)
    break;
   }
   __skb_unlink(skb, &csk->write_queue);
-  set_queue(skb, CPL_PRIORITY_DATA, csk);
+  set_wr_txq(skb, CPL_PRIORITY_DATA, csk->port_id);
   skb->csum = credits_needed + flowclen16;
   csk->wr_cred -= credits_needed;
   csk->wr_una_cred += credits_needed;
@@ -1552,7 +1546,7 @@ static int ddp_ppod_write_idata(struct cxgbi_device *cdev, unsigned int port_id,
   return -ENOMEM;
  }
  req = (struct ulp_mem_io *)skb->head;
- set_queue(skb, CPL_PRIORITY_CONTROL, NULL);
+ set_wr_txq(skb, CPL_PRIORITY_CONTROL, 0);
 
  ulp_mem_io_set_hdr(lldi, req, wr_len, dlen, pm_addr);
  idata = (struct ulptx_idata *)(req + 1);
-- 
1.7.1