From aa03714c8090aadeca7c46dd93ecd430c7e258cb Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:35:56 -0500
Subject: [kernel] rcu: Provide counterpart to rcu_dereference() for non-RCU situations

Message-id: <20141125163556.18115.27163.stgit@warthog.procyon.org.uk>
Patchwork-id: 100940
O-Subject: [PATCH 40/47] rcu: Provide counterpart to rcu_dereference() for non-RCU situations
Bugzilla: 985875
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Paul E. McKenney <paulmck@linux.vnet.ibm.com>

Although rcu_dereference() and friends can be used in situations where
object lifetimes are being managed by something other than RCU, the
resulting sparse and lockdep-RCU noise can be annoying.  This commit
therefore supplies a lockless_dereference(), which provides the
protection for dereferences without the RCU-related debugging noise.

Reported-by: Al Viro <viro@ZenIV.linux.org.uk>
Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Original-commit: 54ef6df3f3f1353d99c80c437259d317b2cd1cbd
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/rcupdate.h b/include/linux/rcupdate.h
index ddcc782..9882f56 100644
--- a/include/linux/rcupdate.h
+++ b/include/linux/rcupdate.h
@@ -559,6 +559,20 @@ static inline void rcu_preempt_sleep_check(void)
   (p) = (typeof(*v) __force space *)(v); \
  } while (0)
 
+/**
+ * lockless_dereference() - safely load a pointer for later dereference
+ * @p: The pointer to load
+ *
+ * Similar to rcu_dereference(), but for situations where the pointed-to
+ * object's lifetime is managed by something other than RCU.  That
+ * "something other" might be reference counting or simple immortality.
+ */
+#define lockless_dereference(p) \
+({ \
+ typeof(p) _________p1 = ACCESS_ONCE(p); \
+ smp_read_barrier_depends(); /* Dependency order vs. p above. */ \
+ (_________p1); \
+})
 
 /**
  * rcu_access_pointer() - fetch RCU pointer with no dereferencing
-- 
1.7.1