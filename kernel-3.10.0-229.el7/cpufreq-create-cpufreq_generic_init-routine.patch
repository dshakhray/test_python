From afdc334458647004db0651f3d22d82f79fa1ab75 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:22:44 -0400
Subject: [cpufreq] create cpufreq_generic_init() routine

Message-id: <1409235879-1283-71-git-send-email-prarit@redhat.com>
Patchwork-id: 89390
O-Subject: [RHEL7.1 PATCH BZ 1134639 070/185] cpufreq: create cpufreq_generic_init() routine
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 70e9e778337973d5bf57004092b360bd3f3c412f
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Thu Oct 3 20:29:07 2013 +0530

    cpufreq: create cpufreq_generic_init() routine

    Many CPUFreq drivers for SMP system (where all cores share same clock lines), do
    similar stuff in their ->init() part.

    This patch creates a generic routine in cpufreq core which can be used by these
    so that we can remove some redundant code.

    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/Kconfig b/drivers/cpufreq/Kconfig
index 534fcb8..2d06754 100644
--- a/drivers/cpufreq/Kconfig
+++ b/drivers/cpufreq/Kconfig
@@ -2,6 +2,7 @@ menu "CPU Frequency scaling"
 
 config CPU_FREQ
  bool "CPU Frequency scaling"
+ select CPU_FREQ_TABLE
  help
    CPU Frequency scaling allows you to change the clock speed of 
    CPUs on the fly. This is a nice method to save power, because 
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 2b38953..f595b0a 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -181,6 +181,37 @@ u64 get_cpu_idle_time(unsigned int cpu, u64 *wall, int io_busy)
 }
 EXPORT_SYMBOL_GPL(get_cpu_idle_time);
 
+/*
+ * This is a generic cpufreq init() routine which can be used by cpufreq
+ * drivers of SMP systems. It will do following:
+ * - validate & show freq table passed
+ * - set policies transition latency
+ * - policy->cpus with all possible CPUs
+ */
+int cpufreq_generic_init(struct cpufreq_policy *policy,
+  struct cpufreq_frequency_table *table,
+  unsigned int transition_latency)
+{
+ int ret;
+
+ ret = cpufreq_table_validate_and_show(policy, table);
+ if (ret) {
+  pr_err("%s: invalid frequency table: %d\n", __func__, ret);
+  return ret;
+ }
+
+ policy->cpuinfo.transition_latency = transition_latency;
+
+ /*
+  * The driver only supports the SMP configuartion where all processors
+  * share the clock and voltage and clock.
+  */
+ cpumask_setall(policy->cpus);
+
+ return 0;
+}
+EXPORT_SYMBOL_GPL(cpufreq_generic_init);
+
 struct cpufreq_policy *cpufreq_cpu_get(unsigned int cpu)
 {
  struct cpufreq_policy *policy = NULL;
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index 5029a16..dad2af4 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -442,6 +442,9 @@ void cpufreq_frequency_table_put_attr(unsigned int cpu);
 int cpufreq_table_validate_and_show(struct cpufreq_policy *policy,
           struct cpufreq_frequency_table *table);
 
+int cpufreq_generic_init(struct cpufreq_policy *policy,
+  struct cpufreq_frequency_table *table,
+  unsigned int transition_latency);
 static inline int cpufreq_generic_exit(struct cpufreq_policy *policy)
 {
  cpufreq_frequency_table_put_attr(policy->cpu);
-- 
1.7.1