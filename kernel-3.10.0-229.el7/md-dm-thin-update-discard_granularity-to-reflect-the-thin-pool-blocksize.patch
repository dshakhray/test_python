From 79131b436746f2b014d6a533d6cba79208726a40 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 19:11:44 -0400
Subject: [md] dm-thin: update discard_granularity to reflect the thin-pool blocksize

Message-id: <1402686704-22462-4-git-send-email-snitzer@redhat.com>
Patchwork-id: 83944
O-Subject: [RHEL7.1 PATCH 3/3] dm thin: update discard_granularity to reflect the thin-pool blocksize
Bugzilla: 1099936
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1099936

Upstream commit 09869de57ed2728ae3c619803932a86cb0e2c4f8
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Wed Jun 11 12:28:43 2014 -0400

    dm thin: update discard_granularity to reflect the thin-pool blocksize

    DM thinp already checks whether the discard_granularity of the data
    device is a factor of the thin-pool block size.  But when using the
    dm-thin-pool's discard passdown support, DM thinp was not selecting the
    max of the underlying data device's discard_granularity and the
    thin-pool's block size.

    Update set_discard_limits() to set discard_granularity to the max of
    these values.  This enables blkdev_issue_discard() to properly align the
    discards that are sent to the DM thin device on a full block boundary.
    As such each discard will now cover an entire DM thin-pool block and the
    block will be reclaimed.

    Reported-by: Zdenek Kabelac <zkabelac@redhat.com>
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Cc: stable@vger.kernel.org

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index b42e804..5d0558e 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -3072,7 +3072,8 @@ static void set_discard_limits(struct pool_c *pt, struct queue_limits *limits)
   */
  if (pt->adjusted_pf.discard_passdown) {
   data_limits = &bdev_get_queue(pt->data_dev->bdev)->limits;
-  limits->discard_granularity = data_limits->discard_granularity;
+  limits->discard_granularity = max(data_limits->discard_granularity,
+        pool->sectors_per_block << SECTOR_SHIFT);
  } else
   limits->discard_granularity = pool->sectors_per_block << SECTOR_SHIFT;
 }
-- 
1.7.1