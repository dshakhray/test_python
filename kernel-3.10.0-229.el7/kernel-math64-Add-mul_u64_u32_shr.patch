From 8dd872f0490b5aac5ee235264dd1e47140d6d70b Mon Sep 17 00:00:00 2001
From: Rik van Riel <riel@redhat.com>
Date: Mon, 28 Jul 2014 22:24:16 -0400
Subject: [kernel] math64: Add mul_u64_u32_shr()

Message-id: <1406586257-2065-2-git-send-email-riel@redhat.com>
Patchwork-id: 86808
O-Subject: [RHEL7 PATCH 1/2] math64: Add mul_u64_u32_shr()
Bugzilla: 1123731
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: Peter Zijlstra <peterz@infradead.org>

Fixes bug 1123731

Brew build: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7742538

commit be5e610c0fd6ef772cafb9e0bd4128134804aef3
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Nov 18 18:27:06 2013 +0100

    math64: Add mul_u64_u32_shr()

    Introduce mul_u64_u32_shr() as proposed by Andy a while back; it
    allows using 64x64->128 muls on 64bit archs and recent GCC
    which defines __SIZEOF_INT128__ and __int128.

    (This new method will be used by the scheduler.)

    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Cc: fweisbec@gmail.com
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/n/tip-hxjoeuzmrcaumR0uZwjpe2pv@git.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

Signed-off-by: Rik van Riel <riel@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 0c66569..36b6a88 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -25,6 +25,7 @@ config X86
  select HAVE_AOUT if X86_32
  select HAVE_UNSTABLE_SCHED_CLOCK
  select ARCH_SUPPORTS_NUMA_BALANCING
+ select ARCH_SUPPORTS_INT128 if X86_64
  select ARCH_WANTS_PROT_NUMA_PROT_NONE
  select HAVE_IDE
  select HAVE_OPROFILE
diff --git a/include/linux/math64.h b/include/linux/math64.h
index 69ed5f5..c45c089 100644
--- a/include/linux/math64.h
+++ b/include/linux/math64.h
@@ -133,4 +133,34 @@ __iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
  return ret;
 }
 
+#if defined(CONFIG_ARCH_SUPPORTS_INT128) && defined(__SIZEOF_INT128__)
+
+#ifndef mul_u64_u32_shr
+static inline u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
+{
+ return (u64)(((unsigned __int128)a * mul) >> shift);
+}
+#endif /* mul_u64_u32_shr */
+
+#else
+
+#ifndef mul_u64_u32_shr
+static inline u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
+{
+ u32 ah, al;
+ u64 ret;
+
+ al = a;
+ ah = a >> 32;
+
+ ret = ((u64)al * mul) >> shift;
+ if (ah)
+  ret += ((u64)ah * mul) << (32 - shift);
+
+ return ret;
+}
+#endif /* mul_u64_u32_shr */
+
+#endif
+
 #endif /* _LINUX_MATH64_H */
diff --git a/init/Kconfig b/init/Kconfig
index 4151f62..a541d35 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -767,6 +767,12 @@ config HAVE_UNSTABLE_SCHED_CLOCK
 config ARCH_SUPPORTS_NUMA_BALANCING
  bool
 
+#
+# For architectures that know their GCC __int128 support is sound
+#
+config ARCH_SUPPORTS_INT128
+ bool
+
 # For architectures that (ab)use NUMA to represent different memory regions
 # all cpu-local but of different latencies, such as SuperH.
 #
-- 
1.7.1