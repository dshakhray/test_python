From ad7c40bedc30a9966a8ea4e5fdbfad4b75212e20 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:06:38 -0400
Subject: [powerpc] pseries: Fix dedicated processor partition detection

Message-id: <1410545655-205645-170-git-send-email-dzickus@redhat.com>
Patchwork-id: 94179
O-Subject: [RHEL7 PATCH 169/626] powerpc/pseries: Fix dedicated processor partition detection
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit 733187e29576041ceccf3b82092ca900fc929170
Author: Anton Blanchard <anton@samba.org>
Date:   Sun Oct 20 10:26:20 2013 +1100

    powerpc/pseries: Fix dedicated processor partition detection

    commit f13c13a00512 (powerpc: Stop using non-architected shared_proc
    field in lppaca) fixed a potential issue with shared/dedicated
    partition detection. The old method of detection relied on an
    unarchitected field (shared_proc), and this patch switched
    to using something architected (a non zero yield_count).

    Unfortunately the assertion in the Linux header that yield_count
    is only non zero on shared processor partitions is not true. It
    turns out dedicated processor partitions can increment yield_count
    and as such we falsely detect dedicated partitions as shared.

    Fix the comment, and switch back to using the old method.

    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/lppaca.h b/arch/powerpc/include/asm/lppaca.h
index 4470d1e..844c28d 100644
--- a/arch/powerpc/include/asm/lppaca.h
+++ b/arch/powerpc/include/asm/lppaca.h
@@ -84,8 +84,8 @@ struct lppaca {
   * the processor is yielded (either because of an OS yield or a
   * hypervisor preempt).  An even value implies that the processor is
   * currently executing.
-  * NOTE: This value will ALWAYS be zero for dedicated processors and
-  * will NEVER be zero for shared processors (ie, initialized to a 1).
+  * NOTE: Even dedicated processor partitions can yield so this
+  * field cannot be used to determine if we are shared or dedicated.
   */
  volatile __be32 yield_count;
  volatile __be32 dispersion_count; /* dispatch changed physical cpu */
@@ -106,15 +106,15 @@ extern struct lppaca lppaca[];
 #define lppaca_of(cpu) (*paca[cpu].lppaca_ptr)
 
 /*
- * Old kernels used a reserved bit in the VPA to determine if it was running
- * in shared processor mode. New kernels look for a non zero yield count
- * but KVM still needs to set the bit to keep the old stuff happy.
+ * We are using a non architected field to determine if a partition is
+ * shared or dedicated. This currently works on both KVM and PHYP, but
+ * we will have to transition to something better.
  */
 #define LPPACA_OLD_SHARED_PROC  2
 
 static inline bool lppaca_shared_proc(struct lppaca *l)
 {
- return l->yield_count != 0;
+ return !!(l->__old_status & LPPACA_OLD_SHARED_PROC);
 }
 
 /*
-- 
1.7.1