From 9501dbcb7c2601268ba97746d32343349d70520c Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 2 Dec 2014 21:03:33 -0500
Subject: [net] Use new KABI macros

Message-id: <1417554215-238434-9-git-send-email-dzickus@redhat.com>
Patchwork-id: 101096
O-Subject: [RHEL7 PATCH 08/10] kabi, include/net: Use new KABI macros
Bugzilla: 1164383
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1164383
Upstream: RHEL only

Convert some of the include/net GENKSYMS usage to use the new kabi macros.

Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Don Zickus <dzickus@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/dst.h b/include/net/dst.h
index c804562..840e73e 100644
--- a/include/net/dst.h
+++ b/include/net/dst.h
@@ -17,6 +17,8 @@
 #include <net/neighbour.h>
 #include <asm/processor.h>
 
+#include <linux/rh_kabi.h>
+
 #define DST_GC_MIN (HZ/10)
 #define DST_GC_INC (HZ/2)
 #define DST_GC_MAX (120*HZ)
@@ -45,11 +47,8 @@ struct dst_entry {
  void   *__pad1;
 #endif
  int   (*input)(struct sk_buff *);
-#ifdef __GENKSYMS__
- int   (*output)(struct sk_buff *);
-#else
- int   (*output)(struct sock *sk, struct sk_buff *skb);
-#endif
+ RH_KABI_REPLACE_P(int   (*output)(struct sk_buff *),
+            int   (*output)(struct sock *sk, struct sk_buff *skb))
 
  unsigned short  flags;
 #define DST_HOST  0x0001
diff --git a/include/net/genetlink.h b/include/net/genetlink.h
index d0edc94..159a11b 100644
--- a/include/net/genetlink.h
+++ b/include/net/genetlink.h
@@ -5,6 +5,8 @@
 #include <net/netlink.h>
 #include <net/net_namespace.h>
 
+#include <linux/rh_kabi.h>
+
 #define GENLMSG_DEFAULT_SIZE (NLMSG_DEFAULT_SIZE - GENL_HDRLEN)
 
 /**
@@ -64,10 +66,10 @@ struct genl_family {
 
  /* Reserved slots. For Red Hat usage only, modules are required to
   * set them to zero. */
- unsigned long  rh_reserved1;
- unsigned long  rh_reserved2;
- unsigned long  rh_reserved3;
- unsigned long  rh_reserved4;
+ RH_KABI_RESERVE(1)
+ RH_KABI_RESERVE(2)
+ RH_KABI_RESERVE(3)
+ RH_KABI_RESERVE(4)
 };
 
 /**
diff --git a/include/net/if_inet6.h b/include/net/if_inet6.h
index 669a845..8d0beb4 100644
--- a/include/net/if_inet6.h
+++ b/include/net/if_inet6.h
@@ -18,6 +18,8 @@
 #include <net/snmp.h>
 #include <linux/ipv6.h>
 
+#include <linux/rh_kabi.h>
+
 /* inet6_dev.if_flags */
 
 #define IF_RA_OTHERCONF 0x80
@@ -206,9 +208,7 @@ struct inet6_dev {
 
  unsigned long  tstamp; /* ipv6InterfaceTable update timestamp */
  struct rcu_head  rcu;
-#ifndef __GENKSYMS__
- __u8   addr_gen_mode;
-#endif
+ RH_KABI_EXTEND(__u8   addr_gen_mode)
 };
 
 static inline void ipv6_eth_mc_map(const struct in6_addr *addr, char *buf)
diff --git a/include/net/ip_tunnels.h b/include/net/ip_tunnels.h
index 23e014d..8d95b01 100644
--- a/include/net/ip_tunnels.h
+++ b/include/net/ip_tunnels.h
@@ -18,6 +18,8 @@
 #include <net/ip6_route.h>
 #endif
 
+#include <linux/rh_kabi.h>
+
 /* Keep error state on tunnel for 30 sec */
 #define IPTUNNEL_ERR_TIMEO (30*HZ)
 
@@ -66,14 +68,14 @@ struct ip_tunnel {
  struct gro_cells gro_cells;
 
  /* Reserved slots. For Red Hat usage only. */
- unsigned long rh_reserved1;
- unsigned long rh_reserved2;
- unsigned long rh_reserved3;
- unsigned long rh_reserved4;
- unsigned long rh_reserved5;
- unsigned long rh_reserved6;
- unsigned long rh_reserved7;
- unsigned long rh_reserved8;
+ RH_KABI_RESERVE(1)
+ RH_KABI_RESERVE(2)
+ RH_KABI_RESERVE(3)
+ RH_KABI_RESERVE(4)
+ RH_KABI_RESERVE(5)
+ RH_KABI_RESERVE(6)
+ RH_KABI_RESERVE(7)
+ RH_KABI_RESERVE(8)
 };
 
 #define TUNNEL_CSUM __cpu_to_be16(0x01)
diff --git a/include/net/net_namespace.h b/include/net/net_namespace.h
index 3ff3315..be5471e 100644
--- a/include/net/net_namespace.h
+++ b/include/net/net_namespace.h
@@ -25,6 +25,8 @@
 #include <net/netns/nftables.h>
 #include <net/netns/xfrm.h>
 
+#include <linux/rh_kabi.h>
+
 struct user_namespace;
 struct proc_dir_entry;
 struct net_device;
@@ -123,10 +125,8 @@ struct net {
  struct sock  *diag_nlsk;
  atomic_t  rt_genid;
 
-#ifndef __GENKSYMS__
- unsigned int  dev_unreg_count;
- atomic_t  fnhe_genid;
-#endif
+ RH_KABI_EXTEND(unsigned int  dev_unreg_count)
+ RH_KABI_EXTEND(atomic_t  fnhe_genid)
 };
 
 /*
diff --git a/include/net/rtnetlink.h b/include/net/rtnetlink.h
index e567e03..9ff6bee 100644
--- a/include/net/rtnetlink.h
+++ b/include/net/rtnetlink.h
@@ -3,6 +3,7 @@
 
 #include <linux/rtnetlink.h>
 #include <net/netlink.h>
+#include <linux/rh_kabi.h>
 
 typedef int (*rtnl_doit_func)(struct sk_buff *, struct nlmsghdr *);
 typedef int (*rtnl_dumpit_func)(struct sk_buff *, struct netlink_callback *);
@@ -89,22 +90,22 @@ struct rtnl_link_ops {
   * to replace reserved slots with required structure field
   * additions of your backport.
   */
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
- void   (*rh_reserved4)(void);
- void   (*rh_reserved5)(void);
- void   (*rh_reserved6)(void);
- void   (*rh_reserved7)(void);
- void   (*rh_reserved8)(void);
- void   (*rh_reserved9)(void);
- void   (*rh_reserved10)(void);
- void   (*rh_reserved11)(void);
- void   (*rh_reserved12)(void);
- void   (*rh_reserved13)(void);
- void   (*rh_reserved14)(void);
- void   (*rh_reserved15)(void);
- void   (*rh_reserved16)(void);
+ RH_KABI_RESERVE_P(1)
+ RH_KABI_RESERVE_P(2)
+ RH_KABI_RESERVE_P(3)
+ RH_KABI_RESERVE_P(4)
+ RH_KABI_RESERVE_P(5)
+ RH_KABI_RESERVE_P(6)
+ RH_KABI_RESERVE_P(7)
+ RH_KABI_RESERVE_P(8)
+ RH_KABI_RESERVE_P(9)
+ RH_KABI_RESERVE_P(10)
+ RH_KABI_RESERVE_P(11)
+ RH_KABI_RESERVE_P(12)
+ RH_KABI_RESERVE_P(13)
+ RH_KABI_RESERVE_P(14)
+ RH_KABI_RESERVE_P(15)
+ RH_KABI_RESERVE_P(16)
 };
 
 extern int __rtnl_link_register(struct rtnl_link_ops *ops);
diff --git a/include/net/sock.h b/include/net/sock.h
index aa26b39..70691ab 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -68,6 +68,8 @@
 #include <net/dst.h>
 #include <net/checksum.h>
 
+#include <linux/rh_kabi.h>
+
 struct cgroup;
 struct cgroup_subsys;
 #ifdef CONFIG_NET
@@ -436,14 +438,14 @@ struct sock {
   * to replace reserved slots with required structure field
   * additions of your backport.
   */
- void   (*rh_reserved1)(void);
- void   (*rh_reserved2)(void);
- void   (*rh_reserved3)(void);
- void   (*rh_reserved4)(void);
- void   (*rh_reserved5)(void);
- void   (*rh_reserved6)(void);
- void   (*rh_reserved7)(void);
- void   (*rh_reserved8)(void);
+ RH_KABI_RESERVE_P(1)
+ RH_KABI_RESERVE_P(2)
+ RH_KABI_RESERVE_P(3)
+ RH_KABI_RESERVE_P(4)
+ RH_KABI_RESERVE_P(5)
+ RH_KABI_RESERVE_P(6)
+ RH_KABI_RESERVE_P(7)
+ RH_KABI_RESERVE_P(8)
 };
 
 #define __sk_user_data(sk) ((*((void __rcu **)&(sk)->sk_user_data)))
diff --git a/include/net/xfrm.h b/include/net/xfrm.h
index 0c68bd1..542f56c 100644
--- a/include/net/xfrm.h
+++ b/include/net/xfrm.h
@@ -24,6 +24,8 @@
 
 #include <linux/interrupt.h>
 
+#include <linux/rh_kabi.h>
+
 #ifdef CONFIG_XFRM_STATISTICS
 #include <net/snmp.h>
 #endif
@@ -333,11 +335,8 @@ struct xfrm_state_afinfo {
       const xfrm_address_t *saddr);
  int   (*tmpl_sort)(struct xfrm_tmpl **dst, struct xfrm_tmpl **src, int n);
  int   (*state_sort)(struct xfrm_state **dst, struct xfrm_state **src, int n);
-#ifdef __GENKSYMS__
- int   (*output)(struct sk_buff *skb);
-#else
- int   (*output)(struct sock *sk, struct sk_buff *skb);
-#endif
+ RH_KABI_REPLACE_P(int   (*output)(struct sk_buff *skb),
+            int   (*output)(struct sock *sk, struct sk_buff *skb))
  int   (*output_finish)(struct sk_buff *skb);
  int   (*extract_input)(struct xfrm_state *x,
        struct sk_buff *skb);
-- 
1.7.1