From fc72303c8d879d0f74ec9a351e8f747249808de8 Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jpirko@redhat.com>
Date: Thu, 7 Aug 2014 07:06:33 -0400
Subject: [net] vti4: don't allow to add the same tunnel twice

Message-id: <1407395194-3809-18-git-send-email-jpirko@redhat.com>
Patchwork-id: 87532
O-Subject: [patch rhel7 net 17/18] vti: don't allow to add the same tunnel twice
Bugzilla: 1091561
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

BZ1091561
https://brewweb.devel.redhat.com/taskinfo?taskID=7794261
Tested by jtluka's LNST smoke test recipe

upstream commit 8d89dcdf80d88007647945a753821a06eb6cc5a5
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Fri Apr 11 15:51:19 2014 +0200

    vti: don't allow to add the same tunnel twice

    Before the patch, it was possible to add two times the same tunnel:
    ip l a vti1 type vti remote 10.16.0.121 local 10.16.0.249 key 41
    ip l a vti2 type vti remote 10.16.0.121 local 10.16.0.249 key 41

    It was possible, because ip_tunnel_newlink() calls ip_tunnel_find() with the
    argument dev->type, which was set only later (when calling ndo_init handler
    in register_netdevice()). Let's set this type in the setup handler, which is
    called before newlink handler.

    Introduced by commit b9959fd3b0fa ("vti: switch to new ip tunnel code").

Signed-off-by: Jiri Pirko <jpirko@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/ip_vti.c b/net/ipv4/ip_vti.c
index 67a19b3..8fe4bdd 100644
--- a/net/ipv4/ip_vti.c
+++ b/net/ipv4/ip_vti.c
@@ -337,6 +337,7 @@ static const struct net_device_ops vti_netdev_ops = {
 static void vti_tunnel_setup(struct net_device *dev)
 {
  dev->netdev_ops  = &vti_netdev_ops;
+ dev->type  = ARPHRD_TUNNEL;
  ip_tunnel_setup(dev, vti_net_id);
 }
 
@@ -348,7 +349,6 @@ static int vti_tunnel_init(struct net_device *dev)
  memcpy(dev->dev_addr, &iph->saddr, 4);
  memcpy(dev->broadcast, &iph->daddr, 4);
 
- dev->type  = ARPHRD_TUNNEL;
  dev->hard_header_len = LL_MAX_HEADER + sizeof(struct iphdr);
  dev->mtu  = ETH_DATA_LEN;
  dev->flags  = IFF_NOARP;
-- 
1.7.1