From 8f7ebccb7fcc6f972e294fd8072e25f4982537a8 Mon Sep 17 00:00:00 2001
From: Ian Kent <ikent@redhat.com>
Date: Mon, 1 Sep 2014 00:19:37 -0400
Subject: [fs] fs: seq_file: always clear m->count when we free m->buf

Message-id: <20140901001937.3450.46925.stgit@perseus.themaw.net>
Patchwork-id: 89933
O-Subject: [RHEL-7.1 PATCH 1/3] fs: seq_file: always clear m->count when we free m->buf
Bugzilla: 1095623
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Al Viro <viro@ZenIV.linux.org.uk>

https://bugzilla.redhat.com/show_bug.cgi?id=1095623
Upstream commit: 801a7605

Once we'd freed m->buf, m->count should become zero - we have no valid
contents reachable via m->buf.

Reported-by: Charley (Hao Chuan) Chu <charley.chu@broadcom.com>
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/seq_file.c b/fs/seq_file.c
index a290157..092951e 100644
--- a/fs/seq_file.c
+++ b/fs/seq_file.c
@@ -136,6 +136,7 @@ static int traverse(struct seq_file *m, loff_t offset)
 Eoverflow:
  m->op->stop(m, p);
  kfree(m->buf);
+ m->count = 0;
  m->buf = kmalloc(m->size <<= 1, GFP_KERNEL);
  return !m->buf ? -ENOMEM : -EAGAIN;
 }
@@ -232,10 +233,10 @@ ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
    goto Fill;
   m->op->stop(m, p);
   kfree(m->buf);
+  m->count = 0;
   m->buf = kmalloc(m->size <<= 1, GFP_KERNEL);
   if (!m->buf)
    goto Enomem;
-  m->count = 0;
   m->version = 0;
   pos = m->index;
   p = m->op->start(m, &pos);
-- 
1.7.1