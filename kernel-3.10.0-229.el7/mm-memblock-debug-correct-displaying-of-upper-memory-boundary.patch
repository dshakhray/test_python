From 58f148dabb0d59a75faff3d24a72450e3756a767 Mon Sep 17 00:00:00 2001
From: Motohiro Kosaki <mkosaki@redhat.com>
Date: Wed, 10 Sep 2014 16:16:05 -0400
Subject: [mm] memblock: debug - correct displaying of upper memory boundary

Message-id: <1410365775-5132-11-git-send-email-mkosaki@redhat.com>
Patchwork-id: 93499
O-Subject: [RHEL7 PATCH 10/20] mm/memblock: debug: correct displaying of upper memory boundary
Bugzilla: 810042
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>

From: KOSAKI Motohiro <mkosaki@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=810042
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7914549
target RHEL version: 7.1
upstream status: merged
changes from upstream: none

commit 931d13f534a9bb39539f0a851209ca18013ba0c2
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Tue Jan 21 15:49:17 2014 -0800

    mm/memblock: debug: correct displaying of upper memory boundary

    Current memblock APIs don't work on 32 PAE or LPAE extension arches
    where the physical memory start address beyond 4GB.  The problem was
    discussed here [3] where Tejun, Yinghai(thanks) proposed a way forward
    with memblock interfaces.  Based on the proposal, this series adds
    necessary memblock interfaces and convert the core kernel code to use
    them.  Architectures already converted to NO_BOOTMEM use these new
    interfaces and other which still uses bootmem, these new interfaces just
    fallback to exiting bootmem APIs.

    So no functional change in behavior.  In long run, once all the
    architectures moves to NO_BOOTMEM, we can get rid of bootmem layer
    completely.  This is one step to remove the core code dependency with
    bootmem and also gives path for architectures to move away from bootmem.

    Testing is done on ARM architecture with 32 bit ARM LAPE machines with
    normal as well sparse(faked) memory model.

    This patch (of 23):

    When debugging is enabled (cmdline has "memblock=debug") the memblock
    will display upper memory boundary per each allocated/freed memory range
    wrongly.  For example:

     memblock_reserve: [0x0000009e7e8000-0x0000009e7ed000] _memblock_early_alloc_try_nid_nopanic+0xfc/0x12c

    The 0x0000009e7ed000 is displayed instead of 0x0000009e7ecfff

    Hence, correct this by changing formula used to calculate upper memory
    boundary to (u64)base + size - 1 instead of (u64)base + size everywhere
    in the debug messages.

    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: Yinghai Lu <yinghai@kernel.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Lameter <cl@linux-foundation.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Michal Hocko <mhocko@suse.cz>
    Cc: Paul Walmsley <paul@pwsan.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: KOSAKI Motohiro <mkosaki@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/mm/memblock.c b/mm/memblock.c
index 93bdb00..75d6731 100644
--- a/mm/memblock.c
+++ b/mm/memblock.c
@@ -643,7 +643,7 @@ int __init_memblock memblock_free(phys_addr_t base, phys_addr_t size)
 {
  memblock_dbg("   memblock_free: [%#016llx-%#016llx] %pF\n",
        (unsigned long long)base,
-       (unsigned long long)base + size,
+       (unsigned long long)base + size - 1,
        (void *)_RET_IP_);
 
  return __memblock_remove(&memblock.reserved, base, size);
@@ -655,7 +655,7 @@ int __init_memblock memblock_reserve(phys_addr_t base, phys_addr_t size)
 
  memblock_dbg("memblock_reserve: [%#016llx-%#016llx] %pF\n",
        (unsigned long long)base,
-       (unsigned long long)base + size,
+       (unsigned long long)base + size - 1,
        (void *)_RET_IP_);
 
  return memblock_add_region(_rgn, base, size, MAX_NUMNODES);
-- 
1.7.1