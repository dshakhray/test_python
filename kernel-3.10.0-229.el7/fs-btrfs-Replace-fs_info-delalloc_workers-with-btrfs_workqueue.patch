From 429105290120b44c1a6124aea1978e7c12fc7dbb Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:01:52 -0400
Subject: [fs] btrfs: Replace fs_info->delalloc_workers with btrfs_workqueue

Message-id: <1407179109-13714-226-git-send-email-sandeen@redhat.com>
Patchwork-id: 87136
O-Subject: [RHEL7.1 PATCH 225/422] btrfs: Replace fs_info->delalloc_workers with btrfs_workqueue
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Qu Wenruo <quwenruo@cn.fujitsu.com>

commit afe3d24267926eb78ba863016bdd65cfe718aef5
Author: Qu Wenruo <quwenruo@cn.fujitsu.com>
Date:   Fri Feb 28 10:46:07 2014 +0800

    btrfs: Replace fs_info->delalloc_workers with btrfs_workqueue

    Much like the fs_info->workers, replace the fs_info->delalloc_workers
    use the same btrfs_workqueue.

    Signed-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
    Tested-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ctree.h b/fs/btrfs/ctree.h
index bd7cb8c..3b2c30d 100644
--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -1506,7 +1506,7 @@ struct btrfs_fs_info {
   */
  struct btrfs_workers generic_worker;
  struct btrfs_workqueue_struct *workers;
- struct btrfs_workers delalloc_workers;
+ struct btrfs_workqueue_struct *delalloc_workers;
  struct btrfs_workers flush_workers;
  struct btrfs_workers endio_workers;
  struct btrfs_workers endio_meta_workers;
diff --git a/fs/btrfs/disk-io.c b/fs/btrfs/disk-io.c
index 13a038f..5f94eba 100644
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -1996,7 +1996,7 @@ static void btrfs_stop_all_workers(struct btrfs_fs_info *fs_info)
 {
  btrfs_stop_workers(&fs_info->generic_worker);
  btrfs_stop_workers(&fs_info->fixup_workers);
- btrfs_stop_workers(&fs_info->delalloc_workers);
+ btrfs_destroy_workqueue(fs_info->delalloc_workers);
  btrfs_destroy_workqueue(fs_info->workers);
  btrfs_stop_workers(&fs_info->endio_workers);
  btrfs_stop_workers(&fs_info->endio_meta_workers);
@@ -2479,8 +2479,8 @@ int open_ctree(struct super_block *sb,
   btrfs_alloc_workqueue("worker", flags | WQ_HIGHPRI,
           max_active, 16);
 
- btrfs_init_workers(&fs_info->delalloc_workers, "delalloc",
-      fs_info->thread_pool_size, NULL);
+ fs_info->delalloc_workers =
+  btrfs_alloc_workqueue("delalloc", flags, max_active, 2);
 
  btrfs_init_workers(&fs_info->flush_workers, "flush_delalloc",
       fs_info->thread_pool_size, NULL);
@@ -2498,9 +2498,6 @@ int open_ctree(struct super_block *sb,
   */
  fs_info->submit_workers.idle_thresh = 64;
 
- fs_info->delalloc_workers.idle_thresh = 2;
- fs_info->delalloc_workers.ordered = 1;
-
  btrfs_init_workers(&fs_info->fixup_workers, "fixup", 1,
       &fs_info->generic_worker);
  btrfs_init_workers(&fs_info->endio_workers, "endio",
@@ -2551,7 +2548,6 @@ int open_ctree(struct super_block *sb,
   */
  ret = btrfs_start_workers(&fs_info->generic_worker);
  ret |= btrfs_start_workers(&fs_info->submit_workers);
- ret |= btrfs_start_workers(&fs_info->delalloc_workers);
  ret |= btrfs_start_workers(&fs_info->fixup_workers);
  ret |= btrfs_start_workers(&fs_info->endio_workers);
  ret |= btrfs_start_workers(&fs_info->endio_meta_workers);
@@ -2569,7 +2565,7 @@ int open_ctree(struct super_block *sb,
   err = -ENOMEM;
   goto fail_sb_buffer;
  }
- if (!(fs_info->workers)) {
+ if (!(fs_info->workers && fs_info->delalloc_workers)) {
   err = -ENOMEM;
   goto fail_sb_buffer;
  }
diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index 994dec9..6b2ec1d 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -324,7 +324,7 @@ struct async_cow {
  u64 start;
  u64 end;
  struct list_head extents;
- struct btrfs_work work;
+ struct btrfs_work_struct work;
 };
 
 static noinline int add_async_extent(struct async_cow *cow,
@@ -1000,7 +1000,7 @@ out_unlock:
 /*
  * work queue call back to started compression on a file and pages
  */
-static noinline void async_cow_start(struct btrfs_work *work)
+static noinline void async_cow_start(struct btrfs_work_struct *work)
 {
  struct async_cow *async_cow;
  int num_added = 0;
@@ -1018,7 +1018,7 @@ static noinline void async_cow_start(struct btrfs_work *work)
 /*
  * work queue call back to submit previously compressed pages
  */
-static noinline void async_cow_submit(struct btrfs_work *work)
+static noinline void async_cow_submit(struct btrfs_work_struct *work)
 {
  struct async_cow *async_cow;
  struct btrfs_root *root;
@@ -1039,7 +1039,7 @@ static noinline void async_cow_submit(struct btrfs_work *work)
   submit_compressed_extents(async_cow->inode, async_cow);
 }
 
-static noinline void async_cow_free(struct btrfs_work *work)
+static noinline void async_cow_free(struct btrfs_work_struct *work)
 {
  struct async_cow *async_cow;
  async_cow = container_of(work, struct async_cow, work);
@@ -1076,17 +1076,15 @@ static int cow_file_range_async(struct inode *inode, struct page *locked_page,
   async_cow->end = cur_end;
   INIT_LIST_HEAD(&async_cow->extents);
 
-  async_cow->work.func = async_cow_start;
-  async_cow->work.ordered_func = async_cow_submit;
-  async_cow->work.ordered_free = async_cow_free;
-  async_cow->work.flags = 0;
+  btrfs_init_work(&async_cow->work, async_cow_start,
+    async_cow_submit, async_cow_free);
 
   nr_pages = (cur_end - start + PAGE_CACHE_SIZE) >>
    PAGE_CACHE_SHIFT;
   atomic_add(nr_pages, &root->fs_info->async_delalloc_pages);
 
-  btrfs_queue_worker(&root->fs_info->delalloc_workers,
-       &async_cow->work);
+  btrfs_queue_work(root->fs_info->delalloc_workers,
+     &async_cow->work);
 
   if (atomic_read(&root->fs_info->async_delalloc_pages) > limit) {
    wait_event(root->fs_info->async_submit_wait,
diff --git a/fs/btrfs/super.c b/fs/btrfs/super.c
index 6f66d8a..be00199 100644
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -1325,7 +1325,7 @@ static void btrfs_resize_thread_pool(struct btrfs_fs_info *fs_info,
 
  btrfs_set_max_workers(&fs_info->generic_worker, new_pool_size);
  btrfs_workqueue_set_max(fs_info->workers, new_pool_size);
- btrfs_set_max_workers(&fs_info->delalloc_workers, new_pool_size);
+ btrfs_workqueue_set_max(fs_info->delalloc_workers, new_pool_size);
  btrfs_set_max_workers(&fs_info->submit_workers, new_pool_size);
  btrfs_set_max_workers(&fs_info->caching_workers, new_pool_size);
  btrfs_set_max_workers(&fs_info->fixup_workers, new_pool_size);
-- 
1.7.1