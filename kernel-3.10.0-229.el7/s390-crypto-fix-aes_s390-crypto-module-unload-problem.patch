From afa151b64191cb3eecd2dd360739cdfaef38ea35 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Fri, 30 May 2014 12:39:45 -0400
Subject: [s390] crypto: fix aes_s390 crypto module unload problem

Message-id: <1401453585-12092-1-git-send-email-brueckner@redhat.com>
Patchwork-id: 81240
O-Subject: [RHEL7.1 PATCH] [s390] s390/crypto: fix aes_s390 crypto module unload problem
Bugzilla: 1103114
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 4f57ba716b12ab939d46b7910768c3da3623fdc1
Author: Ingo Tuchscherer <ingo.tuchscherer@de.ibm.com>
Date:   Tue Oct 15 11:24:07 2013 +0200

    s390/crypto: fix aes_s390 crypto module unload problem

    If a machine has no hardware support for the xts-aes or ctr-aes algorithms
    they are not registered in aes_s390_init. But aes_s390_fini unconditionally
    unregisters the algorithms which causes crypto_remove_alg to crash.
    Add two flag variables to remember if xts-aes and ctr-aes have been added.

    Signed-off-by: Ingo Tuchscherer <ingo.tuchscherer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1103114
https://bugzilla.redhat.com/show_bug.cgi?id=1103114

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=4f57ba716b12ab939d46b7910768c3da3623fdc1

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7519795

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/crypto/aes_s390.c b/arch/s390/crypto/aes_s390.c
index fd104db..23223cd 100644
--- a/arch/s390/crypto/aes_s390.c
+++ b/arch/s390/crypto/aes_s390.c
@@ -735,6 +735,8 @@ static struct crypto_alg xts_aes_alg = {
  }
 };
 
+static int xts_aes_alg_reg;
+
 static int ctr_aes_set_key(struct crypto_tfm *tfm, const u8 *in_key,
       unsigned int key_len)
 {
@@ -884,6 +886,8 @@ static struct crypto_alg ctr_aes_alg = {
  }
 };
 
+static int ctr_aes_alg_reg;
+
 static int __init aes_s390_init(void)
 {
  int ret;
@@ -922,6 +926,7 @@ static int __init aes_s390_init(void)
   ret = crypto_register_alg(&xts_aes_alg);
   if (ret)
    goto xts_aes_err;
+  xts_aes_alg_reg = 1;
  }
 
  if (crypt_s390_func_available(KMCTR_AES_128_ENCRYPT,
@@ -940,6 +945,7 @@ static int __init aes_s390_init(void)
    free_page((unsigned long) ctrblk);
    goto ctr_aes_err;
   }
+  ctr_aes_alg_reg = 1;
  }
 
 out:
@@ -959,9 +965,12 @@ aes_err:
 
 static void __exit aes_s390_fini(void)
 {
- crypto_unregister_alg(&ctr_aes_alg);
- free_page((unsigned long) ctrblk);
- crypto_unregister_alg(&xts_aes_alg);
+ if (ctr_aes_alg_reg) {
+  crypto_unregister_alg(&ctr_aes_alg);
+  free_page((unsigned long) ctrblk);
+ }
+ if (xts_aes_alg_reg)
+  crypto_unregister_alg(&xts_aes_alg);
  crypto_unregister_alg(&cbc_aes_alg);
  crypto_unregister_alg(&ecb_aes_alg);
  crypto_unregister_alg(&aes_alg);
-- 
1.7.1