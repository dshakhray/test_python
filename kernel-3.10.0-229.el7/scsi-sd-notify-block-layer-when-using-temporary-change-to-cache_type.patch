From 82776b19f58ea9dd67b4fb2bc095caad5cf8af4c Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Wed, 20 Aug 2014 18:58:49 -0400
Subject: [scsi] sd: notify block layer when using temporary change to cache_type

Message-id: <1408561176-18133-11-git-send-email-emilne@redhat.com>
Patchwork-id: 88424
O-Subject: [RHEL7.1 PATCH e-stor 10/57] sd: notify block layer when using temporary change to cache_type
Bugzilla: 1132092
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Ewan D. Milne" <emilne@redhat.com>

upstream commit dc33bd61ae29f1c598a83aae0ac3db6300108410

Tested by Ewan D. Milne and Barry Donahue with a combination
of manual and automated testing.  No issues seen.

upstream commit dc33bd61ae29f1c598a83aae0ac3db6300108410
Author: Vaughan Cao <vaughan.cao@oracle.com>
Date:   Tue Jun 3 17:37:30 2014 +0800

    sd: notify block layer when using temporary change to cache_type

    This is a fix for commit 39c60a0948cc06139e2fbfe084f83cb7e7deae3b

      "sd: fix array cache flushing bug causing performance problems"

    We must notify the block layer via q->flush_flags after a temporary change
    of the cache_type to write through.  Without this, a SYNCHRONIZE CACHE
    command will still be generated.  This patch factors out a helper that
    can be called from sd_revalidate_disk and cache_type_store.

    Signed-off-by: Vaughan Cao <vaughan.cao@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

Signed-off-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index ccbfde3..c5e454c 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -133,6 +133,19 @@ static const char *sd_cache_types[] = {
  "write back, no read (daft)"
 };
 
+static void sd_set_flush_flag(struct scsi_disk *sdkp)
+{
+ unsigned flush = 0;
+
+ if (sdkp->WCE) {
+  flush |= REQ_FLUSH;
+  if (sdkp->DPOFUA)
+   flush |= REQ_FUA;
+ }
+
+ blk_queue_flush(sdkp->disk->queue, flush);
+}
+
 static ssize_t
 sd_store_cache_type(struct device *dev, struct device_attribute *attr,
       const char *buf, size_t count)
@@ -176,6 +189,7 @@ sd_store_cache_type(struct device *dev, struct device_attribute *attr,
  if (sdkp->cache_override) {
   sdkp->WCE = wce;
   sdkp->RCD = rcd;
+  sd_set_flush_flag(sdkp);
   return count;
  }
 
@@ -2681,7 +2695,6 @@ static int sd_revalidate_disk(struct gendisk *disk)
  struct scsi_disk *sdkp = scsi_disk(disk);
  struct scsi_device *sdp = sdkp->device;
  unsigned char *buffer;
- unsigned flush = 0;
 
  SCSI_LOG_HLQUEUE(3, sd_printk(KERN_INFO, sdkp,
           "sd_revalidate_disk\n"));
@@ -2727,13 +2740,7 @@ static int sd_revalidate_disk(struct gendisk *disk)
   * We now have all cache related info, determine how we deal
   * with flush requests.
   */
- if (sdkp->WCE) {
-  flush |= REQ_FLUSH;
-  if (sdkp->DPOFUA)
-   flush |= REQ_FUA;
- }
-
- blk_queue_flush(sdkp->disk->queue, flush);
+ sd_set_flush_flag(sdkp);
 
  set_capacity(disk, sdkp->capacity);
  sd_config_write_same(sdkp);
-- 
1.7.1