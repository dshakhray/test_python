From 58e65f19f3688679e0afe8c863991f34c283351f Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Wed, 29 Oct 2014 16:34:18 -0400
Subject: [fs] ext4: fix ZERO_RANGE bug hidden by flag aliasing

Message-id: <1414600485-1929-29-git-send-email-lczerner@redhat.com>
Patchwork-id: 98567
O-Subject: [RHEL 7.1 PATCH v2 28/55] ext4: fix ZERO_RANGE bug hidden by flag aliasing
Bugzilla: 1156096
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1156096
https://bugzilla.redhat.com/show_bug.cgi?id=1156096

BREW 8169722
https://brewweb.devel.redhat.com/taskinfo?taskID=8169722

Upstream commit 713e8dde3e71e92db2d8cc8459d236ce1fb576ce

 We accidently aliased EXT4_EX_NOCACHE and EXT4_GET_CONVERT_UNWRITTEN
 falgs, which apparently was hiding a bug that was unmasked when this
 flag aliasing issue was addressed (see the subsequent commit).  The
 reproduction case was:

    fsx -N 10000 -l 500000 -r 4096 -t 4096 -w 4096 -Z -R -W /vdb/junk

 ... which would cause fsx to report corruption in the data file.

 The fix we have is a bit of an overkill, but I'd much rather be
 conservative for now, and we can optimize ZERO_RANGE_FL handling
 later.  The fact that we need to zap the extent_status cache for the
 inode is unfortunate, but correctness is far more important than
 performance.

 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Cc: Namjae Jeon <namjae.jeon@samsung.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 4d723ca..e3f89fb 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -4799,7 +4799,8 @@ static long ext4_zero_range(struct file *file, loff_t offset,
   max_blocks -= lblk;
 
  flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT |
-  EXT4_GET_BLOCKS_CONVERT_UNWRITTEN;
+  EXT4_GET_BLOCKS_CONVERT_UNWRITTEN |
+  EXT4_EX_NOCACHE;
  if (mode & FALLOC_FL_KEEP_SIZE)
   flags |= EXT4_GET_BLOCKS_KEEP_SIZE;
 
@@ -4837,15 +4838,21 @@ static long ext4_zero_range(struct file *file, loff_t offset,
   ext4_inode_block_unlocked_dio(inode);
   inode_dio_wait(inode);
 
+  ret = ext4_alloc_file_blocks(file, lblk, max_blocks, new_size,
+          flags, mode);
+  if (ret)
+   goto out_dio;
   /*
    * Remove entire range from the extent status tree.
+   *
+   * ext4_es_remove_extent(inode, lblk, max_blocks) is
+   * NOT sufficient.  I'm not sure why this is the case,
+   * but let's be conservative and remove the extent
+   * status tree for the entire inode.  There should be
+   * no outstanding delalloc extents thanks to the
+   * filemap_write_and_wait_range() call above.
    */
-  ret = ext4_es_remove_extent(inode, lblk, max_blocks);
-  if (ret)
-   goto out_dio;
-
-  ret = ext4_alloc_file_blocks(file, lblk, max_blocks, new_size,
-          flags, mode);
+  ret = ext4_es_remove_extent(inode, 0, EXT_MAX_BLOCKS);
   if (ret)
    goto out_dio;
  }
-- 
1.7.1