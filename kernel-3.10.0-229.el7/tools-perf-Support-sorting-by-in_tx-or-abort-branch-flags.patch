From 4e4e980098674f6d1a01419334ee53262f374902 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:23:19 -0400
Subject: [tools] perf: Support sorting by in_tx or abort branch flags

Message-id: <1408462094-14194-31-git-send-email-jolsa@redhat.com>
Patchwork-id: 88016
O-Subject: [PATCH RHEL7.1 BZ1131394 030/325] tools/perf: Support sorting by in_tx or abort branch flags
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit f5d05bcec409aec2c41727077ad818f7c4db005b
Author: Andi Kleen <ak@linux.intel.com>
Date: Fri Sep 20 07:40:41 2013 -0700

description
===========
Extend the perf branch sorting code to support sorting by in_tx
or abort_tx qualifiers. Also print out those qualifiers.

This also fixes up some of the existing sort key documentation.

We do not support no_tx here, because it's simply not showing
the in_tx flag.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/Documentation/perf-report.txt b/tools/perf/Documentation/perf-report.txt
index 2b8097e..ae337e3 100644
--- a/tools/perf/Documentation/perf-report.txt
+++ b/tools/perf/Documentation/perf-report.txt
@@ -71,7 +71,7 @@ OPTIONS
  entries are displayed as "[other]".
  - cpu: cpu number the task ran at the time of sample
  - srcline: filename and line number executed at the time of sample.  The
- DWARF debuggin info must be provided.
+ DWARF debugging info must be provided.
 
  By default, comm, dso and symbol keys are used.
  (i.e. --sort comm,dso,symbol)
@@ -85,6 +85,8 @@ OPTIONS
  - symbol_from: name of function branched from
  - symbol_to: name of function branched to
  - mispredict: "N" for predicted branch, "Y" for mispredicted branch
+ - in_tx: branch in TSX transaction
+ - abort: TSX transaction abort.
 
  And default sort keys are changed to comm, dso_from, symbol_from, dso_to
  and symbol_to, see '--branch-stack'.
diff --git a/tools/perf/Documentation/perf-top.txt b/tools/perf/Documentation/perf-top.txt
index 6a118e7..5a631d5 100644
--- a/tools/perf/Documentation/perf-top.txt
+++ b/tools/perf/Documentation/perf-top.txt
@@ -112,7 +112,8 @@ Default is to monitor all CPUS.
 
 -s::
 --sort::
- Sort by key(s): pid, comm, dso, symbol, parent, srcline, weight, local_weight.
+ Sort by key(s): pid, comm, dso, symbol, parent, srcline, weight,
+ local_weight, abort, in_tx
 
 -n::
 --show-nr-samples::
diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index 72eae74..89b188d 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -787,7 +787,7 @@ int cmd_report(int argc, const char **argv, const char *prefix __maybe_unused)
      "sort by key(s): pid, comm, dso, symbol, parent, cpu, srcline,"
      " dso_to, dso_from, symbol_to, symbol_from, mispredict,"
      " weight, local_weight, mem, symbol_daddr, dso_daddr, tlb, "
-     "snoop, locked"),
+     "snoop, locked, abort, in_tx"),
  OPT_BOOLEAN(0, "showcpuutilization", &symbol_conf.show_cpu_utilization,
       "Show sample percentage for different cpu modes"),
  OPT_STRING('p', "parent", &parent_pattern, "regex",
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 5a11f13..96fc7f6 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -1105,7 +1105,8 @@ int cmd_top(int argc, const char **argv, const char *prefix __maybe_unused)
  OPT_INCR('v', "verbose", &verbose,
       "be more verbose (show counter open errors, etc)"),
  OPT_STRING('s', "sort", &sort_order, "key[,key2...]",
-     "sort by key(s): pid, comm, dso, symbol, parent, weight, local_weight"),
+     "sort by key(s): pid, comm, dso, symbol, parent, weight, local_weight,"
+     " abort, in_tx"),
  OPT_BOOLEAN('n', "show-nr-samples", &symbol_conf.show_nr_samples,
       "Show a column with the number of samples"),
  OPT_CALLBACK_NOOPT('G', NULL, &top.record_opts,
diff --git a/tools/perf/perf.h b/tools/perf/perf.h
index cf20187..acf3d66 100644
--- a/tools/perf/perf.h
+++ b/tools/perf/perf.h
@@ -182,7 +182,9 @@ struct ip_callchain {
 struct branch_flags {
  u64 mispred:1;
  u64 predicted:1;
- u64 reserved:62;
+ u64 in_tx:1;
+ u64 abort:1;
+ u64 reserved:60;
 };
 
 struct branch_entry {
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index ce8dc61..bb891ed 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -46,6 +46,8 @@ enum hist_column {
  HISTC_CPU,
  HISTC_SRCLINE,
  HISTC_MISPREDICT,
+ HISTC_IN_TX,
+ HISTC_ABORT,
  HISTC_SYMBOL_FROM,
  HISTC_SYMBOL_TO,
  HISTC_DSO_FROM,
diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index 5f118a0..1771566 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -858,6 +858,55 @@ struct sort_entry sort_mem_snoop = {
  .se_width_idx = HISTC_MEM_SNOOP,
 };
 
+static int64_t
+sort__abort_cmp(struct hist_entry *left, struct hist_entry *right)
+{
+ return left->branch_info->flags.abort !=
+  right->branch_info->flags.abort;
+}
+
+static int hist_entry__abort_snprintf(struct hist_entry *self, char *bf,
+        size_t size, unsigned int width)
+{
+ static const char *out = ".";
+
+ if (self->branch_info->flags.abort)
+  out = "A";
+ return repsep_snprintf(bf, size, "%-*s", width, out);
+}
+
+struct sort_entry sort_abort = {
+ .se_header = "Transaction abort",
+ .se_cmp  = sort__abort_cmp,
+ .se_snprintf = hist_entry__abort_snprintf,
+ .se_width_idx = HISTC_ABORT,
+};
+
+static int64_t
+sort__in_tx_cmp(struct hist_entry *left, struct hist_entry *right)
+{
+ return left->branch_info->flags.in_tx !=
+  right->branch_info->flags.in_tx;
+}
+
+static int hist_entry__in_tx_snprintf(struct hist_entry *self, char *bf,
+        size_t size, unsigned int width)
+{
+ static const char *out = ".";
+
+ if (self->branch_info->flags.in_tx)
+  out = "T";
+
+ return repsep_snprintf(bf, size, "%-*s", width, out);
+}
+
+struct sort_entry sort_in_tx = {
+ .se_header = "Branch in transaction",
+ .se_cmp  = sort__in_tx_cmp,
+ .se_snprintf = hist_entry__in_tx_snprintf,
+ .se_width_idx = HISTC_IN_TX,
+};
+
 struct sort_dimension {
  const char  *name;
  struct sort_entry *entry;
@@ -888,6 +937,8 @@ static struct sort_dimension bstack_sort_dimensions[] = {
  DIM(SORT_SYM_FROM, "symbol_from", sort_sym_from),
  DIM(SORT_SYM_TO, "symbol_to", sort_sym_to),
  DIM(SORT_MISPREDICT, "mispredict", sort_mispredict),
+ DIM(SORT_IN_TX, "in_tx", sort_in_tx),
+ DIM(SORT_ABORT, "abort", sort_abort),
 };
 
 #undef DIM
diff --git a/tools/perf/util/sort.h b/tools/perf/util/sort.h
index 4e80dbd..9dad3a0 100644
--- a/tools/perf/util/sort.h
+++ b/tools/perf/util/sort.h
@@ -153,6 +153,8 @@ enum sort_type {
  SORT_SYM_FROM,
  SORT_SYM_TO,
  SORT_MISPREDICT,
+ SORT_ABORT,
+ SORT_IN_TX,
 
  /* memory mode specific sort keys */
  __SORT_MEMORY_MODE,
-- 
1.7.1