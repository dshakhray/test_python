From da192b1f1192bd25dd9f0479332b0aae2a7ebbe3 Mon Sep 17 00:00:00 2001
From: Steve Best <sbest@redhat.com>
Date: Fri, 3 Oct 2014 21:26:17 -0400
Subject: [powerpc] pseries: Fix endian issues in memory hotplug

Message-id: <20141003212617.20407.48648.sendpatchset@ibm-p7r2-01.lab.bos.redhat.com>
Patchwork-id: 96898
O-Subject: [PATCH RHEL7.1 BZ1142244 4/4] powerpc/pseries: Fix endian issues in memory hotplug
Bugzilla: 1142244
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

RHBZ#:
------
https://bugzilla.redhat.com/show_bug.cgi?id=1142244

Description:
------------
Values acquired from Open Firmware are in 32-bit big endian format
and need to be handled on little endian architectures.  This patch
ensures values are in cpu endian when hotplugging memory.

Signed-off-by: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>

RHEL Version Found:
-------------------
7.0

Upstream Status:
----------------
https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c9ac408bc7329911237c25508f578fb2fa1c4235

----------------
Steve Best

Proposed Patch:
---------------

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/platforms/pseries/hotplug-memory.c b/arch/powerpc/platforms/pseries/hotplug-memory.c
index 7995135..113f888 100644
--- a/arch/powerpc/platforms/pseries/hotplug-memory.c
+++ b/arch/powerpc/platforms/pseries/hotplug-memory.c
@@ -113,7 +113,7 @@ out:
 static int pseries_remove_mem_node(struct device_node *np)
 {
  const char *type;
- const unsigned int *regs;
+ const __be32 *regs;
  unsigned long base;
  unsigned int lmb_size;
  int ret = -EINVAL;
@@ -132,8 +132,8 @@ static int pseries_remove_mem_node(struct device_node *np)
  if (!regs)
   return ret;
 
- base = *(unsigned long *)regs;
- lmb_size = regs[3];
+ base = be64_to_cpu(*(unsigned long *)regs);
+ lmb_size = be32_to_cpu(regs[3]);
 
  pseries_remove_memblock(base, lmb_size);
  return 0;
@@ -153,7 +153,7 @@ static inline int pseries_remove_mem_node(struct device_node *np)
 static int pseries_add_mem_node(struct device_node *np)
 {
  const char *type;
- const unsigned int *regs;
+ const __be32 *regs;
  unsigned long base;
  unsigned int lmb_size;
  int ret = -EINVAL;
@@ -172,8 +172,8 @@ static int pseries_add_mem_node(struct device_node *np)
  if (!regs)
   return ret;
 
- base = *(unsigned long *)regs;
- lmb_size = regs[3];
+ base = be64_to_cpu(*(unsigned long *)regs);
+ lmb_size = be32_to_cpu(regs[3]);
 
  /*
   * Update memory region to represent the memory add
@@ -187,14 +187,14 @@ static int pseries_update_drconf_memory(struct of_prop_reconfig *pr)
  struct of_drconf_cell *new_drmem, *old_drmem;
  unsigned long memblock_size;
  u32 entries;
- u32 *p;
+ __be32 *p;
  int i, rc = -EINVAL;
 
  memblock_size = pseries_memory_block_size();
  if (!memblock_size)
   return -EINVAL;
 
- p = (u32 *)of_get_property(pr->dn, "ibm,dynamic-memory", NULL);
+ p = (__be32 *)of_get_property(pr->dn, "ibm,dynamic-memory", NULL);
  if (!p)
   return -EINVAL;
 
@@ -203,28 +203,30 @@ static int pseries_update_drconf_memory(struct of_prop_reconfig *pr)
   * entries. Get the niumber of entries and skip to the array of
   * of_drconf_cell's.
   */
- entries = *p++;
+ entries = be32_to_cpu(*p++);
  old_drmem = (struct of_drconf_cell *)p;
 
- p = (u32 *)pr->prop->value;
+ p = (__be32 *)pr->prop->value;
  p++;
  new_drmem = (struct of_drconf_cell *)p;
 
  for (i = 0; i < entries; i++) {
-  if ((old_drmem[i].flags & DRCONF_MEM_ASSIGNED) &&
-      (!(new_drmem[i].flags & DRCONF_MEM_ASSIGNED))) {
-   rc = pseries_remove_memblock(old_drmem[i].base_addr,
+  if ((be32_to_cpu(old_drmem[i].flags) & DRCONF_MEM_ASSIGNED) &&
+      (!(be32_to_cpu(new_drmem[i].flags) & DRCONF_MEM_ASSIGNED))) {
+   rc = pseries_remove_memblock(
+    be64_to_cpu(old_drmem[i].base_addr),
            memblock_size);
    break;
-  } else if ((!(old_drmem[i].flags & DRCONF_MEM_ASSIGNED)) &&
-      (new_drmem[i].flags & DRCONF_MEM_ASSIGNED)) {
-   rc = memblock_add(old_drmem[i].base_addr,
+  } else if ((!(be32_to_cpu(old_drmem[i].flags) &
+       DRCONF_MEM_ASSIGNED)) &&
+       (be32_to_cpu(new_drmem[i].flags) &
+       DRCONF_MEM_ASSIGNED)) {
+   rc = memblock_add(be64_to_cpu(old_drmem[i].base_addr),
        memblock_size);
    rc = (rc < 0) ? -EINVAL : 0;
    break;
   }
  }
-
  return rc;
 }
 
-- 
1.7.1