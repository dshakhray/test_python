From 80debe594e48157c36973b8faf00e9f70895ef63 Mon Sep 17 00:00:00 2001
From: Doug Ledford <dledford@redhat.com>
Date: Wed, 14 Jan 2015 06:35:11 -0500
Subject: [ethernet] mlx4: Cache line EQE size support

Message-id: <cf2cc3edd4ca330608004b5e1dff3d8cc9fd03af.1421216634.git.dledford@redhat.com>
Patchwork-id: 102847
O-Subject: [Patch RHEL7 1/3] net/mlx4_core: Cache line EQE size support
Bugzilla: 1088499 1173483
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Ido Shamay <idos@mellanox.com>

Enable mlx4 interrupt handler to work with EQE stride feature,
The feature may be enabled when cache line is bigger than 64B.
The EQE size will then be the cache line size, and the context
segment resides in [0-31] offset.

Signed-off-by: Ido Shamay <idos@mellanox.com>
Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 43c816c67a536cfcfc24da50153115b75eca94f0)
Signed-off-by: Doug Ledford <dledford@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/mellanox/mlx4/eq.c b/drivers/net/ethernet/mellanox/mlx4/eq.c
index 6956bc1..62b5938 100644
--- a/drivers/net/ethernet/mellanox/mlx4/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx4/eq.c
@@ -102,21 +102,24 @@ static void eq_set_ci(struct mlx4_eq *eq, int req_not)
  mb();
 }
 
-static struct mlx4_eqe *get_eqe(struct mlx4_eq *eq, u32 entry, u8 eqe_factor)
+static struct mlx4_eqe *get_eqe(struct mlx4_eq *eq, u32 entry, u8 eqe_factor,
+    u8 eqe_size)
 {
  /* (entry & (eq->nent - 1)) gives us a cyclic array */
- unsigned long offset = (entry & (eq->nent - 1)) * (MLX4_EQ_ENTRY_SIZE << eqe_factor);
- /* CX3 is capable of extending the EQE from 32 to 64 bytes.
-  * When this feature is enabled, the first (in the lower addresses)
+ unsigned long offset = (entry & (eq->nent - 1)) * eqe_size;
+ /* CX3 is capable of extending the EQE from 32 to 64 bytes with
+  * strides of 64B,128B and 256B.
+  * When 64B EQE is used, the first (in the lower addresses)
   * 32 bytes in the 64 byte EQE are reserved and the next 32 bytes
   * contain the legacy EQE information.
+  * In all other cases, the first 32B contains the legacy EQE info.
   */
  return eq->page_list[offset / PAGE_SIZE].buf + (offset + (eqe_factor ? MLX4_EQ_ENTRY_SIZE : 0)) % PAGE_SIZE;
 }
 
-static struct mlx4_eqe *next_eqe_sw(struct mlx4_eq *eq, u8 eqe_factor)
+static struct mlx4_eqe *next_eqe_sw(struct mlx4_eq *eq, u8 eqe_factor, u8 size)
 {
- struct mlx4_eqe *eqe = get_eqe(eq, eq->cons_index, eqe_factor);
+ struct mlx4_eqe *eqe = get_eqe(eq, eq->cons_index, eqe_factor, size);
  return !!(eqe->owner & 0x80) ^ !!(eq->cons_index & eq->nent) ? NULL : eqe;
 }
 
@@ -460,8 +463,9 @@ static int mlx4_eq_int(struct mlx4_dev *dev, struct mlx4_eq *eq)
  enum slave_port_gen_event gen_event;
  unsigned long flags;
  struct mlx4_vport_state *s_info;
+ int eqe_size = dev->caps.eqe_size;
 
- while ((eqe = next_eqe_sw(eq, dev->caps.eqe_factor))) {
+ while ((eqe = next_eqe_sw(eq, dev->caps.eqe_factor, eqe_size))) {
   /*
    * Make sure we read EQ entry contents after we've
    * checked the ownership bit.
@@ -895,8 +899,10 @@ static int mlx4_create_eq(struct mlx4_dev *dev, int nent,
 
  eq->dev   = dev;
  eq->nent  = roundup_pow_of_two(max(nent, 2));
- /* CX3 is capable of extending the CQE/EQE from 32 to 64 bytes */
- npages = PAGE_ALIGN(eq->nent * (MLX4_EQ_ENTRY_SIZE << dev->caps.eqe_factor)) / PAGE_SIZE;
+ /* CX3 is capable of extending the CQE/EQE from 32 to 64 bytes, with
+  * strides of 64B,128B and 256B.
+  */
+ npages = PAGE_ALIGN(eq->nent * dev->caps.eqe_size) / PAGE_SIZE;
 
  eq->page_list = kmalloc(npages * sizeof *eq->page_list,
     GFP_KERNEL);
@@ -998,8 +1004,10 @@ static void mlx4_free_eq(struct mlx4_dev *dev,
  struct mlx4_cmd_mailbox *mailbox;
  int err;
  int i;
- /* CX3 is capable of extending the CQE/EQE from 32 to 64 bytes */
- int npages = PAGE_ALIGN((MLX4_EQ_ENTRY_SIZE << dev->caps.eqe_factor) * eq->nent) / PAGE_SIZE;
+ /* CX3 is capable of extending the CQE/EQE from 32 to 64 bytes, with
+  * strides of 64B,128B and 256B
+  */
+ int npages = PAGE_ALIGN(dev->caps.eqe_size  * eq->nent) / PAGE_SIZE;
 
  mailbox = mlx4_alloc_cmd_mailbox(dev);
  if (IS_ERR(mailbox))
-- 
1.7.1