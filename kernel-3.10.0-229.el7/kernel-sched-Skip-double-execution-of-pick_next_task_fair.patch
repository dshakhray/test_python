From 7a59f5bf960aaffd1755cc929bf3bc83978e4a04 Mon Sep 17 00:00:00 2001
From: Larry Woodman <lwoodman@redhat.com>
Date: Tue, 23 Sep 2014 19:40:11 -0400
Subject: [kernel] sched: Skip double execution of pick_next_task_fair()

Message-id: <1411501213-15939-2-git-send-email-lwoodman@redhat.com>
Patchwork-id: 96502
O-Subject: [RHEL7.1 PATCH 1/3] sched: Skip double execution of pick_next_task_fair()
Bugzilla: 1120318
RH-Acked-by: Aristeu Rozanski <aris@redhat.com>

commit 6ccdc84b81a0a6c09a7f0427761d2f8cecfc2218
 Author: Peter Zijlstra <peterz@infradead.org>
 Date:   Thu Apr 24 12:00:47 2014 +0200

 sched: Skip double execution of pick_next_task_fair()

 Tim wrote:

  "The current code will call pick_next_task_fair a second time in the
   slow path if we did not pull any task in our first try.  This is
   really unnecessary as we already know no task can be pulled and it
   doubles the delay for the cpu to enter idle.

   We instrumented some network workloads and that saw that
   pick_next_task_fair is frequently called twice before a cpu enters
   idle.  The call to pick_next_task_fair can add non trivial latency as
   it calls load_balance which runs find_busiest_group on an hierarchy of
   sched domains spanning the cpus for a large system.  For some 4 socket
   systems, we saw almost 0.25 msec spent per call of pick_next_task_fair
   before a cpu can be idled.

 Optimize the second call away for the common case and document the
 dependency.

Reported-by: Tim Chen <tim.c.chen@linux.intel.com>
Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Len Brown <len.brown@intel.com>
Link: http://lkml.kernel.org/r/20140424100047.GP11096@twins.programming.kicks-ass.net
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 577957b..14870ad 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3086,6 +3086,12 @@ pick_next_task(struct rq *rq)
   p = fair_sched_class.pick_next_task(rq);
   if (likely(p))
    return p;
+
+  /* assumes fair_sched_class->next == idle_sched_class */
+  else
+   p = idle_sched_class.pick_next_task(rq);
+
+  return p;
  }
 
  for_each_class(class) {
-- 
1.7.1