From 22b587dcc6713127ec25ddf76ca96a2b2db67a13 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:07:25 -0400
Subject: [tools] perf: Clarify the output of perf sched map

Message-id: <1410181752-25631-201-git-send-email-jolsa@redhat.com>
Patchwork-id: 91883
O-Subject: [PATCH RHEL7.1 BZ1134356 200/307] perf tools: Clarify the output of perf sched map.
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 6bcab4e1eaa1f669d003051ef3b87a963d8763bb
Author: Dongsheng <yangds.fnst@cn.fujitsu.com>
Date: Tue May 6 14:39:01 2014 +0900

description
===========
In output of perf sched map, any shortname of thread will be explained
at the first time when it appear.

Example:
              *A0       228836.978985 secs A0 => perf:23032
          *.   A0       228836.979016 secs B0 => swapper:0
           .  *C0       228836.979099 secs C0 => migration/3:22
  *A0      .   C0       228836.979115 secs
   A0      .  *.        228836.979115 secs

But B0, which is explained as swapper:0 did not appear in the
left part of output. Instead, we use '.' as the shortname of
swapper:0. So the comment of "B0 => swapper:0" is not easy to
understand.

This patch clarify the output of perf sched map with not allocating
one letter-number shortname for swapper:0 and print ". => swapper:0"
as the explanation for swapper:0.

Example:
              *A0       228836.978985 secs A0 => perf:23032
          * .  A0       228836.979016 secs .  => swapper:0
            . *B0       228836.979099 secs B0 => migration/3:22
  *A0       .  B0       228836.979115 secs
   A0       . * .       228836.979115 secs
   A0     *C0   .       228836.979225 secs C0 => ksoftirqd/2:18
   A0     *D0   .       228836.979236 secs D0 => rcu_sched:7

[ small style fixes to make checkpatch happy ]
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-sched.c b/tools/perf/builtin-sched.c
index 4f0dd21..2579215 100644
--- a/tools/perf/builtin-sched.c
+++ b/tools/perf/builtin-sched.c
@@ -1300,17 +1300,25 @@ static int map_switch_event(struct perf_sched *sched, struct perf_evsel *evsel,
 
  new_shortname = 0;
  if (!sched_in->shortname[0]) {
-  sched_in->shortname[0] = sched->next_shortname1;
-  sched_in->shortname[1] = sched->next_shortname2;
-
-  if (sched->next_shortname1 < 'Z') {
-   sched->next_shortname1++;
+  if (!strcmp(thread__comm_str(sched_in), "swapper")) {
+   /*
+    * Don't allocate a letter-number for swapper:0
+    * as a shortname. Instead, we use '.' for it.
+    */
+   sched_in->shortname[0] = '.';
+   sched_in->shortname[1] = ' ';
   } else {
-   sched->next_shortname1='A';
-   if (sched->next_shortname2 < '9') {
-    sched->next_shortname2++;
+   sched_in->shortname[0] = sched->next_shortname1;
+   sched_in->shortname[1] = sched->next_shortname2;
+
+   if (sched->next_shortname1 < 'Z') {
+    sched->next_shortname1++;
    } else {
-    sched->next_shortname2='0';
+    sched->next_shortname1 = 'A';
+    if (sched->next_shortname2 < '9')
+     sched->next_shortname2++;
+    else
+     sched->next_shortname2 = '0';
    }
   }
   new_shortname = 1;
@@ -1322,12 +1330,9 @@ static int map_switch_event(struct perf_sched *sched, struct perf_evsel *evsel,
   else
    printf("*");
 
-  if (sched->curr_thread[cpu]) {
-   if (sched->curr_thread[cpu]->tid)
-    printf("%2s ", sched->curr_thread[cpu]->shortname);
-   else
-    printf(".  ");
-  } else
+  if (sched->curr_thread[cpu])
+   printf("%2s ", sched->curr_thread[cpu]->shortname);
+  else
    printf("   ");
  }
 
-- 
1.7.1