From 5366799aa5c5754bb3fad80c23f9575660396dc7 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:36 -0400
Subject: [fs] ext4: COLLAPSE_RANGE only works on extent-based files

Message-id: <1414059176-6044-13-git-send-email-lczerner@redhat.com>
Patchwork-id: 98299
O-Subject: [RHEL 7.1 PATCH 12/32] ext4: COLLAPSE_RANGE only works on extent-based files
Bugzilla: 1150171

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit 40c406c74eb9eed58ae7d4d12a0197f7279c9499

 Unfortunately, we weren't checking to make sure of this the inode was
 extent-based before attempt operate on it.  Hilarity ensues.

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Cc: Namjae Jeon <namjae.jeon@samsung.com>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 626ec81..79bfc68 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -4881,13 +4881,13 @@ long ext4_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
  if (mode & FALLOC_FL_PUNCH_HOLE)
   return ext4_punch_hole(inode, offset, len);
 
- if (mode & FALLOC_FL_COLLAPSE_RANGE)
-  return ext4_collapse_range(inode, offset, len);
-
  ret = ext4_convert_inline_data(inode);
  if (ret)
   return ret;
 
+ if (mode & FALLOC_FL_COLLAPSE_RANGE)
+  return ext4_collapse_range(inode, offset, len);
+
  if (mode & FALLOC_FL_ZERO_RANGE)
   return ext4_zero_range(file, offset, len, mode);
 
-- 
1.7.1