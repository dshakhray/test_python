From 45ba5b421dd1b3f4401a89fd0008cd116d792af3 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Wed, 6 Aug 2014 03:50:40 -0400
Subject: [s390] pci: Use generic pci_enable_resources()

Message-id: <20140806035039.1438.50696.stgit@gir.stowe>
Patchwork-id: 87470
O-Subject: [RHEL7.1 PATCH 61/69] s390/PCI: Use generic pci_enable_resources()
Bugzilla: 1110896
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110896
Upstream Status: d75332325389a95c4ddbfa0f0cd7e5e08a54aa43

commit d75332325389a95c4ddbfa0f0cd7e5e08a54aa43
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Wed Feb 26 15:30:24 2014 -0700

    s390/PCI: Use generic pci_enable_resources()

    The generic pci_enable_resources() does essentially the same thing as the
    code in the s390 version of pcibios_enable_device().

    There are differences, but I don't think any of them are a problem.  The
    generic code:

      - Checks everything up to PCI_NUM_RESOURCES, not PCI_BAR_COUNT (6), so
        we'll now check the ROM resource, IOV resources, and bridge windows.

      - Checks for res->flags & IORESOURCE_UNSET.  The s390 code never sets
        IORESOURCE_UNSET, so this isn't a problem.

      - Checks res->parent.  The s390 pcibios_add_device() calls
        pci_claim_resource() on all BARs (except ROM, IOV, and bridge windows)
        so this isn't a problem either.

    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Sebastian Ott <sebott@linux.vnet.ibm.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/s390/pci/pci.c b/arch/s390/pci/pci.c
index 7b4f2ea..ab84c69 100644
--- a/arch/s390/pci/pci.c
+++ b/arch/s390/pci/pci.c
@@ -757,27 +757,13 @@ int pcibios_add_device(struct pci_dev *pdev)
 int pcibios_enable_device(struct pci_dev *pdev, int mask)
 {
  struct zpci_dev *zdev = get_zdev(pdev);
- struct resource *res;
- u16 cmd;
- int i;
 
  zdev->pdev = pdev;
  zpci_debug_init_device(zdev);
  zpci_fmb_enable_device(zdev);
  zpci_map_resources(zdev);
 
- pci_read_config_word(pdev, PCI_COMMAND, &cmd);
- for (i = 0; i < PCI_BAR_COUNT; i++) {
-  res = &pdev->resource[i];
-
-  if (res->flags & IORESOURCE_IO)
-   return -EINVAL;
-
-  if (res->flags & IORESOURCE_MEM)
-   cmd |= PCI_COMMAND_MEMORY;
- }
- pci_write_config_word(pdev, PCI_COMMAND, cmd);
- return 0;
+ return pci_enable_resources(pdev, mask);
 }
 
 void pcibios_disable_device(struct pci_dev *pdev)
-- 
1.7.1