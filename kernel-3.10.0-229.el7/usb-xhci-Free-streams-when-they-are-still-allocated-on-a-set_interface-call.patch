From 4119934cc1ece793d6655117169db7500aafa4b1 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:05:50 -0400
Subject: [usb] xhci: Free streams when they are still allocated on a set_interface call

Message-id: <1410887463-20674-279-git-send-email-dzickus@redhat.com>
Patchwork-id: 95171
O-Subject: [RHEL7 PATCH 278/591] xhci: Free streams when they are still allocated on a set_interface call
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit df6138347bcde316e4d4b24ae4d9d0296461c79a
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 4 00:29:45 2013 +0200

    xhci: Free streams when they are still allocated on a set_interface call

    And warn about this, as that would be a driver bug.

    Like wise drivers should ensure that streams are properly free-ed before a
    device is reset. So lets warn about that too. This already causes warnings
    in the form of:

    [   96.982398] xhci_hcd 0000:01:00.0: WARN Can't disable streams for endpoint 0x81
    , streams are already disabled!
    [   96.982400] xhci_hcd 0000:01:00.0: WARN xhci_free_streams() called with non-streams endpoint

    But it is better to also warn about the actual cause of this later warnings.

    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index 4101ab9..38c077a 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -2678,6 +2678,20 @@ static int xhci_configure_endpoint(struct xhci_hcd *xhci,
  return ret;
 }
 
+static void xhci_check_bw_drop_ep_streams(struct xhci_hcd *xhci,
+ struct xhci_virt_device *vdev, int i)
+{
+ struct xhci_virt_ep *ep = &vdev->eps[i];
+
+ if (ep->ep_state & EP_HAS_STREAMS) {
+  xhci_warn(xhci, "WARN: endpoint 0x%02x has streams on set_interface, freeing streams.\n",
+    xhci_get_endpoint_address(i));
+  xhci_free_stream_info(xhci, ep->stream_info);
+  ep->stream_info = NULL;
+  ep->ep_state &= ~EP_HAS_STREAMS;
+ }
+}
+
 /* Called after one or more calls to xhci_add_endpoint() or
  * xhci_drop_endpoint().  If this call fails, the USB core is expected
  * to call xhci_reset_bandwidth().
@@ -2742,8 +2756,10 @@ int xhci_check_bandwidth(struct usb_hcd *hcd, struct usb_device *udev)
  /* Free any rings that were dropped, but not changed. */
  for (i = 1; i < 31; ++i) {
   if ((le32_to_cpu(ctrl_ctx->drop_flags) & (1 << (i + 1))) &&
-      !(le32_to_cpu(ctrl_ctx->add_flags) & (1 << (i + 1))))
+      !(le32_to_cpu(ctrl_ctx->add_flags) & (1 << (i + 1)))) {
    xhci_free_or_cache_endpoint_ring(xhci, virt_dev, i);
+   xhci_check_bw_drop_ep_streams(xhci, virt_dev, i);
+  }
  }
  xhci_zero_in_ctx(xhci, virt_dev);
  /*
@@ -2759,6 +2775,7 @@ int xhci_check_bandwidth(struct usb_hcd *hcd, struct usb_device *udev)
   if (virt_dev->eps[i].ring) {
    xhci_free_or_cache_endpoint_ring(xhci, virt_dev, i);
   }
+  xhci_check_bw_drop_ep_streams(xhci, virt_dev, i);
   virt_dev->eps[i].ring = virt_dev->eps[i].new_ring;
   virt_dev->eps[i].new_ring = NULL;
  }
@@ -3519,6 +3536,8 @@ int xhci_discover_or_reset_device(struct usb_hcd *hcd, struct usb_device *udev)
   struct xhci_virt_ep *ep = &virt_dev->eps[i];
 
   if (ep->ep_state & EP_HAS_STREAMS) {
+   xhci_warn(xhci, "WARN: endpoint 0x%02x has streams on device reset, freeing streams.\n",
+     xhci_get_endpoint_address(i));
    xhci_free_stream_info(xhci, ep->stream_info);
    ep->stream_info = NULL;
    ep->ep_state &= ~EP_HAS_STREAMS;
-- 
1.7.1