From 7009444360cb0366c0cea64174b1ece4f2d17a1f Mon Sep 17 00:00:00 2001
From: Tony Camuso <tcamuso@redhat.com>
Date: Fri, 8 Aug 2014 18:14:39 -0400
Subject: [char] ipmi: use USEC_PER_SEC instead of 1000000 for more meaningful

Message-id: <1407521687-4858-6-git-send-email-tcamuso@redhat.com>
Patchwork-id: 87547
O-Subject: [RHEL7.1 PATCH 05/13] ipmi: use USEC_PER_SEC instead of 1000000 for more meaningful
Bugzilla: 1111214
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1111214

Cherry-picked without conflicts from the following upstream commit.

commit ccb3368cb4b97e2d8a763b894303e6a127f87bc8
Author: Xie XiuQi <xiexiuqi@huawei.com>
Date:   Fri Jan 24 14:00:51 2014 -0600

    ipmi: use USEC_PER_SEC instead of 1000000 for more meaningful

    Use USEC_PER_SEC instead of 1000000, that making the later bugfix
    more clearly.

    Signed-off-by: Xie XiuQi <xiexiuqi@huawei.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Tony Camuso <tcamuso@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/char/ipmi/ipmi_bt_sm.c b/drivers/char/ipmi/ipmi_bt_sm.c
index a22a7a5..f5e4cd7 100644
--- a/drivers/char/ipmi/ipmi_bt_sm.c
+++ b/drivers/char/ipmi/ipmi_bt_sm.c
@@ -201,7 +201,7 @@ static unsigned int bt_init_data(struct si_sm_data *bt, struct si_sm_io *io)
  }
  bt->state = BT_STATE_IDLE; /* start here */
  bt->complete = BT_STATE_IDLE; /* end here */
- bt->BT_CAP_req2rsp = BT_NORMAL_TIMEOUT * 1000000;
+ bt->BT_CAP_req2rsp = BT_NORMAL_TIMEOUT * USEC_PER_SEC;
  bt->BT_CAP_retries = BT_NORMAL_RETRY_LIMIT;
  /* BT_CAP_outreqs == zero is a flag to read BT Capabilities */
  return 3; /* We claim 3 bytes of space; ought to check SPMI table */
@@ -613,7 +613,7 @@ static enum si_sm_result bt_event(struct si_sm_data *bt, long time)
   HOST2BMC(42);  /* Sequence number */
   HOST2BMC(3);  /* Cmd == Soft reset */
   BT_CONTROL(BT_H2B_ATN);
-  bt->timeout = BT_RESET_DELAY * 1000000;
+  bt->timeout = BT_RESET_DELAY * USEC_PER_SEC;
   BT_STATE_CHANGE(BT_STATE_RESET3,
     SI_SM_CALL_WITH_DELAY);
 
@@ -651,14 +651,14 @@ static enum si_sm_result bt_event(struct si_sm_data *bt, long time)
   bt_init_data(bt, bt->io);
   if ((i == 8) && !BT_CAP[2]) {
    bt->BT_CAP_outreqs = BT_CAP[3];
-   bt->BT_CAP_req2rsp = BT_CAP[6] * 1000000;
+   bt->BT_CAP_req2rsp = BT_CAP[6] * USEC_PER_SEC;
    bt->BT_CAP_retries = BT_CAP[7];
   } else
    printk(KERN_WARNING "IPMI BT: using default values\n");
   if (!bt->BT_CAP_outreqs)
    bt->BT_CAP_outreqs = 1;
   printk(KERN_WARNING "IPMI BT: req2rsp=%ld secs retries=%d\n",
-   bt->BT_CAP_req2rsp / 1000000L, bt->BT_CAP_retries);
+   bt->BT_CAP_req2rsp / USEC_PER_SEC, bt->BT_CAP_retries);
   bt->timeout = bt->BT_CAP_req2rsp;
   return SI_SM_CALL_WITHOUT_DELAY;
 
diff --git a/drivers/char/ipmi/ipmi_kcs_sm.c b/drivers/char/ipmi/ipmi_kcs_sm.c
index e53fc24..6a4bdc1 100644
--- a/drivers/char/ipmi/ipmi_kcs_sm.c
+++ b/drivers/char/ipmi/ipmi_kcs_sm.c
@@ -118,8 +118,8 @@ enum kcs_states {
 #define MAX_KCS_WRITE_SIZE IPMI_MAX_MSG_LENGTH
 
 /* Timeouts in microseconds. */
-#define IBF_RETRY_TIMEOUT 5000000
-#define OBF_RETRY_TIMEOUT 5000000
+#define IBF_RETRY_TIMEOUT (5*USEC_PER_SEC)
+#define OBF_RETRY_TIMEOUT (5*USEC_PER_SEC)
 #define MAX_ERROR_RETRIES 10
 #define ERROR0_OBF_WAIT_JIFFIES (2*HZ)
 
diff --git a/drivers/char/ipmi/ipmi_smic_sm.c b/drivers/char/ipmi/ipmi_smic_sm.c
index faed929..c8e77af 100644
--- a/drivers/char/ipmi/ipmi_smic_sm.c
+++ b/drivers/char/ipmi/ipmi_smic_sm.c
@@ -80,7 +80,7 @@ enum smic_states {
 #define SMIC_MAX_ERROR_RETRIES 3
 
 /* Timeouts in microseconds. */
-#define SMIC_RETRY_TIMEOUT 2000000
+#define SMIC_RETRY_TIMEOUT (2*USEC_PER_SEC)
 
 /* SMIC Flags Register Bits */
 #define SMIC_RX_DATA_READY 0x80
-- 
1.7.1