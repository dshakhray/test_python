From ff471ba7ce7582da126167c1089e6c4b8396cab0 Mon Sep 17 00:00:00 2001
From: Oleg Nesterov <oleg@redhat.com>
Date: Mon, 16 Jun 2014 16:01:29 -0400
Subject: [kernel] uprobes: Teach arch_uprobe_post_xol() to restart if possible

Message-id: <20140616160129.GA15423@redhat.com>
Patchwork-id: 84076
O-Subject: [PATCH RHEL7 BZ 1073627 09/36] uprobes/x86: Teach arch_uprobe_post_xol() to restart if possible
Bugzilla: 1073627
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

RHBZ: 1073627

SIGILL after the failed arch_uprobe_post_xol() should only be used as
a last resort, we should try to restart the probed insn if possible.

Currently only adjust_ret_addr() can fail, and this can only happen if
another thread unmapped our stack after we executed "call" out-of-line.
Most probably the application if buggy, but even in this case it can
have a handler for SIGSEGV/etc. And in theory it can be even correct
and do something non-trivial with its memory.

Of course we can't restart unconditionally, so arch_uprobe_post_xol()
does this only if ->post_xol() returns -ERESTART even if currently this
is the only possible error.

default_post_xol_op(UPROBE_FIX_CALL) can always restart, but as Jim
pointed out it should not forget to pop off the return address pushed
by this insn executed out-of-line.

Note: this is not "perfect", we do not want the extra handler_chain()
after restart, but I think this is the best solution we can realistically
do without too much uglifications.

Signed-off-by: Oleg Nesterov <oleg@redhat.com>
Reviewed-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
Reviewed-by: Jim Keniston <jkenisto@us.ibm.com>
(cherry picked from commit 75f9ef0b7f1aae33b7be7ba8d9c23c8cb48c2212)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/uprobes.c b/arch/x86/kernel/uprobes.c
index e72903e..cdd6909 100644
--- a/arch/x86/kernel/uprobes.c
+++ b/arch/x86/kernel/uprobes.c
@@ -443,16 +443,22 @@ static int default_post_xol_op(struct arch_uprobe *auprobe, struct pt_regs *regs
 {
  struct uprobe_task *utask = current->utask;
  long correction = (long)(utask->vaddr - utask->xol_vaddr);
- int ret = 0;
 
  handle_riprel_post_xol(auprobe, regs, &correction);
  if (auprobe->fixups & UPROBE_FIX_IP)
   regs->ip += correction;
 
- if (auprobe->fixups & UPROBE_FIX_CALL)
-  ret = adjust_ret_addr(regs->sp, correction);
+ if (auprobe->fixups & UPROBE_FIX_CALL) {
+  if (adjust_ret_addr(regs->sp, correction)) {
+   if (is_ia32_task())
+    regs->sp += 4;
+   else
+    regs->sp += 8;
+   return -ERESTART;
+  }
+ }
 
- return ret;
+ return 0;
 }
 
 static struct uprobe_xol_ops default_xol_ops = {
@@ -599,6 +605,12 @@ int arch_uprobe_post_xol(struct arch_uprobe *auprobe, struct pt_regs *regs)
   int err = auprobe->ops->post_xol(auprobe, regs);
   if (err) {
    arch_uprobe_abort_xol(auprobe, regs);
+   /*
+    * Restart the probed insn. ->post_xol() must ensure
+    * this is really possible if it returns -ERESTART.
+    */
+   if (err == -ERESTART)
+    return 0;
    return err;
   }
  }
-- 
1.7.1