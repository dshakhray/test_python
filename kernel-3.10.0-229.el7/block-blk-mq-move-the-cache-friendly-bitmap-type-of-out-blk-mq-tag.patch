From bdda6974e4d6ab35fe96ac2d924a30e49b40fc91 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:56 -0400
Subject: [block] blk-mq: move the cache friendly bitmap type of out blk-mq-tag

Message-id: <1402670238-13916-69-git-send-email-snitzer@redhat.com>
Patchwork-id: 83826
O-Subject: [RHEL7.1 PATCH 068/150] blk-mq: move the cache friendly bitmap type of out blk-mq-tag
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit e93ecf602beb8439f0bdcc1fa2cbc1f31fdfb8e2
Author: Jens Axboe <axboe@fb.com>
Date:   Mon May 19 09:17:48 2014 -0600

    blk-mq: move the cache friendly bitmap type of out blk-mq-tag

    We will use it for the pending list in blk-mq core as well.

    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq-tag.c b/block/blk-mq-tag.c
index c80086c..e6b3fba 100644
--- a/block/blk-mq-tag.c
+++ b/block/blk-mq-tag.c
@@ -20,7 +20,7 @@ static bool bt_has_free_tags(struct blk_mq_bitmap_tags *bt)
  int i;
 
  for (i = 0; i < bt->map_nr; i++) {
-  struct blk_mq_bitmap *bm = &bt->map[i];
+  struct blk_align_bitmap *bm = &bt->map[i];
   int ret;
 
   ret = find_first_zero_bit(&bm->word, bm->depth);
@@ -117,7 +117,7 @@ static inline bool hctx_may_queue(struct blk_mq_hw_ctx *hctx,
  return atomic_read(&hctx->nr_active) < depth;
 }
 
-static int __bt_get_word(struct blk_mq_bitmap *bm, unsigned int last_tag)
+static int __bt_get_word(struct blk_align_bitmap *bm, unsigned int last_tag)
 {
  int tag, org_last_tag, end;
 
@@ -360,7 +360,7 @@ static void bt_for_each_free(struct blk_mq_bitmap_tags *bt,
  int i;
 
  for (i = 0; i < bt->map_nr; i++) {
-  struct blk_mq_bitmap *bm = &bt->map[i];
+  struct blk_align_bitmap *bm = &bt->map[i];
   int bit = 0;
 
   do {
@@ -400,7 +400,7 @@ static unsigned int bt_unused_tags(struct blk_mq_bitmap_tags *bt)
  unsigned int i, used;
 
  for (i = 0, used = 0; i < bt->map_nr; i++) {
-  struct blk_mq_bitmap *bm = &bt->map[i];
+  struct blk_align_bitmap *bm = &bt->map[i];
 
   used += bitmap_weight(&bm->word, bm->depth);
  }
@@ -438,7 +438,7 @@ static int bt_alloc(struct blk_mq_bitmap_tags *bt, unsigned int depth,
   }
 
   nr = ALIGN(depth, tags_per_word) / tags_per_word;
-  bt->map = kzalloc_node(nr * sizeof(struct blk_mq_bitmap),
+  bt->map = kzalloc_node(nr * sizeof(struct blk_align_bitmap),
       GFP_KERNEL, node);
   if (!bt->map)
    return -ENOMEM;
diff --git a/block/blk-mq-tag.h b/block/blk-mq-tag.h
index 0f5ec8b..e144f68 100644
--- a/block/blk-mq-tag.h
+++ b/block/blk-mq-tag.h
@@ -1,6 +1,8 @@
 #ifndef INT_BLK_MQ_TAG_H
 #define INT_BLK_MQ_TAG_H
 
+#include "blk-mq.h"
+
 enum {
  BT_WAIT_QUEUES = 8,
  BT_WAIT_BATCH = 8,
@@ -14,18 +16,13 @@ struct bt_wait_state {
 #define TAG_TO_INDEX(bt, tag) ((tag) >> (bt)->bits_per_word)
 #define TAG_TO_BIT(bt, tag) ((tag) & ((1 << (bt)->bits_per_word) - 1))
 
-struct blk_mq_bitmap {
- unsigned long word;
- unsigned long depth;
-} ____cacheline_aligned_in_smp;
-
 struct blk_mq_bitmap_tags {
  unsigned int depth;
  unsigned int wake_cnt;
  unsigned int bits_per_word;
 
  unsigned int map_nr;
- struct blk_mq_bitmap *map;
+ struct blk_align_bitmap *map;
 
  unsigned int wake_index;
  struct bt_wait_state *bs;
diff --git a/block/blk-mq.h b/block/blk-mq.h
index 97cfab9..5e5a378 100644
--- a/block/blk-mq.h
+++ b/block/blk-mq.h
@@ -52,4 +52,13 @@ void blk_mq_disable_hotplug(void);
 extern unsigned int *blk_mq_make_queue_map(struct blk_mq_tag_set *set);
 extern int blk_mq_update_queue_map(unsigned int *map, unsigned int nr_queues);
 
+/*
+ * Basic implementation of sparser bitmap, allowing the user to spread
+ * the bits over more cachelines.
+ */
+struct blk_align_bitmap {
+ unsigned long word;
+ unsigned long depth;
+} ____cacheline_aligned_in_smp;
+
 #endif
-- 
1.7.1