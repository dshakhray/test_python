From 4ed347f5ecfee5b30adc634a7f954531f8bfa488 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:37:13 -0400
Subject: [virt] kvm/x86: Avoid zapping mmio sptes twice for generation wraparound

Message-id: <1406040016-3289-39-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86117
O-Subject: [RHEL7 PATCH v2 038/221] KVM: x86: Avoid zapping mmio sptes twice for generation wraparound
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Takuya Yoshikawa <yoshikawa_takuya_b1@lab.ntt.co.jp>

Now that kvm_arch_memslots_updated() catches every increment of the
memslots->generation, checking if the mmio generation has reached its
maximum value is enough.

Signed-off-by: Takuya Yoshikawa <yoshikawa_takuya_b1@lab.ntt.co.jp>
Reviewed-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit e6dff7d15edfa90011298c2a37ec7c965c5f9885)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/mmu.c b/arch/x86/kvm/mmu.c
index d320a6b..9374434 100644
--- a/arch/x86/kvm/mmu.c
+++ b/arch/x86/kvm/mmu.c
@@ -4399,11 +4399,8 @@ void kvm_mmu_invalidate_mmio_sptes(struct kvm *kvm)
  /*
   * The very rare case: if the generation-number is round,
   * zap all shadow pages.
-  *
-  * The max value is MMIO_MAX_GEN - 1 since it is not called
-  * when mark memslot invalid.
   */
- if (unlikely(kvm_current_mmio_generation(kvm) >= (MMIO_MAX_GEN - 1))) {
+ if (unlikely(kvm_current_mmio_generation(kvm) >= MMIO_MAX_GEN)) {
   printk_ratelimited(KERN_INFO "kvm: zapping shadow pages for mmio generation wraparound\n");
   kvm_mmu_invalidate_zap_all_pages(kvm);
  }
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index ec568ee..2cf2c75 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -7076,6 +7076,11 @@ out_free:
 
 void kvm_arch_memslots_updated(struct kvm *kvm)
 {
+ /*
+  * memslots->generation has been incremented.
+  * mmio generation may have reached its maximum value.
+  */
+ kvm_mmu_invalidate_mmio_sptes(kvm);
 }
 
 int kvm_arch_prepare_memory_region(struct kvm *kvm,
@@ -7138,11 +7143,6 @@ void kvm_arch_commit_memory_region(struct kvm *kvm,
   */
  if ((change != KVM_MR_DELETE) && (mem->flags & KVM_MEM_LOG_DIRTY_PAGES))
   kvm_mmu_slot_remove_write_access(kvm, mem->slot);
- /*
-  * If memory slot is created, or moved, we need to clear all
-  * mmio sptes.
-  */
- kvm_mmu_invalidate_mmio_sptes(kvm);
 }
 
 void kvm_arch_flush_shadow_all(struct kvm *kvm)
-- 
1.7.1