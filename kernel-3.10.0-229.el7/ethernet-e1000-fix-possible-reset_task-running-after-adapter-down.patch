From bbcec9fba71d241b97f6137417cf78fbe7ede949 Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Mon, 11 Aug 2014 16:47:29 -0400
Subject: [ethernet] e1000: fix possible reset_task running after adapter down

Message-id: <1407775649-7313-3-git-send-email-jogreene@redhat.com>
Patchwork-id: 87638
O-Subject: [RHEL7.1 net PATCH 2/2] e1000: fix possible reset_task running after adapter down
Bugzilla: 1091129
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

BZ: 1091129
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7810984
Tested: By me. Acceptable. See BZ for details

On e1000_down(), we should ensure every asynchronous work is canceled
before proceeding. Since the watchdog_task can schedule other works
apart from itself, it should be stopped first, but currently it is
stopped after the reset_task. This can result in the following race
leading to the reset_task running after the module unload:

e1000_down_and_stop():   e1000_watchdog():
----------------------   -----------------

cancel_work_sync(reset_task)
     schedule_work(reset_task)
cancel_delayed_work_sync(watchdog_task)

The patch moves cancel_delayed_work_sync(watchdog_task) at the beginning
of e1000_down_and_stop() thus ensuring the race is impossible.

Cc: Tushar Dave <tushar.n.dave@intel.com>
Cc: Patrick McHardy <kaber@trash.net>
Signed-off-by: Vladimir Davydov <vdavydov@parallels.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 74a1b1ea8a30b035aaad833bbd6b9263e72acfac)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/e1000/e1000_main.c b/drivers/net/ethernet/intel/e1000/e1000_main.c
index 733a699..d5f1b6e 100644
--- a/drivers/net/ethernet/intel/e1000/e1000_main.c
+++ b/drivers/net/ethernet/intel/e1000/e1000_main.c
@@ -494,13 +494,20 @@ static void e1000_down_and_stop(struct e1000_adapter *adapter)
 {
  set_bit(__E1000_DOWN, &adapter->flags);
 
- /* Only kill reset task if adapter is not resetting */
- if (!test_bit(__E1000_RESETTING, &adapter->flags))
-  cancel_work_sync(&adapter->reset_task);
-
  cancel_delayed_work_sync(&adapter->watchdog_task);
+
+ /*
+  * Since the watchdog task can reschedule other tasks, we should cancel
+  * it first, otherwise we can run into the situation when a work is
+  * still running after the adapter has been turned down.
+  */
+
  cancel_delayed_work_sync(&adapter->phy_info_task);
  cancel_delayed_work_sync(&adapter->fifo_stall_task);
+
+ /* Only kill reset task if adapter is not resetting */
+ if (!test_bit(__E1000_RESETTING, &adapter->flags))
+  cancel_work_sync(&adapter->reset_task);
 }
 
 void e1000_down(struct e1000_adapter *adapter)
-- 
1.7.1