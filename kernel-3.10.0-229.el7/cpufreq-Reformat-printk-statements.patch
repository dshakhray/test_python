From 69d7da26565e23fcdf954ea7016875f6ccf4a21d Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:36 -0400
Subject: [cpufreq] Reformat printk() statements

Message-id: <1409235879-1283-123-git-send-email-prarit@redhat.com>
Patchwork-id: 89516
O-Subject: [RHEL7.1 PATCH BZ 1134639 122/185] cpufreq: Reformat printk() statements
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit e837f9b58b83a705c9c14b26c3ee29fd9870322e
Author: Joe Perches <joe@perches.com>
Date:   Tue Mar 11 10:03:00 2014 -0700

    cpufreq: Reformat printk() statements

     - Add missing newlines
     - Coalesce format fragments
     - Convert printks to pr_<level>
     - Align arguments

    Based-on-patch-by: Soeren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Joe Perches <joe@perches.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 114ba56..f5856b9 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -182,8 +182,8 @@ unsigned int cpufreq_generic_get(unsigned int cpu)
  struct cpufreq_policy *policy = per_cpu(cpufreq_cpu_data, cpu);
 
  if (!policy || IS_ERR(policy->clk)) {
-  pr_err("%s: No %s associated to cpu: %d\n", __func__,
-    policy ? "clk" : "policy", cpu);
+  pr_err("%s: No %s associated to cpu: %d\n",
+         __func__, policy ? "clk" : "policy", cpu);
   return 0;
  }
 
@@ -255,15 +255,15 @@ static void adjust_jiffies(unsigned long val, struct cpufreq_freqs *ci)
  if (!l_p_j_ref_freq) {
   l_p_j_ref = loops_per_jiffy;
   l_p_j_ref_freq = ci->old;
-  pr_debug("saving %lu as reference value for loops_per_jiffy; "
-   "freq is %u kHz\n", l_p_j_ref, l_p_j_ref_freq);
+  pr_debug("saving %lu as reference value for loops_per_jiffy; freq is %u kHz\n",
+    l_p_j_ref, l_p_j_ref_freq);
  }
  if ((val == CPUFREQ_POSTCHANGE && ci->old != ci->new) ||
      (val == CPUFREQ_RESUMECHANGE || val == CPUFREQ_SUSPENDCHANGE)) {
   loops_per_jiffy = cpufreq_scale(l_p_j_ref, l_p_j_ref_freq,
         ci->new);
-  pr_debug("scaling loops_per_jiffy to %lu "
-   "for frequency %u kHz\n", loops_per_jiffy, ci->new);
+  pr_debug("scaling loops_per_jiffy to %lu for frequency %u kHz\n",
+    loops_per_jiffy, ci->new);
  }
 }
 #else
@@ -283,7 +283,7 @@ static void __cpufreq_notify_transition(struct cpufreq_policy *policy,
 
  freqs->flags = cpufreq_driver->flags;
  pr_debug("notification %u of frequency transition to %u kHz\n",
-  state, freqs->new);
+   state, freqs->new);
 
  switch (state) {
 
@@ -295,9 +295,8 @@ static void __cpufreq_notify_transition(struct cpufreq_policy *policy,
   if (!(cpufreq_driver->flags & CPUFREQ_CONST_LOOPS)) {
    if ((policy) && (policy->cpu == freqs->cpu) &&
        (policy->cur) && (policy->cur != freqs->old)) {
-    pr_debug("Warning: CPU frequency is"
-     " %u, cpufreq assumed %u kHz.\n",
-     freqs->old, policy->cur);
+    pr_debug("Warning: CPU frequency is %u, cpufreq assumed %u kHz\n",
+      freqs->old, policy->cur);
     freqs->old = policy->cur;
    }
   }
@@ -308,8 +307,8 @@ static void __cpufreq_notify_transition(struct cpufreq_policy *policy,
 
  case CPUFREQ_POSTCHANGE:
   adjust_jiffies(CPUFREQ_POSTCHANGE, freqs);
-  pr_debug("FREQ: %lu - CPU: %lu", (unsigned long)freqs->new,
-   (unsigned long)freqs->cpu);
+  pr_debug("FREQ: %lu - CPU: %lu\n",
+    (unsigned long)freqs->new, (unsigned long)freqs->cpu);
   trace_cpu_frequency(freqs->new, freqs->cpu);
   srcu_notifier_call_chain(&cpufreq_transition_notifier_list,
     CPUFREQ_POSTCHANGE, freqs);
@@ -369,13 +368,13 @@ static ssize_t store_boost(struct kobject *kobj, struct attribute *attr,
   return -EINVAL;
 
  if (cpufreq_boost_trigger_state(enable)) {
-  pr_err("%s: Cannot %s BOOST!\n", __func__,
-         enable ? "enable" : "disable");
+  pr_err("%s: Cannot %s BOOST!\n",
+         __func__, enable ? "enable" : "disable");
   return -EINVAL;
  }
 
- pr_debug("%s: cpufreq BOOST %s\n", __func__,
-   enable ? "enabled" : "disabled");
+ pr_debug("%s: cpufreq BOOST %s\n",
+   __func__, enable ? "enabled" : "disabled");
 
  return count;
 }
@@ -1262,7 +1261,7 @@ static int cpufreq_nominate_new_policy_cpu(struct cpufreq_policy *policy,
  sysfs_remove_link(&cpu_dev->kobj, "cpufreq");
  ret = kobject_move(&policy->kobj, &cpu_dev->kobj);
  if (ret) {
-  pr_err("%s: Failed to move kobj: %d", __func__, ret);
+  pr_err("%s: Failed to move kobj: %d\n", __func__, ret);
 
   down_write(&policy->rwsem);
   cpumask_set_cpu(old_cpu, policy->cpus);
@@ -1328,7 +1327,7 @@ static int __cpufreq_remove_dev_prepare(struct device *dev,
 
    if (!frozen) {
     pr_debug("%s: policy Kobject moved to cpu: %d from: %d\n",
-      __func__, new_cpu, cpu);
+      __func__, new_cpu, cpu);
    }
   }
  }
@@ -1368,7 +1367,7 @@ static int __cpufreq_remove_dev_finish(struct device *dev,
      CPUFREQ_GOV_POLICY_EXIT);
    if (ret) {
     pr_err("%s: Failed to exit governor\n",
-      __func__);
+           __func__);
     return ret;
    }
   }
@@ -1402,7 +1401,7 @@ static int __cpufreq_remove_dev_finish(struct device *dev,
    if ((ret = __cpufreq_governor(policy, CPUFREQ_GOV_START)) ||
      (ret = __cpufreq_governor(policy, CPUFREQ_GOV_LIMITS))) {
     pr_err("%s: Failed to start governor\n",
-      __func__);
+           __func__);
     return ret;
    }
   }
@@ -1459,8 +1458,8 @@ static void cpufreq_out_of_sync(unsigned int cpu, unsigned int old_freq,
  struct cpufreq_freqs freqs;
  unsigned long flags;
 
- pr_debug("Warning: CPU frequency out of sync: cpufreq and timing "
-        "core thinks of %u, is %u kHz.\n", old_freq, new_freq);
+ pr_debug("Warning: CPU frequency out of sync: cpufreq and timing core thinks of %u, is %u kHz\n",
+   old_freq, new_freq);
 
  freqs.old = old_freq;
  freqs.new = new_freq;
@@ -1784,7 +1783,7 @@ int __cpufreq_driver_target(struct cpufreq_policy *policy,
   target_freq = policy->min;
 
  pr_debug("target for CPU %u: %u kHz, relation %u, requested %u kHz\n",
-   policy->cpu, target_freq, relation, old_target_freq);
+   policy->cpu, target_freq, relation, old_target_freq);
 
  /*
   * This might look like a redundant call as we are checking it again
@@ -1829,8 +1828,7 @@ int __cpufreq_driver_target(struct cpufreq_policy *policy,
    freqs.flags = 0;
 
    pr_debug("%s: cpu: %d, oldfreq: %u, new freq: %u\n",
-     __func__, policy->cpu, freqs.old,
-     freqs.new);
+     __func__, policy->cpu, freqs.old, freqs.new);
 
    cpufreq_notify_transition(policy, &freqs,
      CPUFREQ_PRECHANGE);
@@ -1839,7 +1837,7 @@ int __cpufreq_driver_target(struct cpufreq_policy *policy,
   retval = cpufreq_driver->target_index(policy, index);
   if (retval)
    pr_err("%s: Failed to change cpu frequency: %d\n",
-     __func__, retval);
+          __func__, retval);
 
   if (notify)
    cpufreq_notify_post_transition(policy, &freqs, retval);
@@ -1895,11 +1893,8 @@ static int __cpufreq_governor(struct cpufreq_policy *policy,
   if (!gov)
    return -EINVAL;
   else {
-   printk(KERN_WARNING "%s governor failed, too long"
-          " transition latency of HW, fallback"
-          " to %s governor\n",
-          policy->governor->name,
-          gov->name);
+   pr_warn("%s governor failed, too long transition latency of HW, fallback to %s governor\n",
+    policy->governor->name, gov->name);
    policy->governor = gov;
   }
  }
@@ -1909,7 +1904,7 @@ static int __cpufreq_governor(struct cpufreq_policy *policy,
    return -EINVAL;
 
  pr_debug("__cpufreq_governor for CPU %u, event %u\n",
-      policy->cpu, event);
+   policy->cpu, event);
 
  mutex_lock(&cpufreq_governor_lock);
  if ((policy->governor_enabled && event == CPUFREQ_GOV_START)
@@ -2037,8 +2032,8 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
  struct cpufreq_governor *old_gov;
  int ret;
 
- pr_debug("setting new policy for CPU %u: %u - %u kHz\n", new_policy->cpu,
-  new_policy->min, new_policy->max);
+ pr_debug("setting new policy for CPU %u: %u - %u kHz\n",
+   new_policy->cpu, new_policy->min, new_policy->max);
 
  memcpy(&new_policy->cpuinfo, &policy->cpuinfo,
     sizeof(struct cpufreq_cpuinfo));
@@ -2075,7 +2070,7 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
  policy->max = new_policy->max;
 
  pr_debug("new min and max freqs are %u - %u kHz\n",
-     policy->min, policy->max);
+   policy->min, policy->max);
 
  if (cpufreq_driver->setpolicy) {
   policy->policy = new_policy->policy;
@@ -2163,7 +2158,7 @@ int cpufreq_update_policy(unsigned int cpu)
   }
 
   if (!policy->cur) {
-   pr_debug("Driver did not initialize current freq");
+   pr_debug("Driver did not initialize current freq\n");
    policy->cur = new_policy.cur;
   } else {
    if (policy->cur != new_policy.cur && has_target())
@@ -2265,8 +2260,8 @@ int cpufreq_boost_trigger_state(int state)
   cpufreq_driver->boost_enabled = !state;
   write_unlock_irqrestore(&cpufreq_driver_lock, flags);
 
-  pr_err("%s: Cannot %s BOOST\n", __func__,
-         state ? "enable" : "disable");
+  pr_err("%s: Cannot %s BOOST\n",
+         __func__, state ? "enable" : "disable");
  }
 
  return ret;
@@ -2338,7 +2333,7 @@ int cpufreq_register_driver(struct cpufreq_driver *driver_data)
   ret = cpufreq_sysfs_create_file(&boost.attr);
   if (ret) {
    pr_err("%s: cannot register global BOOST sysfs file\n",
-    __func__);
+          __func__);
    goto err_null_driver;
   }
  }
@@ -2361,7 +2356,7 @@ int cpufreq_register_driver(struct cpufreq_driver *driver_data)
   /* if all ->init() calls failed, unregister */
   if (ret) {
    pr_debug("no CPU initialized for driver %s\n",
-       driver_data->name);
+     driver_data->name);
    goto err_if_unreg;
   }
  }
-- 
1.7.1