From 2ab755a86c1a5b6d90d28ae92676abf39c4e7546 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:54 -0400
Subject: [tools] perf/probe: Improve an error message of perf probe --vars mode

Message-id: <1410181752-25631-290-git-send-email-jolsa@redhat.com>
Patchwork-id: 91954
O-Subject: [PATCH RHEL7.1 BZ1134356 289/307] perf probe: Improve an error message of perf probe --vars mode
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 69e96eaa4fef04ad543eda3eab787dbae99d8912
Author: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
Date: Fri Jun 6 07:13:59 2014 +0000

description
===========
Fix an error message when failed to find given address in --vars
mode.

Without this fix, perf probe -V doesn't show the final "Error"
message if it fails to find given source line. Moreover, it
tells it fails to find "variables" instead of the source line.
  -----
  # perf probe -V foo@bar
  Failed to find variables at foo@bar (0)
  -----
The result also shows mysterious error code. Actually the error
returns 0 or -ENOENT means that it just fails to find the address
of given source line. (0 means there is no matching address,
and -ENOENT means there is an entry(DIE) but it has no instance,
e.g. an empty inlined function)

This fixes it to show what happened and the final error message
as below.
  -----
  # perf probe -V foo@bar
  Failed to find the address of foo@bar
    Error: Failed to show vars.
  -----
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/probe-event.c b/tools/perf/util/probe-event.c
index 0d1542f..44c7141 100644
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@ -721,9 +721,14 @@ static int show_available_vars_at(struct debuginfo *dinfo,
  ret = debuginfo__find_available_vars_at(dinfo, pev, &vls,
       max_vls, externs);
  if (ret <= 0) {
-  pr_err("Failed to find variables at %s (%d)\n", buf, ret);
+  if (ret == 0 || ret == -ENOENT) {
+   pr_err("Failed to find the address of %s\n", buf);
+   ret = -ENOENT;
+  } else
+   pr_warning("Debuginfo analysis failed.\n");
   goto end;
  }
+
  /* Some variables are found */
  fprintf(stdout, "Available variables at %s\n", buf);
  for (i = 0; i < ret; i++) {
diff --git a/tools/perf/util/probe-finder.c b/tools/perf/util/probe-finder.c
index ce8faf4..98e3047 100644
--- a/tools/perf/util/probe-finder.c
+++ b/tools/perf/util/probe-finder.c
@@ -1280,7 +1280,11 @@ out:
  return ret;
 }
 
-/* Find available variables at given probe point */
+/*
+ * Find available variables at given probe point
+ * Return the number of found probe points. Return 0 if there is no
+ * matched probe point. Return <0 if an error occurs.
+ */
 int debuginfo__find_available_vars_at(struct debuginfo *dbg,
           struct perf_probe_event *pev,
           struct variable_list **vls,
-- 
1.7.1