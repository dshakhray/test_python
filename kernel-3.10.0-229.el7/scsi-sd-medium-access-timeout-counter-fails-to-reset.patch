From b19a64b66186ce0f81da355aea1740a6d57e0b5f Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Wed, 20 Aug 2014 18:58:48 -0400
Subject: [scsi] sd: medium access timeout counter fails to reset

Message-id: <1408561176-18133-10-git-send-email-emilne@redhat.com>
Patchwork-id: 88432
O-Subject: [RHEL7.1 PATCH e-stor 09/57] sd: medium access timeout counter fails to reset
Bugzilla: 1101729
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Ewan D. Milne" <emilne@redhat.com>

upstream commit 2a863ba8f6f5d72e4905a91c6281d575809fed5b

Tested by Ewan D. Milne and Barry Donahue with a combination
of manual and automated testing.  No issues seen.

upstream commit 2a863ba8f6f5d72e4905a91c6281d575809fed5b
Author: David Jeffery <djeffery@redhat.com>
Date:   Thu Apr 10 11:08:30 2014 -0400

    sd: medium access timeout counter fails to reset

    There is an error with the medium access timeout feature of the sd driver. The
    sdkp->medium_access_timed_out value is reset to zero in sd_done() in the wrong
    place.  Currently it is reset to zero only when a command returns sense data.
    This can result in cases where the medium access check falsely triggers from
    timed out commands which are hours or days apart.

    For example, an I/O command times out and is aborted.  It then retries and
    succeeds.  But with no sense data generated and returned, the
    medium_access_timed_out value is not reset.  If no sd command returns sense
    data, then the next command to time out (however far in time from the first
    failure) will trigger the medium access timeout and put the device offline.

    The resetting of sdkp->medium_access_timed_out should occur before the check
    for sense data.

    To reproduce using scsi_debug, use SCSI_DEBUG_OPT_TIMEOUT or
    SCSI_DEBUG_OPT_MAC_TIMEOUT to force an I/O command to timeout.  Then, remove
    the opt value so the I/O will succeed on retry.  Perform more I/O as desired.
    Finally, repeat the process to make a new I/O command time out.  Without the
    patch, the device will be marked offline even though many I/O commands have
    succeeded between the 2 instances of timed out commands.

    Signed-off-by: David Jeffery <djeffery@redhat.com>
    Reviewed-by:  Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

Signed-off-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 9a2a2f4..ccbfde3 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -1658,12 +1658,12 @@ static int sd_done(struct scsi_cmnd *SCpnt)
          sshdr.ascq));
  }
 #endif
+ sdkp->medium_access_timed_out = 0;
+
  if (driver_byte(result) != DRIVER_SENSE &&
      (!sense_valid || sense_deferred))
   goto out;
 
- sdkp->medium_access_timed_out = 0;
-
  switch (sshdr.sense_key) {
  case HARDWARE_ERROR:
  case MEDIUM_ERROR:
-- 
1.7.1