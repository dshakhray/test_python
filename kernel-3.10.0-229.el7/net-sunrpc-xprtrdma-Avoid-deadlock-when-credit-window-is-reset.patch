From 461a614f1bcccc2b63feeaa81a1dbf048bdae2bc Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 26 Jun 2014 15:54:31 -0400
Subject: [net] sunrpc/xprtrdma: Avoid deadlock when credit window is reset

Message-id: <1403798077-28799-73-git-send-email-steved@redhat.com>
Patchwork-id: 84932
O-Subject: [RHEL7.1 PATCH 72/78] xprtrdma: Avoid deadlock when credit window is reset
Bugzilla: 1113248
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Chuck Lever <chuck.lever@oracle.com>

Update the cwnd while processing the server's reply.  Otherwise the
next task on the xprt_sending queue is still subject to the old
credit window. Currently, no task is awoken if the old congestion
window is still exceeded, even if the new window is larger, and a
deadlock results.

This is an issue during a transport reconnect. Servers don't
normally shrink the credit window, but the client does reset it to
1 when reconnecting so the server can safely grow it again.

As a minor optimization, remove the hack of grabbing the initial
cwnd size (which happens to be RPC_CWNDSCALE) and using that value
as the congestion scaling factor. The scaling value is invariant,
and we are better off without the multiplication operation.

Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
Upstream Id: e7ce710a8802351bd4118c5d6136c1d850f67cf9
Bugzilla: 1113248
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/sunrpc/xprtrdma/rpc_rdma.c b/net/sunrpc/xprtrdma/rpc_rdma.c
index ac65b0c..77b84cf 100644
--- a/net/sunrpc/xprtrdma/rpc_rdma.c
+++ b/net/sunrpc/xprtrdma/rpc_rdma.c
@@ -716,6 +716,7 @@ rpcrdma_reply_handler(struct rpcrdma_rep *rep)
  struct rpcrdma_xprt *r_xprt = rpcx_to_rdmax(xprt);
  __be32 *iptr;
  int rdmalen, status;
+ unsigned long cwnd;
 
  /* Check status. If bad, signal disconnect and return rep to pool */
  if (rep->rr_len == ~0U) {
@@ -845,6 +846,11 @@ badheader:
   break;
  }
 
+ cwnd = xprt->cwnd;
+ xprt->cwnd = atomic_read(&r_xprt->rx_buf.rb_credits) << RPC_CWNDSHIFT;
+ if (xprt->cwnd > cwnd)
+  xprt_release_rqst_cong(rqst->rq_task);
+
  dprintk("RPC:       %s: xprt_complete_rqst(0x%p, 0x%p, %d)\n",
    __func__, xprt, rqst, status);
  xprt_complete_rqst(rqst->rq_task, status);
diff --git a/net/sunrpc/xprtrdma/transport.c b/net/sunrpc/xprtrdma/transport.c
index 6b84d7d..187894b 100644
--- a/net/sunrpc/xprtrdma/transport.c
+++ b/net/sunrpc/xprtrdma/transport.c
@@ -448,23 +448,6 @@ xprt_rdma_connect(struct rpc_xprt *xprt, struct rpc_task *task)
  }
 }
 
-static int
-xprt_rdma_reserve_xprt(struct rpc_xprt *xprt, struct rpc_task *task)
-{
- struct rpcrdma_xprt *r_xprt = rpcx_to_rdmax(xprt);
- int credits = atomic_read(&r_xprt->rx_buf.rb_credits);
-
- /* == RPC_CWNDSCALE @ init, but *after* setup */
- if (r_xprt->rx_buf.rb_cwndscale == 0UL) {
-  r_xprt->rx_buf.rb_cwndscale = xprt->cwnd;
-  dprintk("RPC:       %s: cwndscale %lu\n", __func__,
-   r_xprt->rx_buf.rb_cwndscale);
-  BUG_ON(r_xprt->rx_buf.rb_cwndscale <= 0);
- }
- xprt->cwnd = credits * r_xprt->rx_buf.rb_cwndscale;
- return xprt_reserve_xprt_cong(xprt, task);
-}
-
 /*
  * The RDMA allocate/free functions need the task structure as a place
  * to hide the struct rpcrdma_req, which is necessary for the actual send/recv
@@ -686,7 +669,7 @@ static void xprt_rdma_print_stats(struct rpc_xprt *xprt, struct seq_file *seq)
  */
 
 static struct rpc_xprt_ops xprt_rdma_procs = {
- .reserve_xprt  = xprt_rdma_reserve_xprt,
+ .reserve_xprt  = xprt_reserve_xprt_cong,
  .release_xprt  = xprt_release_xprt_cong, /* sunrpc/xprt.c */
  .alloc_slot  = xprt_alloc_slot,
  .release_request = xprt_release_rqst_cong,       /* ditto */
diff --git a/net/sunrpc/xprtrdma/xprt_rdma.h b/net/sunrpc/xprtrdma/xprt_rdma.h
index 0c3b88e..89e7cd4 100644
--- a/net/sunrpc/xprtrdma/xprt_rdma.h
+++ b/net/sunrpc/xprtrdma/xprt_rdma.h
@@ -212,7 +212,6 @@ struct rpcrdma_req {
 struct rpcrdma_buffer {
  spinlock_t rb_lock; /* protects indexes */
  atomic_t rb_credits; /* most recent server credits */
- unsigned long rb_cwndscale; /* cached framework rpc_cwndscale */
  int  rb_max_requests;/* client max requests */
  struct list_head rb_mws; /* optional memory windows/fmrs/frmrs */
  int  rb_send_index;
-- 
1.7.1