From fdbab220b55b9a727ed43bb7d354c30dcb3b84c0 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 28 Aug 2014 03:05:37 -0400
Subject: [acpi] hotplug: Move container-specific code out of the core

Message-id: <20140828030537.2117.99559.stgit@gir.stowe>
Patchwork-id: 89308
O-Subject: [RHEL7.1 PATCH 20/30] ACPI / hotplug: Move container-specific code out of the core
Bugzilla: 1128632
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1128632
Upstream Status: 46394fd017c0615982a3d29d45ced14bea9c526d

commit 46394fd017c0615982a3d29d45ced14bea9c526d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 22 21:55:32 2013 +0100

    ACPI / hotplug: Move container-specific code out of the core

    Move container-specific uevents from the core hotplug code to the
    container scan handler's .attach() and .detach() callbacks.

    This way the core will not have to special-case containers and
    the uevents will be guaranteed to happen every time a container
    is either scanned or trimmed as appropriate.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/container.c b/drivers/acpi/container.c
index e231516..83d232c 100644
--- a/drivers/acpi/container.c
+++ b/drivers/acpi/container.c
@@ -44,19 +44,24 @@ static const struct acpi_device_id container_device_ids[] = {
  {"", 0},
 };
 
-static int container_device_attach(struct acpi_device *device,
+static int container_device_attach(struct acpi_device *adev,
        const struct acpi_device_id *not_used)
 {
- /* This is necessary for container hotplug to work. */
+ kobject_uevent(&adev->dev.kobj, KOBJ_ONLINE);
  return 1;
 }
 
+static void container_device_detach(struct acpi_device *adev)
+{
+ kobject_uevent(&adev->dev.kobj, KOBJ_OFFLINE);
+}
+
 static struct acpi_scan_handler container_handler = {
  .ids = container_device_ids,
  .attach = container_device_attach,
+ .detach = container_device_detach,
  .hotplug = {
   .enabled = true,
-  .mode = AHM_CONTAINER,
  },
 };
 
diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index de59f9d..1979696 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -206,9 +206,6 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
  acpi_status status;
  unsigned long long sta;
 
- if (device->handler && device->handler->hotplug.mode == AHM_CONTAINER)
-  kobject_uevent(&device->dev.kobj, KOBJ_OFFLINE);
-
  /*
   * Carry out two passes here and ignore errors in the first pass,
   * because if the devices in question are memory blocks and
@@ -288,10 +285,7 @@ static int acpi_scan_device_check(struct acpi_device *adev)
   dev_warn(&adev->dev, "Namespace scan failure\n");
   return error;
  }
- if (adev->handler) {
-  if (adev->handler->hotplug.mode == AHM_CONTAINER)
-   kobject_uevent(&adev->dev.kobj, KOBJ_ONLINE);
- } else {
+ if (!adev->handler) {
   dev_warn(&adev->dev, "Enumeration failure\n");
   return -ENODEV;
  }
diff --git a/include/acpi/acpi_bus.h b/include/acpi/acpi_bus.h
index fe169f9..8b44c71 100644
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@ -91,16 +91,9 @@ struct acpi_device;
  * -----------------
  */
 
-enum acpi_hotplug_mode {
- AHM_GENERIC = 0,
- AHM_CONTAINER,
- AHM_COUNT
-};
-
 struct acpi_hotplug_profile {
  struct kobject kobj;
  bool enabled:1;
- enum acpi_hotplug_mode mode;
  int (*scan_dependent)(struct acpi_device *adev);
 };
 
-- 
1.7.1