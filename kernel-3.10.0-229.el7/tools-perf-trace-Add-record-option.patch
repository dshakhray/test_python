From e553a4505ce0c162dd9991d1243248201da4d51e Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:25:24 -0400
Subject: [tools] perf/trace: Add record option

Message-id: <1408462094-14194-156-git-send-email-jolsa@redhat.com>
Patchwork-id: 88242
O-Subject: [PATCH RHEL7.1 BZ1131394 155/325] perf trace: Add record option
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit 5e2485b1a2813faa6b80007c653f8bbbed9457ee
Author: David Ahern <dsahern@gmail.com>
Date: Sat Sep 28 13:13:01 2013 -0600

description
===========
The record option is a convience alias to include the -e raw_syscalls:*
argument to perf-record. All other options are passed to perf-record's
handler. Resulting data file can be analyzed by perf-trace -i.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/Documentation/perf-trace.txt b/tools/perf/Documentation/perf-trace.txt
index 7f70d36..1a22486 100644
--- a/tools/perf/Documentation/perf-trace.txt
+++ b/tools/perf/Documentation/perf-trace.txt
@@ -9,6 +9,7 @@ SYNOPSIS
 --------
 [verse]
 'perf trace'
+'perf trace record'
 
 DESCRIPTION
 -----------
@@ -16,9 +17,14 @@ This command will show the events associated with the target, initially
 syscalls, but other system events like pagefaults, task lifetime events,
 scheduling events, etc.
 
-Initially this is a live mode only tool, but eventually will work with
-perf.data files like the other tools, allowing a detached 'record' from
-analysis phases.
+This is a live mode tool in addition to working with perf.data files like
+the other perf tools. Files can be generated using the 'perf record' command
+but the session needs to include the raw_syscalls events (-e 'raw_syscalls:*').
+Alernatively, the 'perf trace record' can be used as a shortcut to
+automatically include the raw_syscalls events when writing events to a file.
+
+The following options apply to perf trace; options to perf trace record are
+found in the perf record man page.
 
 OPTIONS
 -------
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index d5a704e..887ff88 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -1501,6 +1501,33 @@ static int parse_target_str(struct trace *trace)
  return 0;
 }
 
+static int trace__record(int argc, const char **argv)
+{
+ unsigned int rec_argc, i, j;
+ const char **rec_argv;
+ const char * const record_args[] = {
+  "record",
+  "-R",
+  "-m", "1024",
+  "-c", "1",
+  "-e", "raw_syscalls:sys_enter,raw_syscalls:sys_exit",
+ };
+
+ rec_argc = ARRAY_SIZE(record_args) + argc;
+ rec_argv = calloc(rec_argc + 1, sizeof(char *));
+
+ if (rec_argv == NULL)
+  return -ENOMEM;
+
+ for (i = 0; i < ARRAY_SIZE(record_args); i++)
+  rec_argv[i] = record_args[i];
+
+ for (j = 0; j < (unsigned int)argc; j++, i++)
+  rec_argv[i] = argv[j];
+
+ return cmd_record(i, rec_argv, NULL);
+}
+
 static int trace__run(struct trace *trace, int argc, const char **argv)
 {
  struct perf_evlist *evlist = perf_evlist__new();
@@ -1790,6 +1817,8 @@ int cmd_trace(int argc, const char **argv, const char *prefix __maybe_unused)
  const char * const trace_usage[] = {
   "perf trace [<options>] [<command>]",
   "perf trace [<options>] -- <command> [<options>]",
+  "perf trace record [<options>] [<command>]",
+  "perf trace record [<options>] -- <command> [<options>]",
   NULL
  };
  struct trace trace = {
@@ -1846,6 +1875,9 @@ int cmd_trace(int argc, const char **argv, const char *prefix __maybe_unused)
  int err;
  char bf[BUFSIZ];
 
+ if ((argc > 1) && (strcmp(argv[1], "record") == 0))
+  return trace__record(argc-2, &argv[2]);
+
  argc = parse_options(argc, argv, trace_options, trace_usage, 0);
 
  if (output_name != NULL) {
-- 
1.7.1