From 9be00da6a1d47614b737165d880867e97da6a894 Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Mon, 1 Sep 2014 20:15:34 -0400
Subject: [powerpc] perf/hv-24x7: Catalog version number is be64, not be32

Message-id: <1409602534-23951-16-git-send-email-gduarte@redhat.com>
Patchwork-id: 90124
O-Subject: [RHEL7.1 PATCH BZ 947159 15/15] powerpc/perf/hv-24x7: Catalog version number is be64, not be32
Bugzilla: 947159
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=947159
Upstream Status: bbad3e50e8ed2d48294c141e687d411430cacbcf

commit bbad3e50e8ed2d48294c141e687d411430cacbcf
Author: Cody P Schafer <cody@linux.vnet.ibm.com>
Date:   Tue Apr 15 10:10:55 2014 -0700

    powerpc/perf/hv-24x7: Catalog version number is be64, not be32

    The catalog version number was changed from a be32 (with proceeding
    32bits of padding) to a be64, update the code to treat it as a be64

    Signed-off-by: Cody P Schafer <cody@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/perf/hv-24x7.c b/arch/powerpc/perf/hv-24x7.c
index 95a67f8..e0766b8 100644
--- a/arch/powerpc/perf/hv-24x7.c
+++ b/arch/powerpc/perf/hv-24x7.c
@@ -171,7 +171,7 @@ static unsigned long h_get_24x7_catalog_page_(unsigned long phys_4096,
 }
 
 static unsigned long h_get_24x7_catalog_page(char page[],
-          u32 version, u32 index)
+          u64 version, u32 index)
 {
  return h_get_24x7_catalog_page_(virt_to_phys(page),
      version, index);
@@ -185,7 +185,7 @@ static ssize_t catalog_read(struct file *filp, struct kobject *kobj,
  ssize_t ret = 0;
  size_t catalog_len = 0, catalog_page_len = 0, page_count = 0;
  loff_t page_offset = 0;
- uint32_t catalog_version_num = 0;
+ uint64_t catalog_version_num = 0;
  void *page = kmem_cache_alloc(hv_page_cache, GFP_USER);
  struct hv_24x7_catalog_page_0 *page_0 = page;
  if (!page)
@@ -197,7 +197,7 @@ static ssize_t catalog_read(struct file *filp, struct kobject *kobj,
   goto e_free;
  }
 
- catalog_version_num = be32_to_cpu(page_0->version);
+ catalog_version_num = be64_to_cpu(page_0->version);
  catalog_page_len = be32_to_cpu(page_0->length);
  catalog_len = catalog_page_len * 4096;
 
@@ -220,8 +220,9 @@ static ssize_t catalog_read(struct file *filp, struct kobject *kobj,
     page, 4096, page_offset * 4096);
 e_free:
  if (hret)
-  pr_err("h_get_24x7_catalog_page(ver=%d, page=%lld) failed: rc=%ld\n",
-    catalog_version_num, page_offset, hret);
+  pr_err("h_get_24x7_catalog_page(ver=%lld, page=%lld) failed:"
+         " rc=%ld\n",
+         catalog_version_num, page_offset, hret);
  kfree(page);
 
  pr_devel("catalog_read: offset=%lld(%lld) count=%zu(%zu) catalog_len=%zu(%zu) => %zd\n",
@@ -255,7 +256,7 @@ e_free:        \
 static DEVICE_ATTR_RO(_name)
 
 PAGE_0_ATTR(catalog_version, "%lld\n",
-  (unsigned long long)be32_to_cpu(page_0->version));
+  (unsigned long long)be64_to_cpu(page_0->version));
 PAGE_0_ATTR(catalog_len, "%lld\n",
   (unsigned long long)be32_to_cpu(page_0->length) * 4096);
 static BIN_ATTR_RO(catalog, 0/* real length varies */);
-- 
1.7.1