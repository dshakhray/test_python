From 11a55b7feff2da5b210cf0c9f44fc492f6ba8043 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:28:09 -0400
Subject: [tools] perf: Tag thread comm as overriden

Message-id: <1408462094-14194-321-git-send-email-jolsa@redhat.com>
Patchwork-id: 88292
O-Subject: [PATCH RHEL7.1 BZ1131394 320/325] perf tools: Tag thread comm as overriden
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit a5285ad9e30fd90b88a11adcab97bd4c3ffe44eb
Author: Frederic Weisbecker <fweisbec@gmail.com>
Date: Sat Nov 16 02:02:09 2013 +0100

description
===========
The problem is that when a thread overrides its default ":%pid" comm, we
forget to tag the thread comm as overriden. Hence, this overriden comm
is not inherited on future forks. Fix it.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/thread.c b/tools/perf/util/thread.c
index cd8e2f5..49eaf1d 100644
--- a/tools/perf/util/thread.c
+++ b/tools/perf/util/thread.c
@@ -70,14 +70,13 @@ int thread__set_comm(struct thread *thread, const char *str, u64 timestamp)
  /* Override latest entry if it had no specific time coverage */
  if (!curr->start) {
   comm__override(curr, str, timestamp);
-  return 0;
+ } else {
+  new = comm__new(str, timestamp);
+  if (!new)
+   return -ENOMEM;
+  list_add(&new->list, &thread->comm_list);
  }
 
- new = comm__new(str, timestamp);
- if (!new)
-  return -ENOMEM;
-
- list_add(&new->list, &thread->comm_list);
  thread->comm_set = true;
 
  return 0;
-- 
1.7.1