From 985e47b1f5ebd69763bbb790e28c4a0e152e0802 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:18:23 -0400
Subject: [fs] nfsd4: remove nfs4_acl_new

Message-id: <1410898849-22126-20-git-send-email-bfields@redhat.com>
Patchwork-id: 95702
O-Subject: [Patch RHEL7 019/165] nfsd4: remove nfs4_acl_new
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

This is a not-that-useful kmalloc wrapper.  And I'd like one of the
callers to actually use something other than kmalloc.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: bcaab953b1d3790c724a211f2452b574fd49a7ce
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/acl.h b/fs/nfsd/acl.h
index 4ef31d3..051ffcb 100644
--- a/fs/nfsd/acl.h
+++ b/fs/nfsd/acl.h
@@ -45,7 +45,7 @@
 #define NFS4_ACL_MAX ((PAGE_SIZE - sizeof(struct nfs4_acl)) \
    / sizeof(struct nfs4_ace))
 
-struct nfs4_acl *nfs4_acl_new(int);
+int nfs4_acl_bytes(int entries);
 int nfs4_acl_get_whotype(char *, u32);
 __be32 nfs4_acl_write_who(struct xdr_stream *xdr, int who);
 
diff --git a/fs/nfsd/nfs4acl.c b/fs/nfsd/nfs4acl.c
index 69bca1f..aa0310c 100644
--- a/fs/nfsd/nfs4acl.c
+++ b/fs/nfsd/nfs4acl.c
@@ -149,9 +149,10 @@ nfs4_acl_posix_to_nfsv4(struct posix_acl *pacl, struct posix_acl *dpacl,
  }
 
  /* Allocate for worst case: one (deny, allow) pair each: */
- acl = nfs4_acl_new(size);
+ acl = kmalloc(nfs4_acl_bytes(size), GFP_KERNEL);
  if (acl == NULL)
   return ERR_PTR(-ENOMEM);
+ acl->naces = 0;
 
  if (pacl)
   _posix_to_nfsv4_one(pacl, acl, flags & ~NFS4_ACL_TYPE_DEFAULT);
@@ -806,16 +807,13 @@ ace2type(struct nfs4_ace *ace)
 EXPORT_SYMBOL(nfs4_acl_posix_to_nfsv4);
 EXPORT_SYMBOL(nfs4_acl_nfsv4_to_posix);
 
-struct nfs4_acl *
-nfs4_acl_new(int n)
+/*
+ * return the size of the struct nfs4_acl required to represent an acl
+ * with @entries entries.
+ */
+int nfs4_acl_bytes(int entries)
 {
- struct nfs4_acl *acl;
-
- acl = kmalloc(sizeof(*acl) + n*sizeof(struct nfs4_ace), GFP_KERNEL);
- if (acl == NULL)
-  return NULL;
- acl->naces = 0;
- return acl;
+ return sizeof(struct nfs4_acl) + entries * sizeof(struct nfs4_ace);
 }
 
 static struct {
@@ -872,6 +870,5 @@ __be32 nfs4_acl_write_who(struct xdr_stream *xdr, int who)
  return nfserr_serverfault;
 }
 
-EXPORT_SYMBOL(nfs4_acl_new);
 EXPORT_SYMBOL(nfs4_acl_get_whotype);
 EXPORT_SYMBOL(nfs4_acl_write_who);
diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 6963876..83c451a 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -309,7 +309,7 @@ nfsd4_decode_fattr(struct nfsd4_compoundargs *argp, u32 *bmval,
   if (nace > NFS4_ACL_MAX)
    return nfserr_fbig;
 
-  *acl = nfs4_acl_new(nace);
+  *acl = kmalloc(nfs4_acl_bytes(nace), GFP_KERNEL);
   if (*acl == NULL)
    return nfserr_jukebox;
 
-- 
1.7.1