From da42112b4a074fb1252478af22f9548cc2df9398 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:35:00 -0400
Subject: [block] blk-mq: allow blk_mq_init_commands() to return failure

Message-id: <1402670238-13916-13-git-send-email-snitzer@redhat.com>
Patchwork-id: 83792
O-Subject: [RHEL7.1 PATCH 012/150] blk-mq: allow blk_mq_init_commands() to return failure
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 95363efde193079541cb379eb47140e9c4d355d5
Author: Jens Axboe <axboe@fb.com>
Date:   Fri Mar 14 10:43:15 2014 -0600

    blk-mq: allow blk_mq_init_commands() to return failure

    If drivers do dynamic allocation in the hardware command init
    path, then we need to be able to handle and return failures.

    And if they do allocations or mappings in the init command path,
    then we need a cleanup function to free up that space at exit
    time. So add blk_mq_free_commands() as the cleanup function.

    This is required for the mtip32xx driver conversion to blk-mq.

    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index bdafc95..b25f50f 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -992,8 +992,46 @@ static void blk_mq_hctx_notify(void *data, unsigned long action,
  blk_mq_put_ctx(ctx);
 }
 
-static void blk_mq_init_hw_commands(struct blk_mq_hw_ctx *hctx,
-        void (*init)(void *, struct blk_mq_hw_ctx *,
+static int blk_mq_init_hw_commands(struct blk_mq_hw_ctx *hctx,
+       int (*init)(void *, struct blk_mq_hw_ctx *,
+     struct request *, unsigned int),
+       void *data)
+{
+ unsigned int i;
+ int ret = 0;
+
+ for (i = 0; i < hctx->queue_depth; i++) {
+  struct request *rq = hctx->rqs[i];
+
+  ret = init(data, hctx, rq, i);
+  if (ret)
+   break;
+ }
+
+ return ret;
+}
+
+int blk_mq_init_commands(struct request_queue *q,
+    int (*init)(void *, struct blk_mq_hw_ctx *,
+     struct request *, unsigned int),
+    void *data)
+{
+ struct blk_mq_hw_ctx *hctx;
+ unsigned int i;
+ int ret = 0;
+
+ queue_for_each_hw_ctx(q, hctx, i) {
+  ret = blk_mq_init_hw_commands(hctx, init, data);
+  if (ret)
+   break;
+ }
+
+ return ret;
+}
+EXPORT_SYMBOL(blk_mq_init_commands);
+
+static void blk_mq_free_hw_commands(struct blk_mq_hw_ctx *hctx,
+        void (*free)(void *, struct blk_mq_hw_ctx *,
      struct request *, unsigned int),
         void *data)
 {
@@ -1002,12 +1040,12 @@ static void blk_mq_init_hw_commands(struct blk_mq_hw_ctx *hctx,
  for (i = 0; i < hctx->queue_depth; i++) {
   struct request *rq = hctx->rqs[i];
 
-  init(data, hctx, rq, i);
+  free(data, hctx, rq, i);
  }
 }
 
-void blk_mq_init_commands(struct request_queue *q,
-     void (*init)(void *, struct blk_mq_hw_ctx *,
+void blk_mq_free_commands(struct request_queue *q,
+     void (*free)(void *, struct blk_mq_hw_ctx *,
      struct request *, unsigned int),
      void *data)
 {
@@ -1015,9 +1053,9 @@ void blk_mq_init_commands(struct request_queue *q,
  unsigned int i;
 
  queue_for_each_hw_ctx(q, hctx, i)
-  blk_mq_init_hw_commands(hctx, init, data);
+  blk_mq_free_hw_commands(hctx, free, data);
 }
-EXPORT_SYMBOL(blk_mq_init_commands);
+EXPORT_SYMBOL(blk_mq_free_commands);
 
 static void blk_mq_free_rq_map(struct blk_mq_hw_ctx *hctx)
 {
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index d737caa..2a59679 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -117,7 +117,8 @@ enum {
 struct request_queue *blk_mq_init_queue(struct blk_mq_reg *, void *);
 int blk_mq_register_disk(struct gendisk *);
 void blk_mq_unregister_disk(struct gendisk *);
-void blk_mq_init_commands(struct request_queue *, void (*init)(void *data, struct blk_mq_hw_ctx *, struct request *, unsigned int), void *data);
+int blk_mq_init_commands(struct request_queue *, int (*init)(void *data, struct blk_mq_hw_ctx *, struct request *, unsigned int), void *data);
+void blk_mq_free_commands(struct request_queue *, void (*free)(void *data, struct blk_mq_hw_ctx *, struct request *, unsigned int), void *data);
 
 void blk_mq_flush_plug_list(struct blk_plug *plug, bool from_schedule);
 
-- 
1.7.1