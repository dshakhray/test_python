From de4889e72008585131fb690a03a06ec85cb9ab60 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:04:11 -0400
Subject: [fs] btrfs: ioctl, don't re-lock extent range when not necessary

Message-id: <1407179109-13714-365-git-send-email-sandeen@redhat.com>
Patchwork-id: 87367
O-Subject: [RHEL7.1 PATCH 364/422] Btrfs: ioctl, don't re-lock extent range when not necessary
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Filipe Manana <fdmanana@gmail.com>

commit ff5df9b884268d319d041934c6059c09733a4be2
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Fri May 30 17:56:24 2014 +0100

    Btrfs: ioctl, don't re-lock extent range when not necessary

    In ioctl.c:lock_extent_range(), after locking our target range, the
    ordered extent that btrfs_lookup_first_ordered_extent() returns us
    may not overlap our target range at all. In this case we would just
    unlock our target range, wait for any new ordered extents that overlap
    the range to complete, lock again the range and repeat all these steps
    until we don't get any ordered extent and the delalloc flag isn't set
    in the io tree for our target range.

    Therefore just stop if we get an ordered extent that doesn't overlap
    our target range and the dealalloc flag isn't set for the range in
    the inode's io tree.

    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index f0b4237..04ece8f 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -2700,10 +2700,15 @@ static inline void lock_extent_range(struct inode *inode, u64 off, u64 len)
   lock_extent(&BTRFS_I(inode)->io_tree, off, off + len - 1);
   ordered = btrfs_lookup_first_ordered_extent(inode,
            off + len - 1);
-  if (!ordered &&
+  if ((!ordered ||
+       ordered->file_offset + ordered->len <= off ||
+       ordered->file_offset >= off + len) &&
       !test_range_bit(&BTRFS_I(inode)->io_tree, off,
-        off + len - 1, EXTENT_DELALLOC, 0, NULL))
+        off + len - 1, EXTENT_DELALLOC, 0, NULL)) {
+   if (ordered)
+    btrfs_put_ordered_extent(ordered);
    break;
+  }
   unlock_extent(&BTRFS_I(inode)->io_tree, off, off + len - 1);
   if (ordered)
    btrfs_put_ordered_extent(ordered);
-- 
1.7.1