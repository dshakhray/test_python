From bc4ffef07665d30f56153dce58c55f07f8de2faf Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:52:22 -0400
Subject: [tools] perf/record: Rename --no-delay to --no-buffering

Message-id: <1408953210-26343-255-git-send-email-jolsa@redhat.com>
Patchwork-id: 89004
O-Subject: [PATCH RHEL7.1 BZ1133083 254/322] perf record: Rename --no-delay to --no-buffering
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 509051ea8427b2f73f065a1b0a1ef871727c9cb2
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Tue Jan 14 17:52:14 2014 -0300

description
===========
That is how the option summary describes it and so that we can free
--delay to replace --initial-delay and then be consistent with stat's
--delay equivalent option.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/Documentation/perf-record.txt b/tools/perf/Documentation/perf-record.txt
index 82bffac..3a35a85 100644
--- a/tools/perf/Documentation/perf-record.txt
+++ b/tools/perf/Documentation/perf-record.txt
@@ -68,8 +68,7 @@ OPTIONS
 --realtime=::
  Collect data with this RT SCHED_FIFO priority.
 
--D::
---no-delay::
+--no-buffering::
  Collect data without buffering.
 
 -c::
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 07d4cf8..78e790f 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -838,7 +838,7 @@ const struct option record_options[] = {
       "record events on existing thread id"),
  OPT_INTEGER('r', "realtime", &record.realtime_prio,
       "collect data with this RT SCHED_FIFO priority"),
- OPT_BOOLEAN('D', "no-delay", &record.opts.no_delay,
+ OPT_BOOLEAN(0, "no-buffering", &record.opts.no_buffering,
       "collect data without buffering"),
  OPT_BOOLEAN('R', "raw-samples", &record.opts.raw_samples,
       "collect raw sample records from all opened counters"),
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 4bd44ab..896f270 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -2258,7 +2258,7 @@ int cmd_trace(int argc, const char **argv, const char *prefix __maybe_unused)
    },
    .user_freq     = UINT_MAX,
    .user_interval = ULLONG_MAX,
-   .no_delay      = true,
+   .no_buffering  = true,
    .mmap_pages    = 1024,
   },
   .output = stdout,
diff --git a/tools/perf/perf.h b/tools/perf/perf.h
index af1ce6e..3c2f213 100644
--- a/tools/perf/perf.h
+++ b/tools/perf/perf.h
@@ -252,7 +252,7 @@ struct record_opts {
  int      call_graph;
  bool      group;
  bool      inherit_stat;
- bool      no_delay;
+ bool      no_buffering;
  bool      no_inherit;
  bool      no_inherit_set;
  bool      no_samples;
diff --git a/tools/perf/tests/open-syscall-tp-fields.c b/tools/perf/tests/open-syscall-tp-fields.c
index 5a016f6..c505ef2 100644
--- a/tools/perf/tests/open-syscall-tp-fields.c
+++ b/tools/perf/tests/open-syscall-tp-fields.c
@@ -11,10 +11,10 @@ int test__syscall_open_tp_fields(void)
    .uid = UINT_MAX,
    .uses_mmap = true,
   },
-  .no_delay   = true,
-  .freq     = 1,
-  .mmap_pages = 256,
-  .raw_samples = true,
+  .no_buffering = true,
+  .freq       = 1,
+  .mmap_pages   = 256,
+  .raw_samples  = true,
  };
  const char *filename = "/etc/passwd";
  int flags = O_RDONLY | O_DIRECTORY;
diff --git a/tools/perf/tests/perf-record.c b/tools/perf/tests/perf-record.c
index 39cc7c3..aca1a83 100644
--- a/tools/perf/tests/perf-record.c
+++ b/tools/perf/tests/perf-record.c
@@ -39,9 +39,9 @@ int test__PERF_RECORD(void)
    .uid = UINT_MAX,
    .uses_mmap = true,
   },
-  .no_delay   = true,
-  .freq     = 10,
-  .mmap_pages = 256,
+  .no_buffering = true,
+  .freq       = 10,
+  .mmap_pages   = 256,
  };
  cpu_set_t cpu_mask;
  size_t cpu_mask_size = sizeof(cpu_mask);
diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
index cd4630a..22e18a2 100644
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@ -627,7 +627,7 @@ void perf_evsel__config(struct perf_evsel *evsel, struct record_opts *opts)
  if (opts->sample_address)
   perf_evsel__set_sample_bit(evsel, DATA_SRC);
 
- if (opts->no_delay) {
+ if (opts->no_buffering) {
   attr->watermark = 0;
   attr->wakeup_events = 1;
  }
-- 
1.7.1