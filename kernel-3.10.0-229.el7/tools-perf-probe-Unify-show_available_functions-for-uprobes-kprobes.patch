From 02ae7e4fa7957a149afbea1d74adb2388345d140 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:05:11 -0400
Subject: [tools] perf/probe: Unify show_available_functions for uprobes/kprobes

Message-id: <1410181752-25631-67-git-send-email-jolsa@redhat.com>
Patchwork-id: 91748
O-Subject: [PATCH RHEL7.1 BZ1134356 066/307] perf probe: Unify show_available_functions for uprobes/kprobes
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 2df58634cd2ad33d7c7ca2e02e1a44db6c8cf68d
Author: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
Date: Thu Feb 6 05:32:11 2014 +0000

description
===========
Unify show_available_functions for uprobes/kprobes to cleanup and reduce
the code. This also improves error messages.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/util/probe-event.c b/tools/perf/util/probe-event.c
index f70fd08..ace3ba3 100644
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@ -2323,66 +2323,46 @@ static int filter_available_functions(struct map *map __maybe_unused,
  return 1;
 }
 
-static int __show_available_funcs(struct map *map)
-{
- if (map__load(map, filter_available_functions)) {
-  pr_err("Failed to load map.\n");
-  return -EINVAL;
- }
- if (!dso__sorted_by_name(map->dso, map->type))
-  dso__sort_by_name(map->dso, map->type);
-
- dso__fprintf_symbols_by_name(map->dso, map->type, stdout);
- return 0;
-}
-
-static int available_kernel_funcs(const char *module)
+int show_available_funcs(const char *target, struct strfilter *_filter,
+     bool user)
 {
  struct map *map;
  int ret;
 
- ret = init_symbol_maps(false);
+ ret = init_symbol_maps(user);
  if (ret < 0)
   return ret;
 
- map = kernel_get_module_map(module);
+ /* Get a symbol map */
+ if (user)
+  map = dso__new_map(target);
+ else
+  map = kernel_get_module_map(target);
  if (!map) {
-  pr_err("Failed to find %s map.\n", (module) ? : "kernel");
+  pr_err("Failed to get a map for %s\n", (target) ? : "kernel");
   return -EINVAL;
  }
- ret = __show_available_funcs(map);
- exit_symbol_maps();
-
- return ret;
-}
-
-static int available_user_funcs(const char *target)
-{
- struct map *map;
- int ret;
 
- ret = init_symbol_maps(true);
- if (ret < 0)
-  return ret;
-
- map = dso__new_map(target);
- ret = __show_available_funcs(map);
- dso__delete(map->dso);
- map__delete(map);
- exit_symbol_maps();
- return ret;
-}
-
-int show_available_funcs(const char *target, struct strfilter *_filter,
-     bool user)
-{
- setup_pager();
+ /* Load symbols with given filter */
  available_func_filter = _filter;
+ if (map__load(map, filter_available_functions)) {
+  pr_err("Failed to load symbols in %s\n", (target) ? : "kernel");
+  goto end;
+ }
+ if (!dso__sorted_by_name(map->dso, map->type))
+  dso__sort_by_name(map->dso, map->type);
 
- if (!user)
-  return available_kernel_funcs(target);
+ /* Show all (filtered) symbols */
+ setup_pager();
+ dso__fprintf_symbols_by_name(map->dso, map->type, stdout);
+end:
+ if (user) {
+  dso__delete(map->dso);
+  map__delete(map);
+ }
+ exit_symbol_maps();
 
- return available_user_funcs(target);
+ return ret;
 }
 
 /*
-- 
1.7.1