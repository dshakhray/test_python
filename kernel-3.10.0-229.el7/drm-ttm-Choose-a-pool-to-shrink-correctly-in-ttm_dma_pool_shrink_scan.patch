From b033f673ffdfef9dc6fb917f2d86685251567768 Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 17 Dec 2014 21:38:19 -0500
Subject: [drm] ttm: Choose a pool to shrink correctly in ttm_dma_pool_shrink_scan()

Message-id: <1418852380-13061-9-git-send-email-rclark@redhat.com>
Patchwork-id: 102149
O-Subject: [RHEL7 drm 08/89] drm/ttm: Choose a pool to shrink correctly in ttm_dma_pool_shrink_scan().
Bugzilla: 1173317
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1173317
Upstream: since v3.16.4

commit e0793a4efb813430245a21f0fa9a52d7cb574299

Author:     Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
AuthorDate: Sun Aug 3 20:00:40 2014 +0900
Commit:     Rob Clark <rclark@redhat.com>
CommitDate: Wed Dec 10 17:06:28 2014 -0500

    drm/ttm: Choose a pool to shrink correctly in ttm_dma_pool_shrink_scan().

    commit 46c2df68f03a236b30808bba361f10900c88d95e upstream.

    We can use "unsigned int" instead of "atomic_t" by updating start_pool
    variable under _manager->lock. This patch will make it possible to avoid
    skipping when choosing a pool to shrink in round-robin style, after next
    patch changes mutex_lock(_manager->lock) to !mutex_trylock(_manager->lork).

    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Rob Clark <rclark@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c b/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c
index e9f65ad..de1a753 100644
--- a/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c
+++ b/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c
@@ -1006,9 +1006,9 @@ EXPORT_SYMBOL_GPL(ttm_dma_unpopulate);
 static int ttm_dma_pool_mm_shrink(struct shrinker *shrink,
       struct shrink_control *sc)
 {
- static atomic_t start_pool = ATOMIC_INIT(0);
+ static unsigned start_pool;
  unsigned idx = 0;
- unsigned pool_offset = atomic_add_return(1, &start_pool);
+ unsigned pool_offset;
  unsigned shrink_pages = sc->nr_to_scan;
  struct device_pools *p;
 
@@ -1018,7 +1018,7 @@ static int ttm_dma_pool_mm_shrink(struct shrinker *shrink,
  mutex_lock(&_manager->lock);
  if (!_manager->npools)
   goto out;
- pool_offset = pool_offset % _manager->npools;
+ pool_offset = ++start_pool % _manager->npools;
  list_for_each_entry(p, &_manager->pools, pools) {
   unsigned nr_free;
 
-- 
1.7.1