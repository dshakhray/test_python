From a85be7bd9a936d4a2d738c56e9696831876b050e Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:54 -0400
Subject: [fs] ext4: fix incorect journal credits reservation in ext4_zero_range

Message-id: <1414059176-6044-31-git-send-email-lczerner@redhat.com>
Patchwork-id: 98298
O-Subject: [RHEL 7.1 PATCH 30/32] ext4: fix incorect journal credits reservation in ext4_zero_range
Bugzilla: 1150171

From: Dmitry Monakhov <dmonakhov@openvz.org>

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit 69dc9536405213c1d545fcace1fc15c481d00aae

 Currently we reserve only 4 blocks but in worst case scenario
 ext4_zero_partial_blocks() may want to zeroout and convert two
 non adjacent blocks.

 Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Cc: stable@vger.kernel.org
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 9aa6bc6..5220653 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -4729,6 +4729,7 @@ static long ext4_zero_range(struct file *file, loff_t offset,
  loff_t new_size = 0;
  int ret = 0;
  int flags;
+ int credits;
  int partial;
  loff_t start, end;
  ext4_lblk_t lblk;
@@ -4828,8 +4829,14 @@ static long ext4_zero_range(struct file *file, loff_t offset,
   if (ret)
    goto out_dio;
  }
-
- handle = ext4_journal_start(inode, EXT4_HT_MISC, 4);
+ /*
+  * In worst case we have to writeout two nonadjacent unwritten
+  * blocks and update the inode
+  */
+ credits = (2 * ext4_ext_index_trans_blocks(inode, 2)) + 1;
+ if (ext4_should_journal_data(inode))
+  credits += 2;
+ handle = ext4_journal_start(inode, EXT4_HT_MISC, credits);
  if (IS_ERR(handle)) {
   ret = PTR_ERR(handle);
   ext4_std_error(inode->i_sb, ret);
-- 
1.7.1