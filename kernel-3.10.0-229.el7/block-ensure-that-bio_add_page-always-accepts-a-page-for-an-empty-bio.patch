From 42043985dc9c935c6b5305cbd87d1719d037f5b4 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:37 -0400
Subject: [block] ensure that bio_add_page() always accepts a page for an empty bio

Message-id: <1402670238-13916-110-git-send-email-snitzer@redhat.com>
Patchwork-id: 83887
O-Subject: [RHEL7.1 PATCH 109/150] block: ensure that bio_add_page() always accepts a page for an empty bio
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit 58a4915ad2f8a87f4456aac260396df7e300e6f2
Author: Jens Axboe <axboe@fb.com>
Date:   Tue Jun 10 12:53:56 2014 -0600

    block: ensure that bio_add_page() always accepts a page for an empty bio

    With commit 762380ad9322 added support for chunk sizes and no merging
    across them, it broke the rule of always allowing adding of a single
    page to an empty bio. So relax the restriction a bit to allow for that,
    similarly to what we have always done.

    This fixes a crash with mkfs.xfs and 512b sector sizes on NVMe.

    Reported-by: Keith Busch <keith.busch@intel.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-settings.c b/block/blk-settings.c
index 1e81d1e..96c26aa 100644
--- a/block/blk-settings.c
+++ b/block/blk-settings.c
@@ -267,7 +267,10 @@ EXPORT_SYMBOL(blk_queue_max_hw_sectors);
  * Description:
  *    If a driver doesn't want IOs to cross a given chunk size, it can set
  *    this limit and prevent merging across chunks. Note that the chunk size
- *    must currently be a power-of-2 in sectors.
+ *    must currently be a power-of-2 in sectors. Also note that the block
+ *    layer must accept a page worth of data at any offset. So if the
+ *    crossing of chunks is a hard limitation in the driver, it must still be
+ *    prepared to split single page bios.
  **/
 void blk_queue_chunk_sectors(struct request_queue *q, unsigned int chunk_sectors)
 {
diff --git a/fs/bio.c b/fs/bio.c
index 2cddeb8..37f0add 100644
--- a/fs/bio.c
+++ b/fs/bio.c
@@ -750,8 +750,13 @@ int bio_add_page(struct bio *bio, struct page *page, unsigned int len,
    unsigned int offset)
 {
  struct request_queue *q = bdev_get_queue(bio->bi_bdev);
+ unsigned int max_sectors;
 
- return __bio_add_page(q, bio, page, len, offset, blk_max_size_offset(q, bio->bi_sector));
+ max_sectors = blk_max_size_offset(q, bio->bi_sector);
+ if ((max_sectors < (len >> 9)) && !bio->bi_size)
+  max_sectors = len >> 9;
+
+ return __bio_add_page(q, bio, page, len, offset, max_sectors);
 }
 EXPORT_SYMBOL(bio_add_page);
 
-- 
1.7.1