From 9d27511bb790cb2f5ccc1e1ccdabf545d98bc490 Mon Sep 17 00:00:00 2001
From: David Gibson <dgibson@redhat.com>
Date: Mon, 15 Sep 2014 07:13:25 -0400
Subject: [virt] kvm/ppc: book3s_64/pr - Access shadow slb in big endian

Message-id: <1410765214-16377-70-git-send-email-dgibson@redhat.com>
Patchwork-id: 94770
O-Subject: [PATCH 69/78] KVM: PPC: Book3S_64 PR: Access shadow slb in big endian
Bugzilla: 1123145 1123133 1123367
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Signed-off-by: David Gibson <dgibson@redhat.com>

commit 14a7d41dad9d3943e05995c59bfe7e0117d8e752
Author: Alexander Graf <agraf@suse.de>
Date:   Thu Apr 24 12:57:11 2014 +0200

    KVM: PPC: Book3S_64 PR: Access shadow slb in big endian

    The "shadow SLB" in the PACA is shared with the hypervisor, so it has to
    be big endian. We access the shadow SLB during world switch, so let's make
    sure we access it in big endian even when we're on a little endian host.

    Signed-off-by: Alexander Graf <agraf@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_64_slb.S b/arch/powerpc/kvm/book3s_64_slb.S
index b57d09a..84c52c6 100644
--- a/arch/powerpc/kvm/book3s_64_slb.S
+++ b/arch/powerpc/kvm/book3s_64_slb.S
@@ -17,29 +17,28 @@
  * Authors: Alexander Graf <agraf@suse.de>
  */
 
-#ifdef __LITTLE_ENDIAN__
-#error Need to fix SLB shadow accesses in little endian mode
-#endif
-
 #define SHADOW_SLB_ESID(num) (SLBSHADOW_SAVEAREA + (num * 0x10))
 #define SHADOW_SLB_VSID(num) (SLBSHADOW_SAVEAREA + (num * 0x10) + 0x8)
 #define UNBOLT_SLB_ENTRY(num) \
- ld r9, SHADOW_SLB_ESID(num)(r12); \
- /* Invalid? Skip. */; \
- rldicl. r0, r9, 37, 63; \
- beq slb_entry_skip_ ## num; \
- xoris r9, r9, SLB_ESID_V@h; \
- std r9, SHADOW_SLB_ESID(num)(r12); \
+ li r11, SHADOW_SLB_ESID(num); \
+ LDX_BE r9, r12, r11;   \
+ /* Invalid? Skip. */;   \
+ rldicl. r0, r9, 37, 63;   \
+ beq slb_entry_skip_ ## num;  \
+ xoris r9, r9, SLB_ESID_V@h;  \
+ STDX_BE r9, r12, r11;   \
   slb_entry_skip_ ## num:
 
 #define REBOLT_SLB_ENTRY(num) \
- ld r10, SHADOW_SLB_ESID(num)(r11); \
- cmpdi r10, 0; \
- beq slb_exit_skip_ ## num; \
- oris r10, r10, SLB_ESID_V@h; \
- ld r9, SHADOW_SLB_VSID(num)(r11); \
- slbmte r9, r10; \
- std r10, SHADOW_SLB_ESID(num)(r11); \
+ li r8, SHADOW_SLB_ESID(num); \
+ li r7, SHADOW_SLB_VSID(num); \
+ LDX_BE r10, r11, r8;   \
+ cmpdi r10, 0;    \
+ beq slb_exit_skip_ ## num;  \
+ oris r10, r10, SLB_ESID_V@h;  \
+ LDX_BE r9, r11, r7;   \
+ slbmte r9, r10;   \
+ STDX_BE r10, r11, r8;   \
 slb_exit_skip_ ## num:
 
 /******************************************************************************
-- 
1.7.1