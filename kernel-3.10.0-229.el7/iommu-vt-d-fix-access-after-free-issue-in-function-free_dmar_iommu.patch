From 1951b1fde2a5102ac937c4acc9168a7ca1094014 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Fri, 5 Sep 2014 01:33:24 -0400
Subject: [iommu] vt-d: fix access after free issue in function free_dmar_iommu()

Message-id: <20140905013324.30867.44872.stgit@gir.stowe>
Patchwork-id: 91287
O-Subject: [RHEL7.1 PATCH 23/28] iommu/vt-d: fix access after free issue in function free_dmar_iommu()
Bugzilla: 1129808
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Dutile <ddutile@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1129808
Upstream Status: 5ced12af691771a424fc3bcabecd668025517ebd

commit 5ced12af691771a424fc3bcabecd668025517ebd
Author: Jiang Liu <jiang.liu@linux.intel.com>
Date:   Mon Jan 6 14:18:22 2014 +0800

    iommu/vt-d: fix access after free issue in function free_dmar_iommu()

    Function free_dmar_iommu() may access domain->iommu_lock by
        spin_unlock_irqrestore(&domain->iommu_lock, flags);
    after freeing corresponding domain structure.

    Sample stack dump:
    [    8.912818] =========================
    [    8.917072] [ BUG: held lock freed! ]
    [    8.921335] 3.13.0-rc1-gerry+ #12 Not tainted
    [    8.926375] -------------------------
    [    8.930629] swapper/0/1 is freeing memory ffff880c23b56040-ffff880c23b561
    [    8.941675]  (&(&domain->iommu_lock)->rlock){......}, at: [<ffffffff81dc7
    [    8.952582] 1 lock held by swapper/0/1:
    [    8.957031]  #0:  (&(&domain->iommu_lock)->rlock){......}, at: [<ffffffff
    [    8.968487]
    [    8.968487] stack backtrace:
    [    8.973602] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 3.13.0-rc1-gerry+ #
    [    8.981556] Hardware name: Intel Corporation LH Pass ........../SVRBD-ROW
    [    8.994742]  ffff880c23b56040 ffff88042dd33c98 ffffffff815617fd ffff88042
    [    9.003566]  ffff88042dd33cd0 ffffffff810a977a ffff880c23b56040 000000000
    [    9.012403]  ffff88102c4923c0 ffff88042ddb4800 ffffffff81b1e8c0 ffff88042
    [    9.021240] Call Trace:
    [    9.024138]  [<ffffffff815617fd>] dump_stack+0x4d/0x66
    [    9.030057]  [<ffffffff810a977a>] debug_check_no_locks_freed+0x15a/0x160
    [    9.037723]  [<ffffffff811aa1c2>] kmem_cache_free+0x62/0x5b0
    [    9.044225]  [<ffffffff81465e27>] domain_exit+0x197/0x1c0
    [    9.050418]  [<ffffffff81dc7788>] init_dmars+0x758/0x95b
    [    9.056527]  [<ffffffff81dc7dfa>] intel_iommu_init+0x351/0x438
    [    9.063207]  [<ffffffff81d8a711>] ? iommu_setup+0x27d/0x27d
    [    9.069601]  [<ffffffff81d8a739>] pci_iommu_init+0x28/0x52
    [    9.075910]  [<ffffffff81000342>] do_one_initcall+0x122/0x180
    [    9.082509]  [<ffffffff81077738>] ? parse_args+0x1e8/0x320
    [    9.088815]  [<ffffffff81d850e8>] kernel_init_freeable+0x1e1/0x26c
    [    9.095895]  [<ffffffff81d84833>] ? do_early_param+0x88/0x88
    [    9.102396]  [<ffffffff8154f580>] ? rest_init+0xd0/0xd0
    [    9.108410]  [<ffffffff8154f58e>] kernel_init+0xe/0x130
    [    9.114423]  [<ffffffff81574a2c>] ret_from_fork+0x7c/0xb0
    [    9.120612]  [<ffffffff8154f580>] ? rest_init+0xd0/0xd0

    Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
    Signed-off-by: Joerg Roedel <joro@8bytes.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c
index 4cdd2a3..fa6912c 100644
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@ -1268,7 +1268,7 @@ static void vm_domain_exit(struct dmar_domain *domain);
 static void free_dmar_iommu(struct intel_iommu *iommu)
 {
  struct dmar_domain *domain;
- int i;
+ int i, count;
  unsigned long flags;
 
  if ((iommu->domains) && (iommu->domain_ids)) {
@@ -1277,13 +1277,14 @@ static void free_dmar_iommu(struct intel_iommu *iommu)
    clear_bit(i, iommu->domain_ids);
 
    spin_lock_irqsave(&domain->iommu_lock, flags);
-   if (--domain->iommu_count == 0) {
+   count = --domain->iommu_count;
+   spin_unlock_irqrestore(&domain->iommu_lock, flags);
+   if (count == 0) {
     if (domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE)
      vm_domain_exit(domain);
     else
      domain_exit(domain);
    }
-   spin_unlock_irqrestore(&domain->iommu_lock, flags);
   }
  }
 
-- 
1.7.1