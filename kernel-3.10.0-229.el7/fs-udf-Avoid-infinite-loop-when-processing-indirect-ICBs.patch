From 746468dbf0574fb02ab3f7b4c8becfd06ce938ce Mon Sep 17 00:00:00 2001
From: Jacob Tanenbaum <jtanenba@redhat.com>
Date: Thu, 2 Oct 2014 16:23:23 -0400
Subject: [fs] udf: Avoid infinite loop when processing indirect ICBs

Message-id: <1412267003-16899-1-git-send-email-jtanenba@redhat.com>
Patchwork-id: 96882
O-Subject: [RHEL7 PATCH BZ1142322] CVE-2014-6410 kernel: udf: Avoid infinite loop when processing indirect ICBs
Bugzilla: 1142322
CVE: CVE-2014-6410
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Linux kernel built with the UDF file system support(CONFIG_UDF_FS) is
vulnerable to a crash due to stack overflow through infinite recursion.
It occurs while traversing a long ICB hierarchy.

a user/program able to mount such a file system could use this flaw to
crash the system kernel resulting in DoS.

Backport of the following:
commit c03aa9f6e1f938618e6db2e23afef0574efeeb65
Author: Jan Kara <jack@suse.cz>
Date:   Thu Sep 4 14:06:55 2014 +0200

udf: Avoid infinite loop when processing indirect ICBs

We did not implement any bound on number of indirect ICBs we follow when
loading inode. Thus corrupted medium could cause kernel to go into an
infinite loop, possibly causing a stack overflow.

Fix the possible stack overflow by removing recursion from
__udf_read_inode() and limit number of indirect ICBs we follow to avoid
infinite loops.

BUGZILLA: https://bugzilla.redhat.com/show_bug.cgi?id=1142322
BREW: https://brewweb.devel.redhat.com/taskinfo?taskID=8048258
BEAKER: https://beaker.engineering.redhat.com/jobs/763755

No problem in brew build, the issues seen in beaker tests with the
'/kernel/RHEL7/perf/sanity/test' are a known issue

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/udf/inode.c b/fs/udf/inode.c
index d1842c5..2969d61 100644
--- a/fs/udf/inode.c
+++ b/fs/udf/inode.c
@@ -1270,13 +1270,22 @@ update_time:
  return 0;
 }
 
+/*
+ * Maximum length of linked list formed by ICB hierarchy. The chosen number is
+ * arbitrary - just that we hopefully don't limit any real use of rewritten
+ * inode on write-once media but avoid looping for too long on corrupted media.
+ */
+#define UDF_MAX_ICB_NESTING 1024
+
 static void __udf_read_inode(struct inode *inode)
 {
  struct buffer_head *bh = NULL;
  struct fileEntry *fe;
  uint16_t ident;
  struct udf_inode_info *iinfo = UDF_I(inode);
+ unsigned int indirections = 0;
 
+reread:
  /*
   * Set defaults, but the inode is still incomplete!
   * Note: get_new_inode() sets the following on a new inode:
@@ -1313,28 +1322,26 @@ static void __udf_read_inode(struct inode *inode)
   ibh = udf_read_ptagged(inode->i_sb, &iinfo->i_location, 1,
      &ident);
   if (ident == TAG_IDENT_IE && ibh) {
-   struct buffer_head *nbh = NULL;
    struct kernel_lb_addr loc;
    struct indirectEntry *ie;
 
    ie = (struct indirectEntry *)ibh->b_data;
    loc = lelb_to_cpu(ie->indirectICB.extLocation);
 
-   if (ie->indirectICB.extLength &&
-    (nbh = udf_read_ptagged(inode->i_sb, &loc, 0,
-       &ident))) {
-    if (ident == TAG_IDENT_FE ||
-     ident == TAG_IDENT_EFE) {
-     memcpy(&iinfo->i_location,
-      &loc,
-      sizeof(struct kernel_lb_addr));
-     brelse(bh);
-     brelse(ibh);
-     brelse(nbh);
-     __udf_read_inode(inode);
+   if (ie->indirectICB.extLength) {
+    brelse(bh);
+    brelse(ibh);
+    memcpy(&iinfo->i_location, &loc,
+           sizeof(struct kernel_lb_addr));
+    if (++indirections > UDF_MAX_ICB_NESTING) {
+     udf_err(inode->i_sb,
+      "too many ICBs in ICB hierarchy"
+      " (max %d supported)\n",
+      UDF_MAX_ICB_NESTING);
+     make_bad_inode(inode);
      return;
     }
-    brelse(nbh);
+    goto reread;
    }
   }
   brelse(ibh);
-- 
1.7.1