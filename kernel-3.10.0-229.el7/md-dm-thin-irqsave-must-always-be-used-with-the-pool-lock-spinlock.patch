From fc71527d17937cfb3ea13a78e1c47fb9bdc548cd Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 16 May 2014 20:13:28 -0400
Subject: [md] dm-thin: irqsave must always be used with the pool->lock spinlock

Message-id: <1400271213-25480-5-git-send-email-snitzer@redhat.com>
Patchwork-id: 79874
O-Subject: [RHEL7.1 PATCH 4/9] dm thin: irqsave must always be used with the pool->lock spinlock
Bugzilla: 1098643
RH-Acked-by: Joe Thornber <thornber@redhat.com>
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>

BZ: 1098643

Upstream commit 5e3283e2920a0bd8a806964d80274b8756e0dd7f
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Apr 8 11:08:41 2014 +0100

    dm thin: irqsave must always be used with the pool->lock spinlock

    Commit c140e1c4e23 ("dm thin: use per thin device deferred bio lists")
    incorrectly stopped disabling irqs when taking the pool's spinlock.

    Irqs must be disabled when taking the pool's spinlock otherwise a thread
    could spin_lock(), then get interrupted to service thin_endio() in
    interrupt context, which would then deadlock in spin_lock_irqsave().

    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index f8c70cd..a91d897 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -3095,6 +3095,7 @@ static int thin_ctr(struct dm_target *ti, unsigned argc, char **argv)
  struct thin_c *tc;
  struct dm_dev *pool_dev, *origin_dev;
  struct mapped_device *pool_md;
+ unsigned long flags;
 
  mutex_lock(&dm_thin_pool_table.mutex);
 
@@ -3185,9 +3186,9 @@ static int thin_ctr(struct dm_target *ti, unsigned argc, char **argv)
 
  mutex_unlock(&dm_thin_pool_table.mutex);
 
- spin_lock(&tc->pool->lock);
+ spin_lock_irqsave(&tc->pool->lock, flags);
  list_add_tail_rcu(&tc->list, &tc->pool->active_thins);
- spin_unlock(&tc->pool->lock);
+ spin_unlock_irqrestore(&tc->pool->lock, flags);
  /*
   * This synchronize_rcu() call is needed here otherwise we risk a
   * wake_worker() call finding no bios to process (because the newly
-- 
1.7.1