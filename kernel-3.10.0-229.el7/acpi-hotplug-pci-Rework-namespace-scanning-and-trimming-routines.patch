From fc21258ebcb5962e394a2061c3f636d080362670 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Thu, 10 Jul 2014 01:02:24 -0400
Subject: [acpi] hotplug/pci: Rework namespace scanning and trimming routines

Message-id: <20140710010224.22146.17731.stgit@gir.stowe>
Patchwork-id: 85579
O-Subject: [RHEL7.1 PATCH 040/105] ACPI / hotplug / PCI: Rework namespace scanning and trimming routines
Bugzilla: 1114228
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1114228
Upstream Status: 236e26245a6a437c4afbf33a5ad94cf61d1a7a7c

commit 236e26245a6a437c4afbf33a5ad94cf61d1a7a7c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Jul 13 23:27:25 2013 +0200

    ACPI / hotplug / PCI: Rework namespace scanning and trimming routines

    The acpiphp_bus_trim() and acpiphp_bus_add() functions need not
    return error codes that are never checked, so redefine them and
    simplify them a bit.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/hotplug/acpiphp_glue.c b/drivers/pci/hotplug/acpiphp_glue.c
index 6d12198..7ec569d 100644
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@ -540,53 +540,27 @@ static unsigned char acpiphp_max_busnr(struct pci_bus *bus)
  return max;
 }
 
-
 /**
- * acpiphp_bus_add - add a new bus to acpi subsystem
- * @func: acpiphp_func of the bridge
+ * acpiphp_bus_trim - Trim device objects in an ACPI namespace subtree.
+ * @handle: ACPI device object handle to start from.
  */
-static int acpiphp_bus_add(struct acpiphp_func *func)
+static void acpiphp_bus_trim(acpi_handle handle)
 {
- acpi_handle handle = func_to_handle(func);
- struct acpi_device *device;
- int ret_val;
-
- if (!acpi_bus_get_device(handle, &device)) {
-  pr_debug("bus exists... trim\n");
-  /* this shouldn't be in here, so remove
-   * the bus then re-add it...
-   */
-  acpi_bus_trim(device);
- }
+ struct acpi_device *adev = NULL;
 
- ret_val = acpi_bus_scan(handle);
- if (!ret_val)
-  ret_val = acpi_bus_get_device(handle, &device);
-
- if (ret_val)
-  pr_debug("error adding bus, %x\n", -ret_val);
-
- return ret_val;
+ acpi_bus_get_device(handle, &adev);
+ if (adev)
+  acpi_bus_trim(adev);
 }
 
-
 /**
- * acpiphp_bus_trim - trim a bus from acpi subsystem
- * @handle: handle to acpi namespace
+ * acpiphp_bus_add - Scan ACPI namespace subtree.
+ * @handle: ACPI object handle to start the scan from.
  */
-static int acpiphp_bus_trim(acpi_handle handle)
+static void acpiphp_bus_add(acpi_handle handle)
 {
- struct acpi_device *device;
- int retval;
-
- retval = acpi_bus_get_device(handle, &device);
- if (retval) {
-  pr_debug("acpi_device not found\n");
-  return retval;
- }
-
- acpi_bus_trim(device);
- return 0;
+ acpiphp_bus_trim(handle);
+ acpi_bus_scan(handle);
 }
 
 static void acpiphp_set_acpi_region(struct acpiphp_slot *slot)
@@ -649,7 +623,7 @@ static int __ref enable_device(struct acpiphp_slot *slot)
   goto err_exit;
 
  list_for_each_entry(func, &slot->funcs, sibling)
-  acpiphp_bus_add(func);
+  acpiphp_bus_add(func_to_handle(func));
 
  num = pci_scan_slot(bus, PCI_DEVFN(slot->device, 0));
  if (num == 0) {
-- 
1.7.1