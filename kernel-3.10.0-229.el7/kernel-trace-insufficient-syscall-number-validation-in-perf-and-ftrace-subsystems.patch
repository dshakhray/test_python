From 5a45c4026b7fa91492a9d549f660daac31b59b6f Mon Sep 17 00:00:00 2001
From: Jacob Tanenbaum <jtanenba@redhat.com>
Date: Tue, 9 Dec 2014 15:58:54 -0500
Subject: [kernel] trace: insufficient syscall number validation in perf and ftrace subsystems

Message-id: <1418140734-5080-1-git-send-email-jtanenba@redhat.com>
Patchwork-id: 101201
O-Subject: [RHEL7 PATCH BZ1161570] CVE-2014-7826 CVE-2014-7825 kernel: insufficient syscall number validation in perf and ftrace subsystems
Bugzilla: 1161570
CVE: CVE-2014-7825 CVE-2014-7826
RH-Acked-by: Don Zickus <dzickus@redhat.com>

An out-of-bounds memory access flaw was found in the Linux kernel's perf and
ftrace subsystems.

On a system with syscall perf profiling on (CVE-2014-7825) an unprivileged local
user could use this flaw to crash the system.

On a system with ftrace syscall tracing on (CVE-2014-7826) an unprivileged local
user could use this flaw to crash the system or escalate their privileges on
the system.

backport of the following:
commit 086ba77a6db00ed858ff07451bedee197df868c9
Author: Rabin Vincent <rabin@rab.in>
Date:   Wed Oct 29 23:06:58 2014 +0100

tracing/syscalls: Ignore numbers outside NR_syscalls' range
ARM has some private syscalls (for example, set_tls(2)) which lie
outside the range of NR_syscalls. If any of these are called while
syscall tracing is being performed, out-of-bounds array access will
occur in the ftrace and perf sys_{enter,exit} handlers.
 # trace-cmd record -e raw_syscalls:* true && trace-cmd report
 ...
 true-653   [000]   384.675777: sys_enter:            NR 192 (0, 1000, 3, 4000022, ffffffff, 0)
 true-653   [000]   384.675812: sys_exit:             NR 192 = 1995915264
 true-653   [000]   384.675971: sys_enter:            NR 983045 (76f74480, 76f74000, 76f74b28, 76f74480, 76f76f74, 1)
 true-653   [000]   384.675988: sys_exit:             NR 983045 = 0
 ...
 # trace-cmd record -e syscalls:* true
 [   17.289329] Unable to handle kernel paging request at virtual address aaaaaace
 [   17.289590] pgd = 9e71c000
 [   17.289696] [aaaaaace] *pgd=00000000
 [   17.289985] Internal error: Oops: 5 [#1] PREEMPT SMP ARM
 [   17.290169] Modules linked in:
 [   17.290391] CPU: 0 PID: 704 Comm: true Not tainted 3.18.0-rc2+ #21
 [   17.290585] task: 9f4dab00 ti: 9e710000 task.ti: 9e710000
 [   17.290747] PC is at ftrace_syscall_enter+0x48/0x1f8
 [   17.290866] LR is at syscall_trace_enter+0x124/0x184

Fix this by ignoring out-of-NR_syscalls-bounds syscall numbers.

Commit cd0980fc8add "tracing: Check invalid syscall nr while tracing syscalls"
added the check for less than zero, but it should have also checked
for greater than NR_syscalls. Link:

http://lkml.kernel.org/p/1414620418-29472-1-git-send-email-rabin@rab.in

Fixes: cd0980fc8add "tracing: Check invalid syscall nr while tracing
syscalls"

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1161570
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=8337204
Beaker: https://beaker.engineering.redhat.com/jobs/820565
        https://beaker.engineering.redhat.com/jobs/822552

No issues seen in brew build or beaker testing

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/trace/trace_syscalls.c b/kernel/trace/trace_syscalls.c
index 322e164..bdb9ee0 100644
--- a/kernel/trace/trace_syscalls.c
+++ b/kernel/trace/trace_syscalls.c
@@ -312,7 +312,7 @@ static void ftrace_syscall_enter(void *data, struct pt_regs *regs, long id)
  int size;
 
  syscall_nr = trace_get_syscall_nr(current, regs);
- if (syscall_nr < 0)
+ if (syscall_nr < 0 || syscall_nr >= NR_syscalls)
   return;
  if (!test_bit(syscall_nr, tr->enabled_enter_syscalls))
   return;
@@ -354,7 +354,7 @@ static void ftrace_syscall_exit(void *data, struct pt_regs *regs, long ret)
  int syscall_nr;
 
  syscall_nr = trace_get_syscall_nr(current, regs);
- if (syscall_nr < 0)
+ if (syscall_nr < 0 || syscall_nr >= NR_syscalls)
   return;
  if (!test_bit(syscall_nr, tr->enabled_exit_syscalls))
   return;
@@ -557,7 +557,7 @@ static void perf_syscall_enter(void *ignore, struct pt_regs *regs, long id)
  int size;
 
  syscall_nr = trace_get_syscall_nr(current, regs);
- if (syscall_nr < 0)
+ if (syscall_nr < 0 || syscall_nr >= NR_syscalls)
   return;
  if (!test_bit(syscall_nr, enabled_perf_enter_syscalls))
   return;
@@ -633,7 +633,7 @@ static void perf_syscall_exit(void *ignore, struct pt_regs *regs, long ret)
  int size;
 
  syscall_nr = trace_get_syscall_nr(current, regs);
- if (syscall_nr < 0)
+ if (syscall_nr < 0 || syscall_nr >= NR_syscalls)
   return;
  if (!test_bit(syscall_nr, enabled_perf_exit_syscalls))
   return;
-- 
1.7.1