From 9679956bbe2c59fc789ae21f9278af9a74abb987 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:46 -0400
Subject: [x86] perf/intel: Avoid spamming kernel log for BTS buffer failure

Message-id: <1410181752-25631-42-git-send-email-jolsa@redhat.com>
Patchwork-id: 91711
O-Subject: [PATCH RHEL7.1 BZ1134356 041/307] perf/x86/intel: Avoid spamming kernel log for BTS buffer failure
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 4485154138f6ffa5b252cb490aba3e8eb30124e4
Author: David Rientjes <rientjes@google.com>
Date: Mon Jun 30 16:04:08 2014 -0700

RHEL7
=====
We haven't backported kzalloc_node change yet, so
keep using the kmalloc_node.

description
===========
It's unnecessary to excessively spam the kernel log anytime the BTS buffer
cannot be allocated, so make this allocation __GFP_NOWARN.

The user probably will want to at least find some artifact that the
allocation has failed in the past, probably due to fragmentation because
of its large size, when it's not allocated at bootstrap.  Thus, add a
WARN_ONCE() so something is left behind for them to understand why perf
commnads that require PEBS is not working properly.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/cpu/perf_event_intel_ds.c b/arch/x86/kernel/cpu/perf_event_intel_ds.c
index 65fd266..21dc86a 100644
--- a/arch/x86/kernel/cpu/perf_event_intel_ds.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_ds.c
@@ -311,9 +311,11 @@ static int alloc_bts_buffer(int cpu)
  if (!x86_pmu.bts)
   return 0;
 
- buffer = kmalloc_node(BTS_BUFFER_SIZE, GFP_KERNEL | __GFP_ZERO, node);
- if (unlikely(!buffer))
+ buffer = kmalloc_node(BTS_BUFFER_SIZE, GFP_KERNEL | __GFP_ZERO | __GFP_NOWARN, node);
+ if (unlikely(!buffer)) {
+  WARN_ONCE(1, "%s: BTS buffer allocation failure\n", __func__);
   return -ENOMEM;
+ }
 
  max = BTS_BUFFER_SIZE / BTS_RECORD_SIZE;
  thresh = max / 16;
-- 
1.7.1