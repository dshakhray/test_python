From 93cc36fda92d58605d2f9b0475efdf2d5842a5fb Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:08:38 -0400
Subject: [usb] usb_wwan: fix write and suspend race

Message-id: <1410887463-20674-447-git-send-email-dzickus@redhat.com>
Patchwork-id: 95252
O-Subject: [RHEL7 PATCH 446/591] USB: usb_wwan: fix write and suspend race
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 170fad9e22df0063eba0701adb966786d7a4ec5a
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon May 26 19:23:15 2014 +0200

    USB: usb_wwan: fix write and suspend race

    Fix race between write() and suspend() which could lead to writes being
    dropped (or I/O while suspended) if the device is runtime suspended
    while a write request is being processed.

    Specifically, suspend() releases the susp_lock after determining the
    device is idle but before setting the suspended flag, thus leaving a
    window where a concurrent write() can submit an urb.

    Fixes: 383cedc3bb43 ("USB: serial: full autosuspend support for the
    option driver")

    Cc: <stable@vger.kernel.org> # v2.6.32
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/usb_wwan.c b/drivers/usb/serial/usb_wwan.c
index 112693a..2b8f026 100644
--- a/drivers/usb/serial/usb_wwan.c
+++ b/drivers/usb/serial/usb_wwan.c
@@ -579,20 +579,17 @@ static void stop_read_write_urbs(struct usb_serial *serial)
 int usb_wwan_suspend(struct usb_serial *serial, pm_message_t message)
 {
  struct usb_wwan_intf_private *intfdata = serial->private;
- int b;
 
+ spin_lock_irq(&intfdata->susp_lock);
  if (PMSG_IS_AUTO(message)) {
-  spin_lock_irq(&intfdata->susp_lock);
-  b = intfdata->in_flight;
-  spin_unlock_irq(&intfdata->susp_lock);
-
-  if (b)
+  if (intfdata->in_flight) {
+   spin_unlock_irq(&intfdata->susp_lock);
    return -EBUSY;
+  }
  }
-
- spin_lock_irq(&intfdata->susp_lock);
  intfdata->suspended = 1;
  spin_unlock_irq(&intfdata->susp_lock);
+
  stop_read_write_urbs(serial);
 
  return 0;
-- 
1.7.1