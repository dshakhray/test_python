From 85739b19ad030399497cd33c1dce4e77dc5a2302 Mon Sep 17 00:00:00 2001
From: George Beshers <gbeshers@redhat.com>
Date: Fri, 5 Sep 2014 05:25:19 -0400
Subject: [x86] uv: Add summary of cpu activity to UV NMI handler

Message-id: <20140905052519.846.41267.sendpatchset@sgi-xe250-01.lab.bos.redhat.com>
Patchwork-id: 91390
O-Subject: [RHEL7.1 PATCH 3/9] x86/UV: Add summary of cpu activity to UV NMI handler
Bugzilla: 1138519
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

bz1138519: UV NMI cleanup to support perf tools
First Post

Brew Build: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=7921941

Simple Backport of:

    commit 3c121d9a21dc16ef030ad6ca3ebb159b5726fab9
    Author: Mike Travis <travis@sgi.com>
    Date:   Mon Sep 23 16:25:02 2013 -0500

        x86/UV: Add summary of cpu activity to UV NMI handler

        The standard NMI handler dumps the states of all the cpus.  This
        includes a full register dump and stack trace.  This can be way
        more information than what is needed.  This patch adds a
        "summary" dump that is basically a form of the "ps" command.  It
        includes the symbolic IP address as well as the command field
        and basic process information.

        It is enabled when the nmi action is changed to "ips".

        Signed-off-by: Mike Travis <travis@sgi.com>
        Reviewed-by: Dimitri Sivanich <sivanich@sgi.com>
        Reviewed-by: Hedi Berriche <hedi@sgi.com>
        Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
        Cc: Paul Mackerras <paulus@samba.org>
        Cc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>
        Cc: Jason Wessel <jason.wessel@windriver.com>
        Link: http://lkml.kernel.org/r/20130923212500.507922930@asylum.americas.sgi.com
        Signed-off-by: Ingo Molnar <mingo@kernel.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/platform/uv/uv_nmi.c b/arch/x86/platform/uv/uv_nmi.c
index 964b8c0..a95ba86 100644
--- a/arch/x86/platform/uv/uv_nmi.c
+++ b/arch/x86/platform/uv/uv_nmi.c
@@ -139,6 +139,19 @@ module_param_named(wait_count, uv_nmi_wait_count, int, 0644);
 static int uv_nmi_retry_count = 500;
 module_param_named(retry_count, uv_nmi_retry_count, int, 0644);
 
+/*
+ * Valid NMI Actions:
+ *  "dump" - dump process stack for each cpu
+ *  "ips" - dump IP info for each cpu
+ */
+static char uv_nmi_action[8] = "dump";
+module_param_string(action, uv_nmi_action, sizeof(uv_nmi_action), 0644);
+
+static inline bool uv_nmi_action_is(const char *action)
+{
+ return (strncmp(uv_nmi_action, action, strlen(action)) == 0);
+}
+
 /* Setup which NMI support is present in system */
 static void uv_nmi_setup_mmrs(void)
 {
@@ -367,13 +380,38 @@ static void uv_nmi_wait(int master)
   atomic_read(&uv_nmi_cpus_in_nmi), num_online_cpus());
 }
 
+static void uv_nmi_dump_cpu_ip_hdr(void)
+{
+ printk(KERN_DEFAULT
+  "\nUV: %4s %6s %-32s %s   (Note: PID 0 not listed)\n",
+  "CPU", "PID", "COMMAND", "IP");
+}
+
+static void uv_nmi_dump_cpu_ip(int cpu, struct pt_regs *regs)
+{
+ printk(KERN_DEFAULT "UV: %4d %6d %-32.32s ",
+  cpu, current->pid, current->comm);
+
+ printk_address(regs->ip, 1);
+}
+
 /* Dump this cpu's state */
 static void uv_nmi_dump_state_cpu(int cpu, struct pt_regs *regs)
 {
  const char *dots = " ................................. ";
 
- printk(KERN_DEFAULT "UV:%sNMI process trace for CPU %d\n", dots, cpu);
- show_regs(regs);
+ if (uv_nmi_action_is("ips")) {
+  if (cpu == 0)
+   uv_nmi_dump_cpu_ip_hdr();
+
+  if (current->pid != 0)
+   uv_nmi_dump_cpu_ip(cpu, regs);
+
+ } else if (uv_nmi_action_is("dump")) {
+  printk(KERN_DEFAULT
+   "UV:%sNMI process trace for CPU %d\n", dots, cpu);
+  show_regs(regs);
+ }
  atomic_set(&uv_cpu_nmi.state, UV_NMI_STATE_DUMP_DONE);
 }
 
@@ -420,7 +458,8 @@ static void uv_nmi_dump_state(int cpu, struct pt_regs *regs, int master)
   int ignored = 0;
   int saved_console_loglevel = console_loglevel;
 
-  pr_alert("UV: tracing processes for %d CPUs from CPU %d\n",
+  pr_alert("UV: tracing %s for %d CPUs from CPU %d\n",
+   uv_nmi_action_is("ips") ? "IPs" : "processes",
    atomic_read(&uv_nmi_cpus_in_nmi), cpu);
 
   console_loglevel = uv_nmi_loglevel;
@@ -482,7 +521,8 @@ int uv_handle_nmi(unsigned int reason, struct pt_regs *regs)
  uv_nmi_wait(master);
 
  /* Dump state of each cpu */
- uv_nmi_dump_state(cpu, regs, master);
+ if (uv_nmi_action_is("ips") || uv_nmi_action_is("dump"))
+  uv_nmi_dump_state(cpu, regs, master);
 
  /* Clear per_cpu "in nmi" flag */
  atomic_set(&uv_cpu_nmi.state, UV_NMI_STATE_OUT);
-- 
1.7.1