From 50fd1e4afc1afc740f2c613cf0f6bb0248d6bb77 Mon Sep 17 00:00:00 2001
From: Florian Westphal <fwestpha@redhat.com>
Date: Tue, 2 Sep 2014 10:14:53 -0400
Subject: [net] vxlan: Add support for UDP checksums (v4 sending, v6 zero csums)

Message-id: <1409652920-431-31-git-send-email-fwestpha@redhat.com>
Patchwork-id: 90194
O-Subject: [PATCH 30/57] [RHEL7.1 net] vxlan: Add support for UDP checksums (v4 sending, v6 zero csums)
Bugzilla: 1131999
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Vlad Yasevich <vyasevic@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>

BZ: 1131999

commit 359a0ea9875ef4f32c8425bbe1ae348e1fd2ed2a
Author: Tom Herbert <therbert@google.com>
Date:   Wed Jun 4 17:20:29 2014 -0700

    vxlan: Add support for UDP checksums (v4 sending, v6 zero csums)

    Added VXLAN link configuration for sending UDP checksums, and allowing
    TX and RX of UDP6 checksums.

    Also, call common iptunnel_handle_offloads and added GSO support for
    checksums.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 3c893ce..9095cdc 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -134,7 +134,7 @@ struct vxlan_dev {
  __u16    port_max;
  __u8    tos;  /* TOS override */
  __u8    ttl;
- u32    flags; /* VXLAN_F_* below */
+ u32    flags; /* VXLAN_F_* in vxlan.h */
 
  struct work_struct sock_work;
  struct work_struct igmp_join;
@@ -149,13 +149,6 @@ struct vxlan_dev {
  struct hlist_head fdb_head[FDB_HASH_SIZE];
 };
 
-#define VXLAN_F_LEARN 0x01
-#define VXLAN_F_PROXY 0x02
-#define VXLAN_F_RSC 0x04
-#define VXLAN_F_L2MISS 0x08
-#define VXLAN_F_L3MISS 0x10
-#define VXLAN_F_IPV6 0x20 /* internal flag */
-
 /* salt for hash table */
 static u32 vxlan_salt __read_mostly;
 static struct workqueue_struct *vxlan_wq;
@@ -1486,18 +1479,11 @@ __be16 vxlan_src_port(__u16 port_min, __u16 port_max, struct sk_buff *skb)
 }
 EXPORT_SYMBOL_GPL(vxlan_src_port);
 
-static int handle_offloads(struct sk_buff *skb)
+static inline struct sk_buff *vxlan_handle_offloads(struct sk_buff *skb,
+          bool udp_csum)
 {
- if (skb_is_gso(skb)) {
-  int err = skb_unclone(skb, GFP_ATOMIC);
-  if (unlikely(err))
-   return err;
-
-  skb_shinfo(skb)->gso_type |= SKB_GSO_UDP_TUNNEL;
- } else if (skb->ip_summed != CHECKSUM_PARTIAL)
-  skb->ip_summed = CHECKSUM_NONE;
-
- return 0;
+ int type = udp_csum ? SKB_GSO_UDP_TUNNEL_CSUM : SKB_GSO_UDP_TUNNEL;
+ return iptunnel_handle_offloads(skb, udp_csum, type);
 }
 
 #if IS_ENABLED(CONFIG_IPV6)
@@ -1513,10 +1499,9 @@ static int vxlan6_xmit_skb(struct net *net, struct vxlan_sock *vs,
  int min_headroom;
  int err;
 
- if (!skb->encapsulation) {
-  skb_reset_inner_headers(skb);
-  skb->encapsulation = 1;
- }
+ skb = vxlan_handle_offloads(skb, !udp_get_no_check6_tx(vs->sock->sk));
+ if (IS_ERR(skb))
+  return -EINVAL;
 
  min_headroom = LL_RESERVED_SPACE(dst->dev) + dst->header_len
    + VXLAN_HLEN + sizeof(struct ipv6hdr)
@@ -1548,7 +1533,6 @@ static int vxlan6_xmit_skb(struct net *net, struct vxlan_sock *vs,
  uh->source = src_port;
 
  uh->len = htons(skb->len);
- uh->check = 0;
 
  memset(&(IPCB(skb)->opt), 0, sizeof(IPCB(skb)->opt));
  IPCB(skb)->flags &= ~(IPSKB_XFRM_TUNNEL_SIZE | IPSKB_XFRM_TRANSFORMED |
@@ -1556,20 +1540,8 @@ static int vxlan6_xmit_skb(struct net *net, struct vxlan_sock *vs,
  skb_dst_drop(skb);
  skb_dst_set(skb, dst);
 
- if (!skb_is_gso(skb) && !(dst->dev->features & NETIF_F_IPV6_CSUM)) {
-  __wsum csum = skb_checksum(skb, 0, skb->len, 0);
-  skb->ip_summed = CHECKSUM_UNNECESSARY;
-  uh->check = csum_ipv6_magic(saddr, daddr, skb->len,
-         IPPROTO_UDP, csum);
-  if (uh->check == 0)
-   uh->check = CSUM_MANGLED_0;
- } else {
-  skb->ip_summed = CHECKSUM_PARTIAL;
-  skb->csum_start = skb_transport_header(skb) - skb->head;
-  skb->csum_offset = offsetof(struct udphdr, check);
-  uh->check = ~csum_ipv6_magic(saddr, daddr,
-          skb->len, IPPROTO_UDP, 0);
- }
+ udp6_set_csum(udp_get_no_check6_tx(vs->sock->sk), skb,
+        saddr, daddr, skb->len);
 
  __skb_push(skb, sizeof(*ip6h));
  skb_reset_network_header(skb);
@@ -1585,10 +1557,6 @@ static int vxlan6_xmit_skb(struct net *net, struct vxlan_sock *vs,
  ip6h->daddr   = *daddr;
  ip6h->saddr   = *saddr;
 
- err = handle_offloads(skb);
- if (err)
-  return err;
-
  ip6tunnel_xmit(skb, dev);
  return 0;
 }
@@ -1604,10 +1572,9 @@ int vxlan_xmit_skb(struct net *net, struct vxlan_sock *vs,
  int min_headroom;
  int err;
 
- if (!skb->encapsulation) {
-  skb_reset_inner_headers(skb);
-  skb->encapsulation = 1;
- }
+ skb = vxlan_handle_offloads(skb, !vs->sock->sk->sk_no_check_tx);
+ if (IS_ERR(skb))
+  return -EINVAL;
 
  min_headroom = LL_RESERVED_SPACE(rt->dst.dev) + rt->dst.header_len
    + VXLAN_HLEN + sizeof(struct iphdr)
@@ -1639,11 +1606,9 @@ int vxlan_xmit_skb(struct net *net, struct vxlan_sock *vs,
  uh->source = src_port;
 
  uh->len = htons(skb->len);
- uh->check = 0;
 
- err = handle_offloads(skb);
- if (err)
-  return err;
+ udp_set_csum(vs->sock->sk->sk_no_check_tx, skb,
+       src, dst, skb->len);
 
  return iptunnel_xmit(vs->sock->sk, rt, skb, src, dst, IPPROTO_UDP,
         tos, ttl, df);
@@ -2286,7 +2251,7 @@ static void vxlan_del_work(struct work_struct *work)
  * could be used for both IPv4 and IPv6 communications, but
  * users may set bindv6only=1.
  */
-static struct socket *create_v6_sock(struct net *net, __be16 port)
+static struct socket *create_v6_sock(struct net *net, __be16 port, u32 flags)
 {
  struct sock *sk;
  struct socket *sock;
@@ -2323,18 +2288,25 @@ static struct socket *create_v6_sock(struct net *net, __be16 port)
 
  /* Disable multicast loopback */
  inet_sk(sk)->mc_loop = 0;
+
+ if (flags & VXLAN_F_UDP_ZERO_CSUM6_TX)
+  udp_set_no_check6_tx(sk, true);
+
+ if (flags & VXLAN_F_UDP_ZERO_CSUM6_RX)
+  udp_set_no_check6_rx(sk, true);
+
  return sock;
 }
 
 #else
 
-static struct socket *create_v6_sock(struct net *net, __be16 port)
+static struct socket *create_v6_sock(struct net *net, __be16 port, u32 flags)
 {
   return ERR_PTR(-EPFNOSUPPORT);
 }
 #endif
 
-static struct socket *create_v4_sock(struct net *net, __be16 port)
+static struct socket *create_v4_sock(struct net *net, __be16 port, u32 flags)
 {
  struct sock *sk;
  struct socket *sock;
@@ -2367,18 +2339,24 @@ static struct socket *create_v4_sock(struct net *net, __be16 port)
 
  /* Disable multicast loopback */
  inet_sk(sk)->mc_loop = 0;
+
+ if (!(flags & VXLAN_F_UDP_CSUM))
+  sock->sk->sk_no_check_tx = 1;
+
  return sock;
 }
 
 /* Create new listen socket if needed */
 static struct vxlan_sock *vxlan_socket_create(struct net *net, __be16 port,
-           vxlan_rcv_t *rcv, void *data, bool ipv6)
+           vxlan_rcv_t *rcv, void *data,
+           u32 flags)
 {
  struct vxlan_net *vn = net_generic(net, vxlan_net_id);
  struct vxlan_sock *vs;
  struct socket *sock;
  struct sock *sk;
  unsigned int h;
+ bool ipv6 = !!(flags & VXLAN_F_IPV6);
 
  vs = kzalloc(sizeof(*vs), GFP_KERNEL);
  if (!vs)
@@ -2390,9 +2368,9 @@ static struct vxlan_sock *vxlan_socket_create(struct net *net, __be16 port,
  INIT_WORK(&vs->del_work, vxlan_del_work);
 
  if (ipv6)
-  sock = create_v6_sock(net, port);
+  sock = create_v6_sock(net, port, flags);
  else
-  sock = create_v4_sock(net, port);
+  sock = create_v4_sock(net, port, flags);
  if (IS_ERR(sock)) {
   kfree(vs);
   return ERR_CAST(sock);
@@ -2430,12 +2408,12 @@ static struct vxlan_sock *vxlan_socket_create(struct net *net, __be16 port,
 
 struct vxlan_sock *vxlan_sock_add(struct net *net, __be16 port,
       vxlan_rcv_t *rcv, void *data,
-      bool no_share, bool ipv6)
+      bool no_share, u32 flags)
 {
  struct vxlan_net *vn = net_generic(net, vxlan_net_id);
  struct vxlan_sock *vs;
 
- vs = vxlan_socket_create(net, port, rcv, data, ipv6);
+ vs = vxlan_socket_create(net, port, rcv, data, flags);
  if (!IS_ERR(vs))
   return vs;
 
@@ -2468,7 +2446,7 @@ static void vxlan_sock_work(struct work_struct *work)
  __be16 port = vxlan->dst_port;
  struct vxlan_sock *nvs;
 
- nvs = vxlan_sock_add(net, port, vxlan_rcv, NULL, false, vxlan->flags & VXLAN_F_IPV6);
+ nvs = vxlan_sock_add(net, port, vxlan_rcv, NULL, false, vxlan->flags);
  spin_lock(&vn->sock_lock);
  if (!IS_ERR(nvs))
   vxlan_vs_add_dev(nvs, vxlan);
@@ -2589,6 +2567,17 @@ static int vxlan_newlink(struct net *net, struct net_device *dev,
  if (data[IFLA_VXLAN_PORT])
   vxlan->dst_port = nla_get_be16(data[IFLA_VXLAN_PORT]);
 
+ if (data[IFLA_VXLAN_UDP_CSUM] && nla_get_u8(data[IFLA_VXLAN_UDP_CSUM]))
+  vxlan->flags |= VXLAN_F_UDP_CSUM;
+
+ if (data[IFLA_VXLAN_UDP_ZERO_CSUM6_TX] &&
+     nla_get_u8(data[IFLA_VXLAN_UDP_ZERO_CSUM6_TX]))
+  vxlan->flags |= VXLAN_F_UDP_ZERO_CSUM6_TX;
+
+ if (data[IFLA_VXLAN_UDP_ZERO_CSUM6_RX] &&
+     nla_get_u8(data[IFLA_VXLAN_UDP_ZERO_CSUM6_RX]))
+  vxlan->flags |= VXLAN_F_UDP_ZERO_CSUM6_RX;
+
  if (vxlan_find_vni(net, vni, vxlan->dst_port)) {
   pr_info("duplicate VNI %u\n", vni);
   return -EEXIST;
@@ -2652,7 +2641,10 @@ static size_t vxlan_get_size(const struct net_device *dev)
   nla_total_size(sizeof(__u32)) + /* IFLA_VXLAN_AGEING */
   nla_total_size(sizeof(__u32)) + /* IFLA_VXLAN_LIMIT */
   nla_total_size(sizeof(struct ifla_vxlan_port_range)) +
-  nla_total_size(sizeof(__be16))+ /* IFLA_VXLAN_PORT */
+  nla_total_size(sizeof(__be16)) + /* IFLA_VXLAN_PORT */
+  nla_total_size(sizeof(__u8)) + /* IFLA_VXLAN_UDP_CSUM */
+  nla_total_size(sizeof(__u8)) + /* IFLA_VXLAN_UDP_ZERO_CSUM6_TX */
+  nla_total_size(sizeof(__u8)) + /* IFLA_VXLAN_UDP_ZERO_CSUM6_RX */
   0;
 }
 
@@ -2712,7 +2704,13 @@ static int vxlan_fill_info(struct sk_buff *skb, const struct net_device *dev)
    !!(vxlan->flags & VXLAN_F_L3MISS)) ||
      nla_put_u32(skb, IFLA_VXLAN_AGEING, vxlan->age_interval) ||
      nla_put_u32(skb, IFLA_VXLAN_LIMIT, vxlan->addrmax) ||
-     nla_put_be16(skb, IFLA_VXLAN_PORT, vxlan->dst_port))
+     nla_put_be16(skb, IFLA_VXLAN_PORT, vxlan->dst_port) ||
+     nla_put_u8(skb, IFLA_VXLAN_UDP_CSUM,
+   !!(vxlan->flags & VXLAN_F_UDP_CSUM)) ||
+     nla_put_u8(skb, IFLA_VXLAN_UDP_ZERO_CSUM6_TX,
+   !!(vxlan->flags & VXLAN_F_UDP_ZERO_CSUM6_TX)) ||
+     nla_put_u8(skb, IFLA_VXLAN_UDP_ZERO_CSUM6_RX,
+   !!(vxlan->flags & VXLAN_F_UDP_ZERO_CSUM6_RX)))
   goto nla_put_failure;
 
  if (nla_put(skb, IFLA_VXLAN_PORT_RANGE, sizeof(ports), &ports))
diff --git a/include/net/vxlan.h b/include/net/vxlan.h
index cecfc02..4a48f07 100644
--- a/include/net/vxlan.h
+++ b/include/net/vxlan.h
@@ -24,9 +24,19 @@ struct vxlan_sock {
  struct udp_offload udp_offloads;
 };
 
+#define VXLAN_F_LEARN   0x01
+#define VXLAN_F_PROXY   0x02
+#define VXLAN_F_RSC   0x04
+#define VXLAN_F_L2MISS   0x08
+#define VXLAN_F_L3MISS   0x10
+#define VXLAN_F_IPV6   0x20
+#define VXLAN_F_UDP_CSUM  0x40
+#define VXLAN_F_UDP_ZERO_CSUM6_TX 0x80
+#define VXLAN_F_UDP_ZERO_CSUM6_RX 0x100
+
 struct vxlan_sock *vxlan_sock_add(struct net *net, __be16 port,
       vxlan_rcv_t *rcv, void *data,
-      bool no_share, bool ipv6);
+      bool no_share, u32 flags);
 
 void vxlan_sock_release(struct vxlan_sock *vs);
 
diff --git a/include/uapi/linux/if_link.h b/include/uapi/linux/if_link.h
index 16e4e19..9dd9aca 100644
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@ -320,6 +320,9 @@ enum {
  IFLA_VXLAN_PORT, /* destination port */
  IFLA_VXLAN_GROUP6,
  IFLA_VXLAN_LOCAL6,
+ IFLA_VXLAN_UDP_CSUM,
+ IFLA_VXLAN_UDP_ZERO_CSUM6_TX,
+ IFLA_VXLAN_UDP_ZERO_CSUM6_RX,
  __IFLA_VXLAN_MAX
 };
 #define IFLA_VXLAN_MAX (__IFLA_VXLAN_MAX - 1)
diff --git a/net/openvswitch/vport-vxlan.c b/net/openvswitch/vport-vxlan.c
index 1535b1e..05c0853 100644
--- a/net/openvswitch/vport-vxlan.c
+++ b/net/openvswitch/vport-vxlan.c
@@ -122,7 +122,7 @@ static struct vport *vxlan_tnl_create(const struct vport_parms *parms)
  vxlan_port = vxlan_vport(vport);
  strncpy(vxlan_port->name, parms->name, IFNAMSIZ);
 
- vs = vxlan_sock_add(net, htons(dst_port), vxlan_rcv, vport, true, false);
+ vs = vxlan_sock_add(net, htons(dst_port), vxlan_rcv, vport, true, 0);
  if (IS_ERR(vs)) {
   ovs_vport_free(vport);
   return (void *)vs;
-- 
1.7.1