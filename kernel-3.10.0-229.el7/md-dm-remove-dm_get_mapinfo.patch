From cf0461f493e9785663e77763b14475cdbf49b7ca Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 16 Jul 2014 20:42:07 -0400
Subject: [md] dm: remove dm_get_mapinfo

Message-id: <1405543364-20901-4-git-send-email-snitzer@redhat.com>
Patchwork-id: 85887
O-Subject: [RHEL7.1 PATCH 03/40] dm: remove dm_get_mapinfo
Bugzilla: 1117872
RH-Acked-by: Mikulas Patocka <mpatocka@redhat.com>
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1117872

Upstream commit d70ab4fb723cf7acfa656cb2ad1e75be7ed94bef
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Mon Mar 3 17:43:31 2014 -0500

    dm: remove dm_get_mapinfo

    Remove dm_get_mapinfo() because no target uses it.  Targets can allocate
    per-bio data using ti->per_bio_data_size, this is much more flexible
    than union map_info.

    Leave union map_info only for the request-based multipath target's use.
    Also delete the unused "unsigned long long ll" field of union map_info.

    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index b49c762..3f58797 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -94,13 +94,6 @@ struct dm_rq_clone_bio_info {
  struct bio clone;
 };
 
-union map_info *dm_get_mapinfo(struct bio *bio)
-{
- if (bio && bio->bi_private)
-  return &((struct dm_target_io *)bio->bi_private)->info;
- return NULL;
-}
-
 union map_info *dm_get_rq_mapinfo(struct request *rq)
 {
  if (rq && rq->end_io_data)
@@ -1239,7 +1232,6 @@ static struct dm_target_io *alloc_tio(struct clone_info *ci,
 
  tio->io = ci->io;
  tio->ti = ti;
- memset(&tio->info, 0, sizeof(tio->info));
  tio->target_bio_nr = target_bio_nr;
 
  return tio;
@@ -3006,8 +2998,6 @@ static const struct block_device_operations dm_blk_dops = {
  .owner = THIS_MODULE
 };
 
-EXPORT_SYMBOL(dm_get_mapinfo);
-
 /*
  * module hooks
  */
diff --git a/include/linux/device-mapper.h b/include/linux/device-mapper.h
index ed419c6..5eeeab4 100644
--- a/include/linux/device-mapper.h
+++ b/include/linux/device-mapper.h
@@ -23,7 +23,6 @@ typedef enum { STATUSTYPE_INFO, STATUSTYPE_TABLE } status_type_t;
 
 union map_info {
  void *ptr;
- unsigned long long ll;
 };
 
 /*
@@ -291,7 +290,6 @@ struct dm_target_callbacks {
 struct dm_target_io {
  struct dm_io *io;
  struct dm_target *ti;
- union map_info info;
  unsigned target_bio_nr;
  struct bio clone;
 };
@@ -403,7 +401,6 @@ int dm_copy_name_and_uuid(struct mapped_device *md, char *name, char *uuid);
 struct gendisk *dm_disk(struct mapped_device *md);
 int dm_suspended(struct dm_target *ti);
 int dm_noflush_suspending(struct dm_target *ti);
-union map_info *dm_get_mapinfo(struct bio *bio);
 union map_info *dm_get_rq_mapinfo(struct request *rq);
 
 struct queue_limits *dm_get_queue_limits(struct mapped_device *md);
-- 
1.7.1