From f6d0f53d201945e272781cee5adb432c54735e97 Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Thu, 27 Nov 2014 11:47:01 -0500
Subject: [fs] ovl: pass dentry into ovl_dir_read_merged()

Message-id: <20141127114701.9170.39473.stgit@warthog.procyon.org.uk>
Patchwork-id: 100989
O-Subject: [RHEL7 PATCH 6/7] ovl: pass dentry into ovl_dir_read_merged()
Bugzilla: 985875
RH-Acked-by: Alexander Viro <aviro@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Miklos Szeredi <mszeredi@suse.cz>

Pass dentry into ovl_dir_read_merged() insted of upperpath and lowerpath.
This cleans up callers and paves the way for multi-layer directory reads.

Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
Original-commit: c9f00fdb9ab3999cb2fb582ad82a5db9e70c82f5
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/overlayfs/readdir.c b/fs/overlayfs/readdir.c
index c003330..1e50e59 100644
--- a/fs/overlayfs/readdir.c
+++ b/fs/overlayfs/readdir.c
@@ -281,11 +281,11 @@ static int ovl_dir_mark_whiteouts(struct dentry *dir,
  return 0;
 }
 
-static inline int ovl_dir_read_merged(struct path *upperpath,
-          struct path *lowerpath,
-          struct list_head *list)
+static int ovl_dir_read_merged(struct dentry *dentry, struct list_head *list)
 {
  int err;
+ struct path lowerpath;
+ struct path upperpath;
  struct ovl_readdir_data rdd = {
   .ctx.actor = ovl_fill_merge,
   .list = list,
@@ -293,25 +293,28 @@ static inline int ovl_dir_read_merged(struct path *upperpath,
   .is_merge = false,
  };
 
- if (upperpath->dentry) {
-  err = ovl_dir_read(upperpath, &rdd);
+ ovl_path_lower(dentry, &lowerpath);
+ ovl_path_upper(dentry, &upperpath);
+
+ if (upperpath.dentry) {
+  err = ovl_dir_read(&upperpath, &rdd);
   if (err)
    goto out;
 
-  if (lowerpath->dentry) {
-   err = ovl_dir_mark_whiteouts(upperpath->dentry, &rdd);
+  if (lowerpath.dentry) {
+   err = ovl_dir_mark_whiteouts(upperpath.dentry, &rdd);
    if (err)
     goto out;
   }
  }
- if (lowerpath->dentry) {
+ if (lowerpath.dentry) {
   /*
    * Insert lowerpath entries before upperpath ones, this allows
    * offsets to be reasonably constant
    */
   list_add(&rdd.middle, rdd.list);
   rdd.is_merge = true;
-  err = ovl_dir_read(lowerpath, &rdd);
+  err = ovl_dir_read(&lowerpath, &rdd);
   list_del(&rdd.middle);
  }
 out:
@@ -336,8 +339,6 @@ static void ovl_seek_cursor(struct ovl_dir_file *od, loff_t pos)
 static struct ovl_dir_cache *ovl_cache_get(struct dentry *dentry)
 {
  int res;
- struct path lowerpath;
- struct path upperpath;
  struct ovl_dir_cache *cache;
 
  cache = ovl_dir_cache(dentry);
@@ -354,10 +355,7 @@ static struct ovl_dir_cache *ovl_cache_get(struct dentry *dentry)
  cache->refcount = 1;
  INIT_LIST_HEAD(&cache->entries);
 
- ovl_path_lower(dentry, &lowerpath);
- ovl_path_upper(dentry, &upperpath);
-
- res = ovl_dir_read_merged(&upperpath, &lowerpath, &cache->entries);
+ res = ovl_dir_read_merged(dentry, &cache->entries);
  if (res) {
   ovl_cache_free(&cache->entries);
   kfree(cache);
@@ -555,14 +553,9 @@ const struct file_operations ovl_dir_operations = {
 int ovl_check_empty_dir(struct dentry *dentry, struct list_head *list)
 {
  int err;
- struct path lowerpath;
- struct path upperpath;
  struct ovl_cache_entry *p;
 
- ovl_path_upper(dentry, &upperpath);
- ovl_path_lower(dentry, &lowerpath);
-
- err = ovl_dir_read_merged(&upperpath, &lowerpath, list);
+ err = ovl_dir_read_merged(dentry, list);
  if (err)
   return err;
 
-- 
1.7.1