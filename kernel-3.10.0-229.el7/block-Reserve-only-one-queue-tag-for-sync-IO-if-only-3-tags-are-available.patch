From 9fa4bd06979ba77b70026aedac72a3489fb62ee8 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Fri, 13 Jun 2014 14:36:51 -0400
Subject: [block] Reserve only one queue tag for sync IO if only 3 tags are available

Message-id: <1402670238-13916-124-git-send-email-snitzer@redhat.com>
Patchwork-id: 83840
O-Subject: [RHEL7.1 PATCH 123/150] block: Reserve only one queue tag for sync IO if only 3 tags are available
Bugzilla: 1105204
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1105204

Upstream commit a6b3f7614ca690e49e934c291f707b0c19312194
Author: Jan Kara <jack@suse.cz>
Date:   Fri Jun 28 21:32:27 2013 +0200

    block: Reserve only one queue tag for sync IO if only 3 tags are available

    In case a device has three tags available we still reserve two of them
    for sync IO. That leaves only a single tag for async IO such as
    writeback from flusher thread which results in poor performance.

    Allow async IO to consume two tags in case queue has three tag availabe
    to get a decent async write performance.

    This patch improves streaming write performance on a machine with such disk
    from ~21 MB/s to ~52 MB/s. Also postmark throughput in presence of
    streaming writer improves from 8 to 12 transactions per second so sync
    IO doesn't seem to be harmed in presence of heavy async writer.

    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-tag.c b/block/blk-tag.c
index cc345e1..3f33d86 100644
--- a/block/blk-tag.c
+++ b/block/blk-tag.c
@@ -348,9 +348,16 @@ int blk_queue_start_tag(struct request_queue *q, struct request *rq)
   */
  max_depth = bqt->max_depth;
  if (!rq_is_sync(rq) && max_depth > 1) {
-  max_depth -= 2;
-  if (!max_depth)
+  switch (max_depth) {
+  case 2:
    max_depth = 1;
+   break;
+  case 3:
+   max_depth = 2;
+   break;
+  default:
+   max_depth -= 2;
+  }
   if (q->in_flight[BLK_RW_ASYNC] > max_depth)
    return 1;
  }
-- 
1.7.1