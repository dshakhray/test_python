From 80155ea81b017112add35b36437175aee66301a8 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Tue, 11 Nov 2014 18:54:07 -0500
Subject: [md] dm-thin: fix potential for infinite loop in pool_io_hints

Message-id: <20141111185407.GB13675@redhat.com>
Patchwork-id: 99831
O-Subject: [RHEL7.2 PATCH 25/24] dm thin: fix potential for infinite loop in pool_io_hints
Bugzilla: 1156164
RH-Acked-by: Vivek Goyal <vgoyal@redhat.com>
RH-Acked-by: Jeff Moyer <jmoyer@redhat.com>

BZ: 1156164

This fix has been folded into the original commit and rebased, new
upstream linux-dm.git commit is 604ea90641b45f41f8dee34ce45694f1e0c53a5a.

Fix commit "dm thin: adjust max_sectors_kb based on thinp blocksize"
changes that incorrectly assumed rounddown_pow_of_two() would round to
the next power of 2 even if the value passed to rounddown_pow_of_two()
was already a power of 2.

Otherwise, if limits->max_sectors was already a power of 2,
pool_io_hints() could spin in an infinite while loop.  As was reported
when the thin-pool's blocksize was 2560K and max_hw_sectors_kb=1024.

Signed-off-by: Mike Snitzer <snitzer@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index b2087f6..f85f54f 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -3528,12 +3528,18 @@ static void pool_io_hints(struct dm_target *ti, struct queue_limits *limits)
   limits->max_sectors = limits->max_hw_sectors;
 
  if (limits->max_sectors < pool->sectors_per_block) {
-  while (!is_factor(pool->sectors_per_block, limits->max_sectors))
+  while (!is_factor(pool->sectors_per_block, limits->max_sectors)) {
+   if ((limits->max_sectors & (limits->max_sectors - 1)) == 0)
+    limits->max_sectors--;
    limits->max_sectors = rounddown_pow_of_two(limits->max_sectors);
+  }
  } else if (block_size_is_power_of_two(pool)) {
   /* max_sectors_kb is >= power-of-2 thinp blocksize */
-  while (!is_factor(limits->max_sectors, pool->sectors_per_block))
+  while (!is_factor(limits->max_sectors, pool->sectors_per_block)) {
+   if ((limits->max_sectors & (limits->max_sectors - 1)) == 0)
+    limits->max_sectors--;
    limits->max_sectors = rounddown_pow_of_two(limits->max_sectors);
+  }
  }
 
  /*
-- 
1.7.1