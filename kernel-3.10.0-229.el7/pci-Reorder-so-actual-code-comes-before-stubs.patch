From 47513934eaa6a6379463c9d530ea05ce32db01e8 Mon Sep 17 00:00:00 2001
From: Myron Stowe <myron.stowe@redhat.com>
Date: Sat, 19 Jul 2014 04:28:42 -0400
Subject: [pci] Reorder so actual code comes before stubs

Message-id: <20140719042842.19438.94629.stgit@gir.stowe>
Patchwork-id: 86019
O-Subject: [RHEL7.1 PATCH 57/81] PCI: Reorder so actual code comes before stubs
Bugzilla: 1110895
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110895
Upstream Status: 4c85980429f2769bd11c91c7cd90d297aef31fbd

commit 4c85980429f2769bd11c91c7cd90d297aef31fbd
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Jan 13 17:01:11 2014 -0700

    PCI: Reorder so actual code comes before stubs

    Consistently use the:

        #ifdef CONFIG_PCI_FOO
        int pci_foo(...);
        #else
        static inline int pci_foo(...) { return -1; }
        #endif

    pattern, instead of sometimes using "#ifndef CONFIG_PCI_FOO".

    No functional change.

    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pci/pci-label.c b/drivers/pci/pci-label.c
index edaed6f..3f165c6 100644
--- a/drivers/pci/pci-label.c
+++ b/drivers/pci/pci-label.c
@@ -34,21 +34,7 @@
 
 #define DEVICE_LABEL_DSM 0x07
 
-#ifndef CONFIG_DMI
-
-static inline int
-pci_create_smbiosname_file(struct pci_dev *pdev)
-{
- return -1;
-}
-
-static inline void
-pci_remove_smbiosname_file(struct pci_dev *pdev)
-{
-}
-
-#else
-
+#ifdef CONFIG_DMI
 enum smbios_attr_enum {
  SMBIOS_ATTR_NONE = 0,
  SMBIOS_ATTR_LABEL_SHOW,
@@ -156,31 +142,20 @@ pci_remove_smbiosname_file(struct pci_dev *pdev)
 {
  sysfs_remove_group(&pdev->dev.kobj, &smbios_attr_group);
 }
-
-#endif
-
-#ifndef CONFIG_ACPI
-
-static inline int
-pci_create_acpi_index_label_files(struct pci_dev *pdev)
-{
- return -1;
-}
-
+#else
 static inline int
-pci_remove_acpi_index_label_files(struct pci_dev *pdev)
+pci_create_smbiosname_file(struct pci_dev *pdev)
 {
  return -1;
 }
 
-static inline bool
-device_has_dsm(struct device *dev)
+static inline void
+pci_remove_smbiosname_file(struct pci_dev *pdev)
 {
- return false;
 }
+#endif
 
-#else
-
+#ifdef CONFIG_ACPI
 static const char device_label_dsm_uuid[] = {
  0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D,
  0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
@@ -364,6 +339,24 @@ pci_remove_acpi_index_label_files(struct pci_dev *pdev)
  sysfs_remove_group(&pdev->dev.kobj, &acpi_attr_group);
  return 0;
 }
+#else
+static inline int
+pci_create_acpi_index_label_files(struct pci_dev *pdev)
+{
+ return -1;
+}
+
+static inline int
+pci_remove_acpi_index_label_files(struct pci_dev *pdev)
+{
+ return -1;
+}
+
+static inline bool
+device_has_dsm(struct device *dev)
+{
+ return false;
+}
 #endif
 
 void pci_create_firmware_label_files(struct pci_dev *pdev)
diff --git a/include/linux/pci.h b/include/linux/pci.h
index e3d0fc3..62f30b6 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1173,7 +1173,22 @@ struct msix_entry {
 };
 
 
-#ifndef CONFIG_PCI_MSI
+#ifdef CONFIG_PCI_MSI
+int pci_msi_vec_count(struct pci_dev *dev);
+int pci_enable_msi_block(struct pci_dev *dev, int nvec);
+void pci_msi_shutdown(struct pci_dev *dev);
+void pci_disable_msi(struct pci_dev *dev);
+int pci_msix_vec_count(struct pci_dev *dev);
+int pci_enable_msix(struct pci_dev *dev, struct msix_entry *entries, int nvec);
+void pci_msix_shutdown(struct pci_dev *dev);
+void pci_disable_msix(struct pci_dev *dev);
+void msi_remove_pci_irq_vectors(struct pci_dev *dev);
+void pci_restore_msi_state(struct pci_dev *dev);
+int pci_msi_enabled(void);
+int pci_enable_msi_range(struct pci_dev *dev, int minvec, int maxvec);
+int pci_enable_msix_range(struct pci_dev *dev, struct msix_entry *entries,
+     int minvec, int maxvec);
+#else
 static inline int pci_msi_vec_count(struct pci_dev *dev)
 {
  return -ENOSYS;
@@ -1224,21 +1239,6 @@ static inline int pci_enable_msix_range(struct pci_dev *dev,
 {
  return -ENOSYS;
 }
-#else
-int pci_msi_vec_count(struct pci_dev *dev);
-int pci_enable_msi_block(struct pci_dev *dev, int nvec);
-void pci_msi_shutdown(struct pci_dev *dev);
-void pci_disable_msi(struct pci_dev *dev);
-int pci_msix_vec_count(struct pci_dev *dev);
-int pci_enable_msix(struct pci_dev *dev, struct msix_entry *entries, int nvec);
-void pci_msix_shutdown(struct pci_dev *dev);
-void pci_disable_msix(struct pci_dev *dev);
-void msi_remove_pci_irq_vectors(struct pci_dev *dev);
-void pci_restore_msi_state(struct pci_dev *dev);
-int pci_msi_enabled(void);
-int pci_enable_msi_range(struct pci_dev *dev, int minvec, int maxvec);
-int pci_enable_msix_range(struct pci_dev *dev, struct msix_entry *entries,
-     int minvec, int maxvec);
 #endif
 
 #ifdef CONFIG_PCIEPORTBUS
@@ -1249,10 +1249,10 @@ extern bool pcie_ports_auto;
 #define pcie_ports_auto  false
 #endif
 
-#ifndef CONFIG_PCIEASPM
-static inline bool pcie_aspm_support_enabled(void) { return false; }
-#else
+#ifdef CONFIG_PCIEASPM
 bool pcie_aspm_support_enabled(void);
+#else
+static inline bool pcie_aspm_support_enabled(void) { return false; }
 #endif
 
 #ifdef CONFIG_PCIEAER
@@ -1263,15 +1263,15 @@ static inline void pci_no_aer(void) { }
 static inline bool pci_aer_available(void) { return false; }
 #endif
 
-#ifndef CONFIG_PCIE_ECRC
+#ifdef CONFIG_PCIE_ECRC
+void pcie_set_ecrc_checking(struct pci_dev *dev);
+void pcie_ecrc_get_policy(char *str);
+#else
 static inline void pcie_set_ecrc_checking(struct pci_dev *dev)
 {
  return;
 }
 static inline void pcie_ecrc_get_policy(char *str) {};
-#else
-void pcie_set_ecrc_checking(struct pci_dev *dev);
-void pcie_ecrc_get_policy(char *str);
 #endif
 
 #define pci_enable_msi(pdev) pci_enable_msi_block(pdev, 1)
-- 
1.7.1