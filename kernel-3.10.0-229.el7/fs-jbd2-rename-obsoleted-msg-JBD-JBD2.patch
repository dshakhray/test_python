From 13707859f36c714144ab090ed97e5f50fa75bba5 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:02 -0400
Subject: [fs] jbd2: rename obsoleted msg JBD->JBD2

Message-id: <1414058125-4183-89-git-send-email-lczerner@redhat.com>
Patchwork-id: 98183
O-Subject: [RHEL 7.1 PATCH v2 088/171] jbd2: rename obsoleted msg JBD->JBD2
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Dmitry Monakhov <dmonakhov@openvz.org>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit a67c848a8b9aa9e471f9eaadd2cb29cc527462cf

 Rename performed via: perl -pi -e 's/JBD:/JBD2:/g' fs/jbd2/*.c

 Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Reviewed-by: Carlos Maiolino <cmaiolino@redhat.com>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/jbd2/journal.c b/fs/jbd2/journal.c
index f66faed..5fa344a 100644
--- a/fs/jbd2/journal.c
+++ b/fs/jbd2/journal.c
@@ -1525,13 +1525,13 @@ static int journal_get_superblock(journal_t *journal)
  if (JBD2_HAS_COMPAT_FEATURE(journal, JBD2_FEATURE_COMPAT_CHECKSUM) &&
      JBD2_HAS_INCOMPAT_FEATURE(journal, JBD2_FEATURE_INCOMPAT_CSUM_V2)) {
   /* Can't have checksum v1 and v2 on at the same time! */
-  printk(KERN_ERR "JBD: Can't enable checksumming v1 and v2 "
+  printk(KERN_ERR "JBD2: Can't enable checksumming v1 and v2 "
          "at the same time!\n");
   goto out;
  }
 
  if (!jbd2_verify_csum_type(journal, sb)) {
-  printk(KERN_ERR "JBD: Unknown checksum type\n");
+  printk(KERN_ERR "JBD2: Unknown checksum type\n");
   goto out;
  }
 
@@ -1539,7 +1539,7 @@ static int journal_get_superblock(journal_t *journal)
  if (JBD2_HAS_INCOMPAT_FEATURE(journal, JBD2_FEATURE_INCOMPAT_CSUM_V2)) {
   journal->j_chksum_driver = crypto_alloc_shash("crc32c", 0, 0);
   if (IS_ERR(journal->j_chksum_driver)) {
-   printk(KERN_ERR "JBD: Cannot load crc32c driver.\n");
+   printk(KERN_ERR "JBD2: Cannot load crc32c driver.\n");
    err = PTR_ERR(journal->j_chksum_driver);
    journal->j_chksum_driver = NULL;
    goto out;
@@ -1548,7 +1548,7 @@ static int journal_get_superblock(journal_t *journal)
 
  /* Check superblock checksum */
  if (!jbd2_superblock_csum_verify(journal, sb)) {
-  printk(KERN_ERR "JBD: journal checksum error\n");
+  printk(KERN_ERR "JBD2: journal checksum error\n");
   goto out;
  }
 
@@ -1834,7 +1834,7 @@ int jbd2_journal_set_features (journal_t *journal, unsigned long compat,
    journal->j_chksum_driver = crypto_alloc_shash("crc32c",
               0, 0);
    if (IS_ERR(journal->j_chksum_driver)) {
-    printk(KERN_ERR "JBD: Cannot load crc32c "
+    printk(KERN_ERR "JBD2: Cannot load crc32c "
            "driver.\n");
     journal->j_chksum_driver = NULL;
     return 0;
diff --git a/fs/jbd2/recovery.c b/fs/jbd2/recovery.c
index 3929c50..3b6bb19 100644
--- a/fs/jbd2/recovery.c
+++ b/fs/jbd2/recovery.c
@@ -594,7 +594,7 @@ static int do_one_pass(journal_t *journal,
       be32_to_cpu(tmp->h_sequence))) {
       brelse(obh);
       success = -EIO;
-      printk(KERN_ERR "JBD: Invalid "
+      printk(KERN_ERR "JBD2: Invalid "
              "checksum recovering "
              "block %llu in log\n",
              blocknr);
diff --git a/fs/jbd2/transaction.c b/fs/jbd2/transaction.c
index 80797cf..8360674 100644
--- a/fs/jbd2/transaction.c
+++ b/fs/jbd2/transaction.c
@@ -1308,7 +1308,7 @@ int jbd2_journal_dirty_metadata(handle_t *handle, struct buffer_head *bh)
   JBUFFER_TRACE(jh, "fastpath");
   if (unlikely(jh->b_transaction !=
         journal->j_running_transaction)) {
-   printk(KERN_ERR "JBD: %s: "
+   printk(KERN_ERR "JBD2: %s: "
           "jh->b_transaction (%llu, %p, %u) != "
           "journal->j_running_transaction (%p, %u)",
           journal->j_devname,
@@ -1335,7 +1335,7 @@ int jbd2_journal_dirty_metadata(handle_t *handle, struct buffer_head *bh)
   JBUFFER_TRACE(jh, "already on other transaction");
   if (unlikely(jh->b_transaction !=
         journal->j_committing_transaction)) {
-   printk(KERN_ERR "JBD: %s: "
+   printk(KERN_ERR "JBD2: %s: "
           "jh->b_transaction (%llu, %p, %u) != "
           "journal->j_committing_transaction (%p, %u)",
           journal->j_devname,
@@ -1348,7 +1348,7 @@ int jbd2_journal_dirty_metadata(handle_t *handle, struct buffer_head *bh)
    ret = -EINVAL;
   }
   if (unlikely(jh->b_next_transaction != transaction)) {
-   printk(KERN_ERR "JBD: %s: "
+   printk(KERN_ERR "JBD2: %s: "
           "jh->b_next_transaction (%llu, %p, %u) != "
           "transaction (%p, %u)",
           journal->j_devname,
-- 
1.7.1