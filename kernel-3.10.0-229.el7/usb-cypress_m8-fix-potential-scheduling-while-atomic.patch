From 1ed67ac3f47f6c1056435ff7ca8723779abaf114 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:07:06 -0400
Subject: [usb] cypress_m8: fix potential scheduling while atomic

Message-id: <1410887463-20674-355-git-send-email-dzickus@redhat.com>
Patchwork-id: 95523
O-Subject: [RHEL7 PATCH 354/591] USB: cypress_m8: fix potential scheduling while atomic
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit d7c933ae7da0d0b112bfc7e86424d780aaeb2d2c
Author: Johan Hovold <jhovold@gmail.com>
Date:   Wed Mar 12 19:09:37 2014 +0100

    USB: cypress_m8: fix potential scheduling while atomic

    Remove erroneous call to usb_clear_halt which is blocking and cannot be
    used in interrupt context.

    This code has possibly never been executed as it would cause an oops if
    it was. Simply treat a stalled-endpoint error as any other error
    condition.

    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/serial/cypress_m8.c b/drivers/usb/serial/cypress_m8.c
index bccb122..634f0d6 100644
--- a/drivers/usb/serial/cypress_m8.c
+++ b/drivers/usb/serial/cypress_m8.c
@@ -1224,7 +1224,6 @@ static void cypress_write_int_callback(struct urb *urb)
  struct usb_serial_port *port = urb->context;
  struct cypress_private *priv = usb_get_serial_port_data(port);
  struct device *dev = &urb->dev->dev;
- int result;
  int status = urb->status;
 
  switch (status) {
@@ -1239,21 +1238,9 @@ static void cypress_write_int_callback(struct urb *urb)
    __func__, status);
   priv->write_urb_in_use = 0;
   return;
- case -EPIPE: /* no break needed; clear halt and resubmit */
-  if (!priv->comm_is_ok)
-   break;
-  usb_clear_halt(port->serial->dev, 0x02);
-  /* error in the urb, so we have to resubmit it */
-  dev_dbg(dev, "%s - nonzero write bulk status received: %d\n",
-   __func__, status);
-  port->interrupt_out_urb->transfer_buffer_length = 1;
-  result = usb_submit_urb(port->interrupt_out_urb, GFP_ATOMIC);
-  if (!result)
-   return;
-  dev_err(dev, "%s - failed resubmitting write urb, error %d\n",
-   __func__, result);
-  cypress_set_dead(port);
-  break;
+ case -EPIPE:
+  /* Cannot call usb_clear_halt while in_interrupt */
+  /* FALLTHROUGH */
  default:
   dev_err(dev, "%s - unexpected nonzero write status received: %d\n",
    __func__, status);
-- 
1.7.1