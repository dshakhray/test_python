From b073104e0ce84e098c64e209b1643a1950a5ffb2 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Mon, 16 Jun 2014 12:56:00 -0400
Subject: [s390] sclp_early: Pass sccb pointer to every *_detect() function

Message-id: <1402923362-2331-10-git-send-email-brueckner@redhat.com>
Patchwork-id: 84034
O-Subject: [RHEL7.1 PATCH 09/11] [s390] s390/sclp_early: Pass sccb pointer to every *_detect() function
Bugzilla: 1107730
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Description
-----------
commit 5d5de1a068efffb0dcc03235e6fa258201096f02
Author: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
Date:   Thu Dec 5 19:13:36 2013 +0100

    s390/sclp_early: Pass sccb pointer to every *_detect() function

    Add a sccb pointer parameter to *_detect() functions instead of accessing
    the global sccb_early variable directly.

    Signed-off-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Reviewed-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1107730
https://bugzilla.redhat.com/show_bug.cgi?id=1107730

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=5d5de1a068efffb0dcc03235e6fa258201096f02

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7572070

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/char/sclp_early.c b/drivers/s390/char/sclp_early.c
index dc4ed04..1af3555 100644
--- a/drivers/s390/char/sclp_early.c
+++ b/drivers/s390/char/sclp_early.c
@@ -87,10 +87,8 @@ static int __init sclp_read_info_early(struct read_info_sccb *sccb)
  return -EIO;
 }
 
-static void __init sclp_facilities_detect(void)
+static void __init sclp_facilities_detect(struct read_info_sccb *sccb)
 {
- struct read_info_sccb *sccb = (void *) &sccb_early;
-
  if (sclp_read_info_early(sccb))
   return;
 
@@ -181,11 +179,10 @@ static void __init sccb_init_eq_size(struct sdias_sccb *sccb)
  sccb->evbuf.dbs = 1;
 }
 
-static int __init sclp_set_event_mask(unsigned long receive_mask,
+static int __init sclp_set_event_mask(struct init_sccb *sccb,
+          unsigned long receive_mask,
           unsigned long send_mask)
 {
- struct init_sccb *sccb = (void *) &sccb_early;
-
  memset(sccb, 0, sizeof(*sccb));
  sccb->header.length = sizeof(*sccb);
  sccb->mask_length = sizeof(sccb_mask_t);
@@ -194,10 +191,8 @@ static int __init sclp_set_event_mask(unsigned long receive_mask,
  return sclp_cmd_early(SCLP_CMDW_WRITE_EVENT_MASK, sccb);
 }
 
-static long __init sclp_hsa_size_init(void)
+static long __init sclp_hsa_size_init(struct sdias_sccb *sccb)
 {
- struct sdias_sccb *sccb = (void *) &sccb_early;
-
  sccb_init_eq_size(sccb);
  if (sclp_cmd_early(SCLP_CMDW_WRITE_EVENT_DATA, sccb))
   return -EIO;
@@ -206,10 +201,8 @@ static long __init sclp_hsa_size_init(void)
  return 0;
 }
 
-static long __init sclp_hsa_copy_wait(void)
+static long __init sclp_hsa_copy_wait(struct sccb_header *sccb)
 {
- struct sccb_header *sccb = (void *) &sccb_early;
-
  memset(sccb, 0, PAGE_SIZE);
  sccb->length = PAGE_SIZE;
  if (sclp_cmd_early(SCLP_CMDW_READ_EVENT_DATA, sccb))
@@ -222,25 +215,25 @@ unsigned long sclp_get_hsa_size(void)
  return sclp_hsa_size;
 }
 
-static void __init sclp_hsa_size_detect(void)
+static void __init sclp_hsa_size_detect(void *sccb)
 {
  long size;
 
  /* First try synchronous interface (LPAR) */
- if (sclp_set_event_mask(0, 0x40000010))
+ if (sclp_set_event_mask(sccb, 0, 0x40000010))
   return;
- size = sclp_hsa_size_init();
+ size = sclp_hsa_size_init(sccb);
  if (size < 0)
   return;
  if (size != 0)
   goto out;
  /* Then try asynchronous interface (z/VM) */
- if (sclp_set_event_mask(0x00000010, 0x40000010))
+ if (sclp_set_event_mask(sccb, 0x00000010, 0x40000010))
   return;
- size = sclp_hsa_size_init();
+ size = sclp_hsa_size_init(sccb);
  if (size < 0)
   return;
- size = sclp_hsa_copy_wait();
+ size = sclp_hsa_copy_wait(sccb);
  if (size < 0)
   return;
 out:
@@ -249,7 +242,9 @@ out:
 
 void __init sclp_early_detect(void)
 {
- sclp_facilities_detect();
- sclp_hsa_size_detect();
- sclp_set_event_mask(0, 0);
+ void *sccb = &sccb_early;
+
+ sclp_facilities_detect(sccb);
+ sclp_hsa_size_detect(sccb);
+ sclp_set_event_mask(sccb, 0, 0);
 }
-- 
1.7.1