From df4bd857b085cf76a2571de2e91b885d60cb3526 Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@redhat.com>
Date: Mon, 1 Sep 2014 09:25:20 -0400
Subject: [kernel] wait: add wait_event_cmd()

Message-id: <1409563584-9000-19-git-send-email-Jes.Sorensen@redhat.com>
Patchwork-id: 89979
O-Subject: [RHEL7.1 PATCH 18/82] wait: add wait_event_cmd()
Bugzilla: 1085530
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

From: Shaohua Li <shli@kernel.org>

Add a new API wait_event_cmd(). It's a variant of wait_even() with two
commands executed. One is executed before sleep, another after sleep.

Modified to match use wait.h approach based on suggestion by
Peter Zijlstra <peterz@infradead.org> - neilb

Signed-off-by: Shaohua Li <shli@fusionio.com>
Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit 82e06c811163c4d853ed335d56c3378088bc89cc)
Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 include/linux/wait.h
Caused by context - no actual changes required.
---

diff --git a/include/linux/wait.h b/include/linux/wait.h
index 3f49773..0793a07 100644
--- a/include/linux/wait.h
+++ b/include/linux/wait.h
@@ -302,6 +302,31 @@ do {         \
  finish_wait(&wq, &__wait);     \
 } while (0)
 
+#define __wait_event_cmd(wq, condition, cmd1, cmd2)   \
+ (void)___wait_event(wq, condition, TASK_UNINTERRUPTIBLE, 0, 0, \
+       cmd1; schedule(); cmd2)
+
+/**
+ * wait_event_cmd - sleep until a condition gets true
+ * @wq: the waitqueue to wait on
+ * @condition: a C expression for the event to wait for
+ * cmd1: the command will be executed before sleep
+ * cmd2: the command will be executed after sleep
+ *
+ * The process is put to sleep (TASK_UNINTERRUPTIBLE) until the
+ * @condition evaluates to true. The @condition is checked each time
+ * the waitqueue @wq is woken up.
+ *
+ * wake_up() has to be called after changing any variable that could
+ * change the result of the wait condition.
+ */
+#define wait_event_cmd(wq, condition, cmd1, cmd2)   \
+do {         \
+ if (condition)       \
+  break;       \
+ __wait_event_cmd(wq, condition, cmd1, cmd2);   \
+} while (0)
+
 /**
  * wait_event_interruptible - sleep until a condition gets true
  * @wq: the waitqueue to wait on
-- 
1.7.1