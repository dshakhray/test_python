From d6304551cc42d3a4c3521203ebeaa7db5002d457 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:00 -0400
Subject: [cpufreq] preserve user_policy across suspend/resume

Message-id: <1409235879-1283-87-git-send-email-prarit@redhat.com>
Patchwork-id: 89418
O-Subject: [RHEL7.1 PATCH BZ 1134639 086/185] cpufreq: preserve user_policy across suspend/resume
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 08fd8c1cf0a99abf34e09a8b99b74872e0d73a23
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Dec 24 07:11:01 2013 +0530

    cpufreq: preserve user_policy across suspend/resume

    Prevent __cpufreq_add_dev() from overwriting the existing values of
    user_policy.{min|max|policy|governor} with defaults during resume
    from system suspend.

    Fixes: 5302c3fb2e62 ("cpufreq: Perform light-weight init/teardown during suspend/resume")
    Reported-by: Bjorn Mork <bjorn@mork.no>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: 3.12+ <stable@vger.kernel.org> # 3.12+
    [rjw: Changelog]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index b520fc1..fbcfbb8 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -833,9 +833,6 @@ static void cpufreq_init_policy(struct cpufreq_policy *policy)
 
  /* set default policy */
  ret = cpufreq_set_policy(policy, &new_policy);
- policy->user_policy.policy = policy->policy;
- policy->user_policy.governor = policy->governor;
-
  if (ret) {
   pr_debug("setting policy failed\n");
   if (cpufreq_driver->exit)
@@ -1065,8 +1062,10 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   */
  cpumask_and(policy->cpus, policy->cpus, cpu_online_mask);
 
- policy->user_policy.min = policy->min;
- policy->user_policy.max = policy->max;
+ if (!frozen) {
+  policy->user_policy.min = policy->min;
+  policy->user_policy.max = policy->max;
+ }
 
  blocking_notifier_call_chain(&cpufreq_policy_notifier_list,
          CPUFREQ_START, policy);
@@ -1097,6 +1096,11 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
 
  cpufreq_init_policy(policy);
 
+ if (!frozen) {
+  policy->user_policy.policy = policy->policy;
+  policy->user_policy.governor = policy->governor;
+ }
+
  kobject_uevent(&policy->kobj, KOBJ_ADD);
  up_read(&cpufreq_rwsem);
  pr_debug("initialization complete\n");
-- 
1.7.1