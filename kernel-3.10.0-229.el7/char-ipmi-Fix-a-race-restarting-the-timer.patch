From 681a37845212e01ebd0e829b00a80f3cafc483de Mon Sep 17 00:00:00 2001
From: Tony Camuso <tcamuso@redhat.com>
Date: Fri, 8 Aug 2014 18:14:44 -0400
Subject: [char] ipmi: Fix a race restarting the timer

Message-id: <1407521687-4858-11-git-send-email-tcamuso@redhat.com>
Patchwork-id: 87553
O-Subject: [RHEL7.1 PATCH 10/13] ipmi: Fix a race restarting the timer
Bugzilla: 1111214
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1111214

Cherry-picked without conflicts from the following upstream commit.

commit 48e8ac2979920ffa39117e2d725afa3a749bfe8d
Author: Bodo Stroesser <bstroesser@ts.fujitsu.com>
Date:   Mon Apr 14 09:46:51 2014 -0500

    ipmi: Fix a race restarting the timer

    With recent changes it is possible for the timer handler to detect an
    idle interface and not start the timer, but the thread to start an
    operation at the same time.  The thread will not start the timer in that
    instance, resulting in the timer not running.

    Instead, move all timer operations under the lock and start the timer in
    the thread if it detect non-idle and the timer is not already running.
    Moving under locks allows the last timeout to be set in both the thread
    and the timer.  'Timer is not running' means that the timer is not
    pending and smi_timeout() is not running.  So we need a flag to detect
    this correctly.

    Also fix a few other timeout bugs: setting the last timeout when the
    interrupt has to be disabled and the timer started, and setting the last
    timeout in check_start_timer_thread possibly racing with the timer

    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Bodo Stroesser <bstroesser@ts.fujitsu.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Tony Camuso <tcamuso@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/char/ipmi/ipmi_si_intf.c b/drivers/char/ipmi/ipmi_si_intf.c
index 9c256bd..7af21dc 100644
--- a/drivers/char/ipmi/ipmi_si_intf.c
+++ b/drivers/char/ipmi/ipmi_si_intf.c
@@ -243,6 +243,9 @@ struct smi_info {
  /* The timer for this si. */
  struct timer_list   si_timer;
 
+ /* This flag is set, if the timer is running (timer_pending() isn't enough) */
+ bool      timer_running;
+
  /* The time (in jiffies) the last timeout occurred at. */
  unsigned long       last_timeout_jiffies;
 
@@ -426,6 +429,13 @@ static void start_clear_flags(struct smi_info *smi_info)
  smi_info->si_state = SI_CLEARING_FLAGS;
 }
 
+static void smi_mod_timer(struct smi_info *smi_info, unsigned long new_val)
+{
+ smi_info->last_timeout_jiffies = jiffies;
+ mod_timer(&smi_info->si_timer, new_val);
+ smi_info->timer_running = true;
+}
+
 /*
  * When we have a situtaion where we run out of memory and cannot
  * allocate messages, we just leave them in the BMC and run the system
@@ -438,8 +448,7 @@ static inline void disable_si_irq(struct smi_info *smi_info)
   start_disable_irq(smi_info);
   smi_info->interrupt_disabled = 1;
   if (!atomic_read(&smi_info->stop_operation))
-   mod_timer(&smi_info->si_timer,
-      jiffies + SI_TIMEOUT_JIFFIES);
+   smi_mod_timer(smi_info, jiffies + SI_TIMEOUT_JIFFIES);
  }
 }
 
@@ -899,15 +908,7 @@ static void sender(void                *send_info,
   list_add_tail(&msg->link, &smi_info->xmit_msgs);
 
  if (smi_info->si_state == SI_NORMAL && smi_info->curr_msg == NULL) {
-  /*
-   * last_timeout_jiffies is updated here to avoid
-   * smi_timeout() handler passing very large time_diff
-   * value to smi_event_handler() that causes
-   * the send command to abort.
-   */
-  smi_info->last_timeout_jiffies = jiffies;
-
-  mod_timer(&smi_info->si_timer, jiffies + SI_TIMEOUT_JIFFIES);
+  smi_mod_timer(smi_info, jiffies + SI_TIMEOUT_JIFFIES);
 
   if (smi_info->thread)
    wake_up_process(smi_info->thread);
@@ -996,6 +997,17 @@ static int ipmi_thread(void *data)
 
   spin_lock_irqsave(&(smi_info->si_lock), flags);
   smi_result = smi_event_handler(smi_info, 0);
+
+  /*
+   * If the driver is doing something, there is a possible
+   * race with the timer.  If the timer handler see idle,
+   * and the thread here sees something else, the timer
+   * handler won't restart the timer even though it is
+   * required.  So start it here if necessary.
+   */
+  if (smi_result != SI_SM_IDLE && !smi_info->timer_running)
+   smi_mod_timer(smi_info, jiffies + SI_TIMEOUT_JIFFIES);
+
   spin_unlock_irqrestore(&(smi_info->si_lock), flags);
   busy_wait = ipmi_thread_busy_wait(smi_result, smi_info,
         &busy_until);
@@ -1065,10 +1077,6 @@ static void smi_timeout(unsigned long data)
        * SI_USEC_PER_JIFFY);
  smi_result = smi_event_handler(smi_info, time_diff);
 
- spin_unlock_irqrestore(&(smi_info->si_lock), flags);
-
- smi_info->last_timeout_jiffies = jiffies_now;
-
  if ((smi_info->irq) && (!smi_info->interrupt_disabled)) {
   /* Running with interrupts, only do long timeouts. */
   timeout = jiffies + SI_TIMEOUT_JIFFIES;
@@ -1090,7 +1098,10 @@ static void smi_timeout(unsigned long data)
 
  do_mod_timer:
  if (smi_result != SI_SM_IDLE)
-  mod_timer(&(smi_info->si_timer), timeout);
+  smi_mod_timer(smi_info, timeout);
+ else
+  smi_info->timer_running = false;
+ spin_unlock_irqrestore(&(smi_info->si_lock), flags);
 }
 
 static irqreturn_t si_irq_handler(int irq, void *data)
@@ -1138,8 +1149,7 @@ static int smi_start_processing(void       *send_info,
 
  /* Set up the timer that drives the interface. */
  setup_timer(&new_smi->si_timer, smi_timeout, (long)new_smi);
- new_smi->last_timeout_jiffies = jiffies;
- mod_timer(&new_smi->si_timer, jiffies + SI_TIMEOUT_JIFFIES);
+ smi_mod_timer(new_smi, jiffies + SI_TIMEOUT_JIFFIES);
 
  /*
   * Check if the user forcefully enabled the daemon.
-- 
1.7.1