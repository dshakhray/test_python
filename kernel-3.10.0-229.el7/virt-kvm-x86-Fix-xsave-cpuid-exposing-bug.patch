From 8d674bd721b3d13f8b6f24999efc04622fc6c457 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:38:59 -0400
Subject: [virt] kvm/x86: Fix xsave cpuid exposing bug

Message-id: <1406040016-3289-145-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86223
O-Subject: [RHEL7 PATCH v2 144/221] KVM: x86: Fix xsave cpuid exposing bug
Bugzilla: 1076194 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: "Liu, Jinsong" <jinsong.liu@intel.com>

EBX of cpuid(0xD, 0) is dynamic per XCR0 features enable/disable.
Bit 63 of XCR0 is reserved for future expansion.

Signed-off-by: Liu Jinsong <jinsong.liu@intel.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 56c103ec040b1944c8866f79aa768265c0dd2986)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/include/asm/xsave.h b/arch/x86/include/asm/xsave.h
index 0415cda..b9e4932 100644
--- a/arch/x86/include/asm/xsave.h
+++ b/arch/x86/include/asm/xsave.h
@@ -11,6 +11,8 @@
 #define XSTATE_YMM 0x4
 
 #define XSTATE_FPSSE (XSTATE_FP | XSTATE_SSE)
+/* Bit 63 of XCR0 is reserved for future expansion */
+#define XSTATE_EXTEND_MASK (~(XSTATE_FPSSE | (1ULL << 63)))
 
 #define FXSAVE_SIZE 512
 
diff --git a/arch/x86/kvm/cpuid.c b/arch/x86/kvm/cpuid.c
index 246bc71..6f71c0a 100644
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@ -28,7 +28,7 @@ static u32 xstate_required_size(u64 xstate_bv)
  int feature_bit = 0;
  u32 ret = XSAVE_HDR_SIZE + XSAVE_HDR_OFFSET;
 
- xstate_bv &= ~XSTATE_FPSSE;
+ xstate_bv &= XSTATE_EXTEND_MASK;
  while (xstate_bv) {
   if (xstate_bv & 0x1) {
           u32 eax, ebx, ecx, edx;
@@ -74,8 +74,8 @@ void kvm_update_cpuid(struct kvm_vcpu *vcpu)
   vcpu->arch.guest_supported_xcr0 =
    (best->eax | ((u64)best->edx << 32)) &
    host_xcr0 & KVM_SUPPORTED_XCR0;
-  vcpu->arch.guest_xstate_size =
-   xstate_required_size(vcpu->arch.guest_supported_xcr0);
+  vcpu->arch.guest_xstate_size = best->ebx =
+   xstate_required_size(vcpu->arch.xcr0);
  }
 
  kvm_pmu_cpuid_update(vcpu);
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 88d67e8..8f774c3 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -597,13 +597,13 @@ static void kvm_put_guest_xcr0(struct kvm_vcpu *vcpu)
 
 int __kvm_set_xcr(struct kvm_vcpu *vcpu, u32 index, u64 xcr)
 {
- u64 xcr0;
+ u64 xcr0 = xcr;
+ u64 old_xcr0 = vcpu->arch.xcr0;
  u64 valid_bits;
 
  /* Only support XCR_XFEATURE_ENABLED_MASK(xcr0) now  */
  if (index != XCR_XFEATURE_ENABLED_MASK)
   return 1;
- xcr0 = xcr;
  if (!(xcr0 & XSTATE_FP))
   return 1;
  if ((xcr0 & XSTATE_YMM) && !(xcr0 & XSTATE_SSE))
@@ -620,6 +620,9 @@ int __kvm_set_xcr(struct kvm_vcpu *vcpu, u32 index, u64 xcr)
 
  kvm_put_guest_xcr0(vcpu);
  vcpu->arch.xcr0 = xcr0;
+
+ if ((xcr0 ^ old_xcr0) & XSTATE_EXTEND_MASK)
+  kvm_update_cpuid(vcpu);
  return 0;
 }
 
-- 
1.7.1