From e7d800dc4b1daa1440383becb3fed7276e21c6d6 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Wed, 17 Dec 2014 17:55:47 -0500
Subject: [md] dm-thin: fix crash by initializing thin device's refcount and completion earlier

Message-id: <1418838947-28810-1-git-send-email-snitzer@redhat.com>
Patchwork-id: 102136
O-Subject: [RHEL7.1 PATCH] dm thin: fix crash by initializing thin device's refcount and completion earlier
Bugzilla: 1175282
RH-Acked-by: Heinz Mauelshagen <heinzm@redhat.com>
RH-Acked-by: Joe Thornber <thornber@redhat.com>
RH-Acked-by: Alasdair Kergon <agk@redhat.com>

BZ: 1175282

Upstream linux-dm.git commit 2b94e8960cc3f225dec058f27570505351f4bc13
Author: Marc Dionne <marc.c.dionne@gmail.com>
Date:   Wed Dec 17 07:59:59 2014 -0500

    dm thin: fix crash by initializing thin device's refcount and completion earlier

    Commit 80e96c5484be ("dm thin: do not allow thin device activation
    while pool is suspended") delayed the initialization of a new thin
    device's refcount and completion until after this new thin was added
    to the pool's active_thins list and the pool lock is released.  This
    opens a race with a worker thread that walks the list and calls
    thin_get/put, noticing that the refcount goes to 0 and calling
    complete, freezing up the system and giving the oops below:

     kernel: BUG: unable to handle kernel NULL pointer dereference at           (null)
     kernel: IP: [<ffffffff810d360b>] __wake_up_common+0x2b/0x90

     kernel: Call Trace:
     kernel: [<ffffffff810d3683>] __wake_up_locked+0x13/0x20
     kernel: [<ffffffff810d3dc7>] complete+0x37/0x50
     kernel: [<ffffffffa0595c50>] thin_put+0x20/0x30 [dm_thin_pool]
     kernel: [<ffffffffa059aab7>] do_worker+0x667/0x870 [dm_thin_pool]
     kernel: [<ffffffff816a8a4c>] ? __schedule+0x3ac/0x9a0
     kernel: [<ffffffff810b1aef>] process_one_work+0x14f/0x400
     kernel: [<ffffffff810b206b>] worker_thread+0x6b/0x490
     kernel: [<ffffffff810b2000>] ? rescuer_thread+0x260/0x260
     kernel: [<ffffffff810b6a7b>] kthread+0xdb/0x100
     kernel: [<ffffffff810b69a0>] ? kthread_create_on_node+0x170/0x170
     kernel: [<ffffffff816ad7ec>] ret_from_fork+0x7c/0xb0
     kernel: [<ffffffff810b69a0>] ? kthread_create_on_node+0x170/0x170

    Set the thin device's initial refcount and initialize the completion
    before adding it to the pool's active_thins list in thin_ctr().

    Signed-off-by: Marc Dionne <marc.dionne@your-file-system.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index 703a9d4..f77492a 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -3826,6 +3826,8 @@ static int thin_ctr(struct dm_target *ti, unsigned argc, char **argv)
   r = -EINVAL;
   goto bad;
  }
+ atomic_set(&tc->refcount, 1);
+ init_completion(&tc->can_destroy);
  list_add_tail_rcu(&tc->list, &tc->pool->active_thins);
  spin_unlock_irqrestore(&tc->pool->lock, flags);
  /*
@@ -3838,9 +3840,6 @@ static int thin_ctr(struct dm_target *ti, unsigned argc, char **argv)
 
  dm_put(pool_md);
 
- atomic_set(&tc->refcount, 1);
- init_completion(&tc->can_destroy);
-
  return 0;
 
 bad:
-- 
1.7.1