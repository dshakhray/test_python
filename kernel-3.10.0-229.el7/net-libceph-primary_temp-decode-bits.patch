From ee5fe174be935c043e36af8393a623d912c90dd6 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:25:18 -0400
Subject: [net] libceph: primary_temp decode bits
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-212-git-send-email-sweil@redhat.com>
Patchwork-id: 89833
O-Subject: [PATCH 211/303] libceph: primary_temp decode bits
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

Add a common helper to decode both primary_temp (full map, map<pg_t,
u32>) and new_primary_temp (inc map, same) and switch to it.

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Alex Elder <elder@linaro.org>
(cherry picked from commit d286de796aab9e306e674c6d23c4f3c1f55e394c)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ceph/osdmap.c b/net/ceph/osdmap.c
index c0fc517..c2d793d 100644
--- a/net/ceph/osdmap.c
+++ b/net/ceph/osdmap.c
@@ -857,6 +857,61 @@ static int decode_new_pg_temp(void **p, void *end, struct ceph_osdmap *map)
  return __decode_pg_temp(p, end, map, true);
 }
 
+static int __decode_primary_temp(void **p, void *end, struct ceph_osdmap *map,
+     bool incremental)
+{
+ u32 n;
+
+ ceph_decode_32_safe(p, end, n, e_inval);
+ while (n--) {
+  struct ceph_pg pgid;
+  u32 osd;
+  int ret;
+
+  ret = ceph_decode_pgid(p, end, &pgid);
+  if (ret)
+   return ret;
+
+  ceph_decode_32_safe(p, end, osd, e_inval);
+
+  ret = __remove_pg_mapping(&map->primary_temp, pgid);
+  BUG_ON(!incremental && ret != -ENOENT);
+
+  if (!incremental || osd != (u32)-1) {
+   struct ceph_pg_mapping *pg;
+
+   pg = kzalloc(sizeof(*pg), GFP_NOFS);
+   if (!pg)
+    return -ENOMEM;
+
+   pg->pgid = pgid;
+   pg->primary_temp.osd = osd;
+
+   ret = __insert_pg_mapping(pg, &map->primary_temp);
+   if (ret) {
+    kfree(pg);
+    return ret;
+   }
+  }
+ }
+
+ return 0;
+
+e_inval:
+ return -EINVAL;
+}
+
+static int decode_primary_temp(void **p, void *end, struct ceph_osdmap *map)
+{
+ return __decode_primary_temp(p, end, map, false);
+}
+
+static int decode_new_primary_temp(void **p, void *end,
+       struct ceph_osdmap *map)
+{
+ return __decode_primary_temp(p, end, map, true);
+}
+
 /*
  * decode a full map.
  */
@@ -933,6 +988,13 @@ static int osdmap_decode(void **p, void *end, struct ceph_osdmap *map)
  if (err)
   goto bad;
 
+ /* primary_temp */
+ if (struct_v >= 1) {
+  err = decode_primary_temp(p, end, map);
+  if (err)
+   goto bad;
+ }
+
  /* crush */
  ceph_decode_32_safe(p, end, len, e_inval);
  map->crush = crush_decode(*p, min(*p + len, end));
@@ -1133,6 +1195,13 @@ struct ceph_osdmap *osdmap_apply_incremental(void **p, void *end,
  if (err)
   goto bad;
 
+ /* new_primary_temp */
+ if (struct_v >= 1) {
+  err = decode_new_primary_temp(p, end, map);
+  if (err)
+   goto bad;
+ }
+
  /* ignore the rest */
  *p = end;
 
-- 
1.7.1