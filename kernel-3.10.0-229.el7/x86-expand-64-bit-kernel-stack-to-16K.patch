From 40cf15be0522270da17c4dedd5f3c1ea7941c0a4 Mon Sep 17 00:00:00 2001
From: Johannes Weiner <jweiner@redhat.com>
Date: Fri, 12 Sep 2014 17:45:51 -0400
Subject: [x86] expand 64-bit kernel stack to 16K

Message-id: <20140912174550.GR29420@redacted.bos.redhat.com>
Patchwork-id: 94049
O-Subject: [RHEL7.1 PATCH 1/6 v4] x86_64: expand kernel stack to 16K
Bugzilla: 1108378
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Johannes Weiner <jweiner@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Kyle McMartin <kmcmarti@redhat.com>

From: Johannes Weiner <jweiner@redhat.com>

In response to recent stack overflow reports on common setups, the
decision upstream to finally increase the per-thread stack size on
x86-64 from 8k to 16k, and Dave Chinner's plea on os-devel[1], I'm
proposing to increase x86-64 thread stacks on RHEL7 to 16k as well,
thus bringing it on par with our other supported 64-bit architectures.

The timing on this is quite bad because it will be breaking the kernel
ABI.  Not the symbols on the whitelist, and no C structs are changed
in size, but because of how current_thread_info() works, a series of
macros and inline functions pertaining to per-thread state force a
recompile of everything that uses them.  This includes accessors that
are in wide-spread use by drivers and filesystems, such as
signal_pending(), need_resched(), preempt_enable()/preempt_disable(),
in_interrupt() and friends etc.

However, I think that a controlled recompilation of third-party
modules at this point in RHEL7's lifecycle is by far preferrable to an
increase in stack overflows in the wild on more and more common setups
as the stack frames will continue to grow in the future.

Thanks,
Johannes

[1] http://post-office.corp.redhat.com/archives/os-devel-list/2014-June/msg00014.html

---
From: Johannes Weiner <jweiner@redhat.com>
Date: Wed, 11 Jun 2014 12:04:31 -0400
Subject: [PATCH RHEL7] x86_64: expand kernel stack to 16K

commit 6538b8ea886e472f4431db8ca1d60478f838d14b
Author: Minchan Kim <minchan@kernel.org>
Date:   Wed May 28 15:53:59 2014 +0900

    x86_64: expand kernel stack to 16K

    While I play inhouse patches with much memory pressure on qemu-kvm,
    3.14 kernel was randomly crashed. The reason was kernel stack overflow.

    When I investigated the problem, the callstack was a little bit deeper
    by involve with reclaim functions but not direct reclaim path.

    I tried to diet stack size of some functions related with alloc/reclaim
    so did a hundred of byte but overflow was't disappeard so that I encounter
    overflow by another deeper callstack on reclaim/allocator path.

    Of course, we might sweep every sites we have found for reducing
    stack usage but I'm not sure how long it saves the world(surely,
    lots of developer start to add nice features which will use stack
    agains) and if we consider another more complex feature in I/O layer
    and/or reclaim path, it might be better to increase stack size(
    meanwhile, stack usage on 64bit machine was doubled compared to 32bit
    while it have sticked to 8K. Hmm, it's not a fair to me and arm64
    already expaned to 16K. )

    So, my stupid idea is just let's expand stack size and keep an eye
    toward stack consumption on each kernel functions via stacktrace of ftrace.
    For example, we can have a bar like that each funcion shouldn't exceed 200K
    and emit the warning when some function consumes more in runtime.
    Of course, it could make false positive but at least, it could make a
    chance to think over it.

    I guess this topic was discussed several time so there might be
    strong reason not to increase kernel stack size on x86_64, for me not
    knowing so Ccing x86_64 maintainers, other MM guys and virtio
    maintainers.

    Here's an example call trace using up the kernel stack:

             Depth    Size   Location    (51 entries)
             -----    ----   --------
       0)     7696      16   lookup_address
       1)     7680      16   _lookup_address_cpa.isra.3
       2)     7664      24   __change_page_attr_set_clr
       3)     7640     392   kernel_map_pages
       4)     7248     256   get_page_from_freelist
       5)     6992     352   __alloc_pages_nodemask
       6)     6640       8   alloc_pages_current
       7)     6632     168   new_slab
       8)     6464       8   __slab_alloc
       9)     6456      80   __kmalloc
      10)     6376     376   vring_add_indirect
      11)     6000     144   virtqueue_add_sgs
      12)     5856     288   __virtblk_add_req
      13)     5568      96   virtio_queue_rq
      14)     5472     128   __blk_mq_run_hw_queue
      15)     5344      16   blk_mq_run_hw_queue
      16)     5328      96   blk_mq_insert_requests
      17)     5232     112   blk_mq_flush_plug_list
      18)     5120     112   blk_flush_plug_list
      19)     5008      64   io_schedule_timeout
      20)     4944     128   mempool_alloc
      21)     4816      96   bio_alloc_bioset
      22)     4720      48   get_swap_bio
      23)     4672     160   __swap_writepage
      24)     4512      32   swap_writepage
      25)     4480     320   shrink_page_list
      26)     4160     208   shrink_inactive_list
      27)     3952     304   shrink_lruvec
      28)     3648      80   shrink_zone
      29)     3568     128   do_try_to_free_pages
      30)     3440     208   try_to_free_pages
      31)     3232     352   __alloc_pages_nodemask
      32)     2880       8   alloc_pages_current
      33)     2872     200   __page_cache_alloc
      34)     2672      80   find_or_create_page
      35)     2592      80   ext4_mb_load_buddy
      36)     2512     176   ext4_mb_regular_allocator
      37)     2336     128   ext4_mb_new_blocks
      38)     2208     256   ext4_ext_map_blocks
      39)     1952     160   ext4_map_blocks
      40)     1792     384   ext4_writepages
      41)     1408      16   do_writepages
      42)     1392      96   __writeback_single_inode
      43)     1296     176   writeback_sb_inodes
      44)     1120      80   __writeback_inodes_wb
      45)     1040     160   wb_writeback
      46)      880     208   bdi_writeback_workfn
      47)      672     144   process_one_work
      48)      528     112   worker_thread
      49)      416     240   kthread
      50)      176     176   ret_from_fork

    [ Note: the problem is exacerbated by certain gcc versions that seem to
      generate much bigger stack frames due to apparently bad coalescing of
      temporaries and generating too many spills.  Rusty saw gcc-4.6.4 using
      35% more stack on the virtio path than 4.8.2 does, for example.

      Minchan not only uses such a bad gcc version (4.6.3 in his case), but
      some of the stack use is due to debugging (CONFIG_DEBUG_PAGEALLOC is
      what causes that kernel_map_pages() frame, for example). But we're
      clearly getting too close.

      The VM code also seems to have excessive stack frames partly for the
      same compiler reason, triggered by excessive inlining and lots of
      function arguments.

      We need to improve on our stack use, but in the meantime let's do this
      simple stack increase too.  Unlike most earlier reports, there is
      nothing simple that stands out as being really horribly wrong here,
      apart from the fact that the stack frames are just bigger than they
      should need to be.        - Linus ]

    Signed-off-by: Minchan Kim <minchan@kernel.org>
    Cc: Peter Anvin <hpa@zytor.com>
    Cc: Dave Chinner <david@fromorbit.com>
    Cc: Dave Jones <davej@redhat.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Mel Gorman <mgorman@suse.de>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Cc: Michael S Tsirkin <mst@redhat.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: PJ Waskiewicz <pjwaskiewicz@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Johannes Weiner <jweiner@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/include/asm/page_64_types.h b/arch/x86/include/asm/page_64_types.h
index 6c896fb..e5ebcd3 100644
--- a/arch/x86/include/asm/page_64_types.h
+++ b/arch/x86/include/asm/page_64_types.h
@@ -1,7 +1,7 @@
 #ifndef _ASM_X86_PAGE_64_DEFS_H
 #define _ASM_X86_PAGE_64_DEFS_H
 
-#define THREAD_SIZE_ORDER 1
+#define THREAD_SIZE_ORDER 2
 #define THREAD_SIZE  (PAGE_SIZE << THREAD_SIZE_ORDER)
 #define CURRENT_MASK (~(THREAD_SIZE - 1))
 
-- 
1.7.1