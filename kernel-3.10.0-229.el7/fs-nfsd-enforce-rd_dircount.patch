From 66b023e6ece0c4e50986c2d5bd5a2493a9bf3df7 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:51:13 -0400
Subject: [fs] nfsd: enforce rd_dircount

Message-id: <1403560314-32525-132-git-send-email-bfields@redhat.com>
Patchwork-id: 84505
O-Subject: [Patch RHEL7 131/172] nfsd4: enforce rd_dircount
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

As long as we're here, let's enforce the protocol's limit on the number
of directory entries to return in a readdir.

I don't think anyone's ever noticed our lack of enforcement, but maybe
there's more of a chance they will now that we allow larger readdirs.

Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 3b299709091befc0e02aa33d55ddd5baef006853
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 4d79e53..3f2a52c 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -1033,7 +1033,7 @@ nfsd4_decode_readdir(struct nfsd4_compoundargs *argp, struct nfsd4_readdir *read
  READ_BUF(24);
  READ64(readdir->rd_cookie);
  COPYMEM(readdir->rd_verf.data, sizeof(readdir->rd_verf.data));
- READ32(readdir->rd_dircount);    /* just in case you needed a useless field... */
+ READ32(readdir->rd_dircount);
  READ32(readdir->rd_maxcount);
  if ((status = nfsd4_decode_bitmap(argp, readdir->rd_bmval)))
   goto out;
@@ -2720,6 +2720,9 @@ nfsd4_encode_dirent(void *ccdv, const char *name, int namlen,
  if (entry_bytes > cd->rd_maxcount)
   goto fail;
  cd->rd_maxcount -= entry_bytes;
+ if (!cd->rd_dircount)
+  goto fail;
+ cd->rd_dircount--;
  cd->cookie_offset = cookie_offset;
 skip_entry:
  cd->common.err = nfs_ok;
-- 
1.7.1