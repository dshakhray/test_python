From 27da930d6cb60191f314dc39a4130ce56c0fd4b8 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:25:03 -0400
Subject: [net] libceph: split osdmap allocation and decode steps
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-197-git-send-email-sweil@redhat.com>
Patchwork-id: 89643
O-Subject: [PATCH 196/303] libceph: split osdmap allocation and decode steps
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

Split osdmap allocation and initialization into a separate function,
ceph_osdmap_decode().

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Alex Elder <elder@linaro.org>
(cherry picked from commit a2505d63ee0541d9b4685250b033192e68222e97)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/ceph/osdmap.h b/include/linux/ceph/osdmap.h
index 8c8b3ce..46c3e30 100644
--- a/include/linux/ceph/osdmap.h
+++ b/include/linux/ceph/osdmap.h
@@ -156,7 +156,7 @@ static inline int ceph_decode_pgid(void **p, void *end, struct ceph_pg *pgid)
  return 0;
 }
 
-extern struct ceph_osdmap *osdmap_decode(void **p, void *end);
+extern struct ceph_osdmap *ceph_osdmap_decode(void **p, void *end);
 extern struct ceph_osdmap *osdmap_apply_incremental(void **p, void *end,
          struct ceph_osdmap *map,
          struct ceph_messenger *msgr);
diff --git a/net/ceph/osd_client.c b/net/ceph/osd_client.c
index 71830d7..6f64eec 100644
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@ -2062,7 +2062,7 @@ void ceph_osdc_handle_map(struct ceph_osd_client *osdc, struct ceph_msg *msg)
    int skipped_map = 0;
 
    dout("taking full map %u len %d\n", epoch, maplen);
-   newmap = osdmap_decode(&p, p+maplen);
+   newmap = ceph_osdmap_decode(&p, p+maplen);
    if (IS_ERR(newmap)) {
     err = PTR_ERR(newmap);
     goto bad;
diff --git a/net/ceph/osdmap.c b/net/ceph/osdmap.c
index 4dd000d..a82df6e 100644
--- a/net/ceph/osdmap.c
+++ b/net/ceph/osdmap.c
@@ -684,9 +684,8 @@ static int osdmap_set_max_osd(struct ceph_osdmap *map, int max)
 /*
  * decode a full map.
  */
-struct ceph_osdmap *osdmap_decode(void **p, void *end)
+static int osdmap_decode(void **p, void *end, struct ceph_osdmap *map)
 {
- struct ceph_osdmap *map;
  u16 version;
  u32 len, max, i;
  int err = -EINVAL;
@@ -694,14 +693,7 @@ struct ceph_osdmap *osdmap_decode(void **p, void *end)
  void *start = *p;
  struct ceph_pg_pool_info *pi;
 
- dout("osdmap_decode %p to %p len %d\n", *p, end, (int)(end - *p));
-
- map = kzalloc(sizeof(*map), GFP_NOFS);
- if (map == NULL)
-  return ERR_PTR(-ENOMEM);
-
- map->pg_temp = RB_ROOT;
- mutex_init(&map->crush_scratch_mutex);
+ dout("%s %p to %p len %d\n", __func__, *p, end, (int)(end - *p));
 
  ceph_decode_16_safe(p, end, version, bad);
  if (version > 6) {
@@ -751,7 +743,6 @@ struct ceph_osdmap *osdmap_decode(void **p, void *end)
  err = osdmap_set_max_osd(map, max);
  if (err < 0)
   goto bad;
- dout("osdmap_decode max_osd = %d\n", map->max_osd);
 
  /* osds */
  err = -EINVAL;
@@ -819,7 +810,7 @@ struct ceph_osdmap *osdmap_decode(void **p, void *end)
  *p = end;
 
  dout("full osdmap epoch %d max_osd %d\n", map->epoch, map->max_osd);
- return map;
+ return 0;
 
 bad:
  pr_err("corrupt full osdmap (%d) epoch %d off %d (%p of %p-%p)\n",
@@ -827,8 +818,31 @@ bad:
  print_hex_dump(KERN_DEBUG, "osdmap: ",
          DUMP_PREFIX_OFFSET, 16, 1,
          start, end - start, true);
- ceph_osdmap_destroy(map);
- return ERR_PTR(err);
+ return err;
+}
+
+/*
+ * Allocate and decode a full map.
+ */
+struct ceph_osdmap *ceph_osdmap_decode(void **p, void *end)
+{
+ struct ceph_osdmap *map;
+ int ret;
+
+ map = kzalloc(sizeof(*map), GFP_NOFS);
+ if (!map)
+  return ERR_PTR(-ENOMEM);
+
+ map->pg_temp = RB_ROOT;
+ mutex_init(&map->crush_scratch_mutex);
+
+ ret = osdmap_decode(p, end, map);
+ if (ret) {
+  ceph_osdmap_destroy(map);
+  return ERR_PTR(ret);
+ }
+
+ return map;
 }
 
 /*
@@ -872,7 +886,7 @@ struct ceph_osdmap *osdmap_apply_incremental(void **p, void *end,
  if (len > 0) {
   dout("apply_incremental full map len %d, %p to %p\n",
        len, *p, end);
-  return osdmap_decode(p, min(*p+len, end));
+  return ceph_osdmap_decode(p, min(*p+len, end));
  }
 
  /* new crush? */
-- 
1.7.1