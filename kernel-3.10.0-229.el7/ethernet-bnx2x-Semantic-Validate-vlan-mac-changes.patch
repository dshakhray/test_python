From f6e01da9b1ddd1127cc5522dc76981c0467aac41 Mon Sep 17 00:00:00 2001
From: Michal Schmidt <mschmidt@redhat.com>
Date: Fri, 5 Sep 2014 19:49:14 -0400
Subject: [ethernet] bnx2x: Semantic Validate vlan/mac changes

Message-id: <1409946615-5862-10-git-send-email-mschmidt@redhat.com>
Patchwork-id: 91550
O-Subject: [RHEL7.1 PATCH 09/70] bnx2x: Semantic Validate vlan/mac changes
Bugzilla: 1089402
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1089402

Upstream commit:
commit ba72f32cb8ad1963ba55b30860971f4e2b0ec5e8
Author: Yuval Mintz <yuvalmin@broadcom.com>
Date:   Wed Feb 12 18:19:52 2014 +0200

    bnx2x: Semantic Validate vlan/mac changes

    This is purely semantic - break the flow in which PF validates the VF
    classification filtering requirement is valid into several sub-functions
    for better readable code.

    Signed-off-by: Yuval Mintz <yuvalmin@broadcom.com>
    Signed-off-by: Ariel Elior <ariele@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
index 3fa6c2a..ebad48a 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
@@ -1694,16 +1694,12 @@ static int bnx2x_vfop_mbx_qfilters_cmd(struct bnx2x *bp,
  return -ENOMEM;
 }
 
-static void bnx2x_vf_mbx_set_q_filters(struct bnx2x *bp,
-           struct bnx2x_virtf *vf,
-           struct bnx2x_vf_mbx *mbx)
+static int bnx2x_filters_validate_mac(struct bnx2x *bp,
+          struct bnx2x_virtf *vf,
+          struct vfpf_set_q_filters_tlv *filters)
 {
- struct vfpf_set_q_filters_tlv *filters = &mbx->msg->req.set_q_filters;
  struct pf_vf_bulletin_content *bulletin = BP_VF_BULLETIN(bp, vf->index);
- struct bnx2x_vfop_cmd cmd = {
-  .done = bnx2x_vf_mbx_resp,
-  .block = false,
- };
+ int rc = 0;
 
  /* if a mac was already set for this VF via the set vf mac ndo, we only
   * accept mac configurations of that mac. Why accept them at all?
@@ -1716,6 +1712,7 @@ static void bnx2x_vf_mbx_set_q_filters(struct bnx2x *bp,
    BNX2X_ERR("VF[%d] requested the addition of multiple macs after set_vf_mac ndo was called\n",
       vf->abs_vfid);
    vf->op_rc = -EPERM;
+   rc = -EPERM;
    goto response;
   }
 
@@ -1726,9 +1723,22 @@ static void bnx2x_vf_mbx_set_q_filters(struct bnx2x *bp,
       vf->abs_vfid);
 
    vf->op_rc = -EPERM;
+   rc = -EPERM;
    goto response;
   }
  }
+
+response:
+ return rc;
+}
+
+static int bnx2x_filters_validate_vlan(struct bnx2x *bp,
+           struct bnx2x_virtf *vf,
+           struct vfpf_set_q_filters_tlv *filters)
+{
+ struct pf_vf_bulletin_content *bulletin = BP_VF_BULLETIN(bp, vf->index);
+ int rc = 0;
+
  /* if vlan was set by hypervisor we don't allow guest to config vlan */
  if (bulletin->valid_bitmap & 1 << VLAN_VALID) {
   int i;
@@ -1740,13 +1750,36 @@ static void bnx2x_vf_mbx_set_q_filters(struct bnx2x *bp,
     BNX2X_ERR("VF[%d] attempted to configure vlan but one was already set by Hypervisor. Aborting request\n",
        vf->abs_vfid);
     vf->op_rc = -EPERM;
+    rc = -EPERM;
     goto response;
    }
   }
  }
 
  /* verify vf_qid */
- if (filters->vf_qid > vf_rxq_count(vf))
+ if (filters->vf_qid > vf_rxq_count(vf)) {
+  rc = -EPERM;
+  goto response;
+ }
+
+response:
+ return rc;
+}
+
+static void bnx2x_vf_mbx_set_q_filters(struct bnx2x *bp,
+           struct bnx2x_virtf *vf,
+           struct bnx2x_vf_mbx *mbx)
+{
+ struct vfpf_set_q_filters_tlv *filters = &mbx->msg->req.set_q_filters;
+ struct bnx2x_vfop_cmd cmd = {
+  .done = bnx2x_vf_mbx_resp,
+  .block = false,
+ };
+
+ if (bnx2x_filters_validate_mac(bp, vf, filters))
+  goto response;
+
+ if (bnx2x_filters_validate_vlan(bp, vf, filters))
   goto response;
 
  DP(BNX2X_MSG_IOV, "VF[%d] Q_FILTERS: queue[%d]\n",
-- 
1.7.1