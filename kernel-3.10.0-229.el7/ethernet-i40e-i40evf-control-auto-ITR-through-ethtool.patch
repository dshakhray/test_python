From 20bda152aa43bc34e9bce8d63c5a52aacf4a5fd1 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:37:45 -0400
Subject: [ethernet] i40e/i40evf: control auto ITR through ethtool

Message-id: <1409658042-22689-105-git-send-email-sassmann@redhat.com>
Patchwork-id: 90299
O-Subject: [RHEL7.1 PATCH 104/281] i40e/i40evf: control auto ITR through ethtool
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Mitch Williams <mitch.a.williams@intel.com>

For all of our supported kernels, ethtool allows us to directly control
adaptive ITR instead of just faking it with an ITR value. Support this
capability so that user knows explicitly when ITR is being controlled
dynamically. Suggested by Ben Hutchings.

CC: Ben Hutchings <ben@decadent.org.uk>
Change-ID: Iae6b79c5db767a63d22ecd9a9c24acaff02a096e
Signed-off-by: Mitch Williams <mitch.a.williams@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit 32f5f54a22d5c888c8fcef91259bfc62f9185671)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index 6980cd3..0ddaa7d 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@ -1009,14 +1009,13 @@ static int i40e_get_coalesce(struct net_device *netdev,
  ec->rx_max_coalesced_frames_irq = vsi->work_limit;
 
  if (ITR_IS_DYNAMIC(vsi->rx_itr_setting))
-  ec->rx_coalesce_usecs = 1;
- else
-  ec->rx_coalesce_usecs = vsi->rx_itr_setting;
+  ec->use_adaptive_rx_coalesce = 1;
 
  if (ITR_IS_DYNAMIC(vsi->tx_itr_setting))
-  ec->tx_coalesce_usecs = 1;
- else
-  ec->tx_coalesce_usecs = vsi->tx_itr_setting;
+  ec->use_adaptive_tx_coalesce = 1;
+
+ ec->rx_coalesce_usecs = vsi->rx_itr_setting & ~I40E_ITR_DYNAMIC;
+ ec->tx_coalesce_usecs = vsi->tx_itr_setting & ~I40E_ITR_DYNAMIC;
 
  return 0;
 }
@@ -1035,37 +1034,27 @@ static int i40e_set_coalesce(struct net_device *netdev,
  if (ec->tx_max_coalesced_frames_irq || ec->rx_max_coalesced_frames_irq)
   vsi->work_limit = ec->tx_max_coalesced_frames_irq;
 
- switch (ec->rx_coalesce_usecs) {
- case 0:
-  vsi->rx_itr_setting = 0;
-  break;
- case 1:
-  vsi->rx_itr_setting = (I40E_ITR_DYNAMIC |
-           ITR_REG_TO_USEC(I40E_ITR_RX_DEF));
-  break;
- default:
-  if ((ec->rx_coalesce_usecs < (I40E_MIN_ITR << 1)) ||
-      (ec->rx_coalesce_usecs > (I40E_MAX_ITR << 1)))
-   return -EINVAL;
+ if ((ec->rx_coalesce_usecs >= (I40E_MIN_ITR << 1)) &&
+     (ec->rx_coalesce_usecs <= (I40E_MAX_ITR << 1)))
   vsi->rx_itr_setting = ec->rx_coalesce_usecs;
-  break;
- }
+ else
+  return -EINVAL;
 
- switch (ec->tx_coalesce_usecs) {
- case 0:
-  vsi->tx_itr_setting = 0;
-  break;
- case 1:
-  vsi->tx_itr_setting = (I40E_ITR_DYNAMIC |
-           ITR_REG_TO_USEC(I40E_ITR_TX_DEF));
-  break;
- default:
-  if ((ec->tx_coalesce_usecs < (I40E_MIN_ITR << 1)) ||
-      (ec->tx_coalesce_usecs > (I40E_MAX_ITR << 1)))
-   return -EINVAL;
+ if ((ec->tx_coalesce_usecs >= (I40E_MIN_ITR << 1)) &&
+     (ec->tx_coalesce_usecs <= (I40E_MAX_ITR << 1)))
   vsi->tx_itr_setting = ec->tx_coalesce_usecs;
-  break;
- }
+ else
+  return -EINVAL;
+
+ if (ec->use_adaptive_rx_coalesce)
+  vsi->rx_itr_setting |= I40E_ITR_DYNAMIC;
+ else
+  vsi->rx_itr_setting &= ~I40E_ITR_DYNAMIC;
+
+ if (ec->use_adaptive_tx_coalesce)
+  vsi->tx_itr_setting |= I40E_ITR_DYNAMIC;
+ else
+  vsi->tx_itr_setting &= ~I40E_ITR_DYNAMIC;
 
  vector = vsi->base_vector;
  for (i = 0; i < vsi->num_q_vectors; i++, vector++) {
-- 
1.7.1