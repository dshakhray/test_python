From 4fe35ff63b2e68e55f3d2de2b1f6130247915414 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:51 -0400
Subject: [fs] ext4: Fix block zeroing when punching holes in indirect block files

Message-id: <1414059176-6044-28-git-send-email-lczerner@redhat.com>
Patchwork-id: 98297
O-Subject: [RHEL 7.1 PATCH 27/32] ext4: Fix block zeroing when punching holes in indirect block files
Bugzilla: 1150171

From: Jan Kara <jack@suse.cz>

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit 77ea2a4ba657a1ad4fb7c64bc5cdce84b8a132b6

 free_holes_block() passed local variable as a block pointer
 to ext4_clear_blocks(). Thus ext4_clear_blocks() zeroed out this local
 variable instead of proper place in inode / indirect block. We later
 zero out proper place in inode / indirect block but don't dirty the
 inode / buffer again which can lead to subtle issues (some changes e.g.
 to inode can be lost).

 Signed-off-by: Jan Kara <jack@suse.cz>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/indirect.c b/fs/ext4/indirect.c
index e6574d7..c30cbe2 100644
--- a/fs/ext4/indirect.c
+++ b/fs/ext4/indirect.c
@@ -1345,8 +1345,8 @@ static int free_hole_blocks(handle_t *handle, struct inode *inode,
   if (level == 0 ||
       (bh && all_zeroes((__le32 *)bh->b_data,
           (__le32 *)bh->b_data + addr_per_block))) {
-   ext4_free_data(handle, inode, parent_bh, &blk, &blk+1);
-   *i_data = 0;
+   ext4_free_data(handle, inode, parent_bh,
+           i_data, i_data + 1);
   }
   brelse(bh);
   bh = NULL;
-- 
1.7.1