From 9f01bf41152b6ef113707b1f8804b941790859d3 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:21:51 -0400
Subject: [cpufreq] Store cpufreq policies in a list

Message-id: <1409235879-1283-18-git-send-email-prarit@redhat.com>
Patchwork-id: 89443
O-Subject: [RHEL7.1 PATCH BZ 1134639 017/185] cpufreq: Store cpufreq policies in a list
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit c88a1f8b96e7384627b918dfabbfc0c615a4a914
Author: Lukasz Majewski <l.majewski@samsung.com>
Date:   Tue Aug 6 22:53:08 2013 +0530

    cpufreq: Store cpufreq policies in a list

    Policies available in the cpufreq framework are now linked together.
    They are accessible via cpufreq_policy_list defined in the cpufreq
    core.

    [rjw: Fix from Yinghai Lu folded in]
    Signed-off-by: Lukasz Majewski <l.majewski@samsung.com>
    Signed-off-by: Myungjoo Ham <myungjoo.ham@samsung.com>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 01af0fb..57ff8b0 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -40,6 +40,7 @@ static DEFINE_PER_CPU(struct cpufreq_policy *, cpufreq_cpu_data);
 static DEFINE_PER_CPU(struct cpufreq_policy *, cpufreq_cpu_data_fallback);
 static DEFINE_RWLOCK(cpufreq_driver_lock);
 static DEFINE_MUTEX(cpufreq_governor_lock);
+static LIST_HEAD(cpufreq_policy_list);
 
 #ifdef CONFIG_HOTPLUG_CPU
 /* This one keeps track of the previously set governor of a removed CPU */
@@ -928,6 +929,7 @@ static struct cpufreq_policy *cpufreq_policy_alloc(void)
  if (!zalloc_cpumask_var(&policy->related_cpus, GFP_KERNEL))
   goto err_free_cpumask;
 
+ INIT_LIST_HEAD(&policy->policy_list);
  return policy;
 
 err_free_cpumask:
@@ -940,6 +942,12 @@ err_free_policy:
 
 static void cpufreq_policy_free(struct cpufreq_policy *policy)
 {
+ unsigned long flags;
+
+ write_lock_irqsave(&cpufreq_driver_lock, flags);
+ list_del(&policy->policy_list);
+ write_unlock_irqrestore(&cpufreq_driver_lock, flags);
+
  free_cpumask_var(policy->related_cpus);
  free_cpumask_var(policy->cpus);
  kfree(policy);
@@ -1053,6 +1061,10 @@ static int __cpufreq_add_dev(struct device *dev, struct subsys_interface *sif,
   ret = cpufreq_add_dev_interface(policy, dev);
   if (ret)
    goto err_out_unregister;
+
+  write_lock_irqsave(&cpufreq_driver_lock, flags);
+  list_add(&policy->policy_list, &cpufreq_policy_list);
+  write_unlock_irqrestore(&cpufreq_driver_lock, flags);
  }
 
  cpufreq_init_policy(policy);
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index f70bb6f..756b0b3 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -112,6 +112,7 @@ struct cpufreq_policy {
 
  struct cpufreq_real_policy user_policy;
 
+ struct list_head        policy_list;
  struct kobject  kobj;
  struct completion kobj_unregister;
  int   transition_ongoing; /* Tracks transition status */
-- 
1.7.1