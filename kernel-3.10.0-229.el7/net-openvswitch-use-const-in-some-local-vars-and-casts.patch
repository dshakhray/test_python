From e1d4725e5cf7755649bd12ec26c6557be454c7a2 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:29:42 -0400
Subject: [net] openvswitch: use const in some local vars and casts

Message-id: <4b221606dc482dc84c9b7b85a7a4b0460873715c.1410531783.git.jbenc@redhat.com>
Patchwork-id: 94039
O-Subject: [RHEL7.1 net PATCH 09/50] openvswitch: use const in some local vars and casts
Bugzilla: 1110384
RH-Acked-by: Flavio Leitner <fbl@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110384
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit 7085130bab2f9c5b8d61bff73b01dc8195d0f974
Author: Daniele Di Proietto <daniele.di.proietto@gmail.com>
Date:   Thu Jan 23 10:56:49 2014 -0800

    openvswitch: use const in some local vars and casts

    In few functions, const formal parameters are assigned or cast to
    non-const.
    These changes suppress warnings if compiled with -Wcast-qual.

    Signed-off-by: Daniele Di Proietto <daniele.di.proietto@gmail.com>
    Signed-off-by: Jesse Gross <jesse@nicira.com>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/openvswitch/flow_netlink.c b/net/openvswitch/flow_netlink.c
index 4d000ac..5517bd6 100644
--- a/net/openvswitch/flow_netlink.c
+++ b/net/openvswitch/flow_netlink.c
@@ -628,8 +628,10 @@ static int ovs_key_from_nlattrs(struct sw_flow_match *match,  bool *exact_5tuple
 
   if (is_mask && exact_5tuple && *exact_5tuple) {
    if (ipv6_key->ipv6_proto != 0xff ||
-       !is_all_set((u8 *)ipv6_key->ipv6_src, sizeof(match->key->ipv6.addr.src)) ||
-       !is_all_set((u8 *)ipv6_key->ipv6_dst, sizeof(match->key->ipv6.addr.dst)))
+       !is_all_set((const u8 *)ipv6_key->ipv6_src,
+     sizeof(match->key->ipv6.addr.src)) ||
+       !is_all_set((const u8 *)ipv6_key->ipv6_dst,
+     sizeof(match->key->ipv6.addr.dst)))
     *exact_5tuple = false;
   }
  }
diff --git a/net/openvswitch/flow_table.c b/net/openvswitch/flow_table.c
index 3c268b3..1ba1e0b 100644
--- a/net/openvswitch/flow_table.c
+++ b/net/openvswitch/flow_table.c
@@ -57,8 +57,10 @@ static u16 range_n_bytes(const struct sw_flow_key_range *range)
 void ovs_flow_mask_key(struct sw_flow_key *dst, const struct sw_flow_key *src,
          const struct sw_flow_mask *mask)
 {
- const long *m = (long *)((u8 *)&mask->key + mask->range.start);
- const long *s = (long *)((u8 *)src + mask->range.start);
+ const long *m = (const long *)((const u8 *)&mask->key +
+    mask->range.start);
+ const long *s = (const long *)((const u8 *)src +
+    mask->range.start);
  long *d = (long *)((u8 *)dst + mask->range.start);
  int i;
 
@@ -375,7 +377,7 @@ int ovs_flow_tbl_flush(struct flow_table *flow_table)
 static u32 flow_hash(const struct sw_flow_key *key, int key_start,
        int key_end)
 {
- u32 *hash_key = (u32 *)((u8 *)key + key_start);
+ const u32 *hash_key = (const u32 *)((const u8 *)key + key_start);
  int hash_u32s = (key_end - key_start) >> 2;
 
  /* Make sure number of hash bytes are multiple of u32. */
@@ -397,8 +399,8 @@ static bool cmp_key(const struct sw_flow_key *key1,
       const struct sw_flow_key *key2,
       int key_start, int key_end)
 {
- const long *cp1 = (long *)((u8 *)key1 + key_start);
- const long *cp2 = (long *)((u8 *)key2 + key_start);
+ const long *cp1 = (const long *)((const u8 *)key1 + key_start);
+ const long *cp2 = (const long *)((const u8 *)key2 + key_start);
  long diffs = 0;
  int i;
 
@@ -513,8 +515,8 @@ static struct sw_flow_mask *mask_alloc(void)
 static bool mask_equal(const struct sw_flow_mask *a,
          const struct sw_flow_mask *b)
 {
- u8 *a_ = (u8 *)&a->key + a->range.start;
- u8 *b_ = (u8 *)&b->key + b->range.start;
+ const u8 *a_ = (const u8 *)&a->key + a->range.start;
+ const u8 *b_ = (const u8 *)&b->key + b->range.start;
 
  return  (a->range.end == b->range.end)
   && (a->range.start == b->range.start)
-- 
1.7.1