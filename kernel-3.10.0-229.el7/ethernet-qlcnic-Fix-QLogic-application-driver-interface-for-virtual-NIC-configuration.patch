From 04b9f43e116a6c516c180bd8421d199c82451f7a Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Thu, 21 Aug 2014 13:06:31 -0400
Subject: [ethernet] qlcnic: Fix QLogic application/driver interface for virtual NIC configuration

Message-id: <1408626422-3941-108-git-send-email-cdupuis@redhat.com>
Patchwork-id: 88654
O-Subject: [PATCH RHEL 7.1 107/138] qlcnic: Fix QLogic application/driver interface for virtual NIC configuration
Bugzilla: 1089352
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jitendra Kalsaria <jitendra.kalsaria@qlogic.com>

Bug 1089352 (https://bugzilla.redhat.com/show_bug.cgi?id=1089352)

net commit id 4f0302277718810494f8c618f28d1edb33af859a

o Application expect vNIC number as the array index but driver interface
return configuration in array index form.

o Pack the vNIC information array in the buffer such that application can
access it using vNIC number as the array index.

Signed-off-by: Jitendra Kalsaria <jitendra.kalsaria@qlogic.com>
Signed-off-by: Shahed Shaikh <shahed.shaikh@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c
index 448d156..cd346e2 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c
@@ -354,7 +354,7 @@ int qlcnic_is_valid_nic_func(struct qlcnic_adapter *adapter, u8 pci_func)
 {
  int i;
 
- for (i = 0; i < adapter->ahw->max_vnic_func; i++) {
+ for (i = 0; i < adapter->ahw->total_nic_func; i++) {
   if (adapter->npars[i].pci_func == pci_func)
    return i;
  }
@@ -720,6 +720,7 @@ static ssize_t qlcnic_sysfs_read_npar_config(struct file *file,
  struct qlcnic_adapter *adapter = dev_get_drvdata(dev);
  struct qlcnic_npar_func_cfg *np_cfg;
  struct qlcnic_info nic_info;
+ u8 pci_func;
  int i, ret;
  u32 count;
 
@@ -729,26 +730,28 @@ static ssize_t qlcnic_sysfs_read_npar_config(struct file *file,
 
  count = size / sizeof(struct qlcnic_npar_func_cfg);
  for (i = 0; i < adapter->ahw->total_nic_func; i++) {
-  if (qlcnic_is_valid_nic_func(adapter, i) < 0)
-   continue;
   if (adapter->npars[i].pci_func >= count) {
    dev_dbg(dev, "%s: Total nic functions[%d], App sent function count[%d]\n",
     __func__, adapter->ahw->total_nic_func, count);
    continue;
   }
-  ret = qlcnic_get_nic_info(adapter, &nic_info, i);
-  if (ret)
-   return ret;
   if (!adapter->npars[i].eswitch_status)
    continue;
-  np_cfg[i].pci_func = i;
-  np_cfg[i].op_mode = (u8)nic_info.op_mode;
-  np_cfg[i].port_num = nic_info.phys_port;
-  np_cfg[i].fw_capab = nic_info.capabilities;
-  np_cfg[i].min_bw = nic_info.min_tx_bw;
-  np_cfg[i].max_bw = nic_info.max_tx_bw;
-  np_cfg[i].max_tx_queues = nic_info.max_tx_ques;
-  np_cfg[i].max_rx_queues = nic_info.max_rx_ques;
+  pci_func = adapter->npars[i].pci_func;
+  if (qlcnic_is_valid_nic_func(adapter, pci_func) < 0)
+   continue;
+  ret = qlcnic_get_nic_info(adapter, &nic_info, pci_func);
+  if (ret)
+   return ret;
+
+  np_cfg[pci_func].pci_func = pci_func;
+  np_cfg[pci_func].op_mode = (u8)nic_info.op_mode;
+  np_cfg[pci_func].port_num = nic_info.phys_port;
+  np_cfg[pci_func].fw_capab = nic_info.capabilities;
+  np_cfg[pci_func].min_bw = nic_info.min_tx_bw;
+  np_cfg[pci_func].max_bw = nic_info.max_tx_bw;
+  np_cfg[pci_func].max_tx_queues = nic_info.max_tx_ques;
+  np_cfg[pci_func].max_rx_queues = nic_info.max_rx_ques;
  }
  return size;
 }
-- 
1.7.1