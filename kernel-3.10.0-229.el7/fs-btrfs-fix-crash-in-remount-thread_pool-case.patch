From ba254008e31cc470d0093b759f5aaddb3175f02c Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 19:02:54 -0400
Subject: [fs] btrfs: fix crash in remount(thread_pool=) case

Message-id: <1407179109-13714-288-git-send-email-sandeen@redhat.com>
Patchwork-id: 87247
O-Subject: [RHEL7.1 PATCH 287/422] btrfs: fix crash in remount(thread_pool=) case
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Sergei Trofimovich <slyfox@gentoo.org>

commit 800ee2247f483b6d05ed47ef3bbc90b56451746c
Author: Sergei Trofimovich <slyfox@gentoo.org>
Date:   Mon Apr 7 10:55:46 2014 +0300

    btrfs: fix crash in remount(thread_pool=) case

    Reproducer:
        mount /dev/ubda /mnt
        mount -oremount,thread_pool=42 /mnt

    Gives a crash:
        ? btrfs_workqueue_set_max+0x0/0x70
        btrfs_resize_thread_pool+0xe3/0xf0
        ? sync_filesystem+0x0/0xc0
        ? btrfs_resize_thread_pool+0x0/0xf0
        btrfs_remount+0x1d2/0x570
        ? kern_path+0x0/0x80
        do_remount_sb+0xd9/0x1c0
        do_mount+0x26a/0xbf0
        ? kfree+0x0/0x1b0
        SyS_mount+0xc4/0x110

    It's a call
        btrfs_workqueue_set_max(fs_info->scrub_wr_completion_workers, new_pool_size);
    with
        fs_info->scrub_wr_completion_workers = NULL;

    as scrub wqs get created only on user's demand.

    Patch skips not-created-yet workqueues.

    Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
    CC: Qu Wenruo <quwenruo@cn.fujitsu.com>
    CC: Chris Mason <clm@fb.com>
    CC: Josef Bacik <jbacik@fb.com>
    CC: linux-btrfs@vger.kernel.org
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/async-thread.c b/fs/btrfs/async-thread.c
index ecb5832..5a201d8 100644
--- a/fs/btrfs/async-thread.c
+++ b/fs/btrfs/async-thread.c
@@ -323,6 +323,8 @@ void btrfs_destroy_workqueue(struct btrfs_workqueue *wq)
 
 void btrfs_workqueue_set_max(struct btrfs_workqueue *wq, int max)
 {
+ if (!wq)
+  return;
  wq->normal->max_active = max;
  if (wq->high)
   wq->high->max_active = max;
-- 
1.7.1