From 32327ca8574615be7be81fd29dabd358c100c038 Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Wed, 17 Dec 2014 21:39:36 -0500
Subject: [drm] ttm: Use mutex_trylock() to avoid deadlock inside shrinker functions

Message-id: <1418852380-13061-86-git-send-email-rclark@redhat.com>
Patchwork-id: 102221
O-Subject: [RHEL7 drm 85/89] drm/ttm: Use mutex_trylock() to avoid deadlock inside shrinker functions.
Bugzilla: 1173317
RH-Acked-by: Jerome Glisse <jglisse@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1173317
Upstream: since topic/core-stuff-2014-08-15

commit 22e71691fd54c637800d10816bbeba9cf132d218

Author:     Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
AuthorDate: Sun Aug 3 20:01:10 2014 +0900
Commit:     Rob Clark <rclark@redhat.com>
CommitDate: Mon Dec 15 14:51:22 2014 -0500

    drm/ttm: Use mutex_trylock() to avoid deadlock inside shrinker functions.

    I can observe that RHEL7 environment stalls with 100% CPU usage when a
    certain type of memory pressure is given. While the shrinker functions
    are called by shrink_slab() before the OOM killer is triggered, the stall
    lasts for many minutes.

    One of reasons of this stall is that
    ttm_dma_pool_shrink_count()/ttm_dma_pool_shrink_scan() are called and
    are blocked at mutex_lock(&_manager->lock). GFP_KERNEL allocation with
    _manager->lock held causes someone (including kswapd) to deadlock when
    these functions are called due to memory pressure. This patch changes
    "mutex_lock();" to "if (!mutex_trylock()) return ...;" in order to
    avoid deadlock.

    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: stable <stable@kernel.org> [3.3+]
    Signed-off-by: Dave Airlie <airlied@redhat.com>

Signed-off-by: Rob Clark <rclark@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c b/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c
index de1a753..df4cc02 100644
--- a/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c
+++ b/drivers/gpu/drm/ttm/ttm_page_alloc_dma.c
@@ -1015,7 +1015,8 @@ static int ttm_dma_pool_mm_shrink(struct shrinker *shrink,
  if (list_empty(&_manager->pools))
   return 0;
 
- mutex_lock(&_manager->lock);
+ if (!mutex_trylock(&_manager->lock))
+  return 0;
  if (!_manager->npools)
   goto out;
  pool_offset = ++start_pool % _manager->npools;
-- 
1.7.1