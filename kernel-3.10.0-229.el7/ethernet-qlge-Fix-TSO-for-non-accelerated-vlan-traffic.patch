From 053d7e7b432a773b274ed0c126ac7f4d1b44f16f Mon Sep 17 00:00:00 2001
From: Vlad Yasevich <vyasevic@redhat.com>
Date: Fri, 29 Aug 2014 21:23:23 -0400
Subject: [ethernet] qlge: Fix TSO for non-accelerated vlan traffic

Message-id: <1409347403-2401-13-git-send-email-vyasevic@redhat.com>
Patchwork-id: 89932
O-Subject: [RHEL7 PATCH 12/12] qlge: Fix TSO for non-accelerated vlan traffic
Bugzilla: 1135619
RH-Acked-by: Nikolay Aleksandrov <nikolay@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>

From: Vlad Yasevich <vyasevich@gmail.com>

This device claims TSO support for vlans.  It also allows a user to
control vlan acceleration offloading.  As such, it is possible to turn
off vlan acceleration and configure a vlan which will continue to send
TSO traffic.

In such situation the packet passed down the the device will contain
a vlan header and skb->protocol will be set to ETH_P_8021Q.
The device assumes that skb->protocol contains network protocol
value and uses that value to set up TSO information.
This results in corrupted frames sent on the wire.

This patch extracts the protocol value correctly by using a
vlan_get_protocol() helper and corrects corrupt TSO frames.

CC: Shahed Shaikh <shahed.shaikh@qlogic.com>
CC: Jitendra Kalsaria <jitendra.kalsaria@qlogic.com>
CC: Ron Mercer <ron.mercer@qlogic.com>
CC: linux-driver@qlogic.com
Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
Acked-by: Shahed Shaikh <shahed.shaikh@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1ee1cfe7d3df00bff11dd28576eeac1875d7d51f)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

Conflicts:
 drivers/net/ethernet/qlogic/qlge/qlge_main.c
 - Minor different wrt to head expansion.  Upstream uses skb_cow,
          while RHEL7 still uses pskb_expand_head().

Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlge/qlge_main.c b/drivers/net/ethernet/qlogic/qlge/qlge_main.c
index f87cc21..229f233 100644
--- a/drivers/net/ethernet/qlogic/qlge/qlge_main.c
+++ b/drivers/net/ethernet/qlogic/qlge/qlge_main.c
@@ -2497,6 +2497,8 @@ static int ql_tso(struct sk_buff *skb, struct ob_mac_tso_iocb_req *mac_iocb_ptr)
 
  if (skb_is_gso(skb)) {
   int err;
+  __be16 l3_proto = vlan_get_protocol(skb);
+
   if (skb_header_cloned(skb)) {
    err = pskb_expand_head(skb, 0, 0, GFP_ATOMIC);
    if (err)
@@ -2514,7 +2516,7 @@ static int ql_tso(struct sk_buff *skb, struct ob_mac_tso_iocb_req *mac_iocb_ptr)
     << OB_MAC_TRANSPORT_HDR_SHIFT);
   mac_iocb_ptr->mss = cpu_to_le16(skb_shinfo(skb)->gso_size);
   mac_iocb_ptr->flags2 |= OB_MAC_TSO_IOCB_LSO;
-  if (likely(skb->protocol == htons(ETH_P_IP))) {
+  if (likely(l3_proto == htons(ETH_P_IP))) {
    struct iphdr *iph = ip_hdr(skb);
    iph->check = 0;
    mac_iocb_ptr->flags1 |= OB_MAC_TSO_IOCB_IP4;
@@ -2522,7 +2524,7 @@ static int ql_tso(struct sk_buff *skb, struct ob_mac_tso_iocb_req *mac_iocb_ptr)
          iph->daddr, 0,
          IPPROTO_TCP,
          0);
-  } else if (skb->protocol == htons(ETH_P_IPV6)) {
+  } else if (l3_proto == htons(ETH_P_IPV6)) {
    mac_iocb_ptr->flags1 |= OB_MAC_TSO_IOCB_IP6;
    tcp_hdr(skb)->check =
        ~csum_ipv6_magic(&ipv6_hdr(skb)->saddr,
-- 
1.7.1