From 307d157bc09a224ff6703c110dc26eccbd137b41 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Thu, 9 Oct 2014 21:00:22 -0400
Subject: [fs] xfs: support a union-based filter for eofblocks scans

Message-id: <1412888441-4181-29-git-send-email-sandeen@redhat.com>
Patchwork-id: 97339
O-Subject: [RHEL7.1 PATCH 28/47] [fs] xfs: support a union-based filter for eofblocks scans
Bugzilla: 1145837
RH-Acked-by: Brian Foster <bfoster@redhat.com>
RH-Acked-by: Dave Chinner <dchinner@redhat.com>

Bugzilla: 1145837
Upstream Status: Committed upstream
Build Info: https://brewweb.devel.redhat.com/taskinfo?taskID=8082426
Tested: locally using xfstests

Thanks,
-Eric

    commit f4526397928fff052f795713748f376a2bba1b5e
    Author: Brian Foster <bfoster@redhat.com>
    Date:   Thu Jul 24 19:44:28 2014 +1000

    xfs: support a union-based filter for eofblocks scans

    From: Brian Foster <bfoster@redhat.com>

    The eofblocks scan inode filter uses intersection logic by default.
    E.g., specifying both user and group quota ids filters out inodes that
    are not covered by both the specified user and group quotas. This is
    suitable for behavior exposed to userspace.

    Scans that are initiated from within the kernel might require more broad
    semantics, such as scanning all inodes under each quota associated with
    an inode to alleviate low free space conditions in each.

    Create the XFS_EOF_FLAGS_UNION flag to support a conditional union-based
    filtering algorithm for eofblocks scans. This flag is intentionally left
    out of the valid mask as it is not supported for scans initiated from
    userspace.

    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/xfs/xfs_fs.h b/fs/xfs/xfs_fs.h
index c5fc116..d79c96a 100644
--- a/fs/xfs/xfs_fs.h
+++ b/fs/xfs/xfs_fs.h
@@ -374,6 +374,9 @@ struct xfs_fs_eofblocks {
 #define XFS_EOF_FLAGS_GID  (1 << 2) /* filter by gid */
 #define XFS_EOF_FLAGS_PRID  (1 << 3) /* filter by project id */
 #define XFS_EOF_FLAGS_MINFILESIZE (1 << 4) /* filter by min file size */
+#define XFS_EOF_FLAGS_UNION  (1 << 5) /* union filter algorithm;
+        * kernel only, not included in
+        * valid mask */
 #define XFS_EOF_FLAGS_VALID \
  (XFS_EOF_FLAGS_SYNC | \
   XFS_EOF_FLAGS_UID | \
diff --git a/fs/xfs/xfs_icache.c b/fs/xfs/xfs_icache.c
index 025c9b5..0325d25 100644
--- a/fs/xfs/xfs_icache.c
+++ b/fs/xfs/xfs_icache.c
@@ -1206,6 +1206,30 @@ xfs_inode_match_id(
  return 1;
 }
 
+/*
+ * A union-based inode filtering algorithm. Process the inode if any of the
+ * criteria match. This is for global/internal scans only.
+ */
+STATIC int
+xfs_inode_match_id_union(
+ struct xfs_inode *ip,
+ struct xfs_eofblocks *eofb)
+{
+ if ((eofb->eof_flags & XFS_EOF_FLAGS_UID) &&
+     uid_eq(VFS_I(ip)->i_uid, eofb->eof_uid))
+  return 1;
+
+ if ((eofb->eof_flags & XFS_EOF_FLAGS_GID) &&
+     gid_eq(VFS_I(ip)->i_gid, eofb->eof_gid))
+  return 1;
+
+ if ((eofb->eof_flags & XFS_EOF_FLAGS_PRID) &&
+     xfs_get_projid(ip) == eofb->eof_prid)
+  return 1;
+
+ return 0;
+}
+
 STATIC int
 xfs_inode_free_eofblocks(
  struct xfs_inode *ip,
@@ -1216,6 +1240,7 @@ xfs_inode_free_eofblocks(
  int ret;
  struct xfs_eofblocks *eofb = args;
  bool need_iolock = true;
+ int match;
 
  ASSERT(!eofb || (eofb && eofb->eof_scan_owner != 0));
 
@@ -1235,7 +1260,11 @@ xfs_inode_free_eofblocks(
   return 0;
 
  if (eofb) {
-  if (!xfs_inode_match_id(ip, eofb))
+  if (eofb->eof_flags & XFS_EOF_FLAGS_UNION)
+   match = xfs_inode_match_id_union(ip, eofb);
+  else
+   match = xfs_inode_match_id(ip, eofb);
+  if (!match)
    return 0;
 
   /* skip the inode if the file size is too small */
-- 
1.7.1