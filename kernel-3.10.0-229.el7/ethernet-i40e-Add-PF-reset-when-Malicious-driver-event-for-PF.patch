From a5808566591aa43069429022393e0eacccc29f44 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 2 Sep 2014 11:39:18 -0400
Subject: [ethernet] i40e: Add PF reset when Malicious driver event for PF

Message-id: <1409658042-22689-198-git-send-email-sassmann@redhat.com>
Patchwork-id: 90391
O-Subject: [RHEL7.1 PATCH 197/281] i40e: Add PF reset when Malicious driver event for PF
Bugzilla: 1091126
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Neerav Parikh <neerav.parikh@intel.com>

As per the spec when the PF driver receives a Malicious driver event
the queue that caused the event is already stopped and it is expected
that the function that owns the queue will reset the queue.
In some cases it may not be possible to determine the queue and it is
suggested to reset the whole function.

This patch takes the later approach when the event is owned by the PF
that owns it.

Change-ID: I40f9764a6a5e068c0ef8438db00c5aa9c2c6c1c8
Signed-off-by: Neerav Parikh <neerav.parikh@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
(cherry picked from commit df430b1240d3375d053230d1f943383d59f9267a)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index c625760..a148917 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -5827,6 +5827,7 @@ static void i40e_handle_mdd_event(struct i40e_pf *pf)
 {
  struct i40e_hw *hw = &pf->hw;
  bool mdd_detected = false;
+ bool pf_mdd_detected = false;
  struct i40e_vf *vf;
  u32 reg;
  int i;
@@ -5866,6 +5867,30 @@ static void i40e_handle_mdd_event(struct i40e_pf *pf)
   mdd_detected = true;
  }
 
+ if (mdd_detected) {
+  reg = rd32(hw, I40E_PF_MDET_TX);
+  if (reg & I40E_PF_MDET_TX_VALID_MASK) {
+   wr32(hw, I40E_PF_MDET_TX, 0xFFFF);
+   dev_info(&pf->pdev->dev,
+     "MDD TX event is for this function 0x%08x, requesting PF reset.\n",
+     reg);
+   pf_mdd_detected = true;
+  }
+  reg = rd32(hw, I40E_PF_MDET_RX);
+  if (reg & I40E_PF_MDET_RX_VALID_MASK) {
+   wr32(hw, I40E_PF_MDET_RX, 0xFFFF);
+   dev_info(&pf->pdev->dev,
+     "MDD RX event is for this function 0x%08x, requesting PF reset.\n",
+     reg);
+   pf_mdd_detected = true;
+  }
+  /* Queue belongs to the PF, initiate a reset */
+  if (pf_mdd_detected) {
+   set_bit(__I40E_PF_RESET_REQUESTED, &pf->state);
+   i40e_service_event_schedule(pf);
+  }
+ }
+
  /* see if one of the VFs needs its hand slapped */
  for (i = 0; i < pf->num_alloc_vfs && mdd_detected; i++) {
   vf = &(pf->vf[i]);
-- 
1.7.1