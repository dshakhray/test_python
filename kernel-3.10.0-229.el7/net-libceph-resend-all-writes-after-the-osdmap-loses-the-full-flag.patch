From f61b62c483faaa495c1e81a3876ecc38753cafb6 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:23:12 -0400
Subject: [net] libceph: resend all writes after the osdmap loses the full flag
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-86-git-send-email-sweil@redhat.com>
Patchwork-id: 89842
O-Subject: [PATCH 085/303] libceph: resend all writes after the osdmap loses the full flag
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Josh Durgin <josh.durgin@inktank.com>

With the current full handling, there is a race between osds and
clients getting the first map marked full. If the osd wins, it will
return -ENOSPC to any writes, but the client may already have writes
in flight. This results in the client getting the error and
propagating it up the stack. For rbd, the block layer turns this into
EIO, which can cause corruption in filesystems above it.

To avoid this race, osds are being changed to drop writes that came
from clients with an osdmap older than the last osdmap marked full.
In order for this to work, clients must resend all writes after they
encounter a full -> not full transition in the osdmap. osds will wait
for an updated map instead of processing a request from a client with
a newer map, so resent writes will not be dropped by the osd unless
there is another not full -> full transition.

This approach requires both osds and clients to be fixed to avoid the
race. Old clients talking to osds with this fix may hang instead of
returning EIO and potentially corrupting an fs. New clients talking to
old osds have the same behavior as before if they encounter this race.

Fixes: http://tracker.ceph.com/issues/6938

Reviewed-by: Sage Weil <sage@inktank.com>
Signed-off-by: Josh Durgin <josh.durgin@inktank.com>
(cherry picked from commit 9a1ea2dbff11547a8e664f143c1ffefc586a577a)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ceph/osd_client.c b/net/ceph/osd_client.c
index 1ad9866..9f19935 100644
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@ -1643,14 +1643,17 @@ static void reset_changed_osds(struct ceph_osd_client *osdc)
  *
  * Caller should hold map_sem for read.
  */
-static void kick_requests(struct ceph_osd_client *osdc, int force_resend)
+static void kick_requests(struct ceph_osd_client *osdc, bool force_resend,
+     bool force_resend_writes)
 {
  struct ceph_osd_request *req, *nreq;
  struct rb_node *p;
  int needmap = 0;
  int err;
+ bool force_resend_req;
 
- dout("kick_requests %s\n", force_resend ? " (force resend)" : "");
+ dout("kick_requests %s %s\n", force_resend ? " (force resend)" : "",
+  force_resend_writes ? " (force resend writes)" : "");
  mutex_lock(&osdc->request_mutex);
  for (p = rb_first(&osdc->requests); p; ) {
   req = rb_entry(p, struct ceph_osd_request, r_node);
@@ -1675,7 +1678,10 @@ static void kick_requests(struct ceph_osd_client *osdc, int force_resend)
    continue;
   }
 
-  err = __map_request(osdc, req, force_resend);
+  force_resend_req = force_resend ||
+   (force_resend_writes &&
+    req->r_flags & CEPH_OSD_FLAG_WRITE);
+  err = __map_request(osdc, req, force_resend_req);
   if (err < 0)
    continue;  /* error */
   if (req->r_osd == NULL) {
@@ -1695,7 +1701,8 @@ static void kick_requests(struct ceph_osd_client *osdc, int force_resend)
      r_linger_item) {
   dout("linger req=%p req->r_osd=%p\n", req, req->r_osd);
 
-  err = __map_request(osdc, req, force_resend);
+  err = __map_request(osdc, req,
+        force_resend || force_resend_writes);
   dout("__map_request returned %d\n", err);
   if (err == 0)
    continue;  /* no change and no osd was specified */
@@ -1737,6 +1744,7 @@ void ceph_osdc_handle_map(struct ceph_osd_client *osdc, struct ceph_msg *msg)
  struct ceph_osdmap *newmap = NULL, *oldmap;
  int err;
  struct ceph_fsid fsid;
+ bool was_full;
 
  dout("handle_map have %u\n", osdc->osdmap ? osdc->osdmap->epoch : 0);
  p = msg->front.iov_base;
@@ -1750,6 +1758,8 @@ void ceph_osdc_handle_map(struct ceph_osd_client *osdc, struct ceph_msg *msg)
 
  down_write(&osdc->map_sem);
 
+ was_full = ceph_osdmap_flag(osdc->osdmap, CEPH_OSDMAP_FULL);
+
  /* incremental maps */
  ceph_decode_32_safe(&p, end, nr_maps, bad);
  dout(" %d inc maps\n", nr_maps);
@@ -1774,7 +1784,10 @@ void ceph_osdc_handle_map(struct ceph_osd_client *osdc, struct ceph_msg *msg)
     ceph_osdmap_destroy(osdc->osdmap);
     osdc->osdmap = newmap;
    }
-   kick_requests(osdc, 0);
+   was_full = was_full ||
+    ceph_osdmap_flag(osdc->osdmap,
+       CEPH_OSDMAP_FULL);
+   kick_requests(osdc, 0, was_full);
   } else {
    dout("ignoring incremental map %u len %d\n",
         epoch, maplen);
@@ -1817,7 +1830,10 @@ void ceph_osdc_handle_map(struct ceph_osd_client *osdc, struct ceph_msg *msg)
      skipped_map = 1;
     ceph_osdmap_destroy(oldmap);
    }
-   kick_requests(osdc, skipped_map);
+   was_full = was_full ||
+    ceph_osdmap_flag(osdc->osdmap,
+       CEPH_OSDMAP_FULL);
+   kick_requests(osdc, skipped_map, was_full);
   }
   p += maplen;
   nr_maps--;
-- 
1.7.1