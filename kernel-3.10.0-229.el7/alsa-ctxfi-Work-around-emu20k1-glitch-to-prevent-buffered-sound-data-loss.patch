From b8029cf055ddf6208de9bffcb22235f96a60a9c3 Mon Sep 17 00:00:00 2001
From: Jaroslav Kysela <jkysela@redhat.com>
Date: Wed, 3 Sep 2014 07:13:33 -0400
Subject: [alsa] ctxfi: Work around emu20k1 glitch to prevent buffered sound data loss

Message-id: <140972823573-30-patchset-jkysela@redhat.com>
Patchwork-id: 90730
O-Subject: [RHEL 7.1 PATCH 029/442] ALSA: ctxfi - Work around emu20k1 glitch to prevent buffered sound data loss
Bugzilla: 1112200
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>

Occasionally, on playback stream ringbuffer wraparound, the EMU20K1
hardware will momentarily return 0 instead of the proper current(loop)
address. This patch handles that case, fixing the problem of playback
position corruption and subsequent loss of buffered sound data, that
occurs with some common buffering layout patterns(e.g. multiple
simultaneous output streams with differently-sized or
non-power-of-2-sized buffers).

An alternate means of fixing the problem would be to read the ca
register continuously, until two sequential reads return the same
value; however, that would be a more invasive change, has performance
implications, and isn't necessary unless there are also issues with the
value not being updated atomically in regards to individual bits or
something similar(which I have not encountered through light testing).

I have no EMU20K2 hardware to confirm if the issue is present there,
but even if it's not, this change shouldn't break anything that's not
already broken.

Signed-off-by: Sarah Bessmer <aotos@fastmail.fm>
Signed-off-by: Takashi Iwai <tiwai@suse.de>

(picked from kernel: e240a46965dd14db6e6bdf8974ebb347f3db860b)
rhbz#1112200
Signed-off-by: Jaroslav Kysela <jkysela@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/sound/pci/ctxfi/ctatc.c b/sound/pci/ctxfi/ctatc.c
index b5fa583..eb86829 100644
--- a/sound/pci/ctxfi/ctatc.c
+++ b/sound/pci/ctxfi/ctatc.c
@@ -435,6 +435,11 @@ atc_pcm_playback_position(struct ct_atc *atc, struct ct_atc_pcm *apcm)
   return 0;
  position = src->ops->get_ca(src);
 
+ if (position < apcm->vm_block->addr) {
+  snd_printdd("ctxfi: bad ca - ca=0x%08x, vba=0x%08x, vbs=0x%08x\n", position, apcm->vm_block->addr, apcm->vm_block->size);
+  position = apcm->vm_block->addr;
+ }
+
  size = apcm->vm_block->size;
  max_cisz = src->multi * src->rsc.msr;
  max_cisz = 128 * (max_cisz < 8 ? max_cisz : 8);
-- 
1.7.1