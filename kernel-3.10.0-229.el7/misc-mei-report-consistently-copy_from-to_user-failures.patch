From 23e2be9bb4926bba6b98ac53ea32fa717c471b8d Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 2 May 2014 14:37:43 -0400
Subject: [misc] mei: report consistently copy_from/to_user failures

Message-id: <1399041470-21330-71-git-send-email-prarit@redhat.com>
Patchwork-id: 79355
O-Subject: [RHEL7.1 PATCH BZ 1088953 70/77] mei: report consistently copy_from/to_user failures
Bugzilla: 1088953
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit dbac4745270bb8a8c5f119d21ce25764e9d7557d
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Wed Mar 12 13:19:13 2014 +0200

    mei: report consistently copy_from/to_user failures

    Consistently display error on possible copy_from/to_user failures
    use dev_dbg  so it cannot be abused to flood the kernel log

    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/amthif.c b/drivers/misc/mei/amthif.c
index 9ccb57c..7057291 100644
--- a/drivers/misc/mei/amthif.c
+++ b/drivers/misc/mei/amthif.c
@@ -245,8 +245,10 @@ int mei_amthif_read(struct mei_device *dev, struct file *file,
   * the buf_idx may point beyond */
  length = min_t(size_t, length, (cb->buf_idx - *offset));
 
- if (copy_to_user(ubuf, cb->response_buffer.data + *offset, length))
+ if (copy_to_user(ubuf, cb->response_buffer.data + *offset, length)) {
+  dev_dbg(&dev->pdev->dev, "failed to copy data to userland\n");
   rets = -EFAULT;
+ }
  else {
   rets = length;
   if ((*offset + length) < cb->buf_idx) {
diff --git a/drivers/misc/mei/main.c b/drivers/misc/mei/main.c
index 7be45db..4b98d31 100644
--- a/drivers/misc/mei/main.c
+++ b/drivers/misc/mei/main.c
@@ -293,6 +293,7 @@ copy_buffer:
  length = min_t(size_t, length, cb->buf_idx - *offset);
 
  if (copy_to_user(ubuf, cb->response_buffer.data + *offset, length)) {
+  dev_dbg(&dev->pdev->dev, "failed to copy data to userland\n");
   rets = -EFAULT;
   goto free;
  }
@@ -413,7 +414,7 @@ static ssize_t mei_write(struct file *file, const char __user *ubuf,
 
  rets = copy_from_user(write_cb->request_buffer.data, ubuf, length);
  if (rets) {
-  dev_err(&dev->pdev->dev, "failed to copy data from userland\n");
+  dev_dbg(&dev->pdev->dev, "failed to copy data from userland\n");
   rets = -EFAULT;
   goto out;
  }
@@ -588,7 +589,7 @@ static long mei_ioctl(struct file *file, unsigned int cmd, unsigned long data)
  dev_dbg(&dev->pdev->dev, "copy connect data from user\n");
  if (copy_from_user(connect_data, (char __user *)data,
     sizeof(struct mei_connect_client_data))) {
-  dev_err(&dev->pdev->dev, "failed to copy data from userland\n");
+  dev_dbg(&dev->pdev->dev, "failed to copy data from userland\n");
   rets = -EFAULT;
   goto out;
  }
-- 
1.7.1