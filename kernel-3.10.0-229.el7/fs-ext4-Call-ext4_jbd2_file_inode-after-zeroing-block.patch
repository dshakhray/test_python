From a71c844b685884b0bb8fb9f62d071d9952b0d0cf Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Tue, 21 Oct 2014 13:26:38 -0400
Subject: [fs] ext4: Call ext4_jbd2_file_inode() after zeroing block

Message-id: <1413898007-15450-7-git-send-email-lczerner@redhat.com>
Patchwork-id: 97889
O-Subject: [RHEL 7.1 PATCH v2 06/15] ext4: Call ext4_jbd2_file_inode() after zeroing block
Bugzilla: 1144326
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

BZ 1144326
https://bugzilla.redhat.com/show_bug.cgi?id=1144326

BREW 8095073
https://brewweb.devel.redhat.com/taskinfo?taskID=8095073

Upstream commit 0713ed0cde76438d05849f1537d3aab46e099475

 In data=ordered mode we should call ext4_jbd2_file_inode() so that crash
 after the truncate transaction has committed does not expose stall data
 in the tail of the block.

 Thanks Jan Kara for pointing that out.

 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 165ed6e..d9a3acb 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -3684,8 +3684,11 @@ int ext4_block_zero_page_range(handle_t *handle,
  err = 0;
  if (ext4_should_journal_data(inode)) {
   err = ext4_handle_dirty_metadata(handle, inode, bh);
- } else
+ } else {
   mark_buffer_dirty(bh);
+  if (ext4_test_inode_state(inode, EXT4_STATE_ORDERED_MODE))
+   err = ext4_jbd2_file_inode(handle, inode);
+ }
 
 unlock:
  unlock_page(page);
-- 
1.7.1