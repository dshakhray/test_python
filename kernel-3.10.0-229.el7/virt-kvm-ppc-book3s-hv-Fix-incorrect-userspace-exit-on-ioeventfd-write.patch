From b9abf1ce3c14f09970d5c377ec0aab685e397744 Mon Sep 17 00:00:00 2001
From: David Gibson <dgibson@redhat.com>
Date: Mon, 15 Sep 2014 07:12:44 -0400
Subject: [virt] kvm/ppc: book3s/hv - Fix incorrect userspace exit on ioeventfd write

Message-id: <1410765214-16377-29-git-send-email-dgibson@redhat.com>
Patchwork-id: 94730
O-Subject: [PATCH 28/78] KVM: PPC: Book3S HV: Fix incorrect userspace exit on ioeventfd write
Bugzilla: 1123145 1123133 1123367
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1123145

Signed-off-by: David Gibson <dgibson@redhat.com>

commit e59d24e61269de34d79d2f39d3d581c219ac7a94
Author: Greg Kurz <gkurz@linux.vnet.ibm.com>
Date:   Thu Feb 6 17:36:56 2014 +0100

    KVM: PPC: Book3S HV: Fix incorrect userspace exit on ioeventfd write

    When the guest does an MMIO write which is handled successfully by an
    ioeventfd, ioeventfd_write() returns 0 (success) and
    kvmppc_handle_store() returns EMULATE_DONE.  Then
    kvmppc_emulate_mmio() converts EMULATE_DONE to RESUME_GUEST_NV and
    this causes an exit from the loop in kvmppc_vcpu_run_hv(), causing an
    exit back to userspace with a bogus exit reason code, typically
    causing userspace (e.g. qemu) to crash with a message about an unknown
    exit code.

    This adds handling of RESUME_GUEST_NV in kvmppc_vcpu_run_hv() in order
    to fix that.  For generality, we define a helper to check for either
    of the return-to-guest codes we use, RESUME_GUEST and RESUME_GUEST_NV,
    to make it easy to check for either and provide one place to update if
    any other return-to-guest code gets defined in future.

    Since it only affects Book3S HV for now, the helper is added to
    the kvm_book3s.h header file.

    We use the helper in two places in kvmppc_run_core() as well for
    future-proofing, though we don't see RESUME_GUEST_NV in either place
    at present.

    [paulus@samba.org - combined 4 patches into one, rewrote description]

    Suggested-by: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/include/asm/kvm_book3s.h b/arch/powerpc/include/asm/kvm_book3s.h
index 1918dac..a31e49c 100644
--- a/arch/powerpc/include/asm/kvm_book3s.h
+++ b/arch/powerpc/include/asm/kvm_book3s.h
@@ -309,6 +309,11 @@ static inline ulong kvmppc_get_fault_dar(struct kvm_vcpu *vcpu)
  return vcpu->arch.fault_dar;
 }
 
+static inline bool is_kvmppc_resume_guest(int r)
+{
+ return (r == RESUME_GUEST || r == RESUME_GUEST_NV);
+}
+
 /* Magic register values loaded into r3 and r4 before the 'sc' assembly
  * instruction for the OSI hypercalls */
 #define OSI_SC_MAGIC_R3   0x113724FA
diff --git a/arch/powerpc/kvm/book3s_hv.c b/arch/powerpc/kvm/book3s_hv.c
index ceefd84..204e3a3 100644
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@ -1728,7 +1728,7 @@ static void kvmppc_run_core(struct kvmppc_vcore *vc)
   vcpu->arch.trap = 0;
 
   if (vcpu->arch.ceded) {
-   if (ret != RESUME_GUEST)
+   if (!is_kvmppc_resume_guest(ret))
     kvmppc_end_cede(vcpu);
    else
     kvmppc_set_timer(vcpu);
@@ -1739,7 +1739,7 @@ static void kvmppc_run_core(struct kvmppc_vcore *vc)
  vc->vcore_state = VCORE_INACTIVE;
  list_for_each_entry_safe(vcpu, vnext, &vc->runnable_threads,
      arch.run_list) {
-  if (vcpu->arch.ret != RESUME_GUEST) {
+  if (!is_kvmppc_resume_guest(vcpu->arch.ret)) {
    kvmppc_remove_runnable(vc, vcpu);
    wake_up(&vcpu->arch.cpu_run);
   }
@@ -1929,7 +1929,7 @@ static int kvmppc_vcpu_run_hv(struct kvm_run *run, struct kvm_vcpu *vcpu)
     vcpu->arch.fault_dar, vcpu->arch.fault_dsisr);
    srcu_read_unlock(&vcpu->kvm->srcu, srcu_idx);
   }
- } while (r == RESUME_GUEST);
+ } while (is_kvmppc_resume_guest(r));
 
  out:
  vcpu->arch.state = KVMPPC_VCPU_NOTREADY;
-- 
1.7.1