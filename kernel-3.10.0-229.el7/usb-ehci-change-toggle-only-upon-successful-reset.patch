From a0d376f343cd012873a0e3947e9d8727ddf5a8cb Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Tue, 16 Sep 2014 17:01:52 -0400
Subject: [usb] ehci: change toggle only upon successful reset

Message-id: <1410887463-20674-41-git-send-email-dzickus@redhat.com>
Patchwork-id: 95133
O-Subject: [RHEL7 PATCH 040/591] USB: EHCI: change toggle only upon successful reset
Bugzilla: 1110939
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1110939

commit 27c4a31d6739095d613c6e72fb44867bc28c699f
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Oct 11 11:28:44 2013 -0400

    USB: EHCI: change toggle only upon successful reset

    ehci-hcd uses a value of 0 in an endpoint's toggle flag to indicate
    that the endpoint has been reset (and therefore the Data Toggle bit
    needs to be cleared in the endpoint's QH overlay region).

    The toggle flag should be set to 0 only when ehci_endpoint_reset()
    succeeds.  This patch moves the usb_settoggle() call into the
    appropriate branch of the "if" statement.

    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/host/ehci-hcd.c b/drivers/usb/host/ehci-hcd.c
index 069f63f..83f9675 100644
--- a/drivers/usb/host/ehci-hcd.c
+++ b/drivers/usb/host/ehci-hcd.c
@@ -1022,7 +1022,6 @@ ehci_endpoint_reset(struct usb_hcd *hcd, struct usb_host_endpoint *ep)
   * the toggle bit in the QH.
   */
  if (qh) {
-  usb_settoggle(qh->dev, epnum, is_out, 0);
   if (!list_empty(&qh->qtd_list)) {
    WARN_ONCE(1, "clear_halt for a busy endpoint\n");
   } else {
@@ -1030,6 +1029,7 @@ ehci_endpoint_reset(struct usb_hcd *hcd, struct usb_host_endpoint *ep)
     * while the QH is active.  Unlink it now;
     * re-linking will call qh_refresh().
     */
+   usb_settoggle(qh->dev, epnum, is_out, 0);
    qh->exception = 1;
    if (eptype == USB_ENDPOINT_XFER_BULK)
     start_unlink_async(ehci, qh);
-- 
1.7.1