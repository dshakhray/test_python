From 82d36b79eeaf49f3e176320bbd280578d2638cb3 Mon Sep 17 00:00:00 2001
From: Oleg Nesterov <oleg@redhat.com>
Date: Mon, 16 Jun 2014 16:01:15 -0400
Subject: [kernel] uprobes: Kill the "ia32_compat" check in handle_riprel_insn(), remove "mm" arg

Message-id: <20140616160115.GA15397@redhat.com>
Patchwork-id: 84067
O-Subject: [PATCH RHEL7 BZ 1073627 03/36] uprobes/x86: Kill the "ia32_compat" check in handle_riprel_insn(), remove "mm" arg
Bugzilla: 1073627
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

RHBZ: 1073627

Kill the "mm->context.ia32_compat" check in handle_riprel_insn(), if
it is true insn_rip_relative() must return false. validate_insn_bits()
passed "ia32_compat" as !x86_64 to insn_init(), and insn_rip_relative()
checks insn->x86_64.

Also, remove the no longer needed "struct mm_struct *mm" argument and
the unnecessary "return" at the end.

Signed-off-by: Oleg Nesterov <oleg@redhat.com>
Reviewed-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
Reviewed-by: Jim Keniston <jkenisto@us.ibm.com>
Acked-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
(cherry picked from commit 59078d4b96bb548f97d9fb429b929a289e4884d9)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/uprobes.c b/arch/x86/kernel/uprobes.c
index 098e56e..963c121 100644
--- a/arch/x86/kernel/uprobes.c
+++ b/arch/x86/kernel/uprobes.c
@@ -253,14 +253,11 @@ static int validate_insn_32bits(struct arch_uprobe *auprobe, struct insn *insn)
  *  - The displacement is always 4 bytes.
  */
 static void
-handle_riprel_insn(struct arch_uprobe *auprobe, struct mm_struct *mm, struct insn *insn)
+handle_riprel_insn(struct arch_uprobe *auprobe, struct insn *insn)
 {
  u8 *cursor;
  u8 reg;
 
- if (mm->context.ia32_compat)
-  return;
-
  if (!insn_rip_relative(insn))
   return;
 
@@ -314,7 +311,6 @@ handle_riprel_insn(struct arch_uprobe *auprobe, struct mm_struct *mm, struct ins
   cursor++;
   memmove(cursor, cursor + insn->displacement.nbytes, insn->immediate.nbytes);
  }
- return;
 }
 
 static int validate_insn_64bits(struct arch_uprobe *auprobe, struct insn *insn)
@@ -343,7 +339,7 @@ static int validate_insn_bits(struct arch_uprobe *auprobe, struct mm_struct *mm,
  return validate_insn_64bits(auprobe, insn);
 }
 #else /* 32-bit: */
-static void handle_riprel_insn(struct arch_uprobe *auprobe, struct mm_struct *mm, struct insn *insn)
+static void handle_riprel_insn(struct arch_uprobe *auprobe, struct insn *insn)
 {
  /* No RIP-relative addressing on 32-bit */
 }
@@ -376,7 +372,7 @@ int arch_uprobe_analyze_insn(struct arch_uprobe *auprobe, struct mm_struct *mm,
   * and annotate arch_uprobe->fixups accordingly. To start with, ->fixups
   * is either zero or it reflects rip-related fixups.
   */
- handle_riprel_insn(auprobe, mm, &insn);
+ handle_riprel_insn(auprobe, &insn);
 
  switch (OPCODE1(&insn)) {
  case 0x9d:  /* popf */
-- 
1.7.1