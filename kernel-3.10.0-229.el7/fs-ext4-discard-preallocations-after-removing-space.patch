From 4d8837d4e6fbb2fd15d1c11343111138fb3573cc Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:42 -0400
Subject: [fs] ext4: discard preallocations after removing space

Message-id: <1414059176-6044-19-git-send-email-lczerner@redhat.com>
Patchwork-id: 98296
O-Subject: [RHEL 7.1 PATCH 18/32] ext4: discard preallocations after removing space
Bugzilla: 1150171

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit ef24f6c234de9a03aed9368163dbaad9a4f6391f

 Currently in ext4_collapse_range() and ext4_punch_hole() we're
 discarding preallocation twice. Once before we attempt to do any changes
 and second time after we're done with the changes.

 While the second call to ext4_discard_preallocations() in
 ext4_punch_hole() case is not needed, we need to discard preallocation
 right after ext4_ext_remove_space() in collapse range case because in
 the case we had to restart a transaction in the middle of removing space
 we might have new preallocations created.

 Remove unneeded ext4_discard_preallocations() ext4_punch_hole() and move
 it to the better place in ext4_collapse_range()

 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index ff313cc..962d5b9 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -5460,6 +5460,7 @@ int ext4_collapse_range(struct inode *inode, loff_t offset, loff_t len)
   up_write(&EXT4_I(inode)->i_data_sem);
   goto out_stop;
  }
+ ext4_discard_preallocations(inode);
 
  ret = ext4_ext_shift_extents(inode, handle, punch_stop,
          punch_stop - punch_start);
@@ -5472,7 +5473,6 @@ int ext4_collapse_range(struct inode *inode, loff_t offset, loff_t len)
  i_size_write(inode, new_size);
  EXT4_I(inode)->i_disksize = new_size;
 
- ext4_discard_preallocations(inode);
  up_write(&EXT4_I(inode)->i_data_sem);
  if (IS_SYNC(inode))
   ext4_handle_sync(handle);
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 6618ba7..47d1d60 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -3649,7 +3649,6 @@ int ext4_punch_hole(struct inode *inode, loff_t offset, loff_t length)
   ret = ext4_free_hole_blocks(handle, inode, first_block,
          stop_block);
 
- ext4_discard_preallocations(inode);
  up_write(&EXT4_I(inode)->i_data_sem);
  if (IS_SYNC(inode))
   ext4_handle_sync(handle);
-- 
1.7.1