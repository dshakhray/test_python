From 142430d755893126d5cf48b23cd4c0e72c59d933 Mon Sep 17 00:00:00 2001
From: David Gibson <dgibson@redhat.com>
Date: Mon, 15 Sep 2014 07:13:32 -0400
Subject: [virt] kvm/ppc: book3s_32/pr - Access HTAB in big endian

Message-id: <1410765214-16377-77-git-send-email-dgibson@redhat.com>
Patchwork-id: 94778
O-Subject: [PATCH 76/78] KVM: PPC: Book3S_32: PR: Access HTAB in big endian
Bugzilla: 1123145 1123133 1123367
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

Signed-off-by: David Gibson <dgibson@redhat.com>

commit 860540bc50a174c2dff5e11821375475a5da5f4e
Author: Alexander Graf <agraf@suse.de>
Date:   Thu Apr 24 12:51:44 2014 +0200

    KVM: PPC: Book3S_32: PR: Access HTAB in big endian

    The HTAB is always big endian. We access the guest's HTAB using
    copy_from/to_user, but don't yet take care of the fact that we might
    be running on an LE host.

    Wrap all accesses to the guest HTAB with big endian accessors.

    Signed-off-by: Alexander Graf <agraf@suse.de>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/kvm/book3s_32_mmu.c b/arch/powerpc/kvm/book3s_32_mmu.c
index b3808b3..93503bb 100644
--- a/arch/powerpc/kvm/book3s_32_mmu.c
+++ b/arch/powerpc/kvm/book3s_32_mmu.c
@@ -208,6 +208,7 @@ static int kvmppc_mmu_book3s_32_xlate_pte(struct kvm_vcpu *vcpu, gva_t eaddr,
  u32 sre;
  hva_t ptegp;
  u32 pteg[16];
+ u32 pte0, pte1;
  u32 ptem = 0;
  int i;
  int found = 0;
@@ -233,11 +234,13 @@ static int kvmppc_mmu_book3s_32_xlate_pte(struct kvm_vcpu *vcpu, gva_t eaddr,
  }
 
  for (i=0; i<16; i+=2) {
-  if (ptem == pteg[i]) {
+  pte0 = be32_to_cpu(pteg[i]);
+  pte1 = be32_to_cpu(pteg[i + 1]);
+  if (ptem == pte0) {
    u8 pp;
 
-   pte->raddr = (pteg[i+1] & ~(0xFFFULL)) | (eaddr & 0xFFF);
-   pp = pteg[i+1] & 3;
+   pte->raddr = (pte1 & ~(0xFFFULL)) | (eaddr & 0xFFF);
+   pp = pte1 & 3;
 
    if ((sr_kp(sre) &&  (kvmppc_get_msr(vcpu) & MSR_PR)) ||
        (sr_ks(sre) && !(kvmppc_get_msr(vcpu) & MSR_PR)))
@@ -260,7 +263,7 @@ static int kvmppc_mmu_book3s_32_xlate_pte(struct kvm_vcpu *vcpu, gva_t eaddr,
    }
 
    dprintk_pte("MMU: Found PTE -> %x %x - %x\n",
-        pteg[i], pteg[i+1], pp);
+        pte0, pte1, pp);
    found = 1;
    break;
   }
@@ -269,7 +272,7 @@ static int kvmppc_mmu_book3s_32_xlate_pte(struct kvm_vcpu *vcpu, gva_t eaddr,
  /* Update PTE C and A bits, so the guest's swapper knows we used the
     page */
  if (found) {
-  u32 pte_r = pteg[i+1];
+  u32 pte_r = pte1;
   char __user *addr = (char __user *) (ptegp + (i+1) * sizeof(u32));
 
   /*
@@ -296,7 +299,8 @@ no_page_found:
        to_book3s(vcpu)->sdr1, ptegp);
   for (i=0; i<16; i+=2) {
    dprintk_pte("   %02d: 0x%x - 0x%x (0x%x)\n",
-        i, pteg[i], pteg[i+1], ptem);
+        i, be32_to_cpu(pteg[i]),
+        be32_to_cpu(pteg[i+1]), ptem);
   }
  }
 
-- 
1.7.1