From 58849a9fc745546123cdc973018f7f8d0c1da39c Mon Sep 17 00:00:00 2001
From: Steve Dickson <SteveD@redhat.com>
Date: Thu, 18 Sep 2014 14:20:22 -0400
Subject: [fs] sunrpc: remove "ec" argument from encrypt_v2 operation

Message-id: <1411050057-12417-60-git-send-email-steved@redhat.com>
Patchwork-id: 96202
O-Subject: [RHEL7.1 PATCH 59/94] sunrpc: remove "ec" argument from encrypt_v2 operation
Bugzilla: 1111708
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Jeff Layton <jlayton@primarydata.com>

It's always 0.

Signed-off-by: Jeff Layton <jlayton@primarydata.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream Id: ec25422c669d38f4e8a83da7f77950094349de48
Bugzilla: 1111708
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/sunrpc/gss_krb5.h b/include/linux/sunrpc/gss_krb5.h
index 5af2931..df02a41 100644
--- a/include/linux/sunrpc/gss_krb5.h
+++ b/include/linux/sunrpc/gss_krb5.h
@@ -81,7 +81,7 @@ struct gss_krb5_enctype {
          struct xdr_netobj *in,
          struct xdr_netobj *out); /* complete key generation */
  u32 (*encrypt_v2) (struct krb5_ctx *kctx, u32 offset,
-      struct xdr_buf *buf, int ec,
+      struct xdr_buf *buf,
       struct page **pages); /* v2 encryption function */
  u32 (*decrypt_v2) (struct krb5_ctx *kctx, u32 offset,
       struct xdr_buf *buf, u32 *headskip,
@@ -310,7 +310,7 @@ gss_krb5_aes_make_key(const struct gss_krb5_enctype *gk5e,
 
 u32
 gss_krb5_aes_encrypt(struct krb5_ctx *kctx, u32 offset,
-       struct xdr_buf *buf, int ec,
+       struct xdr_buf *buf,
        struct page **pages);
 
 u32
diff --git a/net/sunrpc/auth_gss/gss_krb5_crypto.c b/net/sunrpc/auth_gss/gss_krb5_crypto.c
index 0f43e89..f5ed9f6 100644
--- a/net/sunrpc/auth_gss/gss_krb5_crypto.c
+++ b/net/sunrpc/auth_gss/gss_krb5_crypto.c
@@ -641,7 +641,7 @@ out:
 
 u32
 gss_krb5_aes_encrypt(struct krb5_ctx *kctx, u32 offset,
-       struct xdr_buf *buf, int ec, struct page **pages)
+       struct xdr_buf *buf, struct page **pages)
 {
  u32 err;
  struct xdr_netobj hmac;
@@ -684,13 +684,8 @@ gss_krb5_aes_encrypt(struct krb5_ctx *kctx, u32 offset,
   ecptr = buf->tail[0].iov_base;
  }
 
- memset(ecptr, 'X', ec);
- buf->tail[0].iov_len += ec;
- buf->len += ec;
-
  /* copy plaintext gss token header after filler (if any) */
- memcpy(ecptr + ec, buf->head[0].iov_base + offset,
-      GSS_KRB5_TOK_HDR_LEN);
+ memcpy(ecptr, buf->head[0].iov_base + offset, GSS_KRB5_TOK_HDR_LEN);
  buf->tail[0].iov_len += GSS_KRB5_TOK_HDR_LEN;
  buf->len += GSS_KRB5_TOK_HDR_LEN;
 
diff --git a/net/sunrpc/auth_gss/gss_krb5_wrap.c b/net/sunrpc/auth_gss/gss_krb5_wrap.c
index b3f14b6..7c3f2d4 100644
--- a/net/sunrpc/auth_gss/gss_krb5_wrap.c
+++ b/net/sunrpc/auth_gss/gss_krb5_wrap.c
@@ -483,7 +483,7 @@ gss_wrap_kerberos_v2(struct krb5_ctx *kctx, u32 offset,
  *be64ptr = cpu_to_be64(kctx->seq_send64++);
  spin_unlock(&krb5_seq_lock);
 
- err = (*kctx->gk5e->encrypt_v2)(kctx, offset, buf, 0, pages);
+ err = (*kctx->gk5e->encrypt_v2)(kctx, offset, buf, pages);
  if (err)
   return err;
 
-- 
1.7.1