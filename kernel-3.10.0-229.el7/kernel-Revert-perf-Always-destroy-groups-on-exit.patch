From ecb0e33ad13fa0627e0fbb0fcfd3f2338b171224 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:04:42 -0400
Subject: [kernel] Revert: perf: Always destroy groups on exit

Message-id: <1410181752-25631-38-git-send-email-jolsa@redhat.com>
Patchwork-id: 91718
O-Subject: [PATCH RHEL7.1 BZ1134356 037/307] perf: Revert ("perf: Always destroy groups on exit")
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit 1903d50cba54261a6562a476c05085f3d7a54097
Author: Peter Zijlstra <peterz@infradead.org>
Date: Tue Jul 15 17:27:27 2014 +0200

description
===========
Vince reported that commit 15a2d4de0eab5 ("perf: Always destroy groups
on exit") causes a regression with grouped events. In particular his
read_group_attached.c test fails.

  https://github.com/deater/perf_event_tests/blob/master/tests/bugs/read_group_attached.c

Because of the context switch optimization in
perf_event_context_sched_out() the 'original' event may end up in the
child process and when that exits the change in the patch in question
destroys the actual grouping.

Therefore revert that change and only destroy inherited groups.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index 9416ee0..cde1c72 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -7476,7 +7476,19 @@ __perf_event_exit_task(struct perf_event *child_event,
     struct perf_event_context *child_ctx,
     struct task_struct *child)
 {
- perf_remove_from_context(child_event, true);
+ /*
+  * Do not destroy the 'original' grouping; because of the context
+  * switch optimization the original events could've ended up in a
+  * random child task.
+  *
+  * If we were to destroy the original group, all group related
+  * operations would cease to function properly after this random
+  * child dies.
+  *
+  * Do destroy all inherited groups, we don't care about those
+  * and being thorough is better.
+  */
+ perf_remove_from_context(child_event, !!child_event->parent);
 
  /*
   * It can happen that the parent exits first, and has events
-- 
1.7.1