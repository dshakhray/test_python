From 0e5b5a54872c53f2809bfbd59a4988622eb521b7 Mon Sep 17 00:00:00 2001
From: Mike Snitzer <snitzer@redhat.com>
Date: Thu, 13 Nov 2014 01:53:36 -0500
Subject: [md] dm-cache-policy-mq: simplify ability to promote sequential IO to the cache

Message-id: <1415843623-26132-3-git-send-email-snitzer@redhat.com>
Patchwork-id: 99882
O-Subject: [RHEL7.1 PATCH 2/9] dm cache policy mq: simplify ability to promote sequential IO to the cache
Bugzilla: 1159001
RH-Acked-by: Joe Thornber <thornber@redhat.com>

BZ: 1159001

Upstream linux-dm.git commit f1afb36a6102b52949c2c6d8eb250eddcce3fc5f
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Thu Oct 30 10:02:01 2014 -0400

    dm cache policy mq: simplify ability to promote sequential IO to the cache

    Before, if the user wanted sequential IO to be promoted to the cache
    they'd have to set sequential_threshold to some nebulous large value.

    Now, the user may easily disable sequential IO detection (and sequential
    IO's implicit bypass of the cache) by setting sequential_threshold to 0.

    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/device-mapper/cache-policies.txt b/Documentation/device-mapper/cache-policies.txt
index 7746e5d..0d124a9 100644
--- a/Documentation/device-mapper/cache-policies.txt
+++ b/Documentation/device-mapper/cache-policies.txt
@@ -47,16 +47,22 @@ Message and constructor argument pairs are:
  'discard_promote_adjustment <value>'
 
 The sequential threshold indicates the number of contiguous I/Os
-required before a stream is treated as sequential.  The random threshold
+required before a stream is treated as sequential.  Once a stream is
+considered sequential it will bypass the cache.  The random threshold
 is the number of intervening non-contiguous I/Os that must be seen
 before the stream is treated as random again.
 
 The sequential and random thresholds default to 512 and 4 respectively.
 
-Large, sequential ios are probably better left on the origin device
-since spindles tend to have good bandwidth. The io_tracker counts
-contiguous I/Os to try to spot when the io is in one of these sequential
-modes.
+Large, sequential I/Os are probably better left on the origin device
+since spindles tend to have good sequential I/O bandwidth.  The
+io_tracker counts contiguous I/Os to try to spot when the I/O is in one
+of these sequential modes.  But there are use-cases for wanting to
+promote sequential blocks to the cache (e.g. fast application startup).
+If sequential threshold is set to 0 the sequential I/O detection is
+disabled and sequential I/O will no longer implicitly bypass the cache.
+Setting the random threshold to 0 does _not_ disable the random I/O
+stream detection.
 
 Internally the mq policy determines a promotion threshold.  If the hit
 count of a block not in the cache goes above this threshold it gets
diff --git a/drivers/md/dm-cache-policy-mq.c b/drivers/md/dm-cache-policy-mq.c
index 7a8a24f..fea45dc 100644
--- a/drivers/md/dm-cache-policy-mq.c
+++ b/drivers/md/dm-cache-policy-mq.c
@@ -865,7 +865,8 @@ static int map(struct mq_policy *mq, dm_oblock_t oblock,
  if (e && in_cache(mq, e))
   r = cache_entry_found(mq, e, result);
 
- else if (iot_pattern(&mq->tracker) == PATTERN_SEQUENTIAL)
+ else if (mq->tracker.thresholds[PATTERN_SEQUENTIAL] &&
+   iot_pattern(&mq->tracker) == PATTERN_SEQUENTIAL)
   result->op = POLICY_MISS;
 
  else if (e)
@@ -1290,7 +1291,7 @@ bad_pre_cache_init:
 
 static struct dm_cache_policy_type mq_policy_type = {
  .name = "mq",
- .version = {1, 2, 0},
+ .version = {1, 3, 0},
  .hint_size = 4,
  .owner = THIS_MODULE,
  .create = mq_create
@@ -1298,7 +1299,7 @@ static struct dm_cache_policy_type mq_policy_type = {
 
 static struct dm_cache_policy_type default_policy_type = {
  .name = "default",
- .version = {1, 2, 0},
+ .version = {1, 3, 0},
  .hint_size = 4,
  .owner = THIS_MODULE,
  .create = mq_create,
-- 
1.7.1