From ddc972fa43bb8bb9460716a2e7f2b04471edd9ae Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:27:56 -0400
Subject: [net] netlink: hold nl_sock_hash_lock during diag dump

Message-id: <e70bca543506310e0c96cf54cec9bf897c278c8c.1410528971.git.jbenc@redhat.com>
Patchwork-id: 93966
O-Subject: [RHEL7.1 net PATCH 13/14] netlink: hold nl_sock_hash_lock during diag dump
Bugzilla: 1140661
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Flavio Leitner <fbl@redhat.com>
RH-Acked-by: Hannes Frederic Sowa <hannes@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140661
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

commit 6c8f7e70837468da4e658080d4448930fb597e1b
Author: Thomas Graf <tgraf@suug.ch>
Date:   Thu Aug 7 00:18:47 2014 +0100

    netlink: hold nl_sock_hash_lock during diag dump

    Although RCU protection would be possible during diag dump, doing
    so allows for concurrent table mutations which can render the
    in-table offset between individual Netlink messages invalid and
    thus cause legitimate sockets to be skipped in the dump.

    Since the diag dump is relatively low volume and consistency is
    more important than performance, the table mutex is held during
    dump.

    Reported-by: Andrey Wagin <avagin@gmail.com>
    Signed-off-by: Thomas Graf <tgraf@suug.ch>
    Fixes: e341694e3eb57fc ("netlink: Convert netlink_lookup() to use RCU protected hash table")
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/netlink/af_netlink.c b/net/netlink/af_netlink.c
index 1d9af8e..de509b2 100644
--- a/net/netlink/af_netlink.c
+++ b/net/netlink/af_netlink.c
@@ -104,6 +104,7 @@ static atomic_t nl_table_users = ATOMIC_INIT(0);
 
 /* Protects netlink socket hash table mutations */
 DEFINE_MUTEX(nl_sk_hash_lock);
+EXPORT_SYMBOL_GPL(nl_sk_hash_lock);
 
 static int lockdep_nl_sk_hash_is_held(void)
 {
diff --git a/net/netlink/af_netlink.h b/net/netlink/af_netlink.h
index 43ed397..577fddf 100644
--- a/net/netlink/af_netlink.h
+++ b/net/netlink/af_netlink.h
@@ -71,5 +71,6 @@ struct netlink_table {
 
 extern struct netlink_table *nl_table;
 extern rwlock_t nl_table_lock;
+extern struct mutex nl_sk_hash_lock;
 
 #endif
diff --git a/net/netlink/diag.c b/net/netlink/diag.c
index 7301850..de8c74a 100644
--- a/net/netlink/diag.c
+++ b/net/netlink/diag.c
@@ -170,6 +170,7 @@ static int netlink_diag_dump(struct sk_buff *skb, struct netlink_callback *cb)
 
  req = nlmsg_data(cb->nlh);
 
+ mutex_lock(&nl_sk_hash_lock);
  read_lock(&nl_table_lock);
 
  if (req->sdiag_protocol == NDIAG_PROTO_ALL) {
@@ -183,6 +184,7 @@ static int netlink_diag_dump(struct sk_buff *skb, struct netlink_callback *cb)
  } else {
   if (req->sdiag_protocol >= MAX_LINKS) {
    read_unlock(&nl_table_lock);
+   mutex_unlock(&nl_sk_hash_lock);
    return -ENOENT;
   }
 
@@ -190,6 +192,7 @@ static int netlink_diag_dump(struct sk_buff *skb, struct netlink_callback *cb)
  }
 
  read_unlock(&nl_table_lock);
+ mutex_unlock(&nl_sk_hash_lock);
 
  return skb->len;
 }
-- 
1.7.1