From 742cfe017f645acddefce675e7f55f6647d222fc Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:29:34 -0400
Subject: [net] Change skb_get_rxhash to skb_get_hash

Message-id: <344eb405635e86cd51da8daff6395b5c53a4250f.1410531783.git.jbenc@redhat.com>
Patchwork-id: 93995
O-Subject: [RHEL7.1 net PATCH 01/50] net: Change skb_get_rxhash to skb_get_hash
Bugzilla: 1110384
RH-Acked-by: Flavio Leitner <fbl@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1110384
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

RHEL changes: We don't have skb_flow_limit and net/sched/sch_fq.c.

This patch was a part of 4-patch series from which, strangely, only two
patches (7539fadcb814 and 09323cc47931) were backported. Bring in the
remaining two.

commit 3958afa1b272eb07109fd31549e69193b4d7c364
Author: Tom Herbert <therbert@google.com>
Date:   Sun Dec 15 22:12:06 2013 -0800

    net: Change skb_get_rxhash to skb_get_hash

    Changing name of function as part of making the hash in skbuff to be
    generic property, not just for receive path.

    Signed-off-by: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/macvtap.c b/drivers/net/macvtap.c
index 6326656..1b9e93f 100644
--- a/drivers/net/macvtap.c
+++ b/drivers/net/macvtap.c
@@ -215,7 +215,7 @@ static struct macvtap_queue *macvtap_get_queue(struct net_device *dev,
   goto out;
 
  /* Check if we can use flow to select a queue */
- rxq = skb_get_rxhash(skb);
+ rxq = skb_get_hash(skb);
  if (rxq) {
   tap = rcu_dereference(vlan->taps[rxq % numvtaps]);
   goto out;
diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index f05cf4b..3821951 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -354,7 +354,7 @@ static u16 tun_select_queue(struct net_device *dev, struct sk_buff *skb)
  rcu_read_lock();
  numqueues = ACCESS_ONCE(tun->numqueues);
 
- txq = skb_get_rxhash(skb);
+ txq = skb_get_hash(skb);
  if (txq) {
   e = tun_flow_find(&tun->flows[tun_hashfn(txq)], txq);
   if (e)
@@ -1236,7 +1236,7 @@ static ssize_t tun_get_user(struct tun_struct *tun, struct tun_file *tfile,
  skb_reset_network_header(skb);
  skb_probe_transport_header(skb, 0);
 
- rxhash = skb_get_rxhash(skb);
+ rxhash = skb_get_hash(skb);
  netif_rx_ni(skb);
 
  tun->dev->stats.rx_packets++;
diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index dd436d1..32289ce 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -1564,7 +1564,7 @@ __be16 vxlan_src_port(__u16 port_min, __u16 port_max, struct sk_buff *skb)
  unsigned int range = (port_max - port_min) + 1;
  u32 hash;
 
- hash = skb_get_rxhash(skb);
+ hash = skb_get_hash(skb);
  if (!hash)
   hash = jhash(skb->data, 2 * ETH_ALEN,
         (__force u32) skb->protocol);
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index c9eaa51..a034381 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -823,11 +823,11 @@ skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
  skb->rxhash = hash;
 }
 
-extern void __skb_get_rxhash(struct sk_buff *skb);
-static inline __u32 skb_get_rxhash(struct sk_buff *skb)
+void __skb_get_hash(struct sk_buff *skb);
+static inline __u32 skb_get_hash(struct sk_buff *skb)
 {
  if (!skb->l4_rxhash)
-  __skb_get_rxhash(skb);
+  __skb_get_hash(skb);
 
  return skb->rxhash;
 }
diff --git a/net/core/dev.c b/net/core/dev.c
index 99b23a9..ddd954c 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -2965,7 +2965,7 @@ static int get_rps_cpu(struct net_device *dev, struct sk_buff *skb,
  }
 
  skb_reset_network_header(skb);
- if (!skb_get_rxhash(skb))
+ if (!skb_get_hash(skb))
   goto done;
 
  flow_table = rcu_dereference(rxqueue->rps_flow_table);
diff --git a/net/core/flow_dissector.c b/net/core/flow_dissector.c
index f4742c2..6a5c78b 100644
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@ -165,12 +165,12 @@ EXPORT_SYMBOL(skb_flow_dissect);
 static u32 hashrnd __read_mostly;
 
 /*
- * __skb_get_rxhash: calculate a flow hash based on src/dst addresses
+ * __skb_get_hash: calculate a flow hash based on src/dst addresses
  * and src/dst port numbers.  Sets rxhash in skb to non-zero hash value
  * on success, zero indicates no valid hash.  Also, sets l4_rxhash in skb
  * if hash is a canonical 4-tuple hash over transport ports.
  */
-void __skb_get_rxhash(struct sk_buff *skb)
+void __skb_get_hash(struct sk_buff *skb)
 {
  struct flow_keys keys;
  u32 hash;
@@ -197,7 +197,7 @@ void __skb_get_rxhash(struct sk_buff *skb)
 
  skb->rxhash = hash;
 }
-EXPORT_SYMBOL(__skb_get_rxhash);
+EXPORT_SYMBOL(__skb_get_hash);
 
 /*
  * Returns a Tx hash based on the given packet descriptor a Tx queues' number
diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index d8f1603..4450cf8 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -910,7 +910,7 @@ static void prb_clear_blk_fill_status(struct packet_ring_buffer *rb)
 static void prb_fill_rxhash(struct tpacket_kbdq_core *pkc,
    struct tpacket3_hdr *ppd)
 {
- ppd->hv1.tp_rxhash = skb_get_rxhash(pkc->skb);
+ ppd->hv1.tp_rxhash = skb_get_hash(pkc->skb);
 }
 
 static void prb_clear_rxhash(struct tpacket_kbdq_core *pkc,
@@ -1283,7 +1283,7 @@ static int packet_rcv_fanout(struct sk_buff *skb, struct net_device *dev,
    if (!skb)
     return 0;
   }
-  skb_get_rxhash(skb);
+  skb_get_hash(skb);
   idx = fanout_demux_hash(f, skb, num);
   break;
  case PACKET_FANOUT_LB:
diff --git a/net/sched/cls_flow.c b/net/sched/cls_flow.c
index 7881e2f..83a6322 100644
--- a/net/sched/cls_flow.c
+++ b/net/sched/cls_flow.c
@@ -220,7 +220,7 @@ static u32 flow_get_vlan_tag(const struct sk_buff *skb)
 
 static u32 flow_get_rxhash(struct sk_buff *skb)
 {
- return skb_get_rxhash(skb);
+ return skb_get_hash(skb);
 }
 
 static u32 flow_key_get(struct sk_buff *skb, int key, struct flow_keys *flow)
diff --git a/net/sched/em_meta.c b/net/sched/em_meta.c
index 7c3de6f..2c04ce7 100644
--- a/net/sched/em_meta.c
+++ b/net/sched/em_meta.c
@@ -222,7 +222,7 @@ META_COLLECTOR(int_maclen)
 
 META_COLLECTOR(int_rxhash)
 {
- dst->value = skb_get_rxhash(skb);
+ dst->value = skb_get_hash(skb);
 }
 
 /**************************************************************************
-- 
1.7.1