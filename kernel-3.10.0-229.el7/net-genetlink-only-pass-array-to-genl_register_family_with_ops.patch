From c2f1621c93003de23fc62b023f2d8f8761f52262 Mon Sep 17 00:00:00 2001
From: Jiri Benc <jbenc@redhat.com>
Date: Fri, 12 Sep 2014 14:26:54 -0400
Subject: [net] genetlink: only pass array to genl_register_family_with_ops()

Message-id: <be0e0f695bc728cf5e7164ba2cd2fd772210843a.1410528958.git.jbenc@redhat.com>
Patchwork-id: 93957
O-Subject: [RHEL7.1 net PATCH 12/23] genetlink: only pass array to genl_register_family_with_ops()
Bugzilla: 1140656
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1140656
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7948291

RHEL backport: removed modules that we don't have or don't enable.

commit c53ed7423619b4e8108914a9f31b426dd58ad591
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Nov 19 15:19:31 2013 +0100

    genetlink: only pass array to genl_register_family_with_ops()

    As suggested by David Miller, make genl_register_family_with_ops()
    a macro and pass only the array, evaluating ARRAY_SIZE() in the
    macro, this is a little safer.

    The openvswitch has some indirection, assing ops/n_ops directly in
    that code. This might ultimately just assign the pointers in the
    family initializations, saving the struct genl_family_and_ops and
    code (once mcast groups are handled differently.)

    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/team/team.c b/drivers/net/team/team.c
index ad7669e..3b6ec6d 100644
--- a/drivers/net/team/team.c
+++ b/drivers/net/team/team.c
@@ -2735,8 +2735,7 @@ static int team_nl_init(void)
 {
  int err;
 
- err = genl_register_family_with_ops(&team_nl_family, team_nl_ops,
-         ARRAY_SIZE(team_nl_ops));
+ err = genl_register_family_with_ops(&team_nl_family, team_nl_ops);
  if (err)
   return err;
 
diff --git a/fs/dlm/netlink.c b/fs/dlm/netlink.c
index 60a3278..e7cfbaf 100644
--- a/fs/dlm/netlink.c
+++ b/fs/dlm/netlink.c
@@ -74,14 +74,16 @@ static int user_cmd(struct sk_buff *skb, struct genl_info *info)
  return 0;
 }
 
-static struct genl_ops dlm_nl_ops = {
- .cmd  = DLM_CMD_HELLO,
- .doit  = user_cmd,
+static struct genl_ops dlm_nl_ops[] = {
+ {
+  .cmd = DLM_CMD_HELLO,
+  .doit = user_cmd,
+ },
 };
 
 int __init dlm_netlink_init(void)
 {
- return genl_register_family_with_ops(&family, &dlm_nl_ops, 1);
+ return genl_register_family_with_ops(&family, dlm_nl_ops);
 }
 
 void dlm_netlink_exit(void)
diff --git a/include/linux/genl_magic_func.h b/include/linux/genl_magic_func.h
index 023bc34..4708603 100644
--- a/include/linux/genl_magic_func.h
+++ b/include/linux/genl_magic_func.h
@@ -293,8 +293,7 @@ static int CONCAT_(GENL_MAGIC_FAMILY, _genl_multicast_ ## group)( \
 
 int CONCAT_(GENL_MAGIC_FAMILY, _genl_register)(void)
 {
- int err = genl_register_family_with_ops(&ZZZ_genl_family,
-  ZZZ_genl_ops, ARRAY_SIZE(ZZZ_genl_ops));
+ int err = genl_register_family_with_ops(&ZZZ_genl_family, ZZZ_genl_ops);
  if (err)
   return err;
 #undef GENL_mc_group
diff --git a/include/net/genetlink.h b/include/net/genetlink.h
index 4d43ddd..a1ede3c 100644
--- a/include/net/genetlink.h
+++ b/include/net/genetlink.h
@@ -161,8 +161,9 @@ static inline int genl_register_family(struct genl_family *family)
  *
  * Return 0 on success or a negative error code.
  */
-static inline int genl_register_family_with_ops(struct genl_family *family,
- const struct genl_ops *ops, size_t n_ops)
+static inline int _genl_register_family_with_ops(struct genl_family *family,
+       const struct genl_ops *ops,
+       size_t n_ops)
 {
  family->module = THIS_MODULE;
  family->ops = ops;
@@ -170,6 +171,9 @@ static inline int genl_register_family_with_ops(struct genl_family *family,
  return __genl_register_family(family);
 }
 
+#define genl_register_family_with_ops(family, ops) \
+ _genl_register_family_with_ops((family), (ops), ARRAY_SIZE(ops))
+
 int genl_unregister_family(struct genl_family *family);
 int genl_register_mc_group(struct genl_family *family,
       struct genl_multicast_group *grp);
diff --git a/kernel/taskstats.c b/kernel/taskstats.c
index b08c6a4..b737e27 100644
--- a/kernel/taskstats.c
+++ b/kernel/taskstats.c
@@ -697,8 +697,7 @@ static int __init taskstats_init(void)
 {
  int rc;
 
- rc = genl_register_family_with_ops(&family, taskstats_ops,
-        ARRAY_SIZE(taskstats_ops));
+ rc = genl_register_family_with_ops(&family, taskstats_ops);
  if (rc)
   return rc;
 
diff --git a/net/core/drop_monitor.c b/net/core/drop_monitor.c
index 24346da..73d93b5 100644
--- a/net/core/drop_monitor.c
+++ b/net/core/drop_monitor.c
@@ -365,8 +365,7 @@ static int __init init_net_drop_monitor(void)
  }
 
  rc = genl_register_family_with_ops(&net_drop_monitor_family,
-        dropmon_ops,
-        ARRAY_SIZE(dropmon_ops));
+        dropmon_ops);
  if (rc) {
   pr_err("Could not create drop monitor netlink family\n");
   return rc;
diff --git a/net/ieee802154/netlink.c b/net/ieee802154/netlink.c
index 3ffcdbb..1a81709 100644
--- a/net/ieee802154/netlink.c
+++ b/net/ieee802154/netlink.c
@@ -129,8 +129,7 @@ int __init ieee802154_nl_init(void)
 {
  int rc;
 
- rc = genl_register_family_with_ops(&nl802154_family, ieee8021154_ops,
-        ARRAY_SIZE(ieee8021154_ops));
+ rc = genl_register_family_with_ops(&nl802154_family, ieee8021154_ops);
  if (rc)
   return rc;
 
diff --git a/net/ipv4/tcp_metrics.c b/net/ipv4/tcp_metrics.c
index 9b59349..40cbb0b 100644
--- a/net/ipv4/tcp_metrics.c
+++ b/net/ipv4/tcp_metrics.c
@@ -1087,8 +1087,7 @@ void __init tcp_metrics_init(void)
  if (ret < 0)
   goto cleanup;
  ret = genl_register_family_with_ops(&tcp_metrics_nl_family,
-         tcp_metrics_nl_ops,
-         ARRAY_SIZE(tcp_metrics_nl_ops));
+         tcp_metrics_nl_ops);
  if (ret < 0)
   goto cleanup_subsys;
  return;
diff --git a/net/l2tp/l2tp_netlink.c b/net/l2tp/l2tp_netlink.c
index 927f97c..e4a4562 100644
--- a/net/l2tp/l2tp_netlink.c
+++ b/net/l2tp/l2tp_netlink.c
@@ -893,13 +893,8 @@ EXPORT_SYMBOL_GPL(l2tp_nl_unregister_ops);
 
 static int l2tp_nl_init(void)
 {
- int err;
-
  pr_info("L2TP netlink interface\n");
- err = genl_register_family_with_ops(&l2tp_nl_family, l2tp_nl_ops,
-         ARRAY_SIZE(l2tp_nl_ops));
-
- return err;
+ return genl_register_family_with_ops(&l2tp_nl_family, l2tp_nl_ops);
 }
 
 static void l2tp_nl_cleanup(void)
diff --git a/net/netfilter/ipvs/ip_vs_ctl.c b/net/netfilter/ipvs/ip_vs_ctl.c
index bde2fe4..bdbee04 100644
--- a/net/netfilter/ipvs/ip_vs_ctl.c
+++ b/net/netfilter/ipvs/ip_vs_ctl.c
@@ -3664,7 +3664,7 @@ static const struct genl_ops ip_vs_genl_ops[] __read_mostly = {
 static int __init ip_vs_genl_register(void)
 {
  return genl_register_family_with_ops(&ip_vs_genl_family,
-  ip_vs_genl_ops, ARRAY_SIZE(ip_vs_genl_ops));
+          ip_vs_genl_ops);
 }
 
 static void ip_vs_genl_unregister(void)
diff --git a/net/netlabel/netlabel_cipso_v4.c b/net/netlabel/netlabel_cipso_v4.c
index 7066917..69345ce 100644
--- a/net/netlabel/netlabel_cipso_v4.c
+++ b/net/netlabel/netlabel_cipso_v4.c
@@ -783,5 +783,5 @@ static const struct genl_ops netlbl_cipsov4_ops[] = {
 int __init netlbl_cipsov4_genl_init(void)
 {
  return genl_register_family_with_ops(&netlbl_cipsov4_gnl_family,
-  netlbl_cipsov4_ops, ARRAY_SIZE(netlbl_cipsov4_ops));
+          netlbl_cipsov4_ops);
 }
diff --git a/net/netlabel/netlabel_mgmt.c b/net/netlabel/netlabel_mgmt.c
index 7de6f66..8ef83ee 100644
--- a/net/netlabel/netlabel_mgmt.c
+++ b/net/netlabel/netlabel_mgmt.c
@@ -779,5 +779,5 @@ static const struct genl_ops netlbl_mgmt_genl_ops[] = {
 int __init netlbl_mgmt_genl_init(void)
 {
  return genl_register_family_with_ops(&netlbl_mgmt_gnl_family,
-  netlbl_mgmt_genl_ops, ARRAY_SIZE(netlbl_mgmt_genl_ops));
+          netlbl_mgmt_genl_ops);
 }
diff --git a/net/netlabel/netlabel_unlabeled.c b/net/netlabel/netlabel_unlabeled.c
index 2a4909b..319905c 100644
--- a/net/netlabel/netlabel_unlabeled.c
+++ b/net/netlabel/netlabel_unlabeled.c
@@ -1398,7 +1398,7 @@ static const struct genl_ops netlbl_unlabel_genl_ops[] = {
 int __init netlbl_unlabel_genl_init(void)
 {
  return genl_register_family_with_ops(&netlbl_unlabel_gnl_family,
-  netlbl_unlabel_genl_ops, ARRAY_SIZE(netlbl_unlabel_genl_ops));
+          netlbl_unlabel_genl_ops);
 }
 
 /*
diff --git a/net/netlink/genetlink.c b/net/netlink/genetlink.c
index d4b7459..b1eab17 100644
--- a/net/netlink/genetlink.c
+++ b/net/netlink/genetlink.c
@@ -927,11 +927,13 @@ static int genl_ctrl_event(int event, void *data)
  return 0;
 }
 
-static struct genl_ops genl_ctrl_ops = {
- .cmd  = CTRL_CMD_GETFAMILY,
- .doit  = ctrl_getfamily,
- .dumpit  = ctrl_dumpfamily,
- .policy  = ctrl_policy,
+static struct genl_ops genl_ctrl_ops[] = {
+ {
+  .cmd  = CTRL_CMD_GETFAMILY,
+  .doit  = ctrl_getfamily,
+  .dumpit  = ctrl_dumpfamily,
+  .policy  = ctrl_policy,
+ },
 };
 
 static struct genl_multicast_group notify_grp = {
@@ -975,7 +977,7 @@ static int __init genl_init(void)
  for (i = 0; i < GENL_FAM_TAB_SIZE; i++)
   INIT_LIST_HEAD(&family_ht[i]);
 
- err = genl_register_family_with_ops(&genl_ctrl, &genl_ctrl_ops, 1);
+ err = genl_register_family_with_ops(&genl_ctrl, genl_ctrl_ops);
  if (err < 0)
   goto problem;
 
diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index f6c2c62..174705b 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -1855,8 +1855,9 @@ static int dp_register_genl(void)
  for (i = 0; i < ARRAY_SIZE(dp_genl_families); i++) {
   const struct genl_family_and_ops *f = &dp_genl_families[i];
 
-  err = genl_register_family_with_ops(f->family, f->ops,
-          f->n_ops);
+  f->family->ops = f->ops;
+  f->family->n_ops = f->n_ops;
+  err = genl_register_family(f->family);
   if (err)
    goto error;
   n_registered++;
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index dcd0479..b1275e5 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -10789,8 +10789,7 @@ int nl80211_init(void)
 {
  int err;
 
- err = genl_register_family_with_ops(&nl80211_fam,
-  nl80211_ops, ARRAY_SIZE(nl80211_ops));
+ err = genl_register_family_with_ops(&nl80211_fam, nl80211_ops);
  if (err)
   return err;
 
-- 
1.7.1