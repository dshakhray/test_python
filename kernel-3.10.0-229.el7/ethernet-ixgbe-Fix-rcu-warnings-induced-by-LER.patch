From b2253b43a75e3f2db8f5976c5b8c2c08792cad4e Mon Sep 17 00:00:00 2001
From: John Greene <jogreene@redhat.com>
Date: Wed, 10 Sep 2014 18:29:06 -0400
Subject: [ethernet] ixgbe: Fix rcu warnings induced by LER

Message-id: <1410373750-11341-47-git-send-email-jogreene@redhat.com>
Patchwork-id: 93556
O-Subject: [RHEL7.1 PATCH 46/50] ixgbe: Fix rcu warnings induced by LER
Bugzilla: 1091123
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Neil Horman <nhorman@redhat.com>

BZ: 1091123
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=7919168
Tested: In beaker. See BZ for details
Upstream: 41c62843eb6a0ea3e2f1e06ca3ec7b2f64452f7b

Resolve some rcu warnings produced when LER actions take place.
This appears to be due to not holding the rtnl lock when calling
ixgbe_down, so hold the lock. Also avoid disabling the device
when it is already disabled. This check is necessary because the
callback can be called more than once in some cases.

Signed-off-by: Mark Rustad <mark.d.rustad@intel.com>
Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe.h b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
index a2abd70..4eb0aab 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
@@ -789,6 +789,7 @@ enum ixgbe_state_t {
  __IXGBE_TESTING,
  __IXGBE_RESETTING,
  __IXGBE_DOWN,
+ __IXGBE_DISABLED,
  __IXGBE_REMOVING,
  __IXGBE_SERVICE_SCHED,
  __IXGBE_IN_SFP_INIT,
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index aa128ff..aa63186 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -5343,6 +5343,8 @@ static int ixgbe_resume(struct pci_dev *pdev)
   e_dev_err("Cannot enable PCI device from suspend\n");
   return err;
  }
+ smp_mb__before_clear_bit();
+ clear_bit(__IXGBE_DISABLED, &adapter->state);
  pci_set_master(pdev);
 
  pci_wake_from_d3(pdev, false);
@@ -5440,7 +5442,8 @@ static int __ixgbe_shutdown(struct pci_dev *pdev, bool *enable_wake)
 
  ixgbe_release_hw_control(adapter);
 
- pci_disable_device(pdev);
+ if (!test_and_set_bit(__IXGBE_DISABLED, &adapter->state))
+  pci_disable_device(pdev);
 
  return 0;
 }
@@ -7974,7 +7977,8 @@ err_alloc_etherdev:
          pci_select_bars(pdev, IORESOURCE_MEM));
 err_pci_reg:
 err_dma:
- pci_disable_device(pdev);
+ if (!test_and_set_bit(__IXGBE_DISABLED, &adapter->state))
+  pci_disable_device(pdev);
  return err;
 }
 
@@ -8043,7 +8047,8 @@ static void ixgbe_remove(struct pci_dev *pdev)
 
  pci_disable_pcie_error_reporting(pdev);
 
- pci_disable_device(pdev);
+ if (!test_and_set_bit(__IXGBE_DISABLED, &adapter->state))
+  pci_disable_device(pdev);
 }
 
 /**
@@ -8150,14 +8155,20 @@ static pci_ers_result_t ixgbe_io_error_detected(struct pci_dev *pdev,
 
 skip_bad_vf_detection:
 #endif /* CONFIG_PCI_IOV */
+ rtnl_lock();
  netif_device_detach(netdev);
 
- if (state == pci_channel_io_perm_failure)
+ if (state == pci_channel_io_perm_failure) {
+  rtnl_unlock();
   return PCI_ERS_RESULT_DISCONNECT;
+ }
 
  if (netif_running(netdev))
   ixgbe_down(adapter);
- pci_disable_device(pdev);
+
+ if (!test_and_set_bit(__IXGBE_DISABLED, &adapter->state))
+  pci_disable_device(pdev);
+ rtnl_unlock();
 
  /* Request a slot reset. */
  return PCI_ERS_RESULT_NEED_RESET;
@@ -8179,6 +8190,8 @@ static pci_ers_result_t ixgbe_io_slot_reset(struct pci_dev *pdev)
   e_err(probe, "Cannot re-enable PCI device after reset.\n");
   result = PCI_ERS_RESULT_DISCONNECT;
  } else {
+  smp_mb__before_clear_bit();
+  clear_bit(__IXGBE_DISABLED, &adapter->state);
   adapter->hw.hw_addr = adapter->io_addr;
   pci_set_master(pdev);
   pci_restore_state(pdev);
-- 
1.7.1