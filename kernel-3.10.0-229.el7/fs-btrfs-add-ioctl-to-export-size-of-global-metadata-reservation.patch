From 41ef2906241e2522f5f3c6d2bc0a0965bcd78fc1 Mon Sep 17 00:00:00 2001
From: Eric Sandeen <sandeen@redhat.com>
Date: Mon, 4 Aug 2014 18:58:23 -0400
Subject: [fs] btrfs: add ioctl to export size of global metadata reservation

Message-id: <1407179109-13714-17-git-send-email-sandeen@redhat.com>
Patchwork-id: 87037
O-Subject: [RHEL7.1 PATCH 016/422] btrfs: add ioctl to export size of global metadata reservation
Bugzilla: 1071179
RH-Acked-by: Zach Brown <zab@redhat.com>

From: Jeff Mahoney <jeffm@suse.com>

commit 01e219e8069516cdb98594d417b8bb8d906ed30d
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Fri Nov 1 13:07:03 2013 -0400

    btrfs: add ioctl to export size of global metadata reservation

    btrfs filesystem df output will show the size of the metadata space
    and how much of it is used, and the user assumes that the difference
    is all usable space. Since that's not actually the case due to the
    global metadata reservation, we should provide the full picture to the
    user.

    This patch adds an ioctl that exports the size of the global metadata
    reservation so that btrfs filesystem df can report it.

    Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>
    Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: Eric Sandeen <sandeen@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index 95ca5f2..7774628 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -3476,6 +3476,20 @@ out:
  return ret;
 }
 
+static long btrfs_ioctl_global_rsv(struct btrfs_root *root, void __user *arg)
+{
+ struct btrfs_block_rsv *block_rsv = &root->fs_info->global_block_rsv;
+ u64 reserved;
+
+ spin_lock(&block_rsv->lock);
+ reserved = block_rsv->reserved;
+ spin_unlock(&block_rsv->lock);
+
+ if (arg && copy_to_user(arg, &reserved, sizeof(reserved)))
+  return -EFAULT;
+ return 0;
+}
+
 /*
  * there are many ways the trans_start and trans_end ioctls can lead
  * to deadlocks.  They should only be used by applications that
@@ -4684,6 +4698,8 @@ long btrfs_ioctl(struct file *file, unsigned int
   return btrfs_ioctl_logical_to_ino(root, argp);
  case BTRFS_IOC_SPACE_INFO:
   return btrfs_ioctl_space_info(root, argp);
+ case BTRFS_IOC_GLOBAL_RSV:
+  return btrfs_ioctl_global_rsv(root, argp);
  case BTRFS_IOC_SYNC: {
   int ret;
 
diff --git a/include/uapi/linux/btrfs.h b/include/uapi/linux/btrfs.h
index b4d6909..1b8a0f4 100644
--- a/include/uapi/linux/btrfs.h
+++ b/include/uapi/linux/btrfs.h
@@ -558,6 +558,7 @@ static inline char *btrfs_err_str(enum btrfs_err_code err_code)
 #define BTRFS_IOC_DEFAULT_SUBVOL _IOW(BTRFS_IOCTL_MAGIC, 19, __u64)
 #define BTRFS_IOC_SPACE_INFO _IOWR(BTRFS_IOCTL_MAGIC, 20, \
         struct btrfs_ioctl_space_args)
+#define BTRFS_IOC_GLOBAL_RSV _IOR(BTRFS_IOCTL_MAGIC, 20, __u64)
 #define BTRFS_IOC_START_SYNC _IOR(BTRFS_IOCTL_MAGIC, 24, __u64)
 #define BTRFS_IOC_WAIT_SYNC  _IOW(BTRFS_IOCTL_MAGIC, 22, __u64)
 #define BTRFS_IOC_SNAP_CREATE_V2 _IOW(BTRFS_IOCTL_MAGIC, 23, \
-- 
1.7.1