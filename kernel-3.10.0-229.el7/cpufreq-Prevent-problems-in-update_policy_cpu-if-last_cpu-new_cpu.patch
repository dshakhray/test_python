From 94883b6055843a69ce87107af987ba4d48fa9e96 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:22:17 -0400
Subject: [cpufreq] Prevent problems in update_policy_cpu() if last_cpu == new_cpu

Message-id: <1409235879-1283-44-git-send-email-prarit@redhat.com>
Patchwork-id: 89378
O-Subject: [RHEL7.1 PATCH BZ 1134639 043/185] cpufreq: Prevent problems in update_policy_cpu() if last_cpu == new_cpu
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit cb38ed5cf1c4fdb7454e4b48fb70c396f5acfb21
Author: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
Date:   Thu Sep 12 01:43:42 2013 +0530

    cpufreq: Prevent problems in update_policy_cpu() if last_cpu == new_cpu

    If update_policy_cpu() is invoked with the existing policy->cpu itself
    as the new-cpu parameter, then a lot of things can go terribly wrong.

    In its present form, update_policy_cpu() always assumes that the new-cpu
    is different from policy->cpu and invokes other functions to perform their
    respective updates. And those functions implement the actual update like
    this:

    per_cpu(..., new_cpu) = per_cpu(..., last_cpu);
    per_cpu(..., last_cpu) = NULL;

    Thus, when new_cpu == last_cpu, the final NULL assignment makes the per-cpu
    references vanish into thin air! (memory leak). From there, it leads to more
    problems: cpufreq_stats_create_table() now doesn't find the per-cpu reference
    and hence tries to create a new sysfs-group; but sysfs already had created
    the group earlier, so it complains that it cannot create a duplicate filename.
    In short, the repercussions of a rather innocuous invocation of
    update_policy_cpu() can turn out to be pretty nasty.

    Ideally update_policy_cpu() should handle this situation (new == last)
    gracefully, and not lead to such severe problems. So fix it by adding an
    appropriate check.

    Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 2b4a041..90252ee 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -949,6 +949,9 @@ static void cpufreq_policy_free(struct cpufreq_policy *policy)
 
 static void update_policy_cpu(struct cpufreq_policy *policy, unsigned int cpu)
 {
+ if (cpu == policy->cpu)
+  return;
+
  policy->last_cpu = policy->cpu;
  policy->cpu = cpu;
 
-- 
1.7.1