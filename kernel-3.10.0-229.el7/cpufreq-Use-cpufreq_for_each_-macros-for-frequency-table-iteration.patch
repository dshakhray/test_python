From 6660fa1843c45e1e004155a989b5e492c9e747a7 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:24:02 -0400
Subject: [cpufreq] Use cpufreq_for_each_* macros for frequency table iteration

Message-id: <1409235879-1283-149-git-send-email-prarit@redhat.com>
Patchwork-id: 89511
O-Subject: [RHEL7.1 PATCH BZ 1134639 148/185] cpufreq: Use cpufreq_for_each_* macros for frequency table iteration
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit 041526f915a90b2b628cd0253e2c85da8040276d
Author: Stratos Karafotis <stratosk@semaphore.gr>
Date:   Fri Apr 25 23:15:38 2014 +0300

    cpufreq: Use cpufreq_for_each_* macros for frequency table iteration

    The cpufreq core now supports the cpufreq_for_each_entry and
    cpufreq_for_each_valid_entry macros helpers for iteration over the
    cpufreq_frequency_table, so use them.

    It should have no functional changes.

    Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
    Acked-by: Lad, Prabhakar <prabhakar.csengg@gmail.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/acpi-cpufreq.c b/drivers/cpufreq/acpi-cpufreq.c
index 000e4e0..b0c18ed 100644
--- a/drivers/cpufreq/acpi-cpufreq.c
+++ b/drivers/cpufreq/acpi-cpufreq.c
@@ -213,7 +213,7 @@ static unsigned extract_io(u32 value, struct acpi_cpufreq_data *data)
 
 static unsigned extract_msr(u32 msr, struct acpi_cpufreq_data *data)
 {
- int i;
+ struct cpufreq_frequency_table *pos;
  struct acpi_processor_performance *perf;
 
  if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD)
@@ -223,10 +223,9 @@ static unsigned extract_msr(u32 msr, struct acpi_cpufreq_data *data)
 
  perf = data->acpi_data;
 
- for (i = 0; data->freq_table[i].frequency != CPUFREQ_TABLE_END; i++) {
-  if (msr == perf->states[data->freq_table[i].driver_data].status)
-   return data->freq_table[i].frequency;
- }
+ cpufreq_for_each_entry(pos, data->freq_table)
+  if (msr == perf->states[pos->driver_data].status)
+   return pos->frequency;
  return data->freq_table[0].frequency;
 }
 
diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index 11a2786..bb72188 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -183,11 +183,11 @@ static void cpufreq_stats_free_table(unsigned int cpu)
 
 static int __cpufreq_stats_create_table(struct cpufreq_policy *policy)
 {
- unsigned int i, j, count = 0, ret = 0;
+ unsigned int i, count = 0, ret = 0;
  struct cpufreq_stats *stat;
  unsigned int alloc_size;
  unsigned int cpu = policy->cpu;
- struct cpufreq_frequency_table *table;
+ struct cpufreq_frequency_table *pos, *table;
 
  table = cpufreq_frequency_get_table(cpu);
  if (unlikely(!table))
@@ -206,12 +206,8 @@ static int __cpufreq_stats_create_table(struct cpufreq_policy *policy)
  stat->cpu = cpu;
  per_cpu(cpufreq_stats_table, cpu) = stat;
 
- for (i = 0; table[i].frequency != CPUFREQ_TABLE_END; i++) {
-  unsigned int freq = table[i].frequency;
-  if (freq == CPUFREQ_ENTRY_INVALID)
-   continue;
+ cpufreq_for_each_valid_entry(pos, table)
   count++;
- }
 
  alloc_size = count * sizeof(int) + count * sizeof(u64);
 
@@ -229,15 +225,11 @@ static int __cpufreq_stats_create_table(struct cpufreq_policy *policy)
 #ifdef CONFIG_CPU_FREQ_STAT_DETAILS
  stat->trans_table = stat->freq_table + count;
 #endif
- j = 0;
- for (i = 0; table[i].frequency != CPUFREQ_TABLE_END; i++) {
-  unsigned int freq = table[i].frequency;
-  if (freq == CPUFREQ_ENTRY_INVALID)
-   continue;
-  if (freq_table_get_index(stat, freq) == -1)
-   stat->freq_table[j++] = freq;
- }
- stat->state_num = j;
+ i = 0;
+ cpufreq_for_each_valid_entry(pos, table)
+  if (freq_table_get_index(stat, pos->frequency) == -1)
+   stat->freq_table[i++] = pos->frequency;
+ stat->state_num = i;
  spin_lock(&cpufreq_stats_lock);
  stat->last_time = get_jiffies_64();
  stat->last_index = freq_table_get_index(stat, policy->cur);
diff --git a/drivers/cpufreq/freq_table.c b/drivers/cpufreq/freq_table.c
index 08e7bbc..8e518c6 100644
--- a/drivers/cpufreq/freq_table.c
+++ b/drivers/cpufreq/freq_table.c
@@ -21,22 +21,19 @@
 int cpufreq_frequency_table_cpuinfo(struct cpufreq_policy *policy,
         struct cpufreq_frequency_table *table)
 {
+ struct cpufreq_frequency_table *pos;
  unsigned int min_freq = ~0;
  unsigned int max_freq = 0;
- unsigned int i;
+ unsigned int freq;
 
- for (i = 0; (table[i].frequency != CPUFREQ_TABLE_END); i++) {
-  unsigned int freq = table[i].frequency;
-  if (freq == CPUFREQ_ENTRY_INVALID) {
-   pr_debug("table entry %u is invalid, skipping\n", i);
+ cpufreq_for_each_valid_entry(pos, table) {
+  freq = pos->frequency;
 
-   continue;
-  }
   if (!cpufreq_boost_enabled()
-      && (table[i].flags & CPUFREQ_BOOST_FREQ))
+      && (pos->flags & CPUFREQ_BOOST_FREQ))
    continue;
 
-  pr_debug("table entry %u: %u kHz\n", i, freq);
+  pr_debug("table entry %u: %u kHz\n", (int)(pos - table), freq);
   if (freq < min_freq)
    min_freq = freq;
   if (freq > max_freq)
@@ -57,7 +54,8 @@ EXPORT_SYMBOL_GPL(cpufreq_frequency_table_cpuinfo);
 int cpufreq_frequency_table_verify(struct cpufreq_policy *policy,
        struct cpufreq_frequency_table *table)
 {
- unsigned int next_larger = ~0, freq, i = 0;
+ struct cpufreq_frequency_table *pos;
+ unsigned int freq, next_larger = ~0;
  bool found = false;
 
  pr_debug("request for verification of policy (%u - %u kHz) for cpu %u\n",
@@ -65,9 +63,9 @@ int cpufreq_frequency_table_verify(struct cpufreq_policy *policy,
 
  cpufreq_verify_within_cpu_limits(policy);
 
- for (; freq = table[i].frequency, freq != CPUFREQ_TABLE_END; i++) {
-  if (freq == CPUFREQ_ENTRY_INVALID)
-   continue;
+ cpufreq_for_each_valid_entry(pos, table) {
+  freq = pos->frequency;
+
   if ((freq >= policy->min) && (freq <= policy->max)) {
    found = true;
    break;
@@ -118,7 +116,8 @@ int cpufreq_frequency_table_target(struct cpufreq_policy *policy,
   .driver_data = ~0,
   .frequency = 0,
  };
- unsigned int i;
+ struct cpufreq_frequency_table *pos;
+ unsigned int freq, i = 0;
 
  pr_debug("request for target %u kHz (relation: %u) for cpu %u\n",
      target_freq, relation, policy->cpu);
@@ -132,10 +131,10 @@ int cpufreq_frequency_table_target(struct cpufreq_policy *policy,
   break;
  }
 
- for (i = 0; (table[i].frequency != CPUFREQ_TABLE_END); i++) {
-  unsigned int freq = table[i].frequency;
-  if (freq == CPUFREQ_ENTRY_INVALID)
-   continue;
+ cpufreq_for_each_valid_entry(pos, table) {
+  freq = pos->frequency;
+
+  i = pos - table;
   if ((freq < policy->min) || (freq > policy->max))
    continue;
   switch (relation) {
@@ -184,8 +183,7 @@ EXPORT_SYMBOL_GPL(cpufreq_frequency_table_target);
 int cpufreq_frequency_table_get_index(struct cpufreq_policy *policy,
   unsigned int freq)
 {
- struct cpufreq_frequency_table *table;
- int i;
+ struct cpufreq_frequency_table *pos, *table;
 
  table = cpufreq_frequency_get_table(policy->cpu);
  if (unlikely(!table)) {
@@ -193,10 +191,9 @@ int cpufreq_frequency_table_get_index(struct cpufreq_policy *policy,
   return -ENOENT;
  }
 
- for (i = 0; table[i].frequency != CPUFREQ_TABLE_END; i++) {
-  if (table[i].frequency == freq)
-   return i;
- }
+ cpufreq_for_each_valid_entry(pos, table)
+  if (pos->frequency == freq)
+   return pos - table;
 
  return -EINVAL;
 }
@@ -208,16 +205,13 @@ EXPORT_SYMBOL_GPL(cpufreq_frequency_table_get_index);
 static ssize_t show_available_freqs(struct cpufreq_policy *policy, char *buf,
         bool show_boost)
 {
- unsigned int i = 0;
  ssize_t count = 0;
- struct cpufreq_frequency_table *table = policy->freq_table;
+ struct cpufreq_frequency_table *pos, *table = policy->freq_table;
 
  if (!table)
   return -ENODEV;
 
- for (i = 0; (table[i].frequency != CPUFREQ_TABLE_END); i++) {
-  if (table[i].frequency == CPUFREQ_ENTRY_INVALID)
-   continue;
+ cpufreq_for_each_valid_entry(pos, table) {
   /*
    * show_boost = true and driver_data = BOOST freq
    * display BOOST freqs
@@ -229,10 +223,10 @@ static ssize_t show_available_freqs(struct cpufreq_policy *policy, char *buf,
    * show_boost = false and driver_data != BOOST freq
    * display NON BOOST freqs
    */
-  if (show_boost ^ (table[i].flags & CPUFREQ_BOOST_FREQ))
+  if (show_boost ^ (pos->flags & CPUFREQ_BOOST_FREQ))
    continue;
 
-  count += sprintf(&buf[count], "%d ", table[i].frequency);
+  count += sprintf(&buf[count], "%d ", pos->frequency);
  }
  count += sprintf(&buf[count], "\n");
 
-- 
1.7.1