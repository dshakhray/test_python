From c14505c5f7bd6a49d451d51c1c5f08e50d3716a4 Mon Sep 17 00:00:00 2001
From: Sage Weil <sweil@redhat.com>
Date: Thu, 28 Aug 2014 16:25:43 -0400
Subject: [net] libceph: fix non-default values check in apply_primary_affinity()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Message-id: <1409243210-7988-237-git-send-email-sweil@redhat.com>
Patchwork-id: 89665
O-Subject: [PATCH 236/303] libceph: fix non-default values check in apply_primary_affinity()
Bugzilla: 1122174
RH-Acked-by: Ilya Dryomov <ilya.dryomov@inktank.com>
RH-Acked-by: Ã¤Â¸Â¥Ã¦Â­Â£ <zyan@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Ilya Dryomov <ilya.dryomov@inktank.com>

osd_primary_affinity array is indexed into incorrectly when checking
for non-default primary-affinity values.  This nullifies the impact of
the rest of the apply_primary_affinity() and results in misdirected
requests.

                if (osds[i] != CRUSH_ITEM_NONE &&
                    osdmap->osd_primary_affinity[i] !=
                                                ^^^
                                        CEPH_OSD_DEFAULT_PRIMARY_AFFINITY) {

For a pool with size 2, this always ends up checking osd0 and osd1
primary_affinity values, instead of the values that correspond to the
osds in question.  E.g., given a [2,3] up set and a [max,max,0,max]
primary affinity vector, requests are still sent to osd2, because both
osd0 and osd1 happen to have max primary_affinity values and therefore
we return from apply_primary_affinity() early on the premise that all
osds in the given set have max (default) values.  Fix it.

Fixes: http://tracker.ceph.com/issues/7954

Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
Reviewed-by: Sage Weil <sage@inktank.com>
(cherry picked from commit 92b2e75158f6b8316b5a567c73dcf5b3d8f6bbce)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ceph/osdmap.c b/net/ceph/osdmap.c
index e632b5a..8b8a5a2 100644
--- a/net/ceph/osdmap.c
+++ b/net/ceph/osdmap.c
@@ -1548,8 +1548,10 @@ static void apply_primary_affinity(struct ceph_osdmap *osdmap, u32 pps,
   return;
 
  for (i = 0; i < len; i++) {
-  if (osds[i] != CRUSH_ITEM_NONE &&
-      osdmap->osd_primary_affinity[i] !=
+  int osd = osds[i];
+
+  if (osd != CRUSH_ITEM_NONE &&
+      osdmap->osd_primary_affinity[osd] !=
      CEPH_OSD_DEFAULT_PRIMARY_AFFINITY) {
    break;
   }
@@ -1563,10 +1565,9 @@ static void apply_primary_affinity(struct ceph_osdmap *osdmap, u32 pps,
   * osd's pgs get rejected as primary.
   */
  for (i = 0; i < len; i++) {
-  int osd;
+  int osd = osds[i];
   u32 aff;
 
-  osd = osds[i];
   if (osd == CRUSH_ITEM_NONE)
    continue;
 
-- 
1.7.1