From 20e43e078d15e1e39c5e3dbb4e78df196f42cd2b Mon Sep 17 00:00:00 2001
From: Jeff Moyer <jmoyer@redhat.com>
Date: Fri, 10 Oct 2014 21:03:28 -0400
Subject: [block] blk-mq: rename blk_mq_end_io to blk_mq_end_request

Message-id: <1412975015-5370-28-git-send-email-jmoyer@redhat.com>
Patchwork-id: 97470
O-Subject: [RHEL7 PATCH 27/34] blk-mq: rename blk_mq_end_io to blk_mq_end_request
Bugzilla: 1146660
RH-Acked-by: David Milburn <dmilburn@redhat.com>
RH-Acked-by: Mike Snitzer <snitzer@redhat.com>

This is a backport of the following commit.  The scsi_lib.c hunk is
elided since we do not yet have commit d285203 (scsi: add support for
a blk-mq based I/O path).

This resolves bug 1146660.

  commit c8a446ad695ada43a885ec12b38411dbd190a11b
  Author: Christoph Hellwig <hch@lst.de>
  Date:   Sat Sep 13 16:40:10 2014 -0700

    blk-mq: rename blk_mq_end_io to blk_mq_end_request

    Now that we've changed the driver API on the submission side use the
    opportunity to fix up the name on the completion side to fit into the
    general scheme.

    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/block/blk-flush.c b/block/blk-flush.c
index 33a6b50..68f9643 100644
--- a/block/blk-flush.c
+++ b/block/blk-flush.c
@@ -202,7 +202,7 @@ static bool blk_flush_complete_seq(struct request *rq, unsigned int seq,
   list_del_init(&rq->flush.list);
   blk_flush_restore_request(rq);
   if (q->mq_ops)
-   blk_mq_end_io(rq, error);
+   blk_mq_end_request(rq, error);
   else
    __blk_end_request_all(rq, error);
   break;
@@ -378,7 +378,7 @@ void blk_insert_flush(struct request *rq)
   */
  if (!policy) {
   if (q->mq_ops)
-   blk_mq_end_io(rq, 0);
+   blk_mq_end_request(rq, 0);
   else
    __blk_end_bidi_request(rq, 0, 0, 0);
   return;
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 5776b1d..2e62522 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -299,7 +299,7 @@ void blk_mq_clone_flush_request(struct request *flush_rq,
   hctx->cmd_size);
 }
 
-inline void __blk_mq_end_io(struct request *rq, int error)
+inline void __blk_mq_end_request(struct request *rq, int error)
 {
  blk_account_io_done(rq);
 
@@ -311,15 +311,15 @@ inline void __blk_mq_end_io(struct request *rq, int error)
   blk_mq_free_request(rq);
  }
 }
-EXPORT_SYMBOL(__blk_mq_end_io);
+EXPORT_SYMBOL(__blk_mq_end_request);
 
-void blk_mq_end_io(struct request *rq, int error)
+void blk_mq_end_request(struct request *rq, int error)
 {
  if (blk_update_request(rq, error, blk_rq_bytes(rq)))
   BUG();
- __blk_mq_end_io(rq, error);
+ __blk_mq_end_request(rq, error);
 }
-EXPORT_SYMBOL(blk_mq_end_io);
+EXPORT_SYMBOL(blk_mq_end_request);
 
 static void __blk_mq_complete_request_remote(void *data)
 {
@@ -359,7 +359,7 @@ void __blk_mq_complete_request(struct request *rq)
  struct request_queue *q = rq->q;
 
  if (!q->softirq_done_fn)
-  blk_mq_end_io(rq, rq->errors);
+  blk_mq_end_request(rq, rq->errors);
  else
   blk_mq_ipi_complete_request(rq);
 }
@@ -757,7 +757,7 @@ static void __blk_mq_run_hw_queue(struct blk_mq_hw_ctx *hctx)
    pr_err("blk-mq: bad return on queue: %d\n", ret);
   case BLK_MQ_RQ_QUEUE_ERROR:
    rq->errors = -EIO;
-   blk_mq_end_io(rq, rq->errors);
+   blk_mq_end_request(rq, rq->errors);
    break;
   }
 
@@ -1199,7 +1199,7 @@ static void blk_mq_make_request(struct request_queue *q, struct bio *bio)
 
    if (ret == BLK_MQ_RQ_QUEUE_ERROR) {
     rq->errors = -EIO;
-    blk_mq_end_io(rq, rq->errors);
+    blk_mq_end_request(rq, rq->errors);
     goto done;
    }
   }
diff --git a/drivers/block/mtip32xx/mtip32xx.c b/drivers/block/mtip32xx/mtip32xx.c
index 7cefdbd..e7ec0ff 100644
--- a/drivers/block/mtip32xx/mtip32xx.c
+++ b/drivers/block/mtip32xx/mtip32xx.c
@@ -247,7 +247,7 @@ static void mtip_async_complete(struct mtip_port *port,
  if (unlikely(cmd->unaligned))
   up(&port->cmd_slot_unal);
 
- blk_mq_end_io(rq, status ? -EIO : 0);
+ blk_mq_end_request(rq, status ? -EIO : 0);
 }
 
 /*
@@ -3739,7 +3739,7 @@ static int mtip_submit_request(struct blk_mq_hw_ctx *hctx, struct request *rq)
   int err;
 
   err = mtip_send_trim(dd, blk_rq_pos(rq), blk_rq_sectors(rq));
-  blk_mq_end_io(rq, err);
+  blk_mq_end_request(rq, err);
   return 0;
  }
 
diff --git a/drivers/block/null_blk.c b/drivers/block/null_blk.c
index a7c7e58..700e347 100644
--- a/drivers/block/null_blk.c
+++ b/drivers/block/null_blk.c
@@ -177,7 +177,7 @@ static void end_cmd(struct nullb_cmd *cmd)
 {
  switch (queue_mode)  {
  case NULL_Q_MQ:
-  blk_mq_end_io(cmd->rq, 0);
+  blk_mq_end_request(cmd->rq, 0);
   return;
  case NULL_Q_RQ:
   INIT_LIST_HEAD(&cmd->rq->queuelist);
diff --git a/drivers/block/virtio_blk.c b/drivers/block/virtio_blk.c
index 83816bf..f751fc3 100644
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@ -135,7 +135,7 @@ static inline void virtblk_request_done(struct request *req)
   req->errors = (error != 0);
  }
 
- blk_mq_end_io(req, error);
+ blk_mq_end_request(req, error);
 }
 
 static void virtblk_done(struct virtqueue *vq)
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index b5a64cc..a043232 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -217,8 +217,8 @@ struct blk_mq_hw_ctx *blk_mq_map_queue(struct request_queue *, const int ctx_ind
 struct blk_mq_hw_ctx *blk_mq_alloc_single_hw_queue(struct blk_mq_tag_set *, unsigned int, int);
 
 void blk_mq_start_request(struct request *rq);
-void blk_mq_end_io(struct request *rq, int error);
-void __blk_mq_end_io(struct request *rq, int error);
+void blk_mq_end_request(struct request *rq, int error);
+void __blk_mq_end_request(struct request *rq, int error);
 
 void blk_mq_requeue_request(struct request *rq);
 void blk_mq_add_to_requeue_list(struct request *rq, bool at_head);
-- 
1.7.1