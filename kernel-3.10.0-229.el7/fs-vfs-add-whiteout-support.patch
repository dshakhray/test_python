From 833dddfb6178c3a68630194f4c3b3fa139b8bdfd Mon Sep 17 00:00:00 2001
From: David Howells <dhowells@redhat.com>
Date: Tue, 25 Nov 2014 16:34:54 -0500
Subject: [fs] vfs: add whiteout support

Message-id: <20141125163454.18115.97368.stgit@warthog.procyon.org.uk>
Patchwork-id: 100927
O-Subject: [PATCH 27/47] vfs: add whiteout support
Bugzilla: 985875
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Miklos Szeredi <mszeredi@suse.cz>

Whiteout isn't actually a new file type, but is represented as a char
device (Linus's idea) with 0/0 device number.

This has several advantages compared to introducing a new whiteout file
type:

 - no userspace API changes (e.g. trivial to make backups of upper layer
   filesystem, without losing whiteouts)

 - no fs image format changes (you can boot an old kernel/fsck without
   whiteout support and things won't break)

 - implementation is trivial

Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
Original-commit: 787fb6bc9682ec7c05fb5d9561b57100fbc1cc41
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/namei.c b/fs/namei.c
index 637375e..e478fee 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -4265,6 +4265,20 @@ SYSCALL_DEFINE2(rename, const char __user *, oldname, const char __user *, newna
  return sys_renameat2(AT_FDCWD, oldname, AT_FDCWD, newname, 0);
 }
 
+int vfs_whiteout(struct inode *dir, struct dentry *dentry)
+{
+ int error = may_create(dir, dentry);
+ if (error)
+  return error;
+
+ if (!dir->i_op->mknod)
+  return -EPERM;
+
+ return dir->i_op->mknod(dir, dentry,
+    S_IFCHR | WHITEOUT_MODE, WHITEOUT_DEV);
+}
+EXPORT_SYMBOL(vfs_whiteout);
+
 int vfs_readlink(struct dentry *dentry, char __user *buffer, int buflen, const char *link)
 {
  int len;
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 5bd2b62..953cbb9 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -213,6 +213,13 @@ typedef void (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
 #define ATTR_TIMES_SET (1 << 16)
 
 /*
+ * Whiteout is represented by a char device.  The following constants define the
+ * mode and device number to use.
+ */
+#define WHITEOUT_MODE 0
+#define WHITEOUT_DEV 0
+
+/*
  * This is the Inode Attributes structure, used for notify_change().  It
  * uses the above definitions as flags, to know which values have changed.
  * Also, in this manner, a Filesystem can look at only the values it cares
@@ -1487,6 +1494,7 @@ extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct ino
 extern int vfs_rmdir(struct inode *, struct dentry *);
 extern int vfs_unlink(struct inode *, struct dentry *, struct inode **);
 extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int);
+extern int vfs_whiteout(struct inode *, struct dentry *);
 
 /*
  * VFS dentry helper functions.
@@ -1706,6 +1714,9 @@ struct super_operations {
 #define IS_AUTOMOUNT(inode) ((inode)->i_flags & S_AUTOMOUNT)
 #define IS_NOSEC(inode)  ((inode)->i_flags & S_NOSEC)
 
+#define IS_WHITEOUT(inode) (S_ISCHR(inode->i_mode) && \
+     (inode)->i_rdev == WHITEOUT_DEV)
+
 /*
  * Inode state bits.  Protected by inode->i_lock
  *
-- 
1.7.1