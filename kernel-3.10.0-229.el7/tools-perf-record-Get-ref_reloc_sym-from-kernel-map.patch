From 79cc4159f6783ac7391f26a9cc575af30e17dbd9 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 25 Aug 2014 07:53:11 -0400
Subject: [tools] perf/record: Get ref_reloc_sym from kernel map

Message-id: <1408953210-26343-304-git-send-email-jolsa@redhat.com>
Patchwork-id: 88986
O-Subject: [PATCH RHEL7.1 BZ1133083 303/322] perf record: Get ref_reloc_sym from kernel map
Bugzilla: 1133083
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1133083
https://bugzilla.redhat.com/show_bug.cgi?id=1133083

upstream
========
commit 0ae617bedde062003fd70e566e9a2601e273ea0e
Author: Adrian Hunter <adrian.hunter@intel.com>
Date: Wed Jan 29 16:14:40 2014 +0200

description
===========
Now that ref_reloc_sym is set up when the kernel map is created,
'perf record' does not need to pass the symbol names to
perf_event__synthesize_kernel_mmap() which can read the values needed
from ref_reloc_sym directly.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 3c394bf..af47531 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -287,10 +287,7 @@ static void perf_event__synthesize_guest_os(struct machine *machine, void *data)
   * have no _text sometimes.
   */
  err = perf_event__synthesize_kernel_mmap(tool, process_synthesized_event,
-       machine, "_text");
- if (err < 0)
-  err = perf_event__synthesize_kernel_mmap(tool, process_synthesized_event,
-        machine, "_stext");
+       machine);
  if (err < 0)
   pr_err("Couldn't record guest kernel [%d]'s reference"
          " relocation symbol.\n", machine->pid);
@@ -457,10 +454,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
  }
 
  err = perf_event__synthesize_kernel_mmap(tool, process_synthesized_event,
-       machine, "_text");
- if (err < 0)
-  err = perf_event__synthesize_kernel_mmap(tool, process_synthesized_event,
-        machine, "_stext");
+       machine);
  if (err < 0)
   pr_err("Couldn't record kernel reference relocation symbol\n"
          "Symbol resolution may be skewed if relocation was used (e.g. kexec).\n"
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index 17476df..b0f3ca8 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -483,15 +483,13 @@ u64 kallsyms__get_function_start(const char *kallsyms_filename,
 
 int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
            perf_event__handler_t process,
-           struct machine *machine,
-           const char *symbol_name)
+           struct machine *machine)
 {
  size_t size;
- const char *filename, *mmap_name;
- char path[PATH_MAX];
+ const char *mmap_name;
  char name_buff[PATH_MAX];
  struct map *map;
- u64 start;
+ struct kmap *kmap;
  int err;
  /*
   * We should get this from /sys/kernel/sections/.text, but till that is
@@ -513,31 +511,19 @@ int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
    * see kernel/perf_event.c __perf_event_mmap
    */
   event->header.misc = PERF_RECORD_MISC_KERNEL;
-  filename = "/proc/kallsyms";
  } else {
   event->header.misc = PERF_RECORD_MISC_GUEST_KERNEL;
-  if (machine__is_default_guest(machine))
-   filename = (char *) symbol_conf.default_guest_kallsyms;
-  else {
-   sprintf(path, "%s/proc/kallsyms", machine->root_dir);
-   filename = path;
-  }
- }
-
- start = kallsyms__get_function_start(filename, symbol_name);
- if (!start) {
-  free(event);
-  return -ENOENT;
  }
 
  map = machine->vmlinux_maps[MAP__FUNCTION];
+ kmap = map__kmap(map);
  size = snprintf(event->mmap.filename, sizeof(event->mmap.filename),
-   "%s%s", mmap_name, symbol_name) + 1;
+   "%s%s", mmap_name, kmap->ref_reloc_sym->name) + 1;
  size = PERF_ALIGN(size, sizeof(u64));
  event->mmap.header.type = PERF_RECORD_MMAP;
  event->mmap.header.size = (sizeof(event->mmap) -
    (sizeof(event->mmap.filename) - size) + machine->id_hdr_size);
- event->mmap.pgoff = start;
+ event->mmap.pgoff = kmap->ref_reloc_sym->addr;
  event->mmap.start = map->start;
  event->mmap.len   = map->end - event->mmap.start;
  event->mmap.pid   = machine->pid;
diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
index 66a0c03..851fa06 100644
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@ -214,8 +214,7 @@ int perf_event__synthesize_threads(struct perf_tool *tool,
        struct machine *machine, bool mmap_data);
 int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
            perf_event__handler_t process,
-           struct machine *machine,
-           const char *symbol_name);
+           struct machine *machine);
 
 int perf_event__synthesize_modules(struct perf_tool *tool,
        perf_event__handler_t process,
-- 
1.7.1