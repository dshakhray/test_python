From 860800fb31d77b1a26b389f33dffa072f7b3bc20 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 19 Sep 2014 12:28:50 -0400
Subject: [acpi] hotplug: Add demand_offline hotplug profile flag

Message-id: <1411129776-21656-16-git-send-email-prarit@redhat.com>
Patchwork-id: 96347
O-Subject: [RHEL7.1 PATCH BZ 1141846 15/61] ACPI / hotplug: Add demand_offline hotplug profile flag
Bugzilla: 1141846
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Myron Stowe <mstowe@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1141846

commit d22ddcbc4fb7a483d0721eddfda3f0558821d372
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Dec 29 15:25:35 2013 +0100

    ACPI / hotplug: Add demand_offline hotplug profile flag

    Add a new ACPI hotplug profile flag, demand_offline, such that if
    set for the given ACPI device object's scan handler, it will cause
    acpi_scan_hot_remove() to check if that device object's physical
    companions are offline upfront and fail the hot removal if that
    is not the case.

    That flag will be useful to overcome a problem with containers on
    some system where they can only be hot-removed after some cleanup
    operations carried out by user space, which needs to be notified
    of the container hot-removal before the kernel attempts to offline
    devices in the container.  In those cases the current implementation
    of acpi_scan_hot_remove() is not sufficient, because it first tries
    to offline the devices in the container and only if that is
    suffcessful it tries to offline the container itself.  As a result,
    the container hot-removal notification is not delivered to user space
    at the right time.

    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Stefan Assmann <sassmann@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index 8e7cbb8..b821150 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -128,6 +128,24 @@ acpi_device_modalias_show(struct device *dev, struct device_attribute *attr, cha
 }
 static DEVICE_ATTR(modalias, 0444, acpi_device_modalias_show, NULL);
 
+static bool acpi_scan_is_offline(struct acpi_device *adev)
+{
+ struct acpi_device_physical_node *pn;
+ bool offline = true;
+
+ mutex_lock(&adev->physical_node_lock);
+
+ list_for_each_entry(pn, &adev->physical_node_list, node)
+  if (device_supports_offline(pn->dev) && !pn->dev->offline) {
+   kobject_uevent(&pn->dev->kobj, KOBJ_CHANGE);
+   offline = false;
+   break;
+  }
+
+ mutex_unlock(&adev->physical_node_lock);
+ return offline;
+}
+
 static acpi_status acpi_bus_offline(acpi_handle handle, u32 lvl, void *data,
         void **ret_p)
 {
@@ -198,12 +216,11 @@ static acpi_status acpi_bus_online(acpi_handle handle, u32 lvl, void *data,
  return AE_OK;
 }
 
-static int acpi_scan_hot_remove(struct acpi_device *device)
+static int acpi_scan_try_to_offline(struct acpi_device *device)
 {
  acpi_handle handle = device->handle;
- struct device *errdev;
+ struct device *errdev = NULL;
  acpi_status status;
- unsigned long long sta;
 
  /*
   * Carry out two passes here and ignore errors in the first pass,
@@ -214,7 +231,6 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
   *
   * If the first pass is successful, the second one isn't needed, though.
   */
- errdev = NULL;
  status = acpi_walk_namespace(ACPI_TYPE_ANY, handle, ACPI_UINT32_MAX,
          NULL, acpi_bus_offline, (void *)false,
          (void **)&errdev);
@@ -243,6 +259,23 @@ static int acpi_scan_hot_remove(struct acpi_device *device)
    return -EBUSY;
   }
  }
+ return 0;
+}
+
+static int acpi_scan_hot_remove(struct acpi_device *device)
+{
+ acpi_handle handle = device->handle;
+ unsigned long long sta;
+ acpi_status status;
+
+ if (device->handler->hotplug.demand_offline && !acpi_force_hot_remove) {
+  if (!acpi_scan_is_offline(device))
+   return -EBUSY;
+ } else {
+  int error = acpi_scan_try_to_offline(device);
+  if (error)
+   return error;
+ }
 
  ACPI_DEBUG_PRINT((ACPI_DB_INFO,
   "Hot-removing device %s...\n", dev_name(&device->dev)));
diff --git a/include/acpi/acpi_bus.h b/include/acpi/acpi_bus.h
index 9ae0a6b..fdfc36c 100644
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@ -93,8 +93,9 @@ struct acpi_device;
 
 struct acpi_hotplug_profile {
  struct kobject kobj;
- bool enabled:1;
  int (*scan_dependent)(struct acpi_device *adev);
+ bool enabled:1;
+ bool demand_offline:1;
 };
 
 static inline struct acpi_hotplug_profile *to_acpi_hotplug_profile(
-- 
1.7.1