From 72ac19970353eace05970f1cbf3894a343f9ed0e Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Tue, 19 Aug 2014 15:24:48 -0400
Subject: [tools] perf/evlist: Introduce perf_evlist__new_default function

Message-id: <1408462094-14194-120-git-send-email-jolsa@redhat.com>
Patchwork-id: 88093
O-Subject: [PATCH RHEL7.1 BZ1131394 119/325] perf evlist: Introduce perf_evlist__new_default function
Bugzilla: 1131394
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1131394
https://bugzilla.redhat.com/show_bug.cgi?id=1131394

upstream
========
commit b22d54b09a5448d3706929c6f0eae36429f4ec5d
Author: Jiri Olsa <jolsa@redhat.com>
Date: Sun Sep 1 12:36:14 2013 +0200

description
===========
Adding new common function to create evlist with default event. It
spares some code lines in automated tests.
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/tests/perf-record.c b/tools/perf/tests/perf-record.c
index 7923b06..93a62b0 100644
--- a/tools/perf/tests/perf-record.c
+++ b/tools/perf/tests/perf-record.c
@@ -45,7 +45,7 @@ int test__PERF_RECORD(void)
  };
  cpu_set_t cpu_mask;
  size_t cpu_mask_size = sizeof(cpu_mask);
- struct perf_evlist *evlist = perf_evlist__new();
+ struct perf_evlist *evlist = perf_evlist__new_default();
  struct perf_evsel *evsel;
  struct perf_sample sample;
  const char *cmd = "sleep";
@@ -66,16 +66,6 @@ int test__PERF_RECORD(void)
  }
 
  /*
-  * We need at least one evsel in the evlist, use the default
-  * one: "cycles".
-  */
- err = perf_evlist__add_default(evlist);
- if (err < 0) {
-  pr_debug("Not enough memory to create evsel\n");
-  goto out_delete_evlist;
- }
-
- /*
   * Create maps of threads and cpus to monitor. In this case
   * we start with all threads and cpus (-1, -1) but then in
   * perf_evlist__prepare_workload we'll fill in the only thread
diff --git a/tools/perf/tests/task-exit.c b/tools/perf/tests/task-exit.c
index a3e6487..c33d95f 100644
--- a/tools/perf/tests/task-exit.c
+++ b/tools/perf/tests/task-exit.c
@@ -37,20 +37,11 @@ int test__task_exit(void)
  signal(SIGCHLD, sig_handler);
  signal(SIGUSR1, sig_handler);
 
- evlist = perf_evlist__new();
+ evlist = perf_evlist__new_default();
  if (evlist == NULL) {
-  pr_debug("perf_evlist__new\n");
+  pr_debug("perf_evlist__new_default\n");
   return -1;
  }
- /*
-  * We need at least one evsel in the evlist, use the default
-  * one: "cycles".
-  */
- err = perf_evlist__add_default(evlist);
- if (err < 0) {
-  pr_debug("Not enough memory to create evsel\n");
-  goto out_free_evlist;
- }
 
  /*
   * Create maps of threads and cpus to monitor. In this case
@@ -117,7 +108,6 @@ out_close_evlist:
  perf_evlist__close(evlist);
 out_delete_maps:
  perf_evlist__delete_maps(evlist);
-out_free_evlist:
  perf_evlist__delete(evlist);
  return err;
 }
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index a7952af..886b28f 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -50,6 +50,18 @@ struct perf_evlist *perf_evlist__new(void)
  return evlist;
 }
 
+struct perf_evlist *perf_evlist__new_default(void)
+{
+ struct perf_evlist *evlist = perf_evlist__new();
+
+ if (evlist && perf_evlist__add_default(evlist)) {
+  perf_evlist__delete(evlist);
+  evlist = NULL;
+ }
+
+ return evlist;
+}
+
 /**
  * perf_evlist__set_id_pos - set the positions of event ids.
  * @evlist: selected event list
diff --git a/tools/perf/util/evlist.h b/tools/perf/util/evlist.h
index fe80985..3cf03c1 100644
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@ -53,6 +53,7 @@ struct perf_evsel_str_handler {
 };
 
 struct perf_evlist *perf_evlist__new(void);
+struct perf_evlist *perf_evlist__new_default(void);
 void perf_evlist__init(struct perf_evlist *evlist, struct cpu_map *cpus,
          struct thread_map *threads);
 void perf_evlist__exit(struct perf_evlist *evlist);
-- 
1.7.1