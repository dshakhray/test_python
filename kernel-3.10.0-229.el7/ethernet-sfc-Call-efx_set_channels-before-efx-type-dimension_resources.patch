From 407d666b796bc91f437bd8d4f83f654ddee6c576 Mon Sep 17 00:00:00 2001
From: Nikolay Aleksandrov <nikolay@redhat.com>
Date: Fri, 5 Sep 2014 11:03:58 -0400
Subject: [ethernet] sfc: Call efx_set_channels() before efx->type->dimension_resources()

Message-id: <1409915048-26438-23-git-send-email-nikolay@redhat.com>
Patchwork-id: 91408
O-Subject: [RHEL7.1 PATCH BZ 1110888 22/32] Call efx_set_channels() before efx->type->dimension_resources()
Bugzilla: 1110888
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Ivan Vecera <ivecera@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Daniel Pieczko <dpieczko@solarflare.com>

When using the "separate_tx_channels=1" module parameter, the TX queues are
initially numbered starting from the first TX-only channel number (after all the
RX-only channels).  efx_set_channels() renumbers the queues so that they are
indexed from zero.

On EF10, the TX queues need to be relabelled in this way before calling the
dimension_resources NIC type operation, otherwise the TX queue PIO buffers can be
linked to the wrong VIs when using "separate_tx_channels=1".

Added comments to explain UC/WC mappings for PIO buffers

Signed-off-by: Shradha Shah <sshah@solarflare.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 52ad762b85ed7947ec9eff6b036eb985352f6874)
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/sfc/ef10.c b/drivers/net/ethernet/sfc/ef10.c
index 1425663..ba1ec49 100644
--- a/drivers/net/ethernet/sfc/ef10.c
+++ b/drivers/net/ethernet/sfc/ef10.c
@@ -565,10 +565,17 @@ static int efx_ef10_dimension_resources(struct efx_nic *efx)
   * several of each (in fact that's the only option if host
   * page size is >4K).  So we may allocate some extra VIs just
   * for writing PIO buffers through.
+  *
+  * The UC mapping contains (min_vis - 1) complete VIs and the
+  * first half of the next VI.  Then the WC mapping begins with
+  * the second half of this last VI.
   */
  uc_mem_map_size = PAGE_ALIGN((min_vis - 1) * EFX_VI_PAGE_SIZE +
          ER_DZ_TX_PIOBUF);
  if (nic_data->n_piobufs) {
+  /* pio_write_vi_base rounds down to give the number of complete
+   * VIs inside the UC mapping.
+   */
   pio_write_vi_base = uc_mem_map_size / EFX_VI_PAGE_SIZE;
   wc_mem_map_size = (PAGE_ALIGN((pio_write_vi_base +
             nic_data->n_piobufs) *
diff --git a/drivers/net/ethernet/sfc/efx.c b/drivers/net/ethernet/sfc/efx.c
index aacc56d..60f9632 100644
--- a/drivers/net/ethernet/sfc/efx.c
+++ b/drivers/net/ethernet/sfc/efx.c
@@ -1599,6 +1599,8 @@ static int efx_probe_nic(struct efx_nic *efx)
  if (rc)
   goto fail1;
 
+ efx_set_channels(efx);
+
  rc = efx->type->dimension_resources(efx);
  if (rc)
   goto fail2;
@@ -1609,7 +1611,6 @@ static int efx_probe_nic(struct efx_nic *efx)
   efx->rx_indir_table[i] =
    ethtool_rxfh_indir_default(i, efx->rss_spread);
 
- efx_set_channels(efx);
  netif_set_real_num_tx_queues(efx->net_dev, efx->n_tx_channels);
  netif_set_real_num_rx_queues(efx->net_dev, efx->n_rx_channels);
 
-- 
1.7.1