From c21acec279990dbf2c6dd382d90f66ffd8253524 Mon Sep 17 00:00:00 2001
From: Josh Poimboeuf <jpoimboe@redhat.com>
Date: Thu, 4 Sep 2014 18:54:22 -0400
Subject: [kernel] ftrace: Run a sync after fixup on failure

Message-id: <512c1cf785dbdd186f3302d540e8a32218db62e2.1409856554.git.jpoimboe@redhat.com>
Patchwork-id: 91246
O-Subject: [RHEL7.1 PATCH 03/23] ftrace/x86: Run a sync after fixup on failure
Bugzilla: 1113829
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1113829

commit c932c6b7c913a5661e04059045fa1eac762c82fa
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Fri Feb 21 10:43:12 2014 -0500

    ftrace/x86: Run a sync after fixup on failure

    If a failure occurs while enabling a trace, it bails out and will remove
    the tracepoints to be back to what the code originally was. But the fix
    up had some bugs in it. By injecting a failure in the code, the fix up
    ran to completion, but shortly afterward the system rebooted.

    There was two bugs here.

    The first was that there was no final sync run across the CPUs after the
    fix up was done, and before the ftrace int3 handler flag was reset. That
    means that other CPUs could still see the breakpoint and trigger on it
    long after the flag was cleared, and the int3 handler would think it was
    a spurious interrupt. Worse yet, the int3 handler could hit other breakpoints
    because the ftrace int3 handler flag would have prevented the int3 handler
    from going further.

    Here's a description of the issue:

     CPU0    CPU1
     ----    ----
      remove_breakpoint();
      modifying_ftrace_code = 0;

        [still sees breakpoint]
        <takes trap>
        [sees modifying_ftrace_code as zero]
        [no breakpoint handler]
        [goto failed case]
        [trap exception - kernel breakpoint, no
         handler]
        BUG()

    The second bug was that the removal of the breakpoints required the
    "within()" logic updates instead of accessing the ip address directly.
    As the kernel text is mapped read-only when CONFIG_DEBUG_RODATA is set, and
    the removal of the breakpoint is a modification of the kernel text.
    The ftrace_write() includes the "within()" logic, where as, the
    probe_kernel_write() does not. This prevented the breakpoint from being
    removed at all.

    Link: http://lkml.kernel.org/r/1392650573-3390-1-git-send-email-pmladek@suse.cz

    Reported-by: Petr Mladek <pmladek@suse.cz>
    Tested-by: Petr Mladek <pmladek@suse.cz>
    Acked-by: H. Peter Anvin <hpa@linux.intel.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/ftrace.c b/arch/x86/kernel/ftrace.c
index e625319..6b566c8 100644
--- a/arch/x86/kernel/ftrace.c
+++ b/arch/x86/kernel/ftrace.c
@@ -455,7 +455,7 @@ static int remove_breakpoint(struct dyn_ftrace *rec)
  }
 
  update:
- return probe_kernel_write((void *)ip, &nop[0], 1);
+ return ftrace_write(ip, nop, 1);
 }
 
 static int add_update_code(unsigned long ip, unsigned const char *new)
@@ -634,6 +634,7 @@ void ftrace_replace_code(int enable)
   rec = ftrace_rec_iter_record(iter);
   remove_breakpoint(rec);
  }
+ run_sync();
 }
 
 static int
@@ -664,7 +665,7 @@ ftrace_modify_code(unsigned long ip, unsigned const char *old_code,
  return ret;
 
  fail_update:
- probe_kernel_write((void *)ip, &old_code[0], 1);
+ ftrace_write(ip, old_code, 1);
  goto out;
 }
 
-- 
1.7.1