From 6f5b1c5ced9bcd26fd5729f401d5939daac8c40e Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 22 Jul 2014 14:39:53 -0400
Subject: [virt] kvm/x86: Mark bit 7 in long-mode PDPTE according to 1GB pages support

Message-id: <1406040016-3289-199-git-send-email-pbonzini@redhat.com>
Patchwork-id: 86277
O-Subject: [RHEL7 PATCH v2 198/221] KVM: x86: Mark bit 7 in long-mode PDPTE according to 1GB pages support
Bugzilla: 1116936
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Bandan Das <bsd@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Nadav Amit <namit@cs.technion.ac.il>

In long-mode, bit 7 in the PDPTE is not reserved only if 1GB pages are
supported by the CPU. Currently the bit is considered by KVM as always
reserved.

Signed-off-by: Nadav Amit <namit@cs.technion.ac.il>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 5f7dde7bbb3c628766676cbd63c0a1834035d6fa)
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kvm/cpuid.h b/arch/x86/kvm/cpuid.h
index eeecbed..f908731 100644
--- a/arch/x86/kvm/cpuid.h
+++ b/arch/x86/kvm/cpuid.h
@@ -88,4 +88,11 @@ static inline bool guest_cpuid_has_x2apic(struct kvm_vcpu *vcpu)
  return best && (best->ecx & bit(X86_FEATURE_X2APIC));
 }
 
+static inline bool guest_cpuid_has_gbpages(struct kvm_vcpu *vcpu)
+{
+ struct kvm_cpuid_entry2 *best;
+
+ best = kvm_find_cpuid_entry(vcpu, 0x80000001, 0);
+ return best && (best->edx & bit(X86_FEATURE_GBPAGES));
+}
 #endif
diff --git a/arch/x86/kvm/mmu.c b/arch/x86/kvm/mmu.c
index 0e6b195..e0a1f65 100644
--- a/arch/x86/kvm/mmu.c
+++ b/arch/x86/kvm/mmu.c
@@ -22,6 +22,7 @@
 #include "mmu.h"
 #include "x86.h"
 #include "kvm_cache_regs.h"
+#include "cpuid.h"
 
 #include <linux/kvm_host.h>
 #include <linux/types.h>
@@ -3511,11 +3512,14 @@ static void reset_rsvds_bits_mask(struct kvm_vcpu *vcpu,
 {
  int maxphyaddr = cpuid_maxphyaddr(vcpu);
  u64 exb_bit_rsvd = 0;
+ u64 gbpages_bit_rsvd = 0;
 
  context->bad_mt_xwr = 0;
 
  if (!context->nx)
   exb_bit_rsvd = rsvd_bits(63, 63);
+ if (!guest_cpuid_has_gbpages(vcpu))
+  gbpages_bit_rsvd = rsvd_bits(7, 7);
  switch (context->root_level) {
  case PT32_ROOT_LEVEL:
   /* no rsvd bits for 2 level 4K page table entries */
@@ -3552,14 +3556,14 @@ static void reset_rsvds_bits_mask(struct kvm_vcpu *vcpu,
   context->rsvd_bits_mask[0][3] = exb_bit_rsvd |
    rsvd_bits(maxphyaddr, 51) | rsvd_bits(7, 7);
   context->rsvd_bits_mask[0][2] = exb_bit_rsvd |
-   rsvd_bits(maxphyaddr, 51) | rsvd_bits(7, 7);
+   gbpages_bit_rsvd | rsvd_bits(maxphyaddr, 51);
   context->rsvd_bits_mask[0][1] = exb_bit_rsvd |
    rsvd_bits(maxphyaddr, 51);
   context->rsvd_bits_mask[0][0] = exb_bit_rsvd |
    rsvd_bits(maxphyaddr, 51);
   context->rsvd_bits_mask[1][3] = context->rsvd_bits_mask[0][3];
   context->rsvd_bits_mask[1][2] = exb_bit_rsvd |
-   rsvd_bits(maxphyaddr, 51) |
+   gbpages_bit_rsvd | rsvd_bits(maxphyaddr, 51) |
    rsvd_bits(13, 29);
   context->rsvd_bits_mask[1][1] = exb_bit_rsvd |
    rsvd_bits(maxphyaddr, 51) |
-- 
1.7.1