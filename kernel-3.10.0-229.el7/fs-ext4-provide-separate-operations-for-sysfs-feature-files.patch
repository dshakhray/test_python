From 4a50d4196b70e88bdbe90e65a3067c6ca604bdb1 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Wed, 29 Oct 2014 16:34:23 -0400
Subject: [fs] ext4: provide separate operations for sysfs feature files

Message-id: <1414600485-1929-34-git-send-email-lczerner@redhat.com>
Patchwork-id: 98564
O-Subject: [RHEL 7.1 PATCH v2 33/55] ext4: provide separate operations for sysfs feature files
Bugzilla: 1156096
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

BZ 1156096
https://bugzilla.redhat.com/show_bug.cgi?id=1156096

BREW 8169722
https://brewweb.devel.redhat.com/taskinfo?taskID=8169722

Upstream commit c7f725435adcf2ade4b9152ee33339d28f4cc330

 Currently sysfs feature files uses ext4_attr_ops as the file operations
 to show/store data. However the feature files is not supposed to contain
 any data at all, the sole existence of the file means that the module
 support the feature. Moreover, none of the sysfs feature attributes
 actually register show/store functions so that would not be a problem.

 However if a sysfs feature attribute register a show or store function
 we might be in trouble because the kobject in this case is _not_ embedded
 in the ext4_sb_info structure as ext4_attr_show/store expect.

 So just to be safe, provide separate empty sysfs_ops to use in
 ext4_feat_ktype. This might safe us from potential problems in the
 future. As a bonus we can "store" something more descriptive than
 nothing in the files, so let it contain "enabled" to make it clear that
 the feature is really present in the module.

 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
 Signed-off-by: Theodore Ts'o <tytso@mit.edu>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 9021d0b..48ac819 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -2753,9 +2753,25 @@ static void ext4_feat_release(struct kobject *kobj)
  complete(&ext4_feat->f_kobj_unregister);
 }
 
+static ssize_t ext4_feat_show(struct kobject *kobj,
+         struct attribute *attr, char *buf)
+{
+ return snprintf(buf, PAGE_SIZE, "supported\n");
+}
+
+/*
+ * We can not use ext4_attr_show/store because it relies on the kobject
+ * being embedded in the ext4_sb_info structure which is definitely not
+ * true in this case.
+ */
+static const struct sysfs_ops ext4_feat_ops = {
+ .show = ext4_feat_show,
+ .store = NULL,
+};
+
 static struct kobj_type ext4_feat_ktype = {
  .default_attrs = ext4_feat_attrs,
- .sysfs_ops = &ext4_attr_ops,
+ .sysfs_ops = &ext4_feat_ops,
  .release = ext4_feat_release,
 };
 
-- 
1.7.1