From 60278ad8219ca3f737d19506cad00a153a6a0475 Mon Sep 17 00:00:00 2001
From: Ivan Vecera <ivecera@redhat.com>
Date: Wed, 3 Sep 2014 15:15:53 -0400
Subject: [ethernet] bna: Call dev_kfree_skb_any instead of dev_kfree_skb

Message-id: <1409757361-26781-6-git-send-email-ivecera@redhat.com>
Patchwork-id: 91164
O-Subject: [RHEL7.1 PATCH 05/13] bnad: Call dev_kfree_skb_any instead of dev_kfree_skb.
Bugzilla: 1136912
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

BZ: #1136912

Upstream commit(s):
commit 27400df8e92b0e2934ef9de8eb7a08e7e490b784
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Sat Mar 15 16:06:40 2014 -0700

    bnad: Call dev_kfree_skb_any instead of dev_kfree_skb.

    Replace dev_kfree_skb with dev_kfree_skb_any in bnad_start_xmit that
    can be called in hard irq and other contexts.

    dev_kfree_skb_any is used as bnad_start_xmit only frees skbs when to
    drop them, normally transmitted packets are handled elsewhere.

    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>

Signed-off-by: Ivan Vecera <ivecera@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/brocade/bna/bnad.c b/drivers/net/ethernet/brocade/bna/bnad.c
index cb76253..a881e98 100644
--- a/drivers/net/ethernet/brocade/bna/bnad.c
+++ b/drivers/net/ethernet/brocade/bna/bnad.c
@@ -2946,17 +2946,17 @@ bnad_start_xmit(struct sk_buff *skb, struct net_device *netdev)
  /* Sanity checks for the skb */
 
  if (unlikely(skb->len <= ETH_HLEN)) {
-  dev_kfree_skb(skb);
+  dev_kfree_skb_any(skb);
   BNAD_UPDATE_CTR(bnad, tx_skb_too_short);
   return NETDEV_TX_OK;
  }
  if (unlikely(len > BFI_TX_MAX_DATA_PER_VECTOR)) {
-  dev_kfree_skb(skb);
+  dev_kfree_skb_any(skb);
   BNAD_UPDATE_CTR(bnad, tx_skb_headlen_zero);
   return NETDEV_TX_OK;
  }
  if (unlikely(len == 0)) {
-  dev_kfree_skb(skb);
+  dev_kfree_skb_any(skb);
   BNAD_UPDATE_CTR(bnad, tx_skb_headlen_zero);
   return NETDEV_TX_OK;
  }
@@ -2968,7 +2968,7 @@ bnad_start_xmit(struct sk_buff *skb, struct net_device *netdev)
   * and the netif_tx_stop_all_queues() call.
   */
  if (unlikely(!tcb || !test_bit(BNAD_TXQ_TX_STARTED, &tcb->flags))) {
-  dev_kfree_skb(skb);
+  dev_kfree_skb_any(skb);
   BNAD_UPDATE_CTR(bnad, tx_skb_stopping);
   return NETDEV_TX_OK;
  }
@@ -2981,7 +2981,7 @@ bnad_start_xmit(struct sk_buff *skb, struct net_device *netdev)
  wis = BNA_TXQ_WI_NEEDED(vectors); /* 4 vectors per work item */
 
  if (unlikely(vectors > BFI_TX_MAX_VECTORS_PER_PKT)) {
-  dev_kfree_skb(skb);
+  dev_kfree_skb_any(skb);
   BNAD_UPDATE_CTR(bnad, tx_skb_max_vectors);
   return NETDEV_TX_OK;
  }
@@ -3021,7 +3021,7 @@ bnad_start_xmit(struct sk_buff *skb, struct net_device *netdev)
 
  /* Program the opcode, flags, frame_len, num_vectors in WI */
  if (bnad_txq_wi_prepare(bnad, tcb, skb, txqent)) {
-  dev_kfree_skb(skb);
+  dev_kfree_skb_any(skb);
   return NETDEV_TX_OK;
  }
  txqent->hdr.wi.reserved = 0;
@@ -3047,7 +3047,7 @@ bnad_start_xmit(struct sk_buff *skb, struct net_device *netdev)
    /* Undo the changes starting at tcb->producer_index */
    bnad_tx_buff_unmap(bnad, unmap_q, q_depth,
     tcb->producer_index);
-   dev_kfree_skb(skb);
+   dev_kfree_skb_any(skb);
    BNAD_UPDATE_CTR(bnad, tx_skb_frag_zero);
    return NETDEV_TX_OK;
   }
@@ -3076,7 +3076,7 @@ bnad_start_xmit(struct sk_buff *skb, struct net_device *netdev)
  if (unlikely(len != skb->len)) {
   /* Undo the changes starting at tcb->producer_index */
   bnad_tx_buff_unmap(bnad, unmap_q, q_depth, tcb->producer_index);
-  dev_kfree_skb(skb);
+  dev_kfree_skb_any(skb);
   BNAD_UPDATE_CTR(bnad, tx_skb_len_mismatch);
   return NETDEV_TX_OK;
  }
-- 
1.7.1