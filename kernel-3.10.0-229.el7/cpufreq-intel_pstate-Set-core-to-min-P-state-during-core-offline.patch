From 0ae23804a479965d3ca886b06946f9cabb94c1b9 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 28 Aug 2014 14:23:46 -0400
Subject: [cpufreq] intel_pstate: Set core to min P state during core offline

Message-id: <1409235879-1283-133-git-send-email-prarit@redhat.com>
Patchwork-id: 89438
O-Subject: [RHEL7.1 PATCH BZ 1134639 132/185] intel_pstate: Set core to min P state during core offline
Bugzilla: 1134369
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Mark Langsdorf <mlangsdo@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1134639

commit bb18008f8086283f8f03e8e50fbbf17f213b9ea9
Author: Dirk Brandewie <dirk.j.brandewie@intel.com>
Date:   Wed Mar 19 08:45:54 2014 -0700

    intel_pstate: Set core to min P state during core offline

    Change to use the new ->stop_cpu() callback to do clean up during CPU
    hotplug. The requested P state for an offline core will be used by the
    hardware coordination function to select the package P state. If the
    core is under load when it is offlined it will fix the package P state
    floor to the requested P state of offline core.

    Reported-by: Patrick Marlier <patrick.marlier@gmail.com>
    Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

Cc: Lenny Szubowicz <lszubowi@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index 7f05abe..3a5cc92 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -446,7 +446,7 @@ static void core_set_pstate(struct cpudata *cpudata, int pstate)
  if (limits.no_turbo)
   val |= (u64)1 << 32;
 
- wrmsrl(MSR_IA32_PERF_CTL, val);
+ wrmsrl_on_cpu(cpudata->cpu, MSR_IA32_PERF_CTL, val);
 }
 
 static struct cpu_defaults core_params = {
@@ -774,14 +774,17 @@ static int intel_pstate_verify_policy(struct cpufreq_policy *policy)
  return 0;
 }
 
-static int intel_pstate_cpu_exit(struct cpufreq_policy *policy)
+static void intel_pstate_stop_cpu(struct cpufreq_policy *policy)
 {
- int cpu = policy->cpu;
+ int cpu_num = policy->cpu;
+ struct cpudata *cpu = all_cpu_data[cpu_num];
 
- del_timer(&all_cpu_data[cpu]->timer);
- kfree(all_cpu_data[cpu]);
- all_cpu_data[cpu] = NULL;
- return 0;
+ pr_info("intel_pstate CPU %d exiting\n", cpu_num);
+
+ del_timer(&all_cpu_data[cpu_num]->timer);
+ intel_pstate_set_pstate(cpu, cpu->pstate.min_pstate);
+ kfree(all_cpu_data[cpu_num]);
+ all_cpu_data[cpu_num] = NULL;
 }
 
 static int intel_pstate_cpu_init(struct cpufreq_policy *policy)
@@ -819,7 +822,7 @@ static struct cpufreq_driver intel_pstate_driver = {
  .setpolicy = intel_pstate_set_policy,
  .get  = intel_pstate_get,
  .init  = intel_pstate_cpu_init,
- .exit  = intel_pstate_cpu_exit,
+ .stop_cpu = intel_pstate_stop_cpu,
  .name  = "intel_pstate",
 };
 
-- 
1.7.1