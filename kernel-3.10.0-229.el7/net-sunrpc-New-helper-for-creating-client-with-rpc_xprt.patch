From 619caaa3f7a55d40ca9ed7d5d005d525f2bc270f Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Mon, 23 Jun 2014 21:50:07 -0400
Subject: [net] sunrpc: New helper for creating client with rpc_xprt

Message-id: <1403560314-32525-66-git-send-email-bfields@redhat.com>
Patchwork-id: 84486
O-Subject: [Patch RHEL7 065/172] SUNRPC: New helper for creating client with rpc_xprt
Bugzilla: 1111719
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Kinglong Mee <kinglongmee@gmail.com>

Signed-off-by: Kinglong Mee <kinglongmee@gmail.com>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 83ddfebdd21da669918d7f9854fd592858625f4b
Bugzilla: 1111719
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/sunrpc/clnt.h b/include/linux/sunrpc/clnt.h
index 8af2804..70736b9 100644
--- a/include/linux/sunrpc/clnt.h
+++ b/include/linux/sunrpc/clnt.h
@@ -130,6 +130,8 @@ struct rpc_create_args {
 #define RPC_CLNT_CREATE_NO_RETRANS_TIMEOUT (1UL << 9)
 
 struct rpc_clnt *rpc_create(struct rpc_create_args *args);
+struct rpc_clnt *rpc_create_xprt(struct rpc_create_args *args,
+     struct rpc_xprt *xprt);
 struct rpc_clnt *rpc_bind_new_program(struct rpc_clnt *,
     const struct rpc_program *, u32);
 void rpc_task_reset_client(struct rpc_task *task, struct rpc_clnt *clnt);
diff --git a/net/sunrpc/clnt.c b/net/sunrpc/clnt.c
index cb76099..e74e5ed 100644
--- a/net/sunrpc/clnt.c
+++ b/net/sunrpc/clnt.c
@@ -438,6 +438,38 @@ out_no_rpciod:
  return ERR_PTR(err);
 }
 
+struct rpc_clnt *rpc_create_xprt(struct rpc_create_args *args,
+     struct rpc_xprt *xprt)
+{
+ struct rpc_clnt *clnt = NULL;
+
+ clnt = rpc_new_client(args, xprt, NULL);
+ if (IS_ERR(clnt))
+  return clnt;
+
+ if (!(args->flags & RPC_CLNT_CREATE_NOPING)) {
+  int err = rpc_ping(clnt);
+  if (err != 0) {
+   rpc_shutdown_client(clnt);
+   return ERR_PTR(err);
+  }
+ }
+
+ clnt->cl_softrtry = 1;
+ if (args->flags & RPC_CLNT_CREATE_HARDRTRY)
+  clnt->cl_softrtry = 0;
+
+ if (args->flags & RPC_CLNT_CREATE_AUTOBIND)
+  clnt->cl_autobind = 1;
+ if (args->flags & RPC_CLNT_CREATE_DISCRTRY)
+  clnt->cl_discrtry = 1;
+ if (!(args->flags & RPC_CLNT_CREATE_QUIET))
+  clnt->cl_chatty = 1;
+
+ return clnt;
+}
+EXPORT_SYMBOL_GPL(rpc_create_xprt);
+
 /**
  * rpc_create - create an RPC client and transport with one call
  * @args: rpc_clnt create argument structure
@@ -451,7 +483,6 @@ out_no_rpciod:
 struct rpc_clnt *rpc_create(struct rpc_create_args *args)
 {
  struct rpc_xprt *xprt;
- struct rpc_clnt *clnt;
  struct xprt_create xprtargs = {
   .net = args->net,
   .ident = args->protocol,
@@ -515,30 +546,7 @@ struct rpc_clnt *rpc_create(struct rpc_create_args *args)
  if (args->flags & RPC_CLNT_CREATE_NONPRIVPORT)
   xprt->resvport = 0;
 
- clnt = rpc_new_client(args, xprt, NULL);
- if (IS_ERR(clnt))
-  return clnt;
-
- if (!(args->flags & RPC_CLNT_CREATE_NOPING)) {
-  int err = rpc_ping(clnt);
-  if (err != 0) {
-   rpc_shutdown_client(clnt);
-   return ERR_PTR(err);
-  }
- }
-
- clnt->cl_softrtry = 1;
- if (args->flags & RPC_CLNT_CREATE_HARDRTRY)
-  clnt->cl_softrtry = 0;
-
- if (args->flags & RPC_CLNT_CREATE_AUTOBIND)
-  clnt->cl_autobind = 1;
- if (args->flags & RPC_CLNT_CREATE_DISCRTRY)
-  clnt->cl_discrtry = 1;
- if (!(args->flags & RPC_CLNT_CREATE_QUIET))
-  clnt->cl_chatty = 1;
-
- return clnt;
+ return rpc_create_xprt(args, xprt);
 }
 EXPORT_SYMBOL_GPL(rpc_create);
 
-- 
1.7.1