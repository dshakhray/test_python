From b29cea066b1221da0548f7b6c669162c63c0b7ab Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:49 -0400
Subject: [fs] ext4: atomically set inode->i_flags in ext4_set_inode_flags()

Message-id: <1414058125-4183-136-git-send-email-lczerner@redhat.com>
Patchwork-id: 98260
O-Subject: [RHEL 7.1 PATCH v2 135/171] ext4: atomically set inode->i_flags in ext4_set_inode_flags()
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 5f16f3225b06242a9ee876f07c1c9b6ed36a22b6

 Use cmpxchg() to atomically set i_flags instead of clearing out the
 S_IMMUTABLE, S_APPEND, etc. flags and then setting them from the
 EXT4_IMMUTABLE_FL, EXT4_APPEND_FL flags, since this opens up a race
 where an immutable file has the immutable flag cleared for a brief
 window of time.

 Reported-by: John Sullivan <jsrhbz@kanargh.force9.co.uk>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Cc: stable@kernel.org
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 156a9e0..8e7e616 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -3948,18 +3948,20 @@ int ext4_get_inode_loc(struct inode *inode, struct ext4_iloc *iloc)
 void ext4_set_inode_flags(struct inode *inode)
 {
  unsigned int flags = EXT4_I(inode)->i_flags;
+ unsigned int new_fl = 0;
 
- inode->i_flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME|S_DIRSYNC);
  if (flags & EXT4_SYNC_FL)
-  inode->i_flags |= S_SYNC;
+  new_fl |= S_SYNC;
  if (flags & EXT4_APPEND_FL)
-  inode->i_flags |= S_APPEND;
+  new_fl |= S_APPEND;
  if (flags & EXT4_IMMUTABLE_FL)
-  inode->i_flags |= S_IMMUTABLE;
+  new_fl |= S_IMMUTABLE;
  if (flags & EXT4_NOATIME_FL)
-  inode->i_flags |= S_NOATIME;
+  new_fl |= S_NOATIME;
  if (flags & EXT4_DIRSYNC_FL)
-  inode->i_flags |= S_DIRSYNC;
+  new_fl |= S_DIRSYNC;
+ inode_set_flags(inode, new_fl,
+   S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME|S_DIRSYNC);
 }
 
 /* Propagate flags from i_flags to EXT4_I(inode)->i_flags */
diff --git a/fs/inode.c b/fs/inode.c
index 231ab3a..7d47f0a 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -1941,3 +1941,34 @@ void inode_dio_done(struct inode *inode)
   __inode_dio_done(inode);
 }
 EXPORT_SYMBOL(inode_dio_done);
+
+/*
+ * inode_set_flags - atomically set some inode flags
+ *
+ * Note: the caller should be holding i_mutex, or else be sure that
+ * they have exclusive access to the inode structure (i.e., while the
+ * inode is being instantiated).  The reason for the cmpxchg() loop
+ * --- which wouldn't be necessary if all code paths which modify
+ * i_flags actually followed this rule, is that there is at least one
+ * code path which doesn't today --- for example,
+ * __generic_file_aio_write() calls file_remove_suid() without holding
+ * i_mutex --- so we use cmpxchg() out of an abundance of caution.
+ *
+ * In the long run, i_mutex is overkill, and we should probably look
+ * at using the i_lock spinlock to protect i_flags, and then make sure
+ * it is so documented in include/linux/fs.h and that all code follows
+ * the locking convention!!
+ */
+void inode_set_flags(struct inode *inode, unsigned int flags,
+       unsigned int mask)
+{
+ unsigned int old_flags, new_flags;
+
+ WARN_ON_ONCE(flags & ~mask);
+ do {
+  old_flags = ACCESS_ONCE(inode->i_flags);
+  new_flags = (old_flags & ~mask) | flags;
+ } while (unlikely(cmpxchg(&inode->i_flags, old_flags,
+      new_flags) != old_flags));
+}
+EXPORT_SYMBOL(inode_set_flags);
diff --git a/include/linux/fs.h b/include/linux/fs.h
index c43d40f..d561b7f 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -2567,6 +2567,9 @@ void inode_dio_wait(struct inode *inode);
 void __inode_dio_done(struct inode *inode);
 void inode_dio_done(struct inode *inode);
 
+extern void inode_set_flags(struct inode *inode, unsigned int flags,
+       unsigned int mask);
+
 extern const struct file_operations generic_ro_fops;
 
 #define special_file(m) (S_ISCHR(m)||S_ISBLK(m)||S_ISFIFO(m)||S_ISSOCK(m))
-- 
1.7.1