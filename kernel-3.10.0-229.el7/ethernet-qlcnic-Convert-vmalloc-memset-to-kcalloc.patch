From 9c4d7c80f787d6c92b6d9485b83122cd1d3deaa3 Mon Sep 17 00:00:00 2001
From: Chad Dupuis <cdupuis@redhat.com>
Date: Thu, 21 Aug 2014 13:05:47 -0400
Subject: [ethernet] qlcnic: Convert vmalloc/memset to kcalloc

Message-id: <1408626422-3941-64-git-send-email-cdupuis@redhat.com>
Patchwork-id: 88595
O-Subject: [PATCH RHEL 7.1 063/138] qlcnic: Convert vmalloc/memset to kcalloc
Bugzilla: 1089352
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

From: Joe Perches <joe@perches.com>

Bug 1089352 (https://bugzilla.redhat.com/show_bug.cgi?id=1089352)

net commit id f3c0773ff2875af6497c20cf63e42c186e19eef0

vmalloc is a limited resource.  Don't use it unnecessarily.

It seems this allocation should work with kcalloc.

Remove unnecessary memset(,0,) of buf as it's completely
overwritten as the previously only unset field in
struct qlcnic_pci_func_cfg is now set to 0.

Use kfree instead of vfree.
Use ETH_ALEN instead of 6.

Signed-off-by: Joe Perches <joe@perches.com>
Acked-by: Jitendra Kalsaria <jitendra.kalsaria@qlogic.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
index 4f7bdfd..b2747dd 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
@@ -1267,7 +1267,7 @@ struct qlcnic_pci_func_cfg {
  u16 port_num;
  u8 pci_func;
  u8 func_state;
- u8 def_mac_addr[6];
+ u8 def_mac_addr[ETH_ALEN];
 };
 
 struct qlcnic_npar_func_cfg {
diff --git a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c
index b529667..c9b704d 100644
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c
@@ -6,7 +6,6 @@
  */
 
 #include <linux/slab.h>
-#include <linux/vmalloc.h>
 #include <linux/interrupt.h>
 
 #include "qlcnic.h"
@@ -927,38 +926,35 @@ static ssize_t qlcnic_sysfs_read_pci_config(struct file *file,
  u32 pci_func_count = qlcnic_get_pci_func_count(adapter);
  struct qlcnic_pci_func_cfg *pci_cfg;
  struct qlcnic_pci_info *pci_info;
- size_t pci_info_sz, pci_cfg_sz;
+ size_t pci_cfg_sz;
  int i, ret;
 
  pci_cfg_sz = pci_func_count * sizeof(*pci_cfg);
  if (size != pci_cfg_sz)
   return QL_STATUS_INVALID_PARAM;
 
- pci_info_sz = pci_func_count * sizeof(*pci_info);
- pci_info = vmalloc(pci_info_sz);
+ pci_info = kcalloc(pci_func_count, sizeof(*pci_info), GFP_KERNEL);
  if (!pci_info)
   return -ENOMEM;
 
- memset(pci_info, 0, pci_info_sz);
- memset(buf, 0, pci_cfg_sz);
- pci_cfg = (struct qlcnic_pci_func_cfg *)buf;
-
  ret = qlcnic_get_pci_info(adapter, pci_info);
  if (ret) {
-  vfree(pci_info);
+  kfree(pci_info);
   return ret;
  }
 
+ pci_cfg = (struct qlcnic_pci_func_cfg *)buf;
  for (i = 0; i < pci_func_count; i++) {
   pci_cfg[i].pci_func = pci_info[i].id;
   pci_cfg[i].func_type = pci_info[i].type;
+  pci_cfg[i].func_state = 0;
   pci_cfg[i].port_num = pci_info[i].default_port;
   pci_cfg[i].min_bw = pci_info[i].tx_min_bw;
   pci_cfg[i].max_bw = pci_info[i].tx_max_bw;
   memcpy(&pci_cfg[i].def_mac_addr, &pci_info[i].mac, ETH_ALEN);
  }
 
- vfree(pci_info);
+ kfree(pci_info);
  return size;
 }
 
-- 
1.7.1