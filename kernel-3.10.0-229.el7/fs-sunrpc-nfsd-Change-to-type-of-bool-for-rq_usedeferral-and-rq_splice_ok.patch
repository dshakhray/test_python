From 0e7757c0692cf1429708e62b00077d5bb9032199 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Tue, 16 Sep 2014 20:18:06 -0400
Subject: [fs] sunrpc/nfsd: Change to type of bool for rq_usedeferral and rq_splice_ok

Message-id: <1410898849-22126-3-git-send-email-bfields@redhat.com>
Patchwork-id: 95697
O-Subject: [Patch RHEL7 002/165] SUNRPC/NFSD: Change to type of bool for rq_usedeferral and rq_splice_ok
Bugzilla: 1044798 1123721 1141932
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>

From: Kinglong Mee <kinglongmee@gmail.com>

rq_usedeferral and rq_splice_ok are used as 0 and 1, just defined to bool.

Signed-off-by: Kinglong Mee <kinglongmee@gmail.com>
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: f15a5cf912f05b572d1f9f3772fba019643f4837
Bugzilla: 1044798
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/nfsd/nfs4proc.c b/fs/nfsd/nfs4proc.c
index 754f5a0..e8dff17 100644
--- a/fs/nfsd/nfs4proc.c
+++ b/fs/nfsd/nfs4proc.c
@@ -1297,7 +1297,7 @@ nfsd4_proc_compound(struct svc_rqst *rqstp,
   * Don't use the deferral mechanism for NFSv4; compounds make it
   * too hard to avoid non-idempotency problems.
   */
- rqstp->rq_usedeferral = 0;
+ rqstp->rq_usedeferral = false;
 
  /*
   * According to RFC3010, this takes precedence over all other errors.
@@ -1416,7 +1416,7 @@ encode_op:
  BUG_ON(cstate->replay_owner);
 out:
  /* Reset deferral mechanism for RPC deferrals */
- rqstp->rq_usedeferral = 1;
+ rqstp->rq_usedeferral = true;
  dprintk("nfsv4 compound returned %d\n", ntohl(status));
  return status;
 }
diff --git a/include/linux/sunrpc/svc.h b/include/linux/sunrpc/svc.h
index 1bc7cd0..cf61ecd 100644
--- a/include/linux/sunrpc/svc.h
+++ b/include/linux/sunrpc/svc.h
@@ -236,7 +236,7 @@ struct svc_rqst {
  struct svc_cred  rq_cred; /* auth info */
  void *   rq_xprt_ctxt; /* transport specific context ptr */
  struct svc_deferred_req*rq_deferred; /* deferred request we are replaying */
- int   rq_usedeferral; /* use deferral */
+ bool   rq_usedeferral; /* use deferral */
 
  size_t   rq_xprt_hlen; /* xprt header len */
  struct xdr_buf  rq_arg;
@@ -277,7 +277,7 @@ struct svc_rqst {
  struct auth_domain * rq_gssclient; /* "gss/"-style peer info */
  int   rq_cachetype;
  struct svc_cacherep * rq_cacherep; /* cache info */
- int   rq_splice_ok;   /* turned off in gss privacy
+ bool   rq_splice_ok;   /* turned off in gss privacy
        * to prevent encrypting page
        * cache pages */
  wait_queue_head_t rq_wait; /* synchronization */
diff --git a/net/sunrpc/auth_gss/svcauth_gss.c b/net/sunrpc/auth_gss/svcauth_gss.c
index b5fe4fc..fcb9025 100644
--- a/net/sunrpc/auth_gss/svcauth_gss.c
+++ b/net/sunrpc/auth_gss/svcauth_gss.c
@@ -886,7 +886,7 @@ unwrap_priv_data(struct svc_rqst *rqstp, struct xdr_buf *buf, u32 seq, struct gs
  u32 priv_len, maj_stat;
  int pad, saved_len, remaining_len, offset;
 
- rqstp->rq_splice_ok = 0;
+ rqstp->rq_splice_ok = false;
 
  priv_len = svc_getnl(&buf->head[0]);
  if (rqstp->rq_deferred) {
diff --git a/net/sunrpc/svc.c b/net/sunrpc/svc.c
index 11c1597..dc3fc7f 100644
--- a/net/sunrpc/svc.c
+++ b/net/sunrpc/svc.c
@@ -1086,9 +1086,9 @@ svc_process_common(struct svc_rqst *rqstp, struct kvec *argv, struct kvec *resv)
   goto err_short_len;
 
  /* Will be turned off only in gss privacy case: */
- rqstp->rq_splice_ok = 1;
+ rqstp->rq_splice_ok = true;
  /* Will be turned off only when NFSv4 Sessions are used */
- rqstp->rq_usedeferral = 1;
+ rqstp->rq_usedeferral = true;
  rqstp->rq_dropme = false;
 
  /* Setup reply header */
-- 
1.7.1