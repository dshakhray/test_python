From 6b19ed9ddd4b64f47fde9a8c6dc60bd59edf6a26 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 09:54:27 -0400
Subject: [fs] ext4: add ext4_es_store_pblock_status()

Message-id: <1414058125-4183-114-git-send-email-lczerner@redhat.com>
Patchwork-id: 98206
O-Subject: [RHEL 7.1 PATCH v2 113/171] ext4: add ext4_es_store_pblock_status()
Bugzilla: 1150139
RH-Acked-by: Eric Sandeen <sandeen@redhat.com>

From: Theodore Ts'o <tytso@mit.edu>

BZ 1150139
https://bugzilla.redhat.com/show_bug.cgi?id=1150139

BREW 8142710
https://brewweb.devel.redhat.com/taskinfo?taskID=8142710

Upstream commit 9a6633b1a3603ccdffec669033616f9ebb35a988

 Avoid false positives by static code analysis tools such as sparse and
 coverity caused by the fact that we set the physical block, and then
 the status in the extent_status structure.  It is also more efficient
 to set both of these values at once.

 Addresses-Coverity-Id: #989077
 Addresses-Coverity-Id: #989078
 Addresses-Coverity-Id: #1080722

 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Reviewed-by: Zheng Liu <wenqing.lz@taobao.com>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents_status.c b/fs/ext4/extents_status.c
index 2d1bdbe..d9a61e1 100644
--- a/fs/ext4/extents_status.c
+++ b/fs/ext4/extents_status.c
@@ -658,8 +658,7 @@ int ext4_es_insert_extent(struct inode *inode, ext4_lblk_t lblk,
 
  newes.es_lblk = lblk;
  newes.es_len = len;
- ext4_es_store_pblock(&newes, pblk);
- ext4_es_store_status(&newes, status);
+ ext4_es_store_pblock_status(&newes, pblk, status);
  trace_ext4_es_insert_extent(inode, &newes);
 
  ext4_es_insert_extent_check(inode, &newes);
@@ -699,8 +698,7 @@ void ext4_es_cache_extent(struct inode *inode, ext4_lblk_t lblk,
 
  newes.es_lblk = lblk;
  newes.es_len = len;
- ext4_es_store_pblock(&newes, pblk);
- ext4_es_store_status(&newes, status);
+ ext4_es_store_pblock_status(&newes, pblk, status);
  trace_ext4_es_cache_extent(inode, &newes);
 
  if (!len)
@@ -812,13 +810,13 @@ retry:
 
    newes.es_lblk = end + 1;
    newes.es_len = len2;
+   block = 0x7FDEADBEEF;
    if (ext4_es_is_written(&orig_es) ||
-       ext4_es_is_unwritten(&orig_es)) {
+       ext4_es_is_unwritten(&orig_es))
     block = ext4_es_pblock(&orig_es) +
      orig_es.es_len - len2;
-    ext4_es_store_pblock(&newes, block);
-   }
-   ext4_es_store_status(&newes, ext4_es_status(&orig_es));
+   ext4_es_store_pblock_status(&newes, block,
+          ext4_es_status(&orig_es));
    err = __es_insert_extent(inode, &newes);
    if (err) {
     es->es_lblk = orig_es.es_lblk;
diff --git a/fs/ext4/extents_status.h b/fs/ext4/extents_status.h
index 167f4ab..f1b62a4 100644
--- a/fs/ext4/extents_status.h
+++ b/fs/ext4/extents_status.h
@@ -129,6 +129,15 @@ static inline void ext4_es_store_status(struct extent_status *es,
          (es->es_pblk & ~ES_MASK));
 }
 
+static inline void ext4_es_store_pblock_status(struct extent_status *es,
+            ext4_fsblk_t pb,
+            unsigned int status)
+{
+ es->es_pblk = (((ext4_fsblk_t)
+   (status & EXTENT_STATUS_FLAGS) << ES_SHIFT) |
+         (pb & ~ES_MASK));
+}
+
 extern void ext4_es_register_shrinker(struct ext4_sb_info *sbi);
 extern void ext4_es_unregister_shrinker(struct ext4_sb_info *sbi);
 extern void ext4_es_lru_add(struct inode *inode);
-- 
1.7.1