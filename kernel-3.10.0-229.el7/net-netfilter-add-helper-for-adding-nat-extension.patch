From 3ffc51e22ad024c380216ba14414491f74038acd Mon Sep 17 00:00:00 2001
From: Marcelo Leitner <mleitner@redhat.com>
Date: Tue, 21 Oct 2014 16:17:34 -0400
Subject: [net] netfilter: add helper for adding nat extension

Message-id: <20141021161734.22888.38234.stgit@localhost.localdomain>
Patchwork-id: 97939
O-Subject: [RHEL7 net PATCH 042/124] netfilter: add helper for adding nat extension
Bugzilla: 1148041 1155088
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Backport of upstream commit: f768e5bdefe1ec9adbf7a116dfb156b73cacb582

 commit f768e5bdefe1ec9adbf7a116dfb156b73cacb582
 Author: Florian Westphal <fw@strlen.de>
 Date:   Mon Apr 28 21:09:50 2014 +0200

    netfilter: add helper for adding nat extension

    Reduce copy-past a bit by adding a common helper.

    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/net/netfilter/nf_nat.h b/include/net/netfilter/nf_nat.h
index 07eaaf6..a71dd33 100644
--- a/include/net/netfilter/nf_nat.h
+++ b/include/net/netfilter/nf_nat.h
@@ -48,6 +48,8 @@ unsigned int nf_nat_setup_info(struct nf_conn *ct,
 extern unsigned int nf_nat_alloc_null_binding(struct nf_conn *ct,
            unsigned int hooknum);
 
+struct nf_conn_nat *nf_ct_nat_ext_add(struct nf_conn *ct);
+
 /* Is this tuple already taken? (not by us)*/
 int nf_nat_used_tuple(const struct nf_conntrack_tuple *tuple,
         const struct nf_conn *ignored_conntrack);
diff --git a/net/ipv4/netfilter/iptable_nat.c b/net/ipv4/netfilter/iptable_nat.c
index 97a9676..9eb00a6 100644
--- a/net/ipv4/netfilter/iptable_nat.c
+++ b/net/ipv4/netfilter/iptable_nat.c
@@ -91,17 +91,9 @@ nf_nat_ipv4_fn(const struct nf_hook_ops *ops,
  if (nf_ct_is_untracked(ct))
   return NF_ACCEPT;
 
- nat = nfct_nat(ct);
- if (!nat) {
-  /* NAT module was loaded late. */
-  if (nf_ct_is_confirmed(ct))
-   return NF_ACCEPT;
-  nat = nf_ct_ext_add(ct, NF_CT_EXT_NAT, GFP_ATOMIC);
-  if (nat == NULL) {
-   pr_debug("failed to add NAT extension\n");
-   return NF_ACCEPT;
-  }
- }
+ nat = nf_ct_nat_ext_add(ct);
+ if (nat == NULL)
+  return NF_ACCEPT;
 
  switch (ctinfo) {
  case IP_CT_RELATED:
diff --git a/net/ipv4/netfilter/nft_chain_nat_ipv4.c b/net/ipv4/netfilter/nft_chain_nat_ipv4.c
index b5b256d..3964157 100644
--- a/net/ipv4/netfilter/nft_chain_nat_ipv4.c
+++ b/net/ipv4/netfilter/nft_chain_nat_ipv4.c
@@ -48,15 +48,9 @@ static unsigned int nf_nat_fn(const struct nf_hook_ops *ops,
 
  NF_CT_ASSERT(!(ip_hdr(skb)->frag_off & htons(IP_MF | IP_OFFSET)));
 
- nat = nfct_nat(ct);
- if (nat == NULL) {
-  /* Conntrack module was loaded late, can't add extension. */
-  if (nf_ct_is_confirmed(ct))
-   return NF_ACCEPT;
-  nat = nf_ct_ext_add(ct, NF_CT_EXT_NAT, GFP_ATOMIC);
-  if (nat == NULL)
-   return NF_ACCEPT;
- }
+ nat = nf_ct_nat_ext_add(ct);
+ if (nat == NULL)
+  return NF_ACCEPT;
 
  switch (ctinfo) {
  case IP_CT_RELATED:
diff --git a/net/ipv6/netfilter/ip6table_nat.c b/net/ipv6/netfilter/ip6table_nat.c
index 1be22b9..28018cb 100644
--- a/net/ipv6/netfilter/ip6table_nat.c
+++ b/net/ipv6/netfilter/ip6table_nat.c
@@ -90,17 +90,9 @@ nf_nat_ipv6_fn(const struct nf_hook_ops *ops,
  if (nf_ct_is_untracked(ct))
   return NF_ACCEPT;
 
- nat = nfct_nat(ct);
- if (!nat) {
-  /* NAT module was loaded late. */
-  if (nf_ct_is_confirmed(ct))
-   return NF_ACCEPT;
-  nat = nf_ct_ext_add(ct, NF_CT_EXT_NAT, GFP_ATOMIC);
-  if (nat == NULL) {
-   pr_debug("failed to add NAT extension\n");
-   return NF_ACCEPT;
-  }
- }
+ nat = nf_ct_nat_ext_add(ct);
+ if (nat == NULL)
+  return NF_ACCEPT;
 
  switch (ctinfo) {
  case IP_CT_RELATED:
diff --git a/net/ipv6/netfilter/nft_chain_nat_ipv6.c b/net/ipv6/netfilter/nft_chain_nat_ipv6.c
index 9c3297a..d189fcb 100644
--- a/net/ipv6/netfilter/nft_chain_nat_ipv6.c
+++ b/net/ipv6/netfilter/nft_chain_nat_ipv6.c
@@ -47,15 +47,9 @@ static unsigned int nf_nat_ipv6_fn(const struct nf_hook_ops *ops,
  if (ct == NULL || nf_ct_is_untracked(ct))
   return NF_ACCEPT;
 
- nat = nfct_nat(ct);
- if (nat == NULL) {
-  /* Conntrack module was loaded late, can't add extension. */
-  if (nf_ct_is_confirmed(ct))
-   return NF_ACCEPT;
-  nat = nf_ct_ext_add(ct, NF_CT_EXT_NAT, GFP_ATOMIC);
-  if (nat == NULL)
-   return NF_ACCEPT;
- }
+ nat = nf_ct_nat_ext_add(ct);
+ if (nat == NULL)
+  return NF_ACCEPT;
 
  switch (ctinfo) {
  case IP_CT_RELATED:
diff --git a/net/netfilter/nf_nat_core.c b/net/netfilter/nf_nat_core.c
index 23247a0..a49907b 100644
--- a/net/netfilter/nf_nat_core.c
+++ b/net/netfilter/nf_nat_core.c
@@ -358,6 +358,19 @@ out:
  rcu_read_unlock();
 }
 
+struct nf_conn_nat *nf_ct_nat_ext_add(struct nf_conn *ct)
+{
+ struct nf_conn_nat *nat = nfct_nat(ct);
+ if (nat)
+  return nat;
+
+ if (!nf_ct_is_confirmed(ct))
+  nat = nf_ct_ext_add(ct, NF_CT_EXT_NAT, GFP_ATOMIC);
+
+ return nat;
+}
+EXPORT_SYMBOL_GPL(nf_ct_nat_ext_add);
+
 unsigned int
 nf_nat_setup_info(struct nf_conn *ct,
     const struct nf_nat_range *range,
@@ -368,14 +381,9 @@ nf_nat_setup_info(struct nf_conn *ct,
  struct nf_conn_nat *nat;
 
  /* nat helper or nfctnetlink also setup binding */
- nat = nfct_nat(ct);
- if (!nat) {
-  nat = nf_ct_ext_add(ct, NF_CT_EXT_NAT, GFP_ATOMIC);
-  if (nat == NULL) {
-   pr_debug("failed to add NAT extension\n");
-   return NF_ACCEPT;
-  }
- }
+ nat = nf_ct_nat_ext_add(ct);
+ if (nat == NULL)
+  return NF_ACCEPT;
 
  NF_CT_ASSERT(maniptype == NF_NAT_MANIP_SRC ||
        maniptype == NF_NAT_MANIP_DST);
-- 
1.7.1