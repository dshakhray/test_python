From 42238a58dd2ead21a829d7313885ed4fd056e7f8 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 8 May 2014 14:37:50 -0400
Subject: [misc] mei: revamp read and write length checks

Message-id: <1399559870-6484-1-git-send-email-prarit@redhat.com>
Patchwork-id: 79566
O-Subject: [RHEL7.1 PATCH BZ 1094732 06/76] mei: revamp read and write length checks [v2]
Bugzilla: 1088953
RH-Acked-by: Dean Nelson <dnelson@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1088953

commit dd5de1f165ade430357960459491a067c7e3d21c
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Mon Sep 2 03:11:04 2013 +0300

    mei: revamp read and write length checks

    1. Return zero on zero length read and writes
    2. For a too large write return -EFBIG as defined in man write(2)
    EFBIG  An attempt was made to write a file that
            exceeds the implementation-defined maximum
            file size or the process's file size limit,
            or to  write  at  a  position  past  the  maximum
            allowed offset.

    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

[v2]: fix misapplied patch

Cc: Dean Nelson <dnelson@redhat.com>
Cc: Tony Camuso <tcamuso@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/misc/mei/main.c b/drivers/misc/mei/main.c
index dcdcbf5..b2221a3 100644
--- a/drivers/misc/mei/main.c
+++ b/drivers/misc/mei/main.c
@@ -204,12 +204,18 @@ static ssize_t mei_read(struct file *file, char __user *ubuf,
 
  dev = cl->dev;
 
+
  mutex_lock(&dev->device_lock);
  if (dev->dev_state != MEI_DEV_ENABLED) {
   rets = -ENODEV;
   goto out;
  }
 
+ if (length == 0) {
+  rets = 0;
+  goto out;
+ }
+
  if ((cl->sm_state & MEI_WD_STATE_INDEPENDENCE_MSG_SENT) == 0) {
   /* Do not allow to read watchdog client */
   i = mei_me_cl_by_uuid(dev, &mei_wd_guid);
@@ -360,8 +366,14 @@ static ssize_t mei_write(struct file *file, const char __user *ubuf,
   rets = -ENODEV;
   goto out;
  }
- if (length > dev->me_clients[id].props.max_msg_length || length <= 0) {
-  rets = -EMSGSIZE;
+
+ if (length == 0) {
+  rets = 0;
+  goto out;
+ }
+
+ if (length > dev->me_clients[id].props.max_msg_length) {
+  rets = -EFBIG;
   goto out;
  }
 
-- 
1.7.1