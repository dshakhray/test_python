From 577d87d1f63e499ec47409e677f2342c0bcb60b6 Mon Sep 17 00:00:00 2001
From: Don Zickus <dzickus@redhat.com>
Date: Fri, 12 Sep 2014 18:08:51 -0400
Subject: [powerpc] powernv: Fix indirect XSCOM unmangling

Message-id: <1410545655-205645-303-git-send-email-dzickus@redhat.com>
Patchwork-id: 94667
O-Subject: [RHEL7 PATCH 302/626] powerpc/powernv: Fix indirect XSCOM unmangling
Bugzilla: 1127366
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: David Gibson <dgibson@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=1127366

commit e0cf957614976896111e676e5134ac98ee227d3d
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Fri Feb 28 16:20:38 2014 +1100

    powerpc/powernv: Fix indirect XSCOM unmangling

    We need to unmangle the full address, not just the register
    number, and we also need to support the real indirect bit
    being set for in-kernel uses.

    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    CC: <stable@vger.kernel.org> [v3.13]
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/platforms/powernv/opal-xscom.c b/arch/powerpc/platforms/powernv/opal-xscom.c
index 4fbf276..4cd2ea6 100644
--- a/arch/powerpc/platforms/powernv/opal-xscom.c
+++ b/arch/powerpc/platforms/powernv/opal-xscom.c
@@ -71,11 +71,11 @@ static int opal_xscom_err_xlate(int64_t rc)
  }
 }
 
-static u64 opal_scom_unmangle(u64 reg)
+static u64 opal_scom_unmangle(u64 addr)
 {
  /*
   * XSCOM indirect addresses have the top bit set. Additionally
-  * the reset of the top 3 nibbles is always 0.
+  * the rest of the top 3 nibbles is always 0.
   *
   * Because the debugfs interface uses signed offsets and shifts
   * the address left by 3, we basically cannot use the top 4 bits
@@ -86,10 +86,13 @@ static u64 opal_scom_unmangle(u64 reg)
   * conversion here. To leave room for further xscom address
   * expansion, we only clear out the top byte
   *
+  * For in-kernel use, we also support the real indirect bit, so
+  * we test for any of the top 5 bits
+  *
   */
- if (reg & (1ull << 59))
-  reg = (reg & ~(0xffull << 56)) | (1ull << 63);
- return reg;
+ if (addr & (0x1full << 59))
+  addr = (addr & ~(0xffull << 56)) | (1ull << 63);
+ return addr;
 }
 
 static int opal_scom_read(scom_map_t map, u64 reg, u64 *value)
@@ -98,8 +101,8 @@ static int opal_scom_read(scom_map_t map, u64 reg, u64 *value)
  int64_t rc;
  __be64 v;
 
- reg = opal_scom_unmangle(reg);
- rc = opal_xscom_read(m->chip, m->addr + reg, (__be64 *)__pa(&v));
+ reg = opal_scom_unmangle(m->addr + reg);
+ rc = opal_xscom_read(m->chip, reg, (__be64 *)__pa(&v));
  *value = be64_to_cpu(v);
  return opal_xscom_err_xlate(rc);
 }
@@ -109,8 +112,8 @@ static int opal_scom_write(scom_map_t map, u64 reg, u64 value)
  struct opal_scom_map *m = map;
  int64_t rc;
 
- reg = opal_scom_unmangle(reg);
- rc = opal_xscom_write(m->chip, m->addr + reg, value);
+ reg = opal_scom_unmangle(m->addr + reg);
+ rc = opal_xscom_write(m->chip, reg, value);
  return opal_xscom_err_xlate(rc);
 }
 
-- 
1.7.1