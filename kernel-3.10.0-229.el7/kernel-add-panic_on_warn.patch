From 0a8fec444489bc9c548571dfe2d37d1e847a04f1 Mon Sep 17 00:00:00 2001
From: Prarit Bhargava <prarit@redhat.com>
Date: Thu, 13 Nov 2014 16:46:27 -0500
Subject: [kernel] add panic_on_warn

Message-id: <1415897187-19768-1-git-send-email-prarit@redhat.com>
Patchwork-id: 99954
O-Subject: [RHEL7.1 PATCH BZ 1163852] kernel, add panic_on_warn
Bugzilla: 1163852
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Rafael Aquini <aquini@redhat.com>
RH-Acked-by: Rik van Riel <riel@redhat.com>

admittedly, this is a bit late.  there was a lot of bikshedding on this patch
upstream.  andrew has carried versions of it since it was originally posted.
there are huge benefits in debugging with this patch.  we will no longer have
to rebuild and release kernels for WARN() to BUG() conversions.

P.
-----8<----

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1163852
Upstream status: accepted into Andrew Morton's tree
Build info:
Date: Thu Nov 13 11:39:29 EST 2014
Build OS: Red Hat Enterprise Linux Server release 7.1 Beta (Maipo)
System name: intel-canoepass-05.lab.bos.redhat.com with -j24
Built on: kernel-3.10.0-201.el7
Arch built: ppc64 s390x x86_64

    kernel, add panic_on_warn

    There have been several times where I have had to rebuild a kernel to
    cause a panic when hitting a WARN() in the code in order to get a crash
    dump from a system.  Sometimes this is easy to do, other times (such as
    in the case of a remote admin) it is not trivial to send new images to the
    user.

    A much easier method would be a switch to change the WARN() over to a
    panic.  This makes debugging easier in that I can now test the actual
    image the WARN() was seen on and I do not have to engage in remote
    debugging.

    This patch adds a panic_on_warn kernel parameter and
    /proc/sys/kernel/panic_on_warn calls panic() in the warn_slowpath_common()
    path.  The function will still print out the location of the warning.

    An example of the panic_on_warn output:

    The first line below is from the WARN_ON() to output the WARN_ON()'s location.
    After that the panic() output is displayed.

    WARNING: CPU: 30 PID: 11698 at /home/prarit/dummy_module/dummy-module.c:25 init_dummy+0x1f/0x30 [dummy_module]()
    Kernel panic - not syncing: panic_on_warn set ...

    CPU: 30 PID: 11698 Comm: insmod Tainted: G        W  OE  3.17.0+ #57
    Hardware name: Intel Corporation S2600CP/S2600CP, BIOS RMLSDP.86I.00.29.D696.1311111329 11/11/2013
     0000000000000000 000000008e3f87df ffff88080f093c38 ffffffff81665190
     0000000000000000 ffffffff818aea3d ffff88080f093cb8 ffffffff8165e2ec
     ffffffff00000008 ffff88080f093cc8 ffff88080f093c68 000000008e3f87df
    Call Trace:
     [<ffffffff81665190>] dump_stack+0x46/0x58
     [<ffffffff8165e2ec>] panic+0xd0/0x204
     [<ffffffffa038e05f>] ? init_dummy+0x1f/0x30 [dummy_module]
     [<ffffffff81076b90>] warn_slowpath_common+0xd0/0xd0
     [<ffffffffa038e040>] ? dummy_greetings+0x40/0x40 [dummy_module]
     [<ffffffff81076c8a>] warn_slowpath_null+0x1a/0x20
     [<ffffffffa038e05f>] init_dummy+0x1f/0x30 [dummy_module]
     [<ffffffff81002144>] do_one_initcall+0xd4/0x210
     [<ffffffff811b52c2>] ? __vunmap+0xc2/0x110
     [<ffffffff810f8889>] load_module+0x16a9/0x1b30
     [<ffffffff810f3d30>] ? store_uevent+0x70/0x70
     [<ffffffff810f49b9>] ? copy_module_from_fd.isra.44+0x129/0x180
     [<ffffffff810f8ec6>] SyS_finit_module+0xa6/0xd0
     [<ffffffff8166cf29>] system_call_fastpath+0x12/0x17

    Successfully tested by me.

    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
    Cc: Fabian Frederick <fabf@skynet.be>
    Cc: vgoyal@redhat.com
    Cc: isimatu.yasuaki@jp.fujitsu.com
    Cc: jbaron@akamai.com
    Cc: linux-doc@vger.kernel.org
    Cc: kexec@lists.infradead.org
    Cc: linux-api@vger.kernel.org
    Signed-off-by: Prarit Bhargava <prarit@redhat.com>

    [v2]: add /proc/sys/kernel/panic_on_warn, additional documentation, modify
          !slowpath cases
    [v3]: use proc_dointvec_minmax() in sysctl handler
    [v4]: remove !slowpath cases, and add __read_mostly
    [v5]: change to panic_on_warn, re-alphabetize Documentation/sysctl/kernel.txt
    [v6]: disable on kdump kernel to avoid bogus panicks.
    [v7]: swithch to core param, and remove change from v6
    [v8]: remove include file
    [v9]: restore cut line, and fix panic_on_warn comment

Cc: Tony Camuso <tcamuso@redhat.com>
Cc: Rik van Riel <riel@redhat.com>
Cc: Daniel Borkmann <dborkman@redhat.com>
Cc: Hannes Frederic Sowa <hannes@redhat.com>
Cc: Steve Best <sbest@redhat.com>
Cc: Rafael Aquini <aquini@redhat.com>
Cc: Larry Woodman <lwoodman@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/Documentation/kdump/kdump.txt b/Documentation/kdump/kdump.txt
index 321ee57..967b207 100644
--- a/Documentation/kdump/kdump.txt
+++ b/Documentation/kdump/kdump.txt
@@ -463,6 +463,13 @@ To see the entire memory, use the following command:
 
    dd if=/dev/oldmem of=oldmem.001
 
+Trigger Kdump on WARN()
+=======================
+
+The kernel parameter, panic_on_warn, calls panic() in all WARN() paths.  This
+will cause a kdump to occur at the panic() call.  In cases where a user wants
+to specify this during runtime, /proc/sys/kernel/panic_on_warn can be set to 1
+to achieve the same behaviour.
 
 Analysis
 ========
diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 5436696..ce43fea 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -2221,6 +2221,9 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
    timeout < 0: reboot immediately
    Format: <timeout>
 
+ panic_on_warn panic() instead of WARN().  Useful to cause kdump
+   on a WARN().
+
  parkbd.port= [HW] Parallel port number the keyboard adapter is
    connected to, default is 0.
    Format: <parport#>
diff --git a/Documentation/sysctl/kernel.txt b/Documentation/sysctl/kernel.txt
index c721ab3..ec0ca33 100644
--- a/Documentation/sysctl/kernel.txt
+++ b/Documentation/sysctl/kernel.txt
@@ -50,8 +50,9 @@ show up in /proc/sys/kernel:
 - overflowuid
 - panic
 - panic_on_oops
-- panic_on_unrecovered_nmi
 - panic_on_stackoverflow
+- panic_on_unrecovered_nmi
+- panic_on_warn
 - pid_max
 - powersave-nap               [ PPC only ]
 - printk
@@ -483,19 +484,6 @@ the recommended setting is 60.
 
 ==============================================================
 
-panic_on_unrecovered_nmi:
-
-The default Linux behaviour on an NMI of either memory or unknown is
-to continue operation. For many environments such as scientific
-computing it is preferable that the box is taken out and the error
-dealt with than an uncorrected parity/ECC error get propagated.
-
-A small number of systems do generate NMI's for bizarre random reasons
-such as power management so the default is off. That sysctl works like
-the existing panic controls already in that directory.
-
-==============================================================
-
 panic_on_oops:
 
 Controls the kernel's behaviour when an oops or BUG is encountered.
@@ -519,6 +507,30 @@ This file shows up if CONFIG_DEBUG_STACKOVERFLOW is enabled.
 
 ==============================================================
 
+panic_on_unrecovered_nmi:
+
+The default Linux behaviour on an NMI of either memory or unknown is
+to continue operation. For many environments such as scientific
+computing it is preferable that the box is taken out and the error
+dealt with than an uncorrected parity/ECC error get propagated.
+
+A small number of systems do generate NMI's for bizarre random reasons
+such as power management so the default is off. That sysctl works like
+the existing panic controls already in that directory.
+
+==============================================================
+
+panic_on_warn:
+
+Calls panic() in the WARN() path when set to 1.  This is useful to avoid
+a kernel rebuild when attempting to kdump at the location of a WARN().
+
+0: only WARN(), default behaviour.
+
+1: call panic() after printing out WARN() location.
+
+==============================================================
+
 perf_cpu_time_max_percent:
 
 Hints to the kernel how much CPU time it should be allowed to
diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index f441424..6970143 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -424,6 +424,7 @@ extern int panic_timeout;
 extern int panic_on_oops;
 extern int panic_on_unrecovered_nmi;
 extern int panic_on_io_nmi;
+extern int panic_on_warn;
 extern int sysctl_panic_on_stackoverflow;
 /*
  * Only to be used by arch init code. If the user over-wrote the default
diff --git a/include/uapi/linux/sysctl.h b/include/uapi/linux/sysctl.h
index 6d67213..e443695 100644
--- a/include/uapi/linux/sysctl.h
+++ b/include/uapi/linux/sysctl.h
@@ -153,6 +153,7 @@ enum
  KERN_MAX_LOCK_DEPTH=74, /* int: rtmutex's maximum lock depth */
  KERN_NMI_WATCHDOG=75, /* int: enable/disable nmi watchdog */
  KERN_PANIC_ON_NMI=76, /* int: whether we will panic on an unrecovered */
+ KERN_PANIC_ON_WARN=77, /* int: call panic() in WARN() functions */
 };
 
 
diff --git a/kernel/panic.c b/kernel/panic.c
index f4058fc..68447f7 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -31,6 +31,7 @@ static unsigned long tainted_mask;
 static int pause_on_oops;
 static int pause_on_oops_flag;
 static DEFINE_SPINLOCK(pause_on_oops_lock);
+int panic_on_warn __read_mostly;
 
 int panic_timeout = CONFIG_PANIC_TIMEOUT;
 EXPORT_SYMBOL_GPL(panic_timeout);
@@ -422,6 +423,17 @@ static void warn_slowpath_common(const char *file, int line, void *caller,
  if (args)
   vprintk(args->fmt, args->args);
 
+ if (panic_on_warn) {
+  /*
+   * This thread may hit another WARN() in the panic path.
+   * Resetting this prevents additional WARN() from panicking the
+   * system on this thread.  Other threads are blocked by the
+   * panic_mutex in panic().
+   */
+  panic_on_warn = 0;
+  panic("panic_on_warn set ...\n");
+ }
+
  print_modules();
  dump_stack();
  print_oops_end_marker();
@@ -479,6 +491,7 @@ EXPORT_SYMBOL(__stack_chk_fail);
 
 core_param(panic, panic_timeout, int, 0644);
 core_param(pause_on_oops, pause_on_oops, int, 0644);
+core_param(panic_on_warn, panic_on_warn, int, 0644);
 
 static int __init oops_setup(char *s)
 {
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index ecb6d07..39d965a 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -1093,6 +1093,15 @@ static struct ctl_table kern_table[] = {
   .proc_handler = proc_dointvec,
  },
 #endif
+ {
+  .procname = "panic_on_warn",
+  .data  = &panic_on_warn,
+  .maxlen  = sizeof(int),
+  .mode  = 0644,
+  .proc_handler = proc_dointvec_minmax,
+  .extra1  = &zero,
+  .extra2  = &one,
+ },
  { }
 };
 
diff --git a/kernel/sysctl_binary.c b/kernel/sysctl_binary.c
index aea4a9e..6afab87 100644
--- a/kernel/sysctl_binary.c
+++ b/kernel/sysctl_binary.c
@@ -138,6 +138,7 @@ static const struct bin_table bin_kern_table[] = {
  { CTL_INT, KERN_COMPAT_LOG,  "compat-log" },
  { CTL_INT, KERN_MAX_LOCK_DEPTH,  "max_lock_depth" },
  { CTL_INT, KERN_PANIC_ON_NMI,  "panic_on_unrecovered_nmi" },
+ { CTL_INT, KERN_PANIC_ON_WARN,  "panic_on_warn" },
  {}
 };
 
-- 
1.7.1