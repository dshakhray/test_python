From aed88c38bd4f94ef999343a8c856653b587fdcc5 Mon Sep 17 00:00:00 2001
From: Jiri Olsa <jolsa@redhat.com>
Date: Mon, 8 Sep 2014 13:08:32 -0400
Subject: [tools] perf: Move elide bool into perf_hpp_fmt struct

Message-id: <1410181752-25631-268-git-send-email-jolsa@redhat.com>
Patchwork-id: 91978
O-Subject: [PATCH RHEL7.1 BZ1134356 267/307] perf tools: Move elide bool into perf_hpp_fmt struct
Bugzilla: 1134356
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

From: Jiri Olsa <jolsa@kernel.org>

Bugzilla: 1134356
https://bugzilla.redhat.com/show_bug.cgi?id=1134356

upstream
========
commit f29984226978313039d7dfe9b45eaa55a3aad03d
Author: Jiri Olsa <jolsa@kernel.org>
Date: Fri May 23 17:15:47 2014 +0200

description
===========
After output/sort fields refactoring, it's expensive
to check the elide bool in its current location inside
the 'struct sort_entry'.

The perf_hpp__should_skip function gets highly noticable in
workloads with high number of output/sort fields, like for:

  $ perf report -i perf-test.data -F overhead,sample,period,comm,pid,dso,symbol,cpu --stdio

Performance report:
   9.70%  perf  [.] perf_hpp__should_skip

Moving the elide bool into the 'struct perf_hpp_fmt', which
makes the perf_hpp__should_skip just single struct read.

Got speedup of around 22% for my test perf.data workload.
The change should not harm any other workload types.

Performance counter stats for (10 runs):
  before:
   358,319,732,626      cycles                    ( +-  0.55% )
   467,129,581,515      instructions              #    1.30  insns per cycle          ( +-  0.00% )

     150.943975206 seconds time elapsed           ( +-  0.62% )

  now:
   278,785,972,990      cycles                    ( +-  0.12% )
   370,146,797,640      instructions              #    1.33  insns per cycle          ( +-  0.00% )

     116.416670507 seconds time elapsed           ( +-  0.31% )
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/tools/perf/ui/browsers/hists.c b/tools/perf/ui/browsers/hists.c
index 5905acd..52c03fb 100644
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@ -1706,14 +1706,14 @@ zoom_dso:
 zoom_out_dso:
     ui_helpline__pop();
     browser->hists->dso_filter = NULL;
-    sort_dso.elide = false;
+    perf_hpp__set_elide(HISTC_DSO, false);
    } else {
     if (dso == NULL)
      continue;
     ui_helpline__fpush("To zoom out press <- or -> + \"Zoom out of %s DSO\"",
          dso->kernel ? "the Kernel" : dso->short_name);
     browser->hists->dso_filter = dso;
-    sort_dso.elide = true;
+    perf_hpp__set_elide(HISTC_DSO, true);
     pstack__push(fstack, &browser->hists->dso_filter);
    }
    hists__filter_by_dso(hists);
@@ -1725,13 +1725,13 @@ zoom_thread:
 zoom_out_thread:
     ui_helpline__pop();
     browser->hists->thread_filter = NULL;
-    sort_thread.elide = false;
+    perf_hpp__set_elide(HISTC_THREAD, false);
    } else {
     ui_helpline__fpush("To zoom out press <- or -> + \"Zoom out of %s(%d) thread\"",
          thread->comm_set ? thread__comm_str(thread) : "",
          thread->tid);
     browser->hists->thread_filter = thread;
-    sort_thread.elide = true;
+    perf_hpp__set_elide(HISTC_THREAD, false);
     pstack__push(fstack, &browser->hists->thread_filter);
    }
    hists__filter_by_thread(hists);
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index 82b28ff..d2bf035 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -205,6 +205,7 @@ struct perf_hpp_fmt {
 
  struct list_head list;
  struct list_head sort_list;
+ bool elide;
 };
 
 extern struct list_head perf_hpp__list;
@@ -252,7 +253,12 @@ void perf_hpp__append_sort_keys(void);
 
 bool perf_hpp__is_sort_entry(struct perf_hpp_fmt *format);
 bool perf_hpp__same_sort_entry(struct perf_hpp_fmt *a, struct perf_hpp_fmt *b);
-bool perf_hpp__should_skip(struct perf_hpp_fmt *format);
+
+static inline bool perf_hpp__should_skip(struct perf_hpp_fmt *format)
+{
+ return format->elide;
+}
+
 void perf_hpp__reset_width(struct perf_hpp_fmt *fmt, struct hists *hists);
 
 typedef u64 (*hpp_field_fn)(struct hist_entry *he);
diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index 2aba620..45512ba 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -1157,6 +1157,7 @@ __sort_dimension__alloc_hpp(struct sort_dimension *sd)
 
  INIT_LIST_HEAD(&hse->hpp.list);
  INIT_LIST_HEAD(&hse->hpp.sort_list);
+ hse->hpp.elide = false;
 
  return hse;
 }
@@ -1364,27 +1365,64 @@ static int __setup_sorting(void)
  return ret;
 }
 
-bool perf_hpp__should_skip(struct perf_hpp_fmt *format)
+void perf_hpp__set_elide(int idx, bool elide)
 {
- if (perf_hpp__is_sort_entry(format)) {
-  struct hpp_sort_entry *hse;
+ struct perf_hpp_fmt *fmt;
+ struct hpp_sort_entry *hse;
 
-  hse = container_of(format, struct hpp_sort_entry, hpp);
-  return hse->se->elide;
+ perf_hpp__for_each_format(fmt) {
+  if (!perf_hpp__is_sort_entry(fmt))
+   continue;
+
+  hse = container_of(fmt, struct hpp_sort_entry, hpp);
+  if (hse->se->se_width_idx == idx) {
+   fmt->elide = elide;
+   break;
+  }
  }
- return false;
 }
 
-static void sort_entry__setup_elide(struct sort_entry *se,
-        struct strlist *list,
-        const char *list_name, FILE *fp)
+static bool __get_elide(struct strlist *list, const char *list_name, FILE *fp)
 {
  if (list && strlist__nr_entries(list) == 1) {
   if (fp != NULL)
    fprintf(fp, "# %s: %s\n", list_name,
     strlist__entry(list, 0)->s);
-  se->elide = true;
+  return true;
+ }
+ return false;
+}
+
+static bool get_elide(int idx, FILE *output)
+{
+ switch (idx) {
+ case HISTC_SYMBOL:
+  return __get_elide(symbol_conf.sym_list, "symbol", output);
+ case HISTC_DSO:
+  return __get_elide(symbol_conf.dso_list, "dso", output);
+ case HISTC_COMM:
+  return __get_elide(symbol_conf.comm_list, "comm", output);
+ default:
+  break;
  }
+
+ if (sort__mode != SORT_MODE__BRANCH)
+  return false;
+
+ switch (idx) {
+ case HISTC_SYMBOL_FROM:
+  return __get_elide(symbol_conf.sym_from_list, "sym_from", output);
+ case HISTC_SYMBOL_TO:
+  return __get_elide(symbol_conf.sym_to_list, "sym_to", output);
+ case HISTC_DSO_FROM:
+  return __get_elide(symbol_conf.dso_from_list, "dso_from", output);
+ case HISTC_DSO_TO:
+  return __get_elide(symbol_conf.dso_to_list, "dso_to", output);
+ default:
+  break;
+ }
+
+ return false;
 }
 
 void sort__setup_elide(FILE *output)
@@ -1392,26 +1430,12 @@ void sort__setup_elide(FILE *output)
  struct perf_hpp_fmt *fmt;
  struct hpp_sort_entry *hse;
 
- sort_entry__setup_elide(&sort_dso, symbol_conf.dso_list,
-    "dso", output);
- sort_entry__setup_elide(&sort_comm, symbol_conf.comm_list,
-    "comm", output);
- sort_entry__setup_elide(&sort_sym, symbol_conf.sym_list,
-    "symbol", output);
-
- if (sort__mode == SORT_MODE__BRANCH) {
-  sort_entry__setup_elide(&sort_dso_from,
-     symbol_conf.dso_from_list,
-     "dso_from", output);
-  sort_entry__setup_elide(&sort_dso_to,
-     symbol_conf.dso_to_list,
-     "dso_to", output);
-  sort_entry__setup_elide(&sort_sym_from,
-     symbol_conf.sym_from_list,
-     "sym_from", output);
-  sort_entry__setup_elide(&sort_sym_to,
-     symbol_conf.sym_to_list,
-     "sym_to", output);
+ perf_hpp__for_each_format(fmt) {
+  if (!perf_hpp__is_sort_entry(fmt))
+   continue;
+
+  hse = container_of(fmt, struct hpp_sort_entry, hpp);
+  fmt->elide = get_elide(hse->se->se_width_idx, output);
  }
 
  /*
@@ -1422,8 +1446,7 @@ void sort__setup_elide(FILE *output)
   if (!perf_hpp__is_sort_entry(fmt))
    continue;
 
-  hse = container_of(fmt, struct hpp_sort_entry, hpp);
-  if (!hse->se->elide)
+  if (!fmt->elide)
    return;
  }
 
@@ -1431,8 +1454,7 @@ void sort__setup_elide(FILE *output)
   if (!perf_hpp__is_sort_entry(fmt))
    continue;
 
-  hse = container_of(fmt, struct hpp_sort_entry, hpp);
-  hse->se->elide = false;
+  fmt->elide = false;
  }
 }
 
diff --git a/tools/perf/util/sort.h b/tools/perf/util/sort.h
index 426b873..5bf0098 100644
--- a/tools/perf/util/sort.h
+++ b/tools/perf/util/sort.h
@@ -202,7 +202,6 @@ struct sort_entry {
  int (*se_snprintf)(struct hist_entry *he, char *bf, size_t size,
           unsigned int width);
  u8 se_width_idx;
- bool elide;
 };
 
 extern struct sort_entry sort_thread;
@@ -213,6 +212,7 @@ int setup_output_field(void);
 void reset_output_field(void);
 extern int sort_dimension__add(const char *);
 void sort__setup_elide(FILE *fp);
+void perf_hpp__set_elide(int idx, bool elide);
 
 int report_parse_ignore_callees_opt(const struct option *opt, const char *arg, int unset);
 
-- 
1.7.1