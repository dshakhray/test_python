From 4ed43d26280897cc7c8b8f4dfed4022aac21b314 Mon Sep 17 00:00:00 2001
From: Gustavo Duarte <gduarte@redhat.com>
Date: Tue, 16 Dec 2014 15:09:59 -0500
Subject: [powerpc] perf/hv-24x7: use kmem_cache instead of aligned stack allocations

Message-id: <1418742601-6870-3-git-send-email-gduarte@redhat.com>
Patchwork-id: 102099
O-Subject: [RHEL7.1 PATCH BZ 1171795 2/4] powerpc/perf/hv-24x7: use kmem_cache instead of aligned stack allocations
Bugzilla: 1171795
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>

BZ 1171795
Upstream Status: 48bee8a6c98e34367fa9d5e1be14109c92cbbb3b

commit 48bee8a6c98e34367fa9d5e1be14109c92cbbb3b
Author: Cody P Schafer <dev@codyps.com>
Date:   Tue Sep 30 23:03:17 2014 -0700

    powerpc/perf/hv-24x7: use kmem_cache instead of aligned stack allocations

    Ian pointed out the use of __aligned(4096) caused rather large stack
    consumption in single_24x7_request(), so use the kmem_cache
    hv_page_cache (which we've already got set up for other allocations)
    insead of allocating locally.

    CC: Haren Myneni <hbabu@us.ibm.com>
    Reported-by: Ian Munsie <imunsie@au1.ibm.com>
    Signed-off-by: Cody P Schafer <dev@codyps.com>
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/powerpc/perf/hv-24x7.c b/arch/powerpc/perf/hv-24x7.c
index 0f948f2..f7d0368 100644
--- a/arch/powerpc/perf/hv-24x7.c
+++ b/arch/powerpc/perf/hv-24x7.c
@@ -221,7 +221,7 @@ static unsigned long single_24x7_request(u8 domain, u32 offset, u16 ix,
       u16 lpar, u64 *res,
       bool success_expected)
 {
- unsigned long ret;
+ unsigned long ret = -ENOMEM;
 
  /*
   * request_buffer and result_buffer are not required to be 4k aligned,
@@ -231,7 +231,27 @@ static unsigned long single_24x7_request(u8 domain, u32 offset, u16 ix,
  struct reqb {
   struct hv_24x7_request_buffer buf;
   struct hv_24x7_request req;
- } __packed __aligned(4096) request_buffer = {
+ } __packed *request_buffer;
+
+ struct {
+  struct hv_24x7_data_result_buffer buf;
+  struct hv_24x7_result res;
+  struct hv_24x7_result_element elem;
+  __be64 result;
+ } __packed *result_buffer;
+
+ BUILD_BUG_ON(sizeof(*request_buffer) > 4096);
+ BUILD_BUG_ON(sizeof(*result_buffer) > 4096);
+
+ request_buffer = kmem_cache_zalloc(hv_page_cache, GFP_USER);
+ if (!request_buffer)
+  goto out;
+
+ result_buffer = kmem_cache_zalloc(hv_page_cache, GFP_USER);
+ if (!result_buffer)
+  goto out_free_request_buffer;
+
+ *request_buffer = (struct reqb) {
   .buf = {
    .interface_version = HV_24X7_IF_VERSION_CURRENT,
    .num_requests = 1,
@@ -247,28 +267,27 @@ static unsigned long single_24x7_request(u8 domain, u32 offset, u16 ix,
   }
  };
 
- struct resb {
-  struct hv_24x7_data_result_buffer buf;
-  struct hv_24x7_result res;
-  struct hv_24x7_result_element elem;
-  __be64 result;
- } __packed __aligned(4096) result_buffer = {};
-
  ret = plpar_hcall_norets(H_GET_24X7_DATA,
-   virt_to_phys(&request_buffer), sizeof(request_buffer),
-   virt_to_phys(&result_buffer),  sizeof(result_buffer));
+   virt_to_phys(request_buffer), sizeof(*request_buffer),
+   virt_to_phys(result_buffer),  sizeof(*result_buffer));
 
  if (ret) {
   if (success_expected)
-   pr_err_ratelimited("hcall failed: %d %#x %#x %d => 0x%lx (%ld) detail=0x%x failing ix=%x\n",
-     domain, offset, ix, lpar,
-     ret, ret,
-     result_buffer.buf.detailed_rc,
-     result_buffer.buf.failing_request_ix);
-  return ret;
+   pr_err_ratelimited("hcall failed: %d %#x %#x %d => "
+    "0x%lx (%ld) detail=0x%x failing ix=%x\n",
+    domain, offset, ix, lpar, ret, ret,
+    result_buffer->buf.detailed_rc,
+    result_buffer->buf.failing_request_ix);
+  goto out_free_result_buffer;
  }
 
- *res = be64_to_cpu(result_buffer.result);
+ *res = be64_to_cpu(result_buffer->result);
+
+out_free_result_buffer:
+ kfree(result_buffer);
+out_free_request_buffer:
+ kfree(request_buffer);
+out:
  return ret;
 }
 
-- 
1.7.1