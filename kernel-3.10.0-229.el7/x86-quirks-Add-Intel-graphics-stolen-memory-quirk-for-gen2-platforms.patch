From dc31546c00ca5896c553834550762512eb54a7ee Mon Sep 17 00:00:00 2001
From: Rob Clark <rclark@redhat.com>
Date: Mon, 27 Oct 2014 18:36:36 -0400
Subject: [x86] quirks: Add Intel graphics stolen memory quirk for gen2 platforms

Message-id: <1414434997-7515-6-git-send-email-rclark@redhat.com>
Patchwork-id: 98477
O-Subject: [RHEL7 drm 5/6] x86/gpu: Add Intel graphics stolen memory quirk for gen2 platforms
Bugzilla: 1154053
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Dave Airlie <airlied@redhat.com>

RHBZ: 1154053
Upstream: a4dff76924fe4f6d53a9f34196a67a32149e7270

commit a4dff76924fe4f6d53a9f34196a67a32149e7270
Author:     Ville Syrjala <ville.syrjala@linux.intel.com>
AuthorDate: Wed Feb 5 21:28:59 2014 +0200
Commit:     Ingo Molnar <mingo@kernel.org>
CommitDate: Sun Feb 9 15:11:30 2014 +0100

    x86/gpu: Add Intel graphics stolen memory quirk for gen2 platforms

    There isn't an explicit stolen memory base register on gen2.
    Some old comment in the i915 code suggests we should get it via
    max_low_pfn_mapped, but that's clearly a bad idea on my MGM.

    The e820 map in said machine looks like this:

        BIOS-e820: [mem 0x0000000000000000-0x000000000009f7ff] usable
        BIOS-e820: [mem 0x000000000009f800-0x000000000009ffff] reserved
        BIOS-e820: [mem 0x00000000000ce000-0x00000000000cffff] reserved
        BIOS-e820: [mem 0x00000000000dc000-0x00000000000fffff] reserved
        BIOS-e820: [mem 0x0000000000100000-0x000000001f6effff] usable
        BIOS-e820: [mem 0x000000001f6f0000-0x000000001f6f7fff] ACPI data
        BIOS-e820: [mem 0x000000001f6f8000-0x000000001f6fffff] ACPI NVS
        BIOS-e820: [mem 0x000000001f700000-0x000000001fffffff] reserved
        BIOS-e820: [mem 0x00000000fec10000-0x00000000fec1ffff] reserved
        BIOS-e820: [mem 0x00000000ffb00000-0x00000000ffbfffff] reserved
        BIOS-e820: [mem 0x00000000fff00000-0x00000000ffffffff] reserved

    That makes max_low_pfn_mapped = 1f6f0000, so assuming our stolen
    memory would start there would place it on top of some ACPI
    memory regions. So not a good idea as already stated.

    The 9MB region after the ACPI regions at 0x1f700000 however
    looks promising given that the macine reports the stolen memory
    size to be 8MB. Looking at the PGTBL_CTL register, the GTT
    entries are at offset 0x1fee00000, and given that the GTT
    entries occupy 128KB, it looks like the stolen memory could
    start at 0x1f700000 and the GTT entries would occupy the last
    128KB of the stolen memory.

    After some more digging through chipset documentation, I've
    determined the BIOS first allocates space for something called
    TSEG (something to do with SMM) from the top of memory, and then
    it allocates the graphics stolen memory below that. Accordind to
    the chipset documentation TSEG has a fixed size of 1MB on 855.
    So that explains the top 1MB in the e820 region. And it also
    confirms that the GTT entries are in fact at the end of the the
    stolen memory region.
    Derive the stolen memory base address on gen2 the same as the
    BIOS does (TOM-TSEG_SIZE-stolen_size). There are a few
    differences between the registers on various gen2 chipsets, so a
    few different codepaths are required.

    865G is again bit more special since it seems to support enough
    memory to hit 4GB address space issues. This means the PCI
    allocations will also affect the location of the stolen memory.
    Fortunately there appears to be the TOUD register which may give
    us the correct answer directly. But the chipset docs are a bit
    unclear, so I'm not 100% sure that the graphics stolen memory is
    always the last thing the BIOS steals. Someone would need to
    verify it on a real system.

    I tested this on the my 830 and 855 machines, and so far
    everything looks peachy.

    Signed-off-by: Ville Syrjala <ville.syrjala@linux.intel.com>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Link: http://lkml.kernel.org/r/1391628540-23072-3-git-send-email-ville.syrjala@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

Signed-off-by: Rob Clark <rclark@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/kernel/early-quirks.c b/arch/x86/kernel/early-quirks.c
index fddd4d0..5218dd2 100644
--- a/arch/x86/kernel/early-quirks.c
+++ b/arch/x86/kernel/early-quirks.c
@@ -247,6 +247,114 @@ static u32 __init intel_stolen_base(int num, int slot, int func, size_t stolen_s
 #define MB(x) (KB (KB (x)))
 #define GB(x) (MB (KB (x)))
 
+static size_t __init i830_tseg_size(void)
+{
+ u8 tmp = read_pci_config_byte(0, 0, 0, I830_ESMRAMC);
+
+ if (!(tmp & TSEG_ENABLE))
+  return 0;
+
+ if (tmp & I830_TSEG_SIZE_1M)
+  return MB(1);
+ else
+  return KB(512);
+}
+
+static size_t __init i845_tseg_size(void)
+{
+ u8 tmp = read_pci_config_byte(0, 0, 0, I845_ESMRAMC);
+
+ if (!(tmp & TSEG_ENABLE))
+  return 0;
+
+ switch (tmp & I845_TSEG_SIZE_MASK) {
+ case I845_TSEG_SIZE_512K:
+  return KB(512);
+ case I845_TSEG_SIZE_1M:
+  return MB(1);
+ default:
+  WARN_ON(1);
+  return 0;
+ }
+}
+
+static size_t __init i85x_tseg_size(void)
+{
+ u8 tmp = read_pci_config_byte(0, 0, 0, I85X_ESMRAMC);
+
+ if (!(tmp & TSEG_ENABLE))
+  return 0;
+
+ return MB(1);
+}
+
+static size_t __init i830_mem_size(void)
+{
+ return read_pci_config_byte(0, 0, 0, I830_DRB3) * MB(32);
+}
+
+static size_t __init i85x_mem_size(void)
+{
+ return read_pci_config_byte(0, 0, 1, I85X_DRB3) * MB(32);
+}
+
+/*
+ * On 830/845/85x the stolen memory base isn't available in any
+ * register. We need to calculate it as TOM-TSEG_SIZE-stolen_size.
+ */
+static u32 __init i830_stolen_base(int num, int slot, int func, size_t stolen_size)
+{
+ return i830_mem_size() - i830_tseg_size() - stolen_size;
+}
+
+static u32 __init i845_stolen_base(int num, int slot, int func, size_t stolen_size)
+{
+ return i830_mem_size() - i845_tseg_size() - stolen_size;
+}
+
+static u32 __init i85x_stolen_base(int num, int slot, int func, size_t stolen_size)
+{
+ return i85x_mem_size() - i85x_tseg_size() - stolen_size;
+}
+
+static u32 __init i865_stolen_base(int num, int slot, int func, size_t stolen_size)
+{
+ /*
+  * FIXME is the graphics stolen memory region
+  * always at TOUD? Ie. is it always the last
+  * one to be allocated by the BIOS?
+  */
+ return read_pci_config_16(0, 0, 0, I865_TOUD) << 16;
+}
+
+static size_t __init i830_stolen_size(int num, int slot, int func)
+{
+ size_t stolen_size;
+ u16 gmch_ctrl;
+
+ gmch_ctrl = read_pci_config_16(0, 0, 0, I830_GMCH_CTRL);
+
+ switch (gmch_ctrl & I830_GMCH_GMS_MASK) {
+ case I830_GMCH_GMS_STOLEN_512:
+  stolen_size = KB(512);
+  break;
+ case I830_GMCH_GMS_STOLEN_1024:
+  stolen_size = MB(1);
+  break;
+ case I830_GMCH_GMS_STOLEN_8192:
+  stolen_size = MB(8);
+  break;
+ case I830_GMCH_GMS_LOCAL:
+  /* local memory isn't part of the normal address space */
+  stolen_size = 0;
+  break;
+ default:
+  return 0;
+ }
+
+ return stolen_size;
+}
+
 static size_t __init gen3_stolen_size(int num, int slot, int func)
 {
  size_t stolen_size;
@@ -329,6 +437,26 @@ struct intel_stolen_funcs {
  u32 (*base)(int num, int slot, int func, size_t size);
 };
 
+static const struct intel_stolen_funcs i830_stolen_funcs = {
+ .base = i830_stolen_base,
+ .size = i830_stolen_size,
+};
+
+static const struct intel_stolen_funcs i845_stolen_funcs = {
+ .base = i845_stolen_base,
+ .size = i830_stolen_size,
+};
+
+static const struct intel_stolen_funcs i85x_stolen_funcs = {
+ .base = i85x_stolen_base,
+ .size = gen3_stolen_size,
+};
+
+static const struct intel_stolen_funcs i865_stolen_funcs = {
+ .base = i865_stolen_base,
+ .size = gen3_stolen_size,
+};
+
 static const struct intel_stolen_funcs gen3_stolen_funcs = {
  .base = intel_stolen_base,
  .size = gen3_stolen_size,
@@ -345,6 +473,10 @@ static const struct intel_stolen_funcs gen8_stolen_funcs = {
 };
 
 static struct pci_device_id intel_stolen_ids[] __initdata = {
+ INTEL_I830_IDS(&i830_stolen_funcs),
+ INTEL_I845G_IDS(&i845_stolen_funcs),
+ INTEL_I85X_IDS(&i85x_stolen_funcs),
+ INTEL_I865G_IDS(&i865_stolen_funcs),
  INTEL_I915G_IDS(&gen3_stolen_funcs),
  INTEL_I915GM_IDS(&gen3_stolen_funcs),
  INTEL_I945G_IDS(&gen3_stolen_funcs),
-- 
1.7.1