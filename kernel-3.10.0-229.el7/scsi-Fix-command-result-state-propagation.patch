From a70abc52e7e208d6f4071ed3fbc9365b28d824ec Mon Sep 17 00:00:00 2001
From: Ewan Milne <emilne@redhat.com>
Date: Tue, 24 Jun 2014 18:38:10 -0400
Subject: [scsi] Fix command result state propagation

Message-id: <1403635094-26187-3-git-send-email-emilne@redhat.com>
Patchwork-id: 84680
O-Subject: [RHEL7.0 PATCH 2/6] [SCSI] Fix command result state propagation
Bugzilla: 1103881
RH-Acked-by: Bryn M. Reeves <bmr@redhat.com>
RH-Acked-by: Rob Evers <revers@redhat.com>
RH-Acked-by: David Milburn <dmilburn@redhat.com>

We're seeing a case where the contents of scmd->result isn't being reset after
a SCSI command encounters an error, is resubmitted, times out and then gets
handled.  The error handler acts on the stale result of the previous error
instead of the timeout.  Fix this by properly zeroing the scmd->status before
the command is resubmitted.

Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
Signed-off-by: James Bottomley <JBottomley@Parallels.com>
(cherry picked from commit 644373a4219add42123df69c8b7ce6a918475ccd)
Signed-off-by: Ewan D. Milne <emilne@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/scsi/scsi_error.c b/drivers/scsi/scsi_error.c
index e3a8a8c..ca03236 100644
--- a/drivers/scsi/scsi_error.c
+++ b/drivers/scsi/scsi_error.c
@@ -924,6 +924,7 @@ void scsi_eh_prep_cmnd(struct scsi_cmnd *scmd, struct scsi_eh_save *ses,
  memset(scmd->cmnd, 0, BLK_MAX_CDB);
  memset(&scmd->sdb, 0, sizeof(scmd->sdb));
  scmd->request->next_rq = NULL;
+ scmd->result = 0;
 
  if (sense_bytes) {
   scmd->sdb.length = min_t(unsigned, SCSI_SENSE_BUFFERSIZE,
diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index ca5f750..c49e91d 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -181,6 +181,7 @@ static void __scsi_queue_insert(struct scsi_cmnd *cmd, int reason, int unbusy)
   * lock such that the kblockd_schedule_work() call happens
   * before blk_cleanup_queue() finishes.
   */
+ cmd->result = 0;
  spin_lock_irqsave(q->queue_lock, flags);
  blk_requeue_request(q, cmd->request);
  kblockd_schedule_work(q, &device->requeue_work);
-- 
1.7.1