From 466073ea804a604995ad9d46300f975d916ba3d2 Mon Sep 17 00:00:00 2001
From: Lukas Czerner <lczerner@redhat.com>
Date: Thu, 23 Oct 2014 10:12:37 -0400
Subject: [fs] ext4: always check ext4_ext_find_extent result

Message-id: <1414059176-6044-14-git-send-email-lczerner@redhat.com>
Patchwork-id: 98295
O-Subject: [RHEL 7.1 PATCH 13/32] ext4: always check ext4_ext_find_extent result
Bugzilla: 1150171

From: Dmitry Monakhov <dmonakhov@openvz.org>

BZ 1150171
https://bugzilla.redhat.com/show_bug.cgi?id=1150171

BREW 8149772
https://brewweb.devel.redhat.com/taskinfo?taskID=8149772

Upstream commit a18ed359bdddcded4f97ff5e2f07793ff9336913

 Where are some places where logic guaranties us that extent we are
 searching exits, but this may not be true due to on-disk data
 corruption. If such corruption happens we must prevent possible
 null pointer dereferences.

 Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org>
 Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
 Signed-off-by: Lukas Czerner <lczerner@redhat.com>
---

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 79bfc68..e512a17 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -3313,6 +3313,11 @@ static int ext4_split_extent(handle_t *handle,
   return PTR_ERR(path);
  depth = ext_depth(inode);
  ex = path[depth].p_ext;
+ if (!ex) {
+  EXT4_ERROR_INODE(inode, "unexpected hole at %lu",
+     (unsigned long) map->m_lblk);
+  return -EIO;
+ }
  uninitialized = ext4_ext_is_uninitialized(ex);
  split_flag1 = 0;
 
@@ -3694,6 +3699,12 @@ static int ext4_convert_initialized_extents(handle_t *handle,
   }
   depth = ext_depth(inode);
   ex = path[depth].p_ext;
+  if (!ex) {
+   EXT4_ERROR_INODE(inode, "unexpected hole at %lu",
+      (unsigned long) map->m_lblk);
+   err = -EIO;
+   goto out;
+  }
  }
 
  err = ext4_ext_get_access(handle, inode, path + depth);
@@ -5329,6 +5340,12 @@ ext4_ext_shift_extents(struct inode *inode, handle_t *handle,
    return PTR_ERR(path);
   depth = path->p_depth;
   extent = path[depth].p_ext;
+  if (!extent) {
+   EXT4_ERROR_INODE(inode, "unexpected hole at %lu",
+      (unsigned long) start);
+   return -EIO;
+  }
+
   current_block = le32_to_cpu(extent->ee_block);
   if (start > current_block) {
    /* Hole, move to the next extent */
-- 
1.7.1