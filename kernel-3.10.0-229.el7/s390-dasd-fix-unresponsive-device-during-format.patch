From 0ee43f3d763e92e6523f77fb0b945dca5339da88 Mon Sep 17 00:00:00 2001
From: Hendrik Brueckner <brueckner@redhat.com>
Date: Thu, 21 Aug 2014 14:48:51 -0400
Subject: [s390] dasd: fix unresponsive device during format

Message-id: <1408632535-642-3-git-send-email-brueckner@redhat.com>
Patchwork-id: 88686
O-Subject: [RHEL7.1 PATCH] [s390] dasd: fix unresponsive device during format
Bugzilla: 1132370
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>

Description
-----------
commit 931a3dce819d2dedc731011c6fd7e6bb5aa188ef
Author: Stefan Haberland <stefan.haberland@de.ibm.com>
Date:   Fri Jul 18 14:22:41 2014 +0200

    dasd: fix unresponsive device during format

    If path events occur the formatting process stucks because path
    events may flush format requests from the queue.

    Kick the format process after path events are handled.

    Signed-off-by: Stefan Haberland <stefan.haberland@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

Bugzilla
--------
BZ 1132370
https://bugzilla.redhat.com/show_bug.cgi?id=1132370

Upstream status of the patch
----------------------------
The patch is upstream as of kernel version
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=931a3dce819d2dedc731011c6fd7e6bb5aa188ef

Brew
----
https://brewweb.devel.redhat.com/taskinfo?taskID=7869031

Test status
-----------
The patch has been tested and fixes the problem.
The fix has been verified by the IBM test department.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/s390/block/dasd.c b/drivers/s390/block/dasd.c
index fff227b..58f9d65 100644
--- a/drivers/s390/block/dasd.c
+++ b/drivers/s390/block/dasd.c
@@ -1670,8 +1670,11 @@ void dasd_int_handler(struct ccw_device *cdev, unsigned long intparm,
  if (cqr->status == DASD_CQR_CLEAR_PENDING &&
      scsw_fctl(&irb->scsw) & SCSW_FCTL_CLEAR_FUNC) {
   cqr->status = DASD_CQR_CLEARED;
+  if (cqr->callback_data == DASD_SLEEPON_START_TAG)
+   cqr->callback_data = DASD_SLEEPON_END_TAG;
   dasd_device_clear_timer(device);
   wake_up(&dasd_flush_wq);
+  wake_up(&generic_waitq);
   dasd_schedule_device_bh(device);
   return;
  }
@@ -2441,6 +2444,8 @@ int dasd_cancel_req(struct dasd_ccw_req *cqr)
  case DASD_CQR_QUEUED:
   /* request was not started - just set to cleared */
   cqr->status = DASD_CQR_CLEARED;
+  if (cqr->callback_data == DASD_SLEEPON_START_TAG)
+   cqr->callback_data = DASD_SLEEPON_END_TAG;
   break;
  case DASD_CQR_IN_IO:
   /* request in IO - terminate IO and release again */
@@ -3413,6 +3418,10 @@ int dasd_generic_path_operational(struct dasd_device *device)
  dasd_schedule_device_bh(device);
  if (device->block)
   dasd_schedule_block_bh(device->block);
+
+ if (!device->stopped)
+  wake_up(&generic_waitq);
+
  return 1;
 }
 EXPORT_SYMBOL_GPL(dasd_generic_path_operational);
-- 
1.7.1