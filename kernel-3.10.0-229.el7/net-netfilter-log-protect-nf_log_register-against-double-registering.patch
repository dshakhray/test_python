From 3500659804251facce0cf4ee2ca657e0108e9a4f Mon Sep 17 00:00:00 2001
From: Marcelo Leitner <mleitner@redhat.com>
Date: Tue, 11 Nov 2014 16:12:52 -0500
Subject: [net] netfilter: log: protect nf_log_register against double registering

Message-id: <7a79163f91246e93e71f92d3d3ec4135b8f22766.1415721807.git.mleitner@redhat.com>
Patchwork-id: 99822
O-Subject: [RHEL7.1 net PATCH 125/125] netfilter: log: protect nf_log_register against double registering
Bugzilla: 1148041 1155088
RH-Acked-by: Florian Westphal <fwestpha@redhat.com>

Backport of nf-next commit: 8ac2bde2a4a05c38e2bd733bea94507cb1461e06
BZ: 1148041
Brew: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=8225240
Testing: me

Backport notes/Red Hat specific:
Removed chunk for nf_log_arp.c as we don't have it.
Improved ipt_ULOG error handling if a handler is already registered.

 commit 8ac2bde2a4a05c38e2bd733bea94507cb1461e06
 Author: Marcelo Leitner <mleitner@redhat.com>
 Date:   Wed Oct 29 10:51:13 2014 -0200

    netfilter: log: protect nf_log_register against double registering

    Currently, despite the comment right before the function,
    nf_log_register allows registering two loggers on with the same type and
    end up overwriting the previous register.

    Not a real issue today as current tree doesn't have two loggers for the
    same type but it's better to get this protected.

    Also make sure that all of its callers do error checking.

    Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>

Signed-off-by: Jiri Benc <jbenc@redhat.com>
Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/net/ipv4/netfilter/ipt_ULOG.c b/net/ipv4/netfilter/ipt_ULOG.c
index de23bae..77b70a0 100644
--- a/net/ipv4/netfilter/ipt_ULOG.c
+++ b/net/ipv4/netfilter/ipt_ULOG.c
@@ -476,12 +476,16 @@ static int __init ulog_tg_init(void)
 
  if (nflog) {
   ret = nf_log_register(NFPROTO_IPV4, &ipt_ulog_logger);
-  if (ret < 0)
-   return ret;
+  if (ret < 0) {
+   pr_warn("ULOG: fail to register logger.\n");
+   goto out_register;
+  }
  }
 
  return 0;
 
+out_register:
+ xt_unregister_target(&ulog_tg_reg);
 out_target:
  unregister_pernet_subsys(&ulog_tg_net_ops);
 out_pernet:
diff --git a/net/ipv4/netfilter/nf_log_ipv4.c b/net/ipv4/netfilter/nf_log_ipv4.c
index 078bdca..7510198 100644
--- a/net/ipv4/netfilter/nf_log_ipv4.c
+++ b/net/ipv4/netfilter/nf_log_ipv4.c
@@ -5,6 +5,7 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
 #include <linux/module.h>
 #include <linux/spinlock.h>
@@ -366,8 +367,17 @@ static int __init nf_log_ipv4_init(void)
  if (ret < 0)
   return ret;
 
- nf_log_register(NFPROTO_IPV4, &nf_ip_logger);
+ ret = nf_log_register(NFPROTO_IPV4, &nf_ip_logger);
+ if (ret < 0) {
+  pr_err("failed to register logger\n");
+  goto err1;
+ }
+
  return 0;
+
+err1:
+ unregister_pernet_subsys(&nf_log_ipv4_net_ops);
+ return ret;
 }
 
 static void __exit nf_log_ipv4_exit(void)
diff --git a/net/ipv6/netfilter/nf_log_ipv6.c b/net/ipv6/netfilter/nf_log_ipv6.c
index 7b17a0b..7fc34d1 100644
--- a/net/ipv6/netfilter/nf_log_ipv6.c
+++ b/net/ipv6/netfilter/nf_log_ipv6.c
@@ -5,6 +5,7 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
 #include <linux/module.h>
 #include <linux/spinlock.h>
@@ -398,8 +399,17 @@ static int __init nf_log_ipv6_init(void)
  if (ret < 0)
   return ret;
 
- nf_log_register(NFPROTO_IPV6, &nf_ip6_logger);
+ ret = nf_log_register(NFPROTO_IPV6, &nf_ip6_logger);
+ if (ret < 0) {
+  pr_err("failed to register logger\n");
+  goto err1;
+ }
+
  return 0;
+
+err1:
+ unregister_pernet_subsys(&nf_log_ipv6_net_ops);
+ return ret;
 }
 
 static void __exit nf_log_ipv6_exit(void)
diff --git a/net/netfilter/nf_log.c b/net/netfilter/nf_log.c
index 0b2161c..4a888f1 100644
--- a/net/netfilter/nf_log.c
+++ b/net/netfilter/nf_log.c
@@ -75,6 +75,7 @@ EXPORT_SYMBOL(nf_log_unset);
 int nf_log_register(u_int8_t pf, struct nf_logger *logger)
 {
  int i;
+ int ret = 0;
 
  if (pf >= ARRAY_SIZE(init_net.nf.nf_loggers))
   return -EINVAL;
@@ -82,16 +83,25 @@ int nf_log_register(u_int8_t pf, struct nf_logger *logger)
  mutex_lock(&nf_log_mutex);
 
  if (pf == NFPROTO_UNSPEC) {
+  for (i = NFPROTO_UNSPEC; i < NFPROTO_NUMPROTO; i++) {
+   if (rcu_access_pointer(loggers[i][logger->type])) {
+    ret = -EEXIST;
+    goto unlock;
+   }
+  }
   for (i = NFPROTO_UNSPEC; i < NFPROTO_NUMPROTO; i++)
    rcu_assign_pointer(loggers[i][logger->type], logger);
  } else {
-  /* register at end of list to honor first register win */
+  if (rcu_access_pointer(loggers[pf][logger->type])) {
+   ret = -EEXIST;
+   goto unlock;
+  }
   rcu_assign_pointer(loggers[pf][logger->type], logger);
  }
 
+unlock:
  mutex_unlock(&nf_log_mutex);
-
- return 0;
+ return ret;
 }
 EXPORT_SYMBOL(nf_log_register);
 
-- 
1.7.1