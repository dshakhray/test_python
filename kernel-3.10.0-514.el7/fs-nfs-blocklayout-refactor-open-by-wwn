From 3795aea9d7481ff6cb731895745eed4b2097b1d2 Mon Sep 17 00:00:00 2001
From: Benjamin Coddington <bcodding@redhat.com>
Date: Wed, 31 Aug 2016 15:20:23 -0400
Subject: [fs] nfs/blocklayout: refactor open-by-wwn

Message-id: <59f14d3fe3ad680d4da554c74c980ca5bfc763db.1472656591.git.bcodding@redhat.com>
Patchwork-id: 157496
O-Subject: [RHEL7 PATCH fs 2/4] nfs/blocklayout: refactor open-by-wwn
Bugzilla: 1356796
RH-Acked-by: Jeff Layton <jlayton@redhat.com>
RH-Acked-by: Steve Dickson <SteveD@redhat.com>
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>

From: Christoph Hellwig <hch@lst.de>

The current code works with the standard udev/systemd names, but we'll have
to add another method in the next patch.  Refactor it into a separate helper
to make room for the new variant.

Signed-off-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Upstream-id: d702d41ed41328487bd3b270467721222f8036e4
Brew: https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=11676325
Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1356796
Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
Signed-off-by: Rafael Aquini <aquini@redhat.com>

diff --git a/fs/nfs/blocklayout/dev.c b/fs/nfs/blocklayout/dev.c
index 7fb9c07..ea70883 100644
--- a/fs/nfs/blocklayout/dev.c
+++ b/fs/nfs/blocklayout/dev.c
@@ -287,44 +287,45 @@ bl_validate_designator(struct pnfs_block_volume *v)
  }
 }
 
+/*
+ * Try to open the udev path for the WWN.  At least on Debian the udev
+ * by-id path will always point to the dm-multipath device if one exists.
+ */
+static struct block_device *
+bl_open_udev_path(struct pnfs_block_volume *v)
+{
+ struct block_device *bdev;
+ const char *devname;
+
+ devname = kasprintf(GFP_KERNEL, "/dev/disk/by-id/wwn-0x%*phN",
+    v->scsi.designator_len, v->scsi.designator);
+ if (!devname)
+  return ERR_PTR(-ENOMEM);
+
+ bdev = blkdev_get_by_path(devname, FMODE_READ | FMODE_WRITE, NULL);
+ if (IS_ERR(bdev)) {
+  pr_warn("pNFS: failed to open device %s (%ld)\n",
+   devname, PTR_ERR(bdev));
+ }
+
+ kfree(devname);
+ return bdev;
+}
+
 static int
 bl_parse_scsi(struct nfs_server *server, struct pnfs_block_dev *d,
   struct pnfs_block_volume *volumes, int idx, gfp_t gfp_mask)
 {
  struct pnfs_block_volume *v = &volumes[idx];
  const struct pr_ops *ops;
- const char *devname;
  int error;
 
  if (!bl_validate_designator(v))
   return -EINVAL;
 
- switch (v->scsi.designator_len) {
- case 8:
-  devname = kasprintf(GFP_KERNEL, "/dev/disk/by-id/wwn-0x%8phN",
-    v->scsi.designator);
-  break;
- case 12:
-  devname = kasprintf(GFP_KERNEL, "/dev/disk/by-id/wwn-0x%12phN",
-    v->scsi.designator);
-  break;
- case 16:
-  devname = kasprintf(GFP_KERNEL, "/dev/disk/by-id/wwn-0x%16phN",
-    v->scsi.designator);
-  break;
- default:
-  return -EINVAL;
- }
-
- d->bdev = blkdev_get_by_path(devname, FMODE_READ | FMODE_WRITE, NULL);
- if (IS_ERR(d->bdev)) {
-  pr_warn("pNFS: failed to open device %s (%ld)\n",
-   devname, PTR_ERR(d->bdev));
-  kfree(devname);
+ d->bdev = bl_open_udev_path(v);
+ if (IS_ERR(d->bdev))
   return PTR_ERR(d->bdev);
- }
-
- kfree(devname);
 
  d->len = i_size_read(d->bdev->bd_inode);
  d->map = bl_map_simple;
-- 
1.7.1