From f203f798f8e0b8db14dd383ce29f7d0bb6acaf3c Mon Sep 17 00:00:00 2001
From: Vitaly Kuznetsov <vkuznets@redhat.com>
Date: Wed, 21 Sep 2016 17:45:37 -0400
Subject: [x86] topology: Handle CPUID bogosity gracefully

Message-id: <1474479937-6538-1-git-send-email-vkuznets@redhat.com>
Patchwork-id: 157962
O-Subject: [RHEL7 KERNEL PATCH] x86/topology: Handle CPUID bogosity gracefully
Bugzilla: 1377988
RH-Acked-by: Andrew Jones <drjones@redhat.com>
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1377988
Brew: https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=11784624
Tested: AWS m3.large instance by me

Topology setup code changed in 7.3 and this brought us a regression: when
x86_max_cores is zero we end up dividing by 0 in early boot. This happens
for some old Xen versions and, unfortunately, Amazon runs such. Whole
classes of their instance types (m3.large, c3.large) fail to boot.

Upstream commit 56402d63eefe22179f7311a51ff2094731420406
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri May 6 20:48:16 2016 +0200

    x86/topology: Handle CPUID bogosity gracefully

    Joseph reported that a XEN guest dies with a division by 0 in the package
    topology setup code. This happens if cpu_info.x86_max_cores is zero.

    Handle that case and emit a warning. This does not fix the underlying XEN bug,
    but makes the code more robust.

    Reported-and-tested-by: Joseph Salisbury <joseph.salisbury@canonical.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.11.1605062046270.3540@nanos
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

Signed-off-by: Rafael Aquini <aquini@redhat.com>

Conflicts:
 arch/x86/kernel/smpboot.c (RHEL-only 362fcee84)

Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>

diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 719e1f3..a31826f 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -316,6 +316,11 @@ static void __init smp_init_package_map(void)
   * primary cores.
   */
  ncpus = boot_cpu_data.x86_max_cores;
+ if (!ncpus) {
+  pr_warn("x86_max_cores == zero !?!?");
+  ncpus = 1;
+ }
+
  if (is_uv_system())
   __max_logical_packages = total_cpus;
  else
-- 
1.7.1