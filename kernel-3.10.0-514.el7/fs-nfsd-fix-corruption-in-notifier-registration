From da2c7b44788a63f5b5054af10c0cbc0021970860 Mon Sep 17 00:00:00 2001
From: J. Bruce Fields <bfields@redhat.com>
Date: Thu, 29 Sep 2016 14:38:03 -0400
Subject: [fs] nfsd: fix corruption in notifier registration

Message-id: <1475159883-5828-1-git-send-email-bfields@redhat.com>
Patchwork-id: 158442
O-Subject: [Patch RHEL7 fs] NFSD: fix corruption in notifier registration
Bugzilla: 1378363
RH-Acked-by: Scott Mayhew <smayhew@redhat.com>
RH-Acked-by: Carlos Maiolino <cmaiolino@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

From: Vasily Averin <vvs@virtuozzo.com>

By design notifier can be registered once only, however nfsd registers
the same inetaddr notifiers per net-namespace.  When this happen it
corrupts list of notifiers, as result some notifiers can be not called
on proper event, traverse on list can be cycled forever, and second
unregister can access already freed memory.

Cc: stable@vger.kernel.org
fixes: 36684996 ("nfsd: Register callbacks on the inetaddr_chain and inet6addr_chain")
Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
Reviewed-by: Jeff Layton <jlayton@redhat.com>
Cc: stable@vger.kernel.org
Signed-off-by: J. Bruce Fields <bfields@redhat.com>
Upstream: 1eca45f8a840987d0df355e0176921653e4f7ec2
Bugzilla: 1378363

NOTE: commit is currently in for-4.9 branch at
git://linux-nfs.org/~bfields/linux.git.  I expect it to reach Linus's
tree next week with the same commit id.

Signed-off-by: Rafael Aquini <aquini@redhat.com>

diff --git a/fs/nfsd/nfssvc.c b/fs/nfsd/nfssvc.c
index 45007ac..a2b65fc 100644
--- a/fs/nfsd/nfssvc.c
+++ b/fs/nfsd/nfssvc.c
@@ -366,14 +366,21 @@ static struct notifier_block nfsd_inet6addr_notifier = {
 };
 #endif
 
+/* Only used under nfsd_mutex, so this atomic may be overkill: */
+static atomic_t nfsd_notifier_refcount = ATOMIC_INIT(0);
+
 static void nfsd_last_thread(struct svc_serv *serv, struct net *net)
 {
  struct nfsd_net *nn = net_generic(net, nfsd_net_id);
 
- unregister_inetaddr_notifier(&nfsd_inetaddr_notifier);
+ /* check if the notifier still has clients */
+ if (atomic_dec_return(&nfsd_notifier_refcount) == 0) {
+  unregister_inetaddr_notifier(&nfsd_inetaddr_notifier);
 #if IS_ENABLED(CONFIG_IPV6)
- unregister_inet6addr_notifier(&nfsd_inet6addr_notifier);
+  unregister_inet6addr_notifier(&nfsd_inet6addr_notifier);
 #endif
+ }
+
  /*
   * write_ports can create the server without actually starting
   * any threads--if we get shut down before any threads are
@@ -488,10 +495,13 @@ int nfsd_create_serv(struct net *net)
  }
 
  set_max_drc();
- register_inetaddr_notifier(&nfsd_inetaddr_notifier);
+ /* check if the notifier is already set */
+ if (atomic_inc_return(&nfsd_notifier_refcount) == 1) {
+  register_inetaddr_notifier(&nfsd_inetaddr_notifier);
 #if IS_ENABLED(CONFIG_IPV6)
- register_inet6addr_notifier(&nfsd_inet6addr_notifier);
+  register_inet6addr_notifier(&nfsd_inet6addr_notifier);
 #endif
+ }
  do_gettimeofday(&nn->nfssvc_boot);  /* record boot time */
  return 0;
 }
-- 
1.7.1