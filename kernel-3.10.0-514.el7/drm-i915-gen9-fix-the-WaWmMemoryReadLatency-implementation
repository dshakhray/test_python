From 814db30eba0dcf17787d708c9bbdf121cbc8f450 Mon Sep 17 00:00:00 2001
From: Lyude Paul <cpaul@redhat.com>
Date: Thu, 15 Sep 2016 17:56:51 -0400
Subject: [drm] i915/gen9: fix the WaWmMemoryReadLatency implementation

Message-id: <1473962216-29060-11-git-send-email-cpaul@redhat.com>
Patchwork-id: 157884
O-Subject: [RHEL7.3][RESEND PATCH v2 10/15] drm/i915/gen9: fix the WaWmMemoryReadLatency implementation
Bugzilla: 1341633 1355776
RH-Acked-by: Adam Jackson <ajax@redhat.com>
RH-Acked-by: Rob Clark <rclark@redhat.com>

From: Lyude Paul <cpaul@redhat.com>

Upstream since: posted

 drm/i915/gen9: fix the WaWmMemoryReadLatency implementation
 Author: Paulo Zanoni <paulo.r.zanoni@intel.com>

 Bspec says:
   "The mailbox response data may not account for memory read latency.
    If the mailbox response data for level 0 is 0us, add 2 microseconds
    to the result for each valid level."

 This means we should only do the +2 in case wm[0] == 0, not always.

 So split the sanitizing implementation from the WA implementation and
 fix the WA implementation.

 Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>

RHBZ: 1341633
RHBZ: 1355776
Signed-off-by: Lyude Paul <cpaul@redhat.com>
Signed-off-by: Lyude <cpaul@redhat.com>
Signed-off-by: Rafael Aquini <aquini@redhat.com>

diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 171e0ae..a692974 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -2097,32 +2097,34 @@ static void intel_read_wm_latency(struct drm_device *dev, uint16_t wm[8])
     GEN9_MEM_LATENCY_LEVEL_MASK;
 
   /*
+   * If a level n (n > 1) has a 0us latency, all levels m (m >= n)
+   * need to be disabled. We make sure to sanitize the values out
+   * of the punit to satisfy this requirement.
+   */
+  for (level = 1; level <= max_level; level++) {
+   if (wm[level] == 0) {
+    for (i = level + 1; i <= max_level; i++)
+     wm[i] = 0;
+    break;
+   }
+  }
+
+  /*
    * WaWmMemoryReadLatency:skl
    *
    * punit doesn't take into account the read latency so we need
-   * to add 2us to the various latency levels we retrieve from
-   * the punit.
-   *   - W0 is a bit special in that it's the only level that
-   *   can't be disabled if we want to have display working, so
-   *   we always add 2us there.
-   *   - For levels >=1, punit returns 0us latency when they are
-   *   disabled, so we respect that and don't add 2us then
-   *
-   * Additionally, if a level n (n > 1) has a 0us latency, all
-   * levels m (m >= n) need to be disabled. We make sure to
-   * sanitize the values out of the punit to satisfy this
-   * requirement.
+   * to add 2us to the various latency levels we retrieve from the
+   * punit when level 0 response data us 0us.
    */
-  wm[0] += 2;
-  for (level = 1; level <= max_level; level++)
-   if (wm[level] != 0)
+  if (wm[0] == 0) {
+   wm[0] += 2;
+   for (level = 1; level <= max_level; level++) {
+    if (wm[level] == 0)
+     break;
     wm[level] += 2;
-   else {
-    for (i = level + 1; i <= max_level; i++)
-     wm[i] = 0;
-
-    break;
    }
+  }
+
  } else if (IS_HASWELL(dev) || IS_BROADWELL(dev)) {
   uint64_t sskpd = I915_READ64(MCH_SSKPD);
 
-- 
1.7.1