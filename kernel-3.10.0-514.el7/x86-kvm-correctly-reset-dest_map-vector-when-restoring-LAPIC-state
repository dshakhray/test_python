From ac2c446a30589eb8bc4617be6290675a8a0755ae Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Fri, 16 Sep 2016 11:36:35 -0400
Subject: [x86] kvm: correctly reset dest_map->vector when restoring LAPIC state

Message-id: <1474025795-29045-1-git-send-email-pbonzini@redhat.com>
Patchwork-id: 157896
O-Subject: [RHEL7.3 PATCH] kvm: x86: correctly reset dest_map->vector when restoring LAPIC state
Bugzilla: 1367716
RH-Acked-by: Radim Krcmar <rkrcmar@redhat.com>
RH-Acked-by: Jeremy McNicoll <jmcnicol@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Bugzilla: 1367716

Brew build: https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=11755217

When userspace sends KVM_SET_LAPIC, KVM schedules a check between
the vCPU's IRR and ISR and the IOAPIC redirection table, in order
to re-establish the IOAPIC's dest_map (the list of CPUs servicing
the real-time clock interrupt with the corresponding vectors).

However, __rtc_irq_eoi_tracking_restore_one was forgetting to
set dest_map->vectors.  Because of this, the IOAPIC did not process
the real-time clock interrupt EOI, ioapic->rtc_status.pending_eoi
got stuck at a non-zero value, and further RTC interrupts were
reported to userspace as coalesced.

NOTE:
 This bug is actually quite rare, occurring ~1 in 30 migrations.  A
 more common issue is handled by a QEMU patch that David is going to
 post.  Both problems are fixed by patching the destination host, the
 source works fine.

Fixes: 9e4aabe2bb3454c83dac8139cf9974503ee044db
Fixes: 4d99ba898dd0c521ca6cdfdde55c9b58aea3cb3d
Cc: Joerg Roedel <jroedel@suse.de>
Cc: David Gilbert <dgilbert@redhat.com>
Reviewed-by: Radim Krcmar <rkrcmar@redhat.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit b0eaf4506f5f95d15d6731d72c0ddf4a2179eefa)
Signed-off-by: Rafael Aquini <aquini@redhat.com>

diff --git a/arch/x86/kvm/ioapic.c b/arch/x86/kvm/ioapic.c
index aec1986..2a04ba6 100644
--- a/arch/x86/kvm/ioapic.c
+++ b/arch/x86/kvm/ioapic.c
@@ -109,6 +109,7 @@ static void __rtc_irq_eoi_tracking_restore_one(struct kvm_vcpu *vcpu)
 {
  bool new_val, old_val;
  struct kvm_ioapic *ioapic = vcpu->kvm->arch.vioapic;
+ struct dest_map *dest_map = &ioapic->rtc_status.dest_map;
  union kvm_ioapic_redirect_entry *e;
 
  e = &ioapic->redirtbl[RTC_GSI];
@@ -117,16 +118,17 @@ static void __rtc_irq_eoi_tracking_restore_one(struct kvm_vcpu *vcpu)
   return;
 
  new_val = kvm_apic_pending_eoi(vcpu, e->fields.vector);
- old_val = test_bit(vcpu->vcpu_id, ioapic->rtc_status.dest_map.map);
+ old_val = test_bit(vcpu->vcpu_id, dest_map->map);
 
  if (new_val == old_val)
   return;
 
  if (new_val) {
-  __set_bit(vcpu->vcpu_id, ioapic->rtc_status.dest_map.map);
+  __set_bit(vcpu->vcpu_id, dest_map->map);
+  dest_map->vectors[vcpu->vcpu_id] = e->fields.vector;
   ioapic->rtc_status.pending_eoi++;
  } else {
-  __clear_bit(vcpu->vcpu_id, ioapic->rtc_status.dest_map.map);
+  __clear_bit(vcpu->vcpu_id, dest_map->map);
   ioapic->rtc_status.pending_eoi--;
   rtc_status_pending_eoi_check_valid(ioapic);
  }
-- 
1.7.1