From 636526e6f80148bce6f7015a08315f1e49b77c32 Mon Sep 17 00:00:00 2001
From: Paolo Abeni <pabeni@redhat.com>
Date: Wed, 7 Sep 2016 12:38:48 -0400
Subject: [fs] sunrpc: fix UDP memory accounting

Message-id: <e2a47ec216f4262019c1f94a1a9589289645516d.1473251552.git.pabeni@redhat.com>
Patchwork-id: 157679
O-Subject: [RHEL7.3 fs PATCH] sunrpc: fix UDP memory accounting
Bugzilla: 1298899
RH-Acked-by: Jeff Layton <jlayton@redhat.com>
RH-Acked-by: Jiri Benc <jbenc@redhat.com>
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Benjamin Coddington <bcodding@redhat.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1298899
Brew: https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=11655360
Tested: against bz reproducer
Upstream status: linux-nfs

Upstream linux-nfs commit:
commit a41bd25ae67d3e4052c7f00ee9f2b4ba9219309e
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Aug 25 18:42:35 2016 +0200

    sunrpc: fix UDP memory accounting

    The commit f9b2ee714c5c ("SUNRPC: Move UDP receive data path
    into a workqueue context"), as a side effect, moved the
    skb_free_datagram() call outside the scope of the related socket
    lock, but UDP sockets require such lock to be held for proper
    memory accounting.
    Fix it by replacing skb_free_datagram() with
    skb_free_datagram_locked().

    Fixes: f9b2ee714c5c ("SUNRPC: Move UDP receive data path into a workqueue context")
    Reported-and-tested-by: Jan Stancek <jstancek@redhat.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Cc: stable@vger.kernel.org # 4.4+
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    sunrpc: be sure to release the datagram socket under the sock lock

Signed-off-by: Paolo Abeni <pabeni@redhat.com>
Signed-off-by: Rafael Aquini <aquini@redhat.com>

diff --git a/net/sunrpc/xprtsock.c b/net/sunrpc/xprtsock.c
index 4bc84ca..ca5037a 100644
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@ -1058,7 +1058,7 @@ static void xs_udp_data_receive(struct sock_xprt *transport)
   if (skb == NULL)
    break;
   xs_udp_data_read_skb(&transport->xprt, sk, skb);
-  skb_free_datagram(sk, skb);
+  skb_free_datagram_locked(sk, skb);
  }
 out:
  mutex_unlock(&transport->recv_mutex);
-- 
1.7.1