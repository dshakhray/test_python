From f6c48e718293abc3b546822b3b1c9191aacba354 Mon Sep 17 00:00:00 2001
From: Benjamin Coddington <bcodding@redhat.com>
Date: Mon, 26 Sep 2016 14:10:17 -0400
Subject: [fs] nfs: change invalidatepage prototype to accept length

Message-id: <0d197325fa80b770e343b7246f341848c85a2e86.1474898872.git.bcodding@redhat.com>
Patchwork-id: 158362
O-Subject: [RHEL7 PATCH fs] [nfs] mm: change invalidatepage prototype to accept length
Bugzilla: 1366131
RH-Acked-by: Steve Dickson <SteveD@redhat.com>
RH-Acked-by: J. Bruce Fields <bfields@redhat.com>
RH-Acked-by: Jeff Layton <jlayton@redhat.com>

RH commit 905e18957535c298799a9974e700a8cc7fc205a6: "nfs: Don't zap caches
on fallocate()" changes NFS' DEALLOCATE so that on completion it can call
truncate_pagecache_range() with a partial page at the end of the range.
That is a BUG-able offense, since NFS' invalidatepage doesn't currently
accept a length to specify the end of the range.

We can fix this up for NFS while working around kABI using the same
approach taken by RH commit 4cdf67c512a02fd2d3604ecf8bb718aebdc: "mm:
change invalidatepage prototype to accept length", which is a partial
backport of upstream commit d47992f86b307985b3215bcf141d56d1849d71df.

Allow nfs_invalidate_page to accept a length, and move the operation to
invalidatepage_range.

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1366131
Brew: https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=11811770
Upstream-id: d47992f86b307985b3215bcf141d56d1849d71df
Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
Signed-off-by: Rafael Aquini <aquini@redhat.com>

diff --git a/fs/nfs/file.c b/fs/nfs/file.c
index aa994dc..c497ac4 100644
--- a/fs/nfs/file.c
+++ b/fs/nfs/file.c
@@ -448,11 +448,13 @@ static int nfs_write_end(struct file *file, struct address_space *mapping,
  * - Called if either PG_private or PG_fscache is set on the page
  * - Caller holds page lock
  */
-static void nfs_invalidate_page(struct page *page, unsigned long offset)
+static void nfs_invalidate_page(struct page *page, unsigned int offset,
+    unsigned int length)
 {
- dfprintk(PAGECACHE, "NFS: invalidate_page(%p, %lu)\n", page, offset);
+ dfprintk(PAGECACHE, "NFS: invalidate_page(%p, %u, %u)\n",
+   page, offset, length);
 
- if (offset != 0)
+ if (offset != 0 || length < PAGE_CACHE_SIZE)
   return;
  /* Cancel any unstarted writes on this page */
  nfs_wb_page_cancel(page_file_mapping(page)->host, page);
@@ -573,7 +575,7 @@ const struct address_space_operations nfs_file_aops = {
  .writepages = nfs_writepages,
  .write_begin = nfs_write_begin,
  .write_end = nfs_write_end,
- .invalidatepage = nfs_invalidate_page,
+ .invalidatepage_range = nfs_invalidate_page,
  .releasepage = nfs_release_page,
  .direct_IO = nfs_direct_IO,
  .migratepage = nfs_migrate_page,
diff --git a/fs/nfs/nfs4super.c b/fs/nfs/nfs4super.c
index 89aa88f..9ebafc1 100644
--- a/fs/nfs/nfs4super.c
+++ b/fs/nfs/nfs4super.c
@@ -29,7 +29,7 @@ static struct file_system_type nfs4_remote_fs_type = {
  .name  = "nfs4",
  .mount  = nfs4_remote_mount,
  .kill_sb = nfs_kill_super,
- .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
+ .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA|FS_HAS_INVALIDATE_RANGE,
 };
 
 static struct file_system_type nfs4_remote_referral_fs_type = {
@@ -37,7 +37,7 @@ static struct file_system_type nfs4_remote_referral_fs_type = {
  .name  = "nfs4",
  .mount  = nfs4_remote_referral_mount,
  .kill_sb = nfs_kill_super,
- .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
+ .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA|FS_HAS_INVALIDATE_RANGE,
 };
 
 struct file_system_type nfs4_referral_fs_type = {
@@ -45,7 +45,7 @@ struct file_system_type nfs4_referral_fs_type = {
  .name  = "nfs4",
  .mount  = nfs4_referral_mount,
  .kill_sb = nfs_kill_super,
- .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
+ .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA|FS_HAS_INVALIDATE_RANGE,
 };
 
 static const struct super_operations nfs4_sops = {
diff --git a/fs/nfs/super.c b/fs/nfs/super.c
index 1ca3c68..9aebce2 100644
--- a/fs/nfs/super.c
+++ b/fs/nfs/super.c
@@ -292,7 +292,7 @@ struct file_system_type nfs_fs_type = {
  .name  = "nfs",
  .mount  = nfs_fs_mount,
  .kill_sb = nfs_kill_super,
- .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
+ .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA|FS_HAS_INVALIDATE_RANGE,
 };
 MODULE_ALIAS_FS("nfs");
 EXPORT_SYMBOL_GPL(nfs_fs_type);
@@ -302,7 +302,7 @@ struct file_system_type nfs_xdev_fs_type = {
  .name  = "nfs",
  .mount  = nfs_xdev_mount,
  .kill_sb = nfs_kill_super,
- .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
+ .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA|FS_HAS_INVALIDATE_RANGE,
 };
 
 const struct super_operations nfs_sops = {
@@ -332,7 +332,7 @@ struct file_system_type nfs4_fs_type = {
  .name  = "nfs4",
  .mount  = nfs_fs_mount,
  .kill_sb = nfs_kill_super,
- .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
+ .fs_flags = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA|FS_HAS_INVALIDATE_RANGE,
 };
 MODULE_ALIAS_FS("nfs4");
 MODULE_ALIAS("nfs4");
-- 
1.7.1