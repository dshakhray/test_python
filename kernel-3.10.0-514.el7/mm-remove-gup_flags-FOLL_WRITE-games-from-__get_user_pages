From 78b5951904ec4dd5469bcc732c73465ee209a874 Mon Sep 17 00:00:00 2001
From: Larry Woodman <lwoodman@redhat.com>
Date: Tue, 18 Oct 2016 18:18:47 -0400
Subject: [mm] remove gup_flags FOLL_WRITE games from __get_user_pages()

Message-id: <1476814727-23110-1-git-send-email-lwoodman@redhat.com>
Patchwork-id: 5392
O-Subject: [kernel team] [RHEL7.3 PATCH V2] Repost -> EMBARGOED CVE-2016-5195 kernel: Privilege escalation via MAP_PRIVATE [rhel-7.3]
Bugzilla: 1385124
CVE: CVE-2016-5195
RH-Acked-by: Rafael Aquini <aquini@redhat.com>
RH-Acked-by: Petr  Matousek <pmatouse@redhat.com>
RH-Acked-by: Jerome Marchand <jmarchan@redhat.com>

Backported what will be the actual upstream fix to RHEL7.3

Brew: https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=11919295

BZ: 1385124

 commit 1707b1acf0ac3b3f1cd2c7b9bc0fc158d105f476
 Author: Linus Torvalds <torvalds@linux-foundation.org>
 Date:   Thu Oct 13 13:07:36 2016 -0700

    mm: remove gup_flags FOLL_WRITE games from __get_user_pages()

    This is an ancient bug that was actually attrempted to be fixed once
    (badly) by me eleven years ago in commit 4ceb5db9757a ("Fix
    get_user_pages() race for write access") but that was then undone due to
    problems on s390 by commit f33ea7f404e5 ("fix get_user_pages bug").

    In the meantime, the s390 situation has long been fixed, and we can once
    more try to fix it by checking the pte_dirty() bit properly (and do it
    better).  Also, the VM has become more scalable, and what was a purely
    theoretical race back then has become easier to trigger.

    To fix it, we introduce a new internal FOLL_COW flag to mark the "yes,
    we already did a COW" rather than play racy games with FOLL_WRITE that
    is very fundamental, and then use the pte dirty flag to validate that
    the FOLL_COW flag is still valid.

    Reported-and-tested-by: Phil "not Paul" Oester <kernel@linuxace.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Acked-by: Hugh Dickins <hughd@google.com>
    Cc: Nick Piggin <npiggin@gmail.com>
    Cc: Greg Thelen <gthelen@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Rafael Aquini <aquini@redhat.com>

diff --git a/include/linux/mm.h b/include/linux/mm.h
index 3b39764..e7edaae 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -2105,6 +2105,7 @@ static inline struct page *follow_page(struct vm_area_struct *vma,
 #define FOLL_NUMA 0x200 /* force NUMA hinting page fault */
 #define FOLL_MIGRATION 0x400 /* wait for page to replace migration entry */
 #define FOLL_TRIED 0x800 /* a retry, previous pass started an IO */
+#define FOLL_COW 0x4000 /* internal GUP flag */
 
 typedef int (*pte_fn_t)(pte_t *pte, pgtable_t token, unsigned long addr,
    void *data);
diff --git a/mm/gup.c b/mm/gup.c
index 01e3e19..f912e0a 100644
--- a/mm/gup.c
+++ b/mm/gup.c
@@ -35,6 +35,15 @@ static int follow_pfn_pte(struct vm_area_struct *vma, unsigned long address,
  return -EEXIST;
 }
 
+/*
+ * FOLL_FORCE can write to even unwritable pte's, but only
+ * after we've gone through a COW cycle and they are dirty.
+ */
+static inline bool can_follow_write_pte(pte_t pte, unsigned int flags)
+{
+ return pte_write(pte) ||
+  ((flags & FOLL_FORCE) && (flags & FOLL_COW) && pte_dirty(pte));
+}
 
 /**
  * follow_page_mask - look up a page descriptor from a user-virtual address
@@ -168,7 +177,7 @@ split_fallthrough:
  }
  if ((flags & FOLL_NUMA) && pte_numa(pte))
   goto no_page;
- if ((flags & FOLL_WRITE) && !pte_write(pte))
+ if ((flags & FOLL_WRITE) && !can_follow_write_pte(pte, flags))
   goto unlock;
 
  page = vm_normal_page(vma, address, pte);
@@ -504,7 +513,7 @@ long __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,
      */
     if ((ret & VM_FAULT_WRITE) &&
         !(vma->vm_flags & VM_WRITE))
-     foll_flags &= ~FOLL_WRITE;
+     foll_flags |= FOLL_COW;
 
     cond_resched();
    }
-- 
1.7.1