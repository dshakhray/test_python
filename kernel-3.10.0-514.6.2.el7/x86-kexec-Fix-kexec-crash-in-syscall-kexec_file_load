From 8bb0a5fe1747fac4c3d6d22fdacbab8091c08940 Mon Sep 17 00:00:00 2001
From: Pingfan Liu <piliu@redhat.com>
Date: Tue, 8 Nov 2016 01:29:35 -0500
Subject: [x86] kexec: Fix kexec crash in syscall kexec_file_load()

Message-id: <1478568575-31700-1-git-send-email-piliu@corp.redhat.com>
Patchwork-id: 160287
O-Subject: [RHEL7.4 PATCH BZ1385109] x86/kexec: Fix kexec crash in syscall kexec_file_load()
Bugzilla: 1385109
Z-Bugzilla: 1395573
RH-Acked-by: Jeremy McNicoll <jmcnicol@redhat.com>
RH-Acked-by: Xunlei Pang <xpang@redhat.com>
RH-Acked-by: Dave Young <dyoung@redhat.com>

From: Pingfan Liu <piliu@redhat.com>

Upstream: e3c41e37b0f4b18cbd4dac76cbeece5a7558b909
BZ: 1385109

The original bug is a page fault crash that sometimes happens
on big machines when preparing ELF headers:

    BUG: unable to handle kernel paging request at ffffc90613fc9000
    IP: [<ffffffff8103d645>] prepare_elf64_ram_headers_callback+0x165/0x260

The bug is caused by us under-counting the number of memory ranges
and subsequently not allocating enough ELF header space for them.
The bug is typically masked on smaller systems, because the ELF header
allocation is rounded up to the next page.

This patch modifies the code in fill_up_crash_elf_data() by using
walk_system_ram_res() instead of walk_system_ram_range() to correctly
count the max number of crash memory ranges. That's because the
walk_system_ram_range() filters out small memory regions that
reside in the same page, but walk_system_ram_res() does not.

Signed-off-by: Pingfan Liu <piliu@redhat.com>
Brew: https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=12046036
Signed-off-by: Frantisek Hrbata <fhrbata@hrbata.com>

diff --git a/arch/x86/kernel/crash.c b/arch/x86/kernel/crash.c
index 4bffbc0..265b1c8 100644
--- a/arch/x86/kernel/crash.c
+++ b/arch/x86/kernel/crash.c
@@ -196,10 +196,9 @@ void native_machine_crash_shutdown(struct pt_regs *regs)
 }
 
 #ifdef CONFIG_KEXEC_FILE
-static int get_nr_ram_ranges_callback(unsigned long start_pfn,
-    unsigned long nr_pfn, void *arg)
+static int get_nr_ram_ranges_callback(u64 start, u64 end, void *arg)
 {
- int *nr_ranges = arg;
+ unsigned int *nr_ranges = arg;
 
  (*nr_ranges)++;
  return 0;
@@ -225,7 +224,7 @@ static void fill_up_crash_elf_data(struct crash_elf_data *ced,
 
  ced->image = image;
 
- walk_system_ram_range(0, -1, &nr_ranges,
+ walk_system_ram_res(0, -1, &nr_ranges,
     get_nr_ram_ranges_callback);
 
  ced->max_nr_ranges = nr_ranges;
-- 
1.7.1