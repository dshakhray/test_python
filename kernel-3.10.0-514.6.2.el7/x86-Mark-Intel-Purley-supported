From a63de12e053096a840432457d9028a4ee2b20e79 Mon Sep 17 00:00:00 2001
From: Steve Best <sbest@redhat.com>
Date: Fri, 2 Dec 2016 17:00:19 -0500
Subject: [x86] Mark Intel Purley supported

Message-id: <20161202170019.28713.70305.sendpatchset@ibm-p7r2-01.lab.bos.redhat.com>
Patchwork-id: 160991
O-Subject: [PATCH RHEL7.4 BZ1371748] Mark Intel Purley supported
Bugzilla: 1371748
Z-Bugzilla: 1402824
RH-Acked-by: David Arcari <darcari@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

RHBZ#:
------
https://bugzilla.redhat.com/show_bug.cgi?id=1371748

Description:
------------
Mark Purley processor CPU family 6 model 85 as supported.

In RHEL 7.3 we decided to only support 2S purley with a more stable bios
and some fixes we have in RHEL 7.4 we are now able to support 4S purley.

This patch also removes the code that was added to determine if the purley system
was 2S, since that code is no longer needed.

Brew:
-----
https://brewweb.devel.redhat.com/taskinfo?taskID=12189988

Upstream:
---------
This is a RHEL only change.

Test Status:
------------
Tested by me using Intel 4S purley (intel-purley-lr-02) and Dell 4S purley (dell-per940-01)
systems which are CPU family 6 model 85.

before the patch
[    0.000000] Detected CPU family 6 model 85
[    0.000000] Warning: Intel CPU model - this hardware has not undergone testin
g by Red Hat and might not be certified. Please consult https://hardware.redhat.
com for certified hardware.

after the patch
the above warning msg is no longer written out.

Some of the testing I did is listed below.

1) Was able to build the kernel from the src rpm and boot that kernel that I built successfully.
The time it took to build from the src rpm was good.

2) Was able to crash and create a kdump successfully.

QE has tested 4S purley systems and their testing was successful.

---------------------------------------------------------------
Steve Best

Signed-off-by: Frantisek Hrbata <fhrbata@hrbata.com>

diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index 877df2c..4d9d77f 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -896,6 +896,7 @@ static void rh_check_supported(void)
   case 94: /* Skylake-S */
   case 87: /* Knights Landing */
   case 86: /* Broadwell-DE SoC */
+  case 85: /* Purley */
   case 79: /* Broadwell-EP and EX */
   case 78: /* Skylake-Y */
   case 77: /* Atom Avoton */
@@ -903,9 +904,6 @@ static void rh_check_supported(void)
   case 70: /* Crystal Well */
   case 69: /* Haswell ULT */
    break;
-  case 85: /* Purley 2S */
-   if (dmi_socket_count == 2)
-    break;
   default:
    if (boot_cpu_data.x86_model > 63) {
     printk(KERN_CRIT
diff --git a/drivers/firmware/dmi_scan.c b/drivers/firmware/dmi_scan.c
index f9c9386..f1f6746 100644
--- a/drivers/firmware/dmi_scan.c
+++ b/drivers/firmware/dmi_scan.c
@@ -386,8 +386,6 @@ void __init dmi_memdev_walk(void)
  }
 }
 
-int dmi_socket_count = 0; /* used by rh_check_supported() */
-
 /*
  * Process a DMI table entry. Right now all we care about are the BIOS
  * and machine entries. For 2.5 we should pull the smbus controller info
@@ -422,9 +420,6 @@ static void __init dmi_decode(const struct dmi_header *dm, void *dummy)
   dmi_save_ident(dm, DMI_CHASSIS_SERIAL, 7);
   dmi_save_ident(dm, DMI_CHASSIS_ASSET_TAG, 8);
   break;
- case 4:  /* Processor Information */
-  dmi_socket_count++;
-  break;
  case 10: /* Onboard Devices Information */
   dmi_save_devices(dm);
   break;
diff --git a/include/linux/dmi.h b/include/linux/dmi.h
index 0bed810..f820f0a 100644
--- a/include/linux/dmi.h
+++ b/include/linux/dmi.h
@@ -83,8 +83,6 @@ struct dmi_device {
  void *device_data; /* Type specific data */
 };
 
-extern int dmi_socket_count;
-
 #ifdef CONFIG_DMI
 
 struct dmi_dev_onboard {
-- 
1.7.1