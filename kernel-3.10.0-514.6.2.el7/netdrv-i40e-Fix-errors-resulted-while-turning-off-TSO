From 48ababc63e53d8c8626aef8d8a25e36035f01b98 Mon Sep 17 00:00:00 2001
From: Stefan Assmann <sassmann@redhat.com>
Date: Tue, 1 Nov 2016 16:47:10 -0400
Subject: [netdrv] i40e: Fix errors resulted while turning off TSO

Message-id: <1478018830-7574-1-git-send-email-sassmann@redhat.com>
Patchwork-id: 160191
O-Subject: [RHEL7.4 PATCH] i40e: Fix errors resulted while turning off TSO
Bugzilla: 1378509
Z-Bugzilla: 1394708
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: David Arcari <darcari@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Steve Best <sbest@redhat.com>

From: Tushar Dave <tushar.n.dave@oracle.com>

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1378509
Brew: https://brewweb.devel.redhat.com/taskinfo?taskID=11990268
Testing: Tested by IBM.

On systems with 128 CPUs, turning off TSO results in errors,

i40e 0000:03:00.0: failed to get tracking for 1 vectors for VSI 400, err=-12
i40e 0000:03:00.0: Couldn't create FDir VSI
i40e 0000:03:00.0: i40e_ptp_init: PTP not supported on eth0
i40e 0000:03:00.0: couldn't add VEB, err I40E_ERR_ADMIN_QUEUE_ERROR aq_err I40E_AQ_RC_ENOENT
i40e 0000:03:00.0: rebuild of switch failed: -1, will try to set up simple PF connection
i40e 0000:03:00.0 eth0: adding 00:10:e0:8a:24:b6 vid=0

Enabling FD_SB without checking availability of MSI-X vector is the
root cause. This change adds necessary check.

Signed-off-by: Tushar Dave <tushar.n.dave@oracle.com>
Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit a70e407f6d0b0f63b17d468f78b666d33f264ba1)
Signed-off-by: Stefan Assmann <sassmann@redhat.com>
Signed-off-by: Frantisek Hrbata <fhrbata@hrbata.com>

diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index 00c4738..d2ecc04 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -284,6 +284,7 @@ struct i40e_pf {
 #endif /* I40E_FCOE */
  u16 num_lan_qps;           /* num lan queues this PF has set up */
  u16 num_lan_msix;          /* num queue vectors for the base PF vsi */
+ u16 num_fdsb_msix;         /* num queue vectors for sideband Fdir */
  u16 num_iwarp_msix;        /* num of iwarp vectors for this PF */
  int iwarp_base_vector;
  int queues_left;           /* queues left unclaimed */
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 589c85a..ba9ffd1 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -7230,7 +7230,7 @@ static int i40e_set_num_rings_in_vsi(struct i40e_vsi *vsi)
   vsi->alloc_queue_pairs = 1;
   vsi->num_desc = ALIGN(I40E_FDIR_RING_COUNT,
           I40E_REQ_DESCRIPTOR_MULTIPLE);
-  vsi->num_q_vectors = 1;
+  vsi->num_q_vectors = pf->num_fdsb_msix;
   break;
 
  case I40E_VSI_VMDQ2:
@@ -7618,9 +7618,11 @@ static int i40e_init_msix(struct i40e_pf *pf)
  /* reserve one vector for sideband flow director */
  if (pf->flags & I40E_FLAG_FD_SB_ENABLED) {
   if (vectors_left) {
+   pf->num_fdsb_msix = 1;
    v_budget++;
    vectors_left--;
   } else {
+   pf->num_fdsb_msix = 0;
    pf->flags &= ~I40E_FLAG_FD_SB_ENABLED;
   }
  }
@@ -8645,7 +8647,9 @@ bool i40e_set_ntuple(struct i40e_pf *pf, netdev_features_t features)
   /* Enable filters and mark for reset */
   if (!(pf->flags & I40E_FLAG_FD_SB_ENABLED))
    need_reset = true;
-  pf->flags |= I40E_FLAG_FD_SB_ENABLED;
+  /* enable FD_SB only if there is MSI-X vector */
+  if (pf->num_fdsb_msix > 0)
+   pf->flags |= I40E_FLAG_FD_SB_ENABLED;
  } else {
   /* turn off filters, mark for reset and clear SW filter list */
   if (pf->flags & I40E_FLAG_FD_SB_ENABLED) {
-- 
1.7.1